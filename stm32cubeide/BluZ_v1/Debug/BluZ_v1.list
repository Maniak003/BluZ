
BluZ_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000160  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002fb60  08000160  08000160  00001160  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002298  0802fcc0  0802fcc0  00030cc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08031f58  08031f58  000334d0  2**0
                  CONTENTS
  4 .ARM          00000008  08031f58  08031f58  00032f58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08031f60  08031f60  000334d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08031f60  08031f60  00032f60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08031f64  08031f64  00032f64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000004d0  20000000  08031f68  00033000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00009d04  200004d0  08032438  000334d0  2**4
                  ALLOC
 10 ._user_heap_stack 00000604  2000a1d4  08032438  000341d4  2**0
                  ALLOC
 11 .ARM.attributes 0000003c  00000000  00000000  000334d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003b8ea  00000000  00000000  0003350c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000a455  00000000  00000000  0006edf6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00003148  00000000  00000000  00079250  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000024fa  00000000  00000000  0007c398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000388f5  00000000  00000000  0007e892  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0004ae00  00000000  00000000  000b7187  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00117e74  00000000  00000000  00101f87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000087  00000000  00000000  00219dfb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000174b8  00000000  00000000  00219e84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008f  00000000  00000000  0023133c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loclists 00000077  00000000  00000000  002313cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000160 <__do_global_dtors_aux>:
 8000160:	b510      	push	{r4, lr}
 8000162:	4c05      	ldr	r4, [pc, #20]	@ (8000178 <__do_global_dtors_aux+0x18>)
 8000164:	7823      	ldrb	r3, [r4, #0]
 8000166:	b933      	cbnz	r3, 8000176 <__do_global_dtors_aux+0x16>
 8000168:	4b04      	ldr	r3, [pc, #16]	@ (800017c <__do_global_dtors_aux+0x1c>)
 800016a:	b113      	cbz	r3, 8000172 <__do_global_dtors_aux+0x12>
 800016c:	4804      	ldr	r0, [pc, #16]	@ (8000180 <__do_global_dtors_aux+0x20>)
 800016e:	f3af 8000 	nop.w
 8000172:	2301      	movs	r3, #1
 8000174:	7023      	strb	r3, [r4, #0]
 8000176:	bd10      	pop	{r4, pc}
 8000178:	200004d0 	.word	0x200004d0
 800017c:	00000000 	.word	0x00000000
 8000180:	0802fca8 	.word	0x0802fca8

08000184 <frame_dummy>:
 8000184:	b508      	push	{r3, lr}
 8000186:	4b03      	ldr	r3, [pc, #12]	@ (8000194 <frame_dummy+0x10>)
 8000188:	b11b      	cbz	r3, 8000192 <frame_dummy+0xe>
 800018a:	4903      	ldr	r1, [pc, #12]	@ (8000198 <frame_dummy+0x14>)
 800018c:	4803      	ldr	r0, [pc, #12]	@ (800019c <frame_dummy+0x18>)
 800018e:	f3af 8000 	nop.w
 8000192:	bd08      	pop	{r3, pc}
 8000194:	00000000 	.word	0x00000000
 8000198:	200004d4 	.word	0x200004d4
 800019c:	0802fca8 	.word	0x0802fca8

080001a0 <__aeabi_memset>:
 80001a0:	b470      	push	{r4, r5, r6}
 80001a2:	0784      	lsls	r4, r0, #30
 80001a4:	d046      	beq.n	8000234 <__aeabi_memset+0x94>
 80001a6:	1e4c      	subs	r4, r1, #1
 80001a8:	2900      	cmp	r1, #0
 80001aa:	d041      	beq.n	8000230 <__aeabi_memset+0x90>
 80001ac:	b2d5      	uxtb	r5, r2
 80001ae:	4603      	mov	r3, r0
 80001b0:	e002      	b.n	80001b8 <__aeabi_memset+0x18>
 80001b2:	1e61      	subs	r1, r4, #1
 80001b4:	b3e4      	cbz	r4, 8000230 <__aeabi_memset+0x90>
 80001b6:	460c      	mov	r4, r1
 80001b8:	f803 5b01 	strb.w	r5, [r3], #1
 80001bc:	0799      	lsls	r1, r3, #30
 80001be:	d1f8      	bne.n	80001b2 <__aeabi_memset+0x12>
 80001c0:	2c03      	cmp	r4, #3
 80001c2:	d92e      	bls.n	8000222 <__aeabi_memset+0x82>
 80001c4:	b2d5      	uxtb	r5, r2
 80001c6:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 80001ca:	2c0f      	cmp	r4, #15
 80001cc:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 80001d0:	d919      	bls.n	8000206 <__aeabi_memset+0x66>
 80001d2:	4626      	mov	r6, r4
 80001d4:	f103 0110 	add.w	r1, r3, #16
 80001d8:	3e10      	subs	r6, #16
 80001da:	2e0f      	cmp	r6, #15
 80001dc:	f841 5c10 	str.w	r5, [r1, #-16]
 80001e0:	f841 5c0c 	str.w	r5, [r1, #-12]
 80001e4:	f841 5c08 	str.w	r5, [r1, #-8]
 80001e8:	f841 5c04 	str.w	r5, [r1, #-4]
 80001ec:	f101 0110 	add.w	r1, r1, #16
 80001f0:	d8f2      	bhi.n	80001d8 <__aeabi_memset+0x38>
 80001f2:	f1a4 0110 	sub.w	r1, r4, #16
 80001f6:	f021 010f 	bic.w	r1, r1, #15
 80001fa:	f004 040f 	and.w	r4, r4, #15
 80001fe:	3110      	adds	r1, #16
 8000200:	2c03      	cmp	r4, #3
 8000202:	440b      	add	r3, r1
 8000204:	d90d      	bls.n	8000222 <__aeabi_memset+0x82>
 8000206:	461e      	mov	r6, r3
 8000208:	4621      	mov	r1, r4
 800020a:	3904      	subs	r1, #4
 800020c:	2903      	cmp	r1, #3
 800020e:	f846 5b04 	str.w	r5, [r6], #4
 8000212:	d8fa      	bhi.n	800020a <__aeabi_memset+0x6a>
 8000214:	1f21      	subs	r1, r4, #4
 8000216:	f021 0103 	bic.w	r1, r1, #3
 800021a:	3104      	adds	r1, #4
 800021c:	440b      	add	r3, r1
 800021e:	f004 0403 	and.w	r4, r4, #3
 8000222:	b12c      	cbz	r4, 8000230 <__aeabi_memset+0x90>
 8000224:	b2d2      	uxtb	r2, r2
 8000226:	441c      	add	r4, r3
 8000228:	f803 2b01 	strb.w	r2, [r3], #1
 800022c:	42a3      	cmp	r3, r4
 800022e:	d1fb      	bne.n	8000228 <__aeabi_memset+0x88>
 8000230:	bc70      	pop	{r4, r5, r6}
 8000232:	4770      	bx	lr
 8000234:	460c      	mov	r4, r1
 8000236:	4603      	mov	r3, r0
 8000238:	e7c2      	b.n	80001c0 <__aeabi_memset+0x20>

0800023a <strlen>:
 800023a:	4603      	mov	r3, r0
 800023c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000240:	2a00      	cmp	r2, #0
 8000242:	d1fb      	bne.n	800023c <strlen+0x2>
 8000244:	1a18      	subs	r0, r3, r0
 8000246:	3801      	subs	r0, #1
 8000248:	4770      	bx	lr
	...

0800024c <__aeabi_uldivmod>:
 800024c:	b953      	cbnz	r3, 8000264 <__aeabi_uldivmod+0x18>
 800024e:	b94a      	cbnz	r2, 8000264 <__aeabi_uldivmod+0x18>
 8000250:	2900      	cmp	r1, #0
 8000252:	bf08      	it	eq
 8000254:	2800      	cmpeq	r0, #0
 8000256:	bf1c      	itt	ne
 8000258:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 800025c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000260:	f000 b97e 	b.w	8000560 <__aeabi_idiv0>
 8000264:	f1ad 0c08 	sub.w	ip, sp, #8
 8000268:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800026c:	f000 f806 	bl	800027c <__udivmoddi4>
 8000270:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000274:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000278:	b004      	add	sp, #16
 800027a:	4770      	bx	lr

0800027c <__udivmoddi4>:
 800027c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000280:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8000282:	460c      	mov	r4, r1
 8000284:	2b00      	cmp	r3, #0
 8000286:	d14d      	bne.n	8000324 <__udivmoddi4+0xa8>
 8000288:	428a      	cmp	r2, r1
 800028a:	460f      	mov	r7, r1
 800028c:	4684      	mov	ip, r0
 800028e:	4696      	mov	lr, r2
 8000290:	fab2 f382 	clz	r3, r2
 8000294:	d960      	bls.n	8000358 <__udivmoddi4+0xdc>
 8000296:	b14b      	cbz	r3, 80002ac <__udivmoddi4+0x30>
 8000298:	fa02 fe03 	lsl.w	lr, r2, r3
 800029c:	f1c3 0220 	rsb	r2, r3, #32
 80002a0:	409f      	lsls	r7, r3
 80002a2:	fa00 fc03 	lsl.w	ip, r0, r3
 80002a6:	fa20 f202 	lsr.w	r2, r0, r2
 80002aa:	4317      	orrs	r7, r2
 80002ac:	ea4f 461e 	mov.w	r6, lr, lsr #16
 80002b0:	fa1f f48e 	uxth.w	r4, lr
 80002b4:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80002b8:	fbb7 f1f6 	udiv	r1, r7, r6
 80002bc:	fb06 7711 	mls	r7, r6, r1, r7
 80002c0:	fb01 f004 	mul.w	r0, r1, r4
 80002c4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002c8:	4290      	cmp	r0, r2
 80002ca:	d908      	bls.n	80002de <__udivmoddi4+0x62>
 80002cc:	eb1e 0202 	adds.w	r2, lr, r2
 80002d0:	f101 37ff 	add.w	r7, r1, #4294967295	@ 0xffffffff
 80002d4:	d202      	bcs.n	80002dc <__udivmoddi4+0x60>
 80002d6:	4290      	cmp	r0, r2
 80002d8:	f200 812d 	bhi.w	8000536 <__udivmoddi4+0x2ba>
 80002dc:	4639      	mov	r1, r7
 80002de:	1a12      	subs	r2, r2, r0
 80002e0:	fa1f fc8c 	uxth.w	ip, ip
 80002e4:	fbb2 f0f6 	udiv	r0, r2, r6
 80002e8:	fb06 2210 	mls	r2, r6, r0, r2
 80002ec:	fb00 f404 	mul.w	r4, r0, r4
 80002f0:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 80002f4:	4564      	cmp	r4, ip
 80002f6:	d908      	bls.n	800030a <__udivmoddi4+0x8e>
 80002f8:	eb1e 0c0c 	adds.w	ip, lr, ip
 80002fc:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000300:	d202      	bcs.n	8000308 <__udivmoddi4+0x8c>
 8000302:	4564      	cmp	r4, ip
 8000304:	f200 811a 	bhi.w	800053c <__udivmoddi4+0x2c0>
 8000308:	4610      	mov	r0, r2
 800030a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800030e:	ebac 0c04 	sub.w	ip, ip, r4
 8000312:	2100      	movs	r1, #0
 8000314:	b125      	cbz	r5, 8000320 <__udivmoddi4+0xa4>
 8000316:	fa2c f303 	lsr.w	r3, ip, r3
 800031a:	2200      	movs	r2, #0
 800031c:	e9c5 3200 	strd	r3, r2, [r5]
 8000320:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000324:	428b      	cmp	r3, r1
 8000326:	d905      	bls.n	8000334 <__udivmoddi4+0xb8>
 8000328:	b10d      	cbz	r5, 800032e <__udivmoddi4+0xb2>
 800032a:	e9c5 0100 	strd	r0, r1, [r5]
 800032e:	2100      	movs	r1, #0
 8000330:	4608      	mov	r0, r1
 8000332:	e7f5      	b.n	8000320 <__udivmoddi4+0xa4>
 8000334:	fab3 f183 	clz	r1, r3
 8000338:	2900      	cmp	r1, #0
 800033a:	d14d      	bne.n	80003d8 <__udivmoddi4+0x15c>
 800033c:	42a3      	cmp	r3, r4
 800033e:	f0c0 80f2 	bcc.w	8000526 <__udivmoddi4+0x2aa>
 8000342:	4290      	cmp	r0, r2
 8000344:	f080 80ef 	bcs.w	8000526 <__udivmoddi4+0x2aa>
 8000348:	4606      	mov	r6, r0
 800034a:	4623      	mov	r3, r4
 800034c:	4608      	mov	r0, r1
 800034e:	2d00      	cmp	r5, #0
 8000350:	d0e6      	beq.n	8000320 <__udivmoddi4+0xa4>
 8000352:	e9c5 6300 	strd	r6, r3, [r5]
 8000356:	e7e3      	b.n	8000320 <__udivmoddi4+0xa4>
 8000358:	2b00      	cmp	r3, #0
 800035a:	f040 80a2 	bne.w	80004a2 <__udivmoddi4+0x226>
 800035e:	1a8a      	subs	r2, r1, r2
 8000360:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000364:	fa1f f68e 	uxth.w	r6, lr
 8000368:	2101      	movs	r1, #1
 800036a:	fbb2 f4f7 	udiv	r4, r2, r7
 800036e:	fb07 2014 	mls	r0, r7, r4, r2
 8000372:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000376:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800037a:	fb06 f004 	mul.w	r0, r6, r4
 800037e:	4290      	cmp	r0, r2
 8000380:	d90f      	bls.n	80003a2 <__udivmoddi4+0x126>
 8000382:	eb1e 0202 	adds.w	r2, lr, r2
 8000386:	f104 38ff 	add.w	r8, r4, #4294967295	@ 0xffffffff
 800038a:	bf2c      	ite	cs
 800038c:	f04f 0901 	movcs.w	r9, #1
 8000390:	f04f 0900 	movcc.w	r9, #0
 8000394:	4290      	cmp	r0, r2
 8000396:	d903      	bls.n	80003a0 <__udivmoddi4+0x124>
 8000398:	f1b9 0f00 	cmp.w	r9, #0
 800039c:	f000 80c8 	beq.w	8000530 <__udivmoddi4+0x2b4>
 80003a0:	4644      	mov	r4, r8
 80003a2:	1a12      	subs	r2, r2, r0
 80003a4:	fa1f fc8c 	uxth.w	ip, ip
 80003a8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ac:	fb07 2210 	mls	r2, r7, r0, r2
 80003b0:	fb00 f606 	mul.w	r6, r0, r6
 80003b4:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 80003b8:	4566      	cmp	r6, ip
 80003ba:	d908      	bls.n	80003ce <__udivmoddi4+0x152>
 80003bc:	eb1e 0c0c 	adds.w	ip, lr, ip
 80003c0:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x150>
 80003c6:	4566      	cmp	r6, ip
 80003c8:	f200 80bb 	bhi.w	8000542 <__udivmoddi4+0x2c6>
 80003cc:	4610      	mov	r0, r2
 80003ce:	ebac 0c06 	sub.w	ip, ip, r6
 80003d2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003d6:	e79d      	b.n	8000314 <__udivmoddi4+0x98>
 80003d8:	f1c1 0620 	rsb	r6, r1, #32
 80003dc:	408b      	lsls	r3, r1
 80003de:	fa04 fe01 	lsl.w	lr, r4, r1
 80003e2:	fa22 f706 	lsr.w	r7, r2, r6
 80003e6:	fa20 fc06 	lsr.w	ip, r0, r6
 80003ea:	40f4      	lsrs	r4, r6
 80003ec:	408a      	lsls	r2, r1
 80003ee:	431f      	orrs	r7, r3
 80003f0:	ea4e 030c 	orr.w	r3, lr, ip
 80003f4:	fa00 fe01 	lsl.w	lr, r0, r1
 80003f8:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003fc:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000400:	fa1f fc87 	uxth.w	ip, r7
 8000404:	fbb4 f0f8 	udiv	r0, r4, r8
 8000408:	fb08 4410 	mls	r4, r8, r0, r4
 800040c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000410:	fb00 f90c 	mul.w	r9, r0, ip
 8000414:	45a1      	cmp	r9, r4
 8000416:	d90e      	bls.n	8000436 <__udivmoddi4+0x1ba>
 8000418:	193c      	adds	r4, r7, r4
 800041a:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 800041e:	bf2c      	ite	cs
 8000420:	f04f 0b01 	movcs.w	fp, #1
 8000424:	f04f 0b00 	movcc.w	fp, #0
 8000428:	45a1      	cmp	r9, r4
 800042a:	d903      	bls.n	8000434 <__udivmoddi4+0x1b8>
 800042c:	f1bb 0f00 	cmp.w	fp, #0
 8000430:	f000 8093 	beq.w	800055a <__udivmoddi4+0x2de>
 8000434:	4650      	mov	r0, sl
 8000436:	eba4 0409 	sub.w	r4, r4, r9
 800043a:	fa1f f983 	uxth.w	r9, r3
 800043e:	fbb4 f3f8 	udiv	r3, r4, r8
 8000442:	fb08 4413 	mls	r4, r8, r3, r4
 8000446:	fb03 fc0c 	mul.w	ip, r3, ip
 800044a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800044e:	45a4      	cmp	ip, r4
 8000450:	d906      	bls.n	8000460 <__udivmoddi4+0x1e4>
 8000452:	193c      	adds	r4, r7, r4
 8000454:	f103 38ff 	add.w	r8, r3, #4294967295	@ 0xffffffff
 8000458:	d201      	bcs.n	800045e <__udivmoddi4+0x1e2>
 800045a:	45a4      	cmp	ip, r4
 800045c:	d87a      	bhi.n	8000554 <__udivmoddi4+0x2d8>
 800045e:	4643      	mov	r3, r8
 8000460:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000464:	eba4 040c 	sub.w	r4, r4, ip
 8000468:	fba0 9802 	umull	r9, r8, r0, r2
 800046c:	4544      	cmp	r4, r8
 800046e:	46cc      	mov	ip, r9
 8000470:	4643      	mov	r3, r8
 8000472:	d302      	bcc.n	800047a <__udivmoddi4+0x1fe>
 8000474:	d106      	bne.n	8000484 <__udivmoddi4+0x208>
 8000476:	45ce      	cmp	lr, r9
 8000478:	d204      	bcs.n	8000484 <__udivmoddi4+0x208>
 800047a:	3801      	subs	r0, #1
 800047c:	ebb9 0c02 	subs.w	ip, r9, r2
 8000480:	eb68 0307 	sbc.w	r3, r8, r7
 8000484:	b15d      	cbz	r5, 800049e <__udivmoddi4+0x222>
 8000486:	ebbe 020c 	subs.w	r2, lr, ip
 800048a:	eb64 0403 	sbc.w	r4, r4, r3
 800048e:	fa04 f606 	lsl.w	r6, r4, r6
 8000492:	fa22 f301 	lsr.w	r3, r2, r1
 8000496:	40cc      	lsrs	r4, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	e9c5 6400 	strd	r6, r4, [r5]
 800049e:	2100      	movs	r1, #0
 80004a0:	e73e      	b.n	8000320 <__udivmoddi4+0xa4>
 80004a2:	fa02 fe03 	lsl.w	lr, r2, r3
 80004a6:	f1c3 0120 	rsb	r1, r3, #32
 80004aa:	fa04 f203 	lsl.w	r2, r4, r3
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	40cc      	lsrs	r4, r1
 80004b4:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80004b8:	fa20 f101 	lsr.w	r1, r0, r1
 80004bc:	fa1f f68e 	uxth.w	r6, lr
 80004c0:	fbb4 f0f7 	udiv	r0, r4, r7
 80004c4:	430a      	orrs	r2, r1
 80004c6:	fb07 4410 	mls	r4, r7, r0, r4
 80004ca:	0c11      	lsrs	r1, r2, #16
 80004cc:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80004d0:	fb00 f406 	mul.w	r4, r0, r6
 80004d4:	428c      	cmp	r4, r1
 80004d6:	d90e      	bls.n	80004f6 <__udivmoddi4+0x27a>
 80004d8:	eb1e 0101 	adds.w	r1, lr, r1
 80004dc:	f100 38ff 	add.w	r8, r0, #4294967295	@ 0xffffffff
 80004e0:	bf2c      	ite	cs
 80004e2:	f04f 0901 	movcs.w	r9, #1
 80004e6:	f04f 0900 	movcc.w	r9, #0
 80004ea:	428c      	cmp	r4, r1
 80004ec:	d902      	bls.n	80004f4 <__udivmoddi4+0x278>
 80004ee:	f1b9 0f00 	cmp.w	r9, #0
 80004f2:	d02c      	beq.n	800054e <__udivmoddi4+0x2d2>
 80004f4:	4640      	mov	r0, r8
 80004f6:	1b09      	subs	r1, r1, r4
 80004f8:	b292      	uxth	r2, r2
 80004fa:	fbb1 f4f7 	udiv	r4, r1, r7
 80004fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000502:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000506:	fb04 f106 	mul.w	r1, r4, r6
 800050a:	4291      	cmp	r1, r2
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x2a2>
 800050e:	eb1e 0202 	adds.w	r2, lr, r2
 8000512:	f104 38ff 	add.w	r8, r4, #4294967295	@ 0xffffffff
 8000516:	d201      	bcs.n	800051c <__udivmoddi4+0x2a0>
 8000518:	4291      	cmp	r1, r2
 800051a:	d815      	bhi.n	8000548 <__udivmoddi4+0x2cc>
 800051c:	4644      	mov	r4, r8
 800051e:	1a52      	subs	r2, r2, r1
 8000520:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000524:	e721      	b.n	800036a <__udivmoddi4+0xee>
 8000526:	1a86      	subs	r6, r0, r2
 8000528:	eb64 0303 	sbc.w	r3, r4, r3
 800052c:	2001      	movs	r0, #1
 800052e:	e70e      	b.n	800034e <__udivmoddi4+0xd2>
 8000530:	3c02      	subs	r4, #2
 8000532:	4472      	add	r2, lr
 8000534:	e735      	b.n	80003a2 <__udivmoddi4+0x126>
 8000536:	3902      	subs	r1, #2
 8000538:	4472      	add	r2, lr
 800053a:	e6d0      	b.n	80002de <__udivmoddi4+0x62>
 800053c:	44f4      	add	ip, lr
 800053e:	3802      	subs	r0, #2
 8000540:	e6e3      	b.n	800030a <__udivmoddi4+0x8e>
 8000542:	44f4      	add	ip, lr
 8000544:	3802      	subs	r0, #2
 8000546:	e742      	b.n	80003ce <__udivmoddi4+0x152>
 8000548:	3c02      	subs	r4, #2
 800054a:	4472      	add	r2, lr
 800054c:	e7e7      	b.n	800051e <__udivmoddi4+0x2a2>
 800054e:	3802      	subs	r0, #2
 8000550:	4471      	add	r1, lr
 8000552:	e7d0      	b.n	80004f6 <__udivmoddi4+0x27a>
 8000554:	3b02      	subs	r3, #2
 8000556:	443c      	add	r4, r7
 8000558:	e782      	b.n	8000460 <__udivmoddi4+0x1e4>
 800055a:	3802      	subs	r0, #2
 800055c:	443c      	add	r4, r7
 800055e:	e76a      	b.n	8000436 <__udivmoddi4+0x1ba>

08000560 <__aeabi_idiv0>:
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop

08000564 <LL_RCC_ClearResetFlags>:
  * @brief  Set RMVF bit to clear the reset flags.
  * @rmtoll CSR          RMVF          LL_RCC_ClearResetFlags
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ClearResetFlags(void)
{
 8000564:	b480      	push	{r7}
 8000566:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8000568:	4b06      	ldr	r3, [pc, #24]	@ (8000584 <LL_RCC_ClearResetFlags+0x20>)
 800056a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800056e:	4a05      	ldr	r2, [pc, #20]	@ (8000584 <LL_RCC_ClearResetFlags+0x20>)
 8000570:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000574:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
}
 8000578:	bf00      	nop
 800057a:	46bd      	mov	sp, r7
 800057c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop
 8000584:	46020c00 	.word	0x46020c00

08000588 <MX_APPE_Config>:
/* Functions Definition ------------------------------------------------------*/
/**
 * @brief   System Initialisation.
 */
void MX_APPE_Config(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	af00      	add	r7, sp, #0
  /* Configure HSE Tuning */
  Config_HSE();
 800058c:	f000 f862 	bl	8000654 <Config_HSE>
}
 8000590:	bf00      	nop
 8000592:	bd80      	pop	{r7, pc}

08000594 <MX_APPE_Init>:

/**
 * @brief   System Initialisation.
 */
uint32_t MX_APPE_Init(void *p_param)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
  APP_DEBUG_SIGNAL_SET(APP_APPE_INIT);
 800059c:	2000      	movs	r0, #0
 800059e:	f009 fec0 	bl	800a322 <APP_DEBUG_SIGNAL_SET>

  UNUSED(p_param);

  /* System initialization */
  System_Init();
 80005a2:	f000 f871 	bl	8000688 <System_Init>

  /* Configure the system Power Mode */
  SystemPower_Config();
 80005a6:	f000 f87d 	bl	80006a4 <SystemPower_Config>

  /* Initialize the Advance Memory Manager */
  AMM_Init (&ammInitConfig);
 80005aa:	4824      	ldr	r0, [pc, #144]	@ (800063c <MX_APPE_Init+0xa8>)
 80005ac:	f00d fda2 	bl	800e0f4 <AMM_Init>

  /* Register the AMM background task */
  UTIL_SEQ_RegTask(1U << CFG_TASK_AMM_BCKGND, UTIL_SEQ_RFU, AMM_BackgroundProcess);
 80005b0:	4a23      	ldr	r2, [pc, #140]	@ (8000640 <MX_APPE_Init+0xac>)
 80005b2:	2100      	movs	r1, #0
 80005b4:	2020      	movs	r0, #32
 80005b6:	f010 f967 	bl	8010888 <UTIL_SEQ_RegTask>
  /* Initialize the Simple NVM Arbiter */
  SNVMA_Init ((uint32_t *)CFG_SNVMA_START_ADDRESS);
 80005ba:	4b22      	ldr	r3, [pc, #136]	@ (8000644 <MX_APPE_Init+0xb0>)
 80005bc:	881b      	ldrh	r3, [r3, #0]
 80005be:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80005c2:	4293      	cmp	r3, r2
 80005c4:	d00e      	beq.n	80005e4 <MX_APPE_Init+0x50>
 80005c6:	4b1f      	ldr	r3, [pc, #124]	@ (8000644 <MX_APPE_Init+0xb0>)
 80005c8:	881b      	ldrh	r3, [r3, #0]
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d008      	beq.n	80005e0 <MX_APPE_Init+0x4c>
 80005ce:	4b1d      	ldr	r3, [pc, #116]	@ (8000644 <MX_APPE_Init+0xb0>)
 80005d0:	881b      	ldrh	r3, [r3, #0]
 80005d2:	029b      	lsls	r3, r3, #10
 80005d4:	0b5b      	lsrs	r3, r3, #13
 80005d6:	f503 537f 	add.w	r3, r3, #16320	@ 0x3fc0
 80005da:	333e      	adds	r3, #62	@ 0x3e
 80005dc:	035b      	lsls	r3, r3, #13
 80005de:	e002      	b.n	80005e6 <MX_APPE_Init+0x52>
 80005e0:	4b19      	ldr	r3, [pc, #100]	@ (8000648 <MX_APPE_Init+0xb4>)
 80005e2:	e000      	b.n	80005e6 <MX_APPE_Init+0x52>
 80005e4:	4b18      	ldr	r3, [pc, #96]	@ (8000648 <MX_APPE_Init+0xb4>)
 80005e6:	4618      	mov	r0, r3
 80005e8:	f00b fbc2 	bl	800bd70 <SNVMA_Init>

  /* Register the flash manager task */
  UTIL_SEQ_RegTask(1U << CFG_TASK_FLASH_MANAGER_BCKGND, UTIL_SEQ_RFU, FM_BackgroundProcess);
 80005ec:	4a17      	ldr	r2, [pc, #92]	@ (800064c <MX_APPE_Init+0xb8>)
 80005ee:	2100      	movs	r1, #0
 80005f0:	2040      	movs	r0, #64	@ 0x40
 80005f2:	f010 f949 	bl	8010888 <UTIL_SEQ_RegTask>

  /* USER CODE BEGIN APPE_Init_1 */

  /* USER CODE END APPE_Init_1 */
  UTIL_SEQ_RegTask(1U << CFG_TASK_BPKA, UTIL_SEQ_RFU, BPKA_BG_Process);
 80005f6:	4a16      	ldr	r2, [pc, #88]	@ (8000650 <MX_APPE_Init+0xbc>)
 80005f8:	2100      	movs	r1, #0
 80005fa:	2010      	movs	r0, #16
 80005fc:	f010 f944 	bl	8010888 <UTIL_SEQ_RegTask>

  BPKA_Reset( );
 8000600:	f009 fa54 	bl	8009aac <BPKA_Reset>

  RNG_Init();
 8000604:	f000 f89c 	bl	8000740 <RNG_Init>

  /* Disable flash before any use - RFTS */
  FD_SetStatus (FD_FLASHACCESS_RFTS, LL_FLASH_DISABLE);
 8000608:	2101      	movs	r1, #1
 800060a:	2001      	movs	r0, #1
 800060c:	f00a fef8 	bl	800b400 <FD_SetStatus>
  /* Enable RFTS Bypass for flash operation - Since LL has not started yet */
  FD_SetStatus (FD_FLASHACCESS_RFTS_BYPASS, LL_FLASH_ENABLE);
 8000610:	2100      	movs	r1, #0
 8000612:	2002      	movs	r0, #2
 8000614:	f00a fef4 	bl	800b400 <FD_SetStatus>
  /* Enable flash system flag */
  FD_SetStatus (FD_FLASHACCESS_SYSTEM, LL_FLASH_ENABLE);
 8000618:	2100      	movs	r1, #0
 800061a:	2000      	movs	r0, #0
 800061c:	f00a fef0 	bl	800b400 <FD_SetStatus>

  APP_BLE_Init();
 8000620:	f007 fe12 	bl	8008248 <APP_BLE_Init>

  /* Disable RFTS Bypass for flash operation - Since LL has not started yet */
  FD_SetStatus (FD_FLASHACCESS_RFTS_BYPASS, LL_FLASH_DISABLE);
 8000624:	2101      	movs	r1, #1
 8000626:	2002      	movs	r0, #2
 8000628:	f00a feea 	bl	800b400 <FD_SetStatus>

  /* USER CODE BEGIN APPE_Init_2 */

  /* USER CODE END APPE_Init_2 */
  APP_DEBUG_SIGNAL_RESET(APP_APPE_INIT);
 800062c:	2000      	movs	r0, #0
 800062e:	f009 fe83 	bl	800a338 <APP_DEBUG_SIGNAL_RESET>
  return WPAN_SUCCESS;
 8000632:	2300      	movs	r3, #0
}
 8000634:	4618      	mov	r0, r3
 8000636:	3708      	adds	r7, #8
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	20000010 	.word	0x20000010
 8000640:	0800e801 	.word	0x0800e801
 8000644:	0bf907a0 	.word	0x0bf907a0
 8000648:	080fc000 	.word	0x080fc000
 800064c:	0800b725 	.word	0x0800b725
 8000650:	08009ca5 	.word	0x08009ca5

08000654 <Config_HSE>:
/**
 * @brief Configure HSE by read this Tuning from OTP
 *
 */
static void Config_HSE(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b082      	sub	sp, #8
 8000658:	af00      	add	r7, sp, #0
  OTP_Data_s* otp_ptr = NULL;
 800065a:	2300      	movs	r3, #0
 800065c:	607b      	str	r3, [r7, #4]

  /* Read HSE_Tuning from OTP */
  if (OTP_Read(DEFAULT_OTP_IDX, &otp_ptr) != HAL_OK)
 800065e:	1d3b      	adds	r3, r7, #4
 8000660:	4619      	mov	r1, r3
 8000662:	2000      	movs	r0, #0
 8000664:	f00e ffc8 	bl	800f5f8 <OTP_Read>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d003      	beq.n	8000676 <Config_HSE+0x22>
  {
    /* OTP no present in flash, apply default gain */
    HAL_RCCEx_HSESetTrimming(0x0C);
 800066e:	200c      	movs	r0, #12
 8000670:	f005 f9cc 	bl	8005a0c <HAL_RCCEx_HSESetTrimming>
  }
  else
  {
    HAL_RCCEx_HSESetTrimming(otp_ptr->hsetune);
  }
}
 8000674:	e004      	b.n	8000680 <Config_HSE+0x2c>
    HAL_RCCEx_HSESetTrimming(otp_ptr->hsetune);
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	7b9b      	ldrb	r3, [r3, #14]
 800067a:	4618      	mov	r0, r3
 800067c:	f005 f9c6 	bl	8005a0c <HAL_RCCEx_HSESetTrimming>
}
 8000680:	bf00      	nop
 8000682:	3708      	adds	r7, #8
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}

08000688 <System_Init>:

/**
 *
 */
static void System_Init( void )
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
  /* Clear RCC RESET flag */
  LL_RCC_ClearResetFlags();
 800068c:	f7ff ff6a 	bl	8000564 <LL_RCC_ClearResetFlags>

  UTIL_TIMER_Init();
 8000690:	f010 f9a0 	bl	80109d4 <UTIL_TIMER_Init>

  /* Enable wakeup out of standby from RTC ( UTIL_TIMER )*/
  HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN7_HIGH_3);
 8000694:	4802      	ldr	r0, [pc, #8]	@ (80006a0 <System_Init+0x18>)
 8000696:	f004 f88b 	bl	80047b0 <HAL_PWR_EnableWakeUpPin>

#if ( CFG_LPM_LEVEL != 0)
  system_startup_done = TRUE;
#endif /* ( CFG_LPM_LEVEL != 0) */

  return;
 800069a:	bf00      	nop
}
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	30000040 	.word	0x30000040

080006a4 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b088      	sub	sp, #32
 80006a8:	af00      	add	r7, sp, #0
#if (CFG_SCM_SUPPORTED == 1)
  /* Initialize System Clock Manager */
  scm_init();
 80006aa:	f00f fa65 	bl	800fb78 <scm_init>
#endif /* CFG_SCM_SUPPORTED */

#if (CFG_DEBUGGER_LEVEL == 0)
  /* Pins used by SerialWire Debug are now analog input */
  GPIO_InitTypeDef DbgIOsInit = {0};
 80006ae:	f107 030c 	add.w	r3, r7, #12
 80006b2:	2200      	movs	r2, #0
 80006b4:	601a      	str	r2, [r3, #0]
 80006b6:	605a      	str	r2, [r3, #4]
 80006b8:	609a      	str	r2, [r3, #8]
 80006ba:	60da      	str	r2, [r3, #12]
 80006bc:	611a      	str	r2, [r3, #16]
  DbgIOsInit.Mode = GPIO_MODE_ANALOG;
 80006be:	2303      	movs	r3, #3
 80006c0:	613b      	str	r3, [r7, #16]
  DbgIOsInit.Pull = GPIO_NOPULL;
 80006c2:	2300      	movs	r3, #0
 80006c4:	617b      	str	r3, [r7, #20]
  DbgIOsInit.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80006c6:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80006ca:	60fb      	str	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006cc:	4b19      	ldr	r3, [pc, #100]	@ (8000734 <SystemPower_Config+0x90>)
 80006ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80006d2:	4a18      	ldr	r2, [pc, #96]	@ (8000734 <SystemPower_Config+0x90>)
 80006d4:	f043 0301 	orr.w	r3, r3, #1
 80006d8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80006dc:	4b15      	ldr	r3, [pc, #84]	@ (8000734 <SystemPower_Config+0x90>)
 80006de:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80006e2:	f003 0301 	and.w	r3, r3, #1
 80006e6:	60bb      	str	r3, [r7, #8]
 80006e8:	68bb      	ldr	r3, [r7, #8]
  HAL_GPIO_Init(GPIOA, &DbgIOsInit);
 80006ea:	f107 030c 	add.w	r3, r7, #12
 80006ee:	4619      	mov	r1, r3
 80006f0:	4811      	ldr	r0, [pc, #68]	@ (8000738 <SystemPower_Config+0x94>)
 80006f2:	f003 fc45 	bl	8003f80 <HAL_GPIO_Init>

  DbgIOsInit.Mode = GPIO_MODE_ANALOG;
 80006f6:	2303      	movs	r3, #3
 80006f8:	613b      	str	r3, [r7, #16]
  DbgIOsInit.Pull = GPIO_NOPULL;
 80006fa:	2300      	movs	r3, #0
 80006fc:	617b      	str	r3, [r7, #20]
  DbgIOsInit.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80006fe:	2318      	movs	r3, #24
 8000700:	60fb      	str	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000702:	4b0c      	ldr	r3, [pc, #48]	@ (8000734 <SystemPower_Config+0x90>)
 8000704:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000708:	4a0a      	ldr	r2, [pc, #40]	@ (8000734 <SystemPower_Config+0x90>)
 800070a:	f043 0302 	orr.w	r3, r3, #2
 800070e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000712:	4b08      	ldr	r3, [pc, #32]	@ (8000734 <SystemPower_Config+0x90>)
 8000714:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000718:	f003 0302 	and.w	r3, r3, #2
 800071c:	607b      	str	r3, [r7, #4]
 800071e:	687b      	ldr	r3, [r7, #4]
  HAL_GPIO_Init(GPIOB, &DbgIOsInit);
 8000720:	f107 030c 	add.w	r3, r7, #12
 8000724:	4619      	mov	r1, r3
 8000726:	4805      	ldr	r0, [pc, #20]	@ (800073c <SystemPower_Config+0x98>)
 8000728:	f003 fc2a 	bl	8003f80 <HAL_GPIO_Init>
#endif /* (CFG_LPM_LEVEL != 0)  */

  /* USER CODE BEGIN SystemPower_Config */

  /* USER CODE END SystemPower_Config */
}
 800072c:	bf00      	nop
 800072e:	3720      	adds	r7, #32
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	46020c00 	.word	0x46020c00
 8000738:	42020000 	.word	0x42020000
 800073c:	42020400 	.word	0x42020400

08000740 <RNG_Init>:

/**
 * @brief Initialize Random Number Generator module
 */
static void RNG_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
  HW_RNG_Start();
 8000744:	f00a fb0c 	bl	800ad60 <HW_RNG_Start>

  UTIL_SEQ_RegTask(1U << CFG_TASK_HW_RNG, UTIL_SEQ_RFU, (void (*)(void))HW_RNG_Process);
 8000748:	4a03      	ldr	r2, [pc, #12]	@ (8000758 <RNG_Init+0x18>)
 800074a:	2100      	movs	r1, #0
 800074c:	2001      	movs	r0, #1
 800074e:	f010 f89b 	bl	8010888 <UTIL_SEQ_RegTask>
}
 8000752:	bf00      	nop
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	0800ae51 	.word	0x0800ae51

0800075c <AMM_WrapperInit>:

static void AMM_WrapperInit (uint32_t * const p_PoolAddr, const uint32_t PoolSize)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
 8000764:	6039      	str	r1, [r7, #0]
  UTIL_MM_Init ((uint8_t *)p_PoolAddr, ((size_t)PoolSize * sizeof(uint32_t)));
 8000766:	683b      	ldr	r3, [r7, #0]
 8000768:	009b      	lsls	r3, r3, #2
 800076a:	4619      	mov	r1, r3
 800076c:	6878      	ldr	r0, [r7, #4]
 800076e:	f00e f973 	bl	800ea58 <UTIL_MM_Init>
}
 8000772:	bf00      	nop
 8000774:	3708      	adds	r7, #8
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}

0800077a <AMM_WrapperAllocate>:

static uint32_t * AMM_WrapperAllocate (const uint32_t BufferSize)
{
 800077a:	b580      	push	{r7, lr}
 800077c:	b082      	sub	sp, #8
 800077e:	af00      	add	r7, sp, #0
 8000780:	6078      	str	r0, [r7, #4]
  return (uint32_t *)UTIL_MM_GetBuffer (((size_t)BufferSize * sizeof(uint32_t)));
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	009b      	lsls	r3, r3, #2
 8000786:	4618      	mov	r0, r3
 8000788:	f00e f89a 	bl	800e8c0 <UTIL_MM_GetBuffer>
 800078c:	4603      	mov	r3, r0
}
 800078e:	4618      	mov	r0, r3
 8000790:	3708      	adds	r7, #8
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}

08000796 <AMM_WrapperFree>:

static void AMM_WrapperFree (uint32_t * const p_BufferAddr)
{
 8000796:	b580      	push	{r7, lr}
 8000798:	b082      	sub	sp, #8
 800079a:	af00      	add	r7, sp, #0
 800079c:	6078      	str	r0, [r7, #4]
  UTIL_MM_ReleaseBuffer ((void *)p_BufferAddr);
 800079e:	6878      	ldr	r0, [r7, #4]
 80007a0:	f00e f91e 	bl	800e9e0 <UTIL_MM_ReleaseBuffer>
}
 80007a4:	bf00      	nop
 80007a6:	3708      	adds	r7, #8
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}

080007ac <MX_APPE_Process>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void MX_APPE_Process(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 80007b0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80007b4:	f00f ff66 	bl	8010684 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 80007b8:	bf00      	nop
 80007ba:	bd80      	pop	{r7, pc}

080007bc <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle( void )
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
#if ( CFG_LPM_LEVEL != 0)
  HAL_SuspendTick();
  UTIL_LPM_EnterLowPower();
  HAL_ResumeTick();
#endif /* CFG_LPM_LEVEL */
  return;
 80007c0:	bf00      	nop
}
 80007c2:	46bd      	mov	sp, r7
 80007c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c8:	4770      	bx	lr

080007ca <UTIL_SEQ_PreIdle>:

void UTIL_SEQ_PreIdle( void )
{
 80007ca:	b480      	push	{r7}
 80007cc:	af00      	add	r7, sp, #0
#endif /* STM32WBAXX_SI_CUT1_0 */
#endif /* CFG_LPM_LEVEL */
  /* USER CODE BEGIN UTIL_SEQ_PreIdle_2 */

  /* USER CODE END UTIL_SEQ_PreIdle_2 */
  return;
 80007ce:	bf00      	nop
}
 80007d0:	46bd      	mov	sp, r7
 80007d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d6:	4770      	bx	lr

080007d8 <UTIL_SEQ_PostIdle>:

void UTIL_SEQ_PostIdle( void )
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0
  ll_sys_dp_slp_exit();
#endif /* CFG_LPM_LEVEL */
  /* USER CODE BEGIN UTIL_SEQ_PostIdle_2 */

  /* USER CODE END UTIL_SEQ_PostIdle_2 */
  return;
 80007dc:	bf00      	nop
}
 80007de:	46bd      	mov	sp, r7
 80007e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e4:	4770      	bx	lr

080007e6 <BPKACB_Process>:

void BPKACB_Process( void )
{
 80007e6:	b580      	push	{r7, lr}
 80007e8:	af00      	add	r7, sp, #0
  UTIL_SEQ_SetTask(1U << CFG_TASK_BPKA, CFG_SEQ_PRIO_0);
 80007ea:	2100      	movs	r1, #0
 80007ec:	2010      	movs	r0, #16
 80007ee:	f010 f86d 	bl	80108cc <UTIL_SEQ_SetTask>
}
 80007f2:	bf00      	nop
 80007f4:	bd80      	pop	{r7, pc}

080007f6 <HWCB_RNG_Process>:

/**
 * @brief Callback used by 'Random Generator' to launch Task to generate Random Numbers
 */
void HWCB_RNG_Process( void )
{
 80007f6:	b580      	push	{r7, lr}
 80007f8:	af00      	add	r7, sp, #0
  UTIL_SEQ_SetTask(1U << CFG_TASK_HW_RNG, CFG_TASK_PRIO_HW_RNG);
 80007fa:	2100      	movs	r1, #0
 80007fc:	2001      	movs	r0, #1
 80007fe:	f010 f865 	bl	80108cc <UTIL_SEQ_SetTask>
}
 8000802:	bf00      	nop
 8000804:	bd80      	pop	{r7, pc}
	...

08000808 <AMM_RegisterBasicMemoryManager>:

void AMM_RegisterBasicMemoryManager (AMM_BasicMemoryManagerFunctions_t * const p_BasicMemoryManagerFunctions)
{
 8000808:	b480      	push	{r7}
 800080a:	b083      	sub	sp, #12
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  /* Fulfill the function handle */
  p_BasicMemoryManagerFunctions->Init = AMM_WrapperInit;
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	4a07      	ldr	r2, [pc, #28]	@ (8000830 <AMM_RegisterBasicMemoryManager+0x28>)
 8000814:	601a      	str	r2, [r3, #0]
  p_BasicMemoryManagerFunctions->Allocate = AMM_WrapperAllocate;
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	4a06      	ldr	r2, [pc, #24]	@ (8000834 <AMM_RegisterBasicMemoryManager+0x2c>)
 800081a:	605a      	str	r2, [r3, #4]
  p_BasicMemoryManagerFunctions->Free = AMM_WrapperFree;
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	4a06      	ldr	r2, [pc, #24]	@ (8000838 <AMM_RegisterBasicMemoryManager+0x30>)
 8000820:	609a      	str	r2, [r3, #8]
}
 8000822:	bf00      	nop
 8000824:	370c      	adds	r7, #12
 8000826:	46bd      	mov	sp, r7
 8000828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082c:	4770      	bx	lr
 800082e:	bf00      	nop
 8000830:	0800075d 	.word	0x0800075d
 8000834:	0800077b 	.word	0x0800077b
 8000838:	08000797 	.word	0x08000797

0800083c <AMM_ProcessRequest>:

void AMM_ProcessRequest (void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
  /* Ask for AMM background task scheduling */
  UTIL_SEQ_SetTask(1U << CFG_TASK_AMM_BCKGND, CFG_SEQ_PRIO_0);
 8000840:	2100      	movs	r1, #0
 8000842:	2020      	movs	r0, #32
 8000844:	f010 f842 	bl	80108cc <UTIL_SEQ_SetTask>
}
 8000848:	bf00      	nop
 800084a:	bd80      	pop	{r7, pc}

0800084c <FM_ProcessRequest>:

void FM_ProcessRequest (void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  /* Schedule the background process */
  UTIL_SEQ_SetTask(1U << CFG_TASK_FLASH_MANAGER_BCKGND, CFG_SEQ_PRIO_0);
 8000850:	2100      	movs	r1, #0
 8000852:	2040      	movs	r0, #64	@ 0x40
 8000854:	f010 f83a 	bl	80108cc <UTIL_SEQ_SetTask>
}
 8000858:	bf00      	nop
 800085a:	bd80      	pop	{r7, pc}

0800085c <NotifyAct>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void NotifyAct(uint8_t SRC) {
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0
 8000862:	4603      	mov	r3, r0
 8000864:	71fb      	strb	r3, [r7, #7]
	if (SoundEnable) {
 8000866:	4b22      	ldr	r3, [pc, #136]	@ (80008f0 <NotifyAct+0x94>)
 8000868:	781b      	ldrb	r3, [r3, #0]
 800086a:	2b00      	cmp	r3, #0
 800086c:	d00a      	beq.n	8000884 <NotifyAct+0x28>
		if (SRC & 0b00000001) {
 800086e:	79fb      	ldrb	r3, [r7, #7]
 8000870:	f003 0301 	and.w	r3, r3, #1
 8000874:	2b00      	cmp	r3, #0
 8000876:	d005      	beq.n	8000884 <NotifyAct+0x28>
			SoundFlag = true;
 8000878:	4b1e      	ldr	r3, [pc, #120]	@ (80008f4 <NotifyAct+0x98>)
 800087a:	2201      	movs	r2, #1
 800087c:	701a      	strb	r2, [r3, #0]
			HAL_LPTIM_Counter_Start(&hlptim2);
 800087e:	481e      	ldr	r0, [pc, #120]	@ (80008f8 <NotifyAct+0x9c>)
 8000880:	f003 fe2c 	bl	80044dc <HAL_LPTIM_Counter_Start>
		}
	}

	if (VibroEnable) {
 8000884:	4b1d      	ldr	r3, [pc, #116]	@ (80008fc <NotifyAct+0xa0>)
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	2b00      	cmp	r3, #0
 800088a:	d00c      	beq.n	80008a6 <NotifyAct+0x4a>
		if (SRC & 0b00000010) {
 800088c:	79fb      	ldrb	r3, [r7, #7]
 800088e:	f003 0302 	and.w	r3, r3, #2
 8000892:	2b00      	cmp	r3, #0
 8000894:	d007      	beq.n	80008a6 <NotifyAct+0x4a>
			VibroFlag = true;
 8000896:	4b1a      	ldr	r3, [pc, #104]	@ (8000900 <NotifyAct+0xa4>)
 8000898:	2201      	movs	r2, #1
 800089a:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(VIBRO_GPIO_Port, VIBRO_Pin, GPIO_PIN_SET);
 800089c:	2201      	movs	r2, #1
 800089e:	2140      	movs	r1, #64	@ 0x40
 80008a0:	4818      	ldr	r0, [pc, #96]	@ (8000904 <NotifyAct+0xa8>)
 80008a2:	f003 fcb9 	bl	8004218 <HAL_GPIO_WritePin>
		}
	}

	if (LEDEnable) {
 80008a6:	4b18      	ldr	r3, [pc, #96]	@ (8000908 <NotifyAct+0xac>)
 80008a8:	781b      	ldrb	r3, [r3, #0]
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d00c      	beq.n	80008c8 <NotifyAct+0x6c>
		if (SRC & 0b00000100) {
 80008ae:	79fb      	ldrb	r3, [r7, #7]
 80008b0:	f003 0304 	and.w	r3, r3, #4
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d007      	beq.n	80008c8 <NotifyAct+0x6c>
			LEDflag = true;
 80008b8:	4b14      	ldr	r3, [pc, #80]	@ (800090c <NotifyAct+0xb0>)
 80008ba:	2201      	movs	r2, #1
 80008bc:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80008be:	2201      	movs	r2, #1
 80008c0:	2120      	movs	r1, #32
 80008c2:	4810      	ldr	r0, [pc, #64]	@ (8000904 <NotifyAct+0xa8>)
 80008c4:	f003 fca8 	bl	8004218 <HAL_GPIO_WritePin>
		}
	}
	if (SoundEnable || VibroEnable || LEDEnable) {
 80008c8:	4b09      	ldr	r3, [pc, #36]	@ (80008f0 <NotifyAct+0x94>)
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d107      	bne.n	80008e0 <NotifyAct+0x84>
 80008d0:	4b0a      	ldr	r3, [pc, #40]	@ (80008fc <NotifyAct+0xa0>)
 80008d2:	781b      	ldrb	r3, [r3, #0]
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d103      	bne.n	80008e0 <NotifyAct+0x84>
 80008d8:	4b0b      	ldr	r3, [pc, #44]	@ (8000908 <NotifyAct+0xac>)
 80008da:	781b      	ldrb	r3, [r3, #0]
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d002      	beq.n	80008e6 <NotifyAct+0x8a>
		HAL_TIM_Base_Start_IT(&htim1);	// Таймер для вибро и звука
 80008e0:	480b      	ldr	r0, [pc, #44]	@ (8000910 <NotifyAct+0xb4>)
 80008e2:	f005 fc6b 	bl	80061bc <HAL_TIM_Base_Start_IT>
	}
}
 80008e6:	bf00      	nop
 80008e8:	3708      	adds	r7, #8
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	20000020 	.word	0x20000020
 80008f4:	2000170a 	.word	0x2000170a
 80008f8:	20001588 	.word	0x20001588
 80008fc:	20000021 	.word	0x20000021
 8000900:	2000170b 	.word	0x2000170b
 8000904:	42020000 	.word	0x42020000
 8000908:	20000022 	.word	0x20000022
 800090c:	20001709 	.word	0x20001709
 8000910:	20001628 	.word	0x20001628

08000914 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000918:	f001 f8ba 	bl	8001a90 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 800091c:	f7ff fe34 	bl	8000588 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000920:	f000 f886 	bl	8000a30 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000924:	f000 f8e4 	bl	8000af0 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000928:	f000 fb4e 	bl	8000fc8 <MX_GPIO_Init>
  MX_GPDMA1_Init();
 800092c:	f000 f966 	bl	8000bfc <MX_GPDMA1_Init>
  MX_ADC4_Init();
 8000930:	f000 f8fa 	bl	8000b28 <MX_ADC4_Init>
  MX_USART2_UART_Init();
 8000934:	f000 faf2 	bl	8000f1c <MX_USART2_UART_Init>
  MX_RAMCFG_Init();
 8000938:	f000 f9de 	bl	8000cf8 <MX_RAMCFG_Init>
  MX_RNG_Init();
 800093c:	f000 f9f0 	bl	8000d20 <MX_RNG_Init>
  MX_RTC_Init();
 8000940:	f000 fa04 	bl	8000d4c <MX_RTC_Init>
  MX_ICACHE_Init();
 8000944:	f000 f97a 	bl	8000c3c <MX_ICACHE_Init>
  MX_LPTIM2_Init();
 8000948:	f000 f98c 	bl	8000c64 <MX_LPTIM2_Init>
  MX_TIM1_Init();
 800094c:	f000 fa4c 	bl	8000de8 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  //MX_GPIO_Init();
  bzero((char *) uartBuffer, sizeof(uartBuffer));
 8000950:	4b2b      	ldr	r3, [pc, #172]	@ (8000a00 <main+0xec>)
 8000952:	4618      	mov	r0, r3
 8000954:	2364      	movs	r3, #100	@ 0x64
 8000956:	461a      	mov	r2, r3
 8000958:	2100      	movs	r1, #0
 800095a:	f02e fd29 	bl	802f3b0 <memset>
  sprintf(uartBuffer, "\n\rStart.\n\r");
 800095e:	4929      	ldr	r1, [pc, #164]	@ (8000a04 <main+0xf0>)
 8000960:	4827      	ldr	r0, [pc, #156]	@ (8000a00 <main+0xec>)
 8000962:	f02e fcdb 	bl	802f31c <siprintf>
  HAL_UART_Transmit(&huart2, (uint8_t *) uartBuffer, strlen(uartBuffer), 100);
 8000966:	4826      	ldr	r0, [pc, #152]	@ (8000a00 <main+0xec>)
 8000968:	f7ff fc67 	bl	800023a <strlen>
 800096c:	4603      	mov	r3, r0
 800096e:	b29a      	uxth	r2, r3
 8000970:	2364      	movs	r3, #100	@ 0x64
 8000972:	4923      	ldr	r1, [pc, #140]	@ (8000a00 <main+0xec>)
 8000974:	4824      	ldr	r0, [pc, #144]	@ (8000a08 <main+0xf4>)
 8000976:	f006 fbf1 	bl	800715c <HAL_UART_Transmit>

  //HAL_GPIO_WritePin(SOUND_GPIO_Port, SOUND_Pin, GPIO_PIN_SET);
  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init(NULL);
 800097a:	2000      	movs	r0, #0
 800097c:	f7ff fe0a 	bl	8000594 <MX_APPE_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  __HAL_TIM_CLEAR_FLAG(&htim1, TIM_SR_UIF); // Clear flags
 8000980:	4b22      	ldr	r3, [pc, #136]	@ (8000a0c <main+0xf8>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	f06f 0201 	mvn.w	r2, #1
 8000988:	611a      	str	r2, [r3, #16]
  /* Включим LED, Vibro, Sound */
  NotifyAct(SOUND_NOTIFY | VIBRO_NOTIFY | LED_NOTIFY);
 800098a:	2007      	movs	r0, #7
 800098c:	f7ff ff66 	bl	800085c <NotifyAct>

  HAL_ADC_Start_DMA(&hadc4, &pulseLevel, 1);
 8000990:	2201      	movs	r2, #1
 8000992:	491f      	ldr	r1, [pc, #124]	@ (8000a10 <main+0xfc>)
 8000994:	481f      	ldr	r0, [pc, #124]	@ (8000a14 <main+0x100>)
 8000996:	f001 fc5b 	bl	8002250 <HAL_ADC_Start_DMA>

  while (1)
  {
    /* USER CODE END WHILE */
    MX_APPE_Process();
 800099a:	f7ff ff07 	bl	80007ac <MX_APPE_Process>

    /* USER CODE BEGIN 3 */
    intervalTmp = HAL_GetTick();
 800099e:	f001 f929 	bl	8001bf4 <HAL_GetTick>
 80009a2:	4603      	mov	r3, r0
 80009a4:	4a1c      	ldr	r2, [pc, #112]	@ (8000a18 <main+0x104>)
 80009a6:	6013      	str	r3, [r2, #0]
	if ((interval2 + INTERVAL2 < intervalTmp) /*&& system_startup_done*/) {
 80009a8:	4b1c      	ldr	r3, [pc, #112]	@ (8000a1c <main+0x108>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	f503 539c 	add.w	r3, r3, #4992	@ 0x1380
 80009b0:	3308      	adds	r3, #8
 80009b2:	4a19      	ldr	r2, [pc, #100]	@ (8000a18 <main+0x104>)
 80009b4:	6812      	ldr	r2, [r2, #0]
 80009b6:	4293      	cmp	r3, r2
 80009b8:	d20e      	bcs.n	80009d8 <main+0xc4>
	  interval2 = intervalTmp;
 80009ba:	4b17      	ldr	r3, [pc, #92]	@ (8000a18 <main+0x104>)
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	4a17      	ldr	r2, [pc, #92]	@ (8000a1c <main+0x108>)
 80009c0:	6013      	str	r3, [r2, #0]
	  sendData();
 80009c2:	f008 ff2b 	bl	800981c <sendData>
	  /* Включение звука */
	  SoundFlag = true;
 80009c6:	4b16      	ldr	r3, [pc, #88]	@ (8000a20 <main+0x10c>)
 80009c8:	2201      	movs	r2, #1
 80009ca:	701a      	strb	r2, [r3, #0]
	  //HAL_TIM_OC_Start(&htim3, TIM_CHANNEL_2);
	  HAL_LPTIM_Counter_Start(&hlptim2);
 80009cc:	4815      	ldr	r0, [pc, #84]	@ (8000a24 <main+0x110>)
 80009ce:	f003 fd85 	bl	80044dc <HAL_LPTIM_Counter_Start>
	  HAL_TIM_Base_Start_IT(&htim1);	// Таймер для LED, вибро и звука
 80009d2:	480e      	ldr	r0, [pc, #56]	@ (8000a0c <main+0xf8>)
 80009d4:	f005 fbf2 	bl	80061bc <HAL_TIM_Base_Start_IT>
	}
    if (interval1 + INTERVAL1 < intervalTmp) {
 80009d8:	4b13      	ldr	r3, [pc, #76]	@ (8000a28 <main+0x114>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	f503 62fa 	add.w	r2, r3, #2000	@ 0x7d0
 80009e0:	4b0d      	ldr	r3, [pc, #52]	@ (8000a18 <main+0x104>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	429a      	cmp	r2, r3
 80009e6:	d2d8      	bcs.n	800099a <main+0x86>
    	interval1 = intervalTmp;
 80009e8:	4b0b      	ldr	r3, [pc, #44]	@ (8000a18 <main+0x104>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4a0e      	ldr	r2, [pc, #56]	@ (8000a28 <main+0x114>)
 80009ee:	6013      	str	r3, [r2, #0]
		if (connectFlag) {
 80009f0:	4b0e      	ldr	r3, [pc, #56]	@ (8000a2c <main+0x118>)
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d0d0      	beq.n	800099a <main+0x86>
			NotifyAct(LED_NOTIFY);
 80009f8:	2004      	movs	r0, #4
 80009fa:	f7ff ff2f 	bl	800085c <NotifyAct>
    MX_APPE_Process();
 80009fe:	e7cc      	b.n	800099a <main+0x86>
 8000a00:	20001720 	.word	0x20001720
 8000a04:	0802fcc0 	.word	0x0802fcc0
 8000a08:	20001674 	.word	0x20001674
 8000a0c:	20001628 	.word	0x20001628
 8000a10:	2000171c 	.word	0x2000171c
 8000a14:	200014a4 	.word	0x200014a4
 8000a18:	20001714 	.word	0x20001714
 8000a1c:	20001710 	.word	0x20001710
 8000a20:	2000170a 	.word	0x2000170a
 8000a24:	20001588 	.word	0x20001588
 8000a28:	2000170c 	.word	0x2000170c
 8000a2c:	20001708 	.word	0x20001708

08000a30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b098      	sub	sp, #96	@ 0x60
 8000a34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a36:	f107 0320 	add.w	r3, r7, #32
 8000a3a:	2240      	movs	r2, #64	@ 0x40
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f02e fcb6 	bl	802f3b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a44:	463b      	mov	r3, r7
 8000a46:	2220      	movs	r2, #32
 8000a48:	2100      	movs	r1, #0
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f02e fcb0 	bl	802f3b0 <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE2) != HAL_OK)
 8000a50:	2000      	movs	r0, #0
 8000a52:	f003 feeb 	bl	800482c <HAL_PWREx_ControlVoltageScaling>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d001      	beq.n	8000a60 <SystemClock_Config+0x30>
  {
    Error_Handler();
 8000a5c:	f000 fb38 	bl	80010d0 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000a60:	f003 fe96 	bl	8004790 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMLOW);
 8000a64:	4b21      	ldr	r3, [pc, #132]	@ (8000aec <SystemClock_Config+0xbc>)
 8000a66:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000a6a:	f023 0318 	bic.w	r3, r3, #24
 8000a6e:	4a1f      	ldr	r2, [pc, #124]	@ (8000aec <SystemClock_Config+0xbc>)
 8000a70:	f043 0308 	orr.w	r3, r3, #8
 8000a74:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8000a78:	2307      	movs	r3, #7
 8000a7a:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a7c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a80:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEDiv = RCC_HSE_DIV2;
 8000a82:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000a86:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000a88:	2381      	movs	r3, #129	@ 0x81
 8000a8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a8c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a90:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a92:	2310      	movs	r3, #16
 8000a94:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL1.PLLState = RCC_PLL_NONE;
 8000a96:	2300      	movs	r3, #0
 8000a98:	643b      	str	r3, [r7, #64]	@ 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a9a:	f107 0320 	add.w	r3, r7, #32
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f003 ff6c 	bl	800497c <HAL_RCC_OscConfig>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d001      	beq.n	8000aae <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000aaa:	f000 fb11 	bl	80010d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000aae:	233f      	movs	r3, #63	@ 0x3f
 8000ab0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK7|RCC_CLOCKTYPE_HCLK5;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000ab6:	2304      	movs	r3, #4
 8000ab8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000aba:	2300      	movs	r3, #0
 8000abc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB7CLKDivider = RCC_HCLK_DIV1;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHB5_PLL1_CLKDivider = RCC_SYSCLK_PLL1_DIV1;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHB5_HSEHSI_CLKDivider = RCC_SYSCLK_HSEHSI_DIV2;
 8000aca:	2310      	movs	r3, #16
 8000acc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ace:	463b      	mov	r3, r7
 8000ad0:	2100      	movs	r1, #0
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f004 fb62 	bl	800519c <HAL_RCC_ClockConfig>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000ade:	f000 faf7 	bl	80010d0 <Error_Handler>
  }
}
 8000ae2:	bf00      	nop
 8000ae4:	3760      	adds	r7, #96	@ 0x60
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	46020c00 	.word	0x46020c00

08000af0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b092      	sub	sp, #72	@ 0x48
 8000af4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000af6:	463b      	mov	r3, r7
 8000af8:	2248      	movs	r2, #72	@ 0x48
 8000afa:	2100      	movs	r1, #0
 8000afc:	4618      	mov	r0, r3
 8000afe:	f02e fc57 	bl	802f3b0 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RADIOST;
 8000b02:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000b06:	603b      	str	r3, [r7, #0]
  PeriphClkInit.RadioSlpTimClockSelection = RCC_RADIOSTCLKSOURCE_LSE;
 8000b08:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8000b0c:	647b      	str	r3, [r7, #68]	@ 0x44

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b0e:	463b      	mov	r3, r7
 8000b10:	4618      	mov	r0, r3
 8000b12:	f004 fd85 	bl	8005620 <HAL_RCCEx_PeriphCLKConfig>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d001      	beq.n	8000b20 <PeriphCommonClock_Config+0x30>
  {
    Error_Handler();
 8000b1c:	f000 fad8 	bl	80010d0 <Error_Handler>
  }
}
 8000b20:	bf00      	nop
 8000b22:	3748      	adds	r7, #72	@ 0x48
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}

08000b28 <MX_ADC4_Init>:
  * @brief ADC4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC4_Init(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b084      	sub	sp, #16
 8000b2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b2e:	1d3b      	adds	r3, r7, #4
 8000b30:	2200      	movs	r2, #0
 8000b32:	601a      	str	r2, [r3, #0]
 8000b34:	605a      	str	r2, [r3, #4]
 8000b36:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 8000b38:	4b2d      	ldr	r3, [pc, #180]	@ (8000bf0 <MX_ADC4_Init+0xc8>)
 8000b3a:	4a2e      	ldr	r2, [pc, #184]	@ (8000bf4 <MX_ADC4_Init+0xcc>)
 8000b3c:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000b3e:	4b2c      	ldr	r3, [pc, #176]	@ (8000bf0 <MX_ADC4_Init+0xc8>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 8000b44:	4b2a      	ldr	r3, [pc, #168]	@ (8000bf0 <MX_ADC4_Init+0xc8>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	609a      	str	r2, [r3, #8]
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b4a:	4b29      	ldr	r3, [pc, #164]	@ (8000bf0 <MX_ADC4_Init+0xc8>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	60da      	str	r2, [r3, #12]
  hadc4.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b50:	4b27      	ldr	r3, [pc, #156]	@ (8000bf0 <MX_ADC4_Init+0xc8>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	611a      	str	r2, [r3, #16]
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b56:	4b26      	ldr	r3, [pc, #152]	@ (8000bf0 <MX_ADC4_Init+0xc8>)
 8000b58:	2204      	movs	r2, #4
 8000b5a:	615a      	str	r2, [r3, #20]
  hadc4.Init.LowPowerAutoPowerOff = DISABLE;
 8000b5c:	4b24      	ldr	r3, [pc, #144]	@ (8000bf0 <MX_ADC4_Init+0xc8>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	765a      	strb	r2, [r3, #25]
  hadc4.Init.LowPowerAutonomousDPD = ADC_LP_AUTONOMOUS_DPD_DISABLE;
 8000b62:	4b23      	ldr	r3, [pc, #140]	@ (8000bf0 <MX_ADC4_Init+0xc8>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	61da      	str	r2, [r3, #28]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 8000b68:	4b21      	ldr	r3, [pc, #132]	@ (8000bf0 <MX_ADC4_Init+0xc8>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	761a      	strb	r2, [r3, #24]
  hadc4.Init.ContinuousConvMode = DISABLE;
 8000b6e:	4b20      	ldr	r3, [pc, #128]	@ (8000bf0 <MX_ADC4_Init+0xc8>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	f883 2020 	strb.w	r2, [r3, #32]
  hadc4.Init.NbrOfConversion = 1;
 8000b76:	4b1e      	ldr	r3, [pc, #120]	@ (8000bf0 <MX_ADC4_Init+0xc8>)
 8000b78:	2201      	movs	r2, #1
 8000b7a:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc4.Init.ExternalTrigConv = ADC_EXTERNALTRIG_EXT_IT15;
 8000b7c:	4b1c      	ldr	r3, [pc, #112]	@ (8000bf0 <MX_ADC4_Init+0xc8>)
 8000b7e:	f44f 62b8 	mov.w	r2, #1472	@ 0x5c0
 8000b82:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000b84:	4b1a      	ldr	r3, [pc, #104]	@ (8000bf0 <MX_ADC4_Init+0xc8>)
 8000b86:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000b8a:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc4.Init.DMAContinuousRequests = ENABLE;
 8000b8c:	4b18      	ldr	r3, [pc, #96]	@ (8000bf0 <MX_ADC4_Init+0xc8>)
 8000b8e:	2201      	movs	r2, #1
 8000b90:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hadc4.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000b94:	4b16      	ldr	r3, [pc, #88]	@ (8000bf0 <MX_ADC4_Init+0xc8>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	655a      	str	r2, [r3, #84]	@ 0x54
  hadc4.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000b9a:	4b15      	ldr	r3, [pc, #84]	@ (8000bf0 <MX_ADC4_Init+0xc8>)
 8000b9c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000ba0:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc4.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8000ba2:	4b13      	ldr	r3, [pc, #76]	@ (8000bf0 <MX_ADC4_Init+0xc8>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc4.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8000ba8:	4b11      	ldr	r3, [pc, #68]	@ (8000bf0 <MX_ADC4_Init+0xc8>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc4.Init.OversamplingMode = DISABLE;
 8000bae:	4b10      	ldr	r3, [pc, #64]	@ (8000bf0 <MX_ADC4_Init+0xc8>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 8000bb6:	480e      	ldr	r0, [pc, #56]	@ (8000bf0 <MX_ADC4_Init+0xc8>)
 8000bb8:	f001 f99c 	bl	8001ef4 <HAL_ADC_Init>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d001      	beq.n	8000bc6 <MX_ADC4_Init+0x9e>
  {
    Error_Handler();
 8000bc2:	f000 fa85 	bl	80010d0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000bc6:	4b0c      	ldr	r3, [pc, #48]	@ (8000bf8 <MX_ADC4_Init+0xd0>)
 8000bc8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8000bd2:	1d3b      	adds	r3, r7, #4
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	4806      	ldr	r0, [pc, #24]	@ (8000bf0 <MX_ADC4_Init+0xc8>)
 8000bd8:	f001 fd3a 	bl	8002650 <HAL_ADC_ConfigChannel>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <MX_ADC4_Init+0xbe>
  {
    Error_Handler();
 8000be2:	f000 fa75 	bl	80010d0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 8000be6:	bf00      	nop
 8000be8:	3710      	adds	r7, #16
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	200014a4 	.word	0x200014a4
 8000bf4:	46021000 	.word	0x46021000
 8000bf8:	b4002000 	.word	0xb4002000

08000bfc <MX_GPDMA1_Init>:
  * @brief GPDMA1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPDMA1_Init(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b082      	sub	sp, #8
 8000c00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Init 0 */

  /* USER CODE END GPDMA1_Init 0 */

  /* Peripheral clock enable */
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 8000c02:	4b0d      	ldr	r3, [pc, #52]	@ (8000c38 <MX_GPDMA1_Init+0x3c>)
 8000c04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c08:	4a0b      	ldr	r2, [pc, #44]	@ (8000c38 <MX_GPDMA1_Init+0x3c>)
 8000c0a:	f043 0301 	orr.w	r3, r3, #1
 8000c0e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8000c12:	4b09      	ldr	r3, [pc, #36]	@ (8000c38 <MX_GPDMA1_Init+0x3c>)
 8000c14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c18:	f003 0301 	and.w	r3, r3, #1
 8000c1c:	607b      	str	r3, [r7, #4]
 8000c1e:	687b      	ldr	r3, [r7, #4]

  /* GPDMA1 interrupt Init */
    HAL_NVIC_SetPriority(GPDMA1_Channel0_IRQn, 0, 0);
 8000c20:	2200      	movs	r2, #0
 8000c22:	2100      	movs	r1, #0
 8000c24:	201d      	movs	r0, #29
 8000c26:	f002 f85f 	bl	8002ce8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel0_IRQn);
 8000c2a:	201d      	movs	r0, #29
 8000c2c:	f002 f879 	bl	8002d22 <HAL_NVIC_EnableIRQ>
  /* USER CODE END GPDMA1_Init 1 */
  /* USER CODE BEGIN GPDMA1_Init 2 */

  /* USER CODE END GPDMA1_Init 2 */

}
 8000c30:	bf00      	nop
 8000c32:	3708      	adds	r7, #8
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	46020c00 	.word	0x46020c00

08000c3c <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8000c40:	2000      	movs	r0, #0
 8000c42:	f003 fb3d 	bl	80042c0 <HAL_ICACHE_ConfigAssociativityMode>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d001      	beq.n	8000c50 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8000c4c:	f000 fa40 	bl	80010d0 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000c50:	f003 fb56 	bl	8004300 <HAL_ICACHE_Enable>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8000c5a:	f000 fa39 	bl	80010d0 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8000c5e:	bf00      	nop
 8000c60:	bd80      	pop	{r7, pc}
	...

08000c64 <MX_LPTIM2_Init>:
  * @brief LPTIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM2_Init(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b082      	sub	sp, #8
 8000c68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LPTIM2_Init 0 */

  /* USER CODE END LPTIM2_Init 0 */

  LPTIM_OC_ConfigTypeDef sConfig1 = {0};
 8000c6a:	463b      	mov	r3, r7
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	601a      	str	r2, [r3, #0]
 8000c70:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN LPTIM2_Init 1 */

  /* USER CODE END LPTIM2_Init 1 */
  hlptim2.Instance = LPTIM2;
 8000c72:	4b1f      	ldr	r3, [pc, #124]	@ (8000cf0 <MX_LPTIM2_Init+0x8c>)
 8000c74:	4a1f      	ldr	r2, [pc, #124]	@ (8000cf4 <MX_LPTIM2_Init+0x90>)
 8000c76:	601a      	str	r2, [r3, #0]
  hlptim2.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8000c78:	4b1d      	ldr	r3, [pc, #116]	@ (8000cf0 <MX_LPTIM2_Init+0x8c>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	605a      	str	r2, [r3, #4]
  hlptim2.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 8000c7e:	4b1c      	ldr	r3, [pc, #112]	@ (8000cf0 <MX_LPTIM2_Init+0x8c>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	609a      	str	r2, [r3, #8]
  hlptim2.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8000c84:	4b1a      	ldr	r3, [pc, #104]	@ (8000cf0 <MX_LPTIM2_Init+0x8c>)
 8000c86:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000c8a:	615a      	str	r2, [r3, #20]
  hlptim2.Init.Period = 1460;
 8000c8c:	4b18      	ldr	r3, [pc, #96]	@ (8000cf0 <MX_LPTIM2_Init+0x8c>)
 8000c8e:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 8000c92:	621a      	str	r2, [r3, #32]
  hlptim2.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8000c94:	4b16      	ldr	r3, [pc, #88]	@ (8000cf0 <MX_LPTIM2_Init+0x8c>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	625a      	str	r2, [r3, #36]	@ 0x24
  hlptim2.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 8000c9a:	4b15      	ldr	r3, [pc, #84]	@ (8000cf0 <MX_LPTIM2_Init+0x8c>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	629a      	str	r2, [r3, #40]	@ 0x28
  hlptim2.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8000ca0:	4b13      	ldr	r3, [pc, #76]	@ (8000cf0 <MX_LPTIM2_Init+0x8c>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hlptim2.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8000ca6:	4b12      	ldr	r3, [pc, #72]	@ (8000cf0 <MX_LPTIM2_Init+0x8c>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	631a      	str	r2, [r3, #48]	@ 0x30
  hlptim2.Init.RepetitionCounter = 0;
 8000cac:	4b10      	ldr	r3, [pc, #64]	@ (8000cf0 <MX_LPTIM2_Init+0x8c>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_LPTIM_Init(&hlptim2) != HAL_OK)
 8000cb2:	480f      	ldr	r0, [pc, #60]	@ (8000cf0 <MX_LPTIM2_Init+0x8c>)
 8000cb4:	f003 fb34 	bl	8004320 <HAL_LPTIM_Init>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <MX_LPTIM2_Init+0x5e>
  {
    Error_Handler();
 8000cbe:	f000 fa07 	bl	80010d0 <Error_Handler>
  }
  sConfig1.Pulse = 0;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	603b      	str	r3, [r7, #0]
  sConfig1.OCPolarity = LPTIM_OCPOLARITY_HIGH;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	607b      	str	r3, [r7, #4]
  if (HAL_LPTIM_OC_ConfigChannel(&hlptim2, &sConfig1, LPTIM_CHANNEL_2) != HAL_OK)
 8000cca:	463b      	mov	r3, r7
 8000ccc:	2201      	movs	r2, #1
 8000cce:	4619      	mov	r1, r3
 8000cd0:	4807      	ldr	r0, [pc, #28]	@ (8000cf0 <MX_LPTIM2_Init+0x8c>)
 8000cd2:	f003 fc60 	bl	8004596 <HAL_LPTIM_OC_ConfigChannel>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d001      	beq.n	8000ce0 <MX_LPTIM2_Init+0x7c>
  {
    Error_Handler();
 8000cdc:	f000 f9f8 	bl	80010d0 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM2_Init 2 */

  /* USER CODE END LPTIM2_Init 2 */
  HAL_LPTIM_MspPostInit(&hlptim2);
 8000ce0:	4803      	ldr	r0, [pc, #12]	@ (8000cf0 <MX_LPTIM2_Init+0x8c>)
 8000ce2:	f000 fb3b 	bl	800135c <HAL_LPTIM_MspPostInit>

}
 8000ce6:	bf00      	nop
 8000ce8:	3708      	adds	r7, #8
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	20001588 	.word	0x20001588
 8000cf4:	40009400 	.word	0x40009400

08000cf8 <MX_RAMCFG_Init>:
  * @brief RAMCFG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RAMCFG_Init(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0

  /* USER CODE END RAMCFG_Init 1 */

  /** Initialize RAMCFG SRAM1
  */
  hramcfg_SRAM1.Instance = RAMCFG_SRAM1;
 8000cfc:	4b06      	ldr	r3, [pc, #24]	@ (8000d18 <MX_RAMCFG_Init+0x20>)
 8000cfe:	4a07      	ldr	r2, [pc, #28]	@ (8000d1c <MX_RAMCFG_Init+0x24>)
 8000d00:	601a      	str	r2, [r3, #0]
  if (HAL_RAMCFG_Init(&hramcfg_SRAM1) != HAL_OK)
 8000d02:	4805      	ldr	r0, [pc, #20]	@ (8000d18 <MX_RAMCFG_Init+0x20>)
 8000d04:	f003 fdf0 	bl	80048e8 <HAL_RAMCFG_Init>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d001      	beq.n	8000d12 <MX_RAMCFG_Init+0x1a>
  {
    Error_Handler();
 8000d0e:	f000 f9df 	bl	80010d0 <Error_Handler>
  }
  /* USER CODE BEGIN RAMCFG_Init 2 */

  /* USER CODE END RAMCFG_Init 2 */

}
 8000d12:	bf00      	nop
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	200015d8 	.word	0x200015d8
 8000d1c:	40026000 	.word	0x40026000

08000d20 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8000d24:	4b07      	ldr	r3, [pc, #28]	@ (8000d44 <MX_RNG_Init+0x24>)
 8000d26:	4a08      	ldr	r2, [pc, #32]	@ (8000d48 <MX_RNG_Init+0x28>)
 8000d28:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 8000d2a:	4b06      	ldr	r3, [pc, #24]	@ (8000d44 <MX_RNG_Init+0x24>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8000d30:	4804      	ldr	r0, [pc, #16]	@ (8000d44 <MX_RNG_Init+0x24>)
 8000d32:	f004 fea7 	bl	8005a84 <HAL_RNG_Init>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d001      	beq.n	8000d40 <MX_RNG_Init+0x20>
  {
    Error_Handler();
 8000d3c:	f000 f9c8 	bl	80010d0 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8000d40:	bf00      	nop
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	200015e4 	.word	0x200015e4
 8000d48:	420c0800 	.word	0x420c0800

08000d4c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
void MX_RTC_Init(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b088      	sub	sp, #32
 8000d50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 8000d52:	1d3b      	adds	r3, r7, #4
 8000d54:	2200      	movs	r2, #0
 8000d56:	601a      	str	r2, [r3, #0]
 8000d58:	605a      	str	r2, [r3, #4]
 8000d5a:	609a      	str	r2, [r3, #8]
 8000d5c:	60da      	str	r2, [r3, #12]
 8000d5e:	611a      	str	r2, [r3, #16]
 8000d60:	615a      	str	r2, [r3, #20]
 8000d62:	619a      	str	r2, [r3, #24]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000d64:	4b1e      	ldr	r3, [pc, #120]	@ (8000de0 <MX_RTC_Init+0x94>)
 8000d66:	4a1f      	ldr	r2, [pc, #124]	@ (8000de4 <MX_RTC_Init+0x98>)
 8000d68:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000d6a:	4b1d      	ldr	r3, [pc, #116]	@ (8000de0 <MX_RTC_Init+0x94>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000d70:	4b1b      	ldr	r3, [pc, #108]	@ (8000de0 <MX_RTC_Init+0x94>)
 8000d72:	227f      	movs	r2, #127	@ 0x7f
 8000d74:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000d76:	4b1a      	ldr	r3, [pc, #104]	@ (8000de0 <MX_RTC_Init+0x94>)
 8000d78:	22ff      	movs	r2, #255	@ 0xff
 8000d7a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000d7c:	4b18      	ldr	r3, [pc, #96]	@ (8000de0 <MX_RTC_Init+0x94>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000d82:	4b17      	ldr	r3, [pc, #92]	@ (8000de0 <MX_RTC_Init+0x94>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000d88:	4b15      	ldr	r3, [pc, #84]	@ (8000de0 <MX_RTC_Init+0x94>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000d8e:	4b14      	ldr	r3, [pc, #80]	@ (8000de0 <MX_RTC_Init+0x94>)
 8000d90:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000d94:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000d96:	4b12      	ldr	r3, [pc, #72]	@ (8000de0 <MX_RTC_Init+0x94>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 8000d9c:	4b10      	ldr	r3, [pc, #64]	@ (8000de0 <MX_RTC_Init+0x94>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000da2:	480f      	ldr	r0, [pc, #60]	@ (8000de0 <MX_RTC_Init+0x94>)
 8000da4:	f004 ff0a 	bl	8005bbc <HAL_RTC_Init>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d001      	beq.n	8000db2 <MX_RTC_Init+0x66>
  {
    Error_Handler();
 8000dae:	f000 f98f 	bl	80010d0 <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 8000db2:	2300      	movs	r3, #0
 8000db4:	607b      	str	r3, [r7, #4]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 8000db6:	2300      	movs	r3, #0
 8000db8:	613b      	str	r3, [r7, #16]
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	617b      	str	r3, [r7, #20]
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	61bb      	str	r3, [r7, #24]
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 8000dc2:	1d3b      	adds	r3, r7, #4
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	4806      	ldr	r0, [pc, #24]	@ (8000de0 <MX_RTC_Init+0x94>)
 8000dc8:	f005 f9ca 	bl	8006160 <HAL_RTCEx_PrivilegeModeSet>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d001      	beq.n	8000dd6 <MX_RTC_Init+0x8a>
  {
    Error_Handler();
 8000dd2:	f000 f97d 	bl	80010d0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000dd6:	bf00      	nop
 8000dd8:	3720      	adds	r7, #32
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	200015f8 	.word	0x200015f8
 8000de4:	46007800 	.word	0x46007800

08000de8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b098      	sub	sp, #96	@ 0x60
 8000dec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dee:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000df2:	2200      	movs	r2, #0
 8000df4:	601a      	str	r2, [r3, #0]
 8000df6:	605a      	str	r2, [r3, #4]
 8000df8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000dfa:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000dfe:	2200      	movs	r2, #0
 8000e00:	601a      	str	r2, [r3, #0]
 8000e02:	605a      	str	r2, [r3, #4]
 8000e04:	609a      	str	r2, [r3, #8]
 8000e06:	60da      	str	r2, [r3, #12]
 8000e08:	611a      	str	r2, [r3, #16]
 8000e0a:	615a      	str	r2, [r3, #20]
 8000e0c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000e0e:	1d3b      	adds	r3, r7, #4
 8000e10:	2234      	movs	r2, #52	@ 0x34
 8000e12:	2100      	movs	r1, #0
 8000e14:	4618      	mov	r0, r3
 8000e16:	f02e facb 	bl	802f3b0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000e1a:	4b3e      	ldr	r3, [pc, #248]	@ (8000f14 <MX_TIM1_Init+0x12c>)
 8000e1c:	4a3e      	ldr	r2, [pc, #248]	@ (8000f18 <MX_TIM1_Init+0x130>)
 8000e1e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 65535;
 8000e20:	4b3c      	ldr	r3, [pc, #240]	@ (8000f14 <MX_TIM1_Init+0x12c>)
 8000e22:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000e26:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e28:	4b3a      	ldr	r3, [pc, #232]	@ (8000f14 <MX_TIM1_Init+0x12c>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 5;
 8000e2e:	4b39      	ldr	r3, [pc, #228]	@ (8000f14 <MX_TIM1_Init+0x12c>)
 8000e30:	2205      	movs	r2, #5
 8000e32:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e34:	4b37      	ldr	r3, [pc, #220]	@ (8000f14 <MX_TIM1_Init+0x12c>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000e3a:	4b36      	ldr	r3, [pc, #216]	@ (8000f14 <MX_TIM1_Init+0x12c>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000e40:	4b34      	ldr	r3, [pc, #208]	@ (8000f14 <MX_TIM1_Init+0x12c>)
 8000e42:	2280      	movs	r2, #128	@ 0x80
 8000e44:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8000e46:	4833      	ldr	r0, [pc, #204]	@ (8000f14 <MX_TIM1_Init+0x12c>)
 8000e48:	f005 fa3b 	bl	80062c2 <HAL_TIM_OC_Init>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000e52:	f000 f93d 	bl	80010d0 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim1, TIM_OPMODE_SINGLE) != HAL_OK)
 8000e56:	2108      	movs	r1, #8
 8000e58:	482e      	ldr	r0, [pc, #184]	@ (8000f14 <MX_TIM1_Init+0x12c>)
 8000e5a:	f005 fa89 	bl	8006370 <HAL_TIM_OnePulse_Init>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d001      	beq.n	8000e68 <MX_TIM1_Init+0x80>
  {
    Error_Handler();
 8000e64:	f000 f934 	bl	80010d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000e68:	2320      	movs	r3, #32
 8000e6a:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e70:	2300      	movs	r3, #0
 8000e72:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e74:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000e78:	4619      	mov	r1, r3
 8000e7a:	4826      	ldr	r0, [pc, #152]	@ (8000f14 <MX_TIM1_Init+0x12c>)
 8000e7c:	f005 ffe2 	bl	8006e44 <HAL_TIMEx_MasterConfigSynchronization>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d001      	beq.n	8000e8a <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 8000e86:	f000 f923 	bl	80010d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8000e8a:	2330      	movs	r3, #48	@ 0x30
 8000e8c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e92:	2300      	movs	r3, #0
 8000e94:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000e96:	2300      	movs	r3, #0
 8000e98:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ea6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000eaa:	2200      	movs	r2, #0
 8000eac:	4619      	mov	r1, r3
 8000eae:	4819      	ldr	r0, [pc, #100]	@ (8000f14 <MX_TIM1_Init+0x12c>)
 8000eb0:	f005 fc08 	bl	80066c4 <HAL_TIM_OC_ConfigChannel>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d001      	beq.n	8000ebe <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8000eba:	f000 f909 	bl	80010d0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000ed2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ed6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000edc:	2300      	movs	r3, #0
 8000ede:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000ee4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000ee8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000eea:	2300      	movs	r3, #0
 8000eec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000ef6:	1d3b      	adds	r3, r7, #4
 8000ef8:	4619      	mov	r1, r3
 8000efa:	4806      	ldr	r0, [pc, #24]	@ (8000f14 <MX_TIM1_Init+0x12c>)
 8000efc:	f006 f80a 	bl	8006f14 <HAL_TIMEx_ConfigBreakDeadTime>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <MX_TIM1_Init+0x122>
  {
    Error_Handler();
 8000f06:	f000 f8e3 	bl	80010d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000f0a:	bf00      	nop
 8000f0c:	3760      	adds	r7, #96	@ 0x60
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	20001628 	.word	0x20001628
 8000f18:	40012c00 	.word	0x40012c00

08000f1c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f20:	4b27      	ldr	r3, [pc, #156]	@ (8000fc0 <MX_USART2_UART_Init+0xa4>)
 8000f22:	4a28      	ldr	r2, [pc, #160]	@ (8000fc4 <MX_USART2_UART_Init+0xa8>)
 8000f24:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f26:	4b26      	ldr	r3, [pc, #152]	@ (8000fc0 <MX_USART2_UART_Init+0xa4>)
 8000f28:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000f2c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f2e:	4b24      	ldr	r3, [pc, #144]	@ (8000fc0 <MX_USART2_UART_Init+0xa4>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f34:	4b22      	ldr	r3, [pc, #136]	@ (8000fc0 <MX_USART2_UART_Init+0xa4>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f3a:	4b21      	ldr	r3, [pc, #132]	@ (8000fc0 <MX_USART2_UART_Init+0xa4>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX;
 8000f40:	4b1f      	ldr	r3, [pc, #124]	@ (8000fc0 <MX_USART2_UART_Init+0xa4>)
 8000f42:	2208      	movs	r2, #8
 8000f44:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f46:	4b1e      	ldr	r3, [pc, #120]	@ (8000fc0 <MX_USART2_UART_Init+0xa4>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_8;
 8000f4c:	4b1c      	ldr	r3, [pc, #112]	@ (8000fc0 <MX_USART2_UART_Init+0xa4>)
 8000f4e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000f52:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f54:	4b1a      	ldr	r3, [pc, #104]	@ (8000fc0 <MX_USART2_UART_Init+0xa4>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f5a:	4b19      	ldr	r3, [pc, #100]	@ (8000fc0 <MX_USART2_UART_Init+0xa4>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT|UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 8000f60:	4b17      	ldr	r3, [pc, #92]	@ (8000fc0 <MX_USART2_UART_Init+0xa4>)
 8000f62:	2230      	movs	r2, #48	@ 0x30
 8000f64:	629a      	str	r2, [r3, #40]	@ 0x28
  huart2.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8000f66:	4b16      	ldr	r3, [pc, #88]	@ (8000fc0 <MX_USART2_UART_Init+0xa4>)
 8000f68:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000f6c:	63da      	str	r2, [r3, #60]	@ 0x3c
  huart2.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 8000f6e:	4b14      	ldr	r3, [pc, #80]	@ (8000fc0 <MX_USART2_UART_Init+0xa4>)
 8000f70:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000f74:	641a      	str	r2, [r3, #64]	@ 0x40
  if (HAL_HalfDuplex_Init(&huart2) != HAL_OK)
 8000f76:	4812      	ldr	r0, [pc, #72]	@ (8000fc0 <MX_USART2_UART_Init+0xa4>)
 8000f78:	f006 f898 	bl	80070ac <HAL_HalfDuplex_Init>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000f82:	f000 f8a5 	bl	80010d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f86:	2100      	movs	r1, #0
 8000f88:	480d      	ldr	r0, [pc, #52]	@ (8000fc0 <MX_USART2_UART_Init+0xa4>)
 8000f8a:	f006 fe6d 	bl	8007c68 <HAL_UARTEx_SetTxFifoThreshold>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d001      	beq.n	8000f98 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000f94:	f000 f89c 	bl	80010d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f98:	2100      	movs	r1, #0
 8000f9a:	4809      	ldr	r0, [pc, #36]	@ (8000fc0 <MX_USART2_UART_Init+0xa4>)
 8000f9c:	f006 fea2 	bl	8007ce4 <HAL_UARTEx_SetRxFifoThreshold>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 8000fa6:	f000 f893 	bl	80010d0 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart2) != HAL_OK)
 8000faa:	4805      	ldr	r0, [pc, #20]	@ (8000fc0 <MX_USART2_UART_Init+0xa4>)
 8000fac:	f006 fe21 	bl	8007bf2 <HAL_UARTEx_EnableFifoMode>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d001      	beq.n	8000fba <MX_USART2_UART_Init+0x9e>
  {
    Error_Handler();
 8000fb6:	f000 f88b 	bl	80010d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000fba:	bf00      	nop
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	20001674 	.word	0x20001674
 8000fc4:	40004400 	.word	0x40004400

08000fc8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b088      	sub	sp, #32
 8000fcc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fce:	f107 030c 	add.w	r3, r7, #12
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	601a      	str	r2, [r3, #0]
 8000fd6:	605a      	str	r2, [r3, #4]
 8000fd8:	609a      	str	r2, [r3, #8]
 8000fda:	60da      	str	r2, [r3, #12]
 8000fdc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fde:	4b39      	ldr	r3, [pc, #228]	@ (80010c4 <MX_GPIO_Init+0xfc>)
 8000fe0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000fe4:	4a37      	ldr	r2, [pc, #220]	@ (80010c4 <MX_GPIO_Init+0xfc>)
 8000fe6:	f043 0302 	orr.w	r3, r3, #2
 8000fea:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000fee:	4b35      	ldr	r3, [pc, #212]	@ (80010c4 <MX_GPIO_Init+0xfc>)
 8000ff0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ff4:	f003 0302 	and.w	r3, r3, #2
 8000ff8:	60bb      	str	r3, [r7, #8]
 8000ffa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ffc:	4b31      	ldr	r3, [pc, #196]	@ (80010c4 <MX_GPIO_Init+0xfc>)
 8000ffe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001002:	4a30      	ldr	r2, [pc, #192]	@ (80010c4 <MX_GPIO_Init+0xfc>)
 8001004:	f043 0301 	orr.w	r3, r3, #1
 8001008:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800100c:	4b2d      	ldr	r3, [pc, #180]	@ (80010c4 <MX_GPIO_Init+0xfc>)
 800100e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001012:	f003 0301 	and.w	r3, r3, #1
 8001016:	607b      	str	r3, [r7, #4]
 8001018:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800101a:	4b2a      	ldr	r3, [pc, #168]	@ (80010c4 <MX_GPIO_Init+0xfc>)
 800101c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001020:	4a28      	ldr	r2, [pc, #160]	@ (80010c4 <MX_GPIO_Init+0xfc>)
 8001022:	f043 0304 	orr.w	r3, r3, #4
 8001026:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800102a:	4b26      	ldr	r3, [pc, #152]	@ (80010c4 <MX_GPIO_Init+0xfc>)
 800102c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001030:	f003 0304 	and.w	r3, r3, #4
 8001034:	603b      	str	r3, [r7, #0]
 8001036:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(A_DATA_GPIO_Port, A_DATA_Pin, GPIO_PIN_RESET);
 8001038:	2200      	movs	r2, #0
 800103a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800103e:	4822      	ldr	r0, [pc, #136]	@ (80010c8 <MX_GPIO_Init+0x100>)
 8001040:	f003 f8ea 	bl	8004218 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, A_SCK_Pin|A_CS_Pin|VIBRO_Pin|LED_Pin, GPIO_PIN_RESET);
 8001044:	2200      	movs	r2, #0
 8001046:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 800104a:	4820      	ldr	r0, [pc, #128]	@ (80010cc <MX_GPIO_Init+0x104>)
 800104c:	f003 f8e4 	bl	8004218 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : A_DATA_Pin */
  GPIO_InitStruct.Pin = A_DATA_Pin;
 8001050:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001054:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001056:	2301      	movs	r3, #1
 8001058:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105a:	2300      	movs	r3, #0
 800105c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800105e:	2300      	movs	r3, #0
 8001060:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(A_DATA_GPIO_Port, &GPIO_InitStruct);
 8001062:	f107 030c 	add.w	r3, r7, #12
 8001066:	4619      	mov	r1, r3
 8001068:	4817      	ldr	r0, [pc, #92]	@ (80010c8 <MX_GPIO_Init+0x100>)
 800106a:	f002 ff89 	bl	8003f80 <HAL_GPIO_Init>

  /*Configure GPIO pins : A_SCK_Pin A_CS_Pin VIBRO_Pin LED_Pin */
  GPIO_InitStruct.Pin = A_SCK_Pin|A_CS_Pin|VIBRO_Pin|LED_Pin;
 800106e:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8001072:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001074:	2301      	movs	r3, #1
 8001076:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001078:	2300      	movs	r3, #0
 800107a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800107c:	2300      	movs	r3, #0
 800107e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001080:	f107 030c 	add.w	r3, r7, #12
 8001084:	4619      	mov	r1, r3
 8001086:	4811      	ldr	r0, [pc, #68]	@ (80010cc <MX_GPIO_Init+0x104>)
 8001088:	f002 ff7a 	bl	8003f80 <HAL_GPIO_Init>

  /*Configure GPIO pin : Sync_Pin */
  GPIO_InitStruct.Pin = Sync_Pin;
 800108c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001090:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001092:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001096:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001098:	2300      	movs	r3, #0
 800109a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Sync_GPIO_Port, &GPIO_InitStruct);
 800109c:	f107 030c 	add.w	r3, r7, #12
 80010a0:	4619      	mov	r1, r3
 80010a2:	4809      	ldr	r0, [pc, #36]	@ (80010c8 <MX_GPIO_Init+0x100>)
 80010a4:	f002 ff6c 	bl	8003f80 <HAL_GPIO_Init>

  /*RT DEBUG GPIO_Init */
  RT_DEBUG_GPIO_Init();
 80010a8:	f009 f951 	bl	800a34e <RT_DEBUG_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_IRQn, 0, 0);
 80010ac:	2200      	movs	r2, #0
 80010ae:	2100      	movs	r1, #0
 80010b0:	201a      	movs	r0, #26
 80010b2:	f001 fe19 	bl	8002ce8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_IRQn);
 80010b6:	201a      	movs	r0, #26
 80010b8:	f001 fe33 	bl	8002d22 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80010bc:	bf00      	nop
 80010be:	3720      	adds	r7, #32
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	46020c00 	.word	0x46020c00
 80010c8:	42020400 	.word	0x42020400
 80010cc:	42020000 	.word	0x42020000

080010d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010d4:	b672      	cpsid	i
}
 80010d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010d8:	bf00      	nop
 80010da:	e7fd      	b.n	80010d8 <Error_Handler+0x8>

080010dc <HAL_MspInit>:
void HAL_LPTIM_MspPostInit(LPTIM_HandleTypeDef *hlptim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80010e2:	4b0d      	ldr	r3, [pc, #52]	@ (8001118 <HAL_MspInit+0x3c>)
 80010e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80010e8:	4a0b      	ldr	r2, [pc, #44]	@ (8001118 <HAL_MspInit+0x3c>)
 80010ea:	f043 0304 	orr.w	r3, r3, #4
 80010ee:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80010f2:	4b09      	ldr	r3, [pc, #36]	@ (8001118 <HAL_MspInit+0x3c>)
 80010f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80010f8:	f003 0304 	and.w	r3, r3, #4
 80010fc:	607b      	str	r3, [r7, #4]
 80010fe:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RADIO_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RADIO_IRQn, RADIO_INTR_PRIO_LOW, 0);
 8001100:	2200      	movs	r2, #0
 8001102:	2105      	movs	r1, #5
 8001104:	2042      	movs	r0, #66	@ 0x42
 8001106:	f001 fdef 	bl	8002ce8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RADIO_IRQn);
 800110a:	2042      	movs	r0, #66	@ 0x42
 800110c:	f001 fe09 	bl	8002d22 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001110:	bf00      	nop
 8001112:	3708      	adds	r7, #8
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	46020c00 	.word	0x46020c00

0800111c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b09c      	sub	sp, #112	@ 0x70
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001124:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001128:	2200      	movs	r2, #0
 800112a:	601a      	str	r2, [r3, #0]
 800112c:	605a      	str	r2, [r3, #4]
 800112e:	609a      	str	r2, [r3, #8]
 8001130:	60da      	str	r2, [r3, #12]
 8001132:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001134:	f107 0314 	add.w	r3, r7, #20
 8001138:	2248      	movs	r2, #72	@ 0x48
 800113a:	2100      	movs	r1, #0
 800113c:	4618      	mov	r0, r3
 800113e:	f02e f937 	bl	802f3b0 <memset>
  if(hadc->Instance==ADC4)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	4a46      	ldr	r2, [pc, #280]	@ (8001260 <HAL_ADC_MspInit+0x144>)
 8001148:	4293      	cmp	r3, r2
 800114a:	f040 8085 	bne.w	8001258 <HAL_ADC_MspInit+0x13c>

  /* USER CODE END ADC4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800114e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001152:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_HSI;
 8001154:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001158:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800115a:	f107 0314 	add.w	r3, r7, #20
 800115e:	4618      	mov	r0, r3
 8001160:	f004 fa5e 	bl	8005620 <HAL_RCCEx_PeriphCLKConfig>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d001      	beq.n	800116e <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 800116a:	f7ff ffb1 	bl	80010d0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC4_CLK_ENABLE();
 800116e:	4b3d      	ldr	r3, [pc, #244]	@ (8001264 <HAL_ADC_MspInit+0x148>)
 8001170:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001174:	4a3b      	ldr	r2, [pc, #236]	@ (8001264 <HAL_ADC_MspInit+0x148>)
 8001176:	f043 0320 	orr.w	r3, r3, #32
 800117a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800117e:	4b39      	ldr	r3, [pc, #228]	@ (8001264 <HAL_ADC_MspInit+0x148>)
 8001180:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001184:	f003 0320 	and.w	r3, r3, #32
 8001188:	613b      	str	r3, [r7, #16]
 800118a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800118c:	4b35      	ldr	r3, [pc, #212]	@ (8001264 <HAL_ADC_MspInit+0x148>)
 800118e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001192:	4a34      	ldr	r2, [pc, #208]	@ (8001264 <HAL_ADC_MspInit+0x148>)
 8001194:	f043 0301 	orr.w	r3, r3, #1
 8001198:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800119c:	4b31      	ldr	r3, [pc, #196]	@ (8001264 <HAL_ADC_MspInit+0x148>)
 800119e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80011a2:	f003 0301 	and.w	r3, r3, #1
 80011a6:	60fb      	str	r3, [r7, #12]
 80011a8:	68fb      	ldr	r3, [r7, #12]
    /**ADC4 GPIO Configuration
    PA2     ------> ADC4_IN7
    PA0     ------> ADC4_IN9
    */
    GPIO_InitStruct.Pin = batLev_Pin|AIn_Pin;
 80011aa:	2305      	movs	r3, #5
 80011ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011ae:	2303      	movs	r3, #3
 80011b0:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b2:	2300      	movs	r3, #0
 80011b4:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011b6:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80011ba:	4619      	mov	r1, r3
 80011bc:	482a      	ldr	r0, [pc, #168]	@ (8001268 <HAL_ADC_MspInit+0x14c>)
 80011be:	f002 fedf 	bl	8003f80 <HAL_GPIO_Init>

    /* ADC4 DMA Init */
    /* GPDMA1_REQUEST_ADC4 Init */
    handle_GPDMA1_Channel0.Instance = GPDMA1_Channel0;
 80011c2:	4b2a      	ldr	r3, [pc, #168]	@ (800126c <HAL_ADC_MspInit+0x150>)
 80011c4:	4a2a      	ldr	r2, [pc, #168]	@ (8001270 <HAL_ADC_MspInit+0x154>)
 80011c6:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel0.Init.Request = GPDMA1_REQUEST_ADC4;
 80011c8:	4b28      	ldr	r3, [pc, #160]	@ (800126c <HAL_ADC_MspInit+0x150>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel0.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 80011ce:	4b27      	ldr	r3, [pc, #156]	@ (800126c <HAL_ADC_MspInit+0x150>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011d4:	4b25      	ldr	r3, [pc, #148]	@ (800126c <HAL_ADC_MspInit+0x150>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel0.Init.SrcInc = DMA_SINC_FIXED;
 80011da:	4b24      	ldr	r3, [pc, #144]	@ (800126c <HAL_ADC_MspInit+0x150>)
 80011dc:	2200      	movs	r2, #0
 80011de:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel0.Init.DestInc = DMA_DINC_FIXED;
 80011e0:	4b22      	ldr	r3, [pc, #136]	@ (800126c <HAL_ADC_MspInit+0x150>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel0.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_HALFWORD;
 80011e6:	4b21      	ldr	r3, [pc, #132]	@ (800126c <HAL_ADC_MspInit+0x150>)
 80011e8:	2201      	movs	r2, #1
 80011ea:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel0.Init.DestDataWidth = DMA_DEST_DATAWIDTH_HALFWORD;
 80011ec:	4b1f      	ldr	r3, [pc, #124]	@ (800126c <HAL_ADC_MspInit+0x150>)
 80011ee:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80011f2:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel0.Init.Priority = DMA_HIGH_PRIORITY;
 80011f4:	4b1d      	ldr	r3, [pc, #116]	@ (800126c <HAL_ADC_MspInit+0x150>)
 80011f6:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 80011fa:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel0.Init.SrcBurstLength = 1;
 80011fc:	4b1b      	ldr	r3, [pc, #108]	@ (800126c <HAL_ADC_MspInit+0x150>)
 80011fe:	2201      	movs	r2, #1
 8001200:	625a      	str	r2, [r3, #36]	@ 0x24
    handle_GPDMA1_Channel0.Init.DestBurstLength = 1;
 8001202:	4b1a      	ldr	r3, [pc, #104]	@ (800126c <HAL_ADC_MspInit+0x150>)
 8001204:	2201      	movs	r2, #1
 8001206:	629a      	str	r2, [r3, #40]	@ 0x28
    handle_GPDMA1_Channel0.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 8001208:	4b18      	ldr	r3, [pc, #96]	@ (800126c <HAL_ADC_MspInit+0x150>)
 800120a:	2200      	movs	r2, #0
 800120c:	62da      	str	r2, [r3, #44]	@ 0x2c
    handle_GPDMA1_Channel0.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 800120e:	4b17      	ldr	r3, [pc, #92]	@ (800126c <HAL_ADC_MspInit+0x150>)
 8001210:	2200      	movs	r2, #0
 8001212:	631a      	str	r2, [r3, #48]	@ 0x30
    handle_GPDMA1_Channel0.Init.Mode = DMA_NORMAL;
 8001214:	4b15      	ldr	r3, [pc, #84]	@ (800126c <HAL_ADC_MspInit+0x150>)
 8001216:	2200      	movs	r2, #0
 8001218:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel0) != HAL_OK)
 800121a:	4814      	ldr	r0, [pc, #80]	@ (800126c <HAL_ADC_MspInit+0x150>)
 800121c:	f002 f8a0 	bl	8003360 <HAL_DMA_Init>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <HAL_ADC_MspInit+0x10e>
    {
      Error_Handler();
 8001226:	f7ff ff53 	bl	80010d0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc, DMA_Handle, handle_GPDMA1_Channel0);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	4a0f      	ldr	r2, [pc, #60]	@ (800126c <HAL_ADC_MspInit+0x150>)
 800122e:	659a      	str	r2, [r3, #88]	@ 0x58
 8001230:	4a0e      	ldr	r2, [pc, #56]	@ (800126c <HAL_ADC_MspInit+0x150>)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel0, DMA_CHANNEL_NPRIV) != HAL_OK)
 8001236:	2110      	movs	r1, #16
 8001238:	480c      	ldr	r0, [pc, #48]	@ (800126c <HAL_ADC_MspInit+0x150>)
 800123a:	f002 fad0 	bl	80037de <HAL_DMA_ConfigChannelAttributes>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <HAL_ADC_MspInit+0x12c>
    {
      Error_Handler();
 8001244:	f7ff ff44 	bl	80010d0 <Error_Handler>
    }

    /* ADC4 interrupt Init */
    HAL_NVIC_SetPriority(ADC4_IRQn, 0, 0);
 8001248:	2200      	movs	r2, #0
 800124a:	2100      	movs	r1, #0
 800124c:	2041      	movs	r0, #65	@ 0x41
 800124e:	f001 fd4b 	bl	8002ce8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC4_IRQn);
 8001252:	2041      	movs	r0, #65	@ 0x41
 8001254:	f001 fd65 	bl	8002d22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC4_MspInit 1 */

  /* USER CODE END ADC4_MspInit 1 */
  }

}
 8001258:	bf00      	nop
 800125a:	3770      	adds	r7, #112	@ 0x70
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	46021000 	.word	0x46021000
 8001264:	46020c00 	.word	0x46020c00
 8001268:	42020000 	.word	0x42020000
 800126c:	20001510 	.word	0x20001510
 8001270:	40020050 	.word	0x40020050

08001274 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001274:	b480      	push	{r7}
 8001276:	b085      	sub	sp, #20
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a0b      	ldr	r2, [pc, #44]	@ (80012b0 <HAL_CRC_MspInit+0x3c>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d10e      	bne.n	80012a4 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001286:	4b0b      	ldr	r3, [pc, #44]	@ (80012b4 <HAL_CRC_MspInit+0x40>)
 8001288:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800128c:	4a09      	ldr	r2, [pc, #36]	@ (80012b4 <HAL_CRC_MspInit+0x40>)
 800128e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001292:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8001296:	4b07      	ldr	r3, [pc, #28]	@ (80012b4 <HAL_CRC_MspInit+0x40>)
 8001298:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800129c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80012a0:	60fb      	str	r3, [r7, #12]
 80012a2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80012a4:	bf00      	nop
 80012a6:	3714      	adds	r7, #20
 80012a8:	46bd      	mov	sp, r7
 80012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ae:	4770      	bx	lr
 80012b0:	40023000 	.word	0x40023000
 80012b4:	46020c00 	.word	0x46020c00

080012b8 <HAL_CRC_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspDeInit(CRC_HandleTypeDef* hcrc)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b083      	sub	sp, #12
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a08      	ldr	r2, [pc, #32]	@ (80012e8 <HAL_CRC_MspDeInit+0x30>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d107      	bne.n	80012da <HAL_CRC_MspDeInit+0x22>
  {
  /* USER CODE BEGIN CRC_MspDeInit 0 */

  /* USER CODE END CRC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_CRC_CLK_DISABLE();
 80012ca:	4b08      	ldr	r3, [pc, #32]	@ (80012ec <HAL_CRC_MspDeInit+0x34>)
 80012cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80012d0:	4a06      	ldr	r2, [pc, #24]	@ (80012ec <HAL_CRC_MspDeInit+0x34>)
 80012d2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80012d6:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  /* USER CODE BEGIN CRC_MspDeInit 1 */

  /* USER CODE END CRC_MspDeInit 1 */
  }

}
 80012da:	bf00      	nop
 80012dc:	370c      	adds	r7, #12
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr
 80012e6:	bf00      	nop
 80012e8:	40023000 	.word	0x40023000
 80012ec:	46020c00 	.word	0x46020c00

080012f0 <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b096      	sub	sp, #88	@ 0x58
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012f8:	f107 0310 	add.w	r3, r7, #16
 80012fc:	2248      	movs	r2, #72	@ 0x48
 80012fe:	2100      	movs	r1, #0
 8001300:	4618      	mov	r0, r3
 8001302:	f02e f855 	bl	802f3b0 <memset>
  if(hlptim->Instance==LPTIM2)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4a12      	ldr	r2, [pc, #72]	@ (8001354 <HAL_LPTIM_MspInit+0x64>)
 800130c:	4293      	cmp	r3, r2
 800130e:	d11d      	bne.n	800134c <HAL_LPTIM_MspInit+0x5c>

  /* USER CODE END LPTIM2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPTIM2;
 8001310:	2308      	movs	r3, #8
 8001312:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lptim2ClockSelection = RCC_LPTIM2CLKSOURCE_HSI;
 8001314:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8001318:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800131a:	f107 0310 	add.w	r3, r7, #16
 800131e:	4618      	mov	r0, r3
 8001320:	f004 f97e 	bl	8005620 <HAL_RCCEx_PeriphCLKConfig>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <HAL_LPTIM_MspInit+0x3e>
    {
      Error_Handler();
 800132a:	f7ff fed1 	bl	80010d0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPTIM2_CLK_ENABLE();
 800132e:	4b0a      	ldr	r3, [pc, #40]	@ (8001358 <HAL_LPTIM_MspInit+0x68>)
 8001330:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8001334:	4a08      	ldr	r2, [pc, #32]	@ (8001358 <HAL_LPTIM_MspInit+0x68>)
 8001336:	f043 0320 	orr.w	r3, r3, #32
 800133a:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
 800133e:	4b06      	ldr	r3, [pc, #24]	@ (8001358 <HAL_LPTIM_MspInit+0x68>)
 8001340:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8001344:	f003 0320 	and.w	r3, r3, #32
 8001348:	60fb      	str	r3, [r7, #12]
 800134a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN LPTIM2_MspInit 1 */

  /* USER CODE END LPTIM2_MspInit 1 */
  }

}
 800134c:	bf00      	nop
 800134e:	3758      	adds	r7, #88	@ 0x58
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	40009400 	.word	0x40009400
 8001358:	46020c00 	.word	0x46020c00

0800135c <HAL_LPTIM_MspPostInit>:

void HAL_LPTIM_MspPostInit(LPTIM_HandleTypeDef* hlptim)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b088      	sub	sp, #32
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001364:	f107 030c 	add.w	r3, r7, #12
 8001368:	2200      	movs	r2, #0
 800136a:	601a      	str	r2, [r3, #0]
 800136c:	605a      	str	r2, [r3, #4]
 800136e:	609a      	str	r2, [r3, #8]
 8001370:	60da      	str	r2, [r3, #12]
 8001372:	611a      	str	r2, [r3, #16]
  if(hlptim->Instance==LPTIM2)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a12      	ldr	r2, [pc, #72]	@ (80013c4 <HAL_LPTIM_MspPostInit+0x68>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d11e      	bne.n	80013bc <HAL_LPTIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN LPTIM2_MspPostInit 0 */

  /* USER CODE END LPTIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800137e:	4b12      	ldr	r3, [pc, #72]	@ (80013c8 <HAL_LPTIM_MspPostInit+0x6c>)
 8001380:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001384:	4a10      	ldr	r2, [pc, #64]	@ (80013c8 <HAL_LPTIM_MspPostInit+0x6c>)
 8001386:	f043 0301 	orr.w	r3, r3, #1
 800138a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800138e:	4b0e      	ldr	r3, [pc, #56]	@ (80013c8 <HAL_LPTIM_MspPostInit+0x6c>)
 8001390:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001394:	f003 0301 	and.w	r3, r3, #1
 8001398:	60bb      	str	r3, [r7, #8]
 800139a:	68bb      	ldr	r3, [r7, #8]
    /**LPTIM2 GPIO Configuration
    PA1     ------> LPTIM2_CH2
    */
    GPIO_InitStruct.Pin = SOUND_Pin;
 800139c:	2302      	movs	r3, #2
 800139e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a0:	2302      	movs	r3, #2
 80013a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a4:	2300      	movs	r3, #0
 80013a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a8:	2300      	movs	r3, #0
 80013aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF13_LPTIM2;
 80013ac:	230d      	movs	r3, #13
 80013ae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(SOUND_GPIO_Port, &GPIO_InitStruct);
 80013b0:	f107 030c 	add.w	r3, r7, #12
 80013b4:	4619      	mov	r1, r3
 80013b6:	4805      	ldr	r0, [pc, #20]	@ (80013cc <HAL_LPTIM_MspPostInit+0x70>)
 80013b8:	f002 fde2 	bl	8003f80 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPTIM2_MspPostInit 1 */

  /* USER CODE END LPTIM2_MspPostInit 1 */
  }

}
 80013bc:	bf00      	nop
 80013be:	3720      	adds	r7, #32
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	40009400 	.word	0x40009400
 80013c8:	46020c00 	.word	0x46020c00
 80013cc:	42020000 	.word	0x42020000

080013d0 <HAL_RAMCFG_MspInit>:
* This function configures the hardware resources used in this example
* @param hramcfg: RAMCFG handle pointer
* @retval None
*/
void HAL_RAMCFG_MspInit(RAMCFG_HandleTypeDef* hramcfg)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b085      	sub	sp, #20
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN RAMCFG_MspInit 0 */

  /* USER CODE END RAMCFG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RAMCFG_CLK_ENABLE();
 80013d8:	4b0a      	ldr	r3, [pc, #40]	@ (8001404 <HAL_RAMCFG_MspInit+0x34>)
 80013da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80013de:	4a09      	ldr	r2, [pc, #36]	@ (8001404 <HAL_RAMCFG_MspInit+0x34>)
 80013e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013e4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 80013e8:	4b06      	ldr	r3, [pc, #24]	@ (8001404 <HAL_RAMCFG_MspInit+0x34>)
 80013ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80013ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013f2:	60fb      	str	r3, [r7, #12]
 80013f4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RAMCFG_MspInit 1 */

  /* USER CODE END RAMCFG_MspInit 1 */

}
 80013f6:	bf00      	nop
 80013f8:	3714      	adds	r7, #20
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop
 8001404:	46020c00 	.word	0x46020c00

08001408 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b096      	sub	sp, #88	@ 0x58
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001410:	f107 0310 	add.w	r3, r7, #16
 8001414:	2248      	movs	r2, #72	@ 0x48
 8001416:	2100      	movs	r1, #0
 8001418:	4618      	mov	r0, r3
 800141a:	f02d ffc9 	bl	802f3b0 <memset>
  if(hrng->Instance==RNG)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4a13      	ldr	r2, [pc, #76]	@ (8001470 <HAL_RNG_MspInit+0x68>)
 8001424:	4293      	cmp	r3, r2
 8001426:	d11e      	bne.n	8001466 <HAL_RNG_MspInit+0x5e>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8001428:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800142c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_HSI;
 800142e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001432:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001434:	f107 0310 	add.w	r3, r7, #16
 8001438:	4618      	mov	r0, r3
 800143a:	f004 f8f1 	bl	8005620 <HAL_RCCEx_PeriphCLKConfig>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d001      	beq.n	8001448 <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 8001444:	f7ff fe44 	bl	80010d0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8001448:	4b0a      	ldr	r3, [pc, #40]	@ (8001474 <HAL_RNG_MspInit+0x6c>)
 800144a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800144e:	4a09      	ldr	r2, [pc, #36]	@ (8001474 <HAL_RNG_MspInit+0x6c>)
 8001450:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001454:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001458:	4b06      	ldr	r3, [pc, #24]	@ (8001474 <HAL_RNG_MspInit+0x6c>)
 800145a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800145e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001462:	60fb      	str	r3, [r7, #12]
 8001464:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8001466:	bf00      	nop
 8001468:	3758      	adds	r7, #88	@ 0x58
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	420c0800 	.word	0x420c0800
 8001474:	46020c00 	.word	0x46020c00

08001478 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b096      	sub	sp, #88	@ 0x58
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001480:	f107 0310 	add.w	r3, r7, #16
 8001484:	2248      	movs	r2, #72	@ 0x48
 8001486:	2100      	movs	r1, #0
 8001488:	4618      	mov	r0, r3
 800148a:	f02d ff91 	bl	802f3b0 <memset>
  if(hrtc->Instance==RTC)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4a13      	ldr	r2, [pc, #76]	@ (80014e0 <HAL_RTC_MspInit+0x68>)
 8001494:	4293      	cmp	r3, r2
 8001496:	d11e      	bne.n	80014d6 <HAL_RTC_MspInit+0x5e>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001498:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800149c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800149e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80014a2:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014a4:	f107 0310 	add.w	r3, r7, #16
 80014a8:	4618      	mov	r0, r3
 80014aa:	f004 f8b9 	bl	8005620 <HAL_RCCEx_PeriphCLKConfig>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80014b4:	f7ff fe0c 	bl	80010d0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80014b8:	4b0a      	ldr	r3, [pc, #40]	@ (80014e4 <HAL_RTC_MspInit+0x6c>)
 80014ba:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80014be:	4a09      	ldr	r2, [pc, #36]	@ (80014e4 <HAL_RTC_MspInit+0x6c>)
 80014c0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80014c4:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 80014c8:	4b06      	ldr	r3, [pc, #24]	@ (80014e4 <HAL_RTC_MspInit+0x6c>)
 80014ca:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80014ce:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80014d2:	60fb      	str	r3, [r7, #12]
 80014d4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80014d6:	bf00      	nop
 80014d8:	3758      	adds	r7, #88	@ 0x58
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	46007800 	.word	0x46007800
 80014e4:	46020c00 	.word	0x46020c00

080014e8 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b084      	sub	sp, #16
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM1)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a0e      	ldr	r2, [pc, #56]	@ (8001530 <HAL_TIM_OC_MspInit+0x48>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d116      	bne.n	8001528 <HAL_TIM_OC_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80014fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001534 <HAL_TIM_OC_MspInit+0x4c>)
 80014fc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001500:	4a0c      	ldr	r2, [pc, #48]	@ (8001534 <HAL_TIM_OC_MspInit+0x4c>)
 8001502:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001506:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 800150a:	4b0a      	ldr	r3, [pc, #40]	@ (8001534 <HAL_TIM_OC_MspInit+0x4c>)
 800150c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001510:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001514:	60fb      	str	r3, [r7, #12]
 8001516:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8001518:	2200      	movs	r2, #0
 800151a:	2100      	movs	r1, #0
 800151c:	2026      	movs	r0, #38	@ 0x26
 800151e:	f001 fbe3 	bl	8002ce8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001522:	2026      	movs	r0, #38	@ 0x26
 8001524:	f001 fbfd 	bl	8002d22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001528:	bf00      	nop
 800152a:	3710      	adds	r7, #16
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	40012c00 	.word	0x40012c00
 8001534:	46020c00 	.word	0x46020c00

08001538 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b09c      	sub	sp, #112	@ 0x70
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001540:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001544:	2200      	movs	r2, #0
 8001546:	601a      	str	r2, [r3, #0]
 8001548:	605a      	str	r2, [r3, #4]
 800154a:	609a      	str	r2, [r3, #8]
 800154c:	60da      	str	r2, [r3, #12]
 800154e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001550:	f107 0314 	add.w	r3, r7, #20
 8001554:	2248      	movs	r2, #72	@ 0x48
 8001556:	2100      	movs	r1, #0
 8001558:	4618      	mov	r0, r3
 800155a:	f02d ff29 	bl	802f3b0 <memset>
  if(huart->Instance==USART2)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4a22      	ldr	r2, [pc, #136]	@ (80015ec <HAL_UART_MspInit+0xb4>)
 8001564:	4293      	cmp	r3, r2
 8001566:	d13c      	bne.n	80015e2 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001568:	2302      	movs	r3, #2
 800156a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_HSI;
 800156c:	2308      	movs	r3, #8
 800156e:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001570:	f107 0314 	add.w	r3, r7, #20
 8001574:	4618      	mov	r0, r3
 8001576:	f004 f853 	bl	8005620 <HAL_RCCEx_PeriphCLKConfig>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d001      	beq.n	8001584 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001580:	f7ff fda6 	bl	80010d0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001584:	4b1a      	ldr	r3, [pc, #104]	@ (80015f0 <HAL_UART_MspInit+0xb8>)
 8001586:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800158a:	4a19      	ldr	r2, [pc, #100]	@ (80015f0 <HAL_UART_MspInit+0xb8>)
 800158c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001590:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001594:	4b16      	ldr	r3, [pc, #88]	@ (80015f0 <HAL_UART_MspInit+0xb8>)
 8001596:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800159a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800159e:	613b      	str	r3, [r7, #16]
 80015a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015a2:	4b13      	ldr	r3, [pc, #76]	@ (80015f0 <HAL_UART_MspInit+0xb8>)
 80015a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80015a8:	4a11      	ldr	r2, [pc, #68]	@ (80015f0 <HAL_UART_MspInit+0xb8>)
 80015aa:	f043 0301 	orr.w	r3, r3, #1
 80015ae:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80015b2:	4b0f      	ldr	r3, [pc, #60]	@ (80015f0 <HAL_UART_MspInit+0xb8>)
 80015b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80015b8:	f003 0301 	and.w	r3, r3, #1
 80015bc:	60fb      	str	r3, [r7, #12]
 80015be:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA12     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = TX_Pin;
 80015c0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80015c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015c6:	2312      	movs	r3, #18
 80015c8:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ca:	2300      	movs	r3, #0
 80015cc:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ce:	2300      	movs	r3, #0
 80015d0:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 80015d2:	2303      	movs	r3, #3
 80015d4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(TX_GPIO_Port, &GPIO_InitStruct);
 80015d6:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80015da:	4619      	mov	r1, r3
 80015dc:	4805      	ldr	r0, [pc, #20]	@ (80015f4 <HAL_UART_MspInit+0xbc>)
 80015de:	f002 fccf 	bl	8003f80 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80015e2:	bf00      	nop
 80015e4:	3770      	adds	r7, #112	@ 0x70
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	40004400 	.word	0x40004400
 80015f0:	46020c00 	.word	0x46020c00
 80015f4:	42020000 	.word	0x42020000

080015f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b083      	sub	sp, #12
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	4603      	mov	r3, r0
 8001600:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001606:	2b00      	cmp	r3, #0
 8001608:	db0b      	blt.n	8001622 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800160a:	79fb      	ldrb	r3, [r7, #7]
 800160c:	f003 021f 	and.w	r2, r3, #31
 8001610:	4907      	ldr	r1, [pc, #28]	@ (8001630 <__NVIC_EnableIRQ+0x38>)
 8001612:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001616:	095b      	lsrs	r3, r3, #5
 8001618:	2001      	movs	r0, #1
 800161a:	fa00 f202 	lsl.w	r2, r0, r2
 800161e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001622:	bf00      	nop
 8001624:	370c      	adds	r7, #12
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr
 800162e:	bf00      	nop
 8001630:	e000e100 	.word	0xe000e100

08001634 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001634:	b480      	push	{r7}
 8001636:	b083      	sub	sp, #12
 8001638:	af00      	add	r7, sp, #0
 800163a:	4603      	mov	r3, r0
 800163c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800163e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001642:	2b00      	cmp	r3, #0
 8001644:	db12      	blt.n	800166c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001646:	79fb      	ldrb	r3, [r7, #7]
 8001648:	f003 021f 	and.w	r2, r3, #31
 800164c:	490a      	ldr	r1, [pc, #40]	@ (8001678 <__NVIC_DisableIRQ+0x44>)
 800164e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001652:	095b      	lsrs	r3, r3, #5
 8001654:	2001      	movs	r0, #1
 8001656:	fa00 f202 	lsl.w	r2, r0, r2
 800165a:	3320      	adds	r3, #32
 800165c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8001660:	f3bf 8f4f 	dsb	sy
}
 8001664:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001666:	f3bf 8f6f 	isb	sy
}
 800166a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800166c:	bf00      	nop
 800166e:	370c      	adds	r7, #12
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr
 8001678:	e000e100 	.word	0xe000e100

0800167c <LL_RCC_RADIO_DisableSleepTimerClock>:
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->RADIOENR, RCC_RADIOENR_STRADIOCLKON);
 8001680:	4b06      	ldr	r3, [pc, #24]	@ (800169c <LL_RCC_RADIO_DisableSleepTimerClock+0x20>)
 8001682:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 8001686:	4a05      	ldr	r2, [pc, #20]	@ (800169c <LL_RCC_RADIO_DisableSleepTimerClock+0x20>)
 8001688:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800168c:	f8c2 3208 	str.w	r3, [r2, #520]	@ 0x208
}
 8001690:	bf00      	nop
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr
 800169a:	bf00      	nop
 800169c:	46020c00 	.word	0x46020c00

080016a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80016a4:	bf00      	nop
 80016a6:	e7fd      	b.n	80016a4 <NMI_Handler+0x4>

080016a8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016ac:	bf00      	nop
 80016ae:	e7fd      	b.n	80016ac <HardFault_Handler+0x4>

080016b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016b4:	bf00      	nop
 80016b6:	e7fd      	b.n	80016b4 <MemManage_Handler+0x4>

080016b8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016bc:	bf00      	nop
 80016be:	e7fd      	b.n	80016bc <BusFault_Handler+0x4>

080016c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016c4:	bf00      	nop
 80016c6:	e7fd      	b.n	80016c4 <UsageFault_Handler+0x4>

080016c8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016cc:	bf00      	nop
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr

080016d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016d6:	b480      	push	{r7}
 80016d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016da:	bf00      	nop
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr

080016e4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016e8:	bf00      	nop
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr

080016f2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016f2:	b580      	push	{r7, lr}
 80016f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016f6:	f000 fa69 	bl	8001bcc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016fa:	bf00      	nop
 80016fc:	bd80      	pop	{r7, pc}
	...

08001700 <EXTI15_IRQHandler>:

/**
  * @brief This function handles EXTI Line15 interrupt.
  */
void EXTI15_IRQHandler(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_IRQn 0 */

  /* USER CODE END EXTI15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Sync_Pin);
 8001704:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8001708:	f002 fd9e 	bl	8004248 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_IRQn 1 */
  pulseCounter++;
 800170c:	4b03      	ldr	r3, [pc, #12]	@ (800171c <EXTI15_IRQHandler+0x1c>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	3301      	adds	r3, #1
 8001712:	4a02      	ldr	r2, [pc, #8]	@ (800171c <EXTI15_IRQHandler+0x1c>)
 8001714:	6013      	str	r3, [r2, #0]
  /* Включение LED */
  //NotifyAct(LED_NOTIFY);
  /* USER CODE END EXTI15_IRQn 1 */
}
 8001716:	bf00      	nop
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	20001718 	.word	0x20001718

08001720 <GPDMA1_Channel0_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 0 global interrupt.
  */
void GPDMA1_Channel0_IRQHandler(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 0 */

  /* USER CODE END GPDMA1_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel0);
 8001724:	481f      	ldr	r0, [pc, #124]	@ (80017a4 <GPDMA1_Channel0_IRQHandler+0x84>)
 8001726:	f001 fef9 	bl	800351c <HAL_DMA_IRQHandler>
  /*
   * 0 - 1024 канала
   * 1 - 2048 каналов
   * 2 - 4096 каналов
   */
	switch (resolution) {
 800172a:	4b1f      	ldr	r3, [pc, #124]	@ (80017a8 <GPDMA1_Channel0_IRQHandler+0x88>)
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	2b02      	cmp	r3, #2
 8001730:	d024      	beq.n	800177c <GPDMA1_Channel0_IRQHandler+0x5c>
 8001732:	2b02      	cmp	r3, #2
 8001734:	dc30      	bgt.n	8001798 <GPDMA1_Channel0_IRQHandler+0x78>
 8001736:	2b00      	cmp	r3, #0
 8001738:	d002      	beq.n	8001740 <GPDMA1_Channel0_IRQHandler+0x20>
 800173a:	2b01      	cmp	r3, #1
 800173c:	d00f      	beq.n	800175e <GPDMA1_Channel0_IRQHandler+0x3e>
 800173e:	e02b      	b.n	8001798 <GPDMA1_Channel0_IRQHandler+0x78>
		/* 1024 */
		case 0:	{
			specterBuffer[((pulseLevel >> 2) & 0x3FF) + HEADER_OFFSET_2048]++;
 8001740:	4b1a      	ldr	r3, [pc, #104]	@ (80017ac <GPDMA1_Channel0_IRQHandler+0x8c>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	089b      	lsrs	r3, r3, #2
 8001746:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800174a:	337b      	adds	r3, #123	@ 0x7b
 800174c:	4a18      	ldr	r2, [pc, #96]	@ (80017b0 <GPDMA1_Channel0_IRQHandler+0x90>)
 800174e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001752:	3201      	adds	r2, #1
 8001754:	b291      	uxth	r1, r2
 8001756:	4a16      	ldr	r2, [pc, #88]	@ (80017b0 <GPDMA1_Channel0_IRQHandler+0x90>)
 8001758:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			break;
 800175c:	e01c      	b.n	8001798 <GPDMA1_Channel0_IRQHandler+0x78>
		}
		/* 2048 */
		case 1: {
			specterBuffer[((pulseLevel >> 1) & 0x7FF) + HEADER_OFFSET_4096]++;
 800175e:	4b13      	ldr	r3, [pc, #76]	@ (80017ac <GPDMA1_Channel0_IRQHandler+0x8c>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	085b      	lsrs	r3, r3, #1
 8001764:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001768:	3377      	adds	r3, #119	@ 0x77
 800176a:	4a11      	ldr	r2, [pc, #68]	@ (80017b0 <GPDMA1_Channel0_IRQHandler+0x90>)
 800176c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001770:	3201      	adds	r2, #1
 8001772:	b291      	uxth	r1, r2
 8001774:	4a0e      	ldr	r2, [pc, #56]	@ (80017b0 <GPDMA1_Channel0_IRQHandler+0x90>)
 8001776:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			break;
 800177a:	e00d      	b.n	8001798 <GPDMA1_Channel0_IRQHandler+0x78>
		}
		/* 4096 */
		case 2: {
			specterBuffer[(pulseLevel & 0xFFF) + HEADER_OFFSET_8192]++;
 800177c:	4b0b      	ldr	r3, [pc, #44]	@ (80017ac <GPDMA1_Channel0_IRQHandler+0x8c>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001784:	336f      	adds	r3, #111	@ 0x6f
 8001786:	4a0a      	ldr	r2, [pc, #40]	@ (80017b0 <GPDMA1_Channel0_IRQHandler+0x90>)
 8001788:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800178c:	3201      	adds	r2, #1
 800178e:	b291      	uxth	r1, r2
 8001790:	4a07      	ldr	r2, [pc, #28]	@ (80017b0 <GPDMA1_Channel0_IRQHandler+0x90>)
 8001792:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			break;
 8001796:	bf00      	nop
		}
	}
	/* Оповещение об импульсе */
	NotifyAct(LED_NOTIFY);
 8001798:	2004      	movs	r0, #4
 800179a:	f7ff f85f 	bl	800085c <NotifyAct>
  /* USER CODE END GPDMA1_Channel0_IRQn 1 */
}
 800179e:	bf00      	nop
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	20001510 	.word	0x20001510
 80017a8:	20001784 	.word	0x20001784
 80017ac:	2000171c 	.word	0x2000171c
 80017b0:	20001788 	.word	0x20001788

080017b4 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 Update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80017b8:	4814      	ldr	r0, [pc, #80]	@ (800180c <TIM1_UP_IRQHandler+0x58>)
 80017ba:	f004 fe33 	bl	8006424 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */
  if (LEDflag) {
 80017be:	4b14      	ldr	r3, [pc, #80]	@ (8001810 <TIM1_UP_IRQHandler+0x5c>)
 80017c0:	781b      	ldrb	r3, [r3, #0]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d007      	beq.n	80017d6 <TIM1_UP_IRQHandler+0x22>
	  LEDflag = false;
 80017c6:	4b12      	ldr	r3, [pc, #72]	@ (8001810 <TIM1_UP_IRQHandler+0x5c>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	701a      	strb	r2, [r3, #0]
	  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80017cc:	2200      	movs	r2, #0
 80017ce:	2120      	movs	r1, #32
 80017d0:	4810      	ldr	r0, [pc, #64]	@ (8001814 <TIM1_UP_IRQHandler+0x60>)
 80017d2:	f002 fd21 	bl	8004218 <HAL_GPIO_WritePin>
  }
  if (VibroFlag) {
 80017d6:	4b10      	ldr	r3, [pc, #64]	@ (8001818 <TIM1_UP_IRQHandler+0x64>)
 80017d8:	781b      	ldrb	r3, [r3, #0]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d007      	beq.n	80017ee <TIM1_UP_IRQHandler+0x3a>
	  VibroFlag = false;
 80017de:	4b0e      	ldr	r3, [pc, #56]	@ (8001818 <TIM1_UP_IRQHandler+0x64>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	701a      	strb	r2, [r3, #0]
	  HAL_GPIO_WritePin(VIBRO_GPIO_Port, VIBRO_Pin, GPIO_PIN_RESET);
 80017e4:	2200      	movs	r2, #0
 80017e6:	2140      	movs	r1, #64	@ 0x40
 80017e8:	480a      	ldr	r0, [pc, #40]	@ (8001814 <TIM1_UP_IRQHandler+0x60>)
 80017ea:	f002 fd15 	bl	8004218 <HAL_GPIO_WritePin>
  }
  if (SoundFlag) {
 80017ee:	4b0b      	ldr	r3, [pc, #44]	@ (800181c <TIM1_UP_IRQHandler+0x68>)
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d005      	beq.n	8001802 <TIM1_UP_IRQHandler+0x4e>
	  SoundFlag = false;
 80017f6:	4b09      	ldr	r3, [pc, #36]	@ (800181c <TIM1_UP_IRQHandler+0x68>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	701a      	strb	r2, [r3, #0]
	  HAL_LPTIM_Counter_Stop(&hlptim2);
 80017fc:	4808      	ldr	r0, [pc, #32]	@ (8001820 <TIM1_UP_IRQHandler+0x6c>)
 80017fe:	f002 fea1 	bl	8004544 <HAL_LPTIM_Counter_Stop>
	  //HAL_TIM_OC_Stop(&htim3, TIM_CHANNEL_2);
  }
  HAL_TIM_Base_Stop_IT(&htim1);
 8001802:	4802      	ldr	r0, [pc, #8]	@ (800180c <TIM1_UP_IRQHandler+0x58>)
 8001804:	f004 fd2e 	bl	8006264 <HAL_TIM_Base_Stop_IT>

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001808:	bf00      	nop
 800180a:	bd80      	pop	{r7, pc}
 800180c:	20001628 	.word	0x20001628
 8001810:	20001709 	.word	0x20001709
 8001814:	42020000 	.word	0x42020000
 8001818:	2000170b 	.word	0x2000170b
 800181c:	2000170a 	.word	0x2000170a
 8001820:	20001588 	.word	0x20001588

08001824 <ADC4_IRQHandler>:

/**
  * @brief This function handles ADC4 (12bits) global interrupt.
  */
void ADC4_IRQHandler(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC4_IRQn 0 */
	//HAL_ADC_Stop_IT(&hadc4);
  /* USER CODE END ADC4_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc4);
 8001828:	4802      	ldr	r0, [pc, #8]	@ (8001834 <ADC4_IRQHandler+0x10>)
 800182a:	f000 fdcd 	bl	80023c8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC4_IRQn 1 */
  /* USER CODE END ADC4_IRQn 1 */
}
 800182e:	bf00      	nop
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	200014a4 	.word	0x200014a4

08001838 <RADIO_IRQHandler>:

/**
  * @brief This function handles 2.4GHz RADIO global interrupt.
  */
void RADIO_IRQHandler(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RADIO_IRQn 0 */

  /* USER CODE END RADIO_IRQn 0 */

  if(NULL != radio_callback)
 800183c:	4b06      	ldr	r3, [pc, #24]	@ (8001858 <RADIO_IRQHandler+0x20>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d002      	beq.n	800184a <RADIO_IRQHandler+0x12>
  {
    radio_callback();
 8001844:	4b04      	ldr	r3, [pc, #16]	@ (8001858 <RADIO_IRQHandler+0x20>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4798      	blx	r3
  }

  LL_RCC_RADIO_DisableSleepTimerClock();
 800184a:	f7ff ff17 	bl	800167c <LL_RCC_RADIO_DisableSleepTimerClock>
  __ASM volatile ("isb 0xF":::"memory");
 800184e:	f3bf 8f6f 	isb	sy
}
 8001852:	bf00      	nop
  __ISB();

  /* USER CODE BEGIN RADIO_IRQn 1 */

  /* USER CODE END RADIO_IRQn 1 */
}
 8001854:	bf00      	nop
 8001856:	bd80      	pop	{r7, pc}
 8001858:	20006940 	.word	0x20006940

0800185c <HASH_IRQHandler>:

/**
  * @brief This function handles HASH global interrupt.
  */
void HASH_IRQHandler(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HASH_IRQn 0 */

  /* USER CODE END HASH_IRQn 0 */

  /* Disable SW radio low interrupt to prevent nested calls */
  NVIC_DisableIRQ(RADIO_SW_LOW_INTR_NUM);
 8001860:	203d      	movs	r0, #61	@ 0x3d
 8001862:	f7ff fee7 	bl	8001634 <__NVIC_DisableIRQ>

  if(NULL != low_isr_callback) {
 8001866:	4b0c      	ldr	r3, [pc, #48]	@ (8001898 <HASH_IRQHandler+0x3c>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d002      	beq.n	8001874 <HASH_IRQHandler+0x18>
    low_isr_callback();
 800186e:	4b0a      	ldr	r3, [pc, #40]	@ (8001898 <HASH_IRQHandler+0x3c>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4798      	blx	r3
  }

  /* Check if nested SW radio low interrupt has been requested*/
  if(radio_sw_low_isr_is_running_high_prio != 0) {
 8001874:	4b09      	ldr	r3, [pc, #36]	@ (800189c <HASH_IRQHandler+0x40>)
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	b2db      	uxtb	r3, r3
 800187a:	2b00      	cmp	r3, #0
 800187c:	d007      	beq.n	800188e <HASH_IRQHandler+0x32>
    HAL_NVIC_SetPriority((IRQn_Type) RADIO_SW_LOW_INTR_NUM, RADIO_INTR_PRIO_LOW, 0);
 800187e:	2200      	movs	r2, #0
 8001880:	2105      	movs	r1, #5
 8001882:	203d      	movs	r0, #61	@ 0x3d
 8001884:	f001 fa30 	bl	8002ce8 <HAL_NVIC_SetPriority>
    radio_sw_low_isr_is_running_high_prio = 0;
 8001888:	4b04      	ldr	r3, [pc, #16]	@ (800189c <HASH_IRQHandler+0x40>)
 800188a:	2200      	movs	r2, #0
 800188c:	701a      	strb	r2, [r3, #0]
  }

  /* Re-enable SW radio low interrupt */
  NVIC_EnableIRQ(RADIO_SW_LOW_INTR_NUM);
 800188e:	203d      	movs	r0, #61	@ 0x3d
 8001890:	f7ff feb2 	bl	80015f8 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN HASH_IRQn 1 */

  /* USER CODE END HASH_IRQn 1 */
}
 8001894:	bf00      	nop
 8001896:	bd80      	pop	{r7, pc}
 8001898:	20006944 	.word	0x20006944
 800189c:	20006960 	.word	0x20006960

080018a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b086      	sub	sp, #24
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018a8:	4a14      	ldr	r2, [pc, #80]	@ (80018fc <_sbrk+0x5c>)
 80018aa:	4b15      	ldr	r3, [pc, #84]	@ (8001900 <_sbrk+0x60>)
 80018ac:	1ad3      	subs	r3, r2, r3
 80018ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018b4:	4b13      	ldr	r3, [pc, #76]	@ (8001904 <_sbrk+0x64>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d102      	bne.n	80018c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018bc:	4b11      	ldr	r3, [pc, #68]	@ (8001904 <_sbrk+0x64>)
 80018be:	4a12      	ldr	r2, [pc, #72]	@ (8001908 <_sbrk+0x68>)
 80018c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018c2:	4b10      	ldr	r3, [pc, #64]	@ (8001904 <_sbrk+0x64>)
 80018c4:	681a      	ldr	r2, [r3, #0]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	4413      	add	r3, r2
 80018ca:	693a      	ldr	r2, [r7, #16]
 80018cc:	429a      	cmp	r2, r3
 80018ce:	d207      	bcs.n	80018e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018d0:	f02d fd76 	bl	802f3c0 <__errno>
 80018d4:	4603      	mov	r3, r0
 80018d6:	220c      	movs	r2, #12
 80018d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018da:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80018de:	e009      	b.n	80018f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018e0:	4b08      	ldr	r3, [pc, #32]	@ (8001904 <_sbrk+0x64>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018e6:	4b07      	ldr	r3, [pc, #28]	@ (8001904 <_sbrk+0x64>)
 80018e8:	681a      	ldr	r2, [r3, #0]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	4413      	add	r3, r2
 80018ee:	4a05      	ldr	r2, [pc, #20]	@ (8001904 <_sbrk+0x64>)
 80018f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018f2:	68fb      	ldr	r3, [r7, #12]
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	3718      	adds	r7, #24
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	20020000 	.word	0x20020000
 8001900:	00000400 	.word	0x00000400
 8001904:	20003868 	.word	0x20003868
 8001908:	2000a1d8 	.word	0x2000a1d8

0800190c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
  __IO uint32_t tmpreg;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001910:	4b06      	ldr	r3, [pc, #24]	@ (800192c <SystemInit+0x20>)
 8001912:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001916:	4a05      	ldr	r2, [pc, #20]	@ (800192c <SystemInit+0x20>)
 8001918:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800191c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  CLEAR_BIT(ADC4->CR, ADC_CR_ADVREGEN);

  /* Disable ADC kernel clock */
  CLEAR_BIT(RCC->AHB4ENR, RCC_AHB4ENR_ADC4EN);
#endif
}
 8001920:	bf00      	nop
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr
 800192a:	bf00      	nop
 800192c:	e000ed00 	.word	0xe000ed00

08001930 <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8001930:	b480      	push	{r7}
 8001932:	b089      	sub	sp, #36	@ 0x24
 8001934:	af00      	add	r7, sp, #0
  uint32_t plln;
  float_t fracn;
  float_t pllvco;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR1 & RCC_CFGR1_SWS)
 8001936:	4b4f      	ldr	r3, [pc, #316]	@ (8001a74 <SystemCoreClockUpdate+0x144>)
 8001938:	69db      	ldr	r3, [r3, #28]
 800193a:	f003 030c 	and.w	r3, r3, #12
 800193e:	2b08      	cmp	r3, #8
 8001940:	d002      	beq.n	8001948 <SystemCoreClockUpdate+0x18>
 8001942:	2b0c      	cmp	r3, #12
 8001944:	d00b      	beq.n	800195e <SystemCoreClockUpdate+0x2e>
 8001946:	e07d      	b.n	8001a44 <SystemCoreClockUpdate+0x114>
  {
    case RCC_CFGR1_SWS_1:  /* HSE used as system clock source */
      SystemCoreClock = (HSE_VALUE >> ((RCC->CR & RCC_CR_HSEPRE) >> RCC_CR_HSEPRE_Pos));
 8001948:	4b4a      	ldr	r3, [pc, #296]	@ (8001a74 <SystemCoreClockUpdate+0x144>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	0d1b      	lsrs	r3, r3, #20
 800194e:	f003 0301 	and.w	r3, r3, #1
 8001952:	4a49      	ldr	r2, [pc, #292]	@ (8001a78 <SystemCoreClockUpdate+0x148>)
 8001954:	fa22 f303 	lsr.w	r3, r2, r3
 8001958:	4a48      	ldr	r2, [pc, #288]	@ (8001a7c <SystemCoreClockUpdate+0x14c>)
 800195a:	6013      	str	r3, [r2, #0]
      break;
 800195c:	e076      	b.n	8001a4c <SystemCoreClockUpdate+0x11c>

    case (RCC_CFGR1_SWS_0 | RCC_CFGR1_SWS_1):  /* PLL1 used as system clock source */
      /* PLL_VCO = (PLLsource / PLLM) * PLLN * FractionnalPart
          SYSCLK = PLL_VCO / PLLR */
      /* Get PLL1 CFGR and DIVR register values */
      tmp1 = RCC->PLL1CFGR;
 800195e:	4b45      	ldr	r3, [pc, #276]	@ (8001a74 <SystemCoreClockUpdate+0x144>)
 8001960:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001962:	61fb      	str	r3, [r7, #28]
      tmp2 = RCC->PLL1DIVR;
 8001964:	4b43      	ldr	r3, [pc, #268]	@ (8001a74 <SystemCoreClockUpdate+0x144>)
 8001966:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001968:	617b      	str	r3, [r7, #20]

      /* Retrieve PLL1 multiplication factor and divider */
      pllm = ((tmp1 & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800196a:	69fb      	ldr	r3, [r7, #28]
 800196c:	0a1b      	lsrs	r3, r3, #8
 800196e:	f003 0307 	and.w	r3, r3, #7
 8001972:	3301      	adds	r3, #1
 8001974:	613b      	str	r3, [r7, #16]
      plln = (tmp2 & RCC_PLL1DIVR_PLL1N) + 1U;
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800197c:	3301      	adds	r3, #1
 800197e:	60fb      	str	r3, [r7, #12]
      pllr = ((tmp2 & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U;
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	0e1b      	lsrs	r3, r3, #24
 8001984:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001988:	3301      	adds	r3, #1
 800198a:	60bb      	str	r3, [r7, #8]

      /* Check if fractional part is enable */
      if ((tmp1 & RCC_PLL1CFGR_PLL1FRACEN) != 0x00u)
 800198c:	69fb      	ldr	r3, [r7, #28]
 800198e:	f003 0310 	and.w	r3, r3, #16
 8001992:	2b00      	cmp	r3, #0
 8001994:	d00b      	beq.n	80019ae <SystemCoreClockUpdate+0x7e>
      {
        fracn = (float_t)((uint32_t)((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8001996:	4b37      	ldr	r3, [pc, #220]	@ (8001a74 <SystemCoreClockUpdate+0x144>)
 8001998:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800199a:	08db      	lsrs	r3, r3, #3
 800199c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80019a0:	ee07 3a90 	vmov	s15, r3
 80019a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80019a8:	edc7 7a06 	vstr	s15, [r7, #24]
 80019ac:	e002      	b.n	80019b4 <SystemCoreClockUpdate+0x84>
      }
      else
      {
        fracn = (float_t)0U;
 80019ae:	f04f 0300 	mov.w	r3, #0
 80019b2:	61bb      	str	r3, [r7, #24]
      }

      /* determine PLL source */
      pllsource = (tmp1 & RCC_PLL1CFGR_PLL1SRC);
 80019b4:	69fb      	ldr	r3, [r7, #28]
 80019b6:	f003 0303 	and.w	r3, r3, #3
 80019ba:	607b      	str	r3, [r7, #4]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2b02      	cmp	r3, #2
 80019c0:	d003      	beq.n	80019ca <SystemCoreClockUpdate+0x9a>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2b03      	cmp	r3, #3
 80019c6:	d003      	beq.n	80019d0 <SystemCoreClockUpdate+0xa0>
 80019c8:	e00c      	b.n	80019e4 <SystemCoreClockUpdate+0xb4>
      switch (pllsource)
      {
        /* HSI used as PLL1 clock source */
        case RCC_PLL1CFGR_PLL1SRC_1:
          tmp1 = HSI_VALUE;
 80019ca:	4b2d      	ldr	r3, [pc, #180]	@ (8001a80 <SystemCoreClockUpdate+0x150>)
 80019cc:	61fb      	str	r3, [r7, #28]
          break;
 80019ce:	e00c      	b.n	80019ea <SystemCoreClockUpdate+0xba>

        /* HSE used as PLL1 clock source */
        case (RCC_PLL1CFGR_PLL1SRC_0 | RCC_PLL1CFGR_PLL1SRC_1):
          tmp1 = (HSE_VALUE >> ((RCC->CR & RCC_CR_HSEPRE) >> RCC_CR_HSEPRE_Pos));
 80019d0:	4b28      	ldr	r3, [pc, #160]	@ (8001a74 <SystemCoreClockUpdate+0x144>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	0d1b      	lsrs	r3, r3, #20
 80019d6:	f003 0301 	and.w	r3, r3, #1
 80019da:	4a27      	ldr	r2, [pc, #156]	@ (8001a78 <SystemCoreClockUpdate+0x148>)
 80019dc:	fa22 f303 	lsr.w	r3, r2, r3
 80019e0:	61fb      	str	r3, [r7, #28]
          break;
 80019e2:	e002      	b.n	80019ea <SystemCoreClockUpdate+0xba>

        default:
          tmp1 = 0U;
 80019e4:	2300      	movs	r3, #0
 80019e6:	61fb      	str	r3, [r7, #28]
          break;
 80019e8:	bf00      	nop
      }

      /* Compute VCO output frequency */
      pllvco = ((float_t) tmp1 / (float_t)pllm) * (((float_t)plln + (float_t)(fracn / (float_t)0x2000U)));
 80019ea:	69fb      	ldr	r3, [r7, #28]
 80019ec:	ee07 3a90 	vmov	s15, r3
 80019f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80019f4:	693b      	ldr	r3, [r7, #16]
 80019f6:	ee07 3a90 	vmov	s15, r3
 80019fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80019fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	ee07 3a90 	vmov	s15, r3
 8001a08:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001a0c:	ed97 6a06 	vldr	s12, [r7, #24]
 8001a10:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 8001a84 <SystemCoreClockUpdate+0x154>
 8001a14:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001a18:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001a1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a20:	edc7 7a00 	vstr	s15, [r7]
      SystemCoreClock = (uint32_t)((float_t)(pllvco / (float_t)pllr));
 8001a24:	68bb      	ldr	r3, [r7, #8]
 8001a26:	ee07 3a90 	vmov	s15, r3
 8001a2a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001a2e:	edd7 6a00 	vldr	s13, [r7]
 8001a32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a3a:	ee17 2a90 	vmov	r2, s15
 8001a3e:	4b0f      	ldr	r3, [pc, #60]	@ (8001a7c <SystemCoreClockUpdate+0x14c>)
 8001a40:	601a      	str	r2, [r3, #0]
      break;
 8001a42:	e003      	b.n	8001a4c <SystemCoreClockUpdate+0x11c>

    case 0x00u:  /* HSI used as system clock source */
    default:
      SystemCoreClock = HSI_VALUE;
 8001a44:	4b0d      	ldr	r3, [pc, #52]	@ (8001a7c <SystemCoreClockUpdate+0x14c>)
 8001a46:	4a0e      	ldr	r2, [pc, #56]	@ (8001a80 <SystemCoreClockUpdate+0x150>)
 8001a48:	601a      	str	r2, [r3, #0]
      break;
 8001a4a:	bf00      	nop
  }

  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp1 = AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE)];
 8001a4c:	4b09      	ldr	r3, [pc, #36]	@ (8001a74 <SystemCoreClockUpdate+0x144>)
 8001a4e:	6a1b      	ldr	r3, [r3, #32]
 8001a50:	f003 0307 	and.w	r3, r3, #7
 8001a54:	4a0c      	ldr	r2, [pc, #48]	@ (8001a88 <SystemCoreClockUpdate+0x158>)
 8001a56:	5cd3      	ldrb	r3, [r2, r3]
 8001a58:	61fb      	str	r3, [r7, #28]

  /* HCLK clock frequency */
  SystemCoreClock >>= tmp1;
 8001a5a:	4b08      	ldr	r3, [pc, #32]	@ (8001a7c <SystemCoreClockUpdate+0x14c>)
 8001a5c:	681a      	ldr	r2, [r3, #0]
 8001a5e:	69fb      	ldr	r3, [r7, #28]
 8001a60:	fa22 f303 	lsr.w	r3, r2, r3
 8001a64:	4a05      	ldr	r2, [pc, #20]	@ (8001a7c <SystemCoreClockUpdate+0x14c>)
 8001a66:	6013      	str	r3, [r2, #0]
}
 8001a68:	bf00      	nop
 8001a6a:	3724      	adds	r7, #36	@ 0x24
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr
 8001a74:	46020c00 	.word	0x46020c00
 8001a78:	01e84800 	.word	0x01e84800
 8001a7c:	20000024 	.word	0x20000024
 8001a80:	00f42400 	.word	0x00f42400
 8001a84:	46000000 	.word	0x46000000
 8001a88:	08030994 	.word	0x08030994

08001a8c <AES_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001a8c:	e7fe      	b.n	8001a8c <AES_IRQHandler>
	...

08001a90 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a94:	4b0d      	ldr	r3, [pc, #52]	@ (8001acc <HAL_Init+0x3c>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a0c      	ldr	r2, [pc, #48]	@ (8001acc <HAL_Init+0x3c>)
 8001a9a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a9e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001aa0:	2003      	movs	r0, #3
 8001aa2:	f001 f916 	bl	8002cd2 <HAL_NVIC_SetPriorityGrouping>

  /* Ensure time base clock coherency */
  SystemCoreClockUpdate();
 8001aa6:	f7ff ff43 	bl	8001930 <SystemCoreClockUpdate>

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001aaa:	2004      	movs	r0, #4
 8001aac:	f001 f986 	bl	8002dbc <HAL_SYSTICK_CLKSourceConfig>

  /* Initialize 1ms tick time base (default SysTick based on HSI clock after Reset) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ab0:	200f      	movs	r0, #15
 8001ab2:	f000 f80d 	bl	8001ad0 <HAL_InitTick>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d001      	beq.n	8001ac0 <HAL_Init+0x30>
  {
    return HAL_ERROR;
 8001abc:	2301      	movs	r3, #1
 8001abe:	e002      	b.n	8001ac6 <HAL_Init+0x36>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001ac0:	f7ff fb0c 	bl	80010dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ac4:	2300      	movs	r3, #0
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	40022000 	.word	0x40022000

08001ad0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b084      	sub	sp, #16
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8001adc:	4b36      	ldr	r3, [pc, #216]	@ (8001bb8 <HAL_InitTick+0xe8>)
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d101      	bne.n	8001ae8 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	e062      	b.n	8001bae <HAL_InitTick+0xde>
  }

  /* Check Clock source to calculate the tickNumber */
  if(READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8001ae8:	4b34      	ldr	r3, [pc, #208]	@ (8001bbc <HAL_InitTick+0xec>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f003 0304 	and.w	r3, r3, #4
 8001af0:	2b04      	cmp	r3, #4
 8001af2:	d10c      	bne.n	8001b0e <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8001af4:	4b32      	ldr	r3, [pc, #200]	@ (8001bc0 <HAL_InitTick+0xf0>)
 8001af6:	681a      	ldr	r2, [r3, #0]
 8001af8:	4b2f      	ldr	r3, [pc, #188]	@ (8001bb8 <HAL_InitTick+0xe8>)
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	4619      	mov	r1, r3
 8001afe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b02:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b06:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b0a:	60fb      	str	r3, [r7, #12]
 8001b0c:	e03d      	b.n	8001b8a <HAL_InitTick+0xba>
  }
  else
  {
    systicksel = __HAL_RCC_GET_SYSTICK_SOURCE();
 8001b0e:	4b2d      	ldr	r3, [pc, #180]	@ (8001bc4 <HAL_InitTick+0xf4>)
 8001b10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b14:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8001b18:	60bb      	str	r3, [r7, #8]
    switch (systicksel)
 8001b1a:	68bb      	ldr	r3, [r7, #8]
 8001b1c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001b20:	d025      	beq.n	8001b6e <HAL_InitTick+0x9e>
 8001b22:	68bb      	ldr	r3, [r7, #8]
 8001b24:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001b28:	d82e      	bhi.n	8001b88 <HAL_InitTick+0xb8>
 8001b2a:	68bb      	ldr	r3, [r7, #8]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d004      	beq.n	8001b3a <HAL_InitTick+0x6a>
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001b36:	d00d      	beq.n	8001b54 <HAL_InitTick+0x84>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;

      default:
        /* Nothing to do */
        break;
 8001b38:	e026      	b.n	8001b88 <HAL_InitTick+0xb8>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8001b3a:	4b21      	ldr	r3, [pc, #132]	@ (8001bc0 <HAL_InitTick+0xf0>)
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	4b1e      	ldr	r3, [pc, #120]	@ (8001bb8 <HAL_InitTick+0xe8>)
 8001b40:	781b      	ldrb	r3, [r3, #0]
 8001b42:	4619      	mov	r1, r3
 8001b44:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8001b48:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b50:	60fb      	str	r3, [r7, #12]
        break;
 8001b52:	e01a      	b.n	8001b8a <HAL_InitTick+0xba>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8001b54:	4b18      	ldr	r3, [pc, #96]	@ (8001bb8 <HAL_InitTick+0xe8>)
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	461a      	mov	r2, r3
 8001b5a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b5e:	fbb3 f3f2 	udiv	r3, r3, r2
 8001b62:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8001b66:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b6a:	60fb      	str	r3, [r7, #12]
        break;
 8001b6c:	e00d      	b.n	8001b8a <HAL_InitTick+0xba>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8001b6e:	4b12      	ldr	r3, [pc, #72]	@ (8001bb8 <HAL_InitTick+0xe8>)
 8001b70:	781b      	ldrb	r3, [r3, #0]
 8001b72:	461a      	mov	r2, r3
 8001b74:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b78:	fbb3 f3f2 	udiv	r3, r3, r2
 8001b7c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001b80:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b84:	60fb      	str	r3, [r7, #12]
        break;
 8001b86:	e000      	b.n	8001b8a <HAL_InitTick+0xba>
        break;
 8001b88:	bf00      	nop
    }
  }

  /* Configure the SysTick */
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8001b8a:	68f8      	ldr	r0, [r7, #12]
 8001b8c:	f001 f8e6 	bl	8002d5c <HAL_SYSTICK_Config>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d001      	beq.n	8001b9a <HAL_InitTick+0xca>
  {
    return HAL_ERROR;
 8001b96:	2301      	movs	r3, #1
 8001b98:	e009      	b.n	8001bae <HAL_InitTick+0xde>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	6879      	ldr	r1, [r7, #4]
 8001b9e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001ba2:	f001 f8a1 	bl	8002ce8 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8001ba6:	4a08      	ldr	r2, [pc, #32]	@ (8001bc8 <HAL_InitTick+0xf8>)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8001bac:	2300      	movs	r3, #0
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	3710      	adds	r7, #16
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	2000002c 	.word	0x2000002c
 8001bbc:	e000e010 	.word	0xe000e010
 8001bc0:	20000024 	.word	0x20000024
 8001bc4:	46020c00 	.word	0x46020c00
 8001bc8:	20000028 	.word	0x20000028

08001bcc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001bd0:	4b06      	ldr	r3, [pc, #24]	@ (8001bec <HAL_IncTick+0x20>)
 8001bd2:	781b      	ldrb	r3, [r3, #0]
 8001bd4:	461a      	mov	r2, r3
 8001bd6:	4b06      	ldr	r3, [pc, #24]	@ (8001bf0 <HAL_IncTick+0x24>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4413      	add	r3, r2
 8001bdc:	4a04      	ldr	r2, [pc, #16]	@ (8001bf0 <HAL_IncTick+0x24>)
 8001bde:	6013      	str	r3, [r2, #0]
}
 8001be0:	bf00      	nop
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr
 8001bea:	bf00      	nop
 8001bec:	2000002c 	.word	0x2000002c
 8001bf0:	2000386c 	.word	0x2000386c

08001bf4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
  return uwTick;
 8001bf8:	4b03      	ldr	r3, [pc, #12]	@ (8001c08 <HAL_GetTick+0x14>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr
 8001c06:	bf00      	nop
 8001c08:	2000386c 	.word	0x2000386c

08001c0c <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b083      	sub	sp, #12
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
 8001c14:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN, PathInternal);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	431a      	orrs	r2, r3
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	601a      	str	r2, [r3, #0]
}
 8001c26:	bf00      	nop
 8001c28:	370c      	adds	r7, #12
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr

08001c32 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_NONE
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001c32:	b480      	push	{r7}
 8001c34:	b083      	sub	sp, #12
 8001c36:	af00      	add	r7, sp, #0
 8001c38:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN));
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	370c      	adds	r7, #12
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr

08001c4e <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_814CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8001c4e:	b480      	push	{r7}
 8001c50:	b085      	sub	sp, #20
 8001c52:	af00      	add	r7, sp, #0
 8001c54:	60f8      	str	r0, [r7, #12]
 8001c56:	60b9      	str	r1, [r7, #8]
 8001c58:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	695a      	ldr	r2, [r3, #20]
 8001c5e:	68bb      	ldr	r3, [r7, #8]
 8001c60:	f003 0304 	and.w	r3, r3, #4
 8001c64:	2107      	movs	r1, #7
 8001c66:	fa01 f303 	lsl.w	r3, r1, r3
 8001c6a:	43db      	mvns	r3, r3
 8001c6c:	401a      	ands	r2, r3
 8001c6e:	68bb      	ldr	r3, [r7, #8]
 8001c70:	f003 0304 	and.w	r3, r3, #4
 8001c74:	6879      	ldr	r1, [r7, #4]
 8001c76:	fa01 f303 	lsl.w	r3, r1, r3
 8001c7a:	431a      	orrs	r2, r3
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8001c80:	bf00      	nop
 8001c82:	3714      	adds	r7, #20
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr

08001c8c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b083      	sub	sp, #12
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	68db      	ldr	r3, [r3, #12]
 8001c98:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d101      	bne.n	8001ca4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	e000      	b.n	8001ca6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001ca4:	2300      	movs	r3, #0
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	370c      	adds	r7, #12
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr

08001cb2 <LL_ADC_REG_SetSequencerRanks>:
  *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR
  *         @arg @ref LL_ADC_CHANNEL_VCORE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001cb2:	b480      	push	{r7}
 8001cb4:	b085      	sub	sp, #20
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	60f8      	str	r0, [r7, #12]
 8001cba:	60b9      	str	r1, [r7, #8]
 8001cbc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001cc2:	68bb      	ldr	r3, [r7, #8]
 8001cc4:	f003 031f 	and.w	r3, r3, #31
 8001cc8:	210f      	movs	r1, #15
 8001cca:	fa01 f303 	lsl.w	r3, r1, r3
 8001cce:	43db      	mvns	r3, r3
 8001cd0:	401a      	ands	r2, r3
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	0e9b      	lsrs	r3, r3, #26
 8001cd6:	f003 010f 	and.w	r1, r3, #15
 8001cda:	68bb      	ldr	r3, [r7, #8]
 8001cdc:	f003 031f 	and.w	r3, r3, #31
 8001ce0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ce4:	431a      	orrs	r2, r3
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001cea:	bf00      	nop
 8001cec:	3714      	adds	r7, #20
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr

08001cf6 <LL_ADC_REG_SetSequencerChAdd>:
  *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR
  *         @arg @ref LL_ADC_CHANNEL_VCORE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001cf6:	b480      	push	{r7}
 8001cf8:	b083      	sub	sp, #12
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	6078      	str	r0, [r7, #4]
 8001cfe:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8001d0a:	431a      	orrs	r2, r3
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001d10:	bf00      	nop
 8001d12:	370c      	adds	r7, #12
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr

08001d1c <LL_ADC_REG_SetSequencerChRem>:
  *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR
  *         @arg @ref LL_ADC_CHANNEL_VCORE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b083      	sub	sp, #12
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
 8001d24:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8001d30:	43db      	mvns	r3, r3
 8001d32:	401a      	ands	r2, r3
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001d38:	bf00      	nop
 8001d3a:	370c      	adds	r7, #12
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr

08001d44 <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(const ADC_TypeDef *ADCx)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b083      	sub	sp, #12
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	f003 0303 	and.w	r3, r3, #3
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	370c      	adds	r7, #12
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5e:	4770      	bx	lr

08001d60 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b085      	sub	sp, #20
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	60f8      	str	r0, [r7, #12]
 8001d68:	60b9      	str	r1, [r7, #8]
 8001d6a:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	695a      	ldr	r2, [r3, #20]
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	021b      	lsls	r3, r3, #8
 8001d74:	43db      	mvns	r3, r3
 8001d76:	401a      	ands	r2, r3
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	0219      	lsls	r1, r3, #8
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	400b      	ands	r3, r1
 8001d80:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 8001d84:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001d88:	431a      	orrs	r2, r3
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8001d8e:	bf00      	nop
 8001d90:	3714      	adds	r7, #20
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr

08001d9a <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001d9a:	b480      	push	{r7}
 8001d9c:	b083      	sub	sp, #12
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	689b      	ldr	r3, [r3, #8]
 8001da6:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001daa:	f023 0317 	bic.w	r3, r3, #23
 8001dae:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001db6:	bf00      	nop
 8001db8:	370c      	adds	r7, #12
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr

08001dc2 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001dc2:	b480      	push	{r7}
 8001dc4:	b083      	sub	sp, #12
 8001dc6:	af00      	add	r7, sp, #0
 8001dc8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	689b      	ldr	r3, [r3, #8]
 8001dce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dd2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001dd6:	d101      	bne.n	8001ddc <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001dd8:	2301      	movs	r3, #1
 8001dda:	e000      	b.n	8001dde <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001ddc:	2300      	movs	r3, #0
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	370c      	adds	r7, #12
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr

08001dea <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001dea:	b480      	push	{r7}
 8001dec:	b083      	sub	sp, #12
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001dfa:	f023 0317 	bic.w	r3, r3, #23
 8001dfe:	f043 0201 	orr.w	r2, r3, #1
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001e06:	bf00      	nop
 8001e08:	370c      	adds	r7, #12
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr

08001e12 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001e12:	b480      	push	{r7}
 8001e14:	b083      	sub	sp, #12
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001e22:	f023 0317 	bic.w	r3, r3, #23
 8001e26:	f043 0202 	orr.w	r2, r3, #2
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001e2e:	bf00      	nop
 8001e30:	370c      	adds	r7, #12
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr

08001e3a <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001e3a:	b480      	push	{r7}
 8001e3c:	b083      	sub	sp, #12
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	689b      	ldr	r3, [r3, #8]
 8001e46:	f003 0301 	and.w	r3, r3, #1
 8001e4a:	2b01      	cmp	r3, #1
 8001e4c:	d101      	bne.n	8001e52 <LL_ADC_IsEnabled+0x18>
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e000      	b.n	8001e54 <LL_ADC_IsEnabled+0x1a>
 8001e52:	2300      	movs	r3, #0
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	370c      	adds	r7, #12
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5e:	4770      	bx	lr

08001e60 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b083      	sub	sp, #12
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	689b      	ldr	r3, [r3, #8]
 8001e6c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001e70:	f023 0317 	bic.w	r3, r3, #23
 8001e74:	f043 0204 	orr.w	r2, r3, #4
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001e7c:	bf00      	nop
 8001e7e:	370c      	adds	r7, #12
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr

08001e88 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b083      	sub	sp, #12
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	f003 0304 	and.w	r3, r3, #4
 8001e98:	2b04      	cmp	r3, #4
 8001e9a:	d101      	bne.n	8001ea0 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	e000      	b.n	8001ea2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001ea0:	2300      	movs	r3, #0
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	370c      	adds	r7, #12
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr

08001eae <LL_ADC_IsActiveFlag_LDORDY>:
  * @rmtoll ISR      LDORDY          LL_ADC_IsActiveFlag_LDORDY
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_LDORDY(const ADC_TypeDef *ADCx)
{
 8001eae:	b480      	push	{r7}
 8001eb0:	b083      	sub	sp, #12
 8001eb2:	af00      	add	r7, sp, #0
 8001eb4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_LDORDY) == (LL_ADC_FLAG_LDORDY)) ? 1UL : 0UL);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001ebe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001ec2:	d101      	bne.n	8001ec8 <LL_ADC_IsActiveFlag_LDORDY+0x1a>
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	e000      	b.n	8001eca <LL_ADC_IsActiveFlag_LDORDY+0x1c>
 8001ec8:	2300      	movs	r3, #0
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	370c      	adds	r7, #12
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr

08001ed6 <LL_ADC_ClearFlag_LDORDY>:
  * @rmtoll ISR      LDORDY         LL_ADC_ClearFlag_LDORDY
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE void LL_ADC_ClearFlag_LDORDY(ADC_TypeDef *ADCx)
{
 8001ed6:	b480      	push	{r7}
 8001ed8:	b083      	sub	sp, #12
 8001eda:	af00      	add	r7, sp, #0
 8001edc:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_LDORDY);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001ee4:	601a      	str	r2, [r3, #0]
}
 8001ee6:	bf00      	nop
 8001ee8:	370c      	adds	r7, #12
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr
	...

08001ef4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b088      	sub	sp, #32
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001efc:	2300      	movs	r3, #0
 8001efe:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr1 = 0UL;
 8001f00:	2300      	movs	r3, #0
 8001f02:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 8001f04:	2300      	movs	r3, #0
 8001f06:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  uint32_t tickstart;

  /* Check ADC handle */
  if (hadc == NULL)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d101      	bne.n	8001f12 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e190      	b.n	8002234 <HAL_ADC_Init+0x340>
    assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
    assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
  }
  assert_param(IS_ADC_TRIGGER_FREQ(hadc->Init.TriggerFrequencyMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	691b      	ldr	r3, [r3, #16]
 8001f16:	2b00      	cmp	r3, #0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d109      	bne.n	8001f34 <HAL_ADC_Init+0x40>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f20:	6878      	ldr	r0, [r7, #4]
 8001f22:	f7ff f8fb 	bl	800111c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f7ff ff42 	bl	8001dc2 <LL_ADC_IsInternalRegulatorEnabled>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d132      	bne.n	8001faa <HAL_ADC_Init+0xb6>
  {
    /* Clear flag ADC internal voltage regulator ready */
    LL_ADC_ClearFlag_LDORDY(hadc->Instance);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f7ff ffc4 	bl	8001ed6 <LL_ADC_ClearFlag_LDORDY>

    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4618      	mov	r0, r3
 8001f54:	f7ff ff21 	bl	8001d9a <LL_ADC_EnableInternalRegulator>

    /* Get tick count */
    tickstart = HAL_GetTick();
 8001f58:	f7ff fe4c 	bl	8001bf4 <HAL_GetTick>
 8001f5c:	6138      	str	r0, [r7, #16]

    /* Delay for ADC stabilization time */
    while (LL_ADC_IsActiveFlag_LDORDY(hadc->Instance) == 0UL)
 8001f5e:	e01c      	b.n	8001f9a <HAL_ADC_Init+0xa6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_LDO_RDY_TIMEOUT)
 8001f60:	f7ff fe48 	bl	8001bf4 <HAL_GetTick>
 8001f64:	4602      	mov	r2, r0
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	1ad3      	subs	r3, r2, r3
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	d915      	bls.n	8001f9a <HAL_ADC_Init+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsActiveFlag_LDORDY(hadc->Instance) == 0UL)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4618      	mov	r0, r3
 8001f74:	f7ff ff9b 	bl	8001eae <LL_ADC_IsActiveFlag_LDORDY>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d10d      	bne.n	8001f9a <HAL_ADC_Init+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f82:	f043 0210 	orr.w	r2, r3, #16
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001f8e:	f043 0201 	orr.w	r2, r3, #1
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	665a      	str	r2, [r3, #100]	@ 0x64

          return HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	e14c      	b.n	8002234 <HAL_ADC_Init+0x340>
    while (LL_ADC_IsActiveFlag_LDORDY(hadc->Instance) == 0UL)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f7ff ff85 	bl	8001eae <LL_ADC_IsActiveFlag_LDORDY>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d0da      	beq.n	8001f60 <HAL_ADC_Init+0x6c>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f7ff ff07 	bl	8001dc2 <LL_ADC_IsInternalRegulatorEnabled>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d10d      	bne.n	8001fd6 <HAL_ADC_Init+0xe2>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001fbe:	f043 0210 	orr.w	r2, r3, #16
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001fca:	f043 0201 	orr.w	r2, r3, #1
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	665a      	str	r2, [r3, #100]	@ 0x64

    tmp_hal_status = HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f7ff ff54 	bl	8001e88 <LL_ADC_REG_IsConversionOngoing>
 8001fe0:	60f8      	str	r0, [r7, #12]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001fe6:	f003 0310 	and.w	r3, r3, #16
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	f040 8119 	bne.w	8002222 <HAL_ADC_Init+0x32e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	f040 8115 	bne.w	8002222 <HAL_ADC_Init+0x32e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ffc:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002000:	f043 0202 	orr.w	r2, r3, #2
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	661a      	str	r2, [r3, #96]	@ 0x60
    /*  - Oversampling                                                        */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4618      	mov	r0, r3
 800200e:	f7ff ff14 	bl	8001e3a <LL_ADC_IsEnabled>
 8002012:	4603      	mov	r3, r0
 8002014:	2b00      	cmp	r3, #0
 8002016:	d136      	bne.n	8002086 <HAL_ADC_Init+0x192>
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	68db      	ldr	r3, [r3, #12]
 800201e:	f023 010c 	bic.w	r1, r3, #12
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	689a      	ldr	r2, [r3, #8]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	430a      	orrs	r2, r1
 800202c:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES,
                 hadc->Init.Resolution);

      tmp_cfgr2 |= (hadc->Init.TriggerFrequencyMode);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002032:	697a      	ldr	r2, [r7, #20]
 8002034:	4313      	orrs	r3, r2
 8002036:	617b      	str	r3, [r7, #20]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800203e:	2b01      	cmp	r3, #1
 8002040:	d10c      	bne.n	800205c <HAL_ADC_Init+0x168>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      hadc->Init.Oversampling.Ratio         |
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                      hadc->Init.Oversampling.Ratio         |
 800204a:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                      hadc->Init.Oversampling.RightBitShift |
 8002050:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	4313      	orrs	r3, r2
 8002056:	f043 0301 	orr.w	r3, r3, #1
 800205a:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	691a      	ldr	r2, [r3, #16]
 8002062:	4b76      	ldr	r3, [pc, #472]	@ (800223c <HAL_ADC_Init+0x348>)
 8002064:	4013      	ands	r3, r2
 8002066:	687a      	ldr	r2, [r7, #4]
 8002068:	6812      	ldr	r2, [r2, #0]
 800206a:	6979      	ldr	r1, [r7, #20]
 800206c:	430b      	orrs	r3, r1
 800206e:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_OVSR   |
                 ADC_CFGR2_OVSS   |
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      MODIFY_REG(ADC4_COMMON->CCR,
 8002070:	4b73      	ldr	r3, [pc, #460]	@ (8002240 <HAL_ADC_Init+0x34c>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8002080:	496f      	ldr	r1, [pc, #444]	@ (8002240 <HAL_ADC_Init+0x34c>)
 8002082:	4313      	orrs	r3, r2
 8002084:	600b      	str	r3, [r1, #0]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    tmp_cfgr1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	7e1b      	ldrb	r3, [r3, #24]
 800208a:	039a      	lsls	r2, r3, #14
                  ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002092:	035b      	lsls	r3, r3, #13
    tmp_cfgr1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002094:	4313      	orrs	r3, r2
                  ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002096:	687a      	ldr	r2, [r7, #4]
 8002098:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800209a:	2a00      	cmp	r2, #0
 800209c:	d002      	beq.n	80020a4 <HAL_ADC_Init+0x1b0>
 800209e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80020a2:	e000      	b.n	80020a6 <HAL_ADC_Init+0x1b2>
 80020a4:	2200      	movs	r2, #0
                  ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80020a6:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                           |
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	68db      	ldr	r3, [r3, #12]
                  ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80020ac:	431a      	orrs	r2, r3
                  ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	691b      	ldr	r3, [r3, #16]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	da04      	bge.n	80020c0 <HAL_ADC_Init+0x1cc>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	691b      	ldr	r3, [r3, #16]
 80020ba:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80020be:	e001      	b.n	80020c4 <HAL_ADC_Init+0x1d0>
 80020c0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
                  hadc->Init.DataAlign                                           |
 80020c4:	431a      	orrs	r2, r3
                  ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80020cc:	005b      	lsls	r3, r3, #1
                  ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80020ce:	4313      	orrs	r3, r2
    tmp_cfgr1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80020d0:	69ba      	ldr	r2, [r7, #24]
 80020d2:	4313      	orrs	r3, r2
 80020d4:	61bb      	str	r3, [r7, #24]

    /* Update setting of discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80020dc:	2b01      	cmp	r3, #1
 80020de:	d115      	bne.n	800210c <HAL_ADC_Init+0x218>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d104      	bne.n	80020f4 <HAL_ADC_Init+0x200>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 80020ea:	69bb      	ldr	r3, [r7, #24]
 80020ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020f0:	61bb      	str	r3, [r7, #24]
 80020f2:	e00b      	b.n	800210c <HAL_ADC_Init+0x218>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */

        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020f8:	f043 0220 	orr.w	r2, r3, #32
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002104:	f043 0201 	orr.w	r2, r3, #1
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	665a      	str	r2, [r3, #100]	@ 0x64
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002110:	2b00      	cmp	r3, #0
 8002112:	d009      	beq.n	8002128 <HAL_ADC_Init+0x234>
    {
      tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002118:	f403 72e0 	and.w	r2, r3, #448	@ 0x1c0
                    hadc->Init.ExternalTrigConvEdge);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002120:	4313      	orrs	r3, r2
 8002122:	69ba      	ldr	r2, [r7, #24]
 8002124:	4313      	orrs	r3, r2
 8002126:	61bb      	str	r3, [r7, #24]
    }

    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR1,
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	68da      	ldr	r2, [r3, #12]
 800212e:	4b45      	ldr	r3, [pc, #276]	@ (8002244 <HAL_ADC_Init+0x350>)
 8002130:	4013      	ands	r3, r2
 8002132:	687a      	ldr	r2, [r7, #4]
 8002134:	6812      	ldr	r2, [r2, #0]
 8002136:	69b9      	ldr	r1, [r7, #24]
 8002138:	430b      	orrs	r3, r1
 800213a:	60d3      	str	r3, [r2, #12]
               ADC_CFGR1_ALIGN   |
               ADC_CFGR1_SCANDIR |
               ADC_CFGR1_DMACFG,
               tmp_cfgr1);

    MODIFY_REG(hadc->Instance->CFGR2,
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	691a      	ldr	r2, [r3, #16]
 8002142:	4b3e      	ldr	r3, [pc, #248]	@ (800223c <HAL_ADC_Init+0x348>)
 8002144:	4013      	ands	r3, r2
 8002146:	687a      	ldr	r2, [r7, #4]
 8002148:	6812      	ldr	r2, [r2, #0]
 800214a:	6979      	ldr	r1, [r7, #20]
 800214c:	430b      	orrs	r3, r1
 800214e:	6113      	str	r3, [r2, #16]
               ADC_CFGR2_OVSS   |
               ADC_CFGR2_TOVS,
               tmp_cfgr2);

    /* Low power mode configuration */
    MODIFY_REG(hadc->Instance->PWRR,
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002156:	f023 0103 	bic.w	r1, r3, #3
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	7e5b      	ldrb	r3, [r3, #25]
 800215e:	461a      	mov	r2, r3
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	69db      	ldr	r3, [r3, #28]
 8002164:	431a      	orrs	r2, r3
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	430a      	orrs	r2, r1
 800216c:	645a      	str	r2, [r3, #68]	@ 0x44
               ADC_PWRR_DPD,
               ((uint32_t) hadc->Init.LowPowerAutoPowerOff) |
               hadc->Init.LowPowerAutonomousDPD);

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6818      	ldr	r0, [r3, #0]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002176:	461a      	mov	r2, r3
 8002178:	2100      	movs	r1, #0
 800217a:	f7ff fd68 	bl	8001c4e <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6818      	ldr	r0, [r3, #0]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002186:	461a      	mov	r2, r3
 8002188:	492f      	ldr	r1, [pc, #188]	@ (8002248 <HAL_ADC_Init+0x354>)
 800218a:	f7ff fd60 	bl	8001c4e <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	691b      	ldr	r3, [r3, #16]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d108      	bne.n	80021a8 <HAL_ADC_Init+0x2b4>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f062 020f 	orn	r2, r2, #15
 80021a4:	629a      	str	r2, [r3, #40]	@ 0x28
 80021a6:	e017      	b.n	80021d8 <HAL_ADC_Init+0x2e4>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	691b      	ldr	r3, [r3, #16]
 80021ac:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80021b0:	d112      	bne.n	80021d8 <HAL_ADC_Init+0x2e4>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021bc:	3b01      	subs	r3, #1
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	f003 031c 	and.w	r3, r3, #28
 80021c4:	f06f 020f 	mvn.w	r2, #15
 80021c8:	fa02 f103 	lsl.w	r1, r2, r3
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	430a      	orrs	r2, r1
 80021d6:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmp_cfgr1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	68da      	ldr	r2, [r3, #12]
 80021de:	4b1b      	ldr	r3, [pc, #108]	@ (800224c <HAL_ADC_Init+0x358>)
 80021e0:	4013      	ands	r3, r2
 80021e2:	69ba      	ldr	r2, [r7, #24]
 80021e4:	429a      	cmp	r2, r3
 80021e6:	d10b      	bne.n	8002200 <HAL_ADC_Init+0x30c>
        == tmp_cfgr1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2200      	movs	r2, #0
 80021ec:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021f2:	f023 0303 	bic.w	r3, r3, #3
 80021f6:	f043 0201 	orr.w	r2, r3, #1
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	661a      	str	r2, [r3, #96]	@ 0x60
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 80021fe:	e018      	b.n	8002232 <HAL_ADC_Init+0x33e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002204:	f023 0312 	bic.w	r3, r3, #18
 8002208:	f043 0210 	orr.w	r2, r3, #16
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	661a      	str	r2, [r3, #96]	@ 0x60
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002214:	f043 0201 	orr.w	r2, r3, #1
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	665a      	str	r2, [r3, #100]	@ 0x64

      tmp_hal_status = HAL_ERROR;
 800221c:	2301      	movs	r3, #1
 800221e:	77fb      	strb	r3, [r7, #31]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8002220:	e007      	b.n	8002232 <HAL_ADC_Init+0x33e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002226:	f043 0210 	orr.w	r2, r3, #16
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	77fb      	strb	r3, [r7, #31]
  }

  return tmp_hal_status;
 8002232:	7ffb      	ldrb	r3, [r7, #31]
}
 8002234:	4618      	mov	r0, r3
 8002236:	3720      	adds	r7, #32
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}
 800223c:	dffffc02 	.word	0xdffffc02
 8002240:	46021308 	.word	0x46021308
 8002244:	ffde820d 	.word	0xffde820d
 8002248:	03ffff04 	.word	0x03ffff04
 800224c:	833ffff3 	.word	0x833ffff3

08002250 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b086      	sub	sp, #24
 8002254:	af00      	add	r7, sp, #0
 8002256:	60f8      	str	r0, [r7, #12]
 8002258:	60b9      	str	r1, [r7, #8]
 800225a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4618      	mov	r0, r3
 8002262:	f7ff fe11 	bl	8001e88 <LL_ADC_REG_IsConversionOngoing>
 8002266:	4603      	mov	r3, r0
 8002268:	2b00      	cmp	r3, #0
 800226a:	f040 809f 	bne.w	80023ac <HAL_ADC_Start_DMA+0x15c>
  {
    __HAL_LOCK(hadc);
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002274:	2b01      	cmp	r3, #1
 8002276:	d101      	bne.n	800227c <HAL_ADC_Start_DMA+0x2c>
 8002278:	2302      	movs	r3, #2
 800227a:	e09a      	b.n	80023b2 <HAL_ADC_Start_DMA+0x162>
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	2201      	movs	r2, #1
 8002280:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Specific case for first call occurrence of this function (DMA transfer */
    /* not activated and ADC disabled), DMA transfer must be activated        */
    /* with ADC disabled.                                                     */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	68db      	ldr	r3, [r3, #12]
 800228a:	f003 0301 	and.w	r3, r3, #1
 800228e:	2b00      	cmp	r3, #0
 8002290:	d114      	bne.n	80022bc <HAL_ADC_Start_DMA+0x6c>
    {
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4618      	mov	r0, r3
 8002298:	f7ff fdcf 	bl	8001e3a <LL_ADC_IsEnabled>
 800229c:	4603      	mov	r3, r0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d004      	beq.n	80022ac <HAL_ADC_Start_DMA+0x5c>
      {
        /* Disable ADC */
        LL_ADC_Disable(hadc->Instance);
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4618      	mov	r0, r3
 80022a8:	f7ff fdb3 	bl	8001e12 <LL_ADC_Disable>
      }

      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	68da      	ldr	r2, [r3, #12]
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f042 0201 	orr.w	r2, r2, #1
 80022ba:	60da      	str	r2, [r3, #12]
    }

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80022bc:	68f8      	ldr	r0, [r7, #12]
 80022be:	f000 fadd 	bl	800287c <ADC_Enable>
 80022c2:	4603      	mov	r3, r0
 80022c4:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80022c6:	7dfb      	ldrb	r3, [r7, #23]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d171      	bne.n	80023b0 <HAL_ADC_Start_DMA+0x160>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022d0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80022d4:	f023 0301 	bic.w	r3, r3, #1
 80022d8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	661a      	str	r2, [r3, #96]	@ 0x60
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	2200      	movs	r2, #0
 80022e4:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022ea:	4a34      	ldr	r2, [pc, #208]	@ (80023bc <HAL_ADC_Start_DMA+0x16c>)
 80022ec:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022f2:	4a33      	ldr	r2, [pc, #204]	@ (80023c0 <HAL_ADC_Start_DMA+0x170>)
 80022f4:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022fa:	4a32      	ldr	r2, [pc, #200]	@ (80023c4 <HAL_ADC_Start_DMA+0x174>)
 80022fc:	669a      	str	r2, [r3, #104]	@ 0x68
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	221c      	movs	r2, #28
 8002304:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	2200      	movs	r2, #0
 800230a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	685a      	ldr	r2, [r3, #4]
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f042 0210 	orr.w	r2, r2, #16
 800231c:	605a      	str	r2, [r3, #4]

      /* Length should be converted to number of bytes */
      LengthInBytes = Length * 4U;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	009b      	lsls	r3, r3, #2
 8002322:	613b      	str	r3, [r7, #16]

      /* Start the DMA channel */
      if ((hadc->DMA_Handle->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002328:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800232a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800232e:	2b00      	cmp	r3, #0
 8002330:	d02a      	beq.n	8002388 <HAL_ADC_Start_DMA+0x138>
      {
        if ((hadc->DMA_Handle->LinkedListQueue != NULL) && (hadc->DMA_Handle->LinkedListQueue->Head != NULL))
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002336:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002338:	2b00      	cmp	r3, #0
 800233a:	d022      	beq.n	8002382 <HAL_ADC_Start_DMA+0x132>
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002340:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d01c      	beq.n	8002382 <HAL_ADC_Start_DMA+0x132>
        {
          hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = (uint32_t)LengthInBytes;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800234c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	693a      	ldr	r2, [r7, #16]
 8002352:	609a      	str	r2, [r3, #8]
          hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = \
              (uint32_t)&hadc->Instance->DR;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f103 0240 	add.w	r2, r3, #64	@ 0x40
          hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = \
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002360:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	60da      	str	r2, [r3, #12]
          hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)pData;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800236a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	68ba      	ldr	r2, [r7, #8]
 8002370:	611a      	str	r2, [r3, #16]
          tmp_hal_status = HAL_DMAEx_List_Start_IT(hadc->DMA_Handle);
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002376:	4618      	mov	r0, r3
 8002378:	f001 fb6e 	bl	8003a58 <HAL_DMAEx_List_Start_IT>
 800237c:	4603      	mov	r3, r0
 800237e:	75fb      	strb	r3, [r7, #23]
 8002380:	e00e      	b.n	80023a0 <HAL_ADC_Start_DMA+0x150>
        }
        else
        {
          tmp_hal_status = HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	75fb      	strb	r3, [r7, #23]
 8002386:	e00b      	b.n	80023a0 <HAL_ADC_Start_DMA+0x150>
        }
      }
      else
      {
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, \
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	3340      	adds	r3, #64	@ 0x40
 8002392:	4619      	mov	r1, r3
 8002394:	68ba      	ldr	r2, [r7, #8]
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	f001 f860 	bl	800345c <HAL_DMA_Start_IT>
 800239c:	4603      	mov	r3, r0
 800239e:	75fb      	strb	r3, [r7, #23]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4618      	mov	r0, r3
 80023a6:	f7ff fd5b 	bl	8001e60 <LL_ADC_REG_StartConversion>
 80023aa:	e001      	b.n	80023b0 <HAL_ADC_Start_DMA+0x160>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80023ac:	2302      	movs	r3, #2
 80023ae:	75fb      	strb	r3, [r7, #23]
  }

  return tmp_hal_status;
 80023b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	3718      	adds	r7, #24
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	08002989 	.word	0x08002989
 80023c0:	08002a53 	.word	0x08002a53
 80023c4:	08002a6f 	.word	0x08002a6f

080023c8 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b086      	sub	sp, #24
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80023d0:	2300      	movs	r3, #0
 80023d2:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	f003 0302 	and.w	r3, r3, #2
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d017      	beq.n	800241e <HAL_ADC_IRQHandler+0x56>
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	f003 0302 	and.w	r3, r3, #2
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d012      	beq.n	800241e <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023fc:	f003 0310 	and.w	r3, r3, #16
 8002400:	2b00      	cmp	r3, #0
 8002402:	d105      	bne.n	8002410 <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002408:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002410:	6878      	ldr	r0, [r7, #4]
 8002412:	f000 fb5a 	bl	8002aca <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	2202      	movs	r2, #2
 800241c:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	f003 0304 	and.w	r3, r3, #4
 8002424:	2b00      	cmp	r3, #0
 8002426:	d004      	beq.n	8002432 <HAL_ADC_IRQHandler+0x6a>
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	f003 0304 	and.w	r3, r3, #4
 800242e:	2b00      	cmp	r3, #0
 8002430:	d109      	bne.n	8002446 <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002438:	2b00      	cmp	r3, #0
 800243a:	d052      	beq.n	80024e2 <HAL_ADC_IRQHandler+0x11a>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	f003 0308 	and.w	r3, r3, #8
 8002442:	2b00      	cmp	r3, #0
 8002444:	d04d      	beq.n	80024e2 <HAL_ADC_IRQHandler+0x11a>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800244a:	f003 0310 	and.w	r3, r3, #16
 800244e:	2b00      	cmp	r3, #0
 8002450:	d105      	bne.n	800245e <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002456:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4618      	mov	r0, r3
 8002464:	f7ff fc12 	bl	8001c8c <LL_ADC_REG_IsTriggerSourceSWStart>
 8002468:	4603      	mov	r3, r0
 800246a:	2b00      	cmp	r3, #0
 800246c:	d032      	beq.n	80024d4 <HAL_ADC_IRQHandler+0x10c>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d12d      	bne.n	80024d4 <HAL_ADC_IRQHandler+0x10c>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 0308 	and.w	r3, r3, #8
 8002482:	2b08      	cmp	r3, #8
 8002484:	d126      	bne.n	80024d4 <HAL_ADC_IRQHandler+0x10c>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4618      	mov	r0, r3
 800248c:	f7ff fcfc 	bl	8001e88 <LL_ADC_REG_IsConversionOngoing>
 8002490:	4603      	mov	r3, r0
 8002492:	2b00      	cmp	r3, #0
 8002494:	d112      	bne.n	80024bc <HAL_ADC_IRQHandler+0xf4>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	685a      	ldr	r2, [r3, #4]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f022 020c 	bic.w	r2, r2, #12
 80024a4:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024aa:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80024ae:	f023 0301 	bic.w	r3, r3, #1
 80024b2:	f043 0201 	orr.w	r2, r3, #1
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	661a      	str	r2, [r3, #96]	@ 0x60
 80024ba:	e00b      	b.n	80024d4 <HAL_ADC_IRQHandler+0x10c>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024c0:	f043 0220 	orr.w	r2, r3, #32
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80024cc:	f043 0201 	orr.w	r2, r3, #1
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	665a      	str	r2, [r3, #100]	@ 0x64
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80024d4:	6878      	ldr	r0, [r7, #4]
 80024d6:	f000 f892 	bl	80025fe <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	220c      	movs	r2, #12
 80024e0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d011      	beq.n	8002510 <HAL_ADC_IRQHandler+0x148>
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d00c      	beq.n	8002510 <HAL_ADC_IRQHandler+0x148>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024fa:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002502:	6878      	ldr	r0, [r7, #4]
 8002504:	f000 f88f 	bl	8002626 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	2280      	movs	r2, #128	@ 0x80
 800250e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002516:	2b00      	cmp	r3, #0
 8002518:	d012      	beq.n	8002540 <HAL_ADC_IRQHandler+0x178>
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002520:	2b00      	cmp	r3, #0
 8002522:	d00d      	beq.n	8002540 <HAL_ADC_IRQHandler+0x178>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002528:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002530:	6878      	ldr	r0, [r7, #4]
 8002532:	f000 fab6 	bl	8002aa2 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800253e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002546:	2b00      	cmp	r3, #0
 8002548:	d012      	beq.n	8002570 <HAL_ADC_IRQHandler+0x1a8>
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002550:	2b00      	cmp	r3, #0
 8002552:	d00d      	beq.n	8002570 <HAL_ADC_IRQHandler+0x1a8>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002558:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002560:	6878      	ldr	r0, [r7, #4]
 8002562:	f000 faa8 	bl	8002ab6 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800256e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	f003 0310 	and.w	r3, r3, #16
 8002576:	2b00      	cmp	r3, #0
 8002578:	d02b      	beq.n	80025d2 <HAL_ADC_IRQHandler+0x20a>
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	f003 0310 	and.w	r3, r3, #16
 8002580:	2b00      	cmp	r3, #0
 8002582:	d026      	beq.n	80025d2 <HAL_ADC_IRQHandler+0x20a>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002588:	2b00      	cmp	r3, #0
 800258a:	d102      	bne.n	8002592 <HAL_ADC_IRQHandler+0x1ca>
    {
      overrun_error = 1UL;
 800258c:	2301      	movs	r3, #1
 800258e:	617b      	str	r3, [r7, #20]
 8002590:	e009      	b.n	80025a6 <HAL_ADC_IRQHandler+0x1de>
    }
    else
    {
      /* Check DMA configuration */
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4618      	mov	r0, r3
 8002598:	f7ff fbd4 	bl	8001d44 <LL_ADC_REG_GetDMATransfer>
 800259c:	4603      	mov	r3, r0
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d001      	beq.n	80025a6 <HAL_ADC_IRQHandler+0x1de>
      {
        overrun_error = 1UL;
 80025a2:	2301      	movs	r3, #1
 80025a4:	617b      	str	r3, [r7, #20]
      }
    }

    if (overrun_error == 1UL)
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	2b01      	cmp	r3, #1
 80025aa:	d10e      	bne.n	80025ca <HAL_ADC_IRQHandler+0x202>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025b0:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80025bc:	f043 0202 	orr.w	r2, r3, #2
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	665a      	str	r2, [r3, #100]	@ 0x64
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80025c4:	6878      	ldr	r0, [r7, #4]
 80025c6:	f000 f838 	bl	800263a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	2210      	movs	r2, #16
 80025d0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check channel configuration ready flag ========== */
  if (((tmp_isr & ADC_FLAG_LDORDY) == ADC_FLAG_LDORDY) && ((tmp_ier & ADC_IT_LDORDY) == ADC_IT_LDORDY))
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d00c      	beq.n	80025f6 <HAL_ADC_IRQHandler+0x22e>
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d007      	beq.n	80025f6 <HAL_ADC_IRQHandler+0x22e>
  {
    /* Internal voltage regulator callback */
    HAL_ADCEx_LDOReadyCallback(hadc);
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	f000 fa79 	bl	8002ade <HAL_ADCEx_LDOReadyCallback>

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_LDORDY);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80025f4:	601a      	str	r2, [r3, #0]
  }
}
 80025f6:	bf00      	nop
 80025f8:	3718      	adds	r7, #24
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}

080025fe <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80025fe:	b480      	push	{r7}
 8002600:	b083      	sub	sp, #12
 8002602:	af00      	add	r7, sp, #0
 8002604:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002606:	bf00      	nop
 8002608:	370c      	adds	r7, #12
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr

08002612 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002612:	b480      	push	{r7}
 8002614:	b083      	sub	sp, #12
 8002616:	af00      	add	r7, sp, #0
 8002618:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800261a:	bf00      	nop
 800261c:	370c      	adds	r7, #12
 800261e:	46bd      	mov	sp, r7
 8002620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002624:	4770      	bx	lr

08002626 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002626:	b480      	push	{r7}
 8002628:	b083      	sub	sp, #12
 800262a:	af00      	add	r7, sp, #0
 800262c:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800262e:	bf00      	nop
 8002630:	370c      	adds	r7, #12
 8002632:	46bd      	mov	sp, r7
 8002634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002638:	4770      	bx	lr

0800263a <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800263a:	b480      	push	{r7}
 800263c:	b083      	sub	sp, #12
 800263e:	af00      	add	r7, sp, #0
 8002640:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002642:	bf00      	nop
 8002644:	370c      	adds	r7, #12
 8002646:	46bd      	mov	sp, r7
 8002648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264c:	4770      	bx	lr
	...

08002650 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b088      	sub	sp, #32
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
 8002658:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800265a:	2300      	movs	r3, #0
 800265c:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800265e:	2300      	movs	r3, #0
 8002660:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(pConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(pConfig->SamplingTime));

  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	691b      	ldr	r3, [r3, #16]
 8002666:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002670:	2b01      	cmp	r3, #1
 8002672:	d101      	bne.n	8002678 <HAL_ADC_ConfigChannel+0x28>
 8002674:	2302      	movs	r3, #2
 8002676:	e0f0      	b.n	800285a <HAL_ADC_ConfigChannel+0x20a>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2201      	movs	r2, #1
 800267c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4618      	mov	r0, r3
 8002686:	f7ff fbff 	bl	8001e88 <LL_ADC_REG_IsConversionOngoing>
 800268a:	4603      	mov	r3, r0
 800268c:	2b00      	cmp	r3, #0
 800268e:	f040 80d7 	bne.w	8002840 <HAL_ADC_ConfigChannel+0x1f0>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	2b02      	cmp	r3, #2
 8002698:	f000 809e 	beq.w	80027d8 <HAL_ADC_ConfigChannel+0x188>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	691b      	ldr	r3, [r3, #16]
 80026a0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80026a4:	d004      	beq.n	80026b0 <HAL_ADC_ConfigChannel+0x60>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80026aa:	4a6e      	ldr	r2, [pc, #440]	@ (8002864 <HAL_ADC_ConfigChannel+0x214>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d108      	bne.n	80026c2 <HAL_ADC_ConfigChannel+0x72>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4619      	mov	r1, r3
 80026ba:	4610      	mov	r0, r2
 80026bc:	f7ff fb1b 	bl	8001cf6 <LL_ADC_REG_SetSequencerChAdd>
 80026c0:	e041      	b.n	8002746 <HAL_ADC_ConfigChannel+0xf6>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	f003 031f 	and.w	r3, r3, #31
 80026ce:	210f      	movs	r1, #15
 80026d0:	fa01 f303 	lsl.w	r3, r1, r3
 80026d4:	43db      	mvns	r3, r3
 80026d6:	401a      	ands	r2, r3
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f3c3 0311 	ubfx	r3, r3, #0, #18
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d105      	bne.n	80026f0 <HAL_ADC_ConfigChannel+0xa0>
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	0e9b      	lsrs	r3, r3, #26
 80026ea:	f003 031f 	and.w	r3, r3, #31
 80026ee:	e011      	b.n	8002714 <HAL_ADC_ConfigChannel+0xc4>
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	613b      	str	r3, [r7, #16]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	fa93 f3a3 	rbit	r3, r3
 80026fc:	60fb      	str	r3, [r7, #12]
  return result;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d101      	bne.n	800270c <HAL_ADC_ConfigChannel+0xbc>
    return 32U;
 8002708:	2320      	movs	r3, #32
 800270a:	e003      	b.n	8002714 <HAL_ADC_ConfigChannel+0xc4>
  return __builtin_clz(value);
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	fab3 f383 	clz	r3, r3
 8002712:	b2db      	uxtb	r3, r3
 8002714:	6839      	ldr	r1, [r7, #0]
 8002716:	6849      	ldr	r1, [r1, #4]
 8002718:	f001 011f 	and.w	r1, r1, #31
 800271c:	408b      	lsls	r3, r1
 800271e:	431a      	orrs	r2, r3
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	669a      	str	r2, [r3, #104]	@ 0x68

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	089b      	lsrs	r3, r3, #2
 800272a:	1c5a      	adds	r2, r3, #1
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002730:	429a      	cmp	r2, r3
 8002732:	d808      	bhi.n	8002746 <HAL_ADC_ConfigChannel+0xf6>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6818      	ldr	r0, [r3, #0]
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	6859      	ldr	r1, [r3, #4]
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	461a      	mov	r2, r3
 8002742:	f7ff fab6 	bl	8001cb2 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6818      	ldr	r0, [r3, #0]
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	6819      	ldr	r1, [r3, #0]
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	461a      	mov	r2, r3
 8002754:	f7ff fb04 	bl	8001d60 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	2b00      	cmp	r3, #0
 800275e:	da77      	bge.n	8002850 <HAL_ADC_ConfigChannel+0x200>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002760:	4841      	ldr	r0, [pc, #260]	@ (8002868 <HAL_ADC_ConfigChannel+0x218>)
 8002762:	f7ff fa66 	bl	8001c32 <LL_ADC_GetCommonPathInternalCh>
 8002766:	61b8      	str	r0, [r7, #24]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a3f      	ldr	r2, [pc, #252]	@ (800286c <HAL_ADC_ConfigChannel+0x21c>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d120      	bne.n	80027b4 <HAL_ADC_ConfigChannel+0x164>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002772:	69bb      	ldr	r3, [r7, #24]
 8002774:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002778:	2b00      	cmp	r3, #0
 800277a:	d11b      	bne.n	80027b4 <HAL_ADC_ConfigChannel+0x164>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800277c:	69bb      	ldr	r3, [r7, #24]
 800277e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002782:	4619      	mov	r1, r3
 8002784:	4838      	ldr	r0, [pc, #224]	@ (8002868 <HAL_ADC_ConfigChannel+0x218>)
 8002786:	f7ff fa41 	bl	8001c0c <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800278a:	4b39      	ldr	r3, [pc, #228]	@ (8002870 <HAL_ADC_ConfigChannel+0x220>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	099b      	lsrs	r3, r3, #6
 8002790:	4a38      	ldr	r2, [pc, #224]	@ (8002874 <HAL_ADC_ConfigChannel+0x224>)
 8002792:	fba2 2303 	umull	r2, r3, r2, r3
 8002796:	099b      	lsrs	r3, r3, #6
 8002798:	1c5a      	adds	r2, r3, #1
 800279a:	4613      	mov	r3, r2
 800279c:	005b      	lsls	r3, r3, #1
 800279e:	4413      	add	r3, r2
 80027a0:	009b      	lsls	r3, r3, #2
 80027a2:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80027a4:	e002      	b.n	80027ac <HAL_ADC_ConfigChannel+0x15c>
          {
            wait_loop_index--;
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	3b01      	subs	r3, #1
 80027aa:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d1f9      	bne.n	80027a6 <HAL_ADC_ConfigChannel+0x156>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80027b2:	e04d      	b.n	8002850 <HAL_ADC_ConfigChannel+0x200>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a2f      	ldr	r2, [pc, #188]	@ (8002878 <HAL_ADC_ConfigChannel+0x228>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d148      	bne.n	8002850 <HAL_ADC_ConfigChannel+0x200>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80027be:	69bb      	ldr	r3, [r7, #24]
 80027c0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d143      	bne.n	8002850 <HAL_ADC_ConfigChannel+0x200>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80027c8:	69bb      	ldr	r3, [r7, #24]
 80027ca:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80027ce:	4619      	mov	r1, r3
 80027d0:	4825      	ldr	r0, [pc, #148]	@ (8002868 <HAL_ADC_ConfigChannel+0x218>)
 80027d2:	f7ff fa1b 	bl	8001c0c <LL_ADC_SetCommonPathInternalCh>
 80027d6:	e03b      	b.n	8002850 <HAL_ADC_ConfigChannel+0x200>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	691b      	ldr	r3, [r3, #16]
 80027dc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80027e0:	d004      	beq.n	80027ec <HAL_ADC_ConfigChannel+0x19c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80027e6:	4a1f      	ldr	r2, [pc, #124]	@ (8002864 <HAL_ADC_ConfigChannel+0x214>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d107      	bne.n	80027fc <HAL_ADC_ConfigChannel+0x1ac>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681a      	ldr	r2, [r3, #0]
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4619      	mov	r1, r3
 80027f6:	4610      	mov	r0, r2
 80027f8:	f7ff fa90 	bl	8001d1c <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	2b00      	cmp	r3, #0
 8002802:	da25      	bge.n	8002850 <HAL_ADC_ConfigChannel+0x200>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002804:	4818      	ldr	r0, [pc, #96]	@ (8002868 <HAL_ADC_ConfigChannel+0x218>)
 8002806:	f7ff fa14 	bl	8001c32 <LL_ADC_GetCommonPathInternalCh>
 800280a:	61b8      	str	r0, [r7, #24]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a16      	ldr	r2, [pc, #88]	@ (800286c <HAL_ADC_ConfigChannel+0x21c>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d107      	bne.n	8002826 <HAL_ADC_ConfigChannel+0x1d6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002816:	69bb      	ldr	r3, [r7, #24]
 8002818:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800281c:	4619      	mov	r1, r3
 800281e:	4812      	ldr	r0, [pc, #72]	@ (8002868 <HAL_ADC_ConfigChannel+0x218>)
 8002820:	f7ff f9f4 	bl	8001c0c <LL_ADC_SetCommonPathInternalCh>
 8002824:	e014      	b.n	8002850 <HAL_ADC_ConfigChannel+0x200>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a13      	ldr	r2, [pc, #76]	@ (8002878 <HAL_ADC_ConfigChannel+0x228>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d10f      	bne.n	8002850 <HAL_ADC_ConfigChannel+0x200>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002830:	69bb      	ldr	r3, [r7, #24]
 8002832:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8002836:	4619      	mov	r1, r3
 8002838:	480b      	ldr	r0, [pc, #44]	@ (8002868 <HAL_ADC_ConfigChannel+0x218>)
 800283a:	f7ff f9e7 	bl	8001c0c <LL_ADC_SetCommonPathInternalCh>
 800283e:	e007      	b.n	8002850 <HAL_ADC_ConfigChannel+0x200>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002844:	f043 0220 	orr.w	r2, r3, #32
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800284c:	2301      	movs	r3, #1
 800284e:	77fb      	strb	r3, [r7, #31]
  }

  __HAL_UNLOCK(hadc);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2200      	movs	r2, #0
 8002854:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  return tmp_hal_status;
 8002858:	7ffb      	ldrb	r3, [r7, #31]
}
 800285a:	4618      	mov	r0, r3
 800285c:	3720      	adds	r7, #32
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}
 8002862:	bf00      	nop
 8002864:	80000010 	.word	0x80000010
 8002868:	46021308 	.word	0x46021308
 800286c:	b4002000 	.word	0xb4002000
 8002870:	20000024 	.word	0x20000024
 8002874:	053e2d63 	.word	0x053e2d63
 8002878:	80000001 	.word	0x80000001

0800287c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b084      	sub	sp, #16
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002884:	2300      	movs	r3, #0
 8002886:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4618      	mov	r0, r3
 800288e:	f7ff fad4 	bl	8001e3a <LL_ADC_IsEnabled>
 8002892:	4603      	mov	r3, r0
 8002894:	2b00      	cmp	r3, #0
 8002896:	d169      	bne.n	800296c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	689a      	ldr	r2, [r3, #8]
 800289e:	4b36      	ldr	r3, [pc, #216]	@ (8002978 <ADC_Enable+0xfc>)
 80028a0:	4013      	ands	r3, r2
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d00d      	beq.n	80028c2 <ADC_Enable+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028aa:	f043 0210 	orr.w	r2, r3, #16
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80028b6:	f043 0201 	orr.w	r2, r3, #1
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	665a      	str	r2, [r3, #100]	@ 0x64

      return HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	e055      	b.n	800296e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4618      	mov	r0, r3
 80028c8:	f7ff fa8f 	bl	8001dea <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 80028cc:	482b      	ldr	r0, [pc, #172]	@ (800297c <ADC_Enable+0x100>)
 80028ce:	f7ff f9b0 	bl	8001c32 <LL_ADC_GetCommonPathInternalCh>
 80028d2:	4603      	mov	r3, r0
 80028d4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d00f      	beq.n	80028fc <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80028dc:	4b28      	ldr	r3, [pc, #160]	@ (8002980 <ADC_Enable+0x104>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	099b      	lsrs	r3, r3, #6
 80028e2:	4a28      	ldr	r2, [pc, #160]	@ (8002984 <ADC_Enable+0x108>)
 80028e4:	fba2 2303 	umull	r2, r3, r2, r3
 80028e8:	099b      	lsrs	r3, r3, #6
 80028ea:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 80028ec:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80028ee:	e002      	b.n	80028f6 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	3b01      	subs	r3, #1
 80028f4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d1f9      	bne.n	80028f0 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	7e5b      	ldrb	r3, [r3, #25]
 8002900:	2b01      	cmp	r3, #1
 8002902:	d033      	beq.n	800296c <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8002904:	f7ff f976 	bl	8001bf4 <HAL_GetTick>
 8002908:	60f8      	str	r0, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800290a:	e028      	b.n	800295e <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4618      	mov	r0, r3
 8002912:	f7ff fa92 	bl	8001e3a <LL_ADC_IsEnabled>
 8002916:	4603      	mov	r3, r0
 8002918:	2b00      	cmp	r3, #0
 800291a:	d104      	bne.n	8002926 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4618      	mov	r0, r3
 8002922:	f7ff fa62 	bl	8001dea <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002926:	f7ff f965 	bl	8001bf4 <HAL_GetTick>
 800292a:	4602      	mov	r2, r0
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	1ad3      	subs	r3, r2, r3
 8002930:	2b02      	cmp	r3, #2
 8002932:	d914      	bls.n	800295e <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 0301 	and.w	r3, r3, #1
 800293e:	2b01      	cmp	r3, #1
 8002940:	d00d      	beq.n	800295e <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002946:	f043 0210 	orr.w	r2, r3, #16
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002952:	f043 0201 	orr.w	r2, r3, #1
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	665a      	str	r2, [r3, #100]	@ 0x64

            return HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	e007      	b.n	800296e <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f003 0301 	and.w	r3, r3, #1
 8002968:	2b01      	cmp	r3, #1
 800296a:	d1cf      	bne.n	800290c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800296c:	2300      	movs	r3, #0
}
 800296e:	4618      	mov	r0, r3
 8002970:	3710      	adds	r7, #16
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}
 8002976:	bf00      	nop
 8002978:	80000017 	.word	0x80000017
 800297c:	46021308 	.word	0x46021308
 8002980:	20000024 	.word	0x20000024
 8002984:	053e2d63 	.word	0x053e2d63

08002988 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b084      	sub	sp, #16
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002994:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800299a:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d144      	bne.n	8002a2c <ADC_DMAConvCplt+0xa4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029a6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4618      	mov	r0, r3
 80029b4:	f7ff f96a 	bl	8001c8c <LL_ADC_REG_IsTriggerSourceSWStart>
 80029b8:	4603      	mov	r3, r0
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d032      	beq.n	8002a24 <ADC_DMAConvCplt+0x9c>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d12d      	bne.n	8002a24 <ADC_DMAConvCplt+0x9c>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 0308 	and.w	r3, r3, #8
 80029d2:	2b08      	cmp	r3, #8
 80029d4:	d126      	bne.n	8002a24 <ADC_DMAConvCplt+0x9c>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4618      	mov	r0, r3
 80029dc:	f7ff fa54 	bl	8001e88 <LL_ADC_REG_IsConversionOngoing>
 80029e0:	4603      	mov	r3, r0
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d112      	bne.n	8002a0c <ADC_DMAConvCplt+0x84>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	685a      	ldr	r2, [r3, #4]
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f022 020c 	bic.w	r2, r2, #12
 80029f4:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029fa:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80029fe:	f023 0301 	bic.w	r3, r3, #1
 8002a02:	f043 0201 	orr.w	r2, r3, #1
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	661a      	str	r2, [r3, #96]	@ 0x60
 8002a0a:	e00b      	b.n	8002a24 <ADC_DMAConvCplt+0x9c>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a10:	f043 0220 	orr.w	r2, r3, #32
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002a1c:	f043 0201 	orr.w	r2, r3, #1
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002a24:	68f8      	ldr	r0, [r7, #12]
 8002a26:	f7ff fdea 	bl	80025fe <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002a2a:	e00e      	b.n	8002a4a <ADC_DMAConvCplt+0xc2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a30:	f003 0310 	and.w	r3, r3, #16
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d003      	beq.n	8002a40 <ADC_DMAConvCplt+0xb8>
      HAL_ADC_ErrorCallback(hadc);
 8002a38:	68f8      	ldr	r0, [r7, #12]
 8002a3a:	f7ff fdfe 	bl	800263a <HAL_ADC_ErrorCallback>
}
 8002a3e:	e004      	b.n	8002a4a <ADC_DMAConvCplt+0xc2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a44:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	4798      	blx	r3
}
 8002a4a:	bf00      	nop
 8002a4c:	3710      	adds	r7, #16
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}

08002a52 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002a52:	b580      	push	{r7, lr}
 8002a54:	b084      	sub	sp, #16
 8002a56:	af00      	add	r7, sp, #0
 8002a58:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a5e:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002a60:	68f8      	ldr	r0, [r7, #12]
 8002a62:	f7ff fdd6 	bl	8002612 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002a66:	bf00      	nop
 8002a68:	3710      	adds	r7, #16
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}

08002a6e <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002a6e:	b580      	push	{r7, lr}
 8002a70:	b084      	sub	sp, #16
 8002a72:	af00      	add	r7, sp, #0
 8002a74:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a7a:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a80:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002a8c:	f043 0204 	orr.w	r2, r3, #4
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002a94:	68f8      	ldr	r0, [r7, #12]
 8002a96:	f7ff fdd0 	bl	800263a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002a9a:	bf00      	nop
 8002a9c:	3710      	adds	r7, #16
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}

08002aa2 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002aa2:	b480      	push	{r7}
 8002aa4:	b083      	sub	sp, #12
 8002aa6:	af00      	add	r7, sp, #0
 8002aa8:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002aaa:	bf00      	nop
 8002aac:	370c      	adds	r7, #12
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab4:	4770      	bx	lr

08002ab6 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002ab6:	b480      	push	{r7}
 8002ab8:	b083      	sub	sp, #12
 8002aba:	af00      	add	r7, sp, #0
 8002abc:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002abe:	bf00      	nop
 8002ac0:	370c      	adds	r7, #12
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac8:	4770      	bx	lr

08002aca <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002aca:	b480      	push	{r7}
 8002acc:	b083      	sub	sp, #12
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002ad2:	bf00      	nop
 8002ad4:	370c      	adds	r7, #12
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002adc:	4770      	bx	lr

08002ade <HAL_ADCEx_LDOReadyCallback>:
  * @brief  ADC internal voltage regulator ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LDOReadyCallback(ADC_HandleTypeDef *hadc)
{
 8002ade:	b480      	push	{r7}
 8002ae0:	b083      	sub	sp, #12
 8002ae2:	af00      	add	r7, sp, #0
 8002ae4:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LDOReadyCallback must be implemented in the user file.
  */
}
 8002ae6:	bf00      	nop
 8002ae8:	370c      	adds	r7, #12
 8002aea:	46bd      	mov	sp, r7
 8002aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af0:	4770      	bx	lr
	...

08002af4 <__NVIC_SetPriorityGrouping>:
{
 8002af4:	b480      	push	{r7}
 8002af6:	b085      	sub	sp, #20
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	f003 0307 	and.w	r3, r3, #7
 8002b02:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b04:	4b0c      	ldr	r3, [pc, #48]	@ (8002b38 <__NVIC_SetPriorityGrouping+0x44>)
 8002b06:	68db      	ldr	r3, [r3, #12]
 8002b08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b0a:	68ba      	ldr	r2, [r7, #8]
 8002b0c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002b10:	4013      	ands	r3, r2
 8002b12:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b1c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002b20:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b26:	4a04      	ldr	r2, [pc, #16]	@ (8002b38 <__NVIC_SetPriorityGrouping+0x44>)
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	60d3      	str	r3, [r2, #12]
}
 8002b2c:	bf00      	nop
 8002b2e:	3714      	adds	r7, #20
 8002b30:	46bd      	mov	sp, r7
 8002b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b36:	4770      	bx	lr
 8002b38:	e000ed00 	.word	0xe000ed00

08002b3c <__NVIC_GetPriorityGrouping>:
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b40:	4b04      	ldr	r3, [pc, #16]	@ (8002b54 <__NVIC_GetPriorityGrouping+0x18>)
 8002b42:	68db      	ldr	r3, [r3, #12]
 8002b44:	0a1b      	lsrs	r3, r3, #8
 8002b46:	f003 0307 	and.w	r3, r3, #7
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b52:	4770      	bx	lr
 8002b54:	e000ed00 	.word	0xe000ed00

08002b58 <__NVIC_EnableIRQ>:
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b083      	sub	sp, #12
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	4603      	mov	r3, r0
 8002b60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	db0b      	blt.n	8002b82 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b6a:	79fb      	ldrb	r3, [r7, #7]
 8002b6c:	f003 021f 	and.w	r2, r3, #31
 8002b70:	4907      	ldr	r1, [pc, #28]	@ (8002b90 <__NVIC_EnableIRQ+0x38>)
 8002b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b76:	095b      	lsrs	r3, r3, #5
 8002b78:	2001      	movs	r0, #1
 8002b7a:	fa00 f202 	lsl.w	r2, r0, r2
 8002b7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002b82:	bf00      	nop
 8002b84:	370c      	adds	r7, #12
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr
 8002b8e:	bf00      	nop
 8002b90:	e000e100 	.word	0xe000e100

08002b94 <__NVIC_DisableIRQ>:
{
 8002b94:	b480      	push	{r7}
 8002b96:	b083      	sub	sp, #12
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	db12      	blt.n	8002bcc <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ba6:	79fb      	ldrb	r3, [r7, #7]
 8002ba8:	f003 021f 	and.w	r2, r3, #31
 8002bac:	490a      	ldr	r1, [pc, #40]	@ (8002bd8 <__NVIC_DisableIRQ+0x44>)
 8002bae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bb2:	095b      	lsrs	r3, r3, #5
 8002bb4:	2001      	movs	r0, #1
 8002bb6:	fa00 f202 	lsl.w	r2, r0, r2
 8002bba:	3320      	adds	r3, #32
 8002bbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002bc0:	f3bf 8f4f 	dsb	sy
}
 8002bc4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002bc6:	f3bf 8f6f 	isb	sy
}
 8002bca:	bf00      	nop
}
 8002bcc:	bf00      	nop
 8002bce:	370c      	adds	r7, #12
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd6:	4770      	bx	lr
 8002bd8:	e000e100 	.word	0xe000e100

08002bdc <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b083      	sub	sp, #12
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	4603      	mov	r3, r0
 8002be4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002be6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	db0c      	blt.n	8002c08 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bee:	79fb      	ldrb	r3, [r7, #7]
 8002bf0:	f003 021f 	and.w	r2, r3, #31
 8002bf4:	4907      	ldr	r1, [pc, #28]	@ (8002c14 <__NVIC_SetPendingIRQ+0x38>)
 8002bf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bfa:	095b      	lsrs	r3, r3, #5
 8002bfc:	2001      	movs	r0, #1
 8002bfe:	fa00 f202 	lsl.w	r2, r0, r2
 8002c02:	3340      	adds	r3, #64	@ 0x40
 8002c04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002c08:	bf00      	nop
 8002c0a:	370c      	adds	r7, #12
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c12:	4770      	bx	lr
 8002c14:	e000e100 	.word	0xe000e100

08002c18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b083      	sub	sp, #12
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	4603      	mov	r3, r0
 8002c20:	6039      	str	r1, [r7, #0]
 8002c22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	db0a      	blt.n	8002c42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	b2da      	uxtb	r2, r3
 8002c30:	490c      	ldr	r1, [pc, #48]	@ (8002c64 <__NVIC_SetPriority+0x4c>)
 8002c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c36:	0112      	lsls	r2, r2, #4
 8002c38:	b2d2      	uxtb	r2, r2
 8002c3a:	440b      	add	r3, r1
 8002c3c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c40:	e00a      	b.n	8002c58 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	b2da      	uxtb	r2, r3
 8002c46:	4908      	ldr	r1, [pc, #32]	@ (8002c68 <__NVIC_SetPriority+0x50>)
 8002c48:	79fb      	ldrb	r3, [r7, #7]
 8002c4a:	f003 030f 	and.w	r3, r3, #15
 8002c4e:	3b04      	subs	r3, #4
 8002c50:	0112      	lsls	r2, r2, #4
 8002c52:	b2d2      	uxtb	r2, r2
 8002c54:	440b      	add	r3, r1
 8002c56:	761a      	strb	r2, [r3, #24]
}
 8002c58:	bf00      	nop
 8002c5a:	370c      	adds	r7, #12
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c62:	4770      	bx	lr
 8002c64:	e000e100 	.word	0xe000e100
 8002c68:	e000ed00 	.word	0xe000ed00

08002c6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b089      	sub	sp, #36	@ 0x24
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	60f8      	str	r0, [r7, #12]
 8002c74:	60b9      	str	r1, [r7, #8]
 8002c76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	f003 0307 	and.w	r3, r3, #7
 8002c7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c80:	69fb      	ldr	r3, [r7, #28]
 8002c82:	f1c3 0307 	rsb	r3, r3, #7
 8002c86:	2b04      	cmp	r3, #4
 8002c88:	bf28      	it	cs
 8002c8a:	2304      	movcs	r3, #4
 8002c8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c8e:	69fb      	ldr	r3, [r7, #28]
 8002c90:	3304      	adds	r3, #4
 8002c92:	2b06      	cmp	r3, #6
 8002c94:	d902      	bls.n	8002c9c <NVIC_EncodePriority+0x30>
 8002c96:	69fb      	ldr	r3, [r7, #28]
 8002c98:	3b03      	subs	r3, #3
 8002c9a:	e000      	b.n	8002c9e <NVIC_EncodePriority+0x32>
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ca0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002ca4:	69bb      	ldr	r3, [r7, #24]
 8002ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8002caa:	43da      	mvns	r2, r3
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	401a      	ands	r2, r3
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002cb4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	fa01 f303 	lsl.w	r3, r1, r3
 8002cbe:	43d9      	mvns	r1, r3
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cc4:	4313      	orrs	r3, r2
         );
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	3724      	adds	r7, #36	@ 0x24
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd0:	4770      	bx	lr

08002cd2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cd2:	b580      	push	{r7, lr}
 8002cd4:	b082      	sub	sp, #8
 8002cd6:	af00      	add	r7, sp, #0
 8002cd8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002cda:	6878      	ldr	r0, [r7, #4]
 8002cdc:	f7ff ff0a 	bl	8002af4 <__NVIC_SetPriorityGrouping>
}
 8002ce0:	bf00      	nop
 8002ce2:	3708      	adds	r7, #8
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}

08002ce8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b086      	sub	sp, #24
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	4603      	mov	r3, r0
 8002cf0:	60b9      	str	r1, [r7, #8]
 8002cf2:	607a      	str	r2, [r7, #4]
 8002cf4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup;

  prioritygroup = (NVIC_GetPriorityGrouping() & 0x7U);
 8002cf6:	f7ff ff21 	bl	8002b3c <__NVIC_GetPriorityGrouping>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	f003 0307 	and.w	r3, r3, #7
 8002d00:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority, prioritygroup));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority, prioritygroup));

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d02:	687a      	ldr	r2, [r7, #4]
 8002d04:	68b9      	ldr	r1, [r7, #8]
 8002d06:	6978      	ldr	r0, [r7, #20]
 8002d08:	f7ff ffb0 	bl	8002c6c <NVIC_EncodePriority>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d12:	4611      	mov	r1, r2
 8002d14:	4618      	mov	r0, r3
 8002d16:	f7ff ff7f 	bl	8002c18 <__NVIC_SetPriority>
}
 8002d1a:	bf00      	nop
 8002d1c:	3718      	adds	r7, #24
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}

08002d22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbaxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d22:	b580      	push	{r7, lr}
 8002d24:	b082      	sub	sp, #8
 8002d26:	af00      	add	r7, sp, #0
 8002d28:	4603      	mov	r3, r0
 8002d2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d30:	4618      	mov	r0, r3
 8002d32:	f7ff ff11 	bl	8002b58 <__NVIC_EnableIRQ>
}
 8002d36:	bf00      	nop
 8002d38:	3708      	adds	r7, #8
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}

08002d3e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbaxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002d3e:	b580      	push	{r7, lr}
 8002d40:	b082      	sub	sp, #8
 8002d42:	af00      	add	r7, sp, #0
 8002d44:	4603      	mov	r3, r0
 8002d46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002d48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f7ff ff21 	bl	8002b94 <__NVIC_DisableIRQ>
}
 8002d52:	bf00      	nop
 8002d54:	3708      	adds	r7, #8
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}
	...

08002d5c <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b083      	sub	sp, #12
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	3b01      	subs	r3, #1
 8002d68:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002d6c:	d301      	bcc.n	8002d72 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e00d      	b.n	8002d8e <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8002d72:	4a0a      	ldr	r2, [pc, #40]	@ (8002d9c <HAL_SYSTICK_Config+0x40>)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	3b01      	subs	r3, #1
 8002d78:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8002d7a:	4b08      	ldr	r3, [pc, #32]	@ (8002d9c <HAL_SYSTICK_Config+0x40>)
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8002d80:	4b06      	ldr	r3, [pc, #24]	@ (8002d9c <HAL_SYSTICK_Config+0x40>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a05      	ldr	r2, [pc, #20]	@ (8002d9c <HAL_SYSTICK_Config+0x40>)
 8002d86:	f043 0303 	orr.w	r3, r3, #3
 8002d8a:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8002d8c:	2300      	movs	r3, #0
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	370c      	adds	r7, #12
 8002d92:	46bd      	mov	sp, r7
 8002d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d98:	4770      	bx	lr
 8002d9a:	bf00      	nop
 8002d9c:	e000e010 	.word	0xe000e010

08002da0 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbaxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b082      	sub	sp, #8
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	4603      	mov	r3, r0
 8002da8:	71fb      	strb	r3, [r7, #7]
  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8002daa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dae:	4618      	mov	r0, r3
 8002db0:	f7ff ff14 	bl	8002bdc <__NVIC_SetPendingIRQ>
}
 8002db4:	bf00      	nop
 8002db6:	3708      	adds	r7, #8
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}

08002dbc <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b083      	sub	sp, #12
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2b04      	cmp	r3, #4
 8002dc8:	d844      	bhi.n	8002e54 <HAL_SYSTICK_CLKSourceConfig+0x98>
 8002dca:	a201      	add	r2, pc, #4	@ (adr r2, 8002dd0 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8002dcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dd0:	08002df3 	.word	0x08002df3
 8002dd4:	08002e11 	.word	0x08002e11
 8002dd8:	08002e33 	.word	0x08002e33
 8002ddc:	08002e55 	.word	0x08002e55
 8002de0:	08002de5 	.word	0x08002de5
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8002de4:	4b1f      	ldr	r3, [pc, #124]	@ (8002e64 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a1e      	ldr	r2, [pc, #120]	@ (8002e64 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002dea:	f043 0304 	orr.w	r3, r3, #4
 8002dee:	6013      	str	r3, [r2, #0]
      break;
 8002df0:	e031      	b.n	8002e56 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8002df2:	4b1c      	ldr	r3, [pc, #112]	@ (8002e64 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a1b      	ldr	r2, [pc, #108]	@ (8002e64 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002df8:	f023 0304 	bic.w	r3, r3, #4
 8002dfc:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 8002dfe:	4b1a      	ldr	r3, [pc, #104]	@ (8002e68 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002e00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002e04:	4a18      	ldr	r2, [pc, #96]	@ (8002e68 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002e06:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8002e0a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8002e0e:	e022      	b.n	8002e56 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8002e10:	4b14      	ldr	r3, [pc, #80]	@ (8002e64 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a13      	ldr	r2, [pc, #76]	@ (8002e64 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002e16:	f023 0304 	bic.w	r3, r3, #4
 8002e1a:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 8002e1c:	4b12      	ldr	r3, [pc, #72]	@ (8002e68 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002e1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002e22:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8002e26:	4a10      	ldr	r2, [pc, #64]	@ (8002e68 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002e28:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002e2c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8002e30:	e011      	b.n	8002e56 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8002e32:	4b0c      	ldr	r3, [pc, #48]	@ (8002e64 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a0b      	ldr	r2, [pc, #44]	@ (8002e64 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002e38:	f023 0304 	bic.w	r3, r3, #4
 8002e3c:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 8002e3e:	4b0a      	ldr	r3, [pc, #40]	@ (8002e68 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002e40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002e44:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8002e48:	4a07      	ldr	r2, [pc, #28]	@ (8002e68 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002e4a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002e4e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8002e52:	e000      	b.n	8002e56 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8002e54:	bf00      	nop
  }
}
 8002e56:	bf00      	nop
 8002e58:	370c      	adds	r7, #12
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e60:	4770      	bx	lr
 8002e62:	bf00      	nop
 8002e64:	e000e010 	.word	0xe000e010
 8002e68:	46020c00 	.word	0x46020c00

08002e6c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b082      	sub	sp, #8
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d101      	bne.n	8002e7e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e054      	b.n	8002f28 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	7f5b      	ldrb	r3, [r3, #29]
 8002e82:	b2db      	uxtb	r3, r3
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d105      	bne.n	8002e94 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	f7fe f9f0 	bl	8001274 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2202      	movs	r2, #2
 8002e98:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	791b      	ldrb	r3, [r3, #4]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d10c      	bne.n	8002ebc <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a22      	ldr	r2, [pc, #136]	@ (8002f30 <HAL_CRC_Init+0xc4>)
 8002ea8:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	689a      	ldr	r2, [r3, #8]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f022 0218 	bic.w	r2, r2, #24
 8002eb8:	609a      	str	r2, [r3, #8]
 8002eba:	e00c      	b.n	8002ed6 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6899      	ldr	r1, [r3, #8]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	68db      	ldr	r3, [r3, #12]
 8002ec4:	461a      	mov	r2, r3
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	f000 f9bc 	bl	8003244 <HAL_CRCEx_Polynomial_Set>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d001      	beq.n	8002ed6 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e028      	b.n	8002f28 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	795b      	ldrb	r3, [r3, #5]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d105      	bne.n	8002eea <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002ee6:	611a      	str	r2, [r3, #16]
 8002ee8:	e004      	b.n	8002ef4 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	687a      	ldr	r2, [r7, #4]
 8002ef0:	6912      	ldr	r2, [r2, #16]
 8002ef2:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	695a      	ldr	r2, [r3, #20]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	430a      	orrs	r2, r1
 8002f08:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	699a      	ldr	r2, [r3, #24]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	430a      	orrs	r2, r1
 8002f1e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2201      	movs	r2, #1
 8002f24:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8002f26:	2300      	movs	r3, #0
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	3708      	adds	r7, #8
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}
 8002f30:	04c11db7 	.word	0x04c11db7

08002f34 <HAL_CRC_DeInit>:
  * @brief  DeInitialize the CRC peripheral.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_DeInit(CRC_HandleTypeDef *hcrc)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b082      	sub	sp, #8
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d101      	bne.n	8002f46 <HAL_CRC_DeInit+0x12>
  {
    return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e022      	b.n	8002f8c <HAL_CRC_DeInit+0x58>

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  /* Check the CRC peripheral state */
  if (hcrc->State == HAL_CRC_STATE_BUSY)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	7f5b      	ldrb	r3, [r3, #29]
 8002f4a:	b2db      	uxtb	r3, r3
 8002f4c:	2b02      	cmp	r3, #2
 8002f4e:	d101      	bne.n	8002f54 <HAL_CRC_DeInit+0x20>
  {
    return HAL_BUSY;
 8002f50:	2302      	movs	r3, #2
 8002f52:	e01b      	b.n	8002f8c <HAL_CRC_DeInit+0x58>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2202      	movs	r2, #2
 8002f58:	775a      	strb	r2, [r3, #29]

  /* Reset CRC calculation unit */
  __HAL_CRC_DR_RESET(hcrc);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	689a      	ldr	r2, [r3, #8]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f042 0201 	orr.w	r2, r2, #1
 8002f68:	609a      	str	r2, [r3, #8]

  /* Reset IDR register content */
  CLEAR_BIT(hcrc->Instance->IDR, CRC_IDR_IDR);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	2200      	movs	r2, #0
 8002f76:	605a      	str	r2, [r3, #4]

  /* DeInit the low level hardware */
  HAL_CRC_MspDeInit(hcrc);
 8002f78:	6878      	ldr	r0, [r7, #4]
 8002f7a:	f7fe f99d 	bl	80012b8 <HAL_CRC_MspDeInit>

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_RESET;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2200      	movs	r2, #0
 8002f82:	775a      	strb	r2, [r3, #29]

  /* Process unlocked */
  __HAL_UNLOCK(hcrc);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2200      	movs	r2, #0
 8002f88:	771a      	strb	r2, [r3, #28]

  /* Return function status */
  return HAL_OK;
 8002f8a:	2300      	movs	r3, #0
}
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	3708      	adds	r7, #8
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}

08002f94 <HAL_CRC_Accumulate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Accumulate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b086      	sub	sp, #24
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	60f8      	str	r0, [r7, #12]
 8002f9c:	60b9      	str	r1, [r7, #8]
 8002f9e:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2202      	movs	r2, #2
 8002fa8:	775a      	strb	r2, [r3, #29]

  switch (hcrc->InputDataFormat)
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	6a1b      	ldr	r3, [r3, #32]
 8002fae:	2b03      	cmp	r3, #3
 8002fb0:	d006      	beq.n	8002fc0 <HAL_CRC_Accumulate+0x2c>
 8002fb2:	2b03      	cmp	r3, #3
 8002fb4:	d829      	bhi.n	800300a <HAL_CRC_Accumulate+0x76>
 8002fb6:	2b01      	cmp	r3, #1
 8002fb8:	d019      	beq.n	8002fee <HAL_CRC_Accumulate+0x5a>
 8002fba:	2b02      	cmp	r3, #2
 8002fbc:	d01e      	beq.n	8002ffc <HAL_CRC_Accumulate+0x68>

    case CRC_INPUTDATA_FORMAT_HALFWORDS:
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;
    default:
      break;
 8002fbe:	e024      	b.n	800300a <HAL_CRC_Accumulate+0x76>
      for (index = 0U; index < BufferLength; index++)
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	617b      	str	r3, [r7, #20]
 8002fc4:	e00a      	b.n	8002fdc <HAL_CRC_Accumulate+0x48>
        hcrc->Instance->DR = pBuffer[index];
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	009b      	lsls	r3, r3, #2
 8002fca:	68ba      	ldr	r2, [r7, #8]
 8002fcc:	441a      	add	r2, r3
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	6812      	ldr	r2, [r2, #0]
 8002fd4:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	3301      	adds	r3, #1
 8002fda:	617b      	str	r3, [r7, #20]
 8002fdc:	697a      	ldr	r2, [r7, #20]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d3f0      	bcc.n	8002fc6 <HAL_CRC_Accumulate+0x32>
      temp = hcrc->Instance->DR;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	613b      	str	r3, [r7, #16]
      break;
 8002fec:	e00e      	b.n	800300c <HAL_CRC_Accumulate+0x78>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 8002fee:	687a      	ldr	r2, [r7, #4]
 8002ff0:	68b9      	ldr	r1, [r7, #8]
 8002ff2:	68f8      	ldr	r0, [r7, #12]
 8002ff4:	f000 f85e 	bl	80030b4 <CRC_Handle_8>
 8002ff8:	6138      	str	r0, [r7, #16]
      break;
 8002ffa:	e007      	b.n	800300c <HAL_CRC_Accumulate+0x78>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 8002ffc:	687a      	ldr	r2, [r7, #4]
 8002ffe:	68b9      	ldr	r1, [r7, #8]
 8003000:	68f8      	ldr	r0, [r7, #12]
 8003002:	f000 f8e5 	bl	80031d0 <CRC_Handle_16>
 8003006:	6138      	str	r0, [r7, #16]
      break;
 8003008:	e000      	b.n	800300c <HAL_CRC_Accumulate+0x78>
      break;
 800300a:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2201      	movs	r2, #1
 8003010:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 8003012:	693b      	ldr	r3, [r7, #16]
}
 8003014:	4618      	mov	r0, r3
 8003016:	3718      	adds	r7, #24
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}

0800301c <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b086      	sub	sp, #24
 8003020:	af00      	add	r7, sp, #0
 8003022:	60f8      	str	r0, [r7, #12]
 8003024:	60b9      	str	r1, [r7, #8]
 8003026:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8003028:	2300      	movs	r3, #0
 800302a:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	2202      	movs	r2, #2
 8003030:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	689a      	ldr	r2, [r3, #8]
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f042 0201 	orr.w	r2, r2, #1
 8003040:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	6a1b      	ldr	r3, [r3, #32]
 8003046:	2b03      	cmp	r3, #3
 8003048:	d006      	beq.n	8003058 <HAL_CRC_Calculate+0x3c>
 800304a:	2b03      	cmp	r3, #3
 800304c:	d829      	bhi.n	80030a2 <HAL_CRC_Calculate+0x86>
 800304e:	2b01      	cmp	r3, #1
 8003050:	d019      	beq.n	8003086 <HAL_CRC_Calculate+0x6a>
 8003052:	2b02      	cmp	r3, #2
 8003054:	d01e      	beq.n	8003094 <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 8003056:	e024      	b.n	80030a2 <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 8003058:	2300      	movs	r3, #0
 800305a:	617b      	str	r3, [r7, #20]
 800305c:	e00a      	b.n	8003074 <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	009b      	lsls	r3, r3, #2
 8003062:	68ba      	ldr	r2, [r7, #8]
 8003064:	441a      	add	r2, r3
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	6812      	ldr	r2, [r2, #0]
 800306c:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	3301      	adds	r3, #1
 8003072:	617b      	str	r3, [r7, #20]
 8003074:	697a      	ldr	r2, [r7, #20]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	429a      	cmp	r2, r3
 800307a:	d3f0      	bcc.n	800305e <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	613b      	str	r3, [r7, #16]
      break;
 8003084:	e00e      	b.n	80030a4 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 8003086:	687a      	ldr	r2, [r7, #4]
 8003088:	68b9      	ldr	r1, [r7, #8]
 800308a:	68f8      	ldr	r0, [r7, #12]
 800308c:	f000 f812 	bl	80030b4 <CRC_Handle_8>
 8003090:	6138      	str	r0, [r7, #16]
      break;
 8003092:	e007      	b.n	80030a4 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 8003094:	687a      	ldr	r2, [r7, #4]
 8003096:	68b9      	ldr	r1, [r7, #8]
 8003098:	68f8      	ldr	r0, [r7, #12]
 800309a:	f000 f899 	bl	80031d0 <CRC_Handle_16>
 800309e:	6138      	str	r0, [r7, #16]
      break;
 80030a0:	e000      	b.n	80030a4 <HAL_CRC_Calculate+0x88>
      break;
 80030a2:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	2201      	movs	r2, #1
 80030a8:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 80030aa:	693b      	ldr	r3, [r7, #16]
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	3718      	adds	r7, #24
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}

080030b4 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b089      	sub	sp, #36	@ 0x24
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	60f8      	str	r0, [r7, #12]
 80030bc:	60b9      	str	r1, [r7, #8]
 80030be:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 80030c0:	2300      	movs	r3, #0
 80030c2:	61fb      	str	r3, [r7, #28]
 80030c4:	e023      	b.n	800310e <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80030c6:	69fb      	ldr	r3, [r7, #28]
 80030c8:	009b      	lsls	r3, r3, #2
 80030ca:	68ba      	ldr	r2, [r7, #8]
 80030cc:	4413      	add	r3, r2
 80030ce:	781b      	ldrb	r3, [r3, #0]
 80030d0:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 80030d2:	69fb      	ldr	r3, [r7, #28]
 80030d4:	009b      	lsls	r3, r3, #2
 80030d6:	3301      	adds	r3, #1
 80030d8:	68b9      	ldr	r1, [r7, #8]
 80030da:	440b      	add	r3, r1
 80030dc:	781b      	ldrb	r3, [r3, #0]
 80030de:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80030e0:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 80030e2:	69fb      	ldr	r3, [r7, #28]
 80030e4:	009b      	lsls	r3, r3, #2
 80030e6:	3302      	adds	r3, #2
 80030e8:	68b9      	ldr	r1, [r7, #8]
 80030ea:	440b      	add	r3, r1
 80030ec:	781b      	ldrb	r3, [r3, #0]
 80030ee:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 80030f0:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 80030f2:	69fb      	ldr	r3, [r7, #28]
 80030f4:	009b      	lsls	r3, r3, #2
 80030f6:	3303      	adds	r3, #3
 80030f8:	68b9      	ldr	r1, [r7, #8]
 80030fa:	440b      	add	r3, r1
 80030fc:	781b      	ldrb	r3, [r3, #0]
 80030fe:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8003104:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8003106:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 8003108:	69fb      	ldr	r3, [r7, #28]
 800310a:	3301      	adds	r3, #1
 800310c:	61fb      	str	r3, [r7, #28]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	089b      	lsrs	r3, r3, #2
 8003112:	69fa      	ldr	r2, [r7, #28]
 8003114:	429a      	cmp	r2, r3
 8003116:	d3d6      	bcc.n	80030c6 <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	f003 0303 	and.w	r3, r3, #3
 800311e:	2b00      	cmp	r3, #0
 8003120:	d04d      	beq.n	80031be <CRC_Handle_8+0x10a>
  {
    if ((BufferLength % 4U) == 1U)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	f003 0303 	and.w	r3, r3, #3
 8003128:	2b01      	cmp	r3, #1
 800312a:	d107      	bne.n	800313c <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 800312c:	69fb      	ldr	r3, [r7, #28]
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	68ba      	ldr	r2, [r7, #8]
 8003132:	4413      	add	r3, r2
 8003134:	68fa      	ldr	r2, [r7, #12]
 8003136:	6812      	ldr	r2, [r2, #0]
 8003138:	781b      	ldrb	r3, [r3, #0]
 800313a:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	f003 0303 	and.w	r3, r3, #3
 8003142:	2b02      	cmp	r3, #2
 8003144:	d116      	bne.n	8003174 <CRC_Handle_8+0xc0>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8003146:	69fb      	ldr	r3, [r7, #28]
 8003148:	009b      	lsls	r3, r3, #2
 800314a:	68ba      	ldr	r2, [r7, #8]
 800314c:	4413      	add	r3, r2
 800314e:	781b      	ldrb	r3, [r3, #0]
 8003150:	021b      	lsls	r3, r3, #8
 8003152:	b21a      	sxth	r2, r3
 8003154:	69fb      	ldr	r3, [r7, #28]
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	3301      	adds	r3, #1
 800315a:	68b9      	ldr	r1, [r7, #8]
 800315c:	440b      	add	r3, r1
 800315e:	781b      	ldrb	r3, [r3, #0]
 8003160:	b21b      	sxth	r3, r3
 8003162:	4313      	orrs	r3, r2
 8003164:	b21b      	sxth	r3, r3
 8003166:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	617b      	str	r3, [r7, #20]
      *pReg = data;
 800316e:	697b      	ldr	r3, [r7, #20]
 8003170:	8b7a      	ldrh	r2, [r7, #26]
 8003172:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	f003 0303 	and.w	r3, r3, #3
 800317a:	2b03      	cmp	r3, #3
 800317c:	d11f      	bne.n	80031be <CRC_Handle_8+0x10a>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 800317e:	69fb      	ldr	r3, [r7, #28]
 8003180:	009b      	lsls	r3, r3, #2
 8003182:	68ba      	ldr	r2, [r7, #8]
 8003184:	4413      	add	r3, r2
 8003186:	781b      	ldrb	r3, [r3, #0]
 8003188:	021b      	lsls	r3, r3, #8
 800318a:	b21a      	sxth	r2, r3
 800318c:	69fb      	ldr	r3, [r7, #28]
 800318e:	009b      	lsls	r3, r3, #2
 8003190:	3301      	adds	r3, #1
 8003192:	68b9      	ldr	r1, [r7, #8]
 8003194:	440b      	add	r3, r1
 8003196:	781b      	ldrb	r3, [r3, #0]
 8003198:	b21b      	sxth	r3, r3
 800319a:	4313      	orrs	r3, r2
 800319c:	b21b      	sxth	r3, r3
 800319e:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	617b      	str	r3, [r7, #20]
      *pReg = data;
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	8b7a      	ldrh	r2, [r7, #26]
 80031aa:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 80031ac:	69fb      	ldr	r3, [r7, #28]
 80031ae:	009b      	lsls	r3, r3, #2
 80031b0:	3302      	adds	r3, #2
 80031b2:	68ba      	ldr	r2, [r7, #8]
 80031b4:	4413      	add	r3, r2
 80031b6:	68fa      	ldr	r2, [r7, #12]
 80031b8:	6812      	ldr	r2, [r2, #0]
 80031ba:	781b      	ldrb	r3, [r3, #0]
 80031bc:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	681b      	ldr	r3, [r3, #0]
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	3724      	adds	r7, #36	@ 0x24
 80031c8:	46bd      	mov	sp, r7
 80031ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ce:	4770      	bx	lr

080031d0 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b087      	sub	sp, #28
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	60f8      	str	r0, [r7, #12]
 80031d8:	60b9      	str	r1, [r7, #8]
 80031da:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 80031dc:	2300      	movs	r3, #0
 80031de:	617b      	str	r3, [r7, #20]
 80031e0:	e013      	b.n	800320a <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	009b      	lsls	r3, r3, #2
 80031e6:	68ba      	ldr	r2, [r7, #8]
 80031e8:	4413      	add	r3, r2
 80031ea:	881b      	ldrh	r3, [r3, #0]
 80031ec:	041a      	lsls	r2, r3, #16
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	009b      	lsls	r3, r3, #2
 80031f2:	3302      	adds	r3, #2
 80031f4:	68b9      	ldr	r1, [r7, #8]
 80031f6:	440b      	add	r3, r1
 80031f8:	881b      	ldrh	r3, [r3, #0]
 80031fa:	4619      	mov	r1, r3
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	430a      	orrs	r2, r1
 8003202:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	3301      	adds	r3, #1
 8003208:	617b      	str	r3, [r7, #20]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	085b      	lsrs	r3, r3, #1
 800320e:	697a      	ldr	r2, [r7, #20]
 8003210:	429a      	cmp	r2, r3
 8003212:	d3e6      	bcc.n	80031e2 <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	f003 0301 	and.w	r3, r3, #1
 800321a:	2b00      	cmp	r3, #0
 800321c:	d009      	beq.n	8003232 <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	009b      	lsls	r3, r3, #2
 8003228:	68ba      	ldr	r2, [r7, #8]
 800322a:	4413      	add	r3, r2
 800322c:	881a      	ldrh	r2, [r3, #0]
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	681b      	ldr	r3, [r3, #0]
}
 8003238:	4618      	mov	r0, r3
 800323a:	371c      	adds	r7, #28
 800323c:	46bd      	mov	sp, r7
 800323e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003242:	4770      	bx	lr

08003244 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8003244:	b480      	push	{r7}
 8003246:	b087      	sub	sp, #28
 8003248:	af00      	add	r7, sp, #0
 800324a:	60f8      	str	r0, [r7, #12]
 800324c:	60b9      	str	r1, [r7, #8]
 800324e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003250:	2300      	movs	r3, #0
 8003252:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8003254:	231f      	movs	r3, #31
 8003256:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	f003 0301 	and.w	r3, r3, #1
 800325e:	2b00      	cmp	r3, #0
 8003260:	d102      	bne.n	8003268 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	75fb      	strb	r3, [r7, #23]
 8003266:	e063      	b.n	8003330 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8003268:	bf00      	nop
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	1e5a      	subs	r2, r3, #1
 800326e:	613a      	str	r2, [r7, #16]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d009      	beq.n	8003288 <HAL_CRCEx_Polynomial_Set+0x44>
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	f003 031f 	and.w	r3, r3, #31
 800327a:	68ba      	ldr	r2, [r7, #8]
 800327c:	fa22 f303 	lsr.w	r3, r2, r3
 8003280:	f003 0301 	and.w	r3, r3, #1
 8003284:	2b00      	cmp	r3, #0
 8003286:	d0f0      	beq.n	800326a <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2b18      	cmp	r3, #24
 800328c:	d846      	bhi.n	800331c <HAL_CRCEx_Polynomial_Set+0xd8>
 800328e:	a201      	add	r2, pc, #4	@ (adr r2, 8003294 <HAL_CRCEx_Polynomial_Set+0x50>)
 8003290:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003294:	08003323 	.word	0x08003323
 8003298:	0800331d 	.word	0x0800331d
 800329c:	0800331d 	.word	0x0800331d
 80032a0:	0800331d 	.word	0x0800331d
 80032a4:	0800331d 	.word	0x0800331d
 80032a8:	0800331d 	.word	0x0800331d
 80032ac:	0800331d 	.word	0x0800331d
 80032b0:	0800331d 	.word	0x0800331d
 80032b4:	08003311 	.word	0x08003311
 80032b8:	0800331d 	.word	0x0800331d
 80032bc:	0800331d 	.word	0x0800331d
 80032c0:	0800331d 	.word	0x0800331d
 80032c4:	0800331d 	.word	0x0800331d
 80032c8:	0800331d 	.word	0x0800331d
 80032cc:	0800331d 	.word	0x0800331d
 80032d0:	0800331d 	.word	0x0800331d
 80032d4:	08003305 	.word	0x08003305
 80032d8:	0800331d 	.word	0x0800331d
 80032dc:	0800331d 	.word	0x0800331d
 80032e0:	0800331d 	.word	0x0800331d
 80032e4:	0800331d 	.word	0x0800331d
 80032e8:	0800331d 	.word	0x0800331d
 80032ec:	0800331d 	.word	0x0800331d
 80032f0:	0800331d 	.word	0x0800331d
 80032f4:	080032f9 	.word	0x080032f9
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	2b06      	cmp	r3, #6
 80032fc:	d913      	bls.n	8003326 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8003302:	e010      	b.n	8003326 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8003304:	693b      	ldr	r3, [r7, #16]
 8003306:	2b07      	cmp	r3, #7
 8003308:	d90f      	bls.n	800332a <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800330e:	e00c      	b.n	800332a <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	2b0f      	cmp	r3, #15
 8003314:	d90b      	bls.n	800332e <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800331a:	e008      	b.n	800332e <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 800331c:	2301      	movs	r3, #1
 800331e:	75fb      	strb	r3, [r7, #23]
        break;
 8003320:	e006      	b.n	8003330 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8003322:	bf00      	nop
 8003324:	e004      	b.n	8003330 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8003326:	bf00      	nop
 8003328:	e002      	b.n	8003330 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800332a:	bf00      	nop
 800332c:	e000      	b.n	8003330 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800332e:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8003330:	7dfb      	ldrb	r3, [r7, #23]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d10d      	bne.n	8003352 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	68ba      	ldr	r2, [r7, #8]
 800333c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	f023 0118 	bic.w	r1, r3, #24
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	687a      	ldr	r2, [r7, #4]
 800334e:	430a      	orrs	r2, r1
 8003350:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8003352:	7dfb      	ldrb	r3, [r7, #23]
}
 8003354:	4618      	mov	r0, r3
 8003356:	371c      	adds	r7, #28
 8003358:	46bd      	mov	sp, r7
 800335a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335e:	4770      	bx	lr

08003360 <HAL_DMA_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *const hdma)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b084      	sub	sp, #16
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 8003368:	f7fe fc44 	bl	8001bf4 <HAL_GetTick>
 800336c:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d101      	bne.n	8003378 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	e05d      	b.n	8003434 <HAL_DMA_Init+0xd4>
  assert_param(IS_DMA_DESTINATION_DATA_WIDTH(hdma->Init.DestDataWidth));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  assert_param(IS_DMA_TCEM_EVENT_MODE(hdma->Init.TransferEventMode));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a2f      	ldr	r2, [pc, #188]	@ (800343c <HAL_DMA_Init+0xdc>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d021      	beq.n	80033c6 <HAL_DMA_Init+0x66>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a2e      	ldr	r2, [pc, #184]	@ (8003440 <HAL_DMA_Init+0xe0>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d01c      	beq.n	80033c6 <HAL_DMA_Init+0x66>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a2c      	ldr	r2, [pc, #176]	@ (8003444 <HAL_DMA_Init+0xe4>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d017      	beq.n	80033c6 <HAL_DMA_Init+0x66>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a2b      	ldr	r2, [pc, #172]	@ (8003448 <HAL_DMA_Init+0xe8>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d012      	beq.n	80033c6 <HAL_DMA_Init+0x66>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a29      	ldr	r2, [pc, #164]	@ (800344c <HAL_DMA_Init+0xec>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d00d      	beq.n	80033c6 <HAL_DMA_Init+0x66>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a28      	ldr	r2, [pc, #160]	@ (8003450 <HAL_DMA_Init+0xf0>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d008      	beq.n	80033c6 <HAL_DMA_Init+0x66>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a26      	ldr	r2, [pc, #152]	@ (8003454 <HAL_DMA_Init+0xf4>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d003      	beq.n	80033c6 <HAL_DMA_Init+0x66>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a25      	ldr	r2, [pc, #148]	@ (8003458 <HAL_DMA_Init+0xf8>)
 80033c4:	4293      	cmp	r3, r2
    assert_param(IS_DMA_BURST_LENGTH(hdma->Init.DestBurstLength));
    assert_param(IS_DMA_TRANSFER_ALLOCATED_PORT(hdma->Init.TransferAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2200      	movs	r2, #0
 80033ca:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2202      	movs	r2, #2
 80033d2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	695a      	ldr	r2, [r3, #20]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f042 0206 	orr.w	r2, r2, #6
 80033e4:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 80033e6:	e00f      	b.n	8003408 <HAL_DMA_Init+0xa8>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 80033e8:	f7fe fc04 	bl	8001bf4 <HAL_GetTick>
 80033ec:	4602      	mov	r2, r0
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	1ad3      	subs	r3, r2, r3
 80033f2:	2b05      	cmp	r3, #5
 80033f4:	d908      	bls.n	8003408 <HAL_DMA_Init+0xa8>
    {
      /* Update the DMA channel error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2210      	movs	r2, #16
 80033fa:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_ERROR;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2203      	movs	r2, #3
 8003400:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	e015      	b.n	8003434 <HAL_DMA_Init+0xd4>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	695b      	ldr	r3, [r3, #20]
 800340e:	f003 0301 	and.w	r3, r3, #1
 8003412:	2b00      	cmp	r3, #0
 8003414:	d1e8      	bne.n	80033e8 <HAL_DMA_Init+0x88>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_Init(hdma);
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f000 fa42 	bl	80038a0 <DMA_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->Init.Mode;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2200      	movs	r2, #0
 8003428:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2201      	movs	r2, #1
 800342e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8003432:	2300      	movs	r3, #0
}
 8003434:	4618      	mov	r0, r3
 8003436:	3710      	adds	r7, #16
 8003438:	46bd      	mov	sp, r7
 800343a:	bd80      	pop	{r7, pc}
 800343c:	40020050 	.word	0x40020050
 8003440:	400200d0 	.word	0x400200d0
 8003444:	40020150 	.word	0x40020150
 8003448:	400201d0 	.word	0x400201d0
 800344c:	40020250 	.word	0x40020250
 8003450:	400202d0 	.word	0x400202d0
 8003454:	40020350 	.word	0x40020350
 8003458:	400203d0 	.word	0x400203d0

0800345c <HAL_DMA_Start_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *const hdma,
                                   uint32_t SrcAddress,
                                   uint32_t DstAddress,
                                   uint32_t SrcDataSize)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b084      	sub	sp, #16
 8003460:	af00      	add	r7, sp, #0
 8003462:	60f8      	str	r0, [r7, #12]
 8003464:	60b9      	str	r1, [r7, #8]
 8003466:	607a      	str	r2, [r7, #4]
 8003468:	603b      	str	r3, [r7, #0]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d101      	bne.n	8003474 <HAL_DMA_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003470:	2301      	movs	r3, #1
 8003472:	e04f      	b.n	8003514 <HAL_DMA_Start_IT+0xb8>

  /* Check the parameters */
  assert_param(IS_DMA_BLOCK_SIZE(SrcDataSize));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800347a:	2b01      	cmp	r3, #1
 800347c:	d101      	bne.n	8003482 <HAL_DMA_Start_IT+0x26>
 800347e:	2302      	movs	r3, #2
 8003480:	e048      	b.n	8003514 <HAL_DMA_Start_IT+0xb8>
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2201      	movs	r2, #1
 8003486:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Check DMA channel state */
  if (hdma->State == HAL_DMA_STATE_READY)
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003490:	b2db      	uxtb	r3, r3
 8003492:	2b01      	cmp	r3, #1
 8003494:	d136      	bne.n	8003504 <HAL_DMA_Start_IT+0xa8>
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	2202      	movs	r2, #2
 800349a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	2200      	movs	r2, #0
 80034a2:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Configure the source address, destination address, the data size and clear flags */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, SrcDataSize);
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	687a      	ldr	r2, [r7, #4]
 80034a8:	68b9      	ldr	r1, [r7, #8]
 80034aa:	68f8      	ldr	r0, [r7, #12]
 80034ac:	f000 f9d3 	bl	8003856 <DMA_SetConfig>

    /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
    __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	695a      	ldr	r2, [r3, #20]
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 80034be:	615a      	str	r2, [r3, #20]

    /* Check half transfer complete callback */
    if (hdma->XferHalfCpltCallback != NULL)
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d007      	beq.n	80034d8 <HAL_DMA_Start_IT+0x7c>
    {
      /* If Half Transfer complete callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	695a      	ldr	r2, [r3, #20]
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034d6:	615a      	str	r2, [r3, #20]
    }

    /* Check Half suspend callback */
    if (hdma->XferSuspendCallback != NULL)
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d007      	beq.n	80034f0 <HAL_DMA_Start_IT+0x94>
    {
      /* If Transfer suspend callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	695a      	ldr	r2, [r3, #20]
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80034ee:	615a      	str	r2, [r3, #20]
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	695a      	ldr	r2, [r3, #20]
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f042 0201 	orr.w	r2, r2, #1
 80034fe:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8003500:	2300      	movs	r3, #0
 8003502:	e007      	b.n	8003514 <HAL_DMA_Start_IT+0xb8>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	2240      	movs	r2, #64	@ 0x40
 8003508:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	2200      	movs	r2, #0
 800350e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 8003512:	2301      	movs	r3, #1
}
 8003514:	4618      	mov	r0, r3
 8003516:	3710      	adds	r7, #16
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}

0800351c <HAL_DMA_IRQHandler>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *const hdma)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b086      	sub	sp, #24
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  const DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800352c:	f023 030f 	bic.w	r3, r3, #15
 8003530:	617b      	str	r3, [r7, #20]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800353a:	3b50      	subs	r3, #80	@ 0x50
 800353c:	09db      	lsrs	r3, r3, #7
 800353e:	f003 031f 	and.w	r3, r3, #31
 8003542:	2201      	movs	r2, #1
 8003544:	fa02 f303 	lsl.w	r3, r2, r3
 8003548:	613b      	str	r3, [r7, #16]
  uint32_t global_active_flag_ns = IS_DMA_GLOBAL_ACTIVE_FLAG_NS(p_dma_instance, global_it_flag);
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	68db      	ldr	r3, [r3, #12]
 800354e:	693a      	ldr	r2, [r7, #16]
 8003550:	4013      	ands	r3, r2
 8003552:	60fb      	str	r3, [r7, #12]

  /* Global Interrupt Flag management *********************************************************************************/
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  if ((global_active_flag_s == 0U) && (global_active_flag_ns == 0U))
#else
  if (global_active_flag_ns == 0U)
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2b00      	cmp	r3, #0
 8003558:	f000 813b 	beq.w	80037d2 <HAL_DMA_IRQHandler+0x2b6>
  {
    return; /* the global interrupt flag for the current channel is down , nothing to do */
  }

  /* Data Transfer Error Interrupt management *************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U))
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	691b      	ldr	r3, [r3, #16]
 8003562:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003566:	2b00      	cmp	r3, #0
 8003568:	d011      	beq.n	800358e <HAL_DMA_IRQHandler+0x72>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	695b      	ldr	r3, [r3, #20]
 8003570:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003574:	2b00      	cmp	r3, #0
 8003576:	d00a      	beq.n	800358e <HAL_DMA_IRQHandler+0x72>
    {
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003580:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003586:	f043 0201 	orr.w	r2, r3, #1
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Update Linked-list Error Interrupt management ********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U))
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	691b      	ldr	r3, [r3, #16]
 8003594:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003598:	2b00      	cmp	r3, #0
 800359a:	d011      	beq.n	80035c0 <HAL_DMA_IRQHandler+0xa4>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	695b      	ldr	r3, [r3, #20]
 80035a2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d00a      	beq.n	80035c0 <HAL_DMA_IRQHandler+0xa4>
    {
      /* Clear the update linked-list error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80035b2:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035b8:	f043 0202 	orr.w	r2, r3, #2
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* User Setting Error Interrupt management **************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U))
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	691b      	ldr	r3, [r3, #16]
 80035c6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d011      	beq.n	80035f2 <HAL_DMA_IRQHandler+0xd6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	695b      	ldr	r3, [r3, #20]
 80035d4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d00a      	beq.n	80035f2 <HAL_DMA_IRQHandler+0xd6>
    {
      /* Clear the user setting error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80035e4:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035ea:	f043 0204 	orr.w	r2, r3, #4
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Trigger Overrun Interrupt management *****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U))
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	691b      	ldr	r3, [r3, #16]
 80035f8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d011      	beq.n	8003624 <HAL_DMA_IRQHandler+0x108>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	695b      	ldr	r3, [r3, #20]
 8003606:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800360a:	2b00      	cmp	r3, #0
 800360c:	d00a      	beq.n	8003624 <HAL_DMA_IRQHandler+0x108>
    {
      /* Clear the trigger overrun flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003616:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800361c:	f043 0208 	orr.w	r2, r3, #8
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Half Transfer Complete Interrupt management **********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U))
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	691b      	ldr	r3, [r3, #16]
 800362a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800362e:	2b00      	cmp	r3, #0
 8003630:	d013      	beq.n	800365a <HAL_DMA_IRQHandler+0x13e>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	695b      	ldr	r3, [r3, #20]
 8003638:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800363c:	2b00      	cmp	r3, #0
 800363e:	d00c      	beq.n	800365a <HAL_DMA_IRQHandler+0x13e>
    {
      /* Clear the half transfer flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003648:	60da      	str	r2, [r3, #12]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800364e:	2b00      	cmp	r3, #0
 8003650:	d003      	beq.n	800365a <HAL_DMA_IRQHandler+0x13e>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	4798      	blx	r3
      }
    }
  }

  /* Suspend Transfer Interrupt management ****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U))
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	691b      	ldr	r3, [r3, #16]
 8003660:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003664:	2b00      	cmp	r3, #0
 8003666:	d04c      	beq.n	8003702 <HAL_DMA_IRQHandler+0x1e6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	695b      	ldr	r3, [r3, #20]
 800366e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003672:	2b00      	cmp	r3, #0
 8003674:	d045      	beq.n	8003702 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Clear the block transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800367e:	60da      	str	r2, [r3, #12]

      /* Check DMA channel state */
      if (hdma->State == HAL_DMA_STATE_ABORT)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003686:	b2db      	uxtb	r3, r3
 8003688:	2b04      	cmp	r3, #4
 800368a:	d12e      	bne.n	80036ea <HAL_DMA_IRQHandler+0x1ce>
      {
        /* Disable the suspend transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	695a      	ldr	r2, [r3, #20]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800369a:	615a      	str	r2, [r3, #20]

        /* Reset the channel internal state and reset the FIFO */
        hdma->Instance->CCR |= DMA_CCR_RESET;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	695a      	ldr	r2, [r3, #20]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f042 0202 	orr.w	r2, r2, #2
 80036aa:	615a      	str	r2, [r3, #20]

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_READY;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2201      	movs	r2, #1
 80036b0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d007      	beq.n	80036d0 <HAL_DMA_IRQHandler+0x1b4>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036c4:	2201      	movs	r2, #1
 80036c6:	731a      	strb	r2, [r3, #12]

          /* Clear remaining data size to ensure loading linked-list from memory next start */
          hdma->Instance->CBR1 = 0U;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	2200      	movs	r2, #0
 80036ce:	649a      	str	r2, [r3, #72]	@ 0x48
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2200      	movs	r2, #0
 80036d4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        /* Check transfer abort callback */
        if (hdma->XferAbortCallback != NULL)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d07a      	beq.n	80037d6 <HAL_DMA_IRQHandler+0x2ba>
        {
          /* Transfer abort callback */
          hdma->XferAbortCallback(hdma);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80036e4:	6878      	ldr	r0, [r7, #4]
 80036e6:	4798      	blx	r3
        }

        return;
 80036e8:	e075      	b.n	80037d6 <HAL_DMA_IRQHandler+0x2ba>
      }
      else
      {
        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_SUSPEND;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2205      	movs	r2, #5
 80036ee:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check transfer suspend callback */
        if (hdma->XferSuspendCallback != NULL)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d003      	beq.n	8003702 <HAL_DMA_IRQHandler+0x1e6>
        {
          /* Transfer suspend callback */
          hdma->XferSuspendCallback(hdma);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036fe:	6878      	ldr	r0, [r7, #4]
 8003700:	4798      	blx	r3
      }
    }
  }

  /* Transfer Complete Interrupt management ***************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U))
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	691b      	ldr	r3, [r3, #16]
 8003708:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800370c:	2b00      	cmp	r3, #0
 800370e:	d039      	beq.n	8003784 <HAL_DMA_IRQHandler+0x268>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	695b      	ldr	r3, [r3, #20]
 8003716:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800371a:	2b00      	cmp	r3, #0
 800371c:	d032      	beq.n	8003784 <HAL_DMA_IRQHandler+0x268>
    {
      /* Check DMA channel transfer mode */
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003722:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003726:	2b00      	cmp	r3, #0
 8003728:	d012      	beq.n	8003750 <HAL_DMA_IRQHandler+0x234>
      {
        /* If linked-list transfer */
        if (hdma->Instance->CLLR == 0U)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003730:	2b00      	cmp	r3, #0
 8003732:	d116      	bne.n	8003762 <HAL_DMA_IRQHandler+0x246>
        {
          if (hdma->Instance->CBR1 == 0U)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800373a:	2b00      	cmp	r3, #0
 800373c:	d111      	bne.n	8003762 <HAL_DMA_IRQHandler+0x246>
          {
            /* Update the DMA channel state */
            hdma->State = HAL_DMA_STATE_READY;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2201      	movs	r2, #1
 8003742:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

            /* Update the linked-list queue state */
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800374a:	2201      	movs	r2, #1
 800374c:	731a      	strb	r2, [r3, #12]
 800374e:	e008      	b.n	8003762 <HAL_DMA_IRQHandler+0x246>
        }
      }
      else
      {
        /* If normal transfer */
        if (hdma->Instance->CBR1 == 0U)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003756:	2b00      	cmp	r3, #0
 8003758:	d103      	bne.n	8003762 <HAL_DMA_IRQHandler+0x246>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2201      	movs	r2, #1
 800375e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        }
      }

      /* Clear TC and HT transfer flags */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800376a:	60da      	str	r2, [r3, #12]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2200      	movs	r2, #0
 8003770:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Check transfer complete callback */
      if (hdma->XferCpltCallback != NULL)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003778:	2b00      	cmp	r3, #0
 800377a:	d003      	beq.n	8003784 <HAL_DMA_IRQHandler+0x268>
      {
        /* Channel Transfer Complete callback */
        hdma->XferCpltCallback(hdma);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003780:	6878      	ldr	r0, [r7, #4]
 8003782:	4798      	blx	r3
      }
    }
  }

  /* Manage error case ************************************************************************************************/
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003788:	2b00      	cmp	r3, #0
 800378a:	d025      	beq.n	80037d8 <HAL_DMA_IRQHandler+0x2bc>
  {
    /* Reset the channel internal state and reset the FIFO */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	695a      	ldr	r2, [r3, #20]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f042 0202 	orr.w	r2, r2, #2
 800379a:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2201      	movs	r2, #1
 80037a0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d003      	beq.n	80037b8 <HAL_DMA_IRQHandler+0x29c>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037b4:	2201      	movs	r2, #1
 80037b6:	731a      	strb	r2, [r3, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2200      	movs	r2, #0
 80037bc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Check transfer error callback */
    if (hdma->XferErrorCallback != NULL)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d007      	beq.n	80037d8 <HAL_DMA_IRQHandler+0x2bc>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80037cc:	6878      	ldr	r0, [r7, #4]
 80037ce:	4798      	blx	r3
 80037d0:	e002      	b.n	80037d8 <HAL_DMA_IRQHandler+0x2bc>
    return; /* the global interrupt flag for the current channel is down , nothing to do */
 80037d2:	bf00      	nop
 80037d4:	e000      	b.n	80037d8 <HAL_DMA_IRQHandler+0x2bc>
        return;
 80037d6:	bf00      	nop
    }
  }
}
 80037d8:	3718      	adds	r7, #24
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}

080037de <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes : Specifies the DMA channel secure/privilege attributes.
  *                             This parameter can be a one or a combination of @ref DMA_Channel_Attributes.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *const hdma, uint32_t ChannelAttributes)
{
 80037de:	b480      	push	{r7}
 80037e0:	b085      	sub	sp, #20
 80037e2:	af00      	add	r7, sp, #0
 80037e4:	6078      	str	r0, [r7, #4]
 80037e6:	6039      	str	r1, [r7, #0]
  DMA_TypeDef *p_dma_instance;
  uint32_t channel_idx;

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d101      	bne.n	80037f2 <HAL_DMA_ConfigChannelAttributes+0x14>
  {
    return HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	e02b      	b.n	800384a <HAL_DMA_ConfigChannelAttributes+0x6c>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80037fa:	f023 030f 	bic.w	r3, r3, #15
 80037fe:	60fb      	str	r3, [r7, #12]

  /* Get channel index */
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003808:	3b50      	subs	r3, #80	@ 0x50
 800380a:	09db      	lsrs	r3, r3, #7
 800380c:	f003 031f 	and.w	r3, r3, #31
 8003810:	2201      	movs	r2, #1
 8003812:	fa02 f303 	lsl.w	r3, r2, r3
 8003816:	60bb      	str	r3, [r7, #8]

  /* Check DMA channel privilege attribute management */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) == DMA_CHANNEL_ATTR_PRIV_MASK)
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	f003 0310 	and.w	r3, r3, #16
 800381e:	2b00      	cmp	r3, #0
 8003820:	d012      	beq.n	8003848 <HAL_DMA_ConfigChannelAttributes+0x6a>
  {
    /* Configure DMA channel privilege attribute */
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	f003 0311 	and.w	r3, r3, #17
 8003828:	2b11      	cmp	r3, #17
 800382a:	d106      	bne.n	800383a <HAL_DMA_ConfigChannelAttributes+0x5c>
    {
      p_dma_instance->PRIVCFGR |= channel_idx;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	685a      	ldr	r2, [r3, #4]
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	431a      	orrs	r2, r3
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	605a      	str	r2, [r3, #4]
 8003838:	e006      	b.n	8003848 <HAL_DMA_ConfigChannelAttributes+0x6a>
    }
    else
    {
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	685a      	ldr	r2, [r3, #4]
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	43db      	mvns	r3, r3
 8003842:	401a      	ands	r2, r3
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	605a      	str	r2, [r3, #4]
      hdma->Instance->CTR1 &= (~DMA_CTR1_DSEC);
    }
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  return HAL_OK;
 8003848:	2300      	movs	r3, #0
}
 800384a:	4618      	mov	r0, r3
 800384c:	3714      	adds	r7, #20
 800384e:	46bd      	mov	sp, r7
 8003850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003854:	4770      	bx	lr

08003856 <DMA_SetConfig>:
  */
static void DMA_SetConfig(DMA_HandleTypeDef const *const hdma,
                          uint32_t SrcAddress,
                          uint32_t DstAddress,
                          uint32_t SrcDataSize)
{
 8003856:	b480      	push	{r7}
 8003858:	b085      	sub	sp, #20
 800385a:	af00      	add	r7, sp, #0
 800385c:	60f8      	str	r0, [r7, #12]
 800385e:	60b9      	str	r1, [r7, #8]
 8003860:	607a      	str	r2, [r7, #4]
 8003862:	603b      	str	r3, [r7, #0]
  /* Configure the DMA channel data size */
  MODIFY_REG(hdma->Instance->CBR1, DMA_CBR1_BNDT, (SrcDataSize & DMA_CBR1_BNDT));
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800386a:	0c1b      	lsrs	r3, r3, #16
 800386c:	041b      	lsls	r3, r3, #16
 800386e:	683a      	ldr	r2, [r7, #0]
 8003870:	b291      	uxth	r1, r2
 8003872:	68fa      	ldr	r2, [r7, #12]
 8003874:	6812      	ldr	r2, [r2, #0]
 8003876:	430b      	orrs	r3, r1
 8003878:	6493      	str	r3, [r2, #72]	@ 0x48

  /* Clear all interrupt flags */
  __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 8003882:	60da      	str	r2, [r3, #12]
                       DMA_FLAG_TO);

  /* Configure DMA channel source address */
  hdma->Instance->CSAR = SrcAddress;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	68ba      	ldr	r2, [r7, #8]
 800388a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure DMA channel destination address */
  hdma->Instance->CDAR = DstAddress;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	687a      	ldr	r2, [r7, #4]
 8003892:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003894:	bf00      	nop
 8003896:	3714      	adds	r7, #20
 8003898:	46bd      	mov	sp, r7
 800389a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389e:	4770      	bx	lr

080038a0 <DMA_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_Init(DMA_HandleTypeDef const *const hdma)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b085      	sub	sp, #20
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value *****************************************************************/
  tmpreg = hdma->Init.Priority;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6a1b      	ldr	r3, [r3, #32]
 80038ac:	60fb      	str	r3, [r7, #12]

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	695b      	ldr	r3, [r3, #20]
 80038b4:	f423 0143 	bic.w	r1, r3, #12779520	@ 0xc30000
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	68fa      	ldr	r2, [r7, #12]
 80038be:	430a      	orrs	r2, r1
 80038c0:	615a      	str	r2, [r3, #20]

  /* Prepare DMA Channel Transfer Register (CTR1) value ***************************************************************/
  tmpreg = hdma->Init.DestInc | hdma->Init.DestDataWidth | hdma->Init.SrcInc | hdma->Init.SrcDataWidth;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	695a      	ldr	r2, [r3, #20]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	69db      	ldr	r3, [r3, #28]
 80038ca:	431a      	orrs	r2, r3
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	691b      	ldr	r3, [r3, #16]
 80038d0:	431a      	orrs	r2, r3
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	699b      	ldr	r3, [r3, #24]
 80038d6:	4313      	orrs	r3, r2
 80038d8:	60fb      	str	r3, [r7, #12]

  /* Add parameters specific to GPDMA */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a55      	ldr	r2, [pc, #340]	@ (8003a34 <DMA_Init+0x194>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d022      	beq.n	800392a <DMA_Init+0x8a>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a53      	ldr	r2, [pc, #332]	@ (8003a38 <DMA_Init+0x198>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d01d      	beq.n	800392a <DMA_Init+0x8a>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a52      	ldr	r2, [pc, #328]	@ (8003a3c <DMA_Init+0x19c>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d018      	beq.n	800392a <DMA_Init+0x8a>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a50      	ldr	r2, [pc, #320]	@ (8003a40 <DMA_Init+0x1a0>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d013      	beq.n	800392a <DMA_Init+0x8a>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a4f      	ldr	r2, [pc, #316]	@ (8003a44 <DMA_Init+0x1a4>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d00e      	beq.n	800392a <DMA_Init+0x8a>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a4d      	ldr	r2, [pc, #308]	@ (8003a48 <DMA_Init+0x1a8>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d009      	beq.n	800392a <DMA_Init+0x8a>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a4c      	ldr	r2, [pc, #304]	@ (8003a4c <DMA_Init+0x1ac>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d004      	beq.n	800392a <DMA_Init+0x8a>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a4a      	ldr	r2, [pc, #296]	@ (8003a50 <DMA_Init+0x1b0>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d101      	bne.n	800392e <DMA_Init+0x8e>
 800392a:	2301      	movs	r3, #1
 800392c:	e000      	b.n	8003930 <DMA_Init+0x90>
 800392e:	2300      	movs	r3, #0
 8003930:	2b00      	cmp	r3, #0
 8003932:	d012      	beq.n	800395a <DMA_Init+0xba>
  {
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800393c:	3b01      	subs	r3, #1
 800393e:	051b      	lsls	r3, r3, #20
 8003940:	f003 737c 	and.w	r3, r3, #66060288	@ 0x3f00000
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8003944:	431a      	orrs	r2, r3
               (((hdma->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800394a:	3b01      	subs	r3, #1
 800394c:	011b      	lsls	r3, r3, #4
 800394e:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8003952:	4313      	orrs	r3, r2
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8003954:	68fa      	ldr	r2, [r7, #12]
 8003956:	4313      	orrs	r3, r2
 8003958:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Transfer Register 1 (CTR1) */
#if defined (DMA_CTR1_SSEC)
  MODIFY_REG(hdma->Instance->CTR1, ~(DMA_CTR1_SSEC | DMA_CTR1_DSEC), tmpreg);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003960:	f003 2180 	and.w	r1, r3, #2147516416	@ 0x80008000
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	68fa      	ldr	r2, [r7, #12]
 800396a:	430a      	orrs	r2, r1
 800396c:	641a      	str	r2, [r3, #64]	@ 0x40
#else
  WRITE_REG(hdma->Instance->CTR1, tmpreg);
#endif /* DMA_CTR1_SSEC */

  /* Prepare DMA Channel Transfer Register 2 (CTR2) value *************************************************************/
  tmpreg = hdma->Init.BlkHWRequest | (hdma->Init.Request & DMA_CTR2_REQSEL) | hdma->Init.TransferEventMode;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	689a      	ldr	r2, [r3, #8]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800397a:	431a      	orrs	r2, r3
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003980:	4313      	orrs	r3, r2
 8003982:	60fb      	str	r3, [r7, #12]

  /* Memory to Peripheral Transfer */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	68db      	ldr	r3, [r3, #12]
 8003988:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800398c:	d131      	bne.n	80039f2 <DMA_Init+0x152>
  {
    if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4a28      	ldr	r2, [pc, #160]	@ (8003a34 <DMA_Init+0x194>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d022      	beq.n	80039de <DMA_Init+0x13e>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a26      	ldr	r2, [pc, #152]	@ (8003a38 <DMA_Init+0x198>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d01d      	beq.n	80039de <DMA_Init+0x13e>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a25      	ldr	r2, [pc, #148]	@ (8003a3c <DMA_Init+0x19c>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d018      	beq.n	80039de <DMA_Init+0x13e>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a23      	ldr	r2, [pc, #140]	@ (8003a40 <DMA_Init+0x1a0>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d013      	beq.n	80039de <DMA_Init+0x13e>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a22      	ldr	r2, [pc, #136]	@ (8003a44 <DMA_Init+0x1a4>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d00e      	beq.n	80039de <DMA_Init+0x13e>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a20      	ldr	r2, [pc, #128]	@ (8003a48 <DMA_Init+0x1a8>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d009      	beq.n	80039de <DMA_Init+0x13e>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a1f      	ldr	r2, [pc, #124]	@ (8003a4c <DMA_Init+0x1ac>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d004      	beq.n	80039de <DMA_Init+0x13e>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a1d      	ldr	r2, [pc, #116]	@ (8003a50 <DMA_Init+0x1b0>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d101      	bne.n	80039e2 <DMA_Init+0x142>
 80039de:	2301      	movs	r3, #1
 80039e0:	e000      	b.n	80039e4 <DMA_Init+0x144>
 80039e2:	2300      	movs	r3, #0
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d00d      	beq.n	8003a04 <DMA_Init+0x164>
    {
      tmpreg |= DMA_CTR2_DREQ;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80039ee:	60fb      	str	r3, [r7, #12]
 80039f0:	e008      	b.n	8003a04 <DMA_Init+0x164>
    }
  }
  /* Memory to Memory Transfer */
  else if ((hdma->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	68db      	ldr	r3, [r3, #12]
 80039f6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80039fa:	d103      	bne.n	8003a04 <DMA_Init+0x164>
  {
    tmpreg |= DMA_CTR2_SWREQ;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003a02:	60fb      	str	r3, [r7, #12]
  {
    /* Nothing to do */
  }

  /* Write DMA Channel Transfer Register 2 (CTR2) */
  MODIFY_REG(hdma->Instance->CTR2, (DMA_CTR2_TCEM  | DMA_CTR2_TRIGPOL | DMA_CTR2_TRIGSEL | DMA_CTR2_TRIGM |
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003a0a:	4b12      	ldr	r3, [pc, #72]	@ (8003a54 <DMA_Init+0x1b4>)
 8003a0c:	4013      	ands	r3, r2
 8003a0e:	687a      	ldr	r2, [r7, #4]
 8003a10:	6812      	ldr	r2, [r2, #0]
 8003a12:	68f9      	ldr	r1, [r7, #12]
 8003a14:	430b      	orrs	r3, r1
 8003a16:	6453      	str	r3, [r2, #68]	@ 0x44
                                    DMA_CTR2_BREQ  | DMA_CTR2_DREQ    | DMA_CTR2_SWREQ   | DMA_CTR2_REQSEL), tmpreg);


  /* Write DMA Channel Block Register 1 (CBR1) ************************************************************************/
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write DMA Channel linked-list address register (CLLR) ************************************************************/
  WRITE_REG(hdma->Instance->CLLR, 0U);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	2200      	movs	r2, #0
 8003a26:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8003a28:	bf00      	nop
 8003a2a:	3714      	adds	r7, #20
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a32:	4770      	bx	lr
 8003a34:	40020050 	.word	0x40020050
 8003a38:	400200d0 	.word	0x400200d0
 8003a3c:	40020150 	.word	0x40020150
 8003a40:	400201d0 	.word	0x400201d0
 8003a44:	40020250 	.word	0x40020250
 8003a48:	400202d0 	.word	0x400202d0
 8003a4c:	40020350 	.word	0x40020350
 8003a50:	400203d0 	.word	0x400203d0
 8003a54:	3ce031c0 	.word	0x3ce031c0

08003a58 <HAL_DMAEx_List_Start_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Start_IT(DMA_HandleTypeDef *const hdma)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b086      	sub	sp, #24
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  HAL_DMA_StateTypeDef dma_state;
  uint32_t ccr_value;
  uint32_t cllr_mask;

  /* Check the DMA peripheral handle and the linked-list queue parameters */
  if ((hdma == NULL) || (hdma->LinkedListQueue == NULL))
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d003      	beq.n	8003a6e <HAL_DMAEx_List_Start_IT+0x16>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d101      	bne.n	8003a72 <HAL_DMAEx_List_Start_IT+0x1a>
  {
    return HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	e082      	b.n	8003b78 <HAL_DMAEx_List_Start_IT+0x120>
  }

  /* Check DMA channel state */
  dma_state = hdma->State;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003a78:	75fb      	strb	r3, [r7, #23]
  ccr_value = hdma->Instance->CCR & DMA_CCR_LSM;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	695b      	ldr	r3, [r3, #20]
 8003a80:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a84:	613b      	str	r3, [r7, #16]
  if ((dma_state == HAL_DMA_STATE_READY) || ((dma_state == HAL_DMA_STATE_BUSY) && (ccr_value != 0U)))
 8003a86:	7dfb      	ldrb	r3, [r7, #23]
 8003a88:	2b01      	cmp	r3, #1
 8003a8a:	d005      	beq.n	8003a98 <HAL_DMAEx_List_Start_IT+0x40>
 8003a8c:	7dfb      	ldrb	r3, [r7, #23]
 8003a8e:	2b02      	cmp	r3, #2
 8003a90:	d16a      	bne.n	8003b68 <HAL_DMAEx_List_Start_IT+0x110>
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d067      	beq.n	8003b68 <HAL_DMAEx_List_Start_IT+0x110>
  {
    /* Check DMA channel state is ready */
    if (hdma->State == HAL_DMA_STATE_READY)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003a9e:	b2db      	uxtb	r3, r3
 8003aa0:	2b01      	cmp	r3, #1
 8003aa2:	d157      	bne.n	8003b54 <HAL_DMAEx_List_Start_IT+0xfc>
    {
      /* Process locked */
      __HAL_LOCK(hdma);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8003aaa:	2b01      	cmp	r3, #1
 8003aac:	d101      	bne.n	8003ab2 <HAL_DMAEx_List_Start_IT+0x5a>
 8003aae:	2302      	movs	r3, #2
 8003ab0:	e062      	b.n	8003b78 <HAL_DMAEx_List_Start_IT+0x120>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2201      	movs	r2, #1
 8003ab6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Update the DMA channel and the queue states */
      hdma->State                  = HAL_DMA_STATE_BUSY;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2202      	movs	r2, #2
 8003abe:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_BUSY;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ac6:	2202      	movs	r2, #2
 8003ac8:	731a      	strb	r2, [r3, #12]

      /* Update the DMA channel and the queue error codes */
      hdma->ErrorCode                  = HAL_DMA_ERROR_NONE;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2200      	movs	r2, #0
 8003ace:	659a      	str	r2, [r3, #88]	@ 0x58
      hdma->LinkedListQueue->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	611a      	str	r2, [r3, #16]

      /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	695a      	ldr	r2, [r3, #20]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 8003ae6:	615a      	str	r2, [r3, #20]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d007      	beq.n	8003b00 <HAL_DMAEx_List_Start_IT+0xa8>
      {
        /* If half transfer complete callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	695a      	ldr	r2, [r3, #20]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003afe:	615a      	str	r2, [r3, #20]
      }

      /* Check suspend callback */
      if (hdma->XferSuspendCallback != NULL)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d007      	beq.n	8003b18 <HAL_DMAEx_List_Start_IT+0xc0>
      {
        /* If transfer suspend callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	695a      	ldr	r2, [r3, #20]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003b16:	615a      	str	r2, [r3, #20]
      }

      /* Get CLLR register mask and offset */
      DMA_List_GetCLLRNodeInfo(hdma->LinkedListQueue->Head, &cllr_mask, NULL);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f107 010c 	add.w	r1, r7, #12
 8003b22:	2200      	movs	r2, #0
 8003b24:	4618      	mov	r0, r3
 8003b26:	f000 f82b 	bl	8003b80 <DMA_List_GetCLLRNodeInfo>

      /* Update DMA registers for linked-list transfer */
      hdma->Instance->CLBAR = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLBAR_LBA);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4619      	mov	r1, r3
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681a      	ldr	r2, [r3, #0]
 8003b36:	0c0b      	lsrs	r3, r1, #16
 8003b38:	041b      	lsls	r3, r3, #16
 8003b3a:	6013      	str	r3, [r2, #0]
      hdma->Instance->CLLR  = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLLR_LA) | cllr_mask;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	461a      	mov	r2, r3
 8003b44:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8003b48:	4013      	ands	r3, r2
 8003b4a:	68f9      	ldr	r1, [r7, #12]
 8003b4c:	687a      	ldr	r2, [r7, #4]
 8003b4e:	6812      	ldr	r2, [r2, #0]
 8003b50:	430b      	orrs	r3, r1
 8003b52:	67d3      	str	r3, [r2, #124]	@ 0x7c
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	695a      	ldr	r2, [r3, #20]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f042 0201 	orr.w	r2, r2, #1
 8003b62:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8003b64:	2300      	movs	r3, #0
 8003b66:	e007      	b.n	8003b78 <HAL_DMAEx_List_Start_IT+0x120>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2240      	movs	r2, #64	@ 0x40
 8003b6c:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2200      	movs	r2, #0
 8003b72:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	3718      	adds	r7, #24
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bd80      	pop	{r7, pc}

08003b80 <DMA_List_GetCLLRNodeInfo>:
  * @retval None.
  */
static void DMA_List_GetCLLRNodeInfo(DMA_NodeTypeDef const *const pNode,
                                     uint32_t *const cllr_mask,
                                     uint32_t *const cllr_offset)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b085      	sub	sp, #20
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	60f8      	str	r0, [r7, #12]
 8003b88:	60b9      	str	r1, [r7, #8]
 8003b8a:	607a      	str	r2, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(pNode);

  /* Update CLLR register mask value */
  if (cllr_mask != NULL)
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d002      	beq.n	8003b98 <DMA_List_GetCLLRNodeInfo+0x18>
  {
    *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_ULL;
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	4a06      	ldr	r2, [pc, #24]	@ (8003bb0 <DMA_List_GetCLLRNodeInfo+0x30>)
 8003b96:	601a      	str	r2, [r3, #0]
  }

  /* Update CLLR register offset */
  if (cllr_offset != NULL)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d002      	beq.n	8003ba4 <DMA_List_GetCLLRNodeInfo+0x24>
  {
    *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2205      	movs	r2, #5
 8003ba2:	601a      	str	r2, [r3, #0]
  }
}
 8003ba4:	bf00      	nop
 8003ba6:	3714      	adds	r7, #20
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bae:	4770      	bx	lr
 8003bb0:	f8010000 	.word	0xf8010000

08003bb4 <HAL_FLASH_Program>:
  *         This parameter shall be 32-bit aligned
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint32_t DataAddress)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b086      	sub	sp, #24
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	60f8      	str	r0, [r7, #12]
 8003bbc:	60b9      	str	r1, [r7, #8]
 8003bbe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003bc0:	4b1f      	ldr	r3, [pc, #124]	@ (8003c40 <HAL_FLASH_Program+0x8c>)
 8003bc2:	781b      	ldrb	r3, [r3, #0]
 8003bc4:	2b01      	cmp	r3, #1
 8003bc6:	d101      	bne.n	8003bcc <HAL_FLASH_Program+0x18>
 8003bc8:	2302      	movs	r3, #2
 8003bca:	e034      	b.n	8003c36 <HAL_FLASH_Program+0x82>
 8003bcc:	4b1c      	ldr	r3, [pc, #112]	@ (8003c40 <HAL_FLASH_Program+0x8c>)
 8003bce:	2201      	movs	r2, #1
 8003bd0:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003bd2:	4b1b      	ldr	r3, [pc, #108]	@ (8003c40 <HAL_FLASH_Program+0x8c>)
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003bd8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003bdc:	f000 f870 	bl	8003cc0 <FLASH_WaitForLastOperation>
 8003be0:	4603      	mov	r3, r0
 8003be2:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8003be4:	7dfb      	ldrb	r3, [r7, #23]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d121      	bne.n	8003c2e <HAL_FLASH_Program+0x7a>
  {
    /* Set current operation type */
    pFlash.ProcedureOnGoing = TypeProgram;
 8003bea:	4a15      	ldr	r2, [pc, #84]	@ (8003c40 <HAL_FLASH_Program+0x8c>)
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	6093      	str	r3, [r2, #8]

    /* Access to SECCR1 or NSCR1 depends on operation type */
#if defined(FLASH_SECCR1_LOCK)
    reg_cr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR1) : &(FLASH_NS->NSCR1);
 8003bf0:	4b14      	ldr	r3, [pc, #80]	@ (8003c44 <HAL_FLASH_Program+0x90>)
 8003bf2:	613b      	str	r3, [r7, #16]
#else
    reg_cr = &(FLASH_NS->NSCR1);
#endif /* FLASH_SECCR1_LOCK */

    if ((TypeProgram & (~FLASH_NON_SECURE_MASK)) == FLASH_TYPEPROGRAM_QUADWORD)
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003bfa:	2b01      	cmp	r3, #1
 8003bfc:	d104      	bne.n	8003c08 <HAL_FLASH_Program+0x54>
    {
      /* Program a quad-word (128-bit) at a specified address */
      FLASH_Program_QuadWord(Address, DataAddress);
 8003bfe:	6879      	ldr	r1, [r7, #4]
 8003c00:	68b8      	ldr	r0, [r7, #8]
 8003c02:	f000 f8a3 	bl	8003d4c <FLASH_Program_QuadWord>
 8003c06:	e003      	b.n	8003c10 <HAL_FLASH_Program+0x5c>
    }
    else
    {
      /* Program a burst of 8 quad-words at a specified address */
      FLASH_Program_Burst(Address, DataAddress);
 8003c08:	6879      	ldr	r1, [r7, #4]
 8003c0a:	68b8      	ldr	r0, [r7, #8]
 8003c0c:	f000 f8da 	bl	8003dc4 <FLASH_Program_Burst>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003c10:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003c14:	f000 f854 	bl	8003cc0 <FLASH_WaitForLastOperation>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG (and BWR Bit in Burst programming mode) */
    CLEAR_BIT((*reg_cr), (TypeProgram & ~(FLASH_NON_SECURE_MASK)));
 8003c1c:	693b      	ldr	r3, [r7, #16]
 8003c1e:	681a      	ldr	r2, [r3, #0]
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003c26:	43db      	mvns	r3, r3
 8003c28:	401a      	ands	r2, r3
 8003c2a:	693b      	ldr	r3, [r7, #16]
 8003c2c:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003c2e:	4b04      	ldr	r3, [pc, #16]	@ (8003c40 <HAL_FLASH_Program+0x8c>)
 8003c30:	2200      	movs	r2, #0
 8003c32:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8003c34:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c36:	4618      	mov	r0, r3
 8003c38:	3718      	adds	r7, #24
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}
 8003c3e:	bf00      	nop
 8003c40:	20003870 	.word	0x20003870
 8003c44:	40022028 	.word	0x40022028

08003c48 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	b083      	sub	sp, #12
 8003c4c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->NSCR1, FLASH_NSCR1_LOCK) != 0U)
 8003c52:	4b0b      	ldr	r3, [pc, #44]	@ (8003c80 <HAL_FLASH_Unlock+0x38>)
 8003c54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	da0b      	bge.n	8003c72 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->NSKEYR, FLASH_KEY1);
 8003c5a:	4b09      	ldr	r3, [pc, #36]	@ (8003c80 <HAL_FLASH_Unlock+0x38>)
 8003c5c:	4a09      	ldr	r2, [pc, #36]	@ (8003c84 <HAL_FLASH_Unlock+0x3c>)
 8003c5e:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->NSKEYR, FLASH_KEY2);
 8003c60:	4b07      	ldr	r3, [pc, #28]	@ (8003c80 <HAL_FLASH_Unlock+0x38>)
 8003c62:	4a09      	ldr	r2, [pc, #36]	@ (8003c88 <HAL_FLASH_Unlock+0x40>)
 8003c64:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlocked */
    if (READ_BIT(FLASH->NSCR1, FLASH_NSCR1_LOCK) != 0U)
 8003c66:	4b06      	ldr	r3, [pc, #24]	@ (8003c80 <HAL_FLASH_Unlock+0x38>)
 8003c68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	da01      	bge.n	8003c72 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	71fb      	strb	r3, [r7, #7]
      }
    }
  }
#endif /* __ARM_FEATURE_CMSE */

  return status;
 8003c72:	79fb      	ldrb	r3, [r7, #7]
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	370c      	adds	r7, #12
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7e:	4770      	bx	lr
 8003c80:	40022000 	.word	0x40022000
 8003c84:	45670123 	.word	0x45670123
 8003c88:	cdef89ab 	.word	0xcdef89ab

08003c8c <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b083      	sub	sp, #12
 8003c90:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 8003c92:	2301      	movs	r3, #1
 8003c94:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->NSCR1, FLASH_NSCR1_LOCK);
 8003c96:	4b09      	ldr	r3, [pc, #36]	@ (8003cbc <HAL_FLASH_Lock+0x30>)
 8003c98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c9a:	4a08      	ldr	r2, [pc, #32]	@ (8003cbc <HAL_FLASH_Lock+0x30>)
 8003c9c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003ca0:	6293      	str	r3, [r2, #40]	@ 0x28

  /* verify Flash is locked */
  if (READ_BIT(FLASH->NSCR1, FLASH_NSCR1_LOCK) != 0U)
 8003ca2:	4b06      	ldr	r3, [pc, #24]	@ (8003cbc <HAL_FLASH_Lock+0x30>)
 8003ca4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	da01      	bge.n	8003cae <HAL_FLASH_Lock+0x22>
  {
    status = HAL_OK;
 8003caa:	2300      	movs	r3, #0
 8003cac:	71fb      	strb	r3, [r7, #7]
      status = HAL_OK;
    }
  }
#endif /* __ARM_FEATURE_CMSE */

  return status;
 8003cae:	79fb      	ldrb	r3, [r7, #7]
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	370c      	adds	r7, #12
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cba:	4770      	bx	lr
 8003cbc:	40022000 	.word	0x40022000

08003cc0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout Maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b086      	sub	sp, #24
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY and WDW flags to be reset.
     Even if the FLASH operation fails, the BUSY & WDW flags will be reset, and an error flag will be set */

  uint32_t timeout = HAL_GetTick() + Timeout;
 8003cc8:	f7fd ff94 	bl	8001bf4 <HAL_GetTick>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	4413      	add	r3, r2
 8003cd2:	617b      	str	r3, [r7, #20]
  uint32_t error;
  __IO uint32_t *reg_sr;

  /* Access to SECSR or NSSR registers depends on operation type */
#if defined(FLASH_SECSR_EOP)
  reg_sr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECSR) : &(FLASH_NS->NSSR);
 8003cd4:	4b1b      	ldr	r3, [pc, #108]	@ (8003d44 <FLASH_WaitForLastOperation+0x84>)
 8003cd6:	613b      	str	r3, [r7, #16]
#else
  reg_sr = &(FLASH_NS->NSSR);
#endif /* FLASH_SECSR_EOP */

  while (((*reg_sr) & (FLASH_FLAG_BSY | FLASH_FLAG_WDW)) != 0U)
 8003cd8:	e00b      	b.n	8003cf2 <FLASH_WaitForLastOperation+0x32>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003ce0:	d007      	beq.n	8003cf2 <FLASH_WaitForLastOperation+0x32>
    {
      if (HAL_GetTick() >= timeout)
 8003ce2:	f7fd ff87 	bl	8001bf4 <HAL_GetTick>
 8003ce6:	4602      	mov	r2, r0
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d801      	bhi.n	8003cf2 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8003cee:	2303      	movs	r3, #3
 8003cf0:	e023      	b.n	8003d3a <FLASH_WaitForLastOperation+0x7a>
  while (((*reg_sr) & (FLASH_FLAG_BSY | FLASH_FLAG_WDW)) != 0U)
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d1ed      	bne.n	8003cda <FLASH_WaitForLastOperation+0x1a>
      }
    }
  }

  /* Check FLASH operation error flags */
  error = ((*reg_sr) & FLASH_FLAG_SR_ERRORS);
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	681a      	ldr	r2, [r3, #0]
 8003d02:	f242 03fa 	movw	r3, #8442	@ 0x20fa
 8003d06:	4013      	ands	r3, r2
 8003d08:	60fb      	str	r3, [r7, #12]
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  error |= (FLASH->NSSR & FLASH_FLAG_OPTWERR);
#endif /* __ARM_FEATURE_CMSE */

  if (error != 0U)
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d00a      	beq.n	8003d26 <FLASH_WaitForLastOperation+0x66>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 8003d10:	4b0d      	ldr	r3, [pc, #52]	@ (8003d48 <FLASH_WaitForLastOperation+0x88>)
 8003d12:	685a      	ldr	r2, [r3, #4]
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	4313      	orrs	r3, r2
 8003d18:	4a0b      	ldr	r2, [pc, #44]	@ (8003d48 <FLASH_WaitForLastOperation+0x88>)
 8003d1a:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    (*reg_sr) = error;
 8003d1c:	693b      	ldr	r3, [r7, #16]
 8003d1e:	68fa      	ldr	r2, [r7, #12]
 8003d20:	601a      	str	r2, [r3, #0]
    {
      FLASH->NSSR = FLASH_FLAG_OPTWERR;
    }
#endif /* __ARM_FEATURE_CMSE */

    return HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	e009      	b.n	8003d3a <FLASH_WaitForLastOperation+0x7a>
  }

  /* Check FLASH End of Operation flag  */
  if (((*reg_sr) & FLASH_FLAG_EOP) != 0U)
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f003 0301 	and.w	r3, r3, #1
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d002      	beq.n	8003d38 <FLASH_WaitForLastOperation+0x78>
  {
    /* Clear FLASH End of Operation pending bit */
    (*reg_sr) = FLASH_FLAG_EOP;
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	2201      	movs	r2, #1
 8003d36:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003d38:	2300      	movs	r3, #0
}
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	3718      	adds	r7, #24
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bd80      	pop	{r7, pc}
 8003d42:	bf00      	nop
 8003d44:	40022020 	.word	0x40022020
 8003d48:	20003870 	.word	0x20003870

08003d4c <FLASH_Program_QuadWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  DataAddress Specifies the address of data to be programmed.
  * @retval None
  */
static void FLASH_Program_QuadWord(uint32_t Address, uint32_t DataAddress)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b08b      	sub	sp, #44	@ 0x2c
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
 8003d54:	6039      	str	r1, [r7, #0]
  uint8_t index = 4;
 8003d56:	2304      	movs	r3, #4
 8003d58:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t *dest_addr = (uint32_t *)Address;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	623b      	str	r3, [r7, #32]
  uint32_t *src_addr  = (uint32_t *)DataAddress;
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Access to SECCR1 or NSCR1 registers depends on operation type */
#if defined(FLASH_SECCR1_LOCK)
  reg_cr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR1) : &(FLASH_NS->NSCR1);
 8003d64:	4b16      	ldr	r3, [pc, #88]	@ (8003dc0 <FLASH_Program_QuadWord+0x74>)
 8003d66:	61bb      	str	r3, [r7, #24]
#else
  reg_cr = &(FLASH_NS->NSCR1);
#endif /* FLASH_SECCR1_LOCK */

  /* Set PG bit */
  SET_BIT((*reg_cr), FLASH_NSCR1_PG);
 8003d68:	69bb      	ldr	r3, [r7, #24]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f043 0201 	orr.w	r2, r3, #1
 8003d70:	69bb      	ldr	r3, [r7, #24]
 8003d72:	601a      	str	r2, [r3, #0]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003d74:	f3ef 8310 	mrs	r3, PRIMASK
 8003d78:	613b      	str	r3, [r7, #16]
  return(result);
 8003d7a:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section: Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 8003d7c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8003d7e:	b672      	cpsid	i
}
 8003d80:	bf00      	nop
  __disable_irq();

  /* Program the quad-word */
  do
  {
    *dest_addr = *src_addr;
 8003d82:	69fb      	ldr	r3, [r7, #28]
 8003d84:	681a      	ldr	r2, [r3, #0]
 8003d86:	6a3b      	ldr	r3, [r7, #32]
 8003d88:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8003d8a:	6a3b      	ldr	r3, [r7, #32]
 8003d8c:	3304      	adds	r3, #4
 8003d8e:	623b      	str	r3, [r7, #32]
    src_addr++;
 8003d90:	69fb      	ldr	r3, [r7, #28]
 8003d92:	3304      	adds	r3, #4
 8003d94:	61fb      	str	r3, [r7, #28]
    index--;
 8003d96:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003d9a:	3b01      	subs	r3, #1
 8003d9c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  } while (index != 0U);
 8003da0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d1ec      	bne.n	8003d82 <FLASH_Program_QuadWord+0x36>
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	f383 8810 	msr	PRIMASK, r3
}
 8003db2:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8003db4:	bf00      	nop
 8003db6:	372c      	adds	r7, #44	@ 0x2c
 8003db8:	46bd      	mov	sp, r7
 8003dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbe:	4770      	bx	lr
 8003dc0:	40022028 	.word	0x40022028

08003dc4 <FLASH_Program_Burst>:
  * @param  Address Specifies the address to be programmed.
  * @param  DataAddress Specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Burst(uint32_t Address, uint32_t DataAddress)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	b08b      	sub	sp, #44	@ 0x2c
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
 8003dcc:	6039      	str	r1, [r7, #0]
  uint8_t burst_index = FLASH_NB_WORDS_IN_BURST;
 8003dce:	2320      	movs	r3, #32
 8003dd0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t *dest_addr = (uint32_t *)Address;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	623b      	str	r3, [r7, #32]
  uint32_t *src_addr = (uint32_t *)DataAddress;
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Access to SECCR1 or NSCR1 registers depends on operation type */
#if defined(FLASH_SECCR1_LOCK)
  reg_cr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR1) : &(FLASH_NS->NSCR1);
 8003ddc:	4b17      	ldr	r3, [pc, #92]	@ (8003e3c <FLASH_Program_Burst+0x78>)
 8003dde:	61bb      	str	r3, [r7, #24]
#else
  reg_cr = &(FLASH_NS->NSCR1);
#endif /* FLASH_SECCR1_LOCK */

  /* Set PG and BWR bits */
  SET_BIT((*reg_cr), (FLASH_NSCR1_PG | FLASH_NSCR1_BWR));
 8003de0:	69bb      	ldr	r3, [r7, #24]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003de8:	f043 0301 	orr.w	r3, r3, #1
 8003dec:	69ba      	ldr	r2, [r7, #24]
 8003dee:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003df0:	f3ef 8310 	mrs	r3, PRIMASK
 8003df4:	613b      	str	r3, [r7, #16]
  return(result);
 8003df6:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section: Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 8003df8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8003dfa:	b672      	cpsid	i
}
 8003dfc:	bf00      	nop
  __disable_irq();

  /* Program the burst */
  do
  {
    *dest_addr = *src_addr;
 8003dfe:	69fb      	ldr	r3, [r7, #28]
 8003e00:	681a      	ldr	r2, [r3, #0]
 8003e02:	6a3b      	ldr	r3, [r7, #32]
 8003e04:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8003e06:	6a3b      	ldr	r3, [r7, #32]
 8003e08:	3304      	adds	r3, #4
 8003e0a:	623b      	str	r3, [r7, #32]
    src_addr++;
 8003e0c:	69fb      	ldr	r3, [r7, #28]
 8003e0e:	3304      	adds	r3, #4
 8003e10:	61fb      	str	r3, [r7, #28]
    burst_index--;
 8003e12:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003e16:	3b01      	subs	r3, #1
 8003e18:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  } while (burst_index != 0U);
 8003e1c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d1ec      	bne.n	8003dfe <FLASH_Program_Burst+0x3a>
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	f383 8810 	msr	PRIMASK, r3
}
 8003e2e:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8003e30:	bf00      	nop
 8003e32:	372c      	adds	r7, #44	@ 0x2c
 8003e34:	46bd      	mov	sp, r7
 8003e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3a:	4770      	bx	lr
 8003e3c:	40022028 	.word	0x40022028

08003e40 <HAL_FLASHEx_Erase>:
  *         the pages have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b086      	sub	sp, #24
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
 8003e48:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003e4a:	4b31      	ldr	r3, [pc, #196]	@ (8003f10 <HAL_FLASHEx_Erase+0xd0>)
 8003e4c:	781b      	ldrb	r3, [r3, #0]
 8003e4e:	2b01      	cmp	r3, #1
 8003e50:	d101      	bne.n	8003e56 <HAL_FLASHEx_Erase+0x16>
 8003e52:	2302      	movs	r3, #2
 8003e54:	e058      	b.n	8003f08 <HAL_FLASHEx_Erase+0xc8>
 8003e56:	4b2e      	ldr	r3, [pc, #184]	@ (8003f10 <HAL_FLASHEx_Erase+0xd0>)
 8003e58:	2201      	movs	r2, #1
 8003e5a:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003e5c:	4b2c      	ldr	r3, [pc, #176]	@ (8003f10 <HAL_FLASHEx_Erase+0xd0>)
 8003e5e:	2200      	movs	r2, #0
 8003e60:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003e62:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003e66:	f7ff ff2b 	bl	8003cc0 <FLASH_WaitForLastOperation>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8003e6e:	7dfb      	ldrb	r3, [r7, #23]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d145      	bne.n	8003f00 <HAL_FLASHEx_Erase+0xc0>
  {
    /* Current operation type */
    pFlash.ProcedureOnGoing = pEraseInit->TypeErase;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a25      	ldr	r2, [pc, #148]	@ (8003f10 <HAL_FLASHEx_Erase+0xd0>)
 8003e7a:	6093      	str	r3, [r2, #8]

    /* Access to SECCR1 or NSCR1 depends on operation type */
#if defined(FLASH_SECCR1_LOCK)
    reg_cr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR1) : &(FLASH_NS->NSCR1);
 8003e7c:	4b25      	ldr	r3, [pc, #148]	@ (8003f14 <HAL_FLASHEx_Erase+0xd4>)
 8003e7e:	60fb      	str	r3, [r7, #12]
#else
    reg_cr = &(FLASH_NS->NSCR1);
#endif /* FLASH_SECCR1_LOCK */

    if ((pEraseInit->TypeErase & (~FLASH_NON_SECURE_MASK)) == FLASH_TYPEERASE_MASSERASE)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003e88:	2b04      	cmp	r3, #4
 8003e8a:	d108      	bne.n	8003e9e <HAL_FLASHEx_Erase+0x5e>
    {
      /* Mass erase to be done */
      FLASH_MassErase();
 8003e8c:	f000 f844 	bl	8003f18 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003e90:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003e94:	f7ff ff14 	bl	8003cc0 <FLASH_WaitForLastOperation>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	75fb      	strb	r3, [r7, #23]
 8003e9c:	e022      	b.n	8003ee4 <HAL_FLASHEx_Erase+0xa4>
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003ea4:	601a      	str	r2, [r3, #0]

      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	613b      	str	r3, [r7, #16]
 8003eac:	e012      	b.n	8003ed4 <HAL_FLASHEx_Erase+0x94>
      {
        /* Start erase page */
        FLASH_PageErase(page_index);
 8003eae:	6938      	ldr	r0, [r7, #16]
 8003eb0:	f000 f848 	bl	8003f44 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003eb4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003eb8:	f7ff ff02 	bl	8003cc0 <FLASH_WaitForLastOperation>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	75fb      	strb	r3, [r7, #23]

        if (status != HAL_OK)
 8003ec0:	7dfb      	ldrb	r3, [r7, #23]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d003      	beq.n	8003ece <HAL_FLASHEx_Erase+0x8e>
        {
          /* In case of error, stop erase procedure and return the faulty page */
          *PageError = page_index;
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	693a      	ldr	r2, [r7, #16]
 8003eca:	601a      	str	r2, [r3, #0]
          break;
 8003ecc:	e00a      	b.n	8003ee4 <HAL_FLASHEx_Erase+0xa4>
      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	3301      	adds	r3, #1
 8003ed2:	613b      	str	r3, [r7, #16]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	685a      	ldr	r2, [r3, #4]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	4413      	add	r3, r2
 8003ede:	693a      	ldr	r2, [r7, #16]
 8003ee0:	429a      	cmp	r2, r3
 8003ee2:	d3e4      	bcc.n	8003eae <HAL_FLASHEx_Erase+0x6e>
        }
      }
    }

    /* If the erase operation is completed, disable the associated bits */
    CLEAR_BIT((*reg_cr), (((pEraseInit->TypeErase) & (~(FLASH_NON_SECURE_MASK))) | FLASH_NSCR1_PNB));
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681a      	ldr	r2, [r3, #0]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003ef0:	f423 737e 	bic.w	r3, r3, #1016	@ 0x3f8
 8003ef4:	f443 737e 	orr.w	r3, r3, #1016	@ 0x3f8
 8003ef8:	43db      	mvns	r3, r3
 8003efa:	401a      	ands	r2, r3
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003f00:	4b03      	ldr	r3, [pc, #12]	@ (8003f10 <HAL_FLASHEx_Erase+0xd0>)
 8003f02:	2200      	movs	r2, #0
 8003f04:	701a      	strb	r2, [r3, #0]

  return status;
 8003f06:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	3718      	adds	r7, #24
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bd80      	pop	{r7, pc}
 8003f10:	20003870 	.word	0x20003870
 8003f14:	40022028 	.word	0x40022028

08003f18 <FLASH_MassErase>:
/**
  * @brief  Mass erase of FLASH memory.
  * @retval None
  */
static void FLASH_MassErase()
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b083      	sub	sp, #12
 8003f1c:	af00      	add	r7, sp, #0
  __IO uint32_t *reg_cr;


  /* Access to SECCR1 or NSCR1 registers depends on operation type */
#if defined(FLASH_SECCR1_LOCK)
  reg_cr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR1) : &(FLASH_NS->NSCR1);
 8003f1e:	4b08      	ldr	r3, [pc, #32]	@ (8003f40 <FLASH_MassErase+0x28>)
 8003f20:	607b      	str	r3, [r7, #4]
#else
  reg_cr = &(FLASH_NS->NSCR1);
#endif /* FLASH_SECCR1_LOCK */

  /* Set the Mass Erase Bit for the bank 1 and proceed to erase */
  SET_BIT((*reg_cr), FLASH_NSCR1_MER | FLASH_NSCR1_STRT);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f2a:	f043 0304 	orr.w	r3, r3, #4
 8003f2e:	687a      	ldr	r2, [r7, #4]
 8003f30:	6013      	str	r3, [r2, #0]
}
 8003f32:	bf00      	nop
 8003f34:	370c      	adds	r7, #12
 8003f36:	46bd      	mov	sp, r7
 8003f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3c:	4770      	bx	lr
 8003f3e:	bf00      	nop
 8003f40:	40022028 	.word	0x40022028

08003f44 <FLASH_PageErase>:
  * @param  Page FLASH page to erase
  *         This parameter must be a value between 0 and (max number of pages in the bank - 1)
  * @retval None
  */
void FLASH_PageErase(uint32_t Page)
{
 8003f44:	b480      	push	{r7}
 8003f46:	b085      	sub	sp, #20
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_PAGE(Page));

  /* Access to SECCR1 or NSCR1 registers depends on operation type */
#if defined(FLASH_SECCR1_LOCK)
  reg_cr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR1) : &(FLASH_NS->NSCR1);
 8003f4c:	4b0b      	ldr	r3, [pc, #44]	@ (8003f7c <FLASH_PageErase+0x38>)
 8003f4e:	60fb      	str	r3, [r7, #12]
  reg_cr = &(FLASH_NS->NSCR1);
#endif /* FLASH_SECCR1_LOCK */


  /* Proceed to erase the page */
  MODIFY_REG((*reg_cr), (FLASH_NSCR1_PNB | FLASH_NSCR1_PER | FLASH_NSCR1_STRT), ((Page << FLASH_NSCR1_PNB_Pos) | FLASH_NSCR1_PER | FLASH_NSCR1_STRT));
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f423 3381 	bic.w	r3, r3, #66048	@ 0x10200
 8003f58:	f423 73fd 	bic.w	r3, r3, #506	@ 0x1fa
 8003f5c:	687a      	ldr	r2, [r7, #4]
 8003f5e:	00d2      	lsls	r2, r2, #3
 8003f60:	4313      	orrs	r3, r2
 8003f62:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f66:	f043 0302 	orr.w	r3, r3, #2
 8003f6a:	68fa      	ldr	r2, [r7, #12]
 8003f6c:	6013      	str	r3, [r2, #0]
}
 8003f6e:	bf00      	nop
 8003f70:	3714      	adds	r7, #20
 8003f72:	46bd      	mov	sp, r7
 8003f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f78:	4770      	bx	lr
 8003f7a:	bf00      	nop
 8003f7c:	40022028 	.word	0x40022028

08003f80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b087      	sub	sp, #28
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
 8003f88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003f8e:	e130      	b.n	80041f2 <HAL_GPIO_Init+0x272>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	681a      	ldr	r2, [r3, #0]
 8003f94:	2101      	movs	r1, #1
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	fa01 f303 	lsl.w	r3, r1, r3
 8003f9c:	4013      	ands	r3, r2
 8003f9e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	f000 8122 	beq.w	80041ec <HAL_GPIO_Init+0x26c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	f003 0303 	and.w	r3, r3, #3
 8003fb0:	2b01      	cmp	r3, #1
 8003fb2:	d005      	beq.n	8003fc0 <HAL_GPIO_Init+0x40>
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	f003 0303 	and.w	r3, r3, #3
 8003fbc:	2b02      	cmp	r3, #2
 8003fbe:	d130      	bne.n	8004022 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	689b      	ldr	r3, [r3, #8]
 8003fc4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	005b      	lsls	r3, r3, #1
 8003fca:	2203      	movs	r2, #3
 8003fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd0:	43db      	mvns	r3, r3
 8003fd2:	693a      	ldr	r2, [r7, #16]
 8003fd4:	4013      	ands	r3, r2
 8003fd6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	68da      	ldr	r2, [r3, #12]
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	005b      	lsls	r3, r3, #1
 8003fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe4:	693a      	ldr	r2, [r7, #16]
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	693a      	ldr	r2, [r7, #16]
 8003fee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8003ffe:	43db      	mvns	r3, r3
 8004000:	693a      	ldr	r2, [r7, #16]
 8004002:	4013      	ands	r3, r2
 8004004:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	091b      	lsrs	r3, r3, #4
 800400c:	f003 0201 	and.w	r2, r3, #1
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	fa02 f303 	lsl.w	r3, r2, r3
 8004016:	693a      	ldr	r2, [r7, #16]
 8004018:	4313      	orrs	r3, r2
 800401a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	693a      	ldr	r2, [r7, #16]
 8004020:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	f003 0303 	and.w	r3, r3, #3
 800402a:	2b03      	cmp	r3, #3
 800402c:	d017      	beq.n	800405e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	68db      	ldr	r3, [r3, #12]
 8004032:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8004034:	697b      	ldr	r3, [r7, #20]
 8004036:	005b      	lsls	r3, r3, #1
 8004038:	2203      	movs	r2, #3
 800403a:	fa02 f303 	lsl.w	r3, r2, r3
 800403e:	43db      	mvns	r3, r3
 8004040:	693a      	ldr	r2, [r7, #16]
 8004042:	4013      	ands	r3, r2
 8004044:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	689a      	ldr	r2, [r3, #8]
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	005b      	lsls	r3, r3, #1
 800404e:	fa02 f303 	lsl.w	r3, r2, r3
 8004052:	693a      	ldr	r2, [r7, #16]
 8004054:	4313      	orrs	r3, r2
 8004056:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	693a      	ldr	r2, [r7, #16]
 800405c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	f003 0303 	and.w	r3, r3, #3
 8004066:	2b02      	cmp	r3, #2
 8004068:	d123      	bne.n	80040b2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	08da      	lsrs	r2, r3, #3
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	3208      	adds	r2, #8
 8004072:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004076:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8004078:	697b      	ldr	r3, [r7, #20]
 800407a:	f003 0307 	and.w	r3, r3, #7
 800407e:	009b      	lsls	r3, r3, #2
 8004080:	220f      	movs	r2, #15
 8004082:	fa02 f303 	lsl.w	r3, r2, r3
 8004086:	43db      	mvns	r3, r3
 8004088:	693a      	ldr	r2, [r7, #16]
 800408a:	4013      	ands	r3, r2
 800408c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	691a      	ldr	r2, [r3, #16]
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	f003 0307 	and.w	r3, r3, #7
 8004098:	009b      	lsls	r3, r3, #2
 800409a:	fa02 f303 	lsl.w	r3, r2, r3
 800409e:	693a      	ldr	r2, [r7, #16]
 80040a0:	4313      	orrs	r3, r2
 80040a2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80040a4:	697b      	ldr	r3, [r7, #20]
 80040a6:	08da      	lsrs	r2, r3, #3
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	3208      	adds	r2, #8
 80040ac:	6939      	ldr	r1, [r7, #16]
 80040ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 80040b8:	697b      	ldr	r3, [r7, #20]
 80040ba:	005b      	lsls	r3, r3, #1
 80040bc:	2203      	movs	r2, #3
 80040be:	fa02 f303 	lsl.w	r3, r2, r3
 80040c2:	43db      	mvns	r3, r3
 80040c4:	693a      	ldr	r2, [r7, #16]
 80040c6:	4013      	ands	r3, r2
 80040c8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	f003 0203 	and.w	r2, r3, #3
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	005b      	lsls	r3, r3, #1
 80040d6:	fa02 f303 	lsl.w	r3, r2, r3
 80040da:	693a      	ldr	r2, [r7, #16]
 80040dc:	4313      	orrs	r3, r2
 80040de:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	693a      	ldr	r2, [r7, #16]
 80040e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d07c      	beq.n	80041ec <HAL_GPIO_Init+0x26c>
      {
        temp = EXTI->EXTICR[position >> 2U];
 80040f2:	4a47      	ldr	r2, [pc, #284]	@ (8004210 <HAL_GPIO_Init+0x290>)
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	089b      	lsrs	r3, r3, #2
 80040f8:	3318      	adds	r3, #24
 80040fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040fe:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	f003 0303 	and.w	r3, r3, #3
 8004106:	00db      	lsls	r3, r3, #3
 8004108:	220f      	movs	r2, #15
 800410a:	fa02 f303 	lsl.w	r3, r2, r3
 800410e:	43db      	mvns	r3, r3
 8004110:	693a      	ldr	r2, [r7, #16]
 8004112:	4013      	ands	r3, r2
 8004114:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	0a9a      	lsrs	r2, r3, #10
 800411a:	4b3e      	ldr	r3, [pc, #248]	@ (8004214 <HAL_GPIO_Init+0x294>)
 800411c:	4013      	ands	r3, r2
 800411e:	697a      	ldr	r2, [r7, #20]
 8004120:	f002 0203 	and.w	r2, r2, #3
 8004124:	00d2      	lsls	r2, r2, #3
 8004126:	4093      	lsls	r3, r2
 8004128:	693a      	ldr	r2, [r7, #16]
 800412a:	4313      	orrs	r3, r2
 800412c:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 800412e:	4938      	ldr	r1, [pc, #224]	@ (8004210 <HAL_GPIO_Init+0x290>)
 8004130:	697b      	ldr	r3, [r7, #20]
 8004132:	089b      	lsrs	r3, r3, #2
 8004134:	3318      	adds	r3, #24
 8004136:	693a      	ldr	r2, [r7, #16]
 8004138:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800413c:	4b34      	ldr	r3, [pc, #208]	@ (8004210 <HAL_GPIO_Init+0x290>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	43db      	mvns	r3, r3
 8004146:	693a      	ldr	r2, [r7, #16]
 8004148:	4013      	ands	r3, r2
 800414a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004154:	2b00      	cmp	r3, #0
 8004156:	d003      	beq.n	8004160 <HAL_GPIO_Init+0x1e0>
        {
          temp |= iocurrent;
 8004158:	693a      	ldr	r2, [r7, #16]
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	4313      	orrs	r3, r2
 800415e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004160:	4a2b      	ldr	r2, [pc, #172]	@ (8004210 <HAL_GPIO_Init+0x290>)
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004166:	4b2a      	ldr	r3, [pc, #168]	@ (8004210 <HAL_GPIO_Init+0x290>)
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	43db      	mvns	r3, r3
 8004170:	693a      	ldr	r2, [r7, #16]
 8004172:	4013      	ands	r3, r2
 8004174:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800417e:	2b00      	cmp	r3, #0
 8004180:	d003      	beq.n	800418a <HAL_GPIO_Init+0x20a>
        {
          temp |= iocurrent;
 8004182:	693a      	ldr	r2, [r7, #16]
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	4313      	orrs	r3, r2
 8004188:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800418a:	4a21      	ldr	r2, [pc, #132]	@ (8004210 <HAL_GPIO_Init+0x290>)
 800418c:	693b      	ldr	r3, [r7, #16]
 800418e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004190:	4b1f      	ldr	r3, [pc, #124]	@ (8004210 <HAL_GPIO_Init+0x290>)
 8004192:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004196:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	43db      	mvns	r3, r3
 800419c:	693a      	ldr	r2, [r7, #16]
 800419e:	4013      	ands	r3, r2
 80041a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d003      	beq.n	80041b6 <HAL_GPIO_Init+0x236>
        {
          temp |= iocurrent;
 80041ae:	693a      	ldr	r2, [r7, #16]
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	4313      	orrs	r3, r2
 80041b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80041b6:	4a16      	ldr	r2, [pc, #88]	@ (8004210 <HAL_GPIO_Init+0x290>)
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        temp = EXTI->IMR1;
 80041be:	4b14      	ldr	r3, [pc, #80]	@ (8004210 <HAL_GPIO_Init+0x290>)
 80041c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80041c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	43db      	mvns	r3, r3
 80041ca:	693a      	ldr	r2, [r7, #16]
 80041cc:	4013      	ands	r3, r2
 80041ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d003      	beq.n	80041e4 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80041dc:	693a      	ldr	r2, [r7, #16]
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	4313      	orrs	r3, r2
 80041e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80041e4:	4a0a      	ldr	r2, [pc, #40]	@ (8004210 <HAL_GPIO_Init+0x290>)
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	3301      	adds	r3, #1
 80041f0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	681a      	ldr	r2, [r3, #0]
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	fa22 f303 	lsr.w	r3, r2, r3
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	f47f aec7 	bne.w	8003f90 <HAL_GPIO_Init+0x10>
  }
}
 8004202:	bf00      	nop
 8004204:	bf00      	nop
 8004206:	371c      	adds	r7, #28
 8004208:	46bd      	mov	sp, r7
 800420a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420e:	4770      	bx	lr
 8004210:	46022000 	.word	0x46022000
 8004214:	002f7f7f 	.word	0x002f7f7f

08004218 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004218:	b480      	push	{r7}
 800421a:	b083      	sub	sp, #12
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
 8004220:	460b      	mov	r3, r1
 8004222:	807b      	strh	r3, [r7, #2]
 8004224:	4613      	mov	r3, r2
 8004226:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004228:	787b      	ldrb	r3, [r7, #1]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d003      	beq.n	8004236 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800422e:	887a      	ldrh	r2, [r7, #2]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004234:	e002      	b.n	800423c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004236:	887a      	ldrh	r2, [r7, #2]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800423c:	bf00      	nop
 800423e:	370c      	adds	r7, #12
 8004240:	46bd      	mov	sp, r7
 8004242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004246:	4770      	bx	lr

08004248 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b082      	sub	sp, #8
 800424c:	af00      	add	r7, sp, #0
 800424e:	4603      	mov	r3, r0
 8004250:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00U)
 8004252:	4b0f      	ldr	r3, [pc, #60]	@ (8004290 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8004254:	68da      	ldr	r2, [r3, #12]
 8004256:	88fb      	ldrh	r3, [r7, #6]
 8004258:	4013      	ands	r3, r2
 800425a:	2b00      	cmp	r3, #0
 800425c:	d006      	beq.n	800426c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 800425e:	4a0c      	ldr	r2, [pc, #48]	@ (8004290 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8004260:	88fb      	ldrh	r3, [r7, #6]
 8004262:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8004264:	88fb      	ldrh	r3, [r7, #6]
 8004266:	4618      	mov	r0, r3
 8004268:	f000 f814 	bl	8004294 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00U)
 800426c:	4b08      	ldr	r3, [pc, #32]	@ (8004290 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 800426e:	691a      	ldr	r2, [r3, #16]
 8004270:	88fb      	ldrh	r3, [r7, #6]
 8004272:	4013      	ands	r3, r2
 8004274:	2b00      	cmp	r3, #0
 8004276:	d006      	beq.n	8004286 <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8004278:	4a05      	ldr	r2, [pc, #20]	@ (8004290 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 800427a:	88fb      	ldrh	r3, [r7, #6]
 800427c:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 800427e:	88fb      	ldrh	r3, [r7, #6]
 8004280:	4618      	mov	r0, r3
 8004282:	f000 f812 	bl	80042aa <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8004286:	bf00      	nop
 8004288:	3708      	adds	r7, #8
 800428a:	46bd      	mov	sp, r7
 800428c:	bd80      	pop	{r7, pc}
 800428e:	bf00      	nop
 8004290:	46022000 	.word	0x46022000

08004294 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line rising detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8004294:	b480      	push	{r7}
 8004296:	b083      	sub	sp, #12
 8004298:	af00      	add	r7, sp, #0
 800429a:	4603      	mov	r3, r0
 800429c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 800429e:	bf00      	nop
 80042a0:	370c      	adds	r7, #12
 80042a2:	46bd      	mov	sp, r7
 80042a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a8:	4770      	bx	lr

080042aa <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line falling detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 80042aa:	b480      	push	{r7}
 80042ac:	b083      	sub	sp, #12
 80042ae:	af00      	add	r7, sp, #0
 80042b0:	4603      	mov	r3, r0
 80042b2:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 80042b4:	bf00      	nop
 80042b6:	370c      	adds	r7, #12
 80042b8:	46bd      	mov	sp, r7
 80042ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042be:	4770      	bx	lr

080042c0 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 80042c0:	b480      	push	{r7}
 80042c2:	b085      	sub	sp, #20
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80042c8:	2300      	movs	r3, #0
 80042ca:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 80042cc:	4b0b      	ldr	r3, [pc, #44]	@ (80042fc <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f003 0301 	and.w	r3, r3, #1
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d002      	beq.n	80042de <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 80042d8:	2301      	movs	r3, #1
 80042da:	73fb      	strb	r3, [r7, #15]
 80042dc:	e007      	b.n	80042ee <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 80042de:	4b07      	ldr	r3, [pc, #28]	@ (80042fc <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f023 0204 	bic.w	r2, r3, #4
 80042e6:	4905      	ldr	r1, [pc, #20]	@ (80042fc <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	4313      	orrs	r3, r2
 80042ec:	600b      	str	r3, [r1, #0]
  }

  return status;
 80042ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	3714      	adds	r7, #20
 80042f4:	46bd      	mov	sp, r7
 80042f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fa:	4770      	bx	lr
 80042fc:	40030400 	.word	0x40030400

08004300 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8004300:	b480      	push	{r7}
 8004302:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8004304:	4b05      	ldr	r3, [pc, #20]	@ (800431c <HAL_ICACHE_Enable+0x1c>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a04      	ldr	r2, [pc, #16]	@ (800431c <HAL_ICACHE_Enable+0x1c>)
 800430a:	f043 0301 	orr.w	r3, r3, #1
 800430e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8004310:	2300      	movs	r3, #0
}
 8004312:	4618      	mov	r0, r3
 8004314:	46bd      	mov	sp, r7
 8004316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431a:	4770      	bx	lr
 800431c:	40030400 	.word	0x40030400

08004320 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b084      	sub	sp, #16
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d101      	bne.n	8004332 <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 800432e:	2301      	movs	r3, #1
 8004330:	e0cd      	b.n	80044ce <HAL_LPTIM_Init+0x1ae>
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(hlptim->Init.Period));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	2b01      	cmp	r3, #1
  }
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));
  assert_param(IS_LPTIM_REPETITION(hlptim->Init.RepetitionCounter));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 800433e:	b2db      	uxtb	r3, r3
 8004340:	2b00      	cmp	r3, #0
 8004342:	d106      	bne.n	8004352 <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2200      	movs	r2, #0
 8004348:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 800434c:	6878      	ldr	r0, [r7, #4]
 800434e:	f7fc ffcf 	bl	80012f0 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2202      	movs	r2, #2
 8004356:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	691a      	ldr	r2, [r3, #16]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f042 0201 	orr.w	r2, r2, #1
 8004368:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004372:	605a      	str	r2, [r3, #4]

  /* Set the repetition counter */
  __HAL_LPTIM_REPETITIONCOUNTER_SET(hlptim, hlptim->Init.RepetitionCounter);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	687a      	ldr	r2, [r7, #4]
 800437a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800437c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Wait for the completion of the write operation to the LPTIM_RCR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_REPOK) == HAL_TIMEOUT)
 800437e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004382:	6878      	ldr	r0, [r7, #4]
 8004384:	f000 f93a 	bl	80045fc <LPTIM_WaitForFlag>
 8004388:	4603      	mov	r3, r0
 800438a:	2b03      	cmp	r3, #3
 800438c:	d101      	bne.n	8004392 <HAL_LPTIM_Init+0x72>
  {
    return HAL_TIMEOUT;
 800438e:	2303      	movs	r3, #3
 8004390:	e09d      	b.n	80044ce <HAL_LPTIM_Init+0x1ae>
  }


  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	2210      	movs	r2, #16
 8004398:	605a      	str	r2, [r3, #4]

  /* Set LPTIM Period */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, hlptim->Init.Period);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	687a      	ldr	r2, [r7, #4]
 80043a0:	6a12      	ldr	r2, [r2, #32]
 80043a2:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 80043a4:	2110      	movs	r1, #16
 80043a6:	6878      	ldr	r0, [r7, #4]
 80043a8:	f000 f928 	bl	80045fc <LPTIM_WaitForFlag>
 80043ac:	4603      	mov	r3, r0
 80043ae:	2b03      	cmp	r3, #3
 80043b0:	d101      	bne.n	80043b6 <HAL_LPTIM_Init+0x96>
  {
    return HAL_TIMEOUT;
 80043b2:	2303      	movs	r3, #3
 80043b4:	e08b      	b.n	80044ce <HAL_LPTIM_Init+0x1ae>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043bc:	f003 0302 	and.w	r3, r3, #2
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d10e      	bne.n	80043e2 <HAL_LPTIM_Init+0xc2>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d107      	bne.n	80043e2 <HAL_LPTIM_Init+0xc2>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	691a      	ldr	r2, [r3, #16]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f022 0201 	bic.w	r2, r2, #1
 80043e0:	611a      	str	r2, [r3, #16]

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	68db      	ldr	r3, [r3, #12]
 80043e8:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	2b01      	cmp	r3, #1
 80043f0:	d004      	beq.n	80043fc <HAL_LPTIM_Init+0xdc>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043f6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80043fa:	d103      	bne.n	8004404 <HAL_LPTIM_Init+0xe4>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	f023 031e 	bic.w	r3, r3, #30
 8004402:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	695b      	ldr	r3, [r3, #20]
 8004408:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800440c:	4293      	cmp	r3, r2
 800440e:	d005      	beq.n	800441c <HAL_LPTIM_Init+0xfc>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8004416:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800441a:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 800441c:	68fa      	ldr	r2, [r7, #12]
 800441e:	4b2e      	ldr	r3, [pc, #184]	@ (80044d8 <HAL_LPTIM_Init+0x1b8>)
 8004420:	4013      	ands	r3, r2
 8004422:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 800442c:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              hlptim->Init.Clock.Prescaler |
 8004432:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              hlptim->Init.UpdateMode      |
 8004438:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 800443a:	68fa      	ldr	r2, [r7, #12]
 800443c:	4313      	orrs	r3, r2
 800443e:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d107      	bne.n	8004458 <HAL_LPTIM_Init+0x138>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8004450:	4313      	orrs	r3, r2
 8004452:	68fa      	ldr	r2, [r7, #12]
 8004454:	4313      	orrs	r3, r2
 8004456:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	2b01      	cmp	r3, #1
 800445e:	d004      	beq.n	800446a <HAL_LPTIM_Init+0x14a>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004464:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004468:	d107      	bne.n	800447a <HAL_LPTIM_Init+0x15a>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8004472:	4313      	orrs	r3, r2
 8004474:	68fa      	ldr	r2, [r7, #12]
 8004476:	4313      	orrs	r3, r2
 8004478:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	695b      	ldr	r3, [r3, #20]
 800447e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004482:	4293      	cmp	r3, r2
 8004484:	d00a      	beq.n	800449c <HAL_LPTIM_Init+0x17c>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 800448e:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 8004494:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8004496:	68fa      	ldr	r2, [r7, #12]
 8004498:	4313      	orrs	r3, r2
 800449a:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	68fa      	ldr	r2, [r7, #12]
 80044a2:	60da      	str	r2, [r3, #12]
  /* Check LPTIM Input1 and Input2 sources */
  assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
  assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

  /* Configure LPTIM Input1 and Input2 sources */
  hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	430a      	orrs	r2, r1
 80044b2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LPTIM channels state */
  LPTIM_CHANNEL_STATE_SET_ALL(hlptim, HAL_LPTIM_CHANNEL_STATE_READY);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2201      	movs	r2, #1
 80044b8:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2201      	movs	r2, #1
 80044c0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2201      	movs	r2, #1
 80044c8:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a

  /* Return function status */
  return HAL_OK;
 80044cc:	2300      	movs	r3, #0
}
 80044ce:	4618      	mov	r0, r3
 80044d0:	3710      	adds	r7, #16
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bd80      	pop	{r7, pc}
 80044d6:	bf00      	nop
 80044d8:	ff39f1fe 	.word	0xff39f1fe

080044dc <HAL_LPTIM_Counter_Start>:
  * @brief  Start the Counter mode.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Counter_Start(LPTIM_HandleTypeDef *hlptim)
{
 80044dc:	b480      	push	{r7}
 80044de:	b083      	sub	sp, #12
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2202      	movs	r2, #2
 80044e8:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a

  /* If clock source is not ULPTIM clock and counter source is external, then it must not be prescaled */
  if ((hlptim->Init.Clock.Source != LPTIM_CLOCKSOURCE_ULPTIM)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	2b01      	cmp	r3, #1
 80044f2:	d00c      	beq.n	800450e <HAL_LPTIM_Counter_Start+0x32>
      && (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044f8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80044fc:	d107      	bne.n	800450e <HAL_LPTIM_Counter_Start+0x32>
  {
    /* Check if clock is prescaled */
    assert_param(IS_LPTIM_CLOCK_PRESCALERDIV1(hlptim->Init.Clock.Prescaler));
    /* Set clock prescaler to 0 */
    hlptim->Instance->CFGR &= ~LPTIM_CFGR_PRESC;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	68da      	ldr	r2, [r3, #12]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f422 6260 	bic.w	r2, r2, #3584	@ 0xe00
 800450c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	691a      	ldr	r2, [r3, #16]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f042 0201 	orr.w	r2, r2, #1
 800451c:	611a      	str	r2, [r3, #16]

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	691a      	ldr	r2, [r3, #16]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f042 0204 	orr.w	r2, r2, #4
 800452c:	611a      	str	r2, [r3, #16]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2201      	movs	r2, #1
 8004532:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a

  /* Return function status */
  return HAL_OK;
 8004536:	2300      	movs	r3, #0
}
 8004538:	4618      	mov	r0, r3
 800453a:	370c      	adds	r7, #12
 800453c:	46bd      	mov	sp, r7
 800453e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004542:	4770      	bx	lr

08004544 <HAL_LPTIM_Counter_Stop>:
  * @brief  Stop the Counter mode.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Counter_Stop(LPTIM_HandleTypeDef *hlptim)
{
 8004544:	b480      	push	{r7}
 8004546:	b083      	sub	sp, #12
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2202      	movs	r2, #2
 8004550:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800455a:	f003 0302 	and.w	r3, r3, #2
 800455e:	2b00      	cmp	r3, #0
 8004560:	d10e      	bne.n	8004580 <HAL_LPTIM_Counter_Stop+0x3c>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004568:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800456c:	2b00      	cmp	r3, #0
 800456e:	d107      	bne.n	8004580 <HAL_LPTIM_Counter_Stop+0x3c>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	691a      	ldr	r2, [r3, #16]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f022 0201 	bic.w	r2, r2, #1
 800457e:	611a      	str	r2, [r3, #16]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2201      	movs	r2, #1
 8004584:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a

  /* Return function status */
  return HAL_OK;
 8004588:	2300      	movs	r3, #0
}
 800458a:	4618      	mov	r0, r3
 800458c:	370c      	adds	r7, #12
 800458e:	46bd      	mov	sp, r7
 8004590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004594:	4770      	bx	lr

08004596 <HAL_LPTIM_OC_ConfigChannel>:
  *         this delay, leads to unpredictable results.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_OC_ConfigChannel(LPTIM_HandleTypeDef *hlptim, const LPTIM_OC_ConfigTypeDef *sConfig,
                                             uint32_t Channel)
{
 8004596:	b580      	push	{r7, lr}
 8004598:	b086      	sub	sp, #24
 800459a:	af00      	add	r7, sp, #0
 800459c:	60f8      	str	r0, [r7, #12]
 800459e:	60b9      	str	r1, [r7, #8]
 80045a0:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LPTIM_CCX_INSTANCE(hlptim->Instance, Channel));
  assert_param(IS_LPTIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_LPTIM_PULSE(sConfig->Pulse));

  hlptim->State = HAL_LPTIM_STATE_BUSY;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	2202      	movs	r2, #2
 80045a6:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a

  switch (Channel)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d003      	beq.n	80045b8 <HAL_LPTIM_OC_ConfigChannel+0x22>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2b01      	cmp	r3, #1
 80045b4:	d00b      	beq.n	80045ce <HAL_LPTIM_OC_ConfigChannel+0x38>
        return status;
      }
      break;
    }
    default:
      break;
 80045b6:	e018      	b.n	80045ea <HAL_LPTIM_OC_ConfigChannel+0x54>
      status = LPTIM_OC1_SetConfig(hlptim, sConfig);
 80045b8:	68b9      	ldr	r1, [r7, #8]
 80045ba:	68f8      	ldr	r0, [r7, #12]
 80045bc:	f000 f84e 	bl	800465c <LPTIM_OC1_SetConfig>
 80045c0:	4603      	mov	r3, r0
 80045c2:	75fb      	strb	r3, [r7, #23]
      if (status != HAL_OK)
 80045c4:	7dfb      	ldrb	r3, [r7, #23]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d00c      	beq.n	80045e4 <HAL_LPTIM_OC_ConfigChannel+0x4e>
        return status;
 80045ca:	7dfb      	ldrb	r3, [r7, #23]
 80045cc:	e012      	b.n	80045f4 <HAL_LPTIM_OC_ConfigChannel+0x5e>
      status = LPTIM_OC2_SetConfig(hlptim, sConfig);
 80045ce:	68b9      	ldr	r1, [r7, #8]
 80045d0:	68f8      	ldr	r0, [r7, #12]
 80045d2:	f000 f88f 	bl	80046f4 <LPTIM_OC2_SetConfig>
 80045d6:	4603      	mov	r3, r0
 80045d8:	75fb      	strb	r3, [r7, #23]
      if (status != HAL_OK)
 80045da:	7dfb      	ldrb	r3, [r7, #23]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d003      	beq.n	80045e8 <HAL_LPTIM_OC_ConfigChannel+0x52>
        return status;
 80045e0:	7dfb      	ldrb	r3, [r7, #23]
 80045e2:	e007      	b.n	80045f4 <HAL_LPTIM_OC_ConfigChannel+0x5e>
      break;
 80045e4:	bf00      	nop
 80045e6:	e000      	b.n	80045ea <HAL_LPTIM_OC_ConfigChannel+0x54>
      break;
 80045e8:	bf00      	nop
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	2201      	movs	r2, #1
 80045ee:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a

  /* Return function status */
  return HAL_OK;
 80045f2:	2300      	movs	r3, #0
}
 80045f4:	4618      	mov	r0, r3
 80045f6:	3718      	adds	r7, #24
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bd80      	pop	{r7, pc}

080045fc <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(const LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 80045fc:	b480      	push	{r7}
 80045fe:	b085      	sub	sp, #20
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
 8004604:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 8004606:	2300      	movs	r3, #0
 8004608:	73fb      	strb	r3, [r7, #15]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 800460a:	4b12      	ldr	r3, [pc, #72]	@ (8004654 <LPTIM_WaitForFlag+0x58>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4a12      	ldr	r2, [pc, #72]	@ (8004658 <LPTIM_WaitForFlag+0x5c>)
 8004610:	fba2 2303 	umull	r2, r3, r2, r3
 8004614:	0b9b      	lsrs	r3, r3, #14
 8004616:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800461a:	fb02 f303 	mul.w	r3, r2, r3
 800461e:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	3b01      	subs	r3, #1
 8004624:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d101      	bne.n	8004630 <LPTIM_WaitForFlag+0x34>
    {
      result = HAL_TIMEOUT;
 800462c:	2303      	movs	r3, #3
 800462e:	73fb      	strb	r3, [r7, #15]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	681a      	ldr	r2, [r3, #0]
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	4013      	ands	r3, r2
 800463a:	683a      	ldr	r2, [r7, #0]
 800463c:	429a      	cmp	r2, r3
 800463e:	d002      	beq.n	8004646 <LPTIM_WaitForFlag+0x4a>
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d1ec      	bne.n	8004620 <LPTIM_WaitForFlag+0x24>

  return result;
 8004646:	7bfb      	ldrb	r3, [r7, #15]
}
 8004648:	4618      	mov	r0, r3
 800464a:	3714      	adds	r7, #20
 800464c:	46bd      	mov	sp, r7
 800464e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004652:	4770      	bx	lr
 8004654:	20000024 	.word	0x20000024
 8004658:	d1b71759 	.word	0xd1b71759

0800465c <LPTIM_OC1_SetConfig>:
  *                the configuration information for LPTIM module.
  * @param  sConfig The output configuration structure
  * @retval None
  */
static HAL_StatusTypeDef LPTIM_OC1_SetConfig(LPTIM_HandleTypeDef *hlptim, const LPTIM_OC_ConfigTypeDef *sConfig)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b084      	sub	sp, #16
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
 8004664:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr1;

  tmpccmr1 = hlptim->Instance->CCMR1;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800466c:	60fb      	str	r3, [r7, #12]
  tmpccmr1 &= ~(LPTIM_CCMR1_CC1P_Msk | LPTIM_CCMR1_CC1SEL_Msk);
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	f023 030d 	bic.w	r3, r3, #13
 8004674:	60fb      	str	r3, [r7, #12]

  tmpccmr1 |= sConfig->OCPolarity << LPTIM_CCMR1_CC1P_Pos;
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	009b      	lsls	r3, r3, #2
 800467c:	68fa      	ldr	r2, [r7, #12]
 800467e:	4313      	orrs	r3, r2
 8004680:	60fb      	str	r3, [r7, #12]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	691a      	ldr	r2, [r3, #16]
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f042 0201 	orr.w	r2, r2, #1
 8004690:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMP1OK);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	2208      	movs	r2, #8
 8004698:	605a      	str	r2, [r3, #4]

  /* Write to CCR1 register */
  __HAL_LPTIM_COMPARE_SET(hlptim, LPTIM_CHANNEL_1, sConfig->Pulse);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	683a      	ldr	r2, [r7, #0]
 80046a0:	6812      	ldr	r2, [r2, #0]
 80046a2:	615a      	str	r2, [r3, #20]

  /* Wait for the completion of the write operation to the LPTIM_CCR1 register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMP1OK) == HAL_TIMEOUT)
 80046a4:	2108      	movs	r1, #8
 80046a6:	6878      	ldr	r0, [r7, #4]
 80046a8:	f7ff ffa8 	bl	80045fc <LPTIM_WaitForFlag>
 80046ac:	4603      	mov	r3, r0
 80046ae:	2b03      	cmp	r3, #3
 80046b0:	d101      	bne.n	80046b6 <LPTIM_OC1_SetConfig+0x5a>
  {
    return HAL_TIMEOUT;
 80046b2:	2303      	movs	r3, #3
 80046b4:	e01a      	b.n	80046ec <LPTIM_OC1_SetConfig+0x90>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046bc:	f003 0302 	and.w	r3, r3, #2
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d10e      	bne.n	80046e2 <LPTIM_OC1_SetConfig+0x86>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d107      	bne.n	80046e2 <LPTIM_OC1_SetConfig+0x86>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	691a      	ldr	r2, [r3, #16]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f022 0201 	bic.w	r2, r2, #1
 80046e0:	611a      	str	r2, [r3, #16]

  /* Write to CCMR1 register */
  hlptim->Instance->CCMR1 = tmpccmr1;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	68fa      	ldr	r2, [r7, #12]
 80046e8:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 80046ea:	2300      	movs	r3, #0
}
 80046ec:	4618      	mov	r0, r3
 80046ee:	3710      	adds	r7, #16
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bd80      	pop	{r7, pc}

080046f4 <LPTIM_OC2_SetConfig>:
  *                the configuration information for LPTIM module.
  * @param  sConfig The output configuration structure
  * @retval None
  */
static HAL_StatusTypeDef LPTIM_OC2_SetConfig(LPTIM_HandleTypeDef *hlptim, const LPTIM_OC_ConfigTypeDef *sConfig)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b084      	sub	sp, #16
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
 80046fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr1;

  tmpccmr1 = hlptim->Instance->CCMR1;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004704:	60fb      	str	r3, [r7, #12]
  tmpccmr1 &= ~(LPTIM_CCMR1_CC2P_Msk | LPTIM_CCMR1_CC2SEL_Msk);
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	f423 2350 	bic.w	r3, r3, #851968	@ 0xd0000
 800470c:	60fb      	str	r3, [r7, #12]
  tmpccmr1 |= sConfig->OCPolarity << LPTIM_CCMR1_CC2P_Pos;
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	049b      	lsls	r3, r3, #18
 8004714:	68fa      	ldr	r2, [r7, #12]
 8004716:	4313      	orrs	r3, r2
 8004718:	60fb      	str	r3, [r7, #12]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	691a      	ldr	r2, [r3, #16]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f042 0201 	orr.w	r2, r2, #1
 8004728:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMP2OK);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8004732:	605a      	str	r2, [r3, #4]

  /* Write to CCR2 register */
  __HAL_LPTIM_COMPARE_SET(hlptim, LPTIM_CHANNEL_2, sConfig->Pulse);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	683a      	ldr	r2, [r7, #0]
 800473a:	6812      	ldr	r2, [r2, #0]
 800473c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Wait for the completion of the write operation to the LPTIM_CCR2 register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMP2OK) != HAL_OK)
 800473e:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 8004742:	6878      	ldr	r0, [r7, #4]
 8004744:	f7ff ff5a 	bl	80045fc <LPTIM_WaitForFlag>
 8004748:	4603      	mov	r3, r0
 800474a:	2b00      	cmp	r3, #0
 800474c:	d001      	beq.n	8004752 <LPTIM_OC2_SetConfig+0x5e>
  {
    return HAL_TIMEOUT;
 800474e:	2303      	movs	r3, #3
 8004750:	e01a      	b.n	8004788 <LPTIM_OC2_SetConfig+0x94>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004758:	f003 0302 	and.w	r3, r3, #2
 800475c:	2b00      	cmp	r3, #0
 800475e:	d10e      	bne.n	800477e <LPTIM_OC2_SetConfig+0x8a>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004766:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800476a:	2b00      	cmp	r3, #0
 800476c:	d107      	bne.n	800477e <LPTIM_OC2_SetConfig+0x8a>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	691a      	ldr	r2, [r3, #16]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f022 0201 	bic.w	r2, r2, #1
 800477c:	611a      	str	r2, [r3, #16]

  /* Write to CCMR1 register */
  hlptim->Instance->CCMR1 = tmpccmr1;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	68fa      	ldr	r2, [r7, #12]
 8004784:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8004786:	2300      	movs	r3, #0
}
 8004788:	4618      	mov	r0, r3
 800478a:	3710      	adds	r7, #16
 800478c:	46bd      	mov	sp, r7
 800478e:	bd80      	pop	{r7, pc}

08004790 <HAL_PWR_EnableBkUpAccess>:
  * @note   After a system reset, the backup domain is protected against
  *         possible unwanted write accesses.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004790:	b480      	push	{r7}
 8004792:	af00      	add	r7, sp, #0
  SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8004794:	4b05      	ldr	r3, [pc, #20]	@ (80047ac <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004796:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004798:	4a04      	ldr	r2, [pc, #16]	@ (80047ac <HAL_PWR_EnableBkUpAccess+0x1c>)
 800479a:	f043 0301 	orr.w	r3, r3, #1
 800479e:	6293      	str	r3, [r2, #40]	@ 0x28
}
 80047a0:	bf00      	nop
 80047a2:	46bd      	mov	sp, r7
 80047a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a8:	4770      	bx	lr
 80047aa:	bf00      	nop
 80047ac:	46020800 	.word	0x46020800

080047b0 <HAL_PWR_EnableWakeUpPin>:
  *                     the wake up line, the wake up source with
  *                     high polarity and the first wake up I/O.
  * @retval None.
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPin)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b087      	sub	sp, #28
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPin));

  /* Specifies the wake up line polarity for the event detection (rising or falling edge) */
  MODIFY_REG(PWR->WUCR2, (PWR_EWUP_MASK & WakeUpPin), (WakeUpPin >> PWR_WUP_POLARITY_SHIFT));
 80047b8:	4b1b      	ldr	r3, [pc, #108]	@ (8004828 <HAL_PWR_EnableWakeUpPin+0x78>)
 80047ba:	699a      	ldr	r2, [r3, #24]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	b2db      	uxtb	r3, r3
 80047c0:	43db      	mvns	r3, r3
 80047c2:	401a      	ands	r2, r3
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	0a1b      	lsrs	r3, r3, #8
 80047c8:	4917      	ldr	r1, [pc, #92]	@ (8004828 <HAL_PWR_EnableWakeUpPin+0x78>)
 80047ca:	4313      	orrs	r3, r2
 80047cc:	618b      	str	r3, [r1, #24]

  /* Specifies the wake up line I/O selection */
  MODIFY_REG(PWR->WUCR3, (3UL << (POSITION_VAL(PWR_EWUP_MASK & WakeUpPin) * 2U)),
 80047ce:	4b16      	ldr	r3, [pc, #88]	@ (8004828 <HAL_PWR_EnableWakeUpPin+0x78>)
 80047d0:	69da      	ldr	r2, [r3, #28]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	b2db      	uxtb	r3, r3
 80047d6:	613b      	str	r3, [r7, #16]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	fa93 f3a3 	rbit	r3, r3
 80047de:	60fb      	str	r3, [r7, #12]
  return result;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80047e4:	697b      	ldr	r3, [r7, #20]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d101      	bne.n	80047ee <HAL_PWR_EnableWakeUpPin+0x3e>
    return 32U;
 80047ea:	2320      	movs	r3, #32
 80047ec:	e003      	b.n	80047f6 <HAL_PWR_EnableWakeUpPin+0x46>
  return __builtin_clz(value);
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	fab3 f383 	clz	r3, r3
 80047f4:	b2db      	uxtb	r3, r3
 80047f6:	005b      	lsls	r3, r3, #1
 80047f8:	2103      	movs	r1, #3
 80047fa:	fa01 f303 	lsl.w	r3, r1, r3
 80047fe:	43db      	mvns	r3, r3
 8004800:	401a      	ands	r2, r3
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	0c1b      	lsrs	r3, r3, #16
 8004806:	4908      	ldr	r1, [pc, #32]	@ (8004828 <HAL_PWR_EnableWakeUpPin+0x78>)
 8004808:	4313      	orrs	r3, r2
 800480a:	61cb      	str	r3, [r1, #28]
             (WakeUpPin >> PWR_WUP_SELECT_SIGNAL_SHIFT));

  /* Enable wake-up line */
  SET_BIT(PWR->WUCR1, (PWR_EWUP_MASK & WakeUpPin));
 800480c:	4b06      	ldr	r3, [pc, #24]	@ (8004828 <HAL_PWR_EnableWakeUpPin+0x78>)
 800480e:	695a      	ldr	r2, [r3, #20]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	b2db      	uxtb	r3, r3
 8004814:	4904      	ldr	r1, [pc, #16]	@ (8004828 <HAL_PWR_EnableWakeUpPin+0x78>)
 8004816:	4313      	orrs	r3, r2
 8004818:	614b      	str	r3, [r1, #20]
}
 800481a:	bf00      	nop
 800481c:	371c      	adds	r7, #28
 800481e:	46bd      	mov	sp, r7
 8004820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004824:	4770      	bx	lr
 8004826:	bf00      	nop
 8004828:	46020800 	.word	0x46020800

0800482c <HAL_PWREx_ControlVoltageScaling>:
  *        only take effect after the 2.4 GHz RADIO has entered Sleep or Deepsleep mode.
  * @note  In range 2, the 2.4 GHz RADIO shall not transmit nor receive.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800482c:	b480      	push	{r7}
 800482e:	b085      	sub	sp, #20
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  uint32_t vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8004834:	4b29      	ldr	r3, [pc, #164]	@ (80048dc <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8004836:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004838:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800483c:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 800483e:	68ba      	ldr	r2, [r7, #8]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	429a      	cmp	r2, r3
 8004844:	d101      	bne.n	800484a <HAL_PWREx_ControlVoltageScaling+0x1e>
  {
    return HAL_OK;
 8004846:	2300      	movs	r3, #0
 8004848:	e042      	b.n	80048d0 <HAL_PWREx_ControlVoltageScaling+0xa4>
  }

  /* Set voltage scaling level */
  MODIFY_REG(PWR->VOSR, PWR_VOSR_VOS, VoltageScaling);
 800484a:	4b24      	ldr	r3, [pc, #144]	@ (80048dc <HAL_PWREx_ControlVoltageScaling+0xb0>)
 800484c:	68db      	ldr	r3, [r3, #12]
 800484e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004852:	4922      	ldr	r1, [pc, #136]	@ (80048dc <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	4313      	orrs	r3, r2
 8004858:	60cb      	str	r3, [r1, #12]


  /* Wait until VOSRDY is set */
  timeout = ((PWR_VOSF_SETTING_DELAY_VALUE * SystemCoreClock) / 1000000U) + 1U;
 800485a:	4b21      	ldr	r3, [pc, #132]	@ (80048e0 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	2232      	movs	r2, #50	@ 0x32
 8004860:	fb02 f303 	mul.w	r3, r2, r3
 8004864:	4a1f      	ldr	r2, [pc, #124]	@ (80048e4 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8004866:	fba2 2303 	umull	r2, r3, r2, r3
 800486a:	0c9b      	lsrs	r3, r3, #18
 800486c:	3301      	adds	r3, #1
 800486e:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8004870:	e002      	b.n	8004878 <HAL_PWREx_ControlVoltageScaling+0x4c>
  {
    timeout--;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	3b01      	subs	r3, #1
 8004876:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8004878:	4b18      	ldr	r3, [pc, #96]	@ (80048dc <HAL_PWREx_ControlVoltageScaling+0xb0>)
 800487a:	68db      	ldr	r3, [r3, #12]
 800487c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004880:	2b00      	cmp	r3, #0
 8004882:	d102      	bne.n	800488a <HAL_PWREx_ControlVoltageScaling+0x5e>
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d1f3      	bne.n	8004872 <HAL_PWREx_ControlVoltageScaling+0x46>
  }

  /* Check time out  */
  if (timeout == 0U)
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d101      	bne.n	8004894 <HAL_PWREx_ControlVoltageScaling+0x68>
  {
    return HAL_TIMEOUT;
 8004890:	2303      	movs	r3, #3
 8004892:	e01d      	b.n	80048d0 <HAL_PWREx_ControlVoltageScaling+0xa4>
  }

  /* Wait until ACTVOSRDY is set */
  timeout = ((PWR_VOSF_SETTING_DELAY_VALUE * SystemCoreClock) / 1000000U) + 1U;
 8004894:	4b12      	ldr	r3, [pc, #72]	@ (80048e0 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	2232      	movs	r2, #50	@ 0x32
 800489a:	fb02 f303 	mul.w	r3, r2, r3
 800489e:	4a11      	ldr	r2, [pc, #68]	@ (80048e4 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 80048a0:	fba2 2303 	umull	r2, r3, r2, r3
 80048a4:	0c9b      	lsrs	r3, r3, #18
 80048a6:	3301      	adds	r3, #1
 80048a8:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 80048aa:	e002      	b.n	80048b2 <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	3b01      	subs	r3, #1
 80048b0:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 80048b2:	4b0a      	ldr	r3, [pc, #40]	@ (80048dc <HAL_PWREx_ControlVoltageScaling+0xb0>)
 80048b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048b6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d102      	bne.n	80048c4 <HAL_PWREx_ControlVoltageScaling+0x98>
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d1f3      	bne.n	80048ac <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out  */
  if (timeout == 0U)
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d101      	bne.n	80048ce <HAL_PWREx_ControlVoltageScaling+0xa2>
  {
    return HAL_TIMEOUT;
 80048ca:	2303      	movs	r3, #3
 80048cc:	e000      	b.n	80048d0 <HAL_PWREx_ControlVoltageScaling+0xa4>
  }

  return HAL_OK;
 80048ce:	2300      	movs	r3, #0
}
 80048d0:	4618      	mov	r0, r3
 80048d2:	3714      	adds	r7, #20
 80048d4:	46bd      	mov	sp, r7
 80048d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048da:	4770      	bx	lr
 80048dc:	46020800 	.word	0x46020800
 80048e0:	20000024 	.word	0x20000024
 80048e4:	431bde83 	.word	0x431bde83

080048e8 <HAL_RAMCFG_Init>:
  *                   the configuration information for the specified RAMCFG
  *                   instance.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_RAMCFG_Init(RAMCFG_HandleTypeDef *hramcfg)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b082      	sub	sp, #8
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  /* Check the RAMCFG peripheral handle */
  if (hramcfg == NULL)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d101      	bne.n	80048fa <HAL_RAMCFG_Init+0x12>
  {
    return HAL_ERROR;
 80048f6:	2301      	movs	r3, #1
 80048f8:	e00c      	b.n	8004914 <HAL_RAMCFG_Init+0x2c>

  /* Check the parameters */
  assert_param(IS_RAMCFG_ALL_INSTANCE(hramcfg->Instance));

  /* Update RAMCFG peripheral state */
  hramcfg->State = HAL_RAMCFG_STATE_BUSY;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2202      	movs	r2, #2
 80048fe:	711a      	strb	r2, [r3, #4]
    /* Legacy callback */
    hramcfg->MspInitCallback = HAL_RAMCFG_MspInit;
  }
  hramcfg->MspInitCallback(hramcfg);
#else
  HAL_RAMCFG_MspInit(hramcfg);
 8004900:	6878      	ldr	r0, [r7, #4]
 8004902:	f7fc fd65 	bl	80013d0 <HAL_RAMCFG_MspInit>
#endif /* USE_HAL_RAMCFG_REGISTER_CALLBACKS */

  /* Initialize the RAMCFG error code */
  hramcfg->ErrorCode = HAL_RAMCFG_ERROR_NONE;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2200      	movs	r2, #0
 800490a:	609a      	str	r2, [r3, #8]

  /* Initialize the RAMCFG state */
  hramcfg->State = HAL_RAMCFG_STATE_READY;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2201      	movs	r2, #1
 8004910:	711a      	strb	r2, [r3, #4]

  return HAL_OK;
 8004912:	2300      	movs	r3, #0
}
 8004914:	4618      	mov	r0, r3
 8004916:	3708      	adds	r7, #8
 8004918:	46bd      	mov	sp, r7
 800491a:	bd80      	pop	{r7, pc}

0800491c <HAL_RAMCFG_ConfigWaitState>:
  * @param  WaitState     : Select the value of wait state to be configured.
  *                         This parameter could be any value of @ref RAMCFG_WaitState group
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_RAMCFG_ConfigWaitState(RAMCFG_HandleTypeDef *hramcfg, uint32_t WaitState)
{
 800491c:	b480      	push	{r7}
 800491e:	b083      	sub	sp, #12
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
 8004924:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RAMCFG_ALL_INSTANCE(hramcfg->Instance));
  assert_param(IS_RAMCFG_WAITSTATE(WaitState));

  /* Get RAMCFG state */
  if (hramcfg->State == HAL_RAMCFG_STATE_READY)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	791b      	ldrb	r3, [r3, #4]
 800492a:	b2db      	uxtb	r3, r3
 800492c:	2b01      	cmp	r3, #1
 800492e:	d10b      	bne.n	8004948 <HAL_RAMCFG_ConfigWaitState+0x2c>
  {
    /* Update RAMCFG peripheral state */
    hramcfg->State = HAL_RAMCFG_STATE_BUSY;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2202      	movs	r2, #2
 8004934:	711a      	strb	r2, [r3, #4]

    /* Set the SRAM wait state */
    hramcfg->Instance->CR = WaitState;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	683a      	ldr	r2, [r7, #0]
 800493c:	601a      	str	r2, [r3, #0]

    return HAL_ERROR;
  }

  /* Update RAMCFG peripheral state */
  hramcfg->State = HAL_RAMCFG_STATE_READY;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2201      	movs	r2, #1
 8004942:	711a      	strb	r2, [r3, #4]

  return HAL_OK;
 8004944:	2300      	movs	r3, #0
 8004946:	e003      	b.n	8004950 <HAL_RAMCFG_ConfigWaitState+0x34>
    hramcfg->ErrorCode = HAL_RAMCFG_ERROR_BUSY;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2202      	movs	r2, #2
 800494c:	609a      	str	r2, [r3, #8]
    return HAL_ERROR;
 800494e:	2301      	movs	r3, #1
}
 8004950:	4618      	mov	r0, r3
 8004952:	370c      	adds	r7, #12
 8004954:	46bd      	mov	sp, r7
 8004956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495a:	4770      	bx	lr

0800495c <HAL_RAMCFG_GetWaitState>:
  *                         contains the configuration information for the
  *                         specified RAMCFG instance.
  * @retval Wait state value, part of @ref RAMCFG_WaitState group.
  */
uint32_t HAL_RAMCFG_GetWaitState(const RAMCFG_HandleTypeDef *hramcfg)
{
 800495c:	b480      	push	{r7}
 800495e:	b083      	sub	sp, #12
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RAMCFG_ALL_INSTANCE(hramcfg->Instance));

  /* Return the configured wait state number */
  return (hramcfg->Instance->CR & RAMCFG_CR_WSC);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
}
 800496e:	4618      	mov	r0, r3
 8004970:	370c      	adds	r7, #12
 8004972:	46bd      	mov	sp, r7
 8004974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004978:	4770      	bx	lr
	...

0800497c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef *RCC_OscInitStruct)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b08c      	sub	sp, #48	@ 0x30
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t mask;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d102      	bne.n	8004990 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800498a:	2301      	movs	r3, #1
 800498c:	f000 bc00 	b.w	8005190 <HAL_RCC_OscConfig+0x814>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004990:	4b8f      	ldr	r3, [pc, #572]	@ (8004bd0 <HAL_RCC_OscConfig+0x254>)
 8004992:	69db      	ldr	r3, [r3, #28]
 8004994:	f003 030c 	and.w	r3, r3, #12
 8004998:	623b      	str	r3, [r7, #32]
  pllsrc = __HAL_RCC_GET_PLL1_OSCSOURCE();
 800499a:	4b8d      	ldr	r3, [pc, #564]	@ (8004bd0 <HAL_RCC_OscConfig+0x254>)
 800499c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800499e:	f003 0303 	and.w	r3, r3, #3
 80049a2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f003 0301 	and.w	r3, r3, #1
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d072      	beq.n	8004a96 <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL1 in these cases it is not allowed to be disabled */
    if ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80049b0:	6a3b      	ldr	r3, [r7, #32]
 80049b2:	2b08      	cmp	r3, #8
 80049b4:	d005      	beq.n	80049c2 <HAL_RCC_OscConfig+0x46>
 80049b6:	6a3b      	ldr	r3, [r7, #32]
 80049b8:	2b0c      	cmp	r3, #12
 80049ba:	d12a      	bne.n	8004a12 <HAL_RCC_OscConfig+0x96>
        ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsrc == RCC_PLLSOURCE_HSE)))
 80049bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049be:	2b03      	cmp	r3, #3
 80049c0:	d127      	bne.n	8004a12 <HAL_RCC_OscConfig+0x96>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d101      	bne.n	80049ce <HAL_RCC_OscConfig+0x52>
      {
        return HAL_ERROR;
 80049ca:	2301      	movs	r3, #1
 80049cc:	e3e0      	b.n	8005190 <HAL_RCC_OscConfig+0x814>
      }
      else
      {
        /* Otherwise, applying divider is allowed */
        if (sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 80049ce:	6a3b      	ldr	r3, [r7, #32]
 80049d0:	2b08      	cmp	r3, #8
 80049d2:	d15f      	bne.n	8004a94 <HAL_RCC_OscConfig+0x118>
        {
          assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

          /* Adjust the HSE division factor */
          __HAL_RCC_HSE_CONFIG(RCC_HSE_ON | RCC_OscInitStruct->HSEDiv);
 80049d4:	4b7e      	ldr	r3, [pc, #504]	@ (8004bd0 <HAL_RCC_OscConfig+0x254>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f423 1288 	bic.w	r2, r3, #1114112	@ 0x110000
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	689b      	ldr	r3, [r3, #8]
 80049e0:	4313      	orrs	r3, r2
 80049e2:	4a7b      	ldr	r2, [pc, #492]	@ (8004bd0 <HAL_RCC_OscConfig+0x254>)
 80049e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80049e8:	6013      	str	r3, [r2, #0]

          /* Update the SystemCoreClock global variable with HSE value */
          SystemCoreClock = (HSE_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSEPRE)) >> RCC_CR_HSEPRE_Pos)));
 80049ea:	4b79      	ldr	r3, [pc, #484]	@ (8004bd0 <HAL_RCC_OscConfig+0x254>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	0d1b      	lsrs	r3, r3, #20
 80049f0:	f003 0301 	and.w	r3, r3, #1
 80049f4:	4a77      	ldr	r2, [pc, #476]	@ (8004bd4 <HAL_RCC_OscConfig+0x258>)
 80049f6:	fa22 f303 	lsr.w	r3, r2, r3
 80049fa:	4a77      	ldr	r2, [pc, #476]	@ (8004bd8 <HAL_RCC_OscConfig+0x25c>)
 80049fc:	6013      	str	r3, [r2, #0]

          /* Adapt Systick interrupt period */
          if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80049fe:	4b77      	ldr	r3, [pc, #476]	@ (8004bdc <HAL_RCC_OscConfig+0x260>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4618      	mov	r0, r3
 8004a04:	f7fd f864 	bl	8001ad0 <HAL_InitTick>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d042      	beq.n	8004a94 <HAL_RCC_OscConfig+0x118>
          {
            return HAL_ERROR;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	e3be      	b.n	8005190 <HAL_RCC_OscConfig+0x814>
      }
    }
    else
    {
      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d01f      	beq.n	8004a5a <HAL_RCC_OscConfig+0xde>
      {
        assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

        /* Set the new HSE configuration ---------------------------------------*/
        __HAL_RCC_HSE_CONFIG((RCC_OscInitStruct->HSEState | RCC_OscInitStruct->HSEDiv));
 8004a1a:	4b6d      	ldr	r3, [pc, #436]	@ (8004bd0 <HAL_RCC_OscConfig+0x254>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f423 1288 	bic.w	r2, r3, #1114112	@ 0x110000
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6859      	ldr	r1, [r3, #4]
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	689b      	ldr	r3, [r3, #8]
 8004a2a:	430b      	orrs	r3, r1
 8004a2c:	4968      	ldr	r1, [pc, #416]	@ (8004bd0 <HAL_RCC_OscConfig+0x254>)
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a32:	f7fd f8df 	bl	8001bf4 <HAL_GetTick>
 8004a36:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a38:	e008      	b.n	8004a4c <HAL_RCC_OscConfig+0xd0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a3a:	f7fd f8db 	bl	8001bf4 <HAL_GetTick>
 8004a3e:	4602      	mov	r2, r0
 8004a40:	69fb      	ldr	r3, [r7, #28]
 8004a42:	1ad3      	subs	r3, r2, r3
 8004a44:	2b64      	cmp	r3, #100	@ 0x64
 8004a46:	d901      	bls.n	8004a4c <HAL_RCC_OscConfig+0xd0>
          {
            return HAL_TIMEOUT;
 8004a48:	2303      	movs	r3, #3
 8004a4a:	e3a1      	b.n	8005190 <HAL_RCC_OscConfig+0x814>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a4c:	4b60      	ldr	r3, [pc, #384]	@ (8004bd0 <HAL_RCC_OscConfig+0x254>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d0f0      	beq.n	8004a3a <HAL_RCC_OscConfig+0xbe>
 8004a58:	e01d      	b.n	8004a96 <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Set the new HSE configuration ---------------------------------------*/
        __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a5a:	4b5d      	ldr	r3, [pc, #372]	@ (8004bd0 <HAL_RCC_OscConfig+0x254>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f423 1288 	bic.w	r2, r3, #1114112	@ 0x110000
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	495a      	ldr	r1, [pc, #360]	@ (8004bd0 <HAL_RCC_OscConfig+0x254>)
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a6c:	f7fd f8c2 	bl	8001bf4 <HAL_GetTick>
 8004a70:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004a72:	e008      	b.n	8004a86 <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a74:	f7fd f8be 	bl	8001bf4 <HAL_GetTick>
 8004a78:	4602      	mov	r2, r0
 8004a7a:	69fb      	ldr	r3, [r7, #28]
 8004a7c:	1ad3      	subs	r3, r2, r3
 8004a7e:	2b64      	cmp	r3, #100	@ 0x64
 8004a80:	d901      	bls.n	8004a86 <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8004a82:	2303      	movs	r3, #3
 8004a84:	e384      	b.n	8005190 <HAL_RCC_OscConfig+0x814>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004a86:	4b52      	ldr	r3, [pc, #328]	@ (8004bd0 <HAL_RCC_OscConfig+0x254>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d1f0      	bne.n	8004a74 <HAL_RCC_OscConfig+0xf8>
 8004a92:	e000      	b.n	8004a96 <HAL_RCC_OscConfig+0x11a>
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8004a94:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f003 0302 	and.w	r3, r3, #2
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d05a      	beq.n	8004b58 <HAL_RCC_OscConfig+0x1dc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL1 source when PLL1 is selected as system clock */
    if ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8004aa2:	6a3b      	ldr	r3, [r7, #32]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d005      	beq.n	8004ab4 <HAL_RCC_OscConfig+0x138>
 8004aa8:	6a3b      	ldr	r3, [r7, #32]
 8004aaa:	2b0c      	cmp	r3, #12
 8004aac:	d113      	bne.n	8004ad6 <HAL_RCC_OscConfig+0x15a>
        ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsrc == RCC_PLLSOURCE_HSI)))
 8004aae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ab0:	2b02      	cmp	r3, #2
 8004ab2:	d110      	bne.n	8004ad6 <HAL_RCC_OscConfig+0x15a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	691b      	ldr	r3, [r3, #16]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d101      	bne.n	8004ac0 <HAL_RCC_OscConfig+0x144>
      {
        return HAL_ERROR;
 8004abc:	2301      	movs	r3, #1
 8004abe:	e367      	b.n	8005190 <HAL_RCC_OscConfig+0x814>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ac0:	4b43      	ldr	r3, [pc, #268]	@ (8004bd0 <HAL_RCC_OscConfig+0x254>)
 8004ac2:	691b      	ldr	r3, [r3, #16]
 8004ac4:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	695b      	ldr	r3, [r3, #20]
 8004acc:	041b      	lsls	r3, r3, #16
 8004ace:	4940      	ldr	r1, [pc, #256]	@ (8004bd0 <HAL_RCC_OscConfig+0x254>)
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	610b      	str	r3, [r1, #16]
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004ad4:	e040      	b.n	8004b58 <HAL_RCC_OscConfig+0x1dc>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	691b      	ldr	r3, [r3, #16]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d023      	beq.n	8004b26 <HAL_RCC_OscConfig+0x1aa>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ade:	4b3c      	ldr	r3, [pc, #240]	@ (8004bd0 <HAL_RCC_OscConfig+0x254>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4a3b      	ldr	r2, [pc, #236]	@ (8004bd0 <HAL_RCC_OscConfig+0x254>)
 8004ae4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ae8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004aea:	f7fd f883 	bl	8001bf4 <HAL_GetTick>
 8004aee:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004af0:	e008      	b.n	8004b04 <HAL_RCC_OscConfig+0x188>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004af2:	f7fd f87f 	bl	8001bf4 <HAL_GetTick>
 8004af6:	4602      	mov	r2, r0
 8004af8:	69fb      	ldr	r3, [r7, #28]
 8004afa:	1ad3      	subs	r3, r2, r3
 8004afc:	2b02      	cmp	r3, #2
 8004afe:	d901      	bls.n	8004b04 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004b00:	2303      	movs	r3, #3
 8004b02:	e345      	b.n	8005190 <HAL_RCC_OscConfig+0x814>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b04:	4b32      	ldr	r3, [pc, #200]	@ (8004bd0 <HAL_RCC_OscConfig+0x254>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d0f0      	beq.n	8004af2 <HAL_RCC_OscConfig+0x176>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b10:	4b2f      	ldr	r3, [pc, #188]	@ (8004bd0 <HAL_RCC_OscConfig+0x254>)
 8004b12:	691b      	ldr	r3, [r3, #16]
 8004b14:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	695b      	ldr	r3, [r3, #20]
 8004b1c:	041b      	lsls	r3, r3, #16
 8004b1e:	492c      	ldr	r1, [pc, #176]	@ (8004bd0 <HAL_RCC_OscConfig+0x254>)
 8004b20:	4313      	orrs	r3, r2
 8004b22:	610b      	str	r3, [r1, #16]
 8004b24:	e018      	b.n	8004b58 <HAL_RCC_OscConfig+0x1dc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b26:	4b2a      	ldr	r3, [pc, #168]	@ (8004bd0 <HAL_RCC_OscConfig+0x254>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4a29      	ldr	r2, [pc, #164]	@ (8004bd0 <HAL_RCC_OscConfig+0x254>)
 8004b2c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004b30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b32:	f7fd f85f 	bl	8001bf4 <HAL_GetTick>
 8004b36:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004b38:	e008      	b.n	8004b4c <HAL_RCC_OscConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b3a:	f7fd f85b 	bl	8001bf4 <HAL_GetTick>
 8004b3e:	4602      	mov	r2, r0
 8004b40:	69fb      	ldr	r3, [r7, #28]
 8004b42:	1ad3      	subs	r3, r2, r3
 8004b44:	2b02      	cmp	r3, #2
 8004b46:	d901      	bls.n	8004b4c <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004b48:	2303      	movs	r3, #3
 8004b4a:	e321      	b.n	8005190 <HAL_RCC_OscConfig+0x814>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004b4c:	4b20      	ldr	r3, [pc, #128]	@ (8004bd0 <HAL_RCC_OscConfig+0x254>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d1f0      	bne.n	8004b3a <HAL_RCC_OscConfig+0x1be>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f003 0308 	and.w	r3, r3, #8
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	f000 80f8 	beq.w	8004d56 <HAL_RCC_OscConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8004b66:	2300      	movs	r3, #0
 8004b68:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Update LSI1 configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_ENABLED() != 0x01)
 8004b6c:	4b18      	ldr	r3, [pc, #96]	@ (8004bd0 <HAL_RCC_OscConfig+0x254>)
 8004b6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b72:	f003 0304 	and.w	r3, r3, #4
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d111      	bne.n	8004b9e <HAL_RCC_OscConfig+0x222>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b7a:	4b15      	ldr	r3, [pc, #84]	@ (8004bd0 <HAL_RCC_OscConfig+0x254>)
 8004b7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b80:	4a13      	ldr	r2, [pc, #76]	@ (8004bd0 <HAL_RCC_OscConfig+0x254>)
 8004b82:	f043 0304 	orr.w	r3, r3, #4
 8004b86:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8004b8a:	4b11      	ldr	r3, [pc, #68]	@ (8004bd0 <HAL_RCC_OscConfig+0x254>)
 8004b8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b90:	f003 0304 	and.w	r3, r3, #4
 8004b94:	613b      	str	r3, [r7, #16]
 8004b96:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8004b98:	2301      	movs	r3, #1
 8004b9a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004b9e:	4b10      	ldr	r3, [pc, #64]	@ (8004be0 <HAL_RCC_OscConfig+0x264>)
 8004ba0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ba2:	f003 0301 	and.w	r3, r3, #1
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d122      	bne.n	8004bf0 <HAL_RCC_OscConfig+0x274>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8004baa:	4b0d      	ldr	r3, [pc, #52]	@ (8004be0 <HAL_RCC_OscConfig+0x264>)
 8004bac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bae:	4a0c      	ldr	r2, [pc, #48]	@ (8004be0 <HAL_RCC_OscConfig+0x264>)
 8004bb0:	f043 0301 	orr.w	r3, r3, #1
 8004bb4:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004bb6:	f7fd f81d 	bl	8001bf4 <HAL_GetTick>
 8004bba:	61f8      	str	r0, [r7, #28]

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004bbc:	e012      	b.n	8004be4 <HAL_RCC_OscConfig+0x268>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bbe:	f7fd f819 	bl	8001bf4 <HAL_GetTick>
 8004bc2:	4602      	mov	r2, r0
 8004bc4:	69fb      	ldr	r3, [r7, #28]
 8004bc6:	1ad3      	subs	r3, r2, r3
 8004bc8:	2b02      	cmp	r3, #2
 8004bca:	d90b      	bls.n	8004be4 <HAL_RCC_OscConfig+0x268>
        {
          return HAL_TIMEOUT;
 8004bcc:	2303      	movs	r3, #3
 8004bce:	e2df      	b.n	8005190 <HAL_RCC_OscConfig+0x814>
 8004bd0:	46020c00 	.word	0x46020c00
 8004bd4:	01e84800 	.word	0x01e84800
 8004bd8:	20000024 	.word	0x20000024
 8004bdc:	20000028 	.word	0x20000028
 8004be0:	46020800 	.word	0x46020800
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004be4:	4ba8      	ldr	r3, [pc, #672]	@ (8004e88 <HAL_RCC_OscConfig+0x50c>)
 8004be6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004be8:	f003 0301 	and.w	r3, r3, #1
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d0e6      	beq.n	8004bbe <HAL_RCC_OscConfig+0x242>
        }
      }
    }

    /* Get BDCR1 register value */
    tmpreg1 = RCC->BDCR1;
 8004bf0:	4ba6      	ldr	r3, [pc, #664]	@ (8004e8c <HAL_RCC_OscConfig+0x510>)
 8004bf2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004bf6:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Define mask depending on LSI presence */
    mask = RCC_BDCR1_LSI1ON;
 8004bf8:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8004bfc:	61bb      	str	r3, [r7, #24]
#if defined(RCC_LSI2_SUPPORT)
    mask |= RCC_BDCR1_LSI2ON;
 8004bfe:	69bb      	ldr	r3, [r7, #24]
 8004c00:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004c04:	61bb      	str	r3, [r7, #24]
#endif /* RCC_LSI2_SUPPORT */

    /* Check the LSI1 State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	699b      	ldr	r3, [r3, #24]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d079      	beq.n	8004d02 <HAL_RCC_OscConfig+0x386>
    {
      if ((RCC_OscInitStruct->LSIState & RCC_LSI1_ON) != 0x00u)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	699b      	ldr	r3, [r3, #24]
 8004c12:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d030      	beq.n	8004c7c <HAL_RCC_OscConfig+0x300>
      {
        /* Check LSI1 division factor */
        assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

        /* Check is LSIDiv is requested to be changed and LSI is already ON */
        if ((RCC_OscInitStruct->LSIDiv != (tmpreg1 & RCC_BDCR1_LSI1PREDIV)) && ((tmpreg1 & RCC_BDCR1_LSI1RDY) != 0x00u))
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	69da      	ldr	r2, [r3, #28]
 8004c1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c20:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c24:	429a      	cmp	r2, r3
 8004c26:	d020      	beq.n	8004c6a <HAL_RCC_OscConfig+0x2ee>
 8004c28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c2a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d01b      	beq.n	8004c6a <HAL_RCC_OscConfig+0x2ee>
        {
          /* Disable LSI1 */
          tmpreg1 &= ~RCC_BDCR1_LSI1ON;
 8004c32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c34:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004c38:	62bb      	str	r3, [r7, #40]	@ 0x28
          RCC->BDCR1 = tmpreg1;
 8004c3a:	4a94      	ldr	r2, [pc, #592]	@ (8004e8c <HAL_RCC_OscConfig+0x510>)
 8004c3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c3e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004c42:	f7fc ffd7 	bl	8001bf4 <HAL_GetTick>
 8004c46:	61f8      	str	r0, [r7, #28]

          /* Wait till LSI1 is disabled */
          while (READ_BIT(RCC->BDCR1, RCC_BDCR1_LSI1RDY) != 0x00u)
 8004c48:	e008      	b.n	8004c5c <HAL_RCC_OscConfig+0x2e0>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c4a:	f7fc ffd3 	bl	8001bf4 <HAL_GetTick>
 8004c4e:	4602      	mov	r2, r0
 8004c50:	69fb      	ldr	r3, [r7, #28]
 8004c52:	1ad3      	subs	r3, r2, r3
 8004c54:	2b14      	cmp	r3, #20
 8004c56:	d901      	bls.n	8004c5c <HAL_RCC_OscConfig+0x2e0>
            {
              /* LSI1 may be forced ON by IWDG */
              return HAL_TIMEOUT;
 8004c58:	2303      	movs	r3, #3
 8004c5a:	e299      	b.n	8005190 <HAL_RCC_OscConfig+0x814>
          while (READ_BIT(RCC->BDCR1, RCC_BDCR1_LSI1RDY) != 0x00u)
 8004c5c:	4b8b      	ldr	r3, [pc, #556]	@ (8004e8c <HAL_RCC_OscConfig+0x510>)
 8004c5e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004c62:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d1ef      	bne.n	8004c4a <HAL_RCC_OscConfig+0x2ce>
          HAL_Delay(1);
#endif
        }

        /* Set LSI1 division factor */
        tmpreg1 &= ~RCC_BDCR1_LSI1PREDIV;
 8004c6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c6c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004c70:	62bb      	str	r3, [r7, #40]	@ 0x28
        tmpreg1 |= RCC_OscInitStruct->LSIDiv;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	69db      	ldr	r3, [r3, #28]
 8004c76:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      /* Enable Concerned LSI */
      tmpreg1 |= RCC_OscInitStruct->LSIState;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	699b      	ldr	r3, [r3, #24]
 8004c80:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004c82:	4313      	orrs	r3, r2
 8004c84:	62bb      	str	r3, [r7, #40]	@ 0x28
      RCC->BDCR1 = tmpreg1;
 8004c86:	4a81      	ldr	r2, [pc, #516]	@ (8004e8c <HAL_RCC_OscConfig+0x510>)
 8004c88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c8a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c8e:	f7fc ffb1 	bl	8001bf4 <HAL_GetTick>
 8004c92:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI is ready : LSIRDY bit is position ON shifted by 1 */
      while (READ_BIT(RCC->BDCR1, (RCC_OscInitStruct->LSIState << 1)) == 0x00u)
 8004c94:	e008      	b.n	8004ca8 <HAL_RCC_OscConfig+0x32c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c96:	f7fc ffad 	bl	8001bf4 <HAL_GetTick>
 8004c9a:	4602      	mov	r2, r0
 8004c9c:	69fb      	ldr	r3, [r7, #28]
 8004c9e:	1ad3      	subs	r3, r2, r3
 8004ca0:	2b14      	cmp	r3, #20
 8004ca2:	d901      	bls.n	8004ca8 <HAL_RCC_OscConfig+0x32c>
        {
          return HAL_TIMEOUT;
 8004ca4:	2303      	movs	r3, #3
 8004ca6:	e273      	b.n	8005190 <HAL_RCC_OscConfig+0x814>
      while (READ_BIT(RCC->BDCR1, (RCC_OscInitStruct->LSIState << 1)) == 0x00u)
 8004ca8:	4b78      	ldr	r3, [pc, #480]	@ (8004e8c <HAL_RCC_OscConfig+0x510>)
 8004caa:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	699b      	ldr	r3, [r3, #24]
 8004cb2:	005b      	lsls	r3, r3, #1
 8004cb4:	4013      	ands	r3, r2
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d0ed      	beq.n	8004c96 <HAL_RCC_OscConfig+0x31a>
        }
      }

#if defined(RCC_LSI2_SUPPORT)
      /* Disable other LSI in case it was ON */
      mask ^= RCC_OscInitStruct->LSIState;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	699b      	ldr	r3, [r3, #24]
 8004cbe:	69ba      	ldr	r2, [r7, #24]
 8004cc0:	4053      	eors	r3, r2
 8004cc2:	61bb      	str	r3, [r7, #24]
      tmpreg1 &= ~mask;
 8004cc4:	69bb      	ldr	r3, [r7, #24]
 8004cc6:	43db      	mvns	r3, r3
 8004cc8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004cca:	4013      	ands	r3, r2
 8004ccc:	62bb      	str	r3, [r7, #40]	@ 0x28
      RCC->BDCR1 = tmpreg1;
 8004cce:	4a6f      	ldr	r2, [pc, #444]	@ (8004e8c <HAL_RCC_OscConfig+0x510>)
 8004cd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cd2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cd6:	f7fc ff8d 	bl	8001bf4 <HAL_GetTick>
 8004cda:	61f8      	str	r0, [r7, #28]

      /* Wait till other LSI is disabled */
      while (READ_BIT(RCC->BDCR1, (mask << 1)) != 0x00u)
 8004cdc:	e008      	b.n	8004cf0 <HAL_RCC_OscConfig+0x374>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004cde:	f7fc ff89 	bl	8001bf4 <HAL_GetTick>
 8004ce2:	4602      	mov	r2, r0
 8004ce4:	69fb      	ldr	r3, [r7, #28]
 8004ce6:	1ad3      	subs	r3, r2, r3
 8004ce8:	2b14      	cmp	r3, #20
 8004cea:	d901      	bls.n	8004cf0 <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 8004cec:	2303      	movs	r3, #3
 8004cee:	e24f      	b.n	8005190 <HAL_RCC_OscConfig+0x814>
      while (READ_BIT(RCC->BDCR1, (mask << 1)) != 0x00u)
 8004cf0:	4b66      	ldr	r3, [pc, #408]	@ (8004e8c <HAL_RCC_OscConfig+0x510>)
 8004cf2:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8004cf6:	69bb      	ldr	r3, [r7, #24]
 8004cf8:	005b      	lsls	r3, r3, #1
 8004cfa:	4013      	ands	r3, r2
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d1ee      	bne.n	8004cde <HAL_RCC_OscConfig+0x362>
 8004d00:	e01d      	b.n	8004d3e <HAL_RCC_OscConfig+0x3c2>
#endif
    }
    else
    {
      /* Disable the Internal Low Speed oscillator LSI1 and LSI2 is available */
      tmpreg1 &= ~mask;
 8004d02:	69bb      	ldr	r3, [r7, #24]
 8004d04:	43db      	mvns	r3, r3
 8004d06:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004d08:	4013      	ands	r3, r2
 8004d0a:	62bb      	str	r3, [r7, #40]	@ 0x28
      RCC->BDCR1 = tmpreg1;
 8004d0c:	4a5f      	ldr	r2, [pc, #380]	@ (8004e8c <HAL_RCC_OscConfig+0x510>)
 8004d0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d10:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d14:	f7fc ff6e 	bl	8001bf4 <HAL_GetTick>
 8004d18:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI is disabled : LSIRDY bit position is ON shifted by 1 */
      while (READ_BIT(RCC->BDCR1, (mask << 1)) != 0x00u)
 8004d1a:	e008      	b.n	8004d2e <HAL_RCC_OscConfig+0x3b2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d1c:	f7fc ff6a 	bl	8001bf4 <HAL_GetTick>
 8004d20:	4602      	mov	r2, r0
 8004d22:	69fb      	ldr	r3, [r7, #28]
 8004d24:	1ad3      	subs	r3, r2, r3
 8004d26:	2b14      	cmp	r3, #20
 8004d28:	d901      	bls.n	8004d2e <HAL_RCC_OscConfig+0x3b2>
        {
          return HAL_TIMEOUT;
 8004d2a:	2303      	movs	r3, #3
 8004d2c:	e230      	b.n	8005190 <HAL_RCC_OscConfig+0x814>
      while (READ_BIT(RCC->BDCR1, (mask << 1)) != 0x00u)
 8004d2e:	4b57      	ldr	r3, [pc, #348]	@ (8004e8c <HAL_RCC_OscConfig+0x510>)
 8004d30:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8004d34:	69bb      	ldr	r3, [r7, #24]
 8004d36:	005b      	lsls	r3, r3, #1
 8004d38:	4013      	ands	r3, r2
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d1ee      	bne.n	8004d1c <HAL_RCC_OscConfig+0x3a0>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004d3e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004d42:	2b01      	cmp	r3, #1
 8004d44:	d107      	bne.n	8004d56 <HAL_RCC_OscConfig+0x3da>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d46:	4b51      	ldr	r3, [pc, #324]	@ (8004e8c <HAL_RCC_OscConfig+0x510>)
 8004d48:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004d4c:	4a4f      	ldr	r2, [pc, #316]	@ (8004e8c <HAL_RCC_OscConfig+0x510>)
 8004d4e:	f023 0304 	bic.w	r3, r3, #4
 8004d52:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f003 0304 	and.w	r3, r3, #4
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	f000 80e2 	beq.w	8004f28 <HAL_RCC_OscConfig+0x5ac>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d64:	2300      	movs	r3, #0
 8004d66:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_ENABLED() != 0x01)
 8004d6a:	4b48      	ldr	r3, [pc, #288]	@ (8004e8c <HAL_RCC_OscConfig+0x510>)
 8004d6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004d70:	f003 0304 	and.w	r3, r3, #4
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d111      	bne.n	8004d9c <HAL_RCC_OscConfig+0x420>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d78:	4b44      	ldr	r3, [pc, #272]	@ (8004e8c <HAL_RCC_OscConfig+0x510>)
 8004d7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004d7e:	4a43      	ldr	r2, [pc, #268]	@ (8004e8c <HAL_RCC_OscConfig+0x510>)
 8004d80:	f043 0304 	orr.w	r3, r3, #4
 8004d84:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8004d88:	4b40      	ldr	r3, [pc, #256]	@ (8004e8c <HAL_RCC_OscConfig+0x510>)
 8004d8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004d8e:	f003 0304 	and.w	r3, r3, #4
 8004d92:	60fb      	str	r3, [r7, #12]
 8004d94:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004d96:	2301      	movs	r3, #1
 8004d98:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004d9c:	4b3a      	ldr	r3, [pc, #232]	@ (8004e88 <HAL_RCC_OscConfig+0x50c>)
 8004d9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004da0:	f003 0301 	and.w	r3, r3, #1
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d118      	bne.n	8004dda <HAL_RCC_OscConfig+0x45e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8004da8:	4b37      	ldr	r3, [pc, #220]	@ (8004e88 <HAL_RCC_OscConfig+0x50c>)
 8004daa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dac:	4a36      	ldr	r2, [pc, #216]	@ (8004e88 <HAL_RCC_OscConfig+0x50c>)
 8004dae:	f043 0301 	orr.w	r3, r3, #1
 8004db2:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004db4:	f7fc ff1e 	bl	8001bf4 <HAL_GetTick>
 8004db8:	61f8      	str	r0, [r7, #28]

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004dba:	e008      	b.n	8004dce <HAL_RCC_OscConfig+0x452>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004dbc:	f7fc ff1a 	bl	8001bf4 <HAL_GetTick>
 8004dc0:	4602      	mov	r2, r0
 8004dc2:	69fb      	ldr	r3, [r7, #28]
 8004dc4:	1ad3      	subs	r3, r2, r3
 8004dc6:	2b02      	cmp	r3, #2
 8004dc8:	d901      	bls.n	8004dce <HAL_RCC_OscConfig+0x452>
        {
          return HAL_TIMEOUT;
 8004dca:	2303      	movs	r3, #3
 8004dcc:	e1e0      	b.n	8005190 <HAL_RCC_OscConfig+0x814>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004dce:	4b2e      	ldr	r3, [pc, #184]	@ (8004e88 <HAL_RCC_OscConfig+0x50c>)
 8004dd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dd2:	f003 0301 	and.w	r3, r3, #1
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d0f0      	beq.n	8004dbc <HAL_RCC_OscConfig+0x440>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	68db      	ldr	r3, [r3, #12]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d056      	beq.n	8004e90 <HAL_RCC_OscConfig+0x514>
    {
      /* If LSE is already on or in bypass mode, only LSE system can be modified */
      tmpreg1 = (RCC->BDCR1 & ~RCC_BDCR1_LSESYSEN);
 8004de2:	4b2a      	ldr	r3, [pc, #168]	@ (8004e8c <HAL_RCC_OscConfig+0x510>)
 8004de4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004de8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004dec:	62bb      	str	r3, [r7, #40]	@ 0x28
      tmpreg1 |= RCC_OscInitStruct->LSEState;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	68db      	ldr	r3, [r3, #12]
 8004df2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004df4:	4313      	orrs	r3, r2
 8004df6:	62bb      	str	r3, [r7, #40]	@ 0x28
      RCC->BDCR1 = tmpreg1;
 8004df8:	4a24      	ldr	r2, [pc, #144]	@ (8004e8c <HAL_RCC_OscConfig+0x510>)
 8004dfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dfc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e00:	f7fc fef8 	bl	8001bf4 <HAL_GetTick>
 8004e04:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR1, RCC_BDCR1_LSERDY) == 0U)
 8004e06:	e00a      	b.n	8004e1e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e08:	f7fc fef4 	bl	8001bf4 <HAL_GetTick>
 8004e0c:	4602      	mov	r2, r0
 8004e0e:	69fb      	ldr	r3, [r7, #28]
 8004e10:	1ad3      	subs	r3, r2, r3
 8004e12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d901      	bls.n	8004e1e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8004e1a:	2303      	movs	r3, #3
 8004e1c:	e1b8      	b.n	8005190 <HAL_RCC_OscConfig+0x814>
      while (READ_BIT(RCC->BDCR1, RCC_BDCR1_LSERDY) == 0U)
 8004e1e:	4b1b      	ldr	r3, [pc, #108]	@ (8004e8c <HAL_RCC_OscConfig+0x510>)
 8004e20:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004e24:	f003 0302 	and.w	r3, r3, #2
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d0ed      	beq.n	8004e08 <HAL_RCC_OscConfig+0x48c>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR1_LSESYSEN) != 0U)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	68db      	ldr	r3, [r3, #12]
 8004e30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d01e      	beq.n	8004e76 <HAL_RCC_OscConfig+0x4fa>
      {
        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR1, RCC_BDCR1_LSESYSRDY) == 0U)
 8004e38:	e00a      	b.n	8004e50 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e3a:	f7fc fedb 	bl	8001bf4 <HAL_GetTick>
 8004e3e:	4602      	mov	r2, r0
 8004e40:	69fb      	ldr	r3, [r7, #28]
 8004e42:	1ad3      	subs	r3, r2, r3
 8004e44:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d901      	bls.n	8004e50 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8004e4c:	2303      	movs	r3, #3
 8004e4e:	e19f      	b.n	8005190 <HAL_RCC_OscConfig+0x814>
        while (READ_BIT(RCC->BDCR1, RCC_BDCR1_LSESYSRDY) == 0U)
 8004e50:	4b0e      	ldr	r3, [pc, #56]	@ (8004e8c <HAL_RCC_OscConfig+0x510>)
 8004e52:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004e56:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d0ed      	beq.n	8004e3a <HAL_RCC_OscConfig+0x4be>
 8004e5e:	e057      	b.n	8004f10 <HAL_RCC_OscConfig+0x594>
      else
      {
        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR1, RCC_BDCR1_LSESYSRDY) != 0U)
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e60:	f7fc fec8 	bl	8001bf4 <HAL_GetTick>
 8004e64:	4602      	mov	r2, r0
 8004e66:	69fb      	ldr	r3, [r7, #28]
 8004e68:	1ad3      	subs	r3, r2, r3
 8004e6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d901      	bls.n	8004e76 <HAL_RCC_OscConfig+0x4fa>
          {
            return HAL_TIMEOUT;
 8004e72:	2303      	movs	r3, #3
 8004e74:	e18c      	b.n	8005190 <HAL_RCC_OscConfig+0x814>
        while (READ_BIT(RCC->BDCR1, RCC_BDCR1_LSESYSRDY) != 0U)
 8004e76:	4b05      	ldr	r3, [pc, #20]	@ (8004e8c <HAL_RCC_OscConfig+0x510>)
 8004e78:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004e7c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d1ed      	bne.n	8004e60 <HAL_RCC_OscConfig+0x4e4>
 8004e84:	e044      	b.n	8004f10 <HAL_RCC_OscConfig+0x594>
 8004e86:	bf00      	nop
 8004e88:	46020800 	.word	0x46020800
 8004e8c:	46020c00 	.word	0x46020c00
        }
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR1, (RCC_BDCR1_LSEON | RCC_BDCR1_LSESYSEN));
 8004e90:	4b8a      	ldr	r3, [pc, #552]	@ (80050bc <HAL_RCC_OscConfig+0x740>)
 8004e92:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004e96:	4a89      	ldr	r2, [pc, #548]	@ (80050bc <HAL_RCC_OscConfig+0x740>)
 8004e98:	f023 0381 	bic.w	r3, r3, #129	@ 0x81
 8004e9c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR1, RCC_BDCR1_LSEBYP);
 8004ea0:	4b86      	ldr	r3, [pc, #536]	@ (80050bc <HAL_RCC_OscConfig+0x740>)
 8004ea2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004ea6:	4a85      	ldr	r2, [pc, #532]	@ (80050bc <HAL_RCC_OscConfig+0x740>)
 8004ea8:	f023 0304 	bic.w	r3, r3, #4
 8004eac:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004eb0:	f7fc fea0 	bl	8001bf4 <HAL_GetTick>
 8004eb4:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR1, RCC_BDCR1_LSERDY) != 0U)
 8004eb6:	e00a      	b.n	8004ece <HAL_RCC_OscConfig+0x552>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004eb8:	f7fc fe9c 	bl	8001bf4 <HAL_GetTick>
 8004ebc:	4602      	mov	r2, r0
 8004ebe:	69fb      	ldr	r3, [r7, #28]
 8004ec0:	1ad3      	subs	r3, r2, r3
 8004ec2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d901      	bls.n	8004ece <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004eca:	2303      	movs	r3, #3
 8004ecc:	e160      	b.n	8005190 <HAL_RCC_OscConfig+0x814>
      while (READ_BIT(RCC->BDCR1, RCC_BDCR1_LSERDY) != 0U)
 8004ece:	4b7b      	ldr	r3, [pc, #492]	@ (80050bc <HAL_RCC_OscConfig+0x740>)
 8004ed0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004ed4:	f003 0302 	and.w	r3, r3, #2
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d1ed      	bne.n	8004eb8 <HAL_RCC_OscConfig+0x53c>
        }
      }

      if (READ_BIT(RCC->BDCR1, RCC_BDCR1_LSESYSEN) != 0U)
 8004edc:	4b77      	ldr	r3, [pc, #476]	@ (80050bc <HAL_RCC_OscConfig+0x740>)
 8004ede:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004ee2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d012      	beq.n	8004f10 <HAL_RCC_OscConfig+0x594>
      {
        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR1, RCC_BDCR1_LSESYSRDY) != 0U)
 8004eea:	e00a      	b.n	8004f02 <HAL_RCC_OscConfig+0x586>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004eec:	f7fc fe82 	bl	8001bf4 <HAL_GetTick>
 8004ef0:	4602      	mov	r2, r0
 8004ef2:	69fb      	ldr	r3, [r7, #28]
 8004ef4:	1ad3      	subs	r3, r2, r3
 8004ef6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d901      	bls.n	8004f02 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8004efe:	2303      	movs	r3, #3
 8004f00:	e146      	b.n	8005190 <HAL_RCC_OscConfig+0x814>
        while (READ_BIT(RCC->BDCR1, RCC_BDCR1_LSESYSRDY) != 0U)
 8004f02:	4b6e      	ldr	r3, [pc, #440]	@ (80050bc <HAL_RCC_OscConfig+0x740>)
 8004f04:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004f08:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d1ed      	bne.n	8004eec <HAL_RCC_OscConfig+0x570>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004f10:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004f14:	2b01      	cmp	r3, #1
 8004f16:	d107      	bne.n	8004f28 <HAL_RCC_OscConfig+0x5ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f18:	4b68      	ldr	r3, [pc, #416]	@ (80050bc <HAL_RCC_OscConfig+0x740>)
 8004f1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004f1e:	4a67      	ldr	r2, [pc, #412]	@ (80050bc <HAL_RCC_OscConfig+0x740>)
 8004f20:	f023 0304 	bic.w	r3, r3, #4
 8004f24:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL1.PLLState));

  if ((RCC_OscInitStruct->PLL1.PLLState) != RCC_PLL_NONE)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6a1b      	ldr	r3, [r3, #32]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	f000 812e 	beq.w	800518e <HAL_RCC_OscConfig+0x812>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004f32:	6a3b      	ldr	r3, [r7, #32]
 8004f34:	2b0c      	cmp	r3, #12
 8004f36:	f000 80ba 	beq.w	80050ae <HAL_RCC_OscConfig+0x732>
    {
      if ((RCC_OscInitStruct->PLL1.PLLState) == RCC_PLL_ON)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6a1b      	ldr	r3, [r3, #32]
 8004f3e:	2b02      	cmp	r3, #2
 8004f40:	f040 8093 	bne.w	800506a <HAL_RCC_OscConfig+0x6ee>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL1.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL1.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL1.PLLR));

        /* Disable the main PLL1. */
        tmpreg1 = (RCC->CR & ~RCC_CR_PLL1ON);
 8004f44:	4b5d      	ldr	r3, [pc, #372]	@ (80050bc <HAL_RCC_OscConfig+0x740>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004f4c:	62bb      	str	r3, [r7, #40]	@ 0x28
        RCC->CR = tmpreg1;
 8004f4e:	4a5b      	ldr	r2, [pc, #364]	@ (80050bc <HAL_RCC_OscConfig+0x740>)
 8004f50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f54:	f7fc fe4e 	bl	8001bf4 <HAL_GetTick>
 8004f58:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL1 is disabled */
        do
        {
          tmpreg1 = RCC->CR;
 8004f5a:	4b58      	ldr	r3, [pc, #352]	@ (80050bc <HAL_RCC_OscConfig+0x740>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	62bb      	str	r3, [r7, #40]	@ 0x28
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f60:	f7fc fe48 	bl	8001bf4 <HAL_GetTick>
 8004f64:	4602      	mov	r2, r0
 8004f66:	69fb      	ldr	r3, [r7, #28]
 8004f68:	1ad3      	subs	r3, r2, r3
 8004f6a:	2b02      	cmp	r3, #2
 8004f6c:	d901      	bls.n	8004f72 <HAL_RCC_OscConfig+0x5f6>
          {
            return HAL_TIMEOUT;
 8004f6e:	2303      	movs	r3, #3
 8004f70:	e10e      	b.n	8005190 <HAL_RCC_OscConfig+0x814>
          }
        } while ((tmpreg1 & RCC_CR_PLL1RDY) != 0U);
 8004f72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f74:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d1ee      	bne.n	8004f5a <HAL_RCC_OscConfig+0x5de>

        /* Compute VCO input frequency and define range accordingly. First check clock source frequency */
        if (RCC_OscInitStruct->PLL1.PLLSource == RCC_PLLSOURCE_HSE)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f80:	2b03      	cmp	r3, #3
 8004f82:	d108      	bne.n	8004f96 <HAL_RCC_OscConfig+0x61a>
        {
          /* Clock source is HSE or HSE/2 */
          pllsrc = HSE_VALUE >> ((tmpreg1 & RCC_CR_HSEPRE) >> RCC_CR_HSEPRE_Pos);
 8004f84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f86:	0d1b      	lsrs	r3, r3, #20
 8004f88:	f003 0301 	and.w	r3, r3, #1
 8004f8c:	4a4c      	ldr	r2, [pc, #304]	@ (80050c0 <HAL_RCC_OscConfig+0x744>)
 8004f8e:	fa22 f303 	lsr.w	r3, r2, r3
 8004f92:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004f94:	e001      	b.n	8004f9a <HAL_RCC_OscConfig+0x61e>
        }
        else
        {
          /* Clock source is HSI */
          pllsrc = HSI_VALUE;
 8004f96:	4b4b      	ldr	r3, [pc, #300]	@ (80050c4 <HAL_RCC_OscConfig+0x748>)
 8004f98:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }

        /* Compute VCO input frequency depending on M divider */
        pllsrc = (pllsrc / RCC_OscInitStruct->PLL1.PLLM);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f9e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004fa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fa4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        assert_param(IS_RCC_PLL_VCOINPUTFREQ(pllsrc));

        if (pllsrc > PLL_INPUTRANGE0_FREQMAX)
 8004fa6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fa8:	4a47      	ldr	r2, [pc, #284]	@ (80050c8 <HAL_RCC_OscConfig+0x74c>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d902      	bls.n	8004fb4 <HAL_RCC_OscConfig+0x638>
        {
          /* Reuse pllsrc local variable to store range */
          pllsrc = RCC_PLL_VCOINPUT_RANGE1;
 8004fae:	230c      	movs	r3, #12
 8004fb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004fb2:	e001      	b.n	8004fb8 <HAL_RCC_OscConfig+0x63c>
        }
        else
        {
          /* Reuse pllsrc local variable to store range */
          pllsrc = RCC_PLL_VCOINPUT_RANGE0;
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }

        /* Configure PLL1 source, PLLM divider, VCO input range and enable PLL1R output. Clear also FRACEN*/
        tmpreg2 = RCC->PLL1CFGR;
 8004fb8:	4b40      	ldr	r3, [pc, #256]	@ (80050bc <HAL_RCC_OscConfig+0x740>)
 8004fba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fbc:	617b      	str	r3, [r7, #20]
        tmpreg2 &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1RGE | RCC_PLL1CFGR_PLL1FRACEN | RCC_PLL1CFGR_PLL1M);
 8004fbe:	697b      	ldr	r3, [r7, #20]
 8004fc0:	f423 63e3 	bic.w	r3, r3, #1816	@ 0x718
 8004fc4:	f023 0307 	bic.w	r3, r3, #7
 8004fc8:	617b      	str	r3, [r7, #20]
        tmpreg2 |= (RCC_OscInitStruct->PLL1.PLLSource | pllsrc |
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004fce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fd0:	431a      	orrs	r2, r3
                    ((RCC_OscInitStruct->PLL1.PLLM - 1u) << RCC_PLL1CFGR_PLL1M_Pos) | RCC_PLL1CFGR_PLL1REN);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fd6:	3b01      	subs	r3, #1
 8004fd8:	021b      	lsls	r3, r3, #8
        tmpreg2 |= (RCC_OscInitStruct->PLL1.PLLSource | pllsrc |
 8004fda:	431a      	orrs	r2, r3
 8004fdc:	697b      	ldr	r3, [r7, #20]
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004fe4:	617b      	str	r3, [r7, #20]
        RCC->PLL1CFGR = tmpreg2;
 8004fe6:	4a35      	ldr	r2, [pc, #212]	@ (80050bc <HAL_RCC_OscConfig+0x740>)
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLLN multiplication factor and PLLP, PLLQ, PLLR dividers */
        tmpreg2 = ((RCC_OscInitStruct->PLL1.PLLN - 1u) |
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ff0:	1e5a      	subs	r2, r3, #1
                   ((RCC_OscInitStruct->PLL1.PLLP - 1u) << RCC_PLL1DIVR_PLL1P_Pos) |
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ff6:	3b01      	subs	r3, #1
 8004ff8:	025b      	lsls	r3, r3, #9
        tmpreg2 = ((RCC_OscInitStruct->PLL1.PLLN - 1u) |
 8004ffa:	431a      	orrs	r2, r3
                   ((RCC_OscInitStruct->PLL1.PLLQ - 1u) << RCC_PLL1DIVR_PLL1Q_Pos) |
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005000:	3b01      	subs	r3, #1
 8005002:	041b      	lsls	r3, r3, #16
                   ((RCC_OscInitStruct->PLL1.PLLP - 1u) << RCC_PLL1DIVR_PLL1P_Pos) |
 8005004:	431a      	orrs	r2, r3
                   ((RCC_OscInitStruct->PLL1.PLLR - 1u) << RCC_PLL1DIVR_PLL1R_Pos));
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800500a:	3b01      	subs	r3, #1
 800500c:	061b      	lsls	r3, r3, #24
        tmpreg2 = ((RCC_OscInitStruct->PLL1.PLLN - 1u) |
 800500e:	4313      	orrs	r3, r2
 8005010:	617b      	str	r3, [r7, #20]
        RCC->PLL1DIVR = tmpreg2;
 8005012:	4a2a      	ldr	r2, [pc, #168]	@ (80050bc <HAL_RCC_OscConfig+0x740>)
 8005014:	697b      	ldr	r3, [r7, #20]
 8005016:	6353      	str	r3, [r2, #52]	@ 0x34

        if (RCC_OscInitStruct->PLL1.PLLFractional != 0x00u)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800501c:	2b00      	cmp	r3, #0
 800501e:	d00a      	beq.n	8005036 <HAL_RCC_OscConfig+0x6ba>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL1.PLLFractional));

          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLL1_FRACN_CONFIG(RCC_OscInitStruct->PLL1.PLLFractional);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005024:	4a25      	ldr	r2, [pc, #148]	@ (80050bc <HAL_RCC_OscConfig+0x740>)
 8005026:	00db      	lsls	r3, r3, #3
 8005028:	6393      	str	r3, [r2, #56]	@ 0x38

          /* Enable PLL1FRACEN */
          __HAL_RCC_PLL1_FRACN_ENABLE();
 800502a:	4b24      	ldr	r3, [pc, #144]	@ (80050bc <HAL_RCC_OscConfig+0x740>)
 800502c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800502e:	4a23      	ldr	r2, [pc, #140]	@ (80050bc <HAL_RCC_OscConfig+0x740>)
 8005030:	f043 0310 	orr.w	r3, r3, #16
 8005034:	6293      	str	r3, [r2, #40]	@ 0x28
        }

        /* Enable the main PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 8005036:	4b21      	ldr	r3, [pc, #132]	@ (80050bc <HAL_RCC_OscConfig+0x740>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4a20      	ldr	r2, [pc, #128]	@ (80050bc <HAL_RCC_OscConfig+0x740>)
 800503c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005040:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005042:	f7fc fdd7 	bl	8001bf4 <HAL_GetTick>
 8005046:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8005048:	e008      	b.n	800505c <HAL_RCC_OscConfig+0x6e0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800504a:	f7fc fdd3 	bl	8001bf4 <HAL_GetTick>
 800504e:	4602      	mov	r2, r0
 8005050:	69fb      	ldr	r3, [r7, #28]
 8005052:	1ad3      	subs	r3, r2, r3
 8005054:	2b02      	cmp	r3, #2
 8005056:	d901      	bls.n	800505c <HAL_RCC_OscConfig+0x6e0>
          {
            return HAL_TIMEOUT;
 8005058:	2303      	movs	r3, #3
 800505a:	e099      	b.n	8005190 <HAL_RCC_OscConfig+0x814>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800505c:	4b17      	ldr	r3, [pc, #92]	@ (80050bc <HAL_RCC_OscConfig+0x740>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005064:	2b00      	cmp	r3, #0
 8005066:	d0f0      	beq.n	800504a <HAL_RCC_OscConfig+0x6ce>
 8005068:	e091      	b.n	800518e <HAL_RCC_OscConfig+0x812>
        }
      }
      else
      {
        /* Disable the main PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 800506a:	4b14      	ldr	r3, [pc, #80]	@ (80050bc <HAL_RCC_OscConfig+0x740>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4a13      	ldr	r2, [pc, #76]	@ (80050bc <HAL_RCC_OscConfig+0x740>)
 8005070:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005074:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005076:	f7fc fdbd 	bl	8001bf4 <HAL_GetTick>
 800507a:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800507c:	e008      	b.n	8005090 <HAL_RCC_OscConfig+0x714>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800507e:	f7fc fdb9 	bl	8001bf4 <HAL_GetTick>
 8005082:	4602      	mov	r2, r0
 8005084:	69fb      	ldr	r3, [r7, #28]
 8005086:	1ad3      	subs	r3, r2, r3
 8005088:	2b02      	cmp	r3, #2
 800508a:	d901      	bls.n	8005090 <HAL_RCC_OscConfig+0x714>
          {
            return HAL_TIMEOUT;
 800508c:	2303      	movs	r3, #3
 800508e:	e07f      	b.n	8005190 <HAL_RCC_OscConfig+0x814>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005090:	4b0a      	ldr	r3, [pc, #40]	@ (80050bc <HAL_RCC_OscConfig+0x740>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005098:	2b00      	cmp	r3, #0
 800509a:	d1f0      	bne.n	800507e <HAL_RCC_OscConfig+0x702>
          }
        }

        /* CLear the PLL1 source and disable outputs to save power when PLL1 is off */
        CLEAR_BIT(RCC->PLL1CFGR, (RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | \
 800509c:	4b07      	ldr	r3, [pc, #28]	@ (80050bc <HAL_RCC_OscConfig+0x740>)
 800509e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050a0:	4a06      	ldr	r2, [pc, #24]	@ (80050bc <HAL_RCC_OscConfig+0x740>)
 80050a2:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 80050a6:	f023 0303 	bic.w	r3, r3, #3
 80050aa:	6293      	str	r3, [r2, #40]	@ 0x28
 80050ac:	e06f      	b.n	800518e <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL1 used as System clock source */
      if ((RCC_OscInitStruct->PLL1.PLLState) == RCC_PLL_OFF)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6a1b      	ldr	r3, [r3, #32]
 80050b2:	2b01      	cmp	r3, #1
 80050b4:	d10a      	bne.n	80050cc <HAL_RCC_OscConfig+0x750>
      {
        return HAL_ERROR;
 80050b6:	2301      	movs	r3, #1
 80050b8:	e06a      	b.n	8005190 <HAL_RCC_OscConfig+0x814>
 80050ba:	bf00      	nop
 80050bc:	46020c00 	.word	0x46020c00
 80050c0:	01e84800 	.word	0x01e84800
 80050c4:	00f42400 	.word	0x00f42400
 80050c8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        tmpreg1 = RCC->PLL1CFGR;
 80050cc:	4b32      	ldr	r3, [pc, #200]	@ (8005198 <HAL_RCC_OscConfig+0x81c>)
 80050ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050d0:	62bb      	str	r3, [r7, #40]	@ 0x28
        tmpreg2 = RCC->PLL1DIVR;
 80050d2:	4b31      	ldr	r3, [pc, #196]	@ (8005198 <HAL_RCC_OscConfig+0x81c>)
 80050d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050d6:	617b      	str	r3, [r7, #20]

        if (((tmpreg1 & RCC_PLL1CFGR_PLL1SRC) != RCC_OscInitStruct->PLL1.PLLSource) ||
 80050d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050da:	f003 0203 	and.w	r2, r3, #3
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050e2:	429a      	cmp	r2, r3
 80050e4:	d12b      	bne.n	800513e <HAL_RCC_OscConfig+0x7c2>
            (((tmpreg1 & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) != (RCC_OscInitStruct->PLL1.PLLM - 1u)) ||
 80050e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050e8:	0a1b      	lsrs	r3, r3, #8
 80050ea:	f003 0207 	and.w	r2, r3, #7
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050f2:	3b01      	subs	r3, #1
        if (((tmpreg1 & RCC_PLL1CFGR_PLL1SRC) != RCC_OscInitStruct->PLL1.PLLSource) ||
 80050f4:	429a      	cmp	r2, r3
 80050f6:	d122      	bne.n	800513e <HAL_RCC_OscConfig+0x7c2>
            (((tmpreg2 & RCC_PLL1DIVR_PLL1N) >> RCC_PLL1DIVR_PLL1N_Pos) != (RCC_OscInitStruct->PLL1.PLLN - 1u)) ||
 80050f8:	697b      	ldr	r3, [r7, #20]
 80050fa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005102:	3b01      	subs	r3, #1
            (((tmpreg1 & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) != (RCC_OscInitStruct->PLL1.PLLM - 1u)) ||
 8005104:	429a      	cmp	r2, r3
 8005106:	d11a      	bne.n	800513e <HAL_RCC_OscConfig+0x7c2>
            (((tmpreg2 & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) != (RCC_OscInitStruct->PLL1.PLLP - 1u)) ||
 8005108:	697b      	ldr	r3, [r7, #20]
 800510a:	0a5b      	lsrs	r3, r3, #9
 800510c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005114:	3b01      	subs	r3, #1
            (((tmpreg2 & RCC_PLL1DIVR_PLL1N) >> RCC_PLL1DIVR_PLL1N_Pos) != (RCC_OscInitStruct->PLL1.PLLN - 1u)) ||
 8005116:	429a      	cmp	r2, r3
 8005118:	d111      	bne.n	800513e <HAL_RCC_OscConfig+0x7c2>
            (((tmpreg2 & RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) != (RCC_OscInitStruct->PLL1.PLLQ - 1u)) ||
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	0c1b      	lsrs	r3, r3, #16
 800511e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005126:	3b01      	subs	r3, #1
            (((tmpreg2 & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) != (RCC_OscInitStruct->PLL1.PLLP - 1u)) ||
 8005128:	429a      	cmp	r2, r3
 800512a:	d108      	bne.n	800513e <HAL_RCC_OscConfig+0x7c2>
            (((tmpreg2 & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) != (RCC_OscInitStruct->PLL1.PLLR - 1u)))
 800512c:	697b      	ldr	r3, [r7, #20]
 800512e:	0e1b      	lsrs	r3, r3, #24
 8005130:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005138:	3b01      	subs	r3, #1
            (((tmpreg2 & RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) != (RCC_OscInitStruct->PLL1.PLLQ - 1u)) ||
 800513a:	429a      	cmp	r2, r3
 800513c:	d001      	beq.n	8005142 <HAL_RCC_OscConfig+0x7c6>
        {
          return HAL_ERROR;
 800513e:	2301      	movs	r3, #1
 8005140:	e026      	b.n	8005190 <HAL_RCC_OscConfig+0x814>
        }
        else
        {
          /* Check if only fractional part needs to be updated  */
          tmpreg1 = ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos);
 8005142:	4b15      	ldr	r3, [pc, #84]	@ (8005198 <HAL_RCC_OscConfig+0x81c>)
 8005144:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005146:	08db      	lsrs	r3, r3, #3
 8005148:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800514c:	62bb      	str	r3, [r7, #40]	@ 0x28

          if (RCC_OscInitStruct->PLL1.PLLFractional != tmpreg1)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005152:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005154:	429a      	cmp	r2, r3
 8005156:	d01a      	beq.n	800518e <HAL_RCC_OscConfig+0x812>
          {
            assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL1.PLLFractional));

            /* Disable PLL1FRACEN */
            __HAL_RCC_PLL1_FRACN_DISABLE();
 8005158:	4b0f      	ldr	r3, [pc, #60]	@ (8005198 <HAL_RCC_OscConfig+0x81c>)
 800515a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800515c:	4a0e      	ldr	r2, [pc, #56]	@ (8005198 <HAL_RCC_OscConfig+0x81c>)
 800515e:	f023 0310 	bic.w	r3, r3, #16
 8005162:	6293      	str	r3, [r2, #40]	@ 0x28

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005164:	f7fc fd46 	bl	8001bf4 <HAL_GetTick>
 8005168:	61f8      	str	r0, [r7, #28]

            /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
            while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 800516a:	bf00      	nop
 800516c:	f7fc fd42 	bl	8001bf4 <HAL_GetTick>
 8005170:	4602      	mov	r2, r0
 8005172:	69fb      	ldr	r3, [r7, #28]
 8005174:	4293      	cmp	r3, r2
 8005176:	d0f9      	beq.n	800516c <HAL_RCC_OscConfig+0x7f0>
            {
            }

            /* Configure PLL1 PLL1FRACN */
            __HAL_RCC_PLL1_FRACN_CONFIG(RCC_OscInitStruct->PLL1.PLLFractional);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800517c:	4a06      	ldr	r2, [pc, #24]	@ (8005198 <HAL_RCC_OscConfig+0x81c>)
 800517e:	00db      	lsls	r3, r3, #3
 8005180:	6393      	str	r3, [r2, #56]	@ 0x38

            /* Enable PLL1FRACEN to latch new value. */
            __HAL_RCC_PLL1_FRACN_ENABLE();
 8005182:	4b05      	ldr	r3, [pc, #20]	@ (8005198 <HAL_RCC_OscConfig+0x81c>)
 8005184:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005186:	4a04      	ldr	r2, [pc, #16]	@ (8005198 <HAL_RCC_OscConfig+0x81c>)
 8005188:	f043 0310 	orr.w	r3, r3, #16
 800518c:	6293      	str	r3, [r2, #40]	@ 0x28
          }
        }
      }
    }
  }
  return HAL_OK;
 800518e:	2300      	movs	r3, #0
}
 8005190:	4618      	mov	r0, r3
 8005192:	3730      	adds	r7, #48	@ 0x30
 8005194:	46bd      	mov	sp, r7
 8005196:	bd80      	pop	{r7, pc}
 8005198:	46020c00 	.word	0x46020c00

0800519c <HAL_RCC_ClockConfig>:
  *         HCLK5 prescaler is switched automatically by hardware, but configuration shall
  *         always be performed before setting new PLL1 source as Sysclk source.
  * @retval None
  */
HAL_StatusTypeDef  HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef *RCC_ClkInitStruct, uint32_t FLatency)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b086      	sub	sp, #24
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
 80051a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;
  uint32_t update;
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d101      	bne.n	80051b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80051ac:	2301      	movs	r3, #1
 80051ae:	e115      	b.n	80053dc <HAL_RCC_ClockConfig+0x240>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80051b0:	4b8c      	ldr	r3, [pc, #560]	@ (80053e4 <HAL_RCC_ClockConfig+0x248>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f003 030f 	and.w	r3, r3, #15
 80051b8:	683a      	ldr	r2, [r7, #0]
 80051ba:	429a      	cmp	r2, r3
 80051bc:	d910      	bls.n	80051e0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051be:	4b89      	ldr	r3, [pc, #548]	@ (80053e4 <HAL_RCC_ClockConfig+0x248>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f023 020f 	bic.w	r2, r3, #15
 80051c6:	4987      	ldr	r1, [pc, #540]	@ (80053e4 <HAL_RCC_ClockConfig+0x248>)
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	4313      	orrs	r3, r2
 80051cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80051ce:	4b85      	ldr	r3, [pc, #532]	@ (80053e4 <HAL_RCC_ClockConfig+0x248>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f003 030f 	and.w	r3, r3, #15
 80051d6:	683a      	ldr	r2, [r7, #0]
 80051d8:	429a      	cmp	r2, r3
 80051da:	d001      	beq.n	80051e0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80051dc:	2301      	movs	r3, #1
 80051de:	e0fd      	b.n	80053dc <HAL_RCC_ClockConfig+0x240>
  }

  /*-------------------------- HCLK5 Configuration --------------------------*/
  /* HCLK5 prescaler is switched automatically by hardware, but configuration shall
    always be performed before setting new PLL1 source as Sysclk source. */
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK5) == RCC_CLOCKTYPE_HCLK5)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f003 0320 	and.w	r3, r3, #32
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d00d      	beq.n	8005208 <HAL_RCC_ClockConfig+0x6c>
  {
    assert_param(IS_RCC_HCLK5_HSEHSI(RCC_ClkInitStruct->AHB5_HSEHSI_CLKDivider));
    assert_param(IS_RCC_HCLK5_PLL1(RCC_ClkInitStruct->AHB5_PLL1_CLKDivider));
    MODIFY_REG(RCC->CFGR4, (RCC_CFGR4_HDIV5 | RCC_CFGR4_HPRE5),
 80051ec:	4b7e      	ldr	r3, [pc, #504]	@ (80053e8 <HAL_RCC_ClockConfig+0x24c>)
 80051ee:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80051f2:	f023 0217 	bic.w	r2, r3, #23
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6999      	ldr	r1, [r3, #24]
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	69db      	ldr	r3, [r3, #28]
 80051fe:	430b      	orrs	r3, r1
 8005200:	4979      	ldr	r1, [pc, #484]	@ (80053e8 <HAL_RCC_ClockConfig+0x24c>)
 8005202:	4313      	orrs	r3, r2
 8005204:	f8c1 3200 	str.w	r3, [r1, #512]	@ 0x200
               (RCC_ClkInitStruct->AHB5_PLL1_CLKDivider | RCC_ClkInitStruct->AHB5_HSEHSI_CLKDivider));
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f003 0301 	and.w	r3, r3, #1
 8005210:	2b00      	cmp	r3, #0
 8005212:	d06f      	beq.n	80052f4 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* Read CR register */
    tmpreg1 = RCC->CR;
 8005214:	4b74      	ldr	r3, [pc, #464]	@ (80053e8 <HAL_RCC_ClockConfig+0x24c>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	617b      	str	r3, [r7, #20]

    /* PLL1 is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	685b      	ldr	r3, [r3, #4]
 800521e:	2b03      	cmp	r3, #3
 8005220:	d118      	bne.n	8005254 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the PLL1 ready flag */
      if ((tmpreg1 & RCC_CR_PLL1RDY) == 0U)
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005228:	2b00      	cmp	r3, #0
 800522a:	d101      	bne.n	8005230 <HAL_RCC_ClockConfig+0x94>
      {
        return HAL_ERROR;
 800522c:	2301      	movs	r3, #1
 800522e:	e0d5      	b.n	80053dc <HAL_RCC_ClockConfig+0x240>
      }
      else
      {
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR1_SWS_Pos))
 8005230:	4b6d      	ldr	r3, [pc, #436]	@ (80053e8 <HAL_RCC_ClockConfig+0x24c>)
 8005232:	69db      	ldr	r3, [r3, #28]
 8005234:	f003 020c 	and.w	r2, r3, #12
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	685b      	ldr	r3, [r3, #4]
 800523c:	009b      	lsls	r3, r3, #2
 800523e:	429a      	cmp	r2, r3
 8005240:	d01a      	beq.n	8005278 <HAL_RCC_ClockConfig+0xdc>
        {
          /* Whatever is PLL frequency, use step prediv to reach maximum frequency. */
          /* Select pll1r to be prediv with 2-step divider when selected as Sysclk source */
          MODIFY_REG(RCC->PLL1CFGR, RCC_PLL1CFGR_PLL1RCLKPRESTEP, RCC_PLL1CFGR_PLL1RCLKPRE);
 8005242:	4b69      	ldr	r3, [pc, #420]	@ (80053e8 <HAL_RCC_ClockConfig+0x24c>)
 8005244:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005246:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800524a:	4a67      	ldr	r2, [pc, #412]	@ (80053e8 <HAL_RCC_ClockConfig+0x24c>)
 800524c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005250:	6293      	str	r3, [r2, #40]	@ 0x28
 8005252:	e011      	b.n	8005278 <HAL_RCC_ClockConfig+0xdc>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	2b02      	cmp	r3, #2
 800525a:	d106      	bne.n	800526a <HAL_RCC_ClockConfig+0xce>
      {
        /* Check the HSE ready flag */
        if ((tmpreg1 & RCC_CR_HSERDY) == 0U)
 800525c:	697b      	ldr	r3, [r7, #20]
 800525e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005262:	2b00      	cmp	r3, #0
 8005264:	d108      	bne.n	8005278 <HAL_RCC_ClockConfig+0xdc>
        {
          return HAL_ERROR;
 8005266:	2301      	movs	r3, #1
 8005268:	e0b8      	b.n	80053dc <HAL_RCC_ClockConfig+0x240>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if ((tmpreg1 & RCC_CR_HSIRDY) == 0U)
 800526a:	697b      	ldr	r3, [r7, #20]
 800526c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005270:	2b00      	cmp	r3, #0
 8005272:	d101      	bne.n	8005278 <HAL_RCC_ClockConfig+0xdc>
        {
          return HAL_ERROR;
 8005274:	2301      	movs	r3, #1
 8005276:	e0b1      	b.n	80053dc <HAL_RCC_ClockConfig+0x240>
        }
      }
    }

    /* Switch System clock source */
    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005278:	4b5b      	ldr	r3, [pc, #364]	@ (80053e8 <HAL_RCC_ClockConfig+0x24c>)
 800527a:	69db      	ldr	r3, [r3, #28]
 800527c:	f023 0203 	bic.w	r2, r3, #3
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	685b      	ldr	r3, [r3, #4]
 8005284:	4958      	ldr	r1, [pc, #352]	@ (80053e8 <HAL_RCC_ClockConfig+0x24c>)
 8005286:	4313      	orrs	r3, r2
 8005288:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800528a:	f7fc fcb3 	bl	8001bf4 <HAL_GetTick>
 800528e:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR1_SWS_Pos))
 8005290:	e00a      	b.n	80052a8 <HAL_RCC_ClockConfig+0x10c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005292:	f7fc fcaf 	bl	8001bf4 <HAL_GetTick>
 8005296:	4602      	mov	r2, r0
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	1ad3      	subs	r3, r2, r3
 800529c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d901      	bls.n	80052a8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_TIMEOUT;
 80052a4:	2303      	movs	r3, #3
 80052a6:	e099      	b.n	80053dc <HAL_RCC_ClockConfig+0x240>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR1_SWS_Pos))
 80052a8:	4b4f      	ldr	r3, [pc, #316]	@ (80053e8 <HAL_RCC_ClockConfig+0x24c>)
 80052aa:	69db      	ldr	r3, [r3, #28]
 80052ac:	f003 020c 	and.w	r2, r3, #12
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	009b      	lsls	r3, r3, #2
 80052b6:	429a      	cmp	r2, r3
 80052b8:	d1eb      	bne.n	8005292 <HAL_RCC_ClockConfig+0xf6>
      }
    }

    /* If PLL1rCLK is asked to be SYSCLK source, clear prediv. */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	685b      	ldr	r3, [r3, #4]
 80052be:	2b03      	cmp	r3, #3
 80052c0:	d118      	bne.n	80052f4 <HAL_RCC_ClockConfig+0x158>
    {
      /* Set PLL1R prediv to not divided */
      CLEAR_BIT(RCC->PLL1CFGR, RCC_PLL1CFGR_PLL1RCLKPRE);
 80052c2:	4b49      	ldr	r3, [pc, #292]	@ (80053e8 <HAL_RCC_ClockConfig+0x24c>)
 80052c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052c6:	4a48      	ldr	r2, [pc, #288]	@ (80053e8 <HAL_RCC_ClockConfig+0x24c>)
 80052c8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80052cc:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052ce:	f7fc fc91 	bl	8001bf4 <HAL_GetTick>
 80052d2:	60f8      	str	r0, [r7, #12]

      /* Wait until PLL1 not divided is ready */
      while ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1RCLKPRERDY) == 0x00u)
 80052d4:	e008      	b.n	80052e8 <HAL_RCC_ClockConfig+0x14c>
      {
        if ((HAL_GetTick() - tickstart) > PLL1_NDIV_TIMEOUT_VALUE)
 80052d6:	f7fc fc8d 	bl	8001bf4 <HAL_GetTick>
 80052da:	4602      	mov	r2, r0
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	1ad3      	subs	r3, r2, r3
 80052e0:	2b0a      	cmp	r3, #10
 80052e2:	d901      	bls.n	80052e8 <HAL_RCC_ClockConfig+0x14c>
        {
          return HAL_TIMEOUT;
 80052e4:	2303      	movs	r3, #3
 80052e6:	e079      	b.n	80053dc <HAL_RCC_ClockConfig+0x240>
      while ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1RCLKPRERDY) == 0x00u)
 80052e8:	4b3f      	ldr	r3, [pc, #252]	@ (80053e8 <HAL_RCC_ClockConfig+0x24c>)
 80052ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052ec:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d0f0      	beq.n	80052d6 <HAL_RCC_ClockConfig+0x13a>
      }
    }
  }

  /* Get CFGR2 content value, and reset update variable */
  tmpreg1 = RCC->CFGR2;
 80052f4:	4b3c      	ldr	r3, [pc, #240]	@ (80053e8 <HAL_RCC_ClockConfig+0x24c>)
 80052f6:	6a1b      	ldr	r3, [r3, #32]
 80052f8:	617b      	str	r3, [r7, #20]
  update = 0x00u;
 80052fa:	2300      	movs	r3, #0
 80052fc:	613b      	str	r3, [r7, #16]

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f003 0302 	and.w	r3, r3, #2
 8005306:	2b00      	cmp	r3, #0
 8005308:	d00a      	beq.n	8005320 <HAL_RCC_ClockConfig+0x184>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    /* update HCLK1 divider and notify register is required */
    tmpreg1 &= ~RCC_CFGR2_HPRE;
 800530a:	697b      	ldr	r3, [r7, #20]
 800530c:	f023 0307 	bic.w	r3, r3, #7
 8005310:	617b      	str	r3, [r7, #20]
    tmpreg1 |= RCC_ClkInitStruct->AHBCLKDivider;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	689b      	ldr	r3, [r3, #8]
 8005316:	697a      	ldr	r2, [r7, #20]
 8005318:	4313      	orrs	r3, r2
 800531a:	617b      	str	r3, [r7, #20]
    update = 0x01u;
 800531c:	2301      	movs	r3, #1
 800531e:	613b      	str	r3, [r7, #16]
  }


  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f003 0304 	and.w	r3, r3, #4
 8005328:	2b00      	cmp	r3, #0
 800532a:	d00a      	beq.n	8005342 <HAL_RCC_ClockConfig+0x1a6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));

    /* update PCLK1 divider and notify register is required */
    tmpreg1 &= ~RCC_CFGR2_PPRE1;
 800532c:	697b      	ldr	r3, [r7, #20]
 800532e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005332:	617b      	str	r3, [r7, #20]
    tmpreg1 |= RCC_ClkInitStruct->APB1CLKDivider;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	68db      	ldr	r3, [r3, #12]
 8005338:	697a      	ldr	r2, [r7, #20]
 800533a:	4313      	orrs	r3, r2
 800533c:	617b      	str	r3, [r7, #20]
    update = 0x01u;
 800533e:	2301      	movs	r3, #1
 8005340:	613b      	str	r3, [r7, #16]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f003 0308 	and.w	r3, r3, #8
 800534a:	2b00      	cmp	r3, #0
 800534c:	d00b      	beq.n	8005366 <HAL_RCC_ClockConfig+0x1ca>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));

    /* update PCLK2 divider and notify register is required */
    tmpreg1 &= ~RCC_CFGR2_PPRE2;
 800534e:	697b      	ldr	r3, [r7, #20]
 8005350:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8005354:	617b      	str	r3, [r7, #20]
    tmpreg1 |= (RCC_ClkInitStruct->APB2CLKDivider << (RCC_CFGR2_PPRE2_Pos - RCC_CFGR2_PPRE1_Pos));
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	691b      	ldr	r3, [r3, #16]
 800535a:	011b      	lsls	r3, r3, #4
 800535c:	697a      	ldr	r2, [r7, #20]
 800535e:	4313      	orrs	r3, r2
 8005360:	617b      	str	r3, [r7, #20]
    update = 0x01u;
 8005362:	2301      	movs	r3, #1
 8005364:	613b      	str	r3, [r7, #16]
  }

  /* update CFGR2 if required */
  if (update != 0x00u)
 8005366:	693b      	ldr	r3, [r7, #16]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d002      	beq.n	8005372 <HAL_RCC_ClockConfig+0x1d6>
  {
    RCC->CFGR2 = tmpreg1;
 800536c:	4a1e      	ldr	r2, [pc, #120]	@ (80053e8 <HAL_RCC_ClockConfig+0x24c>)
 800536e:	697b      	ldr	r3, [r7, #20]
 8005370:	6213      	str	r3, [r2, #32]
  }

  /*-------------------------- PCLK7 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK7) == RCC_CLOCKTYPE_PCLK7)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f003 0310 	and.w	r3, r3, #16
 800537a:	2b00      	cmp	r3, #0
 800537c:	d003      	beq.n	8005386 <HAL_RCC_ClockConfig+0x1ea>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB7CLKDivider));
    WRITE_REG(RCC->CFGR3, RCC_ClkInitStruct->APB7CLKDivider);
 800537e:	4a1a      	ldr	r2, [pc, #104]	@ (80053e8 <HAL_RCC_ClockConfig+0x24c>)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	695b      	ldr	r3, [r3, #20]
 8005384:	6253      	str	r3, [r2, #36]	@ 0x24
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005386:	4b17      	ldr	r3, [pc, #92]	@ (80053e4 <HAL_RCC_ClockConfig+0x248>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f003 030f 	and.w	r3, r3, #15
 800538e:	683a      	ldr	r2, [r7, #0]
 8005390:	429a      	cmp	r2, r3
 8005392:	d210      	bcs.n	80053b6 <HAL_RCC_ClockConfig+0x21a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005394:	4b13      	ldr	r3, [pc, #76]	@ (80053e4 <HAL_RCC_ClockConfig+0x248>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f023 020f 	bic.w	r2, r3, #15
 800539c:	4911      	ldr	r1, [pc, #68]	@ (80053e4 <HAL_RCC_ClockConfig+0x248>)
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	4313      	orrs	r3, r2
 80053a2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80053a4:	4b0f      	ldr	r3, [pc, #60]	@ (80053e4 <HAL_RCC_ClockConfig+0x248>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f003 030f 	and.w	r3, r3, #15
 80053ac:	683a      	ldr	r2, [r7, #0]
 80053ae:	429a      	cmp	r2, r3
 80053b0:	d001      	beq.n	80053b6 <HAL_RCC_ClockConfig+0x21a>
    {
      return HAL_ERROR;
 80053b2:	2301      	movs	r3, #1
 80053b4:	e012      	b.n	80053dc <HAL_RCC_ClockConfig+0x240>
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80053b6:	f000 f81f 	bl	80053f8 <HAL_RCC_GetSysClockFreq>
 80053ba:	4602      	mov	r2, r0
 80053bc:	4b0a      	ldr	r3, [pc, #40]	@ (80053e8 <HAL_RCC_ClockConfig+0x24c>)
 80053be:	6a1b      	ldr	r3, [r3, #32]
 80053c0:	f003 0307 	and.w	r3, r3, #7
 80053c4:	4909      	ldr	r1, [pc, #36]	@ (80053ec <HAL_RCC_ClockConfig+0x250>)
 80053c6:	5ccb      	ldrb	r3, [r1, r3]
 80053c8:	fa22 f303 	lsr.w	r3, r2, r3
 80053cc:	4a08      	ldr	r2, [pc, #32]	@ (80053f0 <HAL_RCC_ClockConfig+0x254>)
 80053ce:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80053d0:	4b08      	ldr	r3, [pc, #32]	@ (80053f4 <HAL_RCC_ClockConfig+0x258>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4618      	mov	r0, r3
 80053d6:	f7fc fb7b 	bl	8001ad0 <HAL_InitTick>
 80053da:	4603      	mov	r3, r0
}
 80053dc:	4618      	mov	r0, r3
 80053de:	3718      	adds	r7, #24
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bd80      	pop	{r7, pc}
 80053e4:	40022000 	.word	0x40022000
 80053e8:	46020c00 	.word	0x46020c00
 80053ec:	08030994 	.word	0x08030994
 80053f0:	20000024 	.word	0x20000024
 80053f4:	20000028 	.word	0x20000028

080053f8 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b082      	sub	sp, #8
 80053fc:	af00      	add	r7, sp, #0
  uint32_t sysclk;

  /* Get SYSCLK source */
  sysclk = __HAL_RCC_GET_SYSCLK_SOURCE();
 80053fe:	4b10      	ldr	r3, [pc, #64]	@ (8005440 <HAL_RCC_GetSysClockFreq+0x48>)
 8005400:	69db      	ldr	r3, [r3, #28]
 8005402:	f003 030c 	and.w	r3, r3, #12
 8005406:	607b      	str	r3, [r7, #4]

  if (sysclk == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d102      	bne.n	8005414 <HAL_RCC_GetSysClockFreq+0x1c>
  {
    /* HSI used as system clock source */
    sysclk = HSI_VALUE;
 800540e:	4b0d      	ldr	r3, [pc, #52]	@ (8005444 <HAL_RCC_GetSysClockFreq+0x4c>)
 8005410:	607b      	str	r3, [r7, #4]
 8005412:	e00f      	b.n	8005434 <HAL_RCC_GetSysClockFreq+0x3c>
  }
  else if (sysclk == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2b08      	cmp	r3, #8
 8005418:	d109      	bne.n	800542e <HAL_RCC_GetSysClockFreq+0x36>
  {
    /* HSE used as system clock source. Check if HSE is divided by 2 */
    sysclk = (HSE_VALUE >> ((RCC->CR & RCC_CR_HSEPRE) >> RCC_CR_HSEPRE_Pos));
 800541a:	4b09      	ldr	r3, [pc, #36]	@ (8005440 <HAL_RCC_GetSysClockFreq+0x48>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	0d1b      	lsrs	r3, r3, #20
 8005420:	f003 0301 	and.w	r3, r3, #1
 8005424:	4a08      	ldr	r2, [pc, #32]	@ (8005448 <HAL_RCC_GetSysClockFreq+0x50>)
 8005426:	fa22 f303 	lsr.w	r3, r2, r3
 800542a:	607b      	str	r3, [r7, #4]
 800542c:	e002      	b.n	8005434 <HAL_RCC_GetSysClockFreq+0x3c>
  }
  else
  {
    /* PLL1 used as system clock source */
    sysclk = HAL_RCC_GetPLL1RFreq();
 800542e:	f000 f863 	bl	80054f8 <HAL_RCC_GetPLL1RFreq>
 8005432:	6078      	str	r0, [r7, #4]
  }

  return sysclk;
 8005434:	687b      	ldr	r3, [r7, #4]
}
 8005436:	4618      	mov	r0, r3
 8005438:	3708      	adds	r7, #8
 800543a:	46bd      	mov	sp, r7
 800543c:	bd80      	pop	{r7, pc}
 800543e:	bf00      	nop
 8005440:	46020c00 	.word	0x46020c00
 8005444:	00f42400 	.word	0x00f42400
 8005448:	01e84800 	.word	0x01e84800

0800544c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8005450:	f7ff ffd2 	bl	80053f8 <HAL_RCC_GetSysClockFreq>
 8005454:	4602      	mov	r2, r0
 8005456:	4b07      	ldr	r3, [pc, #28]	@ (8005474 <HAL_RCC_GetHCLKFreq+0x28>)
 8005458:	6a1b      	ldr	r3, [r3, #32]
 800545a:	f003 0307 	and.w	r3, r3, #7
 800545e:	4906      	ldr	r1, [pc, #24]	@ (8005478 <HAL_RCC_GetHCLKFreq+0x2c>)
 8005460:	5ccb      	ldrb	r3, [r1, r3]
 8005462:	fa22 f303 	lsr.w	r3, r2, r3
 8005466:	4a05      	ldr	r2, [pc, #20]	@ (800547c <HAL_RCC_GetHCLKFreq+0x30>)
 8005468:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 800546a:	4b04      	ldr	r3, [pc, #16]	@ (800547c <HAL_RCC_GetHCLKFreq+0x30>)
 800546c:	681b      	ldr	r3, [r3, #0]
}
 800546e:	4618      	mov	r0, r3
 8005470:	bd80      	pop	{r7, pc}
 8005472:	bf00      	nop
 8005474:	46020c00 	.word	0x46020c00
 8005478:	08030994 	.word	0x08030994
 800547c:	20000024 	.word	0x20000024

08005480 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8005484:	f7ff ffe2 	bl	800544c <HAL_RCC_GetHCLKFreq>
 8005488:	4602      	mov	r2, r0
 800548a:	4b05      	ldr	r3, [pc, #20]	@ (80054a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800548c:	6a1b      	ldr	r3, [r3, #32]
 800548e:	091b      	lsrs	r3, r3, #4
 8005490:	f003 0307 	and.w	r3, r3, #7
 8005494:	4903      	ldr	r1, [pc, #12]	@ (80054a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005496:	5ccb      	ldrb	r3, [r1, r3]
 8005498:	fa22 f303 	lsr.w	r3, r2, r3
}
 800549c:	4618      	mov	r0, r3
 800549e:	bd80      	pop	{r7, pc}
 80054a0:	46020c00 	.word	0x46020c00
 80054a4:	0803099c 	.word	0x0803099c

080054a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 80054ac:	f7ff ffce 	bl	800544c <HAL_RCC_GetHCLKFreq>
 80054b0:	4602      	mov	r2, r0
 80054b2:	4b05      	ldr	r3, [pc, #20]	@ (80054c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80054b4:	6a1b      	ldr	r3, [r3, #32]
 80054b6:	0a1b      	lsrs	r3, r3, #8
 80054b8:	f003 0307 	and.w	r3, r3, #7
 80054bc:	4903      	ldr	r1, [pc, #12]	@ (80054cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80054be:	5ccb      	ldrb	r3, [r1, r3]
 80054c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80054c4:	4618      	mov	r0, r3
 80054c6:	bd80      	pop	{r7, pc}
 80054c8:	46020c00 	.word	0x46020c00
 80054cc:	0803099c 	.word	0x0803099c

080054d0 <HAL_RCC_GetPCLK7Freq>:
  * @note   Each time PCLK7 changes, this function must be called to update the
  *         right PCLK7 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK7 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK7Freq(void)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK7 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE7) >> RCC_CFGR3_PPRE7_Pos]);
 80054d4:	f7ff ffba 	bl	800544c <HAL_RCC_GetHCLKFreq>
 80054d8:	4602      	mov	r2, r0
 80054da:	4b05      	ldr	r3, [pc, #20]	@ (80054f0 <HAL_RCC_GetPCLK7Freq+0x20>)
 80054dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054de:	091b      	lsrs	r3, r3, #4
 80054e0:	f003 0307 	and.w	r3, r3, #7
 80054e4:	4903      	ldr	r1, [pc, #12]	@ (80054f4 <HAL_RCC_GetPCLK7Freq+0x24>)
 80054e6:	5ccb      	ldrb	r3, [r1, r3]
 80054e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80054ec:	4618      	mov	r0, r3
 80054ee:	bd80      	pop	{r7, pc}
 80054f0:	46020c00 	.word	0x46020c00
 80054f4:	0803099c 	.word	0x0803099c

080054f8 <HAL_RCC_GetPLL1RFreq>:
/**
  * @brief  Return the PLL1R frequency.
  * @retval PLL1R frequency in Hz
  */
uint32_t HAL_RCC_GetPLL1RFreq(void)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b082      	sub	sp, #8
 80054fc:	af00      	add	r7, sp, #0
  uint32_t pllr;

  /* PLL1R divider */
  pllr = ((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U;
 80054fe:	4b0b      	ldr	r3, [pc, #44]	@ (800552c <HAL_RCC_GetPLL1RFreq+0x34>)
 8005500:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005502:	0e1b      	lsrs	r3, r3, #24
 8005504:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005508:	3301      	adds	r3, #1
 800550a:	607b      	str	r3, [r7, #4]

  /* Compute VCO output frequency and return PLL1R one */
  return ((uint32_t)RCC_PLL1_GetVCOOutputFreq() / pllr);
 800550c:	f000 f810 	bl	8005530 <RCC_PLL1_GetVCOOutputFreq>
 8005510:	eef0 7a40 	vmov.f32	s15, s0
 8005514:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005518:	ee17 2a90 	vmov	r2, s15
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8005522:	4618      	mov	r0, r3
 8005524:	3708      	adds	r7, #8
 8005526:	46bd      	mov	sp, r7
 8005528:	bd80      	pop	{r7, pc}
 800552a:	bf00      	nop
 800552c:	46020c00 	.word	0x46020c00

08005530 <RCC_PLL1_GetVCOOutputFreq>:
/**
  * @brief  Compute PLL1 VCO output frequency
  * @retval Value of PLL1 VCO output frequency
  */
static float_t RCC_PLL1_GetVCOOutputFreq(void)
{
 8005530:	b480      	push	{r7}
 8005532:	b087      	sub	sp, #28
 8005534:	af00      	add	r7, sp, #0
  float_t pllm;
  float_t plln;
  float_t pllfracn;

  /* Get PLL1 DIVR register value */
  tmpreg1 = RCC->PLL1DIVR;
 8005536:	4b36      	ldr	r3, [pc, #216]	@ (8005610 <RCC_PLL1_GetVCOOutputFreq+0xe0>)
 8005538:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800553a:	60fb      	str	r3, [r7, #12]

  /* Retrieve PLL1 multiplication factor */
  tmp = (tmpreg1 & RCC_PLL1DIVR_PLL1N) + 1U;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005542:	3301      	adds	r3, #1
 8005544:	617b      	str	r3, [r7, #20]
  plln = (float_t) tmp;
 8005546:	697b      	ldr	r3, [r7, #20]
 8005548:	ee07 3a90 	vmov	s15, r3
 800554c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005550:	edc7 7a02 	vstr	s15, [r7, #8]

  /* Get PLL1 CFGR register value */
  tmpreg1 = RCC->PLL1CFGR;
 8005554:	4b2e      	ldr	r3, [pc, #184]	@ (8005610 <RCC_PLL1_GetVCOOutputFreq+0xe0>)
 8005556:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005558:	60fb      	str	r3, [r7, #12]

  /* Retrieve PLL1 divider */
  tmp = ((tmpreg1 & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	0a1b      	lsrs	r3, r3, #8
 800555e:	f003 0307 	and.w	r3, r3, #7
 8005562:	3301      	adds	r3, #1
 8005564:	617b      	str	r3, [r7, #20]
  pllm = (float_t) tmp;
 8005566:	697b      	ldr	r3, [r7, #20]
 8005568:	ee07 3a90 	vmov	s15, r3
 800556c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005570:	edc7 7a01 	vstr	s15, [r7, #4]

  /* Check if fractional part is enable */
  if ((tmpreg1 & RCC_PLL1CFGR_PLL1FRACEN) != 0x00u)
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	f003 0310 	and.w	r3, r3, #16
 800557a:	2b00      	cmp	r3, #0
 800557c:	d006      	beq.n	800558c <RCC_PLL1_GetVCOOutputFreq+0x5c>
  {
    tmp = ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos);
 800557e:	4b24      	ldr	r3, [pc, #144]	@ (8005610 <RCC_PLL1_GetVCOOutputFreq+0xe0>)
 8005580:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005582:	08db      	lsrs	r3, r3, #3
 8005584:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005588:	617b      	str	r3, [r7, #20]
 800558a:	e001      	b.n	8005590 <RCC_PLL1_GetVCOOutputFreq+0x60>
  }
  else
  {
    tmp = 0u;
 800558c:	2300      	movs	r3, #0
 800558e:	617b      	str	r3, [r7, #20]
  }
  pllfracn = (float_t)tmp;
 8005590:	697b      	ldr	r3, [r7, #20]
 8005592:	ee07 3a90 	vmov	s15, r3
 8005596:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800559a:	edc7 7a00 	vstr	s15, [r7]

  /* determine PLL source */
  switch (tmpreg1 & RCC_PLL1CFGR_PLL1SRC)
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	f003 0303 	and.w	r3, r3, #3
 80055a4:	2b02      	cmp	r3, #2
 80055a6:	d002      	beq.n	80055ae <RCC_PLL1_GetVCOOutputFreq+0x7e>
 80055a8:	2b03      	cmp	r3, #3
 80055aa:	d003      	beq.n	80055b4 <RCC_PLL1_GetVCOOutputFreq+0x84>
 80055ac:	e013      	b.n	80055d6 <RCC_PLL1_GetVCOOutputFreq+0xa6>
  {
    /* HSI used as PLL1 clock source */
    case RCC_PLLSOURCE_HSI:
      pllsrc = (float_t)HSI_VALUE;
 80055ae:	4b19      	ldr	r3, [pc, #100]	@ (8005614 <RCC_PLL1_GetVCOOutputFreq+0xe4>)
 80055b0:	613b      	str	r3, [r7, #16]
      break;
 80055b2:	e014      	b.n	80055de <RCC_PLL1_GetVCOOutputFreq+0xae>

    /* HSE used as PLL1 clock source */
    case RCC_PLLSOURCE_HSE:
      tmp = (HSE_VALUE >> ((RCC->CR & RCC_CR_HSEPRE) >> RCC_CR_HSEPRE_Pos));
 80055b4:	4b16      	ldr	r3, [pc, #88]	@ (8005610 <RCC_PLL1_GetVCOOutputFreq+0xe0>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	0d1b      	lsrs	r3, r3, #20
 80055ba:	f003 0301 	and.w	r3, r3, #1
 80055be:	4a16      	ldr	r2, [pc, #88]	@ (8005618 <RCC_PLL1_GetVCOOutputFreq+0xe8>)
 80055c0:	fa22 f303 	lsr.w	r3, r2, r3
 80055c4:	617b      	str	r3, [r7, #20]
      pllsrc = (float_t)tmp;
 80055c6:	697b      	ldr	r3, [r7, #20]
 80055c8:	ee07 3a90 	vmov	s15, r3
 80055cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055d0:	edc7 7a04 	vstr	s15, [r7, #16]
      break;
 80055d4:	e003      	b.n	80055de <RCC_PLL1_GetVCOOutputFreq+0xae>

    default:
      pllsrc = (float_t)0;
 80055d6:	f04f 0300 	mov.w	r3, #0
 80055da:	613b      	str	r3, [r7, #16]
      break;
 80055dc:	bf00      	nop
  }

  /* Compute VCO output frequency */
  return ((pllsrc / pllm) * (plln + (pllfracn / (float_t)0x2000u)));
 80055de:	edd7 6a04 	vldr	s13, [r7, #16]
 80055e2:	edd7 7a01 	vldr	s15, [r7, #4]
 80055e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055ea:	edd7 7a00 	vldr	s15, [r7]
 80055ee:	ed9f 6a0b 	vldr	s12, [pc, #44]	@ 800561c <RCC_PLL1_GetVCOOutputFreq+0xec>
 80055f2:	eec7 6a86 	vdiv.f32	s13, s15, s12
 80055f6:	edd7 7a02 	vldr	s15, [r7, #8]
 80055fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80055fe:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8005602:	eeb0 0a67 	vmov.f32	s0, s15
 8005606:	371c      	adds	r7, #28
 8005608:	46bd      	mov	sp, r7
 800560a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560e:	4770      	bx	lr
 8005610:	46020c00 	.word	0x46020c00
 8005614:	4b742400 	.word	0x4b742400
 8005618:	01e84800 	.word	0x01e84800
 800561c:	46000000 	.word	0x46000000

08005620 <HAL_RCCEx_PeriphCLKConfig>:
  * @note   Care must be taken when HAL_RCCEx_PeriphCLKConfig() is used to select
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef *PeriphClkInit)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b088      	sub	sp, #32
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f003 0301 	and.w	r3, r3, #1
 8005630:	2b00      	cmp	r3, #0
 8005632:	d00a      	beq.n	800564a <HAL_RCCEx_PeriphCLKConfig+0x2a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005634:	4b46      	ldr	r3, [pc, #280]	@ (8005750 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005636:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800563a:	f023 0203 	bic.w	r2, r3, #3
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	685b      	ldr	r3, [r3, #4]
 8005642:	4943      	ldr	r1, [pc, #268]	@ (8005750 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005644:	4313      	orrs	r3, r2
 8005646:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

#if defined (USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f003 0302 	and.w	r3, r3, #2
 8005652:	2b00      	cmp	r3, #0
 8005654:	d00a      	beq.n	800566c <HAL_RCCEx_PeriphCLKConfig+0x4c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005656:	4b3e      	ldr	r3, [pc, #248]	@ (8005750 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005658:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800565c:	f023 020c 	bic.w	r2, r3, #12
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	689b      	ldr	r3, [r3, #8]
 8005664:	493a      	ldr	r1, [pc, #232]	@ (8005750 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005666:	4313      	orrs	r3, r2
 8005668:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
#endif


#if defined (I2C1)
  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f003 0304 	and.w	r3, r3, #4
 8005674:	2b00      	cmp	r3, #0
 8005676:	d00a      	beq.n	800568e <HAL_RCCEx_PeriphCLKConfig+0x6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005678:	4b35      	ldr	r3, [pc, #212]	@ (8005750 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800567a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800567e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	68db      	ldr	r3, [r3, #12]
 8005686:	4932      	ldr	r1, [pc, #200]	@ (8005750 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005688:	4313      	orrs	r3, r2
 800568a:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0



#if defined (LPTIM2)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f003 0308 	and.w	r3, r3, #8
 8005696:	2b00      	cmp	r3, #0
 8005698:	d00a      	beq.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0x90>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800569a:	4b2d      	ldr	r3, [pc, #180]	@ (8005750 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800569c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80056a0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	691b      	ldr	r3, [r3, #16]
 80056a8:	4929      	ldr	r1, [pc, #164]	@ (8005750 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80056aa:	4313      	orrs	r3, r2
 80056ac:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }
#endif

#if defined (SPI1)
  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f003 0310 	and.w	r3, r3, #16
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d00a      	beq.n	80056d2 <HAL_RCCEx_PeriphCLKConfig+0xb2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(PeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(PeriphClkInit->Spi1ClockSelection);
 80056bc:	4b24      	ldr	r3, [pc, #144]	@ (8005750 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80056be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80056c2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	695b      	ldr	r3, [r3, #20]
 80056ca:	4921      	ldr	r1, [pc, #132]	@ (8005750 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80056cc:	4313      	orrs	r3, r2
 80056ce:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }
#endif

  /*-------------------------- SYSTICK clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SYSTICK) == RCC_PERIPHCLK_SYSTICK)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f003 0320 	and.w	r3, r3, #32
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d00a      	beq.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SYSTICKCLKSOURCE(PeriphClkInit->SystickClockSelection));

    /* Configure the SYSTICK clock source */
    __HAL_RCC_SYSTICK_CONFIG(PeriphClkInit->SystickClockSelection);
 80056de:	4b1c      	ldr	r3, [pc, #112]	@ (8005750 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80056e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80056e4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	699b      	ldr	r3, [r3, #24]
 80056ec:	4918      	ldr	r1, [pc, #96]	@ (8005750 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80056ee:	4313      	orrs	r3, r2
 80056f0:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- TIMIC clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIMIC) == RCC_PERIPHCLK_TIMIC)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d00a      	beq.n	8005716 <HAL_RCCEx_PeriphCLKConfig+0xf6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMICCLKSOURCE(PeriphClkInit->TimIcClockSelection));

    /* Configure the TIMIC clock source */
    __HAL_RCC_TIMIC_CONFIG(PeriphClkInit->TimIcClockSelection);
 8005700:	4b13      	ldr	r3, [pc, #76]	@ (8005750 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005702:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005706:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	69db      	ldr	r3, [r3, #28]
 800570e:	4910      	ldr	r1, [pc, #64]	@ (8005750 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005710:	4313      	orrs	r3, r2
 8005712:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

#if defined (SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800571e:	2b00      	cmp	r3, #0
 8005720:	d022      	beq.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Set the source of SAI1 clock*/
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005722:	4b0b      	ldr	r3, [pc, #44]	@ (8005750 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005724:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005728:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6a1b      	ldr	r3, [r3, #32]
 8005730:	4907      	ldr	r1, [pc, #28]	@ (8005750 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005732:	4313      	orrs	r3, r2
 8005734:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4

    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL1P)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6a1b      	ldr	r3, [r3, #32]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d109      	bne.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0x134>
    {
      /* Enable PLL1 PCLK output */
      __HAL_RCC_PLL1CLKOUT_ENABLE(RCC_PLL1_PCLK);
 8005740:	4b03      	ldr	r3, [pc, #12]	@ (8005750 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005742:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005744:	4a02      	ldr	r2, [pc, #8]	@ (8005750 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005746:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800574a:	6293      	str	r3, [r2, #40]	@ 0x28
 800574c:	e00c      	b.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0x148>
 800574e:	bf00      	nop
 8005750:	46020c00 	.word	0x46020c00
    }
    else if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL1Q)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6a1b      	ldr	r3, [r3, #32]
 8005758:	2b20      	cmp	r3, #32
 800575a:	d105      	bne.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0x148>
    {
      /* Enable PLL1 QCLK output */
      __HAL_RCC_PLL1CLKOUT_ENABLE(RCC_PLL1_QCLK);
 800575c:	4ba8      	ldr	r3, [pc, #672]	@ (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800575e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005760:	4aa7      	ldr	r2, [pc, #668]	@ (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005762:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005766:	6293      	str	r3, [r2, #40]	@ 0x28
    }
  }
#endif

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005770:	2b00      	cmp	r3, #0
 8005772:	d015      	beq.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Set the source of RNG clock*/
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005774:	4ba2      	ldr	r3, [pc, #648]	@ (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005776:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800577a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005782:	499f      	ldr	r1, [pc, #636]	@ (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005784:	4313      	orrs	r3, r2
 8005786:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL1Q)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800578e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005792:	d105      	bne.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
      /* Enable PLL1 QCLK output */
      __HAL_RCC_PLL1CLKOUT_ENABLE(RCC_PLL1_QCLK);
 8005794:	4b9a      	ldr	r3, [pc, #616]	@ (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005796:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005798:	4a99      	ldr	r2, [pc, #612]	@ (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800579a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800579e:	6293      	str	r3, [r2, #40]	@ 0x28
  }


#if defined (RCC_CCIPR2_ASSEL)
  /*-------------------------- AS clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_AUDIOSYNC) == RCC_PERIPHCLK_AUDIOSYNC)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d00a      	beq.n	80057c2 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ASCLKSOURCE(PeriphClkInit->AudioSyncClockSelection));

    /* Configure the AS clock source */
    __HAL_RCC_AUDIOSYNC_CONFIG(PeriphClkInit->AudioSyncClockSelection);
 80057ac:	4b94      	ldr	r3, [pc, #592]	@ (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057ae:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80057b2:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057ba:	4991      	ldr	r1, [pc, #580]	@ (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057bc:	4313      	orrs	r3, r2
 80057be:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
  }
#endif

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d00a      	beq.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80057ce:	4b8c      	ldr	r3, [pc, #560]	@ (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057d0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80057d4:	f023 0203 	bic.w	r2, r3, #3
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057dc:	4988      	ldr	r1, [pc, #544]	@ (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057de:	4313      	orrs	r3, r2
 80057e0:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d00a      	beq.n	8005806 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(PeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(PeriphClkInit->Spi3ClockSelection);
 80057f0:	4b83      	ldr	r3, [pc, #524]	@ (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057f2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80057f6:	f023 0218 	bic.w	r2, r3, #24
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057fe:	4980      	ldr	r1, [pc, #512]	@ (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005800:	4313      	orrs	r3, r2
 8005802:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }


  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800580e:	2b00      	cmp	r3, #0
 8005810:	d00a      	beq.n	8005828 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005812:	4b7b      	ldr	r3, [pc, #492]	@ (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005814:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005818:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005820:	4977      	ldr	r1, [pc, #476]	@ (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005822:	4313      	orrs	r3, r2
 8005824:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005830:	2b00      	cmp	r3, #0
 8005832:	d00a      	beq.n	800584a <HAL_RCCEx_PeriphCLKConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005834:	4b72      	ldr	r3, [pc, #456]	@ (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005836:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800583a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005842:	496f      	ldr	r1, [pc, #444]	@ (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005844:	4313      	orrs	r3, r2
 8005846:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005852:	2b00      	cmp	r3, #0
 8005854:	d015      	beq.n	8005882 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC4 interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005856:	4b6a      	ldr	r3, [pc, #424]	@ (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005858:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800585c:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005864:	4966      	ldr	r1, [pc, #408]	@ (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005866:	4313      	orrs	r3, r2
 8005868:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8

    if (PeriphClkInit->AdcClockSelection == RCC_PERIPHCLK_ADC)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005870:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005874:	d105      	bne.n	8005882 <HAL_RCCEx_PeriphCLKConfig+0x262>
    {
      /* Enable PLL1 PCLK output */
      __HAL_RCC_PLL1CLKOUT_ENABLE(RCC_PLL1_PCLK);
 8005876:	4b62      	ldr	r3, [pc, #392]	@ (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005878:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800587a:	4a61      	ldr	r2, [pc, #388]	@ (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800587c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005880:	6293      	str	r3, [r2, #40]	@ 0x28
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800588a:	2b00      	cmp	r3, #0
 800588c:	f000 8096 	beq.w	80059bc <HAL_RCCEx_PeriphCLKConfig+0x39c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005890:	2300      	movs	r3, #0
 8005892:	77fb      	strb	r3, [r7, #31]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
    tmpreg2 = __HAL_RCC_GET_RTC_SOURCE();
 8005894:	4b5a      	ldr	r3, [pc, #360]	@ (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005896:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800589a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800589e:	61bb      	str	r3, [r7, #24]

    /* Check if RTC clock source needs to be changed */
    if (tmpreg2 != PeriphClkInit->RTCClockSelection)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058a4:	69ba      	ldr	r2, [r7, #24]
 80058a6:	429a      	cmp	r2, r3
 80058a8:	f000 8088 	beq.w	80059bc <HAL_RCCEx_PeriphCLKConfig+0x39c>
    {
      /* Enable Power Clock */
      if (__HAL_RCC_PWR_IS_CLK_ENABLED() != 0x01u)
 80058ac:	4b54      	ldr	r3, [pc, #336]	@ (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80058b2:	f003 0304 	and.w	r3, r3, #4
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d110      	bne.n	80058dc <HAL_RCCEx_PeriphCLKConfig+0x2bc>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80058ba:	4b51      	ldr	r3, [pc, #324]	@ (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80058c0:	4a4f      	ldr	r2, [pc, #316]	@ (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058c2:	f043 0304 	orr.w	r3, r3, #4
 80058c6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80058ca:	4b4d      	ldr	r3, [pc, #308]	@ (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80058d0:	f003 0304 	and.w	r3, r3, #4
 80058d4:	60fb      	str	r3, [r7, #12]
 80058d6:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80058d8:	2301      	movs	r3, #1
 80058da:	77fb      	strb	r3, [r7, #31]
      }

      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80058dc:	4b49      	ldr	r3, [pc, #292]	@ (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80058de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058e0:	4a48      	ldr	r2, [pc, #288]	@ (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80058e2:	f043 0301 	orr.w	r3, r3, #1
 80058e6:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80058e8:	f7fc f984 	bl	8001bf4 <HAL_GetTick>
 80058ec:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80058ee:	e008      	b.n	8005902 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80058f0:	f7fc f980 	bl	8001bf4 <HAL_GetTick>
 80058f4:	4602      	mov	r2, r0
 80058f6:	697b      	ldr	r3, [r7, #20]
 80058f8:	1ad3      	subs	r3, r2, r3
 80058fa:	2b02      	cmp	r3, #2
 80058fc:	d901      	bls.n	8005902 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
        {
          return HAL_TIMEOUT;
 80058fe:	2303      	movs	r3, #3
 8005900:	e079      	b.n	80059f6 <HAL_RCCEx_PeriphCLKConfig+0x3d6>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005902:	4b40      	ldr	r3, [pc, #256]	@ (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005904:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005906:	f003 0301 	and.w	r3, r3, #1
 800590a:	2b00      	cmp	r3, #0
 800590c:	d0f0      	beq.n	80058f0 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
        }
      }

      /* Save BDCR1 content */
      tmpreg1 = (RCC->BDCR1 & ~RCC_BDCR1_RTCSEL);
 800590e:	4b3c      	ldr	r3, [pc, #240]	@ (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005910:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005914:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005918:	613b      	str	r3, [r7, #16]

      /* Check if a backup domain reset is required */
      if (tmpreg2 != RCC_RTCCLKSOURCE_DISABLE)
 800591a:	69bb      	ldr	r3, [r7, #24]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d017      	beq.n	8005950 <HAL_RCCEx_PeriphCLKConfig+0x330>
      {
        /* Save BDCR2 content */
        tmpreg2 = RCC->BDCR2;
 8005920:	4b37      	ldr	r3, [pc, #220]	@ (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005922:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8005926:	61bb      	str	r3, [r7, #24]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005928:	4b35      	ldr	r3, [pc, #212]	@ (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800592a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800592e:	4a34      	ldr	r2, [pc, #208]	@ (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005930:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005934:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005938:	4b31      	ldr	r3, [pc, #196]	@ (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800593a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800593e:	4a30      	ldr	r2, [pc, #192]	@ (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005940:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005944:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Restore previously saved BDCR2 */
        RCC->BDCR2 = tmpreg2;
 8005948:	4a2d      	ldr	r2, [pc, #180]	@ (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800594a:	69bb      	ldr	r3, [r7, #24]
 800594c:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
      }

      /* Apply new RTC clock source selection */
      RCC->BDCR1 = (tmpreg1 | PeriphClkInit->RTCClockSelection);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005954:	492a      	ldr	r1, [pc, #168]	@ (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005956:	693b      	ldr	r3, [r7, #16]
 8005958:	4313      	orrs	r3, r2
 800595a:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0

      /* mask all ON bits */
      tmpreg2 = (RCC_BDCR1_LSEON | RCC_BDCR1_LSI1ON);
 800595e:	4b2a      	ldr	r3, [pc, #168]	@ (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005960:	61bb      	str	r3, [r7, #24]
#if defined(RCC_LSI2_SUPPORT)
      tmpreg2 |= RCC_BDCR1_LSI2ON;
 8005962:	69bb      	ldr	r3, [r7, #24]
 8005964:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005968:	61bb      	str	r3, [r7, #24]
#endif

      /* Check which oscillators were enable */
      tmpreg2 &= tmpreg1;
 800596a:	69ba      	ldr	r2, [r7, #24]
 800596c:	693b      	ldr	r3, [r7, #16]
 800596e:	4013      	ands	r3, r2
 8005970:	61bb      	str	r3, [r7, #24]

      if (tmpreg2 != 0x00u)
 8005972:	69bb      	ldr	r3, [r7, #24]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d016      	beq.n	80059a6 <HAL_RCCEx_PeriphCLKConfig+0x386>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005978:	f7fc f93c 	bl	8001bf4 <HAL_GetTick>
 800597c:	6178      	str	r0, [r7, #20]

        /* Wait till all oscillators are enabled : RDY bit position is ON shifted by 1 */
        while (READ_BIT(RCC->BDCR1, (tmpreg2 << 1)) == 0x00u)
 800597e:	e00a      	b.n	8005996 <HAL_RCCEx_PeriphCLKConfig+0x376>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005980:	f7fc f938 	bl	8001bf4 <HAL_GetTick>
 8005984:	4602      	mov	r2, r0
 8005986:	697b      	ldr	r3, [r7, #20]
 8005988:	1ad3      	subs	r3, r2, r3
 800598a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800598e:	4293      	cmp	r3, r2
 8005990:	d901      	bls.n	8005996 <HAL_RCCEx_PeriphCLKConfig+0x376>
          {
            return HAL_TIMEOUT;
 8005992:	2303      	movs	r3, #3
 8005994:	e02f      	b.n	80059f6 <HAL_RCCEx_PeriphCLKConfig+0x3d6>
        while (READ_BIT(RCC->BDCR1, (tmpreg2 << 1)) == 0x00u)
 8005996:	4b1a      	ldr	r3, [pc, #104]	@ (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005998:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 800599c:	69bb      	ldr	r3, [r7, #24]
 800599e:	005b      	lsls	r3, r3, #1
 80059a0:	4013      	ands	r3, r2
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d0ec      	beq.n	8005980 <HAL_RCCEx_PeriphCLKConfig+0x360>
          }
        }
      }
      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80059a6:	7ffb      	ldrb	r3, [r7, #31]
 80059a8:	2b01      	cmp	r3, #1
 80059aa:	d107      	bne.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0x39c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80059ac:	4b14      	ldr	r3, [pc, #80]	@ (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80059b2:	4a13      	ldr	r2, [pc, #76]	@ (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059b4:	f023 0304 	bic.w	r3, r3, #4
 80059b8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }
    }
  }

  /*-------------------------- RADIO Sleep Timer clock source configuration --*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RADIOST) == RCC_PERIPHCLK_RADIOST)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d015      	beq.n	80059f4 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RADIOSLEEPTIMERSOURCE(PeriphClkInit->RadioSlpTimClockSelection));

    /* Configure the RADIO Sleep Timer clock source */
    __HAL_RCC_RADIOSLPTIM_CONFIG(PeriphClkInit->RadioSlpTimClockSelection);
 80059c8:	4b0d      	ldr	r3, [pc, #52]	@ (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80059ce:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059d6:	490a      	ldr	r1, [pc, #40]	@ (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059d8:	4313      	orrs	r3, r2
 80059da:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0

    /* Check configuration validity as under Backup domain access control */
    if (__HAL_RCC_GET_RADIOSLPTIM_SOURCE() != PeriphClkInit->RadioSlpTimClockSelection)
 80059de:	4b08      	ldr	r3, [pc, #32]	@ (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80059e4:	f403 2240 	and.w	r2, r3, #786432	@ 0xc0000
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059ec:	429a      	cmp	r2, r3
 80059ee:	d001      	beq.n	80059f4 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
    {
      return HAL_ERROR;
 80059f0:	2301      	movs	r3, #1
 80059f2:	e000      	b.n	80059f6 <HAL_RCCEx_PeriphCLKConfig+0x3d6>
    }
  }

  return HAL_OK;
 80059f4:	2300      	movs	r3, #0
}
 80059f6:	4618      	mov	r0, r3
 80059f8:	3720      	adds	r7, #32
 80059fa:	46bd      	mov	sp, r7
 80059fc:	bd80      	pop	{r7, pc}
 80059fe:	bf00      	nop
 8005a00:	46020c00 	.word	0x46020c00
 8005a04:	46020800 	.word	0x46020800
 8005a08:	04000001 	.word	0x04000001

08005a0c <HAL_RCCEx_HSESetTrimming>:
  * @param  Trimming  specifies the HSE trimming value.
  *          This parameter should be below 0x3F.
  * @retval None
  */
void HAL_RCCEx_HSESetTrimming(uint32_t Trimming)
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	b083      	sub	sp, #12
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_HSETRIM(Trimming));

  MODIFY_REG(RCC->ECSCR1, RCC_ECSCR1_HSETRIM, Trimming << RCC_ECSCR1_HSETRIM_Pos);
 8005a14:	4b08      	ldr	r3, [pc, #32]	@ (8005a38 <HAL_RCCEx_HSESetTrimming+0x2c>)
 8005a16:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8005a1a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	041b      	lsls	r3, r3, #16
 8005a22:	4905      	ldr	r1, [pc, #20]	@ (8005a38 <HAL_RCCEx_HSESetTrimming+0x2c>)
 8005a24:	4313      	orrs	r3, r2
 8005a26:	f8c1 3210 	str.w	r3, [r1, #528]	@ 0x210
}
 8005a2a:	bf00      	nop
 8005a2c:	370c      	adds	r7, #12
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a34:	4770      	bx	lr
 8005a36:	bf00      	nop
 8005a38:	46020c00 	.word	0x46020c00

08005a3c <HAL_RCCEx_EnableRadioBBClock>:
/**
  * @brief  Enable the 2.4 GHz RADIO baseband clock
  * @retval None
  */
void HAL_RCCEx_EnableRadioBBClock(void)
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->RADIOENR, RCC_RADIOENR_BBCLKEN);
 8005a40:	4b06      	ldr	r3, [pc, #24]	@ (8005a5c <HAL_RCCEx_EnableRadioBBClock+0x20>)
 8005a42:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 8005a46:	4a05      	ldr	r2, [pc, #20]	@ (8005a5c <HAL_RCCEx_EnableRadioBBClock+0x20>)
 8005a48:	f043 0302 	orr.w	r3, r3, #2
 8005a4c:	f8c2 3208 	str.w	r3, [r2, #520]	@ 0x208
}
 8005a50:	bf00      	nop
 8005a52:	46bd      	mov	sp, r7
 8005a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a58:	4770      	bx	lr
 8005a5a:	bf00      	nop
 8005a5c:	46020c00 	.word	0x46020c00

08005a60 <HAL_RCCEx_DisableRadioBBClock>:
/**
  * @brief  Disable the 2.4 GHz RADIO baseband clock
  * @retval None
  */
void HAL_RCCEx_DisableRadioBBClock(void)
{
 8005a60:	b480      	push	{r7}
 8005a62:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->RADIOENR, RCC_RADIOENR_BBCLKEN);
 8005a64:	4b06      	ldr	r3, [pc, #24]	@ (8005a80 <HAL_RCCEx_DisableRadioBBClock+0x20>)
 8005a66:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 8005a6a:	4a05      	ldr	r2, [pc, #20]	@ (8005a80 <HAL_RCCEx_DisableRadioBBClock+0x20>)
 8005a6c:	f023 0302 	bic.w	r3, r3, #2
 8005a70:	f8c2 3208 	str.w	r3, [r2, #520]	@ 0x208
}
 8005a74:	bf00      	nop
 8005a76:	46bd      	mov	sp, r7
 8005a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7c:	4770      	bx	lr
 8005a7e:	bf00      	nop
 8005a80:	46020c00 	.word	0x46020c00

08005a84 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b084      	sub	sp, #16
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d101      	bne.n	8005a96 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8005a92:	2301      	movs	r3, #1
 8005a94:	e08b      	b.n	8005bae <HAL_RNG_Init+0x12a>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	7a5b      	ldrb	r3, [r3, #9]
 8005a9a:	b2db      	uxtb	r3, r3
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d105      	bne.n	8005aac <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8005aa6:	6878      	ldr	r0, [r7, #4]
 8005aa8:	f7fb fcae 	bl	8001408 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2202      	movs	r2, #2
 8005ab0:	725a      	strb	r2, [r3, #9]

  /* Disable RNG */
  __HAL_RNG_DISABLE(hrng);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	681a      	ldr	r2, [r3, #0]
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f022 0204 	bic.w	r2, r2, #4
 8005ac0:	601a      	str	r2, [r3, #0]

  /* Clock Error Detection Configuration when CONDRT bit is set to 1 */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED | RNG_CR_CONDRST | RNG_CR_RNG_CONFIG2,
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	681a      	ldr	r2, [r3, #0]
 8005ac8:	4b3b      	ldr	r3, [pc, #236]	@ (8005bb8 <HAL_RNG_Init+0x134>)
 8005aca:	4013      	ands	r3, r2
 8005acc:	687a      	ldr	r2, [r7, #4]
 8005ace:	6852      	ldr	r2, [r2, #4]
 8005ad0:	4313      	orrs	r3, r2
 8005ad2:	687a      	ldr	r2, [r7, #4]
 8005ad4:	6812      	ldr	r2, [r2, #0]
 8005ad6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005ada:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8005ade:	6013      	str	r3, [r2, #0]
             hrng->Init.ClockErrorDetection | RNG_CR_CONDRST | (1U << RNG_CR_RNG_CONFIG2_Pos));

  /* Writing bit CONDRST=0 */
  CLEAR_BIT(hrng->Instance->CR, RNG_CR_CONDRST);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	681a      	ldr	r2, [r3, #0]
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f022 4280 	bic.w	r2, r2, #1073741824	@ 0x40000000
 8005aee:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005af0:	f7fc f880 	bl	8001bf4 <HAL_GetTick>
 8005af4:	60f8      	str	r0, [r7, #12]

  /* Wait for conditioning reset process to be completed */
  while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 8005af6:	e016      	b.n	8005b26 <HAL_RNG_Init+0xa2>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8005af8:	f7fc f87c 	bl	8001bf4 <HAL_GetTick>
 8005afc:	4602      	mov	r2, r0
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	1ad3      	subs	r3, r2, r3
 8005b02:	2b0a      	cmp	r3, #10
 8005b04:	d90f      	bls.n	8005b26 <HAL_RNG_Init+0xa2>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005b10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b14:	d107      	bne.n	8005b26 <HAL_RNG_Init+0xa2>
      {
        hrng->State = HAL_RNG_STATE_READY;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2201      	movs	r2, #1
 8005b1a:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2202      	movs	r2, #2
 8005b20:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 8005b22:	2301      	movs	r3, #1
 8005b24:	e043      	b.n	8005bae <HAL_RNG_Init+0x12a>
  while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005b30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b34:	d0e0      	beq.n	8005af8 <HAL_RNG_Init+0x74>
      }
    }
  }

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	681a      	ldr	r2, [r3, #0]
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f042 0204 	orr.w	r2, r2, #4
 8005b44:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	685b      	ldr	r3, [r3, #4]
 8005b4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b50:	2b40      	cmp	r3, #64	@ 0x40
 8005b52:	d104      	bne.n	8005b5e <HAL_RNG_Init+0xda>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2204      	movs	r2, #4
 8005b58:	725a      	strb	r2, [r3, #9]
    return HAL_ERROR;
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	e027      	b.n	8005bae <HAL_RNG_Init+0x12a>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 8005b5e:	f7fc f849 	bl	8001bf4 <HAL_GetTick>
 8005b62:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8005b64:	e015      	b.n	8005b92 <HAL_RNG_Init+0x10e>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8005b66:	f7fc f845 	bl	8001bf4 <HAL_GetTick>
 8005b6a:	4602      	mov	r2, r0
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	1ad3      	subs	r3, r2, r3
 8005b70:	2b0a      	cmp	r3, #10
 8005b72:	d90e      	bls.n	8005b92 <HAL_RNG_Init+0x10e>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	685b      	ldr	r3, [r3, #4]
 8005b7a:	f003 0304 	and.w	r3, r3, #4
 8005b7e:	2b04      	cmp	r3, #4
 8005b80:	d107      	bne.n	8005b92 <HAL_RNG_Init+0x10e>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2204      	movs	r2, #4
 8005b86:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2202      	movs	r2, #2
 8005b8c:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 8005b8e:	2301      	movs	r3, #1
 8005b90:	e00d      	b.n	8005bae <HAL_RNG_Init+0x12a>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	685b      	ldr	r3, [r3, #4]
 8005b98:	f003 0304 	and.w	r3, r3, #4
 8005b9c:	2b04      	cmp	r3, #4
 8005b9e:	d0e2      	beq.n	8005b66 <HAL_RNG_Init+0xe2>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2201      	movs	r2, #1
 8005ba4:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2200      	movs	r2, #0
 8005baa:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 8005bac:	2300      	movs	r3, #0
}
 8005bae:	4618      	mov	r0, r3
 8005bb0:	3710      	adds	r7, #16
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	bd80      	pop	{r7, pc}
 8005bb6:	bf00      	nop
 8005bb8:	bfff1fdf 	.word	0xbfff1fdf

08005bbc <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b084      	sub	sp, #16
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005bc4:	2301      	movs	r3, #1
 8005bc6:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d071      	beq.n	8005cb2 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005bd4:	b2db      	uxtb	r3, r3
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d106      	bne.n	8005be8 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8005be2:	6878      	ldr	r0, [r7, #4]
 8005be4:	f7fb fc48 	bl	8001478 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2202      	movs	r2, #2
 8005bec:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8005bf0:	4b32      	ldr	r3, [pc, #200]	@ (8005cbc <HAL_RTC_Init+0x100>)
 8005bf2:	68db      	ldr	r3, [r3, #12]
 8005bf4:	f003 0310 	and.w	r3, r3, #16
 8005bf8:	2b10      	cmp	r3, #16
 8005bfa:	d051      	beq.n	8005ca0 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005bfc:	4b2f      	ldr	r3, [pc, #188]	@ (8005cbc <HAL_RTC_Init+0x100>)
 8005bfe:	22ca      	movs	r2, #202	@ 0xca
 8005c00:	625a      	str	r2, [r3, #36]	@ 0x24
 8005c02:	4b2e      	ldr	r3, [pc, #184]	@ (8005cbc <HAL_RTC_Init+0x100>)
 8005c04:	2253      	movs	r2, #83	@ 0x53
 8005c06:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8005c08:	6878      	ldr	r0, [r7, #4]
 8005c0a:	f000 f9cd 	bl	8005fa8 <RTC_EnterInitMode>
 8005c0e:	4603      	mov	r3, r0
 8005c10:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8005c12:	7bfb      	ldrb	r3, [r7, #15]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d13f      	bne.n	8005c98 <HAL_RTC_Init+0xdc>
      {
#if defined(RTC_CR_OSEL)
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8005c18:	4b28      	ldr	r3, [pc, #160]	@ (8005cbc <HAL_RTC_Init+0x100>)
 8005c1a:	699b      	ldr	r3, [r3, #24]
 8005c1c:	4a27      	ldr	r2, [pc, #156]	@ (8005cbc <HAL_RTC_Init+0x100>)
 8005c1e:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 8005c22:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005c26:	6193      	str	r3, [r2, #24]

        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8005c28:	4b24      	ldr	r3, [pc, #144]	@ (8005cbc <HAL_RTC_Init+0x100>)
 8005c2a:	699a      	ldr	r2, [r3, #24]
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6859      	ldr	r1, [r3, #4]
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	691b      	ldr	r3, [r3, #16]
 8005c34:	4319      	orrs	r1, r3
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	699b      	ldr	r3, [r3, #24]
 8005c3a:	430b      	orrs	r3, r1
 8005c3c:	491f      	ldr	r1, [pc, #124]	@ (8005cbc <HAL_RTC_Init+0x100>)
 8005c3e:	4313      	orrs	r3, r2
 8005c40:	618b      	str	r3, [r1, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, hrtc->Init.HourFormat);
#endif /* RTC_CR_OSEL */

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	68da      	ldr	r2, [r3, #12]
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	689b      	ldr	r3, [r3, #8]
 8005c4a:	041b      	lsls	r3, r3, #16
 8005c4c:	491b      	ldr	r1, [pc, #108]	@ (8005cbc <HAL_RTC_Init+0x100>)
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8005c52:	4b1a      	ldr	r3, [pc, #104]	@ (8005cbc <HAL_RTC_Init+0x100>)
 8005c54:	68db      	ldr	r3, [r3, #12]
 8005c56:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c62:	430b      	orrs	r3, r1
 8005c64:	4915      	ldr	r1, [pc, #84]	@ (8005cbc <HAL_RTC_Init+0x100>)
 8005c66:	4313      	orrs	r3, r2
 8005c68:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8005c6a:	6878      	ldr	r0, [r7, #4]
 8005c6c:	f000 f9d8 	bl	8006020 <RTC_ExitInitMode>
 8005c70:	4603      	mov	r3, r0
 8005c72:	73fb      	strb	r3, [r7, #15]

#if defined(RTC_CR_OSEL)
        if (status == HAL_OK)
 8005c74:	7bfb      	ldrb	r3, [r7, #15]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d10e      	bne.n	8005c98 <HAL_RTC_Init+0xdc>
        {
#if defined(RTC_CR_OUT2EN)
          MODIFY_REG(RTC->CR, \
 8005c7a:	4b10      	ldr	r3, [pc, #64]	@ (8005cbc <HAL_RTC_Init+0x100>)
 8005c7c:	699b      	ldr	r3, [r3, #24]
 8005c7e:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6a19      	ldr	r1, [r3, #32]
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	69db      	ldr	r3, [r3, #28]
 8005c8a:	4319      	orrs	r1, r3
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	695b      	ldr	r3, [r3, #20]
 8005c90:	430b      	orrs	r3, r1
 8005c92:	490a      	ldr	r1, [pc, #40]	@ (8005cbc <HAL_RTC_Init+0x100>)
 8005c94:	4313      	orrs	r3, r2
 8005c96:	618b      	str	r3, [r1, #24]
        }
#endif /* RTC_CR_OSEL */
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005c98:	4b08      	ldr	r3, [pc, #32]	@ (8005cbc <HAL_RTC_Init+0x100>)
 8005c9a:	22ff      	movs	r2, #255	@ 0xff
 8005c9c:	625a      	str	r2, [r3, #36]	@ 0x24
 8005c9e:	e001      	b.n	8005ca4 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8005ca4:	7bfb      	ldrb	r3, [r7, #15]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d103      	bne.n	8005cb2 <HAL_RTC_Init+0xf6>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2201      	movs	r2, #1
 8005cae:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    }
  }

  return status;
 8005cb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	3710      	adds	r7, #16
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	bd80      	pop	{r7, pc}
 8005cbc:	46007800 	.word	0x46007800

08005cc0 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8005cc0:	b590      	push	{r4, r7, lr}
 8005cc2:	b087      	sub	sp, #28
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	60f8      	str	r0, [r7, #12]
 8005cc8:	60b9      	str	r1, [r7, #8]
 8005cca:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8005ccc:	2300      	movs	r3, #0
 8005cce:	617b      	str	r3, [r7, #20]
  uint32_t binary_mode;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8005cd6:	2b01      	cmp	r3, #1
 8005cd8:	d101      	bne.n	8005cde <HAL_RTC_SetAlarm_IT+0x1e>
 8005cda:	2302      	movs	r3, #2
 8005cdc:	e0ea      	b.n	8005eb4 <HAL_RTC_SetAlarm_IT+0x1f4>
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	2201      	movs	r2, #1
 8005ce2:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	2202      	movs	r2, #2
 8005cea:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
                 (8U + (READ_BIT(RTC->ICSR, RTC_ICSR_BCDU) >> RTC_ICSR_BCDU_Pos)));
  }
#endif /* USE_FULL_ASSERT */

  /* Get Binary mode (32-bit free-running counter configuration) */
  binary_mode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 8005cee:	4b73      	ldr	r3, [pc, #460]	@ (8005ebc <HAL_RTC_SetAlarm_IT+0x1fc>)
 8005cf0:	68db      	ldr	r3, [r3, #12]
 8005cf2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005cf6:	613b      	str	r3, [r7, #16]

  if (binary_mode != RTC_BINARY_ONLY)
 8005cf8:	693b      	ldr	r3, [r7, #16]
 8005cfa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005cfe:	d05c      	beq.n	8005dba <HAL_RTC_SetAlarm_IT+0xfa>
  {
    if (Format == RTC_FORMAT_BIN)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d136      	bne.n	8005d74 <HAL_RTC_SetAlarm_IT+0xb4>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8005d06:	4b6d      	ldr	r3, [pc, #436]	@ (8005ebc <HAL_RTC_SetAlarm_IT+0x1fc>)
 8005d08:	699b      	ldr	r3, [r3, #24]
 8005d0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d102      	bne.n	8005d18 <HAL_RTC_SetAlarm_IT+0x58>
        assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005d12:	68bb      	ldr	r3, [r7, #8]
 8005d14:	2200      	movs	r2, #0
 8005d16:	70da      	strb	r2, [r3, #3]
      }
      else
      {
        assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
      }
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	781b      	ldrb	r3, [r3, #0]
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	f000 f9bd 	bl	800609c <RTC_ByteToBcd2>
 8005d22:	4603      	mov	r3, r0
 8005d24:	041c      	lsls	r4, r3, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005d26:	68bb      	ldr	r3, [r7, #8]
 8005d28:	785b      	ldrb	r3, [r3, #1]
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	f000 f9b6 	bl	800609c <RTC_ByteToBcd2>
 8005d30:	4603      	mov	r3, r0
 8005d32:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005d34:	431c      	orrs	r4, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	789b      	ldrb	r3, [r3, #2]
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	f000 f9ae 	bl	800609c <RTC_ByteToBcd2>
 8005d40:	4603      	mov	r3, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005d42:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005d46:	68bb      	ldr	r3, [r7, #8]
 8005d48:	78db      	ldrb	r3, [r3, #3]
 8005d4a:	059b      	lsls	r3, r3, #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005d4c:	ea42 0403 	orr.w	r4, r2, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005d56:	4618      	mov	r0, r3
 8005d58:	f000 f9a0 	bl	800609c <RTC_ByteToBcd2>
 8005d5c:	4603      	mov	r3, r0
 8005d5e:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005d60:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005d68:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005d6e:	4313      	orrs	r3, r2
 8005d70:	617b      	str	r3, [r7, #20]
 8005d72:	e022      	b.n	8005dba <HAL_RTC_SetAlarm_IT+0xfa>
    }
    else /* Format BCD */
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8005d74:	4b51      	ldr	r3, [pc, #324]	@ (8005ebc <HAL_RTC_SetAlarm_IT+0x1fc>)
 8005d76:	699b      	ldr	r3, [r3, #24]
 8005d78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d102      	bne.n	8005d86 <HAL_RTC_SetAlarm_IT+0xc6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	2200      	movs	r2, #0
 8005d84:	70da      	strb	r2, [r3, #3]
      {
        assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
      }

#endif /* USE_FULL_ASSERT */
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	781b      	ldrb	r3, [r3, #0]
 8005d8a:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	785b      	ldrb	r3, [r3, #1]
 8005d90:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005d92:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005d94:	68ba      	ldr	r2, [r7, #8]
 8005d96:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005d98:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005d9a:	68bb      	ldr	r3, [r7, #8]
 8005d9c:	78db      	ldrb	r3, [r3, #3]
 8005d9e:	059b      	lsls	r3, r3, #22
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005da0:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005da8:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005daa:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005db0:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8005db2:	68bb      	ldr	r3, [r7, #8]
 8005db4:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005db6:	4313      	orrs	r3, r2
 8005db8:	617b      	str	r3, [r7, #20]

    }
  }

  /* Configure the Alarm registers */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8005dba:	68bb      	ldr	r3, [r7, #8]
 8005dbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dbe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005dc2:	d137      	bne.n	8005e34 <HAL_RTC_SetAlarm_IT+0x174>
  {
    /* Disable the Alarm A interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8005dc4:	4b3d      	ldr	r3, [pc, #244]	@ (8005ebc <HAL_RTC_SetAlarm_IT+0x1fc>)
 8005dc6:	699b      	ldr	r3, [r3, #24]
 8005dc8:	4a3c      	ldr	r2, [pc, #240]	@ (8005ebc <HAL_RTC_SetAlarm_IT+0x1fc>)
 8005dca:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8005dce:	6193      	str	r3, [r2, #24]

    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8005dd0:	4b3a      	ldr	r3, [pc, #232]	@ (8005ebc <HAL_RTC_SetAlarm_IT+0x1fc>)
 8005dd2:	2201      	movs	r2, #1
 8005dd4:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (binary_mode == RTC_BINARY_ONLY)
 8005dd6:	693b      	ldr	r3, [r7, #16]
 8005dd8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005ddc:	d107      	bne.n	8005dee <HAL_RTC_SetAlarm_IT+0x12e>
    {
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	699a      	ldr	r2, [r3, #24]
 8005de2:	68bb      	ldr	r3, [r7, #8]
 8005de4:	69db      	ldr	r3, [r3, #28]
 8005de6:	4935      	ldr	r1, [pc, #212]	@ (8005ebc <HAL_RTC_SetAlarm_IT+0x1fc>)
 8005de8:	4313      	orrs	r3, r2
 8005dea:	644b      	str	r3, [r1, #68]	@ 0x44
 8005dec:	e006      	b.n	8005dfc <HAL_RTC_SetAlarm_IT+0x13c>
    }
    else
    {
      WRITE_REG(RTC->ALRMAR, tmpreg);
 8005dee:	4a33      	ldr	r2, [pc, #204]	@ (8005ebc <HAL_RTC_SetAlarm_IT+0x1fc>)
 8005df0:	697b      	ldr	r3, [r7, #20]
 8005df2:	6413      	str	r3, [r2, #64]	@ 0x40

      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 8005df4:	4a31      	ldr	r2, [pc, #196]	@ (8005ebc <HAL_RTC_SetAlarm_IT+0x1fc>)
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	699b      	ldr	r3, [r3, #24]
 8005dfa:	6453      	str	r3, [r2, #68]	@ 0x44
    }

    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 8005dfc:	4a2f      	ldr	r2, [pc, #188]	@ (8005ebc <HAL_RTC_SetAlarm_IT+0x1fc>)
 8005dfe:	68bb      	ldr	r3, [r7, #8]
 8005e00:	685b      	ldr	r3, [r3, #4]
 8005e02:	6713      	str	r3, [r2, #112]	@ 0x70

    if (sAlarm->FlagAutoClr == ALARM_FLAG_AUTOCLR_ENABLE)
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e08:	2b01      	cmp	r3, #1
 8005e0a:	d106      	bne.n	8005e1a <HAL_RTC_SetAlarm_IT+0x15a>
    {
      /* Configure the  Alarm A output clear */
      SET_BIT(RTC->CR, RTC_CR_ALRAFCLR);
 8005e0c:	4b2b      	ldr	r3, [pc, #172]	@ (8005ebc <HAL_RTC_SetAlarm_IT+0x1fc>)
 8005e0e:	699b      	ldr	r3, [r3, #24]
 8005e10:	4a2a      	ldr	r2, [pc, #168]	@ (8005ebc <HAL_RTC_SetAlarm_IT+0x1fc>)
 8005e12:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005e16:	6193      	str	r3, [r2, #24]
 8005e18:	e005      	b.n	8005e26 <HAL_RTC_SetAlarm_IT+0x166>
    }
    else
    {
      /* Disable the Alarm A output clear */
      CLEAR_BIT(RTC->CR, RTC_CR_ALRAFCLR);
 8005e1a:	4b28      	ldr	r3, [pc, #160]	@ (8005ebc <HAL_RTC_SetAlarm_IT+0x1fc>)
 8005e1c:	699b      	ldr	r3, [r3, #24]
 8005e1e:	4a27      	ldr	r2, [pc, #156]	@ (8005ebc <HAL_RTC_SetAlarm_IT+0x1fc>)
 8005e20:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 8005e24:	6193      	str	r3, [r2, #24]
    }

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8005e26:	4b25      	ldr	r3, [pc, #148]	@ (8005ebc <HAL_RTC_SetAlarm_IT+0x1fc>)
 8005e28:	699b      	ldr	r3, [r3, #24]
 8005e2a:	4a24      	ldr	r2, [pc, #144]	@ (8005ebc <HAL_RTC_SetAlarm_IT+0x1fc>)
 8005e2c:	f443 5388 	orr.w	r3, r3, #4352	@ 0x1100
 8005e30:	6193      	str	r3, [r2, #24]
 8005e32:	e036      	b.n	8005ea2 <HAL_RTC_SetAlarm_IT+0x1e2>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8005e34:	4b21      	ldr	r3, [pc, #132]	@ (8005ebc <HAL_RTC_SetAlarm_IT+0x1fc>)
 8005e36:	699b      	ldr	r3, [r3, #24]
 8005e38:	4a20      	ldr	r2, [pc, #128]	@ (8005ebc <HAL_RTC_SetAlarm_IT+0x1fc>)
 8005e3a:	f423 5308 	bic.w	r3, r3, #8704	@ 0x2200
 8005e3e:	6193      	str	r3, [r2, #24]

    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8005e40:	4b1e      	ldr	r3, [pc, #120]	@ (8005ebc <HAL_RTC_SetAlarm_IT+0x1fc>)
 8005e42:	2202      	movs	r2, #2
 8005e44:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (binary_mode == RTC_BINARY_ONLY)
 8005e46:	693b      	ldr	r3, [r7, #16]
 8005e48:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005e4c:	d107      	bne.n	8005e5e <HAL_RTC_SetAlarm_IT+0x19e>
    {
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 8005e4e:	68bb      	ldr	r3, [r7, #8]
 8005e50:	699a      	ldr	r2, [r3, #24]
 8005e52:	68bb      	ldr	r3, [r7, #8]
 8005e54:	69db      	ldr	r3, [r3, #28]
 8005e56:	4919      	ldr	r1, [pc, #100]	@ (8005ebc <HAL_RTC_SetAlarm_IT+0x1fc>)
 8005e58:	4313      	orrs	r3, r2
 8005e5a:	64cb      	str	r3, [r1, #76]	@ 0x4c
 8005e5c:	e006      	b.n	8005e6c <HAL_RTC_SetAlarm_IT+0x1ac>
    }
    else
    {
      WRITE_REG(RTC->ALRMBR, tmpreg);
 8005e5e:	4a17      	ldr	r2, [pc, #92]	@ (8005ebc <HAL_RTC_SetAlarm_IT+0x1fc>)
 8005e60:	697b      	ldr	r3, [r7, #20]
 8005e62:	6493      	str	r3, [r2, #72]	@ 0x48

      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 8005e64:	4a15      	ldr	r2, [pc, #84]	@ (8005ebc <HAL_RTC_SetAlarm_IT+0x1fc>)
 8005e66:	68bb      	ldr	r3, [r7, #8]
 8005e68:	699b      	ldr	r3, [r3, #24]
 8005e6a:	64d3      	str	r3, [r2, #76]	@ 0x4c
    }

    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 8005e6c:	4a13      	ldr	r2, [pc, #76]	@ (8005ebc <HAL_RTC_SetAlarm_IT+0x1fc>)
 8005e6e:	68bb      	ldr	r3, [r7, #8]
 8005e70:	685b      	ldr	r3, [r3, #4]
 8005e72:	6753      	str	r3, [r2, #116]	@ 0x74

    if (sAlarm->FlagAutoClr == ALARM_FLAG_AUTOCLR_ENABLE)
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e78:	2b01      	cmp	r3, #1
 8005e7a:	d106      	bne.n	8005e8a <HAL_RTC_SetAlarm_IT+0x1ca>
    {
      /* Configure the  Alarm B Output clear */
      SET_BIT(RTC->CR, RTC_CR_ALRBFCLR);
 8005e7c:	4b0f      	ldr	r3, [pc, #60]	@ (8005ebc <HAL_RTC_SetAlarm_IT+0x1fc>)
 8005e7e:	699b      	ldr	r3, [r3, #24]
 8005e80:	4a0e      	ldr	r2, [pc, #56]	@ (8005ebc <HAL_RTC_SetAlarm_IT+0x1fc>)
 8005e82:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005e86:	6193      	str	r3, [r2, #24]
 8005e88:	e005      	b.n	8005e96 <HAL_RTC_SetAlarm_IT+0x1d6>
    }
    else
    {
      /* Disable the  Alarm B Output clear */
      CLEAR_BIT(RTC->CR, RTC_CR_ALRBFCLR);
 8005e8a:	4b0c      	ldr	r3, [pc, #48]	@ (8005ebc <HAL_RTC_SetAlarm_IT+0x1fc>)
 8005e8c:	699b      	ldr	r3, [r3, #24]
 8005e8e:	4a0b      	ldr	r2, [pc, #44]	@ (8005ebc <HAL_RTC_SetAlarm_IT+0x1fc>)
 8005e90:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005e94:	6193      	str	r3, [r2, #24]
    }

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8005e96:	4b09      	ldr	r3, [pc, #36]	@ (8005ebc <HAL_RTC_SetAlarm_IT+0x1fc>)
 8005e98:	699b      	ldr	r3, [r3, #24]
 8005e9a:	4a08      	ldr	r2, [pc, #32]	@ (8005ebc <HAL_RTC_SetAlarm_IT+0x1fc>)
 8005e9c:	f443 5308 	orr.w	r3, r3, #8704	@ 0x2200
 8005ea0:	6193      	str	r3, [r2, #24]
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	2201      	movs	r2, #1
 8005ea6:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	2200      	movs	r2, #0
 8005eae:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8005eb2:	2300      	movs	r3, #0
}
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	371c      	adds	r7, #28
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	bd90      	pop	{r4, r7, pc}
 8005ebc:	46007800 	.word	0x46007800

08005ec0 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8005ec0:	b480      	push	{r7}
 8005ec2:	b083      	sub	sp, #12
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
 8005ec8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8005ed0:	2b01      	cmp	r3, #1
 8005ed2:	d101      	bne.n	8005ed8 <HAL_RTC_DeactivateAlarm+0x18>
 8005ed4:	2302      	movs	r3, #2
 8005ed6:	e02d      	b.n	8005f34 <HAL_RTC_DeactivateAlarm+0x74>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2201      	movs	r2, #1
 8005edc:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2202      	movs	r2, #2
 8005ee4:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* In case of interrupt mode is used, the interrupt source must disabled */
  if (Alarm == RTC_ALARM_A)
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005eee:	d10c      	bne.n	8005f0a <HAL_RTC_DeactivateAlarm+0x4a>
  {
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8005ef0:	4b13      	ldr	r3, [pc, #76]	@ (8005f40 <HAL_RTC_DeactivateAlarm+0x80>)
 8005ef2:	699b      	ldr	r3, [r3, #24]
 8005ef4:	4a12      	ldr	r2, [pc, #72]	@ (8005f40 <HAL_RTC_DeactivateAlarm+0x80>)
 8005ef6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8005efa:	6193      	str	r3, [r2, #24]

    /* AlarmA, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 8005efc:	4b10      	ldr	r3, [pc, #64]	@ (8005f40 <HAL_RTC_DeactivateAlarm+0x80>)
 8005efe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f00:	4a0f      	ldr	r2, [pc, #60]	@ (8005f40 <HAL_RTC_DeactivateAlarm+0x80>)
 8005f02:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005f06:	6453      	str	r3, [r2, #68]	@ 0x44
 8005f08:	e00b      	b.n	8005f22 <HAL_RTC_DeactivateAlarm+0x62>
  }
  else
  {
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8005f0a:	4b0d      	ldr	r3, [pc, #52]	@ (8005f40 <HAL_RTC_DeactivateAlarm+0x80>)
 8005f0c:	699b      	ldr	r3, [r3, #24]
 8005f0e:	4a0c      	ldr	r2, [pc, #48]	@ (8005f40 <HAL_RTC_DeactivateAlarm+0x80>)
 8005f10:	f423 5308 	bic.w	r3, r3, #8704	@ 0x2200
 8005f14:	6193      	str	r3, [r2, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 8005f16:	4b0a      	ldr	r3, [pc, #40]	@ (8005f40 <HAL_RTC_DeactivateAlarm+0x80>)
 8005f18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f1a:	4a09      	ldr	r2, [pc, #36]	@ (8005f40 <HAL_RTC_DeactivateAlarm+0x80>)
 8005f1c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005f20:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2201      	movs	r2, #1
 8005f26:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8005f32:	2300      	movs	r3, #0
}
 8005f34:	4618      	mov	r0, r3
 8005f36:	370c      	adds	r7, #12
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3e:	4770      	bx	lr
 8005f40:	46007800 	.word	0x46007800

08005f44 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b084      	sub	sp, #16
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8005f4c:	4b15      	ldr	r3, [pc, #84]	@ (8005fa4 <HAL_RTC_WaitForSynchro+0x60>)
 8005f4e:	68db      	ldr	r3, [r3, #12]
 8005f50:	4a14      	ldr	r2, [pc, #80]	@ (8005fa4 <HAL_RTC_WaitForSynchro+0x60>)
 8005f52:	f023 0320 	bic.w	r3, r3, #32
 8005f56:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8005f58:	f7fb fe4c 	bl	8001bf4 <HAL_GetTick>
 8005f5c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8005f5e:	e013      	b.n	8005f88 <HAL_RTC_WaitForSynchro+0x44>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005f60:	f7fb fe48 	bl	8001bf4 <HAL_GetTick>
 8005f64:	4602      	mov	r2, r0
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	1ad3      	subs	r3, r2, r3
 8005f6a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005f6e:	d90b      	bls.n	8005f88 <HAL_RTC_WaitForSynchro+0x44>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8005f70:	4b0c      	ldr	r3, [pc, #48]	@ (8005fa4 <HAL_RTC_WaitForSynchro+0x60>)
 8005f72:	68db      	ldr	r3, [r3, #12]
 8005f74:	f003 0320 	and.w	r3, r3, #32
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d10c      	bne.n	8005f96 <HAL_RTC_WaitForSynchro+0x52>
      {
        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2203      	movs	r2, #3
 8005f80:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
        return HAL_TIMEOUT;
 8005f84:	2303      	movs	r3, #3
 8005f86:	e008      	b.n	8005f9a <HAL_RTC_WaitForSynchro+0x56>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8005f88:	4b06      	ldr	r3, [pc, #24]	@ (8005fa4 <HAL_RTC_WaitForSynchro+0x60>)
 8005f8a:	68db      	ldr	r3, [r3, #12]
 8005f8c:	f003 0320 	and.w	r3, r3, #32
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d0e5      	beq.n	8005f60 <HAL_RTC_WaitForSynchro+0x1c>
 8005f94:	e000      	b.n	8005f98 <HAL_RTC_WaitForSynchro+0x54>
      }
      else
      {
        break;
 8005f96:	bf00      	nop
      }
    }
  }

  return HAL_OK;
 8005f98:	2300      	movs	r3, #0
}
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	3710      	adds	r7, #16
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	bd80      	pop	{r7, pc}
 8005fa2:	bf00      	nop
 8005fa4:	46007800 	.word	0x46007800

08005fa8 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b084      	sub	sp, #16
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8005fb4:	4b19      	ldr	r3, [pc, #100]	@ (800601c <RTC_EnterInitMode+0x74>)
 8005fb6:	68db      	ldr	r3, [r3, #12]
 8005fb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d128      	bne.n	8006012 <RTC_EnterInitMode+0x6a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8005fc0:	4b16      	ldr	r3, [pc, #88]	@ (800601c <RTC_EnterInitMode+0x74>)
 8005fc2:	68db      	ldr	r3, [r3, #12]
 8005fc4:	4a15      	ldr	r2, [pc, #84]	@ (800601c <RTC_EnterInitMode+0x74>)
 8005fc6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005fca:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8005fcc:	f7fb fe12 	bl	8001bf4 <HAL_GetTick>
 8005fd0:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005fd2:	e013      	b.n	8005ffc <RTC_EnterInitMode+0x54>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8005fd4:	f7fb fe0e 	bl	8001bf4 <HAL_GetTick>
 8005fd8:	4602      	mov	r2, r0
 8005fda:	68bb      	ldr	r3, [r7, #8]
 8005fdc:	1ad3      	subs	r3, r2, r3
 8005fde:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005fe2:	d90b      	bls.n	8005ffc <RTC_EnterInitMode+0x54>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8005fe4:	4b0d      	ldr	r3, [pc, #52]	@ (800601c <RTC_EnterInitMode+0x74>)
 8005fe6:	68db      	ldr	r3, [r3, #12]
 8005fe8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d10f      	bne.n	8006010 <RTC_EnterInitMode+0x68>
        {
          status = HAL_TIMEOUT;
 8005ff0:	2303      	movs	r3, #3
 8005ff2:	73fb      	strb	r3, [r7, #15]

          /* Change RTC state */
          hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2203      	movs	r2, #3
 8005ff8:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005ffc:	4b07      	ldr	r3, [pc, #28]	@ (800601c <RTC_EnterInitMode+0x74>)
 8005ffe:	68db      	ldr	r3, [r3, #12]
 8006000:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006004:	2b00      	cmp	r3, #0
 8006006:	d104      	bne.n	8006012 <RTC_EnterInitMode+0x6a>
 8006008:	7bfb      	ldrb	r3, [r7, #15]
 800600a:	2b03      	cmp	r3, #3
 800600c:	d1e2      	bne.n	8005fd4 <RTC_EnterInitMode+0x2c>
 800600e:	e000      	b.n	8006012 <RTC_EnterInitMode+0x6a>
        }
        else
        {
          break;
 8006010:	bf00      	nop
        }
      }
    }
  }

  return status;
 8006012:	7bfb      	ldrb	r3, [r7, #15]
}
 8006014:	4618      	mov	r0, r3
 8006016:	3710      	adds	r7, #16
 8006018:	46bd      	mov	sp, r7
 800601a:	bd80      	pop	{r7, pc}
 800601c:	46007800 	.word	0x46007800

08006020 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b084      	sub	sp, #16
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006028:	2300      	movs	r3, #0
 800602a:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800602c:	4b1a      	ldr	r3, [pc, #104]	@ (8006098 <RTC_ExitInitMode+0x78>)
 800602e:	68db      	ldr	r3, [r3, #12]
 8006030:	4a19      	ldr	r2, [pc, #100]	@ (8006098 <RTC_ExitInitMode+0x78>)
 8006032:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006036:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8006038:	4b17      	ldr	r3, [pc, #92]	@ (8006098 <RTC_ExitInitMode+0x78>)
 800603a:	699b      	ldr	r3, [r3, #24]
 800603c:	f003 0320 	and.w	r3, r3, #32
 8006040:	2b00      	cmp	r3, #0
 8006042:	d10c      	bne.n	800605e <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006044:	6878      	ldr	r0, [r7, #4]
 8006046:	f7ff ff7d 	bl	8005f44 <HAL_RTC_WaitForSynchro>
 800604a:	4603      	mov	r3, r0
 800604c:	2b00      	cmp	r3, #0
 800604e:	d01e      	beq.n	800608e <RTC_ExitInitMode+0x6e>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2203      	movs	r2, #3
 8006054:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 8006058:	2303      	movs	r3, #3
 800605a:	73fb      	strb	r3, [r7, #15]
 800605c:	e017      	b.n	800608e <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800605e:	4b0e      	ldr	r3, [pc, #56]	@ (8006098 <RTC_ExitInitMode+0x78>)
 8006060:	699b      	ldr	r3, [r3, #24]
 8006062:	4a0d      	ldr	r2, [pc, #52]	@ (8006098 <RTC_ExitInitMode+0x78>)
 8006064:	f023 0320 	bic.w	r3, r3, #32
 8006068:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800606a:	6878      	ldr	r0, [r7, #4]
 800606c:	f7ff ff6a 	bl	8005f44 <HAL_RTC_WaitForSynchro>
 8006070:	4603      	mov	r3, r0
 8006072:	2b00      	cmp	r3, #0
 8006074:	d005      	beq.n	8006082 <RTC_ExitInitMode+0x62>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2203      	movs	r2, #3
 800607a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 800607e:	2303      	movs	r3, #3
 8006080:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006082:	4b05      	ldr	r3, [pc, #20]	@ (8006098 <RTC_ExitInitMode+0x78>)
 8006084:	699b      	ldr	r3, [r3, #24]
 8006086:	4a04      	ldr	r2, [pc, #16]	@ (8006098 <RTC_ExitInitMode+0x78>)
 8006088:	f043 0320 	orr.w	r3, r3, #32
 800608c:	6193      	str	r3, [r2, #24]
  }
  return status;
 800608e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006090:	4618      	mov	r0, r3
 8006092:	3710      	adds	r7, #16
 8006094:	46bd      	mov	sp, r7
 8006096:	bd80      	pop	{r7, pc}
 8006098:	46007800 	.word	0x46007800

0800609c <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800609c:	b480      	push	{r7}
 800609e:	b085      	sub	sp, #20
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	4603      	mov	r3, r0
 80060a4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcd_high = 0U;
 80060a6:	2300      	movs	r3, #0
 80060a8:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_value = Value;
 80060aa:	79fb      	ldrb	r3, [r7, #7]
 80060ac:	72fb      	strb	r3, [r7, #11]

  while (tmp_value >= 10U)
 80060ae:	e005      	b.n	80060bc <RTC_ByteToBcd2+0x20>
  {
    bcd_high++;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	3301      	adds	r3, #1
 80060b4:	60fb      	str	r3, [r7, #12]
    tmp_value -= 10U;
 80060b6:	7afb      	ldrb	r3, [r7, #11]
 80060b8:	3b0a      	subs	r3, #10
 80060ba:	72fb      	strb	r3, [r7, #11]
  while (tmp_value >= 10U)
 80060bc:	7afb      	ldrb	r3, [r7, #11]
 80060be:	2b09      	cmp	r3, #9
 80060c0:	d8f6      	bhi.n	80060b0 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcd_high << 4U) | tmp_value);
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	b2db      	uxtb	r3, r3
 80060c6:	011b      	lsls	r3, r3, #4
 80060c8:	b2da      	uxtb	r2, r3
 80060ca:	7afb      	ldrb	r3, [r7, #11]
 80060cc:	4313      	orrs	r3, r2
 80060ce:	b2db      	uxtb	r3, r3
}
 80060d0:	4618      	mov	r0, r3
 80060d2:	3714      	adds	r7, #20
 80060d4:	46bd      	mov	sp, r7
 80060d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060da:	4770      	bx	lr

080060dc <HAL_RTCEx_EnableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 80060dc:	b480      	push	{r7}
 80060de:	b083      	sub	sp, #12
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80060ea:	2b01      	cmp	r3, #1
 80060ec:	d101      	bne.n	80060f2 <HAL_RTCEx_EnableBypassShadow+0x16>
 80060ee:	2302      	movs	r3, #2
 80060f0:	e016      	b.n	8006120 <HAL_RTCEx_EnableBypassShadow+0x44>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2201      	movs	r2, #1
 80060f6:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2202      	movs	r2, #2
 80060fe:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006102:	4b0a      	ldr	r3, [pc, #40]	@ (800612c <HAL_RTCEx_EnableBypassShadow+0x50>)
 8006104:	699b      	ldr	r3, [r3, #24]
 8006106:	4a09      	ldr	r2, [pc, #36]	@ (800612c <HAL_RTCEx_EnableBypassShadow+0x50>)
 8006108:	f043 0320 	orr.w	r3, r3, #32
 800610c:	6193      	str	r3, [r2, #24]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2201      	movs	r2, #1
 8006112:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2200      	movs	r2, #0
 800611a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800611e:	2300      	movs	r3, #0
}
 8006120:	4618      	mov	r0, r3
 8006122:	370c      	adds	r7, #12
 8006124:	46bd      	mov	sp, r7
 8006126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612a:	4770      	bx	lr
 800612c:	46007800 	.word	0x46007800

08006130 <HAL_RTCEx_BKUPWrite>:
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(const RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8006130:	b480      	push	{r7}
 8006132:	b087      	sub	sp, #28
 8006134:	af00      	add	r7, sp, #0
 8006136:	60f8      	str	r0, [r7, #12]
 8006138:	60b9      	str	r1, [r7, #8]
 800613a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  /* Determine address of the specified Backup register */
  tmp = (uint32_t)(&(TAMP->BKP0R));
 800613c:	4b07      	ldr	r3, [pc, #28]	@ (800615c <HAL_RTCEx_BKUPWrite+0x2c>)
 800613e:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	009b      	lsls	r3, r3, #2
 8006144:	697a      	ldr	r2, [r7, #20]
 8006146:	4413      	add	r3, r2
 8006148:	617b      	str	r3, [r7, #20]

  /* Write data in the specified register Backup register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800614a:	697b      	ldr	r3, [r7, #20]
 800614c:	687a      	ldr	r2, [r7, #4]
 800614e:	601a      	str	r2, [r3, #0]
}
 8006150:	bf00      	nop
 8006152:	371c      	adds	r7, #28
 8006154:	46bd      	mov	sp, r7
 8006156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615a:	4770      	bx	lr
 800615c:	46007d00 	.word	0x46007d00

08006160 <HAL_RTCEx_PrivilegeModeSet>:
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(const RTC_HandleTypeDef *hrtc,
                                             const RTC_PrivilegeStateTypeDef *privilegeState)
{
 8006160:	b480      	push	{r7}
 8006162:	b083      	sub	sp, #12
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
 8006168:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCFGR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	681a      	ldr	r2, [r3, #0]
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	685b      	ldr	r3, [r3, #4]
 8006172:	4910      	ldr	r1, [pc, #64]	@ (80061b4 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 8006174:	4313      	orrs	r3, r2
 8006176:	61cb      	str	r3, [r1, #28]

  /* TAMP, Monotonic counter and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
               (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCFGR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone | \
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	689a      	ldr	r2, [r3, #8]
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	68db      	ldr	r3, [r3, #12]
 8006180:	431a      	orrs	r2, r3
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	699b      	ldr	r3, [r3, #24]
 8006186:	490c      	ldr	r1, [pc, #48]	@ (80061b8 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 8006188:	4313      	orrs	r3, r2
 800618a:	624b      	str	r3, [r1, #36]	@ 0x24
  /* Backup register start zone
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
               (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
  MODIFY_REG(TAMP->SECCFGR,
 800618c:	4b0a      	ldr	r3, [pc, #40]	@ (80061b8 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800618e:	6a1b      	ldr	r3, [r3, #32]
 8006190:	f003 22ff 	and.w	r2, r3, #4278255360	@ 0xff00ff00
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	6919      	ldr	r1, [r3, #16]
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	695b      	ldr	r3, [r3, #20]
 800619c:	041b      	lsls	r3, r3, #16
 800619e:	430b      	orrs	r3, r1
 80061a0:	4905      	ldr	r1, [pc, #20]	@ (80061b8 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 80061a2:	4313      	orrs	r3, r2
 80061a4:	620b      	str	r3, [r1, #32]
             (TAMP_SECCFGR_BKPRWSEC | TAMP_SECCFGR_BKPWSEC),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SECCFGR_BKPRWSEC_Pos) | \
              (privilegeState->backupRegisterStartZone3 << TAMP_SECCFGR_BKPWSEC_Pos)));

  return HAL_OK;
 80061a6:	2300      	movs	r3, #0
}
 80061a8:	4618      	mov	r0, r3
 80061aa:	370c      	adds	r7, #12
 80061ac:	46bd      	mov	sp, r7
 80061ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b2:	4770      	bx	lr
 80061b4:	46007800 	.word	0x46007800
 80061b8:	46007c00 	.word	0x46007c00

080061bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80061bc:	b480      	push	{r7}
 80061be:	b085      	sub	sp, #20
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80061ca:	b2db      	uxtb	r3, r3
 80061cc:	2b01      	cmp	r3, #1
 80061ce:	d001      	beq.n	80061d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80061d0:	2301      	movs	r3, #1
 80061d2:	e03b      	b.n	800624c <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2202      	movs	r2, #2
 80061d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	68da      	ldr	r2, [r3, #12]
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f042 0201 	orr.w	r2, r2, #1
 80061ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4a19      	ldr	r2, [pc, #100]	@ (8006258 <HAL_TIM_Base_Start_IT+0x9c>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d009      	beq.n	800620a <HAL_TIM_Base_Start_IT+0x4e>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80061fe:	d004      	beq.n	800620a <HAL_TIM_Base_Start_IT+0x4e>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4a15      	ldr	r2, [pc, #84]	@ (800625c <HAL_TIM_Base_Start_IT+0xa0>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d115      	bne.n	8006236 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	689a      	ldr	r2, [r3, #8]
 8006210:	4b13      	ldr	r3, [pc, #76]	@ (8006260 <HAL_TIM_Base_Start_IT+0xa4>)
 8006212:	4013      	ands	r3, r2
 8006214:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	2b06      	cmp	r3, #6
 800621a:	d015      	beq.n	8006248 <HAL_TIM_Base_Start_IT+0x8c>
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006222:	d011      	beq.n	8006248 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	681a      	ldr	r2, [r3, #0]
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f042 0201 	orr.w	r2, r2, #1
 8006232:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006234:	e008      	b.n	8006248 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	681a      	ldr	r2, [r3, #0]
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f042 0201 	orr.w	r2, r2, #1
 8006244:	601a      	str	r2, [r3, #0]
 8006246:	e000      	b.n	800624a <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006248:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800624a:	2300      	movs	r3, #0
}
 800624c:	4618      	mov	r0, r3
 800624e:	3714      	adds	r7, #20
 8006250:	46bd      	mov	sp, r7
 8006252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006256:	4770      	bx	lr
 8006258:	40012c00 	.word	0x40012c00
 800625c:	40000400 	.word	0x40000400
 8006260:	00010007 	.word	0x00010007

08006264 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006264:	b480      	push	{r7}
 8006266:	b083      	sub	sp, #12
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	68da      	ldr	r2, [r3, #12]
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f022 0201 	bic.w	r2, r2, #1
 800627a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	6a1a      	ldr	r2, [r3, #32]
 8006282:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006286:	4013      	ands	r3, r2
 8006288:	2b00      	cmp	r3, #0
 800628a:	d10f      	bne.n	80062ac <HAL_TIM_Base_Stop_IT+0x48>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	6a1a      	ldr	r2, [r3, #32]
 8006292:	f244 4344 	movw	r3, #17476	@ 0x4444
 8006296:	4013      	ands	r3, r2
 8006298:	2b00      	cmp	r3, #0
 800629a:	d107      	bne.n	80062ac <HAL_TIM_Base_Stop_IT+0x48>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	681a      	ldr	r2, [r3, #0]
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f022 0201 	bic.w	r2, r2, #1
 80062aa:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2201      	movs	r2, #1
 80062b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 80062b4:	2300      	movs	r3, #0
}
 80062b6:	4618      	mov	r0, r3
 80062b8:	370c      	adds	r7, #12
 80062ba:	46bd      	mov	sp, r7
 80062bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c0:	4770      	bx	lr

080062c2 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80062c2:	b580      	push	{r7, lr}
 80062c4:	b082      	sub	sp, #8
 80062c6:	af00      	add	r7, sp, #0
 80062c8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d101      	bne.n	80062d4 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80062d0:	2301      	movs	r3, #1
 80062d2:	e049      	b.n	8006368 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80062da:	b2db      	uxtb	r3, r3
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d106      	bne.n	80062ee <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2200      	movs	r2, #0
 80062e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80062e8:	6878      	ldr	r0, [r7, #4]
 80062ea:	f7fb f8fd 	bl	80014e8 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	2202      	movs	r2, #2
 80062f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681a      	ldr	r2, [r3, #0]
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	3304      	adds	r3, #4
 80062fe:	4619      	mov	r1, r3
 8006300:	4610      	mov	r0, r2
 8006302:	f000 fa8b 	bl	800681c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2201      	movs	r2, #1
 800630a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2201      	movs	r2, #1
 8006312:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2201      	movs	r2, #1
 800631a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2201      	movs	r2, #1
 8006322:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2201      	movs	r2, #1
 800632a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2201      	movs	r2, #1
 8006332:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2201      	movs	r2, #1
 800633a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2201      	movs	r2, #1
 8006342:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2201      	movs	r2, #1
 800634a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2201      	movs	r2, #1
 8006352:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2201      	movs	r2, #1
 800635a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2201      	movs	r2, #1
 8006362:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006366:	2300      	movs	r3, #0
}
 8006368:	4618      	mov	r0, r3
 800636a:	3708      	adds	r7, #8
 800636c:	46bd      	mov	sp, r7
 800636e:	bd80      	pop	{r7, pc}

08006370 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8006370:	b580      	push	{r7, lr}
 8006372:	b082      	sub	sp, #8
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
 8006378:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d101      	bne.n	8006384 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8006380:	2301      	movs	r3, #1
 8006382:	e041      	b.n	8006408 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800638a:	b2db      	uxtb	r3, r3
 800638c:	2b00      	cmp	r3, #0
 800638e:	d106      	bne.n	800639e <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2200      	movs	r2, #0
 8006394:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8006398:	6878      	ldr	r0, [r7, #4]
 800639a:	f000 f839 	bl	8006410 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2202      	movs	r2, #2
 80063a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681a      	ldr	r2, [r3, #0]
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	3304      	adds	r3, #4
 80063ae:	4619      	mov	r1, r3
 80063b0:	4610      	mov	r0, r2
 80063b2:	f000 fa33 	bl	800681c <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	681a      	ldr	r2, [r3, #0]
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f022 0208 	bic.w	r2, r2, #8
 80063c4:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	6819      	ldr	r1, [r3, #0]
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	683a      	ldr	r2, [r7, #0]
 80063d2:	430a      	orrs	r2, r1
 80063d4:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2201      	movs	r2, #1
 80063da:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2201      	movs	r2, #1
 80063e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2201      	movs	r2, #1
 80063ea:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2201      	movs	r2, #1
 80063f2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	2201      	movs	r2, #1
 80063fa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2201      	movs	r2, #1
 8006402:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006406:	2300      	movs	r3, #0
}
 8006408:	4618      	mov	r0, r3
 800640a:	3708      	adds	r7, #8
 800640c:	46bd      	mov	sp, r7
 800640e:	bd80      	pop	{r7, pc}

08006410 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8006410:	b480      	push	{r7}
 8006412:	b083      	sub	sp, #12
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8006418:	bf00      	nop
 800641a:	370c      	adds	r7, #12
 800641c:	46bd      	mov	sp, r7
 800641e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006422:	4770      	bx	lr

08006424 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006424:	b580      	push	{r7, lr}
 8006426:	b084      	sub	sp, #16
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	68db      	ldr	r3, [r3, #12]
 8006432:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	691b      	ldr	r3, [r3, #16]
 800643a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	f003 0302 	and.w	r3, r3, #2
 8006442:	2b00      	cmp	r3, #0
 8006444:	d020      	beq.n	8006488 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	f003 0302 	and.w	r3, r3, #2
 800644c:	2b00      	cmp	r3, #0
 800644e:	d01b      	beq.n	8006488 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f06f 0202 	mvn.w	r2, #2
 8006458:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2201      	movs	r2, #1
 800645e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	699b      	ldr	r3, [r3, #24]
 8006466:	f003 0303 	and.w	r3, r3, #3
 800646a:	2b00      	cmp	r3, #0
 800646c:	d003      	beq.n	8006476 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800646e:	6878      	ldr	r0, [r7, #4]
 8006470:	f000 f9b6 	bl	80067e0 <HAL_TIM_IC_CaptureCallback>
 8006474:	e005      	b.n	8006482 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006476:	6878      	ldr	r0, [r7, #4]
 8006478:	f000 f9a8 	bl	80067cc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800647c:	6878      	ldr	r0, [r7, #4]
 800647e:	f000 f9b9 	bl	80067f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2200      	movs	r2, #0
 8006486:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006488:	68bb      	ldr	r3, [r7, #8]
 800648a:	f003 0304 	and.w	r3, r3, #4
 800648e:	2b00      	cmp	r3, #0
 8006490:	d020      	beq.n	80064d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	f003 0304 	and.w	r3, r3, #4
 8006498:	2b00      	cmp	r3, #0
 800649a:	d01b      	beq.n	80064d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f06f 0204 	mvn.w	r2, #4
 80064a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	2202      	movs	r2, #2
 80064aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	699b      	ldr	r3, [r3, #24]
 80064b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d003      	beq.n	80064c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064ba:	6878      	ldr	r0, [r7, #4]
 80064bc:	f000 f990 	bl	80067e0 <HAL_TIM_IC_CaptureCallback>
 80064c0:	e005      	b.n	80064ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064c2:	6878      	ldr	r0, [r7, #4]
 80064c4:	f000 f982 	bl	80067cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064c8:	6878      	ldr	r0, [r7, #4]
 80064ca:	f000 f993 	bl	80067f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2200      	movs	r2, #0
 80064d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80064d4:	68bb      	ldr	r3, [r7, #8]
 80064d6:	f003 0308 	and.w	r3, r3, #8
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d020      	beq.n	8006520 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	f003 0308 	and.w	r3, r3, #8
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d01b      	beq.n	8006520 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f06f 0208 	mvn.w	r2, #8
 80064f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2204      	movs	r2, #4
 80064f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	69db      	ldr	r3, [r3, #28]
 80064fe:	f003 0303 	and.w	r3, r3, #3
 8006502:	2b00      	cmp	r3, #0
 8006504:	d003      	beq.n	800650e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006506:	6878      	ldr	r0, [r7, #4]
 8006508:	f000 f96a 	bl	80067e0 <HAL_TIM_IC_CaptureCallback>
 800650c:	e005      	b.n	800651a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800650e:	6878      	ldr	r0, [r7, #4]
 8006510:	f000 f95c 	bl	80067cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006514:	6878      	ldr	r0, [r7, #4]
 8006516:	f000 f96d 	bl	80067f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2200      	movs	r2, #0
 800651e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006520:	68bb      	ldr	r3, [r7, #8]
 8006522:	f003 0310 	and.w	r3, r3, #16
 8006526:	2b00      	cmp	r3, #0
 8006528:	d020      	beq.n	800656c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	f003 0310 	and.w	r3, r3, #16
 8006530:	2b00      	cmp	r3, #0
 8006532:	d01b      	beq.n	800656c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f06f 0210 	mvn.w	r2, #16
 800653c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2208      	movs	r2, #8
 8006542:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	69db      	ldr	r3, [r3, #28]
 800654a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800654e:	2b00      	cmp	r3, #0
 8006550:	d003      	beq.n	800655a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006552:	6878      	ldr	r0, [r7, #4]
 8006554:	f000 f944 	bl	80067e0 <HAL_TIM_IC_CaptureCallback>
 8006558:	e005      	b.n	8006566 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800655a:	6878      	ldr	r0, [r7, #4]
 800655c:	f000 f936 	bl	80067cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006560:	6878      	ldr	r0, [r7, #4]
 8006562:	f000 f947 	bl	80067f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2200      	movs	r2, #0
 800656a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800656c:	68bb      	ldr	r3, [r7, #8]
 800656e:	f003 0301 	and.w	r3, r3, #1
 8006572:	2b00      	cmp	r3, #0
 8006574:	d00c      	beq.n	8006590 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	f003 0301 	and.w	r3, r3, #1
 800657c:	2b00      	cmp	r3, #0
 800657e:	d007      	beq.n	8006590 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f06f 0201 	mvn.w	r2, #1
 8006588:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800658a:	6878      	ldr	r0, [r7, #4]
 800658c:	f000 f914 	bl	80067b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006590:	68bb      	ldr	r3, [r7, #8]
 8006592:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006596:	2b00      	cmp	r3, #0
 8006598:	d104      	bne.n	80065a4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800659a:	68bb      	ldr	r3, [r7, #8]
 800659c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d00c      	beq.n	80065be <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d007      	beq.n	80065be <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80065b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80065b8:	6878      	ldr	r0, [r7, #4]
 80065ba:	f000 fd3b 	bl	8007034 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80065be:	68bb      	ldr	r3, [r7, #8]
 80065c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d00c      	beq.n	80065e2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d007      	beq.n	80065e2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80065da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80065dc:	6878      	ldr	r0, [r7, #4]
 80065de:	f000 fd33 	bl	8007048 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80065e2:	68bb      	ldr	r3, [r7, #8]
 80065e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d00c      	beq.n	8006606 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d007      	beq.n	8006606 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80065fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006600:	6878      	ldr	r0, [r7, #4]
 8006602:	f000 f901 	bl	8006808 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006606:	68bb      	ldr	r3, [r7, #8]
 8006608:	f003 0320 	and.w	r3, r3, #32
 800660c:	2b00      	cmp	r3, #0
 800660e:	d00c      	beq.n	800662a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	f003 0320 	and.w	r3, r3, #32
 8006616:	2b00      	cmp	r3, #0
 8006618:	d007      	beq.n	800662a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f06f 0220 	mvn.w	r2, #32
 8006622:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006624:	6878      	ldr	r0, [r7, #4]
 8006626:	f000 fcfb 	bl	8007020 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800662a:	68bb      	ldr	r3, [r7, #8]
 800662c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006630:	2b00      	cmp	r3, #0
 8006632:	d00c      	beq.n	800664e <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800663a:	2b00      	cmp	r3, #0
 800663c:	d007      	beq.n	800664e <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8006646:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8006648:	6878      	ldr	r0, [r7, #4]
 800664a:	f000 fd07 	bl	800705c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800664e:	68bb      	ldr	r3, [r7, #8]
 8006650:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006654:	2b00      	cmp	r3, #0
 8006656:	d00c      	beq.n	8006672 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800665e:	2b00      	cmp	r3, #0
 8006660:	d007      	beq.n	8006672 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800666a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800666c:	6878      	ldr	r0, [r7, #4]
 800666e:	f000 fcff 	bl	8007070 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8006672:	68bb      	ldr	r3, [r7, #8]
 8006674:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006678:	2b00      	cmp	r3, #0
 800667a:	d00c      	beq.n	8006696 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006682:	2b00      	cmp	r3, #0
 8006684:	d007      	beq.n	8006696 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800668e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8006690:	6878      	ldr	r0, [r7, #4]
 8006692:	f000 fcf7 	bl	8007084 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8006696:	68bb      	ldr	r3, [r7, #8]
 8006698:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800669c:	2b00      	cmp	r3, #0
 800669e:	d00c      	beq.n	80066ba <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d007      	beq.n	80066ba <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80066b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80066b4:	6878      	ldr	r0, [r7, #4]
 80066b6:	f000 fcef 	bl	8007098 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80066ba:	bf00      	nop
 80066bc:	3710      	adds	r7, #16
 80066be:	46bd      	mov	sp, r7
 80066c0:	bd80      	pop	{r7, pc}
	...

080066c4 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b086      	sub	sp, #24
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	60f8      	str	r0, [r7, #12]
 80066cc:	60b9      	str	r1, [r7, #8]
 80066ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80066d0:	2300      	movs	r3, #0
 80066d2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_CHANNEL_MODE(sConfig->OCMode, Channel));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80066da:	2b01      	cmp	r3, #1
 80066dc:	d101      	bne.n	80066e2 <HAL_TIM_OC_ConfigChannel+0x1e>
 80066de:	2302      	movs	r3, #2
 80066e0:	e066      	b.n	80067b0 <HAL_TIM_OC_ConfigChannel+0xec>
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	2201      	movs	r2, #1
 80066e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2b14      	cmp	r3, #20
 80066ee:	d857      	bhi.n	80067a0 <HAL_TIM_OC_ConfigChannel+0xdc>
 80066f0:	a201      	add	r2, pc, #4	@ (adr r2, 80066f8 <HAL_TIM_OC_ConfigChannel+0x34>)
 80066f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066f6:	bf00      	nop
 80066f8:	0800674d 	.word	0x0800674d
 80066fc:	080067a1 	.word	0x080067a1
 8006700:	080067a1 	.word	0x080067a1
 8006704:	080067a1 	.word	0x080067a1
 8006708:	0800675b 	.word	0x0800675b
 800670c:	080067a1 	.word	0x080067a1
 8006710:	080067a1 	.word	0x080067a1
 8006714:	080067a1 	.word	0x080067a1
 8006718:	08006769 	.word	0x08006769
 800671c:	080067a1 	.word	0x080067a1
 8006720:	080067a1 	.word	0x080067a1
 8006724:	080067a1 	.word	0x080067a1
 8006728:	08006777 	.word	0x08006777
 800672c:	080067a1 	.word	0x080067a1
 8006730:	080067a1 	.word	0x080067a1
 8006734:	080067a1 	.word	0x080067a1
 8006738:	08006785 	.word	0x08006785
 800673c:	080067a1 	.word	0x080067a1
 8006740:	080067a1 	.word	0x080067a1
 8006744:	080067a1 	.word	0x080067a1
 8006748:	08006793 	.word	0x08006793
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	68b9      	ldr	r1, [r7, #8]
 8006752:	4618      	mov	r0, r3
 8006754:	f000 f8dc 	bl	8006910 <TIM_OC1_SetConfig>
      break;
 8006758:	e025      	b.n	80067a6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	68b9      	ldr	r1, [r7, #8]
 8006760:	4618      	mov	r0, r3
 8006762:	f000 f951 	bl	8006a08 <TIM_OC2_SetConfig>
      break;
 8006766:	e01e      	b.n	80067a6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	68b9      	ldr	r1, [r7, #8]
 800676e:	4618      	mov	r0, r3
 8006770:	f000 f9c4 	bl	8006afc <TIM_OC3_SetConfig>
      break;
 8006774:	e017      	b.n	80067a6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	68b9      	ldr	r1, [r7, #8]
 800677c:	4618      	mov	r0, r3
 800677e:	f000 fa35 	bl	8006bec <TIM_OC4_SetConfig>
      break;
 8006782:	e010      	b.n	80067a6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	68b9      	ldr	r1, [r7, #8]
 800678a:	4618      	mov	r0, r3
 800678c:	f000 faa8 	bl	8006ce0 <TIM_OC5_SetConfig>
      break;
 8006790:	e009      	b.n	80067a6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	68b9      	ldr	r1, [r7, #8]
 8006798:	4618      	mov	r0, r3
 800679a:	f000 faf9 	bl	8006d90 <TIM_OC6_SetConfig>
      break;
 800679e:	e002      	b.n	80067a6 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 80067a0:	2301      	movs	r3, #1
 80067a2:	75fb      	strb	r3, [r7, #23]
      break;
 80067a4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	2200      	movs	r2, #0
 80067aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80067ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80067b0:	4618      	mov	r0, r3
 80067b2:	3718      	adds	r7, #24
 80067b4:	46bd      	mov	sp, r7
 80067b6:	bd80      	pop	{r7, pc}

080067b8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80067b8:	b480      	push	{r7}
 80067ba:	b083      	sub	sp, #12
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80067c0:	bf00      	nop
 80067c2:	370c      	adds	r7, #12
 80067c4:	46bd      	mov	sp, r7
 80067c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ca:	4770      	bx	lr

080067cc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80067cc:	b480      	push	{r7}
 80067ce:	b083      	sub	sp, #12
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80067d4:	bf00      	nop
 80067d6:	370c      	adds	r7, #12
 80067d8:	46bd      	mov	sp, r7
 80067da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067de:	4770      	bx	lr

080067e0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80067e0:	b480      	push	{r7}
 80067e2:	b083      	sub	sp, #12
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80067e8:	bf00      	nop
 80067ea:	370c      	adds	r7, #12
 80067ec:	46bd      	mov	sp, r7
 80067ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f2:	4770      	bx	lr

080067f4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80067f4:	b480      	push	{r7}
 80067f6:	b083      	sub	sp, #12
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80067fc:	bf00      	nop
 80067fe:	370c      	adds	r7, #12
 8006800:	46bd      	mov	sp, r7
 8006802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006806:	4770      	bx	lr

08006808 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006808:	b480      	push	{r7}
 800680a:	b083      	sub	sp, #12
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006810:	bf00      	nop
 8006812:	370c      	adds	r7, #12
 8006814:	46bd      	mov	sp, r7
 8006816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681a:	4770      	bx	lr

0800681c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800681c:	b480      	push	{r7}
 800681e:	b085      	sub	sp, #20
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
 8006824:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	4a34      	ldr	r2, [pc, #208]	@ (8006900 <TIM_Base_SetConfig+0xe4>)
 8006830:	4293      	cmp	r3, r2
 8006832:	d007      	beq.n	8006844 <TIM_Base_SetConfig+0x28>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800683a:	d003      	beq.n	8006844 <TIM_Base_SetConfig+0x28>
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	4a31      	ldr	r2, [pc, #196]	@ (8006904 <TIM_Base_SetConfig+0xe8>)
 8006840:	4293      	cmp	r3, r2
 8006842:	d108      	bne.n	8006856 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800684a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	685b      	ldr	r3, [r3, #4]
 8006850:	68fa      	ldr	r2, [r7, #12]
 8006852:	4313      	orrs	r3, r2
 8006854:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	4a29      	ldr	r2, [pc, #164]	@ (8006900 <TIM_Base_SetConfig+0xe4>)
 800685a:	4293      	cmp	r3, r2
 800685c:	d00f      	beq.n	800687e <TIM_Base_SetConfig+0x62>
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006864:	d00b      	beq.n	800687e <TIM_Base_SetConfig+0x62>
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	4a26      	ldr	r2, [pc, #152]	@ (8006904 <TIM_Base_SetConfig+0xe8>)
 800686a:	4293      	cmp	r3, r2
 800686c:	d007      	beq.n	800687e <TIM_Base_SetConfig+0x62>
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	4a25      	ldr	r2, [pc, #148]	@ (8006908 <TIM_Base_SetConfig+0xec>)
 8006872:	4293      	cmp	r3, r2
 8006874:	d003      	beq.n	800687e <TIM_Base_SetConfig+0x62>
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	4a24      	ldr	r2, [pc, #144]	@ (800690c <TIM_Base_SetConfig+0xf0>)
 800687a:	4293      	cmp	r3, r2
 800687c:	d108      	bne.n	8006890 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006884:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	68db      	ldr	r3, [r3, #12]
 800688a:	68fa      	ldr	r2, [r7, #12]
 800688c:	4313      	orrs	r3, r2
 800688e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	695b      	ldr	r3, [r3, #20]
 800689a:	4313      	orrs	r3, r2
 800689c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	68fa      	ldr	r2, [r7, #12]
 80068a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	689a      	ldr	r2, [r3, #8]
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	681a      	ldr	r2, [r3, #0]
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	4a12      	ldr	r2, [pc, #72]	@ (8006900 <TIM_Base_SetConfig+0xe4>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d007      	beq.n	80068cc <TIM_Base_SetConfig+0xb0>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	4a12      	ldr	r2, [pc, #72]	@ (8006908 <TIM_Base_SetConfig+0xec>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d003      	beq.n	80068cc <TIM_Base_SetConfig+0xb0>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	4a11      	ldr	r2, [pc, #68]	@ (800690c <TIM_Base_SetConfig+0xf0>)
 80068c8:	4293      	cmp	r3, r2
 80068ca:	d103      	bne.n	80068d4 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	691a      	ldr	r2, [r3, #16]
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2201      	movs	r2, #1
 80068d8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	691b      	ldr	r3, [r3, #16]
 80068de:	f003 0301 	and.w	r3, r3, #1
 80068e2:	2b01      	cmp	r3, #1
 80068e4:	d105      	bne.n	80068f2 <TIM_Base_SetConfig+0xd6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	691b      	ldr	r3, [r3, #16]
 80068ea:	f023 0201 	bic.w	r2, r3, #1
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	611a      	str	r2, [r3, #16]
  }
}
 80068f2:	bf00      	nop
 80068f4:	3714      	adds	r7, #20
 80068f6:	46bd      	mov	sp, r7
 80068f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fc:	4770      	bx	lr
 80068fe:	bf00      	nop
 8006900:	40012c00 	.word	0x40012c00
 8006904:	40000400 	.word	0x40000400
 8006908:	40014400 	.word	0x40014400
 800690c:	40014800 	.word	0x40014800

08006910 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006910:	b480      	push	{r7}
 8006912:	b087      	sub	sp, #28
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
 8006918:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6a1b      	ldr	r3, [r3, #32]
 800691e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	6a1b      	ldr	r3, [r3, #32]
 8006924:	f023 0201 	bic.w	r2, r3, #1
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	685b      	ldr	r3, [r3, #4]
 8006930:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	699b      	ldr	r3, [r3, #24]
 8006936:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800693e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006942:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	f023 0303 	bic.w	r3, r3, #3
 800694a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	68fa      	ldr	r2, [r7, #12]
 8006952:	4313      	orrs	r3, r2
 8006954:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006956:	697b      	ldr	r3, [r7, #20]
 8006958:	f023 0302 	bic.w	r3, r3, #2
 800695c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	689b      	ldr	r3, [r3, #8]
 8006962:	697a      	ldr	r2, [r7, #20]
 8006964:	4313      	orrs	r3, r2
 8006966:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	4a24      	ldr	r2, [pc, #144]	@ (80069fc <TIM_OC1_SetConfig+0xec>)
 800696c:	4293      	cmp	r3, r2
 800696e:	d007      	beq.n	8006980 <TIM_OC1_SetConfig+0x70>
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	4a23      	ldr	r2, [pc, #140]	@ (8006a00 <TIM_OC1_SetConfig+0xf0>)
 8006974:	4293      	cmp	r3, r2
 8006976:	d003      	beq.n	8006980 <TIM_OC1_SetConfig+0x70>
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	4a22      	ldr	r2, [pc, #136]	@ (8006a04 <TIM_OC1_SetConfig+0xf4>)
 800697c:	4293      	cmp	r3, r2
 800697e:	d10c      	bne.n	800699a <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006980:	697b      	ldr	r3, [r7, #20]
 8006982:	f023 0308 	bic.w	r3, r3, #8
 8006986:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	68db      	ldr	r3, [r3, #12]
 800698c:	697a      	ldr	r2, [r7, #20]
 800698e:	4313      	orrs	r3, r2
 8006990:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006992:	697b      	ldr	r3, [r7, #20]
 8006994:	f023 0304 	bic.w	r3, r3, #4
 8006998:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	4a17      	ldr	r2, [pc, #92]	@ (80069fc <TIM_OC1_SetConfig+0xec>)
 800699e:	4293      	cmp	r3, r2
 80069a0:	d007      	beq.n	80069b2 <TIM_OC1_SetConfig+0xa2>
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	4a16      	ldr	r2, [pc, #88]	@ (8006a00 <TIM_OC1_SetConfig+0xf0>)
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d003      	beq.n	80069b2 <TIM_OC1_SetConfig+0xa2>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	4a15      	ldr	r2, [pc, #84]	@ (8006a04 <TIM_OC1_SetConfig+0xf4>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d111      	bne.n	80069d6 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80069b2:	693b      	ldr	r3, [r7, #16]
 80069b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80069b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80069ba:	693b      	ldr	r3, [r7, #16]
 80069bc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80069c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	695b      	ldr	r3, [r3, #20]
 80069c6:	693a      	ldr	r2, [r7, #16]
 80069c8:	4313      	orrs	r3, r2
 80069ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	699b      	ldr	r3, [r3, #24]
 80069d0:	693a      	ldr	r2, [r7, #16]
 80069d2:	4313      	orrs	r3, r2
 80069d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	693a      	ldr	r2, [r7, #16]
 80069da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	68fa      	ldr	r2, [r7, #12]
 80069e0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	685a      	ldr	r2, [r3, #4]
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	697a      	ldr	r2, [r7, #20]
 80069ee:	621a      	str	r2, [r3, #32]
}
 80069f0:	bf00      	nop
 80069f2:	371c      	adds	r7, #28
 80069f4:	46bd      	mov	sp, r7
 80069f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fa:	4770      	bx	lr
 80069fc:	40012c00 	.word	0x40012c00
 8006a00:	40014400 	.word	0x40014400
 8006a04:	40014800 	.word	0x40014800

08006a08 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006a08:	b480      	push	{r7}
 8006a0a:	b087      	sub	sp, #28
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
 8006a10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6a1b      	ldr	r3, [r3, #32]
 8006a16:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	6a1b      	ldr	r3, [r3, #32]
 8006a1c:	f023 0210 	bic.w	r2, r3, #16
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	685b      	ldr	r3, [r3, #4]
 8006a28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	699b      	ldr	r3, [r3, #24]
 8006a2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006a36:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006a42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	021b      	lsls	r3, r3, #8
 8006a4a:	68fa      	ldr	r2, [r7, #12]
 8006a4c:	4313      	orrs	r3, r2
 8006a4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006a50:	697b      	ldr	r3, [r7, #20]
 8006a52:	f023 0320 	bic.w	r3, r3, #32
 8006a56:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	689b      	ldr	r3, [r3, #8]
 8006a5c:	011b      	lsls	r3, r3, #4
 8006a5e:	697a      	ldr	r2, [r7, #20]
 8006a60:	4313      	orrs	r3, r2
 8006a62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	4a22      	ldr	r2, [pc, #136]	@ (8006af0 <TIM_OC2_SetConfig+0xe8>)
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d10d      	bne.n	8006a88 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006a6c:	697b      	ldr	r3, [r7, #20]
 8006a6e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006a72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	68db      	ldr	r3, [r3, #12]
 8006a78:	011b      	lsls	r3, r3, #4
 8006a7a:	697a      	ldr	r2, [r7, #20]
 8006a7c:	4313      	orrs	r3, r2
 8006a7e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006a80:	697b      	ldr	r3, [r7, #20]
 8006a82:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006a86:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	4a19      	ldr	r2, [pc, #100]	@ (8006af0 <TIM_OC2_SetConfig+0xe8>)
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d007      	beq.n	8006aa0 <TIM_OC2_SetConfig+0x98>
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	4a18      	ldr	r2, [pc, #96]	@ (8006af4 <TIM_OC2_SetConfig+0xec>)
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d003      	beq.n	8006aa0 <TIM_OC2_SetConfig+0x98>
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	4a17      	ldr	r2, [pc, #92]	@ (8006af8 <TIM_OC2_SetConfig+0xf0>)
 8006a9c:	4293      	cmp	r3, r2
 8006a9e:	d113      	bne.n	8006ac8 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006aa0:	693b      	ldr	r3, [r7, #16]
 8006aa2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006aa6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006aa8:	693b      	ldr	r3, [r7, #16]
 8006aaa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006aae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	695b      	ldr	r3, [r3, #20]
 8006ab4:	009b      	lsls	r3, r3, #2
 8006ab6:	693a      	ldr	r2, [r7, #16]
 8006ab8:	4313      	orrs	r3, r2
 8006aba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	699b      	ldr	r3, [r3, #24]
 8006ac0:	009b      	lsls	r3, r3, #2
 8006ac2:	693a      	ldr	r2, [r7, #16]
 8006ac4:	4313      	orrs	r3, r2
 8006ac6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	693a      	ldr	r2, [r7, #16]
 8006acc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	68fa      	ldr	r2, [r7, #12]
 8006ad2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	685a      	ldr	r2, [r3, #4]
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	697a      	ldr	r2, [r7, #20]
 8006ae0:	621a      	str	r2, [r3, #32]
}
 8006ae2:	bf00      	nop
 8006ae4:	371c      	adds	r7, #28
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aec:	4770      	bx	lr
 8006aee:	bf00      	nop
 8006af0:	40012c00 	.word	0x40012c00
 8006af4:	40014400 	.word	0x40014400
 8006af8:	40014800 	.word	0x40014800

08006afc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006afc:	b480      	push	{r7}
 8006afe:	b087      	sub	sp, #28
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
 8006b04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6a1b      	ldr	r3, [r3, #32]
 8006b0a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6a1b      	ldr	r3, [r3, #32]
 8006b10:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	685b      	ldr	r3, [r3, #4]
 8006b1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	69db      	ldr	r3, [r3, #28]
 8006b22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006b2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	f023 0303 	bic.w	r3, r3, #3
 8006b36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	68fa      	ldr	r2, [r7, #12]
 8006b3e:	4313      	orrs	r3, r2
 8006b40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006b42:	697b      	ldr	r3, [r7, #20]
 8006b44:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006b48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	689b      	ldr	r3, [r3, #8]
 8006b4e:	021b      	lsls	r3, r3, #8
 8006b50:	697a      	ldr	r2, [r7, #20]
 8006b52:	4313      	orrs	r3, r2
 8006b54:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	4a21      	ldr	r2, [pc, #132]	@ (8006be0 <TIM_OC3_SetConfig+0xe4>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d10d      	bne.n	8006b7a <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006b5e:	697b      	ldr	r3, [r7, #20]
 8006b60:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006b64:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	68db      	ldr	r3, [r3, #12]
 8006b6a:	021b      	lsls	r3, r3, #8
 8006b6c:	697a      	ldr	r2, [r7, #20]
 8006b6e:	4313      	orrs	r3, r2
 8006b70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006b72:	697b      	ldr	r3, [r7, #20]
 8006b74:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006b78:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	4a18      	ldr	r2, [pc, #96]	@ (8006be0 <TIM_OC3_SetConfig+0xe4>)
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	d007      	beq.n	8006b92 <TIM_OC3_SetConfig+0x96>
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	4a17      	ldr	r2, [pc, #92]	@ (8006be4 <TIM_OC3_SetConfig+0xe8>)
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d003      	beq.n	8006b92 <TIM_OC3_SetConfig+0x96>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	4a16      	ldr	r2, [pc, #88]	@ (8006be8 <TIM_OC3_SetConfig+0xec>)
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d113      	bne.n	8006bba <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006b92:	693b      	ldr	r3, [r7, #16]
 8006b94:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006b98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006b9a:	693b      	ldr	r3, [r7, #16]
 8006b9c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006ba0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	695b      	ldr	r3, [r3, #20]
 8006ba6:	011b      	lsls	r3, r3, #4
 8006ba8:	693a      	ldr	r2, [r7, #16]
 8006baa:	4313      	orrs	r3, r2
 8006bac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	699b      	ldr	r3, [r3, #24]
 8006bb2:	011b      	lsls	r3, r3, #4
 8006bb4:	693a      	ldr	r2, [r7, #16]
 8006bb6:	4313      	orrs	r3, r2
 8006bb8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	693a      	ldr	r2, [r7, #16]
 8006bbe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	68fa      	ldr	r2, [r7, #12]
 8006bc4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	685a      	ldr	r2, [r3, #4]
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	697a      	ldr	r2, [r7, #20]
 8006bd2:	621a      	str	r2, [r3, #32]
}
 8006bd4:	bf00      	nop
 8006bd6:	371c      	adds	r7, #28
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bde:	4770      	bx	lr
 8006be0:	40012c00 	.word	0x40012c00
 8006be4:	40014400 	.word	0x40014400
 8006be8:	40014800 	.word	0x40014800

08006bec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006bec:	b480      	push	{r7}
 8006bee:	b087      	sub	sp, #28
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
 8006bf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	6a1b      	ldr	r3, [r3, #32]
 8006bfa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	6a1b      	ldr	r3, [r3, #32]
 8006c00:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	685b      	ldr	r3, [r3, #4]
 8006c0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	69db      	ldr	r3, [r3, #28]
 8006c12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006c1a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006c1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006c26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	021b      	lsls	r3, r3, #8
 8006c2e:	68fa      	ldr	r2, [r7, #12]
 8006c30:	4313      	orrs	r3, r2
 8006c32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006c34:	697b      	ldr	r3, [r7, #20]
 8006c36:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006c3a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	689b      	ldr	r3, [r3, #8]
 8006c40:	031b      	lsls	r3, r3, #12
 8006c42:	697a      	ldr	r2, [r7, #20]
 8006c44:	4313      	orrs	r3, r2
 8006c46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	4a22      	ldr	r2, [pc, #136]	@ (8006cd4 <TIM_OC4_SetConfig+0xe8>)
 8006c4c:	4293      	cmp	r3, r2
 8006c4e:	d10d      	bne.n	8006c6c <TIM_OC4_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8006c50:	697b      	ldr	r3, [r7, #20]
 8006c52:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006c56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	68db      	ldr	r3, [r3, #12]
 8006c5c:	031b      	lsls	r3, r3, #12
 8006c5e:	697a      	ldr	r2, [r7, #20]
 8006c60:	4313      	orrs	r3, r2
 8006c62:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8006c64:	697b      	ldr	r3, [r7, #20]
 8006c66:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006c6a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	4a19      	ldr	r2, [pc, #100]	@ (8006cd4 <TIM_OC4_SetConfig+0xe8>)
 8006c70:	4293      	cmp	r3, r2
 8006c72:	d007      	beq.n	8006c84 <TIM_OC4_SetConfig+0x98>
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	4a18      	ldr	r2, [pc, #96]	@ (8006cd8 <TIM_OC4_SetConfig+0xec>)
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d003      	beq.n	8006c84 <TIM_OC4_SetConfig+0x98>
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	4a17      	ldr	r2, [pc, #92]	@ (8006cdc <TIM_OC4_SetConfig+0xf0>)
 8006c80:	4293      	cmp	r3, r2
 8006c82:	d113      	bne.n	8006cac <TIM_OC4_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006c84:	693b      	ldr	r3, [r7, #16]
 8006c86:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006c8a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8006c8c:	693b      	ldr	r3, [r7, #16]
 8006c8e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006c92:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	695b      	ldr	r3, [r3, #20]
 8006c98:	019b      	lsls	r3, r3, #6
 8006c9a:	693a      	ldr	r2, [r7, #16]
 8006c9c:	4313      	orrs	r3, r2
 8006c9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	699b      	ldr	r3, [r3, #24]
 8006ca4:	019b      	lsls	r3, r3, #6
 8006ca6:	693a      	ldr	r2, [r7, #16]
 8006ca8:	4313      	orrs	r3, r2
 8006caa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	693a      	ldr	r2, [r7, #16]
 8006cb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	68fa      	ldr	r2, [r7, #12]
 8006cb6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	685a      	ldr	r2, [r3, #4]
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	697a      	ldr	r2, [r7, #20]
 8006cc4:	621a      	str	r2, [r3, #32]
}
 8006cc6:	bf00      	nop
 8006cc8:	371c      	adds	r7, #28
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd0:	4770      	bx	lr
 8006cd2:	bf00      	nop
 8006cd4:	40012c00 	.word	0x40012c00
 8006cd8:	40014400 	.word	0x40014400
 8006cdc:	40014800 	.word	0x40014800

08006ce0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006ce0:	b480      	push	{r7}
 8006ce2:	b087      	sub	sp, #28
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
 8006ce8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6a1b      	ldr	r3, [r3, #32]
 8006cee:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	6a1b      	ldr	r3, [r3, #32]
 8006cf4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	685b      	ldr	r3, [r3, #4]
 8006d00:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006d0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	68fa      	ldr	r2, [r7, #12]
 8006d1a:	4313      	orrs	r3, r2
 8006d1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006d1e:	693b      	ldr	r3, [r7, #16]
 8006d20:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006d24:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	689b      	ldr	r3, [r3, #8]
 8006d2a:	041b      	lsls	r3, r3, #16
 8006d2c:	693a      	ldr	r2, [r7, #16]
 8006d2e:	4313      	orrs	r3, r2
 8006d30:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	4a13      	ldr	r2, [pc, #76]	@ (8006d84 <TIM_OC5_SetConfig+0xa4>)
 8006d36:	4293      	cmp	r3, r2
 8006d38:	d007      	beq.n	8006d4a <TIM_OC5_SetConfig+0x6a>
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	4a12      	ldr	r2, [pc, #72]	@ (8006d88 <TIM_OC5_SetConfig+0xa8>)
 8006d3e:	4293      	cmp	r3, r2
 8006d40:	d003      	beq.n	8006d4a <TIM_OC5_SetConfig+0x6a>
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	4a11      	ldr	r2, [pc, #68]	@ (8006d8c <TIM_OC5_SetConfig+0xac>)
 8006d46:	4293      	cmp	r3, r2
 8006d48:	d109      	bne.n	8006d5e <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006d4a:	697b      	ldr	r3, [r7, #20]
 8006d4c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006d50:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	695b      	ldr	r3, [r3, #20]
 8006d56:	021b      	lsls	r3, r3, #8
 8006d58:	697a      	ldr	r2, [r7, #20]
 8006d5a:	4313      	orrs	r3, r2
 8006d5c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	697a      	ldr	r2, [r7, #20]
 8006d62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	68fa      	ldr	r2, [r7, #12]
 8006d68:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	685a      	ldr	r2, [r3, #4]
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	693a      	ldr	r2, [r7, #16]
 8006d76:	621a      	str	r2, [r3, #32]
}
 8006d78:	bf00      	nop
 8006d7a:	371c      	adds	r7, #28
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d82:	4770      	bx	lr
 8006d84:	40012c00 	.word	0x40012c00
 8006d88:	40014400 	.word	0x40014400
 8006d8c:	40014800 	.word	0x40014800

08006d90 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006d90:	b480      	push	{r7}
 8006d92:	b087      	sub	sp, #28
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
 8006d98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6a1b      	ldr	r3, [r3, #32]
 8006d9e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	6a1b      	ldr	r3, [r3, #32]
 8006da4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	685b      	ldr	r3, [r3, #4]
 8006db0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006db6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006dbe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006dc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	021b      	lsls	r3, r3, #8
 8006dca:	68fa      	ldr	r2, [r7, #12]
 8006dcc:	4313      	orrs	r3, r2
 8006dce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006dd0:	693b      	ldr	r3, [r7, #16]
 8006dd2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006dd6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	689b      	ldr	r3, [r3, #8]
 8006ddc:	051b      	lsls	r3, r3, #20
 8006dde:	693a      	ldr	r2, [r7, #16]
 8006de0:	4313      	orrs	r3, r2
 8006de2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	4a14      	ldr	r2, [pc, #80]	@ (8006e38 <TIM_OC6_SetConfig+0xa8>)
 8006de8:	4293      	cmp	r3, r2
 8006dea:	d007      	beq.n	8006dfc <TIM_OC6_SetConfig+0x6c>
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	4a13      	ldr	r2, [pc, #76]	@ (8006e3c <TIM_OC6_SetConfig+0xac>)
 8006df0:	4293      	cmp	r3, r2
 8006df2:	d003      	beq.n	8006dfc <TIM_OC6_SetConfig+0x6c>
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	4a12      	ldr	r2, [pc, #72]	@ (8006e40 <TIM_OC6_SetConfig+0xb0>)
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	d109      	bne.n	8006e10 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006dfc:	697b      	ldr	r3, [r7, #20]
 8006dfe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006e02:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	695b      	ldr	r3, [r3, #20]
 8006e08:	029b      	lsls	r3, r3, #10
 8006e0a:	697a      	ldr	r2, [r7, #20]
 8006e0c:	4313      	orrs	r3, r2
 8006e0e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	697a      	ldr	r2, [r7, #20]
 8006e14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	68fa      	ldr	r2, [r7, #12]
 8006e1a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	685a      	ldr	r2, [r3, #4]
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	693a      	ldr	r2, [r7, #16]
 8006e28:	621a      	str	r2, [r3, #32]
}
 8006e2a:	bf00      	nop
 8006e2c:	371c      	adds	r7, #28
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e34:	4770      	bx	lr
 8006e36:	bf00      	nop
 8006e38:	40012c00 	.word	0x40012c00
 8006e3c:	40014400 	.word	0x40014400
 8006e40:	40014800 	.word	0x40014800

08006e44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006e44:	b480      	push	{r7}
 8006e46:	b085      	sub	sp, #20
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
 8006e4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006e54:	2b01      	cmp	r3, #1
 8006e56:	d101      	bne.n	8006e5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006e58:	2302      	movs	r3, #2
 8006e5a:	e051      	b.n	8006f00 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2201      	movs	r2, #1
 8006e60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2202      	movs	r2, #2
 8006e68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	685b      	ldr	r3, [r3, #4]
 8006e72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	689b      	ldr	r3, [r3, #8]
 8006e7a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	4a22      	ldr	r2, [pc, #136]	@ (8006f0c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006e82:	4293      	cmp	r3, r2
 8006e84:	d108      	bne.n	8006e98 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006e8c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	685b      	ldr	r3, [r3, #4]
 8006e92:	68fa      	ldr	r2, [r7, #12]
 8006e94:	4313      	orrs	r3, r2
 8006e96:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8006e9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ea2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	68fa      	ldr	r2, [r7, #12]
 8006eaa:	4313      	orrs	r3, r2
 8006eac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	68fa      	ldr	r2, [r7, #12]
 8006eb4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	4a14      	ldr	r2, [pc, #80]	@ (8006f0c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006ebc:	4293      	cmp	r3, r2
 8006ebe:	d009      	beq.n	8006ed4 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ec8:	d004      	beq.n	8006ed4 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	4a10      	ldr	r2, [pc, #64]	@ (8006f10 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006ed0:	4293      	cmp	r3, r2
 8006ed2:	d10c      	bne.n	8006eee <HAL_TIMEx_MasterConfigSynchronization+0xaa>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006ed4:	68bb      	ldr	r3, [r7, #8]
 8006ed6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006eda:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006edc:	683b      	ldr	r3, [r7, #0]
 8006ede:	689b      	ldr	r3, [r3, #8]
 8006ee0:	68ba      	ldr	r2, [r7, #8]
 8006ee2:	4313      	orrs	r3, r2
 8006ee4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	68ba      	ldr	r2, [r7, #8]
 8006eec:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	2201      	movs	r2, #1
 8006ef2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	2200      	movs	r2, #0
 8006efa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006efe:	2300      	movs	r3, #0
}
 8006f00:	4618      	mov	r0, r3
 8006f02:	3714      	adds	r7, #20
 8006f04:	46bd      	mov	sp, r7
 8006f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0a:	4770      	bx	lr
 8006f0c:	40012c00 	.word	0x40012c00
 8006f10:	40000400 	.word	0x40000400

08006f14 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006f14:	b480      	push	{r7}
 8006f16:	b085      	sub	sp, #20
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
 8006f1c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006f1e:	2300      	movs	r3, #0
 8006f20:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006f28:	2b01      	cmp	r3, #1
 8006f2a:	d101      	bne.n	8006f30 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006f2c:	2302      	movs	r3, #2
 8006f2e:	e06e      	b.n	800700e <HAL_TIMEx_ConfigBreakDeadTime+0xfa>
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2201      	movs	r2, #1
 8006f34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	68db      	ldr	r3, [r3, #12]
 8006f42:	4313      	orrs	r3, r2
 8006f44:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	689b      	ldr	r3, [r3, #8]
 8006f50:	4313      	orrs	r3, r2
 8006f52:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	685b      	ldr	r3, [r3, #4]
 8006f5e:	4313      	orrs	r3, r2
 8006f60:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006f68:	683b      	ldr	r3, [r7, #0]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	4313      	orrs	r3, r2
 8006f6e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	691b      	ldr	r3, [r3, #16]
 8006f7a:	4313      	orrs	r3, r2
 8006f7c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	695b      	ldr	r3, [r3, #20]
 8006f88:	4313      	orrs	r3, r2
 8006f8a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f96:	4313      	orrs	r3, r2
 8006f98:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	699b      	ldr	r3, [r3, #24]
 8006fa4:	041b      	lsls	r3, r3, #16
 8006fa6:	4313      	orrs	r3, r2
 8006fa8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	69db      	ldr	r3, [r3, #28]
 8006fb4:	4313      	orrs	r3, r2
 8006fb6:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	4a17      	ldr	r2, [pc, #92]	@ (800701c <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d11c      	bne.n	8006ffc <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fcc:	051b      	lsls	r3, r3, #20
 8006fce:	4313      	orrs	r3, r2
 8006fd0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	6a1b      	ldr	r3, [r3, #32]
 8006fdc:	4313      	orrs	r3, r2
 8006fde:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fea:	4313      	orrs	r3, r2
 8006fec:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8006ff4:	683b      	ldr	r3, [r7, #0]
 8006ff6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ff8:	4313      	orrs	r3, r2
 8006ffa:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	68fa      	ldr	r2, [r7, #12]
 8007002:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2200      	movs	r2, #0
 8007008:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800700c:	2300      	movs	r3, #0
}
 800700e:	4618      	mov	r0, r3
 8007010:	3714      	adds	r7, #20
 8007012:	46bd      	mov	sp, r7
 8007014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007018:	4770      	bx	lr
 800701a:	bf00      	nop
 800701c:	40012c00 	.word	0x40012c00

08007020 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007020:	b480      	push	{r7}
 8007022:	b083      	sub	sp, #12
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007028:	bf00      	nop
 800702a:	370c      	adds	r7, #12
 800702c:	46bd      	mov	sp, r7
 800702e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007032:	4770      	bx	lr

08007034 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007034:	b480      	push	{r7}
 8007036:	b083      	sub	sp, #12
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800703c:	bf00      	nop
 800703e:	370c      	adds	r7, #12
 8007040:	46bd      	mov	sp, r7
 8007042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007046:	4770      	bx	lr

08007048 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007048:	b480      	push	{r7}
 800704a:	b083      	sub	sp, #12
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007050:	bf00      	nop
 8007052:	370c      	adds	r7, #12
 8007054:	46bd      	mov	sp, r7
 8007056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705a:	4770      	bx	lr

0800705c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800705c:	b480      	push	{r7}
 800705e:	b083      	sub	sp, #12
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8007064:	bf00      	nop
 8007066:	370c      	adds	r7, #12
 8007068:	46bd      	mov	sp, r7
 800706a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706e:	4770      	bx	lr

08007070 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8007070:	b480      	push	{r7}
 8007072:	b083      	sub	sp, #12
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8007078:	bf00      	nop
 800707a:	370c      	adds	r7, #12
 800707c:	46bd      	mov	sp, r7
 800707e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007082:	4770      	bx	lr

08007084 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8007084:	b480      	push	{r7}
 8007086:	b083      	sub	sp, #12
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800708c:	bf00      	nop
 800708e:	370c      	adds	r7, #12
 8007090:	46bd      	mov	sp, r7
 8007092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007096:	4770      	bx	lr

08007098 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8007098:	b480      	push	{r7}
 800709a:	b083      	sub	sp, #12
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80070a0:	bf00      	nop
 80070a2:	370c      	adds	r7, #12
 80070a4:	46bd      	mov	sp, r7
 80070a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070aa:	4770      	bx	lr

080070ac <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b082      	sub	sp, #8
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d101      	bne.n	80070be <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 80070ba:	2301      	movs	r3, #1
 80070bc:	e04a      	b.n	8007154 <HAL_HalfDuplex_Init+0xa8>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d106      	bne.n	80070d6 <HAL_HalfDuplex_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2200      	movs	r2, #0
 80070cc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80070d0:	6878      	ldr	r0, [r7, #4]
 80070d2:	f7fa fa31 	bl	8001538 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2224      	movs	r2, #36	@ 0x24
 80070da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	681a      	ldr	r2, [r3, #0]
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f022 0201 	bic.w	r2, r2, #1
 80070ec:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d002      	beq.n	80070fc <HAL_HalfDuplex_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80070f6:	6878      	ldr	r0, [r7, #4]
 80070f8:	f000 fb5c 	bl	80077b4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80070fc:	6878      	ldr	r0, [r7, #4]
 80070fe:	f000 f8bb 	bl	8007278 <UART_SetConfig>
 8007102:	4603      	mov	r3, r0
 8007104:	2b01      	cmp	r3, #1
 8007106:	d101      	bne.n	800710c <HAL_HalfDuplex_Init+0x60>
  {
    return HAL_ERROR;
 8007108:	2301      	movs	r3, #1
 800710a:	e023      	b.n	8007154 <HAL_HalfDuplex_Init+0xa8>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	685a      	ldr	r2, [r3, #4]
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800711a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	689a      	ldr	r2, [r3, #8]
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f022 0222 	bic.w	r2, r2, #34	@ 0x22
 800712a:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	689a      	ldr	r2, [r3, #8]
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	f042 0208 	orr.w	r2, r2, #8
 800713a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	681a      	ldr	r2, [r3, #0]
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	f042 0201 	orr.w	r2, r2, #1
 800714a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800714c:	6878      	ldr	r0, [r7, #4]
 800714e:	f000 fbd3 	bl	80078f8 <UART_CheckIdleState>
 8007152:	4603      	mov	r3, r0
}
 8007154:	4618      	mov	r0, r3
 8007156:	3708      	adds	r7, #8
 8007158:	46bd      	mov	sp, r7
 800715a:	bd80      	pop	{r7, pc}

0800715c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800715c:	b580      	push	{r7, lr}
 800715e:	b08a      	sub	sp, #40	@ 0x28
 8007160:	af02      	add	r7, sp, #8
 8007162:	60f8      	str	r0, [r7, #12]
 8007164:	60b9      	str	r1, [r7, #8]
 8007166:	603b      	str	r3, [r7, #0]
 8007168:	4613      	mov	r3, r2
 800716a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007172:	2b20      	cmp	r3, #32
 8007174:	d17b      	bne.n	800726e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8007176:	68bb      	ldr	r3, [r7, #8]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d002      	beq.n	8007182 <HAL_UART_Transmit+0x26>
 800717c:	88fb      	ldrh	r3, [r7, #6]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d101      	bne.n	8007186 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007182:	2301      	movs	r3, #1
 8007184:	e074      	b.n	8007270 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	2200      	movs	r2, #0
 800718a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	2221      	movs	r2, #33	@ 0x21
 8007192:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007196:	f7fa fd2d 	bl	8001bf4 <HAL_GetTick>
 800719a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	88fa      	ldrh	r2, [r7, #6]
 80071a0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	88fa      	ldrh	r2, [r7, #6]
 80071a8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	689b      	ldr	r3, [r3, #8]
 80071b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80071b4:	d108      	bne.n	80071c8 <HAL_UART_Transmit+0x6c>
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	691b      	ldr	r3, [r3, #16]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d104      	bne.n	80071c8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80071be:	2300      	movs	r3, #0
 80071c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80071c2:	68bb      	ldr	r3, [r7, #8]
 80071c4:	61bb      	str	r3, [r7, #24]
 80071c6:	e003      	b.n	80071d0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80071c8:	68bb      	ldr	r3, [r7, #8]
 80071ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80071cc:	2300      	movs	r3, #0
 80071ce:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80071d0:	e030      	b.n	8007234 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80071d2:	683b      	ldr	r3, [r7, #0]
 80071d4:	9300      	str	r3, [sp, #0]
 80071d6:	697b      	ldr	r3, [r7, #20]
 80071d8:	2200      	movs	r2, #0
 80071da:	2180      	movs	r1, #128	@ 0x80
 80071dc:	68f8      	ldr	r0, [r7, #12]
 80071de:	f000 fc35 	bl	8007a4c <UART_WaitOnFlagUntilTimeout>
 80071e2:	4603      	mov	r3, r0
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d005      	beq.n	80071f4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	2220      	movs	r2, #32
 80071ec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80071f0:	2303      	movs	r3, #3
 80071f2:	e03d      	b.n	8007270 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80071f4:	69fb      	ldr	r3, [r7, #28]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d10b      	bne.n	8007212 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80071fa:	69bb      	ldr	r3, [r7, #24]
 80071fc:	881b      	ldrh	r3, [r3, #0]
 80071fe:	461a      	mov	r2, r3
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007208:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800720a:	69bb      	ldr	r3, [r7, #24]
 800720c:	3302      	adds	r3, #2
 800720e:	61bb      	str	r3, [r7, #24]
 8007210:	e007      	b.n	8007222 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007212:	69fb      	ldr	r3, [r7, #28]
 8007214:	781a      	ldrb	r2, [r3, #0]
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800721c:	69fb      	ldr	r3, [r7, #28]
 800721e:	3301      	adds	r3, #1
 8007220:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007228:	b29b      	uxth	r3, r3
 800722a:	3b01      	subs	r3, #1
 800722c:	b29a      	uxth	r2, r3
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800723a:	b29b      	uxth	r3, r3
 800723c:	2b00      	cmp	r3, #0
 800723e:	d1c8      	bne.n	80071d2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	9300      	str	r3, [sp, #0]
 8007244:	697b      	ldr	r3, [r7, #20]
 8007246:	2200      	movs	r2, #0
 8007248:	2140      	movs	r1, #64	@ 0x40
 800724a:	68f8      	ldr	r0, [r7, #12]
 800724c:	f000 fbfe 	bl	8007a4c <UART_WaitOnFlagUntilTimeout>
 8007250:	4603      	mov	r3, r0
 8007252:	2b00      	cmp	r3, #0
 8007254:	d005      	beq.n	8007262 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	2220      	movs	r2, #32
 800725a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800725e:	2303      	movs	r3, #3
 8007260:	e006      	b.n	8007270 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	2220      	movs	r2, #32
 8007266:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800726a:	2300      	movs	r3, #0
 800726c:	e000      	b.n	8007270 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800726e:	2302      	movs	r3, #2
  }
}
 8007270:	4618      	mov	r0, r3
 8007272:	3720      	adds	r7, #32
 8007274:	46bd      	mov	sp, r7
 8007276:	bd80      	pop	{r7, pc}

08007278 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007278:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800727c:	b08c      	sub	sp, #48	@ 0x30
 800727e:	af00      	add	r7, sp, #0
 8007280:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007282:	2300      	movs	r3, #0
 8007284:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007288:	697b      	ldr	r3, [r7, #20]
 800728a:	689a      	ldr	r2, [r3, #8]
 800728c:	697b      	ldr	r3, [r7, #20]
 800728e:	691b      	ldr	r3, [r3, #16]
 8007290:	431a      	orrs	r2, r3
 8007292:	697b      	ldr	r3, [r7, #20]
 8007294:	695b      	ldr	r3, [r3, #20]
 8007296:	431a      	orrs	r2, r3
 8007298:	697b      	ldr	r3, [r7, #20]
 800729a:	69db      	ldr	r3, [r3, #28]
 800729c:	4313      	orrs	r3, r2
 800729e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80072a0:	697b      	ldr	r3, [r7, #20]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	681a      	ldr	r2, [r3, #0]
 80072a6:	4b98      	ldr	r3, [pc, #608]	@ (8007508 <UART_SetConfig+0x290>)
 80072a8:	4013      	ands	r3, r2
 80072aa:	697a      	ldr	r2, [r7, #20]
 80072ac:	6812      	ldr	r2, [r2, #0]
 80072ae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80072b0:	430b      	orrs	r3, r1
 80072b2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80072b4:	697b      	ldr	r3, [r7, #20]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	685b      	ldr	r3, [r3, #4]
 80072ba:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80072be:	697b      	ldr	r3, [r7, #20]
 80072c0:	68da      	ldr	r2, [r3, #12]
 80072c2:	697b      	ldr	r3, [r7, #20]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	430a      	orrs	r2, r1
 80072c8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80072ca:	697b      	ldr	r3, [r7, #20]
 80072cc:	699b      	ldr	r3, [r3, #24]
 80072ce:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80072d0:	697b      	ldr	r3, [r7, #20]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	4a8d      	ldr	r2, [pc, #564]	@ (800750c <UART_SetConfig+0x294>)
 80072d6:	4293      	cmp	r3, r2
 80072d8:	d004      	beq.n	80072e4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80072da:	697b      	ldr	r3, [r7, #20]
 80072dc:	6a1b      	ldr	r3, [r3, #32]
 80072de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80072e0:	4313      	orrs	r3, r2
 80072e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80072e4:	697b      	ldr	r3, [r7, #20]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	689b      	ldr	r3, [r3, #8]
 80072ea:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80072ee:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80072f2:	697a      	ldr	r2, [r7, #20]
 80072f4:	6812      	ldr	r2, [r2, #0]
 80072f6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80072f8:	430b      	orrs	r3, r1
 80072fa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80072fc:	697b      	ldr	r3, [r7, #20]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007302:	f023 010f 	bic.w	r1, r3, #15
 8007306:	697b      	ldr	r3, [r7, #20]
 8007308:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800730a:	697b      	ldr	r3, [r7, #20]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	430a      	orrs	r2, r1
 8007310:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007312:	697b      	ldr	r3, [r7, #20]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	4a7e      	ldr	r2, [pc, #504]	@ (8007510 <UART_SetConfig+0x298>)
 8007318:	4293      	cmp	r3, r2
 800731a:	d125      	bne.n	8007368 <UART_SetConfig+0xf0>
 800731c:	4b7d      	ldr	r3, [pc, #500]	@ (8007514 <UART_SetConfig+0x29c>)
 800731e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007322:	f003 0303 	and.w	r3, r3, #3
 8007326:	2b03      	cmp	r3, #3
 8007328:	d81a      	bhi.n	8007360 <UART_SetConfig+0xe8>
 800732a:	a201      	add	r2, pc, #4	@ (adr r2, 8007330 <UART_SetConfig+0xb8>)
 800732c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007330:	08007341 	.word	0x08007341
 8007334:	08007351 	.word	0x08007351
 8007338:	08007349 	.word	0x08007349
 800733c:	08007359 	.word	0x08007359
 8007340:	2301      	movs	r3, #1
 8007342:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007346:	e07c      	b.n	8007442 <UART_SetConfig+0x1ca>
 8007348:	2304      	movs	r3, #4
 800734a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800734e:	e078      	b.n	8007442 <UART_SetConfig+0x1ca>
 8007350:	2308      	movs	r3, #8
 8007352:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007356:	e074      	b.n	8007442 <UART_SetConfig+0x1ca>
 8007358:	2310      	movs	r3, #16
 800735a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800735e:	e070      	b.n	8007442 <UART_SetConfig+0x1ca>
 8007360:	2320      	movs	r3, #32
 8007362:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007366:	e06c      	b.n	8007442 <UART_SetConfig+0x1ca>
 8007368:	697b      	ldr	r3, [r7, #20]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	4a6a      	ldr	r2, [pc, #424]	@ (8007518 <UART_SetConfig+0x2a0>)
 800736e:	4293      	cmp	r3, r2
 8007370:	d138      	bne.n	80073e4 <UART_SetConfig+0x16c>
 8007372:	4b68      	ldr	r3, [pc, #416]	@ (8007514 <UART_SetConfig+0x29c>)
 8007374:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007378:	f003 030c 	and.w	r3, r3, #12
 800737c:	2b0c      	cmp	r3, #12
 800737e:	d82d      	bhi.n	80073dc <UART_SetConfig+0x164>
 8007380:	a201      	add	r2, pc, #4	@ (adr r2, 8007388 <UART_SetConfig+0x110>)
 8007382:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007386:	bf00      	nop
 8007388:	080073bd 	.word	0x080073bd
 800738c:	080073dd 	.word	0x080073dd
 8007390:	080073dd 	.word	0x080073dd
 8007394:	080073dd 	.word	0x080073dd
 8007398:	080073cd 	.word	0x080073cd
 800739c:	080073dd 	.word	0x080073dd
 80073a0:	080073dd 	.word	0x080073dd
 80073a4:	080073dd 	.word	0x080073dd
 80073a8:	080073c5 	.word	0x080073c5
 80073ac:	080073dd 	.word	0x080073dd
 80073b0:	080073dd 	.word	0x080073dd
 80073b4:	080073dd 	.word	0x080073dd
 80073b8:	080073d5 	.word	0x080073d5
 80073bc:	2300      	movs	r3, #0
 80073be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80073c2:	e03e      	b.n	8007442 <UART_SetConfig+0x1ca>
 80073c4:	2304      	movs	r3, #4
 80073c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80073ca:	e03a      	b.n	8007442 <UART_SetConfig+0x1ca>
 80073cc:	2308      	movs	r3, #8
 80073ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80073d2:	e036      	b.n	8007442 <UART_SetConfig+0x1ca>
 80073d4:	2310      	movs	r3, #16
 80073d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80073da:	e032      	b.n	8007442 <UART_SetConfig+0x1ca>
 80073dc:	2320      	movs	r3, #32
 80073de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80073e2:	e02e      	b.n	8007442 <UART_SetConfig+0x1ca>
 80073e4:	697b      	ldr	r3, [r7, #20]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	4a48      	ldr	r2, [pc, #288]	@ (800750c <UART_SetConfig+0x294>)
 80073ea:	4293      	cmp	r3, r2
 80073ec:	d126      	bne.n	800743c <UART_SetConfig+0x1c4>
 80073ee:	4b49      	ldr	r3, [pc, #292]	@ (8007514 <UART_SetConfig+0x29c>)
 80073f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80073f4:	f003 0303 	and.w	r3, r3, #3
 80073f8:	2b03      	cmp	r3, #3
 80073fa:	d81b      	bhi.n	8007434 <UART_SetConfig+0x1bc>
 80073fc:	a201      	add	r2, pc, #4	@ (adr r2, 8007404 <UART_SetConfig+0x18c>)
 80073fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007402:	bf00      	nop
 8007404:	08007415 	.word	0x08007415
 8007408:	08007425 	.word	0x08007425
 800740c:	0800741d 	.word	0x0800741d
 8007410:	0800742d 	.word	0x0800742d
 8007414:	2302      	movs	r3, #2
 8007416:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800741a:	e012      	b.n	8007442 <UART_SetConfig+0x1ca>
 800741c:	2304      	movs	r3, #4
 800741e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007422:	e00e      	b.n	8007442 <UART_SetConfig+0x1ca>
 8007424:	2308      	movs	r3, #8
 8007426:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800742a:	e00a      	b.n	8007442 <UART_SetConfig+0x1ca>
 800742c:	2310      	movs	r3, #16
 800742e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007432:	e006      	b.n	8007442 <UART_SetConfig+0x1ca>
 8007434:	2320      	movs	r3, #32
 8007436:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800743a:	e002      	b.n	8007442 <UART_SetConfig+0x1ca>
 800743c:	2320      	movs	r3, #32
 800743e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007442:	697b      	ldr	r3, [r7, #20]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	4a31      	ldr	r2, [pc, #196]	@ (800750c <UART_SetConfig+0x294>)
 8007448:	4293      	cmp	r3, r2
 800744a:	f040 80b4 	bne.w	80075b6 <UART_SetConfig+0x33e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800744e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007452:	3b02      	subs	r3, #2
 8007454:	2b0e      	cmp	r3, #14
 8007456:	d830      	bhi.n	80074ba <UART_SetConfig+0x242>
 8007458:	a201      	add	r2, pc, #4	@ (adr r2, 8007460 <UART_SetConfig+0x1e8>)
 800745a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800745e:	bf00      	nop
 8007460:	0800749d 	.word	0x0800749d
 8007464:	080074bb 	.word	0x080074bb
 8007468:	080074a5 	.word	0x080074a5
 800746c:	080074bb 	.word	0x080074bb
 8007470:	080074bb 	.word	0x080074bb
 8007474:	080074bb 	.word	0x080074bb
 8007478:	080074ab 	.word	0x080074ab
 800747c:	080074bb 	.word	0x080074bb
 8007480:	080074bb 	.word	0x080074bb
 8007484:	080074bb 	.word	0x080074bb
 8007488:	080074bb 	.word	0x080074bb
 800748c:	080074bb 	.word	0x080074bb
 8007490:	080074bb 	.word	0x080074bb
 8007494:	080074bb 	.word	0x080074bb
 8007498:	080074b3 	.word	0x080074b3
    {
      case UART_CLOCKSOURCE_PCLK7:
        pclk = HAL_RCC_GetPCLK7Freq();
 800749c:	f7fe f818 	bl	80054d0 <HAL_RCC_GetPCLK7Freq>
 80074a0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80074a2:	e010      	b.n	80074c6 <UART_SetConfig+0x24e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80074a4:	4b1d      	ldr	r3, [pc, #116]	@ (800751c <UART_SetConfig+0x2a4>)
 80074a6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80074a8:	e00d      	b.n	80074c6 <UART_SetConfig+0x24e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80074aa:	f7fd ffa5 	bl	80053f8 <HAL_RCC_GetSysClockFreq>
 80074ae:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80074b0:	e009      	b.n	80074c6 <UART_SetConfig+0x24e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80074b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80074b6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80074b8:	e005      	b.n	80074c6 <UART_SetConfig+0x24e>
      default:
        pclk = 0U;
 80074ba:	2300      	movs	r3, #0
 80074bc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80074be:	2301      	movs	r3, #1
 80074c0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80074c4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80074c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	f000 8159 	beq.w	8007780 <UART_SetConfig+0x508>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80074ce:	697b      	ldr	r3, [r7, #20]
 80074d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074d2:	4a13      	ldr	r2, [pc, #76]	@ (8007520 <UART_SetConfig+0x2a8>)
 80074d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80074d8:	461a      	mov	r2, r3
 80074da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074dc:	fbb3 f3f2 	udiv	r3, r3, r2
 80074e0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80074e2:	697b      	ldr	r3, [r7, #20]
 80074e4:	685a      	ldr	r2, [r3, #4]
 80074e6:	4613      	mov	r3, r2
 80074e8:	005b      	lsls	r3, r3, #1
 80074ea:	4413      	add	r3, r2
 80074ec:	69ba      	ldr	r2, [r7, #24]
 80074ee:	429a      	cmp	r2, r3
 80074f0:	d305      	bcc.n	80074fe <UART_SetConfig+0x286>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80074f2:	697b      	ldr	r3, [r7, #20]
 80074f4:	685b      	ldr	r3, [r3, #4]
 80074f6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80074f8:	69ba      	ldr	r2, [r7, #24]
 80074fa:	429a      	cmp	r2, r3
 80074fc:	d912      	bls.n	8007524 <UART_SetConfig+0x2ac>
      {
        ret = HAL_ERROR;
 80074fe:	2301      	movs	r3, #1
 8007500:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007504:	e13c      	b.n	8007780 <UART_SetConfig+0x508>
 8007506:	bf00      	nop
 8007508:	cfff69f3 	.word	0xcfff69f3
 800750c:	46002400 	.word	0x46002400
 8007510:	40013800 	.word	0x40013800
 8007514:	46020c00 	.word	0x46020c00
 8007518:	40004400 	.word	0x40004400
 800751c:	00f42400 	.word	0x00f42400
 8007520:	080309a4 	.word	0x080309a4
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007526:	2200      	movs	r2, #0
 8007528:	60bb      	str	r3, [r7, #8]
 800752a:	60fa      	str	r2, [r7, #12]
 800752c:	697b      	ldr	r3, [r7, #20]
 800752e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007530:	4a9e      	ldr	r2, [pc, #632]	@ (80077ac <UART_SetConfig+0x534>)
 8007532:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007536:	b29b      	uxth	r3, r3
 8007538:	2200      	movs	r2, #0
 800753a:	603b      	str	r3, [r7, #0]
 800753c:	607a      	str	r2, [r7, #4]
 800753e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007542:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007546:	f7f8 fe81 	bl	800024c <__aeabi_uldivmod>
 800754a:	4602      	mov	r2, r0
 800754c:	460b      	mov	r3, r1
 800754e:	4610      	mov	r0, r2
 8007550:	4619      	mov	r1, r3
 8007552:	f04f 0200 	mov.w	r2, #0
 8007556:	f04f 0300 	mov.w	r3, #0
 800755a:	020b      	lsls	r3, r1, #8
 800755c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007560:	0202      	lsls	r2, r0, #8
 8007562:	6979      	ldr	r1, [r7, #20]
 8007564:	6849      	ldr	r1, [r1, #4]
 8007566:	0849      	lsrs	r1, r1, #1
 8007568:	2000      	movs	r0, #0
 800756a:	460c      	mov	r4, r1
 800756c:	4605      	mov	r5, r0
 800756e:	eb12 0804 	adds.w	r8, r2, r4
 8007572:	eb43 0905 	adc.w	r9, r3, r5
 8007576:	697b      	ldr	r3, [r7, #20]
 8007578:	685b      	ldr	r3, [r3, #4]
 800757a:	2200      	movs	r2, #0
 800757c:	469a      	mov	sl, r3
 800757e:	4693      	mov	fp, r2
 8007580:	4652      	mov	r2, sl
 8007582:	465b      	mov	r3, fp
 8007584:	4640      	mov	r0, r8
 8007586:	4649      	mov	r1, r9
 8007588:	f7f8 fe60 	bl	800024c <__aeabi_uldivmod>
 800758c:	4602      	mov	r2, r0
 800758e:	460b      	mov	r3, r1
 8007590:	4613      	mov	r3, r2
 8007592:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007594:	6a3b      	ldr	r3, [r7, #32]
 8007596:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800759a:	d308      	bcc.n	80075ae <UART_SetConfig+0x336>
 800759c:	6a3b      	ldr	r3, [r7, #32]
 800759e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80075a2:	d204      	bcs.n	80075ae <UART_SetConfig+0x336>
        {
          huart->Instance->BRR = usartdiv;
 80075a4:	697b      	ldr	r3, [r7, #20]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	6a3a      	ldr	r2, [r7, #32]
 80075aa:	60da      	str	r2, [r3, #12]
 80075ac:	e0e8      	b.n	8007780 <UART_SetConfig+0x508>
        }
        else
        {
          ret = HAL_ERROR;
 80075ae:	2301      	movs	r3, #1
 80075b0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80075b4:	e0e4      	b.n	8007780 <UART_SetConfig+0x508>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80075b6:	697b      	ldr	r3, [r7, #20]
 80075b8:	69db      	ldr	r3, [r3, #28]
 80075ba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80075be:	d177      	bne.n	80076b0 <UART_SetConfig+0x438>
  {
    switch (clocksource)
 80075c0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80075c4:	2b10      	cmp	r3, #16
 80075c6:	d838      	bhi.n	800763a <UART_SetConfig+0x3c2>
 80075c8:	a201      	add	r2, pc, #4	@ (adr r2, 80075d0 <UART_SetConfig+0x358>)
 80075ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075ce:	bf00      	nop
 80075d0:	08007615 	.word	0x08007615
 80075d4:	0800761d 	.word	0x0800761d
 80075d8:	0800763b 	.word	0x0800763b
 80075dc:	0800763b 	.word	0x0800763b
 80075e0:	08007625 	.word	0x08007625
 80075e4:	0800763b 	.word	0x0800763b
 80075e8:	0800763b 	.word	0x0800763b
 80075ec:	0800763b 	.word	0x0800763b
 80075f0:	0800762b 	.word	0x0800762b
 80075f4:	0800763b 	.word	0x0800763b
 80075f8:	0800763b 	.word	0x0800763b
 80075fc:	0800763b 	.word	0x0800763b
 8007600:	0800763b 	.word	0x0800763b
 8007604:	0800763b 	.word	0x0800763b
 8007608:	0800763b 	.word	0x0800763b
 800760c:	0800763b 	.word	0x0800763b
 8007610:	08007633 	.word	0x08007633
    {
#if defined(USART2)
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007614:	f7fd ff34 	bl	8005480 <HAL_RCC_GetPCLK1Freq>
 8007618:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800761a:	e014      	b.n	8007646 <UART_SetConfig+0x3ce>
#endif /* USART2 */
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800761c:	f7fd ff44 	bl	80054a8 <HAL_RCC_GetPCLK2Freq>
 8007620:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007622:	e010      	b.n	8007646 <UART_SetConfig+0x3ce>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007624:	4b62      	ldr	r3, [pc, #392]	@ (80077b0 <UART_SetConfig+0x538>)
 8007626:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007628:	e00d      	b.n	8007646 <UART_SetConfig+0x3ce>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800762a:	f7fd fee5 	bl	80053f8 <HAL_RCC_GetSysClockFreq>
 800762e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007630:	e009      	b.n	8007646 <UART_SetConfig+0x3ce>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007632:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007636:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007638:	e005      	b.n	8007646 <UART_SetConfig+0x3ce>
      default:
        pclk = 0U;
 800763a:	2300      	movs	r3, #0
 800763c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800763e:	2301      	movs	r3, #1
 8007640:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007644:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007648:	2b00      	cmp	r3, #0
 800764a:	f000 8099 	beq.w	8007780 <UART_SetConfig+0x508>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800764e:	697b      	ldr	r3, [r7, #20]
 8007650:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007652:	4a56      	ldr	r2, [pc, #344]	@ (80077ac <UART_SetConfig+0x534>)
 8007654:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007658:	461a      	mov	r2, r3
 800765a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800765c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007660:	005a      	lsls	r2, r3, #1
 8007662:	697b      	ldr	r3, [r7, #20]
 8007664:	685b      	ldr	r3, [r3, #4]
 8007666:	085b      	lsrs	r3, r3, #1
 8007668:	441a      	add	r2, r3
 800766a:	697b      	ldr	r3, [r7, #20]
 800766c:	685b      	ldr	r3, [r3, #4]
 800766e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007672:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007674:	6a3b      	ldr	r3, [r7, #32]
 8007676:	2b0f      	cmp	r3, #15
 8007678:	d916      	bls.n	80076a8 <UART_SetConfig+0x430>
 800767a:	6a3b      	ldr	r3, [r7, #32]
 800767c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007680:	d212      	bcs.n	80076a8 <UART_SetConfig+0x430>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007682:	6a3b      	ldr	r3, [r7, #32]
 8007684:	b29b      	uxth	r3, r3
 8007686:	f023 030f 	bic.w	r3, r3, #15
 800768a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800768c:	6a3b      	ldr	r3, [r7, #32]
 800768e:	085b      	lsrs	r3, r3, #1
 8007690:	b29b      	uxth	r3, r3
 8007692:	f003 0307 	and.w	r3, r3, #7
 8007696:	b29a      	uxth	r2, r3
 8007698:	8bfb      	ldrh	r3, [r7, #30]
 800769a:	4313      	orrs	r3, r2
 800769c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800769e:	697b      	ldr	r3, [r7, #20]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	8bfa      	ldrh	r2, [r7, #30]
 80076a4:	60da      	str	r2, [r3, #12]
 80076a6:	e06b      	b.n	8007780 <UART_SetConfig+0x508>
      }
      else
      {
        ret = HAL_ERROR;
 80076a8:	2301      	movs	r3, #1
 80076aa:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80076ae:	e067      	b.n	8007780 <UART_SetConfig+0x508>
      }
    }
  }
  else
  {
    switch (clocksource)
 80076b0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80076b4:	2b10      	cmp	r3, #16
 80076b6:	d838      	bhi.n	800772a <UART_SetConfig+0x4b2>
 80076b8:	a201      	add	r2, pc, #4	@ (adr r2, 80076c0 <UART_SetConfig+0x448>)
 80076ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076be:	bf00      	nop
 80076c0:	08007705 	.word	0x08007705
 80076c4:	0800770d 	.word	0x0800770d
 80076c8:	0800772b 	.word	0x0800772b
 80076cc:	0800772b 	.word	0x0800772b
 80076d0:	08007715 	.word	0x08007715
 80076d4:	0800772b 	.word	0x0800772b
 80076d8:	0800772b 	.word	0x0800772b
 80076dc:	0800772b 	.word	0x0800772b
 80076e0:	0800771b 	.word	0x0800771b
 80076e4:	0800772b 	.word	0x0800772b
 80076e8:	0800772b 	.word	0x0800772b
 80076ec:	0800772b 	.word	0x0800772b
 80076f0:	0800772b 	.word	0x0800772b
 80076f4:	0800772b 	.word	0x0800772b
 80076f8:	0800772b 	.word	0x0800772b
 80076fc:	0800772b 	.word	0x0800772b
 8007700:	08007723 	.word	0x08007723
    {
#if defined(USART2)
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007704:	f7fd febc 	bl	8005480 <HAL_RCC_GetPCLK1Freq>
 8007708:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800770a:	e014      	b.n	8007736 <UART_SetConfig+0x4be>
#endif /* USART2 */
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800770c:	f7fd fecc 	bl	80054a8 <HAL_RCC_GetPCLK2Freq>
 8007710:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007712:	e010      	b.n	8007736 <UART_SetConfig+0x4be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007714:	4b26      	ldr	r3, [pc, #152]	@ (80077b0 <UART_SetConfig+0x538>)
 8007716:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007718:	e00d      	b.n	8007736 <UART_SetConfig+0x4be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800771a:	f7fd fe6d 	bl	80053f8 <HAL_RCC_GetSysClockFreq>
 800771e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007720:	e009      	b.n	8007736 <UART_SetConfig+0x4be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007722:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007726:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007728:	e005      	b.n	8007736 <UART_SetConfig+0x4be>
      default:
        pclk = 0U;
 800772a:	2300      	movs	r3, #0
 800772c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800772e:	2301      	movs	r3, #1
 8007730:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007734:	bf00      	nop
    }

    if (pclk != 0U)
 8007736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007738:	2b00      	cmp	r3, #0
 800773a:	d021      	beq.n	8007780 <UART_SetConfig+0x508>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800773c:	697b      	ldr	r3, [r7, #20]
 800773e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007740:	4a1a      	ldr	r2, [pc, #104]	@ (80077ac <UART_SetConfig+0x534>)
 8007742:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007746:	461a      	mov	r2, r3
 8007748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800774a:	fbb3 f2f2 	udiv	r2, r3, r2
 800774e:	697b      	ldr	r3, [r7, #20]
 8007750:	685b      	ldr	r3, [r3, #4]
 8007752:	085b      	lsrs	r3, r3, #1
 8007754:	441a      	add	r2, r3
 8007756:	697b      	ldr	r3, [r7, #20]
 8007758:	685b      	ldr	r3, [r3, #4]
 800775a:	fbb2 f3f3 	udiv	r3, r2, r3
 800775e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007760:	6a3b      	ldr	r3, [r7, #32]
 8007762:	2b0f      	cmp	r3, #15
 8007764:	d909      	bls.n	800777a <UART_SetConfig+0x502>
 8007766:	6a3b      	ldr	r3, [r7, #32]
 8007768:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800776c:	d205      	bcs.n	800777a <UART_SetConfig+0x502>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800776e:	6a3b      	ldr	r3, [r7, #32]
 8007770:	b29a      	uxth	r2, r3
 8007772:	697b      	ldr	r3, [r7, #20]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	60da      	str	r2, [r3, #12]
 8007778:	e002      	b.n	8007780 <UART_SetConfig+0x508>
      }
      else
      {
        ret = HAL_ERROR;
 800777a:	2301      	movs	r3, #1
 800777c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007780:	697b      	ldr	r3, [r7, #20]
 8007782:	2201      	movs	r2, #1
 8007784:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007788:	697b      	ldr	r3, [r7, #20]
 800778a:	2201      	movs	r2, #1
 800778c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007790:	697b      	ldr	r3, [r7, #20]
 8007792:	2200      	movs	r2, #0
 8007794:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007796:	697b      	ldr	r3, [r7, #20]
 8007798:	2200      	movs	r2, #0
 800779a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800779c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80077a0:	4618      	mov	r0, r3
 80077a2:	3730      	adds	r7, #48	@ 0x30
 80077a4:	46bd      	mov	sp, r7
 80077a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80077aa:	bf00      	nop
 80077ac:	080309a4 	.word	0x080309a4
 80077b0:	00f42400 	.word	0x00f42400

080077b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80077b4:	b480      	push	{r7}
 80077b6:	b083      	sub	sp, #12
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077c0:	f003 0308 	and.w	r3, r3, #8
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d00a      	beq.n	80077de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	685b      	ldr	r3, [r3, #4]
 80077ce:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	430a      	orrs	r2, r1
 80077dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077e2:	f003 0301 	and.w	r3, r3, #1
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d00a      	beq.n	8007800 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	685b      	ldr	r3, [r3, #4]
 80077f0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	430a      	orrs	r2, r1
 80077fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007804:	f003 0302 	and.w	r3, r3, #2
 8007808:	2b00      	cmp	r3, #0
 800780a:	d00a      	beq.n	8007822 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	685b      	ldr	r3, [r3, #4]
 8007812:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	430a      	orrs	r2, r1
 8007820:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007826:	f003 0304 	and.w	r3, r3, #4
 800782a:	2b00      	cmp	r3, #0
 800782c:	d00a      	beq.n	8007844 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	685b      	ldr	r3, [r3, #4]
 8007834:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	430a      	orrs	r2, r1
 8007842:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007848:	f003 0310 	and.w	r3, r3, #16
 800784c:	2b00      	cmp	r3, #0
 800784e:	d00a      	beq.n	8007866 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	689b      	ldr	r3, [r3, #8]
 8007856:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	430a      	orrs	r2, r1
 8007864:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800786a:	f003 0320 	and.w	r3, r3, #32
 800786e:	2b00      	cmp	r3, #0
 8007870:	d00a      	beq.n	8007888 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	689b      	ldr	r3, [r3, #8]
 8007878:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	430a      	orrs	r2, r1
 8007886:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800788c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007890:	2b00      	cmp	r3, #0
 8007892:	d01a      	beq.n	80078ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	685b      	ldr	r3, [r3, #4]
 800789a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	430a      	orrs	r2, r1
 80078a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80078ae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80078b2:	d10a      	bne.n	80078ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	685b      	ldr	r3, [r3, #4]
 80078ba:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	430a      	orrs	r2, r1
 80078c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d00a      	beq.n	80078ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	685b      	ldr	r3, [r3, #4]
 80078dc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	430a      	orrs	r2, r1
 80078ea:	605a      	str	r2, [r3, #4]
  }
}
 80078ec:	bf00      	nop
 80078ee:	370c      	adds	r7, #12
 80078f0:	46bd      	mov	sp, r7
 80078f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f6:	4770      	bx	lr

080078f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80078f8:	b580      	push	{r7, lr}
 80078fa:	b098      	sub	sp, #96	@ 0x60
 80078fc:	af02      	add	r7, sp, #8
 80078fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	2200      	movs	r2, #0
 8007904:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007908:	f7fa f974 	bl	8001bf4 <HAL_GetTick>
 800790c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	f003 0308 	and.w	r3, r3, #8
 8007918:	2b08      	cmp	r3, #8
 800791a:	d12f      	bne.n	800797c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800791c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007920:	9300      	str	r3, [sp, #0]
 8007922:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007924:	2200      	movs	r2, #0
 8007926:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800792a:	6878      	ldr	r0, [r7, #4]
 800792c:	f000 f88e 	bl	8007a4c <UART_WaitOnFlagUntilTimeout>
 8007930:	4603      	mov	r3, r0
 8007932:	2b00      	cmp	r3, #0
 8007934:	d022      	beq.n	800797c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800793c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800793e:	e853 3f00 	ldrex	r3, [r3]
 8007942:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007944:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007946:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800794a:	653b      	str	r3, [r7, #80]	@ 0x50
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	461a      	mov	r2, r3
 8007952:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007954:	647b      	str	r3, [r7, #68]	@ 0x44
 8007956:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007958:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800795a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800795c:	e841 2300 	strex	r3, r2, [r1]
 8007960:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007962:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007964:	2b00      	cmp	r3, #0
 8007966:	d1e6      	bne.n	8007936 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2220      	movs	r2, #32
 800796c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2200      	movs	r2, #0
 8007974:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007978:	2303      	movs	r3, #3
 800797a:	e063      	b.n	8007a44 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	f003 0304 	and.w	r3, r3, #4
 8007986:	2b04      	cmp	r3, #4
 8007988:	d149      	bne.n	8007a1e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800798a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800798e:	9300      	str	r3, [sp, #0]
 8007990:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007992:	2200      	movs	r2, #0
 8007994:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007998:	6878      	ldr	r0, [r7, #4]
 800799a:	f000 f857 	bl	8007a4c <UART_WaitOnFlagUntilTimeout>
 800799e:	4603      	mov	r3, r0
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d03c      	beq.n	8007a1e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079ac:	e853 3f00 	ldrex	r3, [r3]
 80079b0:	623b      	str	r3, [r7, #32]
   return(result);
 80079b2:	6a3b      	ldr	r3, [r7, #32]
 80079b4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80079b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	461a      	mov	r2, r3
 80079c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80079c2:	633b      	str	r3, [r7, #48]	@ 0x30
 80079c4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079c6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80079c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80079ca:	e841 2300 	strex	r3, r2, [r1]
 80079ce:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80079d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d1e6      	bne.n	80079a4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	3308      	adds	r3, #8
 80079dc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079de:	693b      	ldr	r3, [r7, #16]
 80079e0:	e853 3f00 	ldrex	r3, [r3]
 80079e4:	60fb      	str	r3, [r7, #12]
   return(result);
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	f023 0301 	bic.w	r3, r3, #1
 80079ec:	64bb      	str	r3, [r7, #72]	@ 0x48
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	3308      	adds	r3, #8
 80079f4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80079f6:	61fa      	str	r2, [r7, #28]
 80079f8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079fa:	69b9      	ldr	r1, [r7, #24]
 80079fc:	69fa      	ldr	r2, [r7, #28]
 80079fe:	e841 2300 	strex	r3, r2, [r1]
 8007a02:	617b      	str	r3, [r7, #20]
   return(result);
 8007a04:	697b      	ldr	r3, [r7, #20]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d1e5      	bne.n	80079d6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	2220      	movs	r2, #32
 8007a0e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	2200      	movs	r2, #0
 8007a16:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007a1a:	2303      	movs	r3, #3
 8007a1c:	e012      	b.n	8007a44 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	2220      	movs	r2, #32
 8007a22:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	2220      	movs	r2, #32
 8007a2a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	2200      	movs	r2, #0
 8007a32:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2200      	movs	r2, #0
 8007a38:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007a42:	2300      	movs	r3, #0
}
 8007a44:	4618      	mov	r0, r3
 8007a46:	3758      	adds	r7, #88	@ 0x58
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	bd80      	pop	{r7, pc}

08007a4c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b084      	sub	sp, #16
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	60f8      	str	r0, [r7, #12]
 8007a54:	60b9      	str	r1, [r7, #8]
 8007a56:	603b      	str	r3, [r7, #0]
 8007a58:	4613      	mov	r3, r2
 8007a5a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a5c:	e04f      	b.n	8007afe <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007a5e:	69bb      	ldr	r3, [r7, #24]
 8007a60:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007a64:	d04b      	beq.n	8007afe <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007a66:	f7fa f8c5 	bl	8001bf4 <HAL_GetTick>
 8007a6a:	4602      	mov	r2, r0
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	1ad3      	subs	r3, r2, r3
 8007a70:	69ba      	ldr	r2, [r7, #24]
 8007a72:	429a      	cmp	r2, r3
 8007a74:	d302      	bcc.n	8007a7c <UART_WaitOnFlagUntilTimeout+0x30>
 8007a76:	69bb      	ldr	r3, [r7, #24]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d101      	bne.n	8007a80 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007a7c:	2303      	movs	r3, #3
 8007a7e:	e04e      	b.n	8007b1e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	f003 0304 	and.w	r3, r3, #4
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d037      	beq.n	8007afe <UART_WaitOnFlagUntilTimeout+0xb2>
 8007a8e:	68bb      	ldr	r3, [r7, #8]
 8007a90:	2b80      	cmp	r3, #128	@ 0x80
 8007a92:	d034      	beq.n	8007afe <UART_WaitOnFlagUntilTimeout+0xb2>
 8007a94:	68bb      	ldr	r3, [r7, #8]
 8007a96:	2b40      	cmp	r3, #64	@ 0x40
 8007a98:	d031      	beq.n	8007afe <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	69db      	ldr	r3, [r3, #28]
 8007aa0:	f003 0308 	and.w	r3, r3, #8
 8007aa4:	2b08      	cmp	r3, #8
 8007aa6:	d110      	bne.n	8007aca <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	2208      	movs	r2, #8
 8007aae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007ab0:	68f8      	ldr	r0, [r7, #12]
 8007ab2:	f000 f838 	bl	8007b26 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	2208      	movs	r2, #8
 8007aba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007ac6:	2301      	movs	r3, #1
 8007ac8:	e029      	b.n	8007b1e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	69db      	ldr	r3, [r3, #28]
 8007ad0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007ad4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007ad8:	d111      	bne.n	8007afe <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007ae2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007ae4:	68f8      	ldr	r0, [r7, #12]
 8007ae6:	f000 f81e 	bl	8007b26 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	2220      	movs	r2, #32
 8007aee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	2200      	movs	r2, #0
 8007af6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007afa:	2303      	movs	r3, #3
 8007afc:	e00f      	b.n	8007b1e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	69da      	ldr	r2, [r3, #28]
 8007b04:	68bb      	ldr	r3, [r7, #8]
 8007b06:	4013      	ands	r3, r2
 8007b08:	68ba      	ldr	r2, [r7, #8]
 8007b0a:	429a      	cmp	r2, r3
 8007b0c:	bf0c      	ite	eq
 8007b0e:	2301      	moveq	r3, #1
 8007b10:	2300      	movne	r3, #0
 8007b12:	b2db      	uxtb	r3, r3
 8007b14:	461a      	mov	r2, r3
 8007b16:	79fb      	ldrb	r3, [r7, #7]
 8007b18:	429a      	cmp	r2, r3
 8007b1a:	d0a0      	beq.n	8007a5e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007b1c:	2300      	movs	r3, #0
}
 8007b1e:	4618      	mov	r0, r3
 8007b20:	3710      	adds	r7, #16
 8007b22:	46bd      	mov	sp, r7
 8007b24:	bd80      	pop	{r7, pc}

08007b26 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007b26:	b480      	push	{r7}
 8007b28:	b095      	sub	sp, #84	@ 0x54
 8007b2a:	af00      	add	r7, sp, #0
 8007b2c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b36:	e853 3f00 	ldrex	r3, [r3]
 8007b3a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007b3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b3e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007b42:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	461a      	mov	r2, r3
 8007b4a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007b4c:	643b      	str	r3, [r7, #64]	@ 0x40
 8007b4e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b50:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007b52:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007b54:	e841 2300 	strex	r3, r2, [r1]
 8007b58:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007b5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d1e6      	bne.n	8007b2e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	3308      	adds	r3, #8
 8007b66:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b68:	6a3b      	ldr	r3, [r7, #32]
 8007b6a:	e853 3f00 	ldrex	r3, [r3]
 8007b6e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007b70:	69fb      	ldr	r3, [r7, #28]
 8007b72:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007b76:	f023 0301 	bic.w	r3, r3, #1
 8007b7a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	3308      	adds	r3, #8
 8007b82:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007b84:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007b86:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b88:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007b8a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007b8c:	e841 2300 	strex	r3, r2, [r1]
 8007b90:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d1e3      	bne.n	8007b60 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007b9c:	2b01      	cmp	r3, #1
 8007b9e:	d118      	bne.n	8007bd2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	e853 3f00 	ldrex	r3, [r3]
 8007bac:	60bb      	str	r3, [r7, #8]
   return(result);
 8007bae:	68bb      	ldr	r3, [r7, #8]
 8007bb0:	f023 0310 	bic.w	r3, r3, #16
 8007bb4:	647b      	str	r3, [r7, #68]	@ 0x44
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	461a      	mov	r2, r3
 8007bbc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007bbe:	61bb      	str	r3, [r7, #24]
 8007bc0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bc2:	6979      	ldr	r1, [r7, #20]
 8007bc4:	69ba      	ldr	r2, [r7, #24]
 8007bc6:	e841 2300 	strex	r3, r2, [r1]
 8007bca:	613b      	str	r3, [r7, #16]
   return(result);
 8007bcc:	693b      	ldr	r3, [r7, #16]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d1e6      	bne.n	8007ba0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	2220      	movs	r2, #32
 8007bd6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	2200      	movs	r2, #0
 8007bde:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2200      	movs	r2, #0
 8007be4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007be6:	bf00      	nop
 8007be8:	3754      	adds	r7, #84	@ 0x54
 8007bea:	46bd      	mov	sp, r7
 8007bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf0:	4770      	bx	lr

08007bf2 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 8007bf2:	b580      	push	{r7, lr}
 8007bf4:	b084      	sub	sp, #16
 8007bf6:	af00      	add	r7, sp, #0
 8007bf8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007c00:	2b01      	cmp	r3, #1
 8007c02:	d101      	bne.n	8007c08 <HAL_UARTEx_EnableFifoMode+0x16>
 8007c04:	2302      	movs	r3, #2
 8007c06:	e02b      	b.n	8007c60 <HAL_UARTEx_EnableFifoMode+0x6e>
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2201      	movs	r2, #1
 8007c0c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2224      	movs	r2, #36	@ 0x24
 8007c14:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	681a      	ldr	r2, [r3, #0]
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	f022 0201 	bic.w	r2, r2, #1
 8007c2e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007c36:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8007c3e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	68fa      	ldr	r2, [r7, #12]
 8007c46:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007c48:	6878      	ldr	r0, [r7, #4]
 8007c4a:	f000 f889 	bl	8007d60 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	2220      	movs	r2, #32
 8007c52:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	2200      	movs	r2, #0
 8007c5a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007c5e:	2300      	movs	r3, #0
}
 8007c60:	4618      	mov	r0, r3
 8007c62:	3710      	adds	r7, #16
 8007c64:	46bd      	mov	sp, r7
 8007c66:	bd80      	pop	{r7, pc}

08007c68 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b084      	sub	sp, #16
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
 8007c70:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007c78:	2b01      	cmp	r3, #1
 8007c7a:	d101      	bne.n	8007c80 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007c7c:	2302      	movs	r3, #2
 8007c7e:	e02d      	b.n	8007cdc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2201      	movs	r2, #1
 8007c84:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2224      	movs	r2, #36	@ 0x24
 8007c8c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	681a      	ldr	r2, [r3, #0]
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	f022 0201 	bic.w	r2, r2, #1
 8007ca6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	689b      	ldr	r3, [r3, #8]
 8007cae:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	683a      	ldr	r2, [r7, #0]
 8007cb8:	430a      	orrs	r2, r1
 8007cba:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007cbc:	6878      	ldr	r0, [r7, #4]
 8007cbe:	f000 f84f 	bl	8007d60 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	68fa      	ldr	r2, [r7, #12]
 8007cc8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	2220      	movs	r2, #32
 8007cce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007cda:	2300      	movs	r3, #0
}
 8007cdc:	4618      	mov	r0, r3
 8007cde:	3710      	adds	r7, #16
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	bd80      	pop	{r7, pc}

08007ce4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b084      	sub	sp, #16
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
 8007cec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007cf4:	2b01      	cmp	r3, #1
 8007cf6:	d101      	bne.n	8007cfc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007cf8:	2302      	movs	r3, #2
 8007cfa:	e02d      	b.n	8007d58 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2201      	movs	r2, #1
 8007d00:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2224      	movs	r2, #36	@ 0x24
 8007d08:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	681a      	ldr	r2, [r3, #0]
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	f022 0201 	bic.w	r2, r2, #1
 8007d22:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	689b      	ldr	r3, [r3, #8]
 8007d2a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	683a      	ldr	r2, [r7, #0]
 8007d34:	430a      	orrs	r2, r1
 8007d36:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007d38:	6878      	ldr	r0, [r7, #4]
 8007d3a:	f000 f811 	bl	8007d60 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	68fa      	ldr	r2, [r7, #12]
 8007d44:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	2220      	movs	r2, #32
 8007d4a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	2200      	movs	r2, #0
 8007d52:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007d56:	2300      	movs	r3, #0
}
 8007d58:	4618      	mov	r0, r3
 8007d5a:	3710      	adds	r7, #16
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	bd80      	pop	{r7, pc}

08007d60 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007d60:	b480      	push	{r7}
 8007d62:	b085      	sub	sp, #20
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d108      	bne.n	8007d82 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2201      	movs	r2, #1
 8007d74:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2201      	movs	r2, #1
 8007d7c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007d80:	e031      	b.n	8007de6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007d82:	2308      	movs	r3, #8
 8007d84:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007d86:	2308      	movs	r3, #8
 8007d88:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	689b      	ldr	r3, [r3, #8]
 8007d90:	0e5b      	lsrs	r3, r3, #25
 8007d92:	b2db      	uxtb	r3, r3
 8007d94:	f003 0307 	and.w	r3, r3, #7
 8007d98:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	689b      	ldr	r3, [r3, #8]
 8007da0:	0f5b      	lsrs	r3, r3, #29
 8007da2:	b2db      	uxtb	r3, r3
 8007da4:	f003 0307 	and.w	r3, r3, #7
 8007da8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007daa:	7bbb      	ldrb	r3, [r7, #14]
 8007dac:	7b3a      	ldrb	r2, [r7, #12]
 8007dae:	4911      	ldr	r1, [pc, #68]	@ (8007df4 <UARTEx_SetNbDataToProcess+0x94>)
 8007db0:	5c8a      	ldrb	r2, [r1, r2]
 8007db2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007db6:	7b3a      	ldrb	r2, [r7, #12]
 8007db8:	490f      	ldr	r1, [pc, #60]	@ (8007df8 <UARTEx_SetNbDataToProcess+0x98>)
 8007dba:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007dbc:	fb93 f3f2 	sdiv	r3, r3, r2
 8007dc0:	b29a      	uxth	r2, r3
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007dc8:	7bfb      	ldrb	r3, [r7, #15]
 8007dca:	7b7a      	ldrb	r2, [r7, #13]
 8007dcc:	4909      	ldr	r1, [pc, #36]	@ (8007df4 <UARTEx_SetNbDataToProcess+0x94>)
 8007dce:	5c8a      	ldrb	r2, [r1, r2]
 8007dd0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007dd4:	7b7a      	ldrb	r2, [r7, #13]
 8007dd6:	4908      	ldr	r1, [pc, #32]	@ (8007df8 <UARTEx_SetNbDataToProcess+0x98>)
 8007dd8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007dda:	fb93 f3f2 	sdiv	r3, r3, r2
 8007dde:	b29a      	uxth	r2, r3
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8007de6:	bf00      	nop
 8007de8:	3714      	adds	r7, #20
 8007dea:	46bd      	mov	sp, r7
 8007dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df0:	4770      	bx	lr
 8007df2:	bf00      	nop
 8007df4:	080309bc 	.word	0x080309bc
 8007df8:	080309c4 	.word	0x080309c4

08007dfc <SVCCTL_Init>:
/* Weak functions -------------------------------------------------------------*/

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 8007dfc:	b480      	push	{r7}
 8007dfe:	af00      	add	r7, sp, #0

  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 8007e00:	4b06      	ldr	r3, [pc, #24]	@ (8007e1c <SVCCTL_Init+0x20>)
 8007e02:	2200      	movs	r2, #0
 8007e04:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 8007e06:	4b06      	ldr	r3, [pc, #24]	@ (8007e20 <SVCCTL_Init+0x24>)
 8007e08:	2200      	movs	r2, #0
 8007e0a:	701a      	strb	r2, [r3, #0]
  SVCCTL_Handler.NbreOfRegisteredHandler = 0;
 8007e0c:	4b05      	ldr	r3, [pc, #20]	@ (8007e24 <SVCCTL_Init+0x28>)
 8007e0e:	2200      	movs	r2, #0
 8007e10:	701a      	strb	r2, [r3, #0]

  return;
 8007e12:	bf00      	nop
}
 8007e14:	46bd      	mov	sp, r7
 8007e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1a:	4770      	bx	lr
 8007e1c:	20003888 	.word	0x20003888
 8007e20:	200038a8 	.word	0x200038a8
 8007e24:	200038ac 	.word	0x200038ac

08007e28 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 8007e28:	b480      	push	{r7}
 8007e2a:	b083      	sub	sp, #12
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 8007e30:	4b09      	ldr	r3, [pc, #36]	@ (8007e58 <SVCCTL_RegisterSvcHandler+0x30>)
 8007e32:	7f1b      	ldrb	r3, [r3, #28]
 8007e34:	4619      	mov	r1, r3
 8007e36:	4a08      	ldr	r2, [pc, #32]	@ (8007e58 <SVCCTL_RegisterSvcHandler+0x30>)
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 8007e3e:	4b06      	ldr	r3, [pc, #24]	@ (8007e58 <SVCCTL_RegisterSvcHandler+0x30>)
 8007e40:	7f1b      	ldrb	r3, [r3, #28]
 8007e42:	3301      	adds	r3, #1
 8007e44:	b2da      	uxtb	r2, r3
 8007e46:	4b04      	ldr	r3, [pc, #16]	@ (8007e58 <SVCCTL_RegisterSvcHandler+0x30>)
 8007e48:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 8007e4a:	bf00      	nop
}
 8007e4c:	370c      	adds	r7, #12
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e54:	4770      	bx	lr
 8007e56:	bf00      	nop
 8007e58:	20003888 	.word	0x20003888

08007e5c <SVCCTL_UserEvtRx>:

  return;
}

SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	b086      	sub	sp, #24
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t return_status;
#if (BLE_CFG_SVC_MAX_NBR_CB > 0) || (BLE_CFG_CLT_MAX_NBR_CB > 0)
  uint8_t index;
#endif

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	3301      	adds	r3, #1
 8007e68:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 8007e6e:	693b      	ldr	r3, [r7, #16]
 8007e70:	781b      	ldrb	r3, [r3, #0]
 8007e72:	2bff      	cmp	r3, #255	@ 0xff
 8007e74:	d125      	bne.n	8007ec2 <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 8007e76:	693b      	ldr	r3, [r7, #16]
 8007e78:	3302      	adds	r3, #2
 8007e7a:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	881b      	ldrh	r3, [r3, #0]
 8007e80:	b29b      	uxth	r3, r3
 8007e82:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8007e86:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007e8a:	d118      	bne.n	8007ebe <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	757b      	strb	r3, [r7, #21]
 8007e90:	e00d      	b.n	8007eae <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 8007e92:	7d7b      	ldrb	r3, [r7, #21]
 8007e94:	4a1a      	ldr	r2, [pc, #104]	@ (8007f00 <SVCCTL_UserEvtRx+0xa4>)
 8007e96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e9a:	6878      	ldr	r0, [r7, #4]
 8007e9c:	4798      	blx	r3
 8007e9e:	4603      	mov	r3, r0
 8007ea0:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 8007ea2:	7dfb      	ldrb	r3, [r7, #23]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d108      	bne.n	8007eba <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8007ea8:	7d7b      	ldrb	r3, [r7, #21]
 8007eaa:	3301      	adds	r3, #1
 8007eac:	757b      	strb	r3, [r7, #21]
 8007eae:	4b14      	ldr	r3, [pc, #80]	@ (8007f00 <SVCCTL_UserEvtRx+0xa4>)
 8007eb0:	7f1b      	ldrb	r3, [r3, #28]
 8007eb2:	7d7a      	ldrb	r2, [r7, #21]
 8007eb4:	429a      	cmp	r2, r3
 8007eb6:	d3ec      	bcc.n	8007e92 <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 8007eb8:	e002      	b.n	8007ec0 <SVCCTL_UserEvtRx+0x64>
              break;
 8007eba:	bf00      	nop
          break;
 8007ebc:	e000      	b.n	8007ec0 <SVCCTL_UserEvtRx+0x64>
               */
              break;
            }
          }
#endif
          break;
 8007ebe:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 8007ec0:	e000      	b.n	8007ec4 <SVCCTL_UserEvtRx+0x68>
      for(index = 0; index <SVCCTL_Handler.NbreOfRegisteredHandler; index++)
      {
        event_notification_status = SVCCTL_Handler.SVCCTL_HandlerTable[index](pckt);
      }
#endif
      break;
 8007ec2:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the application.
   */
  switch (event_notification_status)
 8007ec4:	7dfb      	ldrb	r3, [r7, #23]
 8007ec6:	2b02      	cmp	r3, #2
 8007ec8:	d00f      	beq.n	8007eea <SVCCTL_UserEvtRx+0x8e>
 8007eca:	2b02      	cmp	r3, #2
 8007ecc:	dc10      	bgt.n	8007ef0 <SVCCTL_UserEvtRx+0x94>
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d002      	beq.n	8007ed8 <SVCCTL_UserEvtRx+0x7c>
 8007ed2:	2b01      	cmp	r3, #1
 8007ed4:	d006      	beq.n	8007ee4 <SVCCTL_UserEvtRx+0x88>
 8007ed6:	e00b      	b.n	8007ef0 <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 8007ed8:	6878      	ldr	r0, [r7, #4]
 8007eda:	f000 fa4d 	bl	8008378 <SVCCTL_App_Notification>
 8007ede:	4603      	mov	r3, r0
 8007ee0:	75bb      	strb	r3, [r7, #22]
      break;
 8007ee2:	e008      	b.n	8007ef6 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 8007ee4:	2301      	movs	r3, #1
 8007ee6:	75bb      	strb	r3, [r7, #22]
      break;
 8007ee8:	e005      	b.n	8007ef6 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 8007eea:	2300      	movs	r3, #0
 8007eec:	75bb      	strb	r3, [r7, #22]
      break;
 8007eee:	e002      	b.n	8007ef6 <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 8007ef0:	2301      	movs	r3, #1
 8007ef2:	75bb      	strb	r3, [r7, #22]
      break;
 8007ef4:	bf00      	nop
  }

  return (return_status);
 8007ef6:	7dbb      	ldrb	r3, [r7, #22]
}
 8007ef8:	4618      	mov	r0, r3
 8007efa:	3718      	adds	r7, #24
 8007efc:	46bd      	mov	sp, r7
 8007efe:	bd80      	pop	{r7, pc}
 8007f00:	20003888 	.word	0x20003888

08007f04 <ll_sys_enable_specific_irq>:
  *         All interrupts with low priority level will be masked.
  * @param  None
  * @retval None
  */
void ll_sys_enable_specific_irq(uint8_t isr_type)
{
 8007f04:	b580      	push	{r7, lr}
 8007f06:	b082      	sub	sp, #8
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	4603      	mov	r3, r0
 8007f0c:	71fb      	strb	r3, [r7, #7]
  LINKLAYER_PLAT_EnableSpecificIRQ(isr_type);
 8007f0e:	79fb      	ldrb	r3, [r7, #7]
 8007f10:	4618      	mov	r0, r3
 8007f12:	f002 f891 	bl	800a038 <LINKLAYER_PLAT_EnableSpecificIRQ>
}
 8007f16:	bf00      	nop
 8007f18:	3708      	adds	r7, #8
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	bd80      	pop	{r7, pc}

08007f1e <ll_sys_disable_specific_irq>:
  * @brief  Restore the previous interrupt priority level
  * @param  None
  * @retval None
  */
void ll_sys_disable_specific_irq(uint8_t isr_type)
{
 8007f1e:	b580      	push	{r7, lr}
 8007f20:	b082      	sub	sp, #8
 8007f22:	af00      	add	r7, sp, #0
 8007f24:	4603      	mov	r3, r0
 8007f26:	71fb      	strb	r3, [r7, #7]
  LINKLAYER_PLAT_DisableSpecificIRQ(isr_type);
 8007f28:	79fb      	ldrb	r3, [r7, #7]
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	f002 f8cc 	bl	800a0c8 <LINKLAYER_PLAT_DisableSpecificIRQ>
}
 8007f30:	bf00      	nop
 8007f32:	3708      	adds	r7, #8
 8007f34:	46bd      	mov	sp, r7
 8007f36:	bd80      	pop	{r7, pc}

08007f38 <ll_sys_enable_os_context_switch>:

void ll_sys_enable_os_context_switch(void)
{
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	af00      	add	r7, sp, #0
  LINKLAYER_PLAT_EnableOSContextSwitch();
 8007f3c:	f002 f971 	bl	800a222 <LINKLAYER_PLAT_EnableOSContextSwitch>
}
 8007f40:	bf00      	nop
 8007f42:	bd80      	pop	{r7, pc}

08007f44 <ll_sys_disable_os_context_switch>:

void ll_sys_disable_os_context_switch(void)
{
 8007f44:	b580      	push	{r7, lr}
 8007f46:	af00      	add	r7, sp, #0
  LINKLAYER_PLAT_DisableOSContextSwitch();
 8007f48:	f002 f972 	bl	800a230 <LINKLAYER_PLAT_DisableOSContextSwitch>
 8007f4c:	bf00      	nop
 8007f4e:	bd80      	pop	{r7, pc}

08007f50 <ll_sys_dp_slp_init>:
  * @brief  Initialize resources to handle deep sleep entry/exit
  * @param  None
  * @retval LL_SYS status
  */
ll_sys_status_t ll_sys_dp_slp_init(void)
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b082      	sub	sp, #8
 8007f54:	af00      	add	r7, sp, #0
  ll_sys_status_t return_status = LL_SYS_ERROR;
 8007f56:	2301      	movs	r3, #1
 8007f58:	71fb      	strb	r3, [r7, #7]
  
  /* Create link layer timer for handling IP DEEP SLEEP mode */
  radio_dp_slp_tmr_id = os_timer_create((t_timer_callbk)ll_sys_dp_slp_wakeup_evt_clbk, os_timer_once, NULL);
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	2100      	movs	r1, #0
 8007f5e:	4808      	ldr	r0, [pc, #32]	@ (8007f80 <ll_sys_dp_slp_init+0x30>)
 8007f60:	f019 ff34 	bl	8021dcc <os_timer_create>
 8007f64:	4603      	mov	r3, r0
 8007f66:	4a07      	ldr	r2, [pc, #28]	@ (8007f84 <ll_sys_dp_slp_init+0x34>)
 8007f68:	6013      	str	r3, [r2, #0]

  if (radio_dp_slp_tmr_id != NULL)
 8007f6a:	4b06      	ldr	r3, [pc, #24]	@ (8007f84 <ll_sys_dp_slp_init+0x34>)
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d001      	beq.n	8007f76 <ll_sys_dp_slp_init+0x26>
  {
    return_status = LL_SYS_OK;
 8007f72:	2300      	movs	r3, #0
 8007f74:	71fb      	strb	r3, [r7, #7]
  }
  
  return return_status;
 8007f76:	79fb      	ldrb	r3, [r7, #7]
}
 8007f78:	4618      	mov	r0, r3
 8007f7a:	3708      	adds	r7, #8
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	bd80      	pop	{r7, pc}
 8007f80:	08007ff5 	.word	0x08007ff5
 8007f84:	200038b0 	.word	0x200038b0

08007f88 <ll_sys_dp_slp_exit>:
/**
  * @brief  The Link Layer IP exits deep sleep mode
  * @param  None
  * @retval LL_SYS status
  */
ll_sys_status_t ll_sys_dp_slp_exit(void){
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b082      	sub	sp, #8
 8007f8c:	af00      	add	r7, sp, #0
  ble_stat_t cmd_status = GENERAL_FAILURE;
 8007f8e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007f92:	603b      	str	r3, [r7, #0]
  ll_sys_status_t return_status = LL_SYS_ERROR;
 8007f94:	2301      	movs	r3, #1
 8007f96:	71fb      	strb	r3, [r7, #7]

  /* Disable radio interrupt */
  LINKLAYER_PLAT_DisableRadioIT();
 8007f98:	f002 f8eb 	bl	800a172 <LINKLAYER_PLAT_DisableRadioIT>

  if(linklayer_dp_slp_state == LL_SYS_DP_SLP_DISABLED)
 8007f9c:	4b13      	ldr	r3, [pc, #76]	@ (8007fec <ll_sys_dp_slp_exit+0x64>)
 8007f9e:	781b      	ldrb	r3, [r3, #0]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d102      	bne.n	8007faa <ll_sys_dp_slp_exit+0x22>
  {
    /* Radio not in sleep mode */
    return_status = LL_SYS_OK;
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	71fb      	strb	r3, [r7, #7]
 8007fa8:	e018      	b.n	8007fdc <ll_sys_dp_slp_exit+0x54>
  }
  else
  {
    /* Stop the deep sleep wake-up timer if running */
    if(os_get_tmr_state(radio_dp_slp_tmr_id) != (os_timer_state)osTimerStopped)
 8007faa:	4b11      	ldr	r3, [pc, #68]	@ (8007ff0 <ll_sys_dp_slp_exit+0x68>)
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	4618      	mov	r0, r3
 8007fb0:	f01a f8e7 	bl	8022182 <os_get_tmr_state>
 8007fb4:	4603      	mov	r3, r0
 8007fb6:	2b02      	cmp	r3, #2
 8007fb8:	d004      	beq.n	8007fc4 <ll_sys_dp_slp_exit+0x3c>
    {
      os_timer_stop(radio_dp_slp_tmr_id);
 8007fba:	4b0d      	ldr	r3, [pc, #52]	@ (8007ff0 <ll_sys_dp_slp_exit+0x68>)
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	f01a f838 	bl	8022034 <os_timer_stop>
    }
    
    /* Switch Link Layer IP to SLEEP mode (by deactivate DEEP SLEEP mode) */
#if defined(BLE)
    /* BLE & Concurrent use case */
    cmd_status = ll_intf_le_set_dp_slp_mode(DEEP_SLEEP_DISABLE);
 8007fc4:	2000      	movs	r0, #0
 8007fc6:	f00c fe72 	bl	8014cae <ll_intf_le_set_dp_slp_mode>
 8007fca:	6038      	str	r0, [r7, #0]
      cmd_status = SUCCESS;
    }
#else
 #error "neither MAC not BLE defined"
#endif
    if(cmd_status == SUCCESS)
 8007fcc:	683b      	ldr	r3, [r7, #0]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d104      	bne.n	8007fdc <ll_sys_dp_slp_exit+0x54>
    {
      linklayer_dp_slp_state = LL_SYS_DP_SLP_DISABLED;
 8007fd2:	4b06      	ldr	r3, [pc, #24]	@ (8007fec <ll_sys_dp_slp_exit+0x64>)
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	701a      	strb	r2, [r3, #0]
      return_status = LL_SYS_OK;
 8007fd8:	2300      	movs	r3, #0
 8007fda:	71fb      	strb	r3, [r7, #7]
    }
  }
  
  /* Re-enable radio interrupt */
  LINKLAYER_PLAT_EnableRadioIT();
 8007fdc:	f002 f8c2 	bl	800a164 <LINKLAYER_PLAT_EnableRadioIT>
  
  return return_status;
 8007fe0:	79fb      	ldrb	r3, [r7, #7]
}
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	3708      	adds	r7, #8
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	bd80      	pop	{r7, pc}
 8007fea:	bf00      	nop
 8007fec:	200038b4 	.word	0x200038b4
 8007ff0:	200038b0 	.word	0x200038b0

08007ff4 <ll_sys_dp_slp_wakeup_evt_clbk>:
/**
  * @brief  Link Layer deep sleep wake-up timer callback
  * @param  ptr_arg    pointer passed through the callback
  * @retval LL_SYS status
  */
void ll_sys_dp_slp_wakeup_evt_clbk(void const *ptr_arg){
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b084      	sub	sp, #16
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
  int32_t os_status = GENERAL_FAILURE;
 8007ffc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008000:	60fb      	str	r3, [r7, #12]

  /* Stop the Link Layer IP DEEP SLEEP wake-up timer */
  os_status = os_timer_stop(radio_dp_slp_tmr_id);
 8008002:	4b08      	ldr	r3, [pc, #32]	@ (8008024 <ll_sys_dp_slp_wakeup_evt_clbk+0x30>)
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	4618      	mov	r0, r3
 8008008:	f01a f814 	bl	8022034 <os_timer_stop>
 800800c:	60f8      	str	r0, [r7, #12]
  if(os_status != SUCCESS){
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	2b00      	cmp	r3, #0
 8008012:	d102      	bne.n	800801a <ll_sys_dp_slp_wakeup_evt_clbk+0x26>
    return;
  }

  /* Link Layer IP exits from DEEP SLEEP mode */
  ll_sys_dp_slp_exit();
 8008014:	f7ff ffb8 	bl	8007f88 <ll_sys_dp_slp_exit>
 8008018:	e000      	b.n	800801c <ll_sys_dp_slp_wakeup_evt_clbk+0x28>
    return;
 800801a:	bf00      	nop
}
 800801c:	3710      	adds	r7, #16
 800801e:	46bd      	mov	sp, r7
 8008020:	bd80      	pop	{r7, pc}
 8008022:	bf00      	nop
 8008024:	200038b0 	.word	0x200038b0

08008028 <ll_sys_init>:
  * @brief  Initialize the Link Layer SoC dependencies
  * @param  None
  * @retval None
  */
void ll_sys_init()
{
 8008028:	b580      	push	{r7, lr}
 800802a:	af00      	add	r7, sp, #0
  LINKLAYER_PLAT_ClockInit();	
 800802c:	f001 fed6 	bl	8009ddc <LINKLAYER_PLAT_ClockInit>
}
 8008030:	bf00      	nop
 8008032:	bd80      	pop	{r7, pc}

08008034 <ll_sys_delay_us>:
  * @brief  Blocking delay in us
  * @param  None
  * @retval None
  */
void ll_sys_delay_us(uint32_t delay)
{
 8008034:	b580      	push	{r7, lr}
 8008036:	b082      	sub	sp, #8
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
  LINKLAYER_PLAT_DelayUs(delay);
 800803c:	6878      	ldr	r0, [r7, #4]
 800803e:	f001 feeb 	bl	8009e18 <LINKLAYER_PLAT_DelayUs>
}
 8008042:	bf00      	nop
 8008044:	3708      	adds	r7, #8
 8008046:	46bd      	mov	sp, r7
 8008048:	bd80      	pop	{r7, pc}

0800804a <ll_sys_assert>:
  * @brief  Assert checking
  * @param  None
  * @retval None
  */
void ll_sys_assert(uint8_t condition)
{
 800804a:	b580      	push	{r7, lr}
 800804c:	b082      	sub	sp, #8
 800804e:	af00      	add	r7, sp, #0
 8008050:	4603      	mov	r3, r0
 8008052:	71fb      	strb	r3, [r7, #7]
  LINKLAYER_PLAT_Assert(condition);
 8008054:	79fb      	ldrb	r3, [r7, #7]
 8008056:	4618      	mov	r0, r3
 8008058:	f001 fefe 	bl	8009e58 <LINKLAYER_PLAT_Assert>
}
 800805c:	bf00      	nop
 800805e:	3708      	adds	r7, #8
 8008060:	46bd      	mov	sp, r7
 8008062:	bd80      	pop	{r7, pc}

08008064 <ll_sys_radio_ack_ctrl>:
  * @brief  Radio active clock management
  * @param  None
  * @retval None
  */
void ll_sys_radio_ack_ctrl(uint8_t enable)
{
 8008064:	b580      	push	{r7, lr}
 8008066:	b082      	sub	sp, #8
 8008068:	af00      	add	r7, sp, #0
 800806a:	4603      	mov	r3, r0
 800806c:	71fb      	strb	r3, [r7, #7]
  LINKLAYER_PLAT_AclkCtrl(enable);
 800806e:	79fb      	ldrb	r3, [r7, #7]
 8008070:	4618      	mov	r0, r3
 8008072:	f001 fefc 	bl	8009e6e <LINKLAYER_PLAT_AclkCtrl>
}
 8008076:	bf00      	nop
 8008078:	3708      	adds	r7, #8
 800807a:	46bd      	mov	sp, r7
 800807c:	bd80      	pop	{r7, pc}

0800807e <ll_sys_get_rng>:
  * @brief  Get RNG number for the Link Layer IP
  * @param  None
  * @retval None
  */
void ll_sys_get_rng(uint8_t *ptr_rnd, uint32_t len)
{
 800807e:	b580      	push	{r7, lr}
 8008080:	b082      	sub	sp, #8
 8008082:	af00      	add	r7, sp, #0
 8008084:	6078      	str	r0, [r7, #4]
 8008086:	6039      	str	r1, [r7, #0]
  LINKLAYER_PLAT_GetRNG(ptr_rnd, len);
 8008088:	6839      	ldr	r1, [r7, #0]
 800808a:	6878      	ldr	r0, [r7, #4]
 800808c:	f001 ff06 	bl	8009e9c <LINKLAYER_PLAT_GetRNG>
}
 8008090:	bf00      	nop
 8008092:	3708      	adds	r7, #8
 8008094:	46bd      	mov	sp, r7
 8008096:	bd80      	pop	{r7, pc}

08008098 <ll_sys_setup_radio_intr>:
  * @brief  Initialize the main radio interrupt
  * @param  intr_cb    radio interrupt callback to link with the radio IRQ
  * @retval None
  */
void ll_sys_setup_radio_intr(void (*intr_cb)())
{
 8008098:	b580      	push	{r7, lr}
 800809a:	b082      	sub	sp, #8
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
  LINKLAYER_PLAT_SetupRadioIT(intr_cb);
 80080a0:	6878      	ldr	r0, [r7, #4]
 80080a2:	f001 ff33 	bl	8009f0c <LINKLAYER_PLAT_SetupRadioIT>
}
 80080a6:	bf00      	nop
 80080a8:	3708      	adds	r7, #8
 80080aa:	46bd      	mov	sp, r7
 80080ac:	bd80      	pop	{r7, pc}

080080ae <ll_sys_setup_radio_sw_low_intr>:
  * @param  intr_cb    radio SW low interrupt interrupt callback to link 
  *                    with the defined interrupt vector
  * @retval None
  */
void ll_sys_setup_radio_sw_low_intr(void (*intr_cb)())
{
 80080ae:	b580      	push	{r7, lr}
 80080b0:	b082      	sub	sp, #8
 80080b2:	af00      	add	r7, sp, #0
 80080b4:	6078      	str	r0, [r7, #4]
  LINKLAYER_PLAT_SetupSwLowIT(intr_cb);
 80080b6:	6878      	ldr	r0, [r7, #4]
 80080b8:	f001 ff3e 	bl	8009f38 <LINKLAYER_PLAT_SetupSwLowIT>
}
 80080bc:	bf00      	nop
 80080be:	3708      	adds	r7, #8
 80080c0:	46bd      	mov	sp, r7
 80080c2:	bd80      	pop	{r7, pc}

080080c4 <ll_sys_radio_sw_low_intr_trigger>:
  * @brief  Trigger the radio SW low interrupt
  * @param  None
  * @retval None
  */
void ll_sys_radio_sw_low_intr_trigger(uint8_t priority)
{
 80080c4:	b580      	push	{r7, lr}
 80080c6:	b082      	sub	sp, #8
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	4603      	mov	r3, r0
 80080cc:	71fb      	strb	r3, [r7, #7]
  LINKLAYER_PLAT_TriggerSwLowIT(priority);
 80080ce:	79fb      	ldrb	r3, [r7, #7]
 80080d0:	4618      	mov	r0, r3
 80080d2:	f001 ff47 	bl	8009f64 <LINKLAYER_PLAT_TriggerSwLowIT>
}
 80080d6:	bf00      	nop
 80080d8:	3708      	adds	r7, #8
 80080da:	46bd      	mov	sp, r7
 80080dc:	bd80      	pop	{r7, pc}

080080de <ll_sys_radio_evt_not>:
  * @brief  Link Layer radio activity event notification
  * @param  start      start/end of radio event
  * @retval None
  */
void ll_sys_radio_evt_not(uint8_t start)
{
 80080de:	b580      	push	{r7, lr}
 80080e0:	b082      	sub	sp, #8
 80080e2:	af00      	add	r7, sp, #0
 80080e4:	4603      	mov	r3, r0
 80080e6:	71fb      	strb	r3, [r7, #7]
  if(start)
 80080e8:	79fb      	ldrb	r3, [r7, #7]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d002      	beq.n	80080f4 <ll_sys_radio_evt_not+0x16>
  {
    LINKLAYER_PLAT_StartRadioEvt();
 80080ee:	f002 f847 	bl	800a180 <LINKLAYER_PLAT_StartRadioEvt>
  
  else
  {
    LINKLAYER_PLAT_StopRadioEvt();
  }
}
 80080f2:	e001      	b.n	80080f8 <ll_sys_radio_evt_not+0x1a>
    LINKLAYER_PLAT_StopRadioEvt();
 80080f4:	f002 f85a 	bl	800a1ac <LINKLAYER_PLAT_StopRadioEvt>
}
 80080f8:	bf00      	nop
 80080fa:	3708      	adds	r7, #8
 80080fc:	46bd      	mov	sp, r7
 80080fe:	bd80      	pop	{r7, pc}

08008100 <ll_sys_rco_clbr_not>:
  * @brief  Link Layer RCO calibration notification
  * @param  start      start/end of RCO calibration
  * @retval None
  */
void ll_sys_rco_clbr_not(uint8_t start)
{
 8008100:	b580      	push	{r7, lr}
 8008102:	b082      	sub	sp, #8
 8008104:	af00      	add	r7, sp, #0
 8008106:	4603      	mov	r3, r0
 8008108:	71fb      	strb	r3, [r7, #7]
  if(start)
 800810a:	79fb      	ldrb	r3, [r7, #7]
 800810c:	2b00      	cmp	r3, #0
 800810e:	d002      	beq.n	8008116 <ll_sys_rco_clbr_not+0x16>
  {
    LINKLAYER_PLAT_RCOStartClbr();
 8008110:	f002 f862 	bl	800a1d8 <LINKLAYER_PLAT_RCOStartClbr>
  
  else
  {
    LINKLAYER_PLAT_RCOStopClbr();
  }
}
 8008114:	e001      	b.n	800811a <ll_sys_rco_clbr_not+0x1a>
    LINKLAYER_PLAT_RCOStopClbr();
 8008116:	f002 f86e 	bl	800a1f6 <LINKLAYER_PLAT_RCOStopClbr>
}
 800811a:	bf00      	nop
 800811c:	3708      	adds	r7, #8
 800811e:	46bd      	mov	sp, r7
 8008120:	bd80      	pop	{r7, pc}

08008122 <ll_sys_request_temperature>:
  * @brief  Link Layer temperature request
  * @param  None
  * @retval None
  */
void ll_sys_request_temperature(void)
{
 8008122:	b580      	push	{r7, lr}
 8008124:	af00      	add	r7, sp, #0
   LINKLAYER_PLAT_RequestTemperature();
 8008126:	f002 f875 	bl	800a214 <LINKLAYER_PLAT_RequestTemperature>
}
 800812a:	bf00      	nop
 800812c:	bd80      	pop	{r7, pc}

0800812e <ll_sys_bg_process>:
  * @brief  Link Layer background task pcoessing procedure
  * @param  None
  * @retval None
  */
void ll_sys_bg_process(void)
{
 800812e:	b580      	push	{r7, lr}
 8008130:	af00      	add	r7, sp, #0
  if(emngr_can_mcu_sleep() == 0)
 8008132:	f019 fc5d 	bl	80219f0 <emngr_can_mcu_sleep>
 8008136:	4603      	mov	r3, r0
 8008138:	2b00      	cmp	r3, #0
 800813a:	d105      	bne.n	8008148 <ll_sys_bg_process+0x1a>
  {        
    ll_sys_dp_slp_exit();
 800813c:	f7ff ff24 	bl	8007f88 <ll_sys_dp_slp_exit>
    emngr_handle_all_events();
 8008140:	f019 fb8c 	bl	802185c <emngr_handle_all_events>
    
    HostStack_Process();
 8008144:	f001 fdb9 	bl	8009cba <HostStack_Process>
  }

  if(emngr_can_mcu_sleep() == 0)
 8008148:	f019 fc52 	bl	80219f0 <emngr_can_mcu_sleep>
 800814c:	4603      	mov	r3, r0
 800814e:	2b00      	cmp	r3, #0
 8008150:	d101      	bne.n	8008156 <ll_sys_bg_process+0x28>
  {
    ll_sys_schedule_bg_process();
 8008152:	f002 f899 	bl	800a288 <ll_sys_schedule_bg_process>
  }
}
 8008156:	bf00      	nop
 8008158:	bd80      	pop	{r7, pc}

0800815a <ll_sys_schldr_timing_update_not>:

void ll_sys_schldr_timing_update_not(Evnt_timing_t * p_evnt_timing)
{
 800815a:	b580      	push	{r7, lr}
 800815c:	b082      	sub	sp, #8
 800815e:	af00      	add	r7, sp, #0
 8008160:	6078      	str	r0, [r7, #4]
  LINKLAYER_PLAT_SCHLDR_TIMING_UPDATE_NOT(p_evnt_timing);
 8008162:	6878      	ldr	r0, [r7, #4]
 8008164:	f002 f86b 	bl	800a23e <LINKLAYER_PLAT_SCHLDR_TIMING_UPDATE_NOT>
}
 8008168:	bf00      	nop
 800816a:	3708      	adds	r7, #8
 800816c:	46bd      	mov	sp, r7
 800816e:	bd80      	pop	{r7, pc}

08008170 <ll_sys_get_concurrent_state_machines_num>:
  * @brief  Get the number of concurrent state machines for the Link Layer
  * @param  None
  * @retval Supported number of concurrent state machines 
  */
uint8_t ll_sys_get_concurrent_state_machines_num(void)
{
 8008170:	b480      	push	{r7}
 8008172:	af00      	add	r7, sp, #0
  return MAX_NUM_CNCRT_STAT_MCHNS;
 8008174:	2308      	movs	r3, #8
}
 8008176:	4618      	mov	r0, r3
 8008178:	46bd      	mov	sp, r7
 800817a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817e:	4770      	bx	lr

08008180 <ll_sys_event_missed_cb>:
#endif /* MAC */

static void ll_sys_dependencies_init(void);
#ifdef BLE
static void ll_sys_event_missed_cb( ble_buff_hdr_t* ptr_evnt_hdr )
{
 8008180:	b480      	push	{r7}
 8008182:	b083      	sub	sp, #12
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
  
}
 8008188:	bf00      	nop
 800818a:	370c      	adds	r7, #12
 800818c:	46bd      	mov	sp, r7
 800818e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008192:	4770      	bx	lr

08008194 <ll_sys_ble_cntrl_init>:
  * @brief  Initialize the Link Layer IP BLE controller
  * @param  None
  * @retval None
  */
void ll_sys_ble_cntrl_init(hst_cbk hostCallback)
{ 
 8008194:	b580      	push	{r7, lr}
 8008196:	b084      	sub	sp, #16
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]
  const struct hci_dispatch_tbl* p_hci_dis_tbl;
  hci_get_dis_tbl( &p_hci_dis_tbl );
 800819c:	f107 030c 	add.w	r3, r7, #12
 80081a0:	4618      	mov	r0, r3
 80081a2:	f00b fd3f 	bl	8013c24 <hci_get_dis_tbl>
  
  ll_intf_init(p_hci_dis_tbl);
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	4618      	mov	r0, r3
 80081aa:	f00c fb88 	bl	80148be <ll_intf_init>

  ll_intf_rgstr_hst_cbk(hostCallback);
 80081ae:	6878      	ldr	r0, [r7, #4]
 80081b0:	f00c fe02 	bl	8014db8 <ll_intf_rgstr_hst_cbk>

  ll_intf_rgstr_hst_cbk_ll_queue_full( ll_sys_event_missed_cb );
 80081b4:	4804      	ldr	r0, [pc, #16]	@ (80081c8 <ll_sys_ble_cntrl_init+0x34>)
 80081b6:	f00c fe0c 	bl	8014dd2 <ll_intf_rgstr_hst_cbk_ll_queue_full>

  ll_sys_dependencies_init();
 80081ba:	f000 f807 	bl	80081cc <ll_sys_dependencies_init>
}
 80081be:	bf00      	nop
 80081c0:	3710      	adds	r7, #16
 80081c2:	46bd      	mov	sp, r7
 80081c4:	bd80      	pop	{r7, pc}
 80081c6:	bf00      	nop
 80081c8:	08008181 	.word	0x08008181

080081cc <ll_sys_dependencies_init>:
  *                        - Link Layer background task
  * @param  None
  * @retval None
  */
static void ll_sys_dependencies_init(void)
{
 80081cc:	b580      	push	{r7, lr}
 80081ce:	b082      	sub	sp, #8
 80081d0:	af00      	add	r7, sp, #0
  ll_sys_status_t dp_slp_status = LL_SYS_ERROR;
 80081d2:	2301      	movs	r3, #1
 80081d4:	71fb      	strb	r3, [r7, #7]
  
  /* Deep sleep feature initialization */
  dp_slp_status = ll_sys_dp_slp_init();
 80081d6:	f7ff febb 	bl	8007f50 <ll_sys_dp_slp_init>
 80081da:	4603      	mov	r3, r0
 80081dc:	71fb      	strb	r3, [r7, #7]
  ll_sys_assert(dp_slp_status == LL_SYS_OK); 
 80081de:	79fb      	ldrb	r3, [r7, #7]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	bf0c      	ite	eq
 80081e4:	2301      	moveq	r3, #1
 80081e6:	2300      	movne	r3, #0
 80081e8:	b2db      	uxtb	r3, r3
 80081ea:	4618      	mov	r0, r3
 80081ec:	f7ff ff2d 	bl	800804a <ll_sys_assert>
  
  /* Background task initialization */
  ll_sys_bg_process_init();
 80081f0:	f002 f83e 	bl	800a270 <ll_sys_bg_process_init>
  
  /* Link Layer user parameters application */
  ll_sys_config_params();
 80081f4:	f002 f858 	bl	800a2a8 <ll_sys_config_params>
 80081f8:	bf00      	nop
 80081fa:	3708      	adds	r7, #8
 80081fc:	46bd      	mov	sp, r7
 80081fe:	bd80      	pop	{r7, pc}

08008200 <LL_FLASH_GetUDN>:
/**
  * @brief  Return the Unique Device Number
  * @retval Values between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8008200:	b480      	push	{r7}
 8008202:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 8008204:	4b03      	ldr	r3, [pc, #12]	@ (8008214 <LL_FLASH_GetUDN+0x14>)
 8008206:	681b      	ldr	r3, [r3, #0]
}
 8008208:	4618      	mov	r0, r3
 800820a:	46bd      	mov	sp, r7
 800820c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008210:	4770      	bx	lr
 8008212:	bf00      	nop
 8008214:	0bf90a00 	.word	0x0bf90a00

08008218 <LL_FLASH_GetDeviceID>:
  * @brief  Return the Device ID
  *         For STM32WBA52xx devices, the device ID is 0x2A
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x2A)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8008218:	b480      	push	{r7}
 800821a:	af00      	add	r7, sp, #0
  return ((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 800821c:	4b03      	ldr	r3, [pc, #12]	@ (800822c <LL_FLASH_GetDeviceID+0x14>)
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	b2db      	uxtb	r3, r3
}
 8008222:	4618      	mov	r0, r3
 8008224:	46bd      	mov	sp, r7
 8008226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822a:	4770      	bx	lr
 800822c:	0bf90a04 	.word	0x0bf90a04

08008230 <LL_FLASH_GetSTCompanyID>:
  * @brief  Return the ST Company ID
  * @note   For STM32WBAxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8008230:	b480      	push	{r7}
 8008232:	af00      	add	r7, sp, #0
  return (((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8008234:	4b03      	ldr	r3, [pc, #12]	@ (8008244 <LL_FLASH_GetSTCompanyID+0x14>)
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	0a1b      	lsrs	r3, r3, #8
}
 800823a:	4618      	mov	r0, r3
 800823c:	46bd      	mov	sp, r7
 800823e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008242:	4770      	bx	lr
 8008244:	0bf90a04 	.word	0x0bf90a04

08008248 <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 8008248:	b580      	push	{r7, lr}
 800824a:	b08a      	sub	sp, #40	@ 0x28
 800824c:	af08      	add	r7, sp, #32
  /* USER CODE BEGIN APP_BLE_Init_1 */

  /* USER CODE END APP_BLE_Init_1 */

  LST_init_head(&BleAsynchEventQueue);
 800824e:	4841      	ldr	r0, [pc, #260]	@ (8008354 <APP_BLE_Init+0x10c>)
 8008250:	f007 ff0c 	bl	801006c <LST_init_head>

  UTIL_SEQ_RegTask(1U << CFG_TASK_BLE_HOST, UTIL_SEQ_RFU, BleStack_Process_BG);
 8008254:	4a40      	ldr	r2, [pc, #256]	@ (8008358 <APP_BLE_Init+0x110>)
 8008256:	2100      	movs	r1, #0
 8008258:	2008      	movs	r0, #8
 800825a:	f008 fb15 	bl	8010888 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask(1U << CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, Ble_UserEvtRx);
 800825e:	4a3f      	ldr	r2, [pc, #252]	@ (800835c <APP_BLE_Init+0x114>)
 8008260:	2100      	movs	r1, #0
 8008262:	2004      	movs	r0, #4
 8008264:	f008 fb10 	bl	8010888 <UTIL_SEQ_RegTask>

  /* NVM emulation in RAM initialization */
  NVM_Init(buffer_nvm, 0, CFG_BLEPLAT_NVM_MAX_SIZE);
 8008268:	22fc      	movs	r2, #252	@ 0xfc
 800826a:	2100      	movs	r1, #0
 800826c:	483c      	ldr	r0, [pc, #240]	@ (8008360 <APP_BLE_Init+0x118>)
 800826e:	f006 fcaf 	bl	800ebd0 <NVM_Init>

  /* First register the APP BLE buffer */
  SNVMA_Register (APP_BLE_NvmBuffer,
 8008272:	f44f 72fc 	mov.w	r2, #504	@ 0x1f8
 8008276:	493a      	ldr	r1, [pc, #232]	@ (8008360 <APP_BLE_Init+0x118>)
 8008278:	2000      	movs	r0, #0
 800827a:	f003 ffbb 	bl	800c1f4 <SNVMA_Register>
                  (uint32_t *)buffer_nvm,
                  (CFG_BLEPLAT_NVM_MAX_SIZE * 2));

  /* Realize a restore */
  SNVMA_Restore (APP_BLE_NvmBuffer);
 800827e:	2000      	movs	r0, #0
 8008280:	f004 f8ee 	bl	800c460 <SNVMA_Restore>
  /* USER CODE BEGIN APP_BLE_Init_Buffers */

  /* USER CODE END APP_BLE_Init_Buffers */

  /* Check consistency */
  if (NVM_Get (NVM_FIRST, 0xFF, 0, 0, 0) != NVM_EOF)
 8008284:	2300      	movs	r3, #0
 8008286:	9300      	str	r3, [sp, #0]
 8008288:	2300      	movs	r3, #0
 800828a:	2200      	movs	r2, #0
 800828c:	21ff      	movs	r1, #255	@ 0xff
 800828e:	2000      	movs	r0, #0
 8008290:	f006 fdd2 	bl	800ee38 <NVM_Get>
 8008294:	4603      	mov	r3, r0
 8008296:	f113 0f03 	cmn.w	r3, #3
 800829a:	d002      	beq.n	80082a2 <APP_BLE_Init+0x5a>
  {
    NVM_Discard (NVM_ALL);
 800829c:	2003      	movs	r0, #3
 800829e:	f006 fec3 	bl	800f028 <NVM_Discard>
  }

  /* Initialize the BLE Host */
  if (HOST_BLE_Init() == 0u)
 80082a2:	f000 fb7f 	bl	80089a4 <HOST_BLE_Init>
 80082a6:	4603      	mov	r3, r0
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d120      	bne.n	80082ee <APP_BLE_Init+0xa6>
  {
    /* Initialization of HCI & GATT & GAP layer */
    Ble_Hci_Gap_Gatt_Init();
 80082ac:	f000 fbc0 	bl	8008a30 <Ble_Hci_Gap_Gatt_Init>

    /* Initialization of the BLE Services */
    SVCCTL_Init();
 80082b0:	f7ff fda4 	bl	8007dfc <SVCCTL_Init>

    /* Initialization of the BLE App Context */
    bleAppContext.Device_Connection_Status = APP_BLE_IDLE;
 80082b4:	4b2b      	ldr	r3, [pc, #172]	@ (8008364 <APP_BLE_Init+0x11c>)
 80082b6:	2200      	movs	r2, #0
 80082b8:	761a      	strb	r2, [r3, #24]
    bleAppContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 80082ba:	4b2a      	ldr	r3, [pc, #168]	@ (8008364 <APP_BLE_Init+0x11c>)
 80082bc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80082c0:	82da      	strh	r2, [r3, #22]
    /* USER CODE BEGIN APP_BLE_Init_4 */

    /* USER CODE END APP_BLE_Init_4 */

    /* Initialize Services and Characteristics. */
    LOG_INFO_APP("\n");
 80082c2:	4a29      	ldr	r2, [pc, #164]	@ (8008368 <APP_BLE_Init+0x120>)
 80082c4:	2102      	movs	r1, #2
 80082c6:	2000      	movs	r0, #0
 80082c8:	f002 f848 	bl	800a35c <Log_Module_Print>
    LOG_INFO_APP("Services and Characteristics creation\n");
 80082cc:	4a27      	ldr	r2, [pc, #156]	@ (800836c <APP_BLE_Init+0x124>)
 80082ce:	2102      	movs	r1, #2
 80082d0:	2000      	movs	r0, #0
 80082d2:	f002 f843 	bl	800a35c <Log_Module_Print>
    BLUZ_APP_Init();
 80082d6:	f001 fa9b 	bl	8009810 <BLUZ_APP_Init>
    LOG_INFO_APP("End of Services and Characteristics creation\n");
 80082da:	4a25      	ldr	r2, [pc, #148]	@ (8008370 <APP_BLE_Init+0x128>)
 80082dc:	2102      	movs	r1, #2
 80082de:	2000      	movs	r0, #0
 80082e0:	f002 f83c 	bl	800a35c <Log_Module_Print>
    LOG_INFO_APP("\n");
 80082e4:	4a20      	ldr	r2, [pc, #128]	@ (8008368 <APP_BLE_Init+0x120>)
 80082e6:	2102      	movs	r1, #2
 80082e8:	2000      	movs	r0, #0
 80082ea:	f002 f837 	bl	800a35c <Log_Module_Print>

  }
  /* USER CODE BEGIN APP_BLE_Init_2 */
  /* Код начальной инициализации */
  tBleStatus status;
  status = aci_gap_set_discoverable(ADV_TYPE,
 80082ee:	2300      	movs	r3, #0
 80082f0:	9306      	str	r3, [sp, #24]
 80082f2:	2300      	movs	r3, #0
 80082f4:	9305      	str	r3, [sp, #20]
 80082f6:	2300      	movs	r3, #0
 80082f8:	9304      	str	r3, [sp, #16]
 80082fa:	2300      	movs	r3, #0
 80082fc:	9303      	str	r3, [sp, #12]
 80082fe:	2300      	movs	r3, #0
 8008300:	9302      	str	r3, [sp, #8]
 8008302:	2300      	movs	r3, #0
 8008304:	9301      	str	r3, [sp, #4]
 8008306:	2300      	movs	r3, #0
 8008308:	9300      	str	r3, [sp, #0]
 800830a:	2300      	movs	r3, #0
 800830c:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8008310:	f44f 71a0 	mov.w	r1, #320	@ 0x140
 8008314:	2000      	movs	r0, #0
 8008316:	f020 f959 	bl	80285cc <aci_gap_set_discoverable>
 800831a:	4603      	mov	r3, r0
 800831c:	71fb      	strb	r3, [r7, #7]
                                    ADV_INTERVAL_MIN,
                                    ADV_INTERVAL_MAX,
                                    CFG_BD_ADDRESS_TYPE,
                                    ADV_FILTER,
                                    0, 0, 0, 0, 0, 0);
  if (status != BLE_STATUS_SUCCESS)
 800831e:	79fb      	ldrb	r3, [r7, #7]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d110      	bne.n	8008346 <APP_BLE_Init+0xfe>
  {
    return;
  }

  status = aci_gap_delete_ad_type(AD_TYPE_TX_POWER_LEVEL);
 8008324:	200a      	movs	r0, #10
 8008326:	f020 fa0b 	bl	8028740 <aci_gap_delete_ad_type>
 800832a:	4603      	mov	r3, r0
 800832c:	71fb      	strb	r3, [r7, #7]
  if (status != BLE_STATUS_SUCCESS)
 800832e:	79fb      	ldrb	r3, [r7, #7]
 8008330:	2b00      	cmp	r3, #0
 8008332:	d10a      	bne.n	800834a <APP_BLE_Init+0x102>
  {
    return;
  }

  /* Update Advertising data */
  status = aci_gap_update_adv_data(sizeof(a_AdvData), (uint8_t *) a_AdvData);
 8008334:	490f      	ldr	r1, [pc, #60]	@ (8008374 <APP_BLE_Init+0x12c>)
 8008336:	200b      	movs	r0, #11
 8008338:	f020 f97a 	bl	8028630 <aci_gap_update_adv_data>
 800833c:	4603      	mov	r3, r0
 800833e:	71fb      	strb	r3, [r7, #7]
  if (status != BLE_STATUS_SUCCESS)
 8008340:	79fb      	ldrb	r3, [r7, #7]
 8008342:	2b00      	cmp	r3, #0
    return;
  }

  /* USER CODE END APP_BLE_Init_2 */

  return;
 8008344:	e002      	b.n	800834c <APP_BLE_Init+0x104>
    return;
 8008346:	bf00      	nop
 8008348:	e000      	b.n	800834c <APP_BLE_Init+0x104>
    return;
 800834a:	bf00      	nop
}
 800834c:	3708      	adds	r7, #8
 800834e:	46bd      	mov	sp, r7
 8008350:	bd80      	pop	{r7, pc}
 8008352:	bf00      	nop
 8008354:	200038b8 	.word	0x200038b8
 8008358:	08008f3d 	.word	0x08008f3d
 800835c:	08008dc9 	.word	0x08008dc9
 8008360:	200038e8 	.word	0x200038e8
 8008364:	200038c8 	.word	0x200038c8
 8008368:	08030e38 	.word	0x08030e38
 800836c:	080309f4 	.word	0x080309f4
 8008370:	08030a1c 	.word	0x08030a1c
 8008374:	20000034 	.word	0x20000034

08008378 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 8008378:	b5b0      	push	{r4, r5, r7, lr}
 800837a:	b09c      	sub	sp, #112	@ 0x70
 800837c:	af08      	add	r7, sp, #32
 800837e:	6078      	str	r0, [r7, #4]
  tBleStatus ret = BLE_STATUS_ERROR;
 8008380:	2397      	movs	r3, #151	@ 0x97
 8008382:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	3301      	adds	r3, #1
 800838a:	64bb      	str	r3, [r7, #72]	@ 0x48
  UNUSED(ret);
  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  switch (p_event_pckt->evt)
 800838c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800838e:	781b      	ldrb	r3, [r3, #0]
 8008390:	2bff      	cmp	r3, #255	@ 0xff
 8008392:	f000 81e0 	beq.w	8008756 <SVCCTL_App_Notification+0x3de>
 8008396:	2bff      	cmp	r3, #255	@ 0xff
 8008398:	f300 82c9 	bgt.w	800892e <SVCCTL_App_Notification+0x5b6>
 800839c:	2b05      	cmp	r3, #5
 800839e:	d002      	beq.n	80083a6 <SVCCTL_App_Notification+0x2e>
 80083a0:	2b3e      	cmp	r3, #62	@ 0x3e
 80083a2:	d059      	beq.n	8008458 <SVCCTL_App_Notification+0xe0>
    default:
    {
      /* USER CODE BEGIN EVENT_PCKT_DEFAULT*/

      /* USER CODE END EVENT_PCKT_DEFAULT*/
      break;
 80083a4:	e2c3      	b.n	800892e <SVCCTL_App_Notification+0x5b6>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 80083a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80083a8:	3302      	adds	r3, #2
 80083aa:	60fb      	str	r3, [r7, #12]
      if (p_disconnection_complete_event->Connection_Handle == bleAppContext.BleApplicationContext_legacy.connectionHandle)
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80083b2:	b29a      	uxth	r2, r3
 80083b4:	4b9b      	ldr	r3, [pc, #620]	@ (8008624 <SVCCTL_App_Notification+0x2ac>)
 80083b6:	8adb      	ldrh	r3, [r3, #22]
 80083b8:	429a      	cmp	r2, r3
 80083ba:	d118      	bne.n	80083ee <SVCCTL_App_Notification+0x76>
        bleAppContext.BleApplicationContext_legacy.connectionHandle = 0;
 80083bc:	4b99      	ldr	r3, [pc, #612]	@ (8008624 <SVCCTL_App_Notification+0x2ac>)
 80083be:	2200      	movs	r2, #0
 80083c0:	82da      	strh	r2, [r3, #22]
        bleAppContext.Device_Connection_Status = APP_BLE_IDLE;
 80083c2:	4b98      	ldr	r3, [pc, #608]	@ (8008624 <SVCCTL_App_Notification+0x2ac>)
 80083c4:	2200      	movs	r2, #0
 80083c6:	761a      	strb	r2, [r3, #24]
        LOG_INFO_APP(">>== HCI_DISCONNECTION_COMPLETE_EVT_CODE\n");
 80083c8:	4a97      	ldr	r2, [pc, #604]	@ (8008628 <SVCCTL_App_Notification+0x2b0>)
 80083ca:	2102      	movs	r1, #2
 80083cc:	2000      	movs	r0, #0
 80083ce:	f001 ffc5 	bl	800a35c <Log_Module_Print>
        LOG_INFO_APP("     - Connection Handle:   0x%02X\n     - Reason:    0x%02X\n",
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80083d8:	b29b      	uxth	r3, r3
 80083da:	461a      	mov	r2, r3
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	78db      	ldrb	r3, [r3, #3]
 80083e0:	9300      	str	r3, [sp, #0]
 80083e2:	4613      	mov	r3, r2
 80083e4:	4a91      	ldr	r2, [pc, #580]	@ (800862c <SVCCTL_App_Notification+0x2b4>)
 80083e6:	2102      	movs	r1, #2
 80083e8:	2000      	movs	r0, #0
 80083ea:	f001 ffb7 	bl	800a35c <Log_Module_Print>
      gap_cmd_resp_release();
 80083ee:	f000 fdb0 	bl	8008f52 <gap_cmd_resp_release>
      connectFlag = false;
 80083f2:	4b8f      	ldr	r3, [pc, #572]	@ (8008630 <SVCCTL_App_Notification+0x2b8>)
 80083f4:	2200      	movs	r2, #0
 80083f6:	701a      	strb	r2, [r3, #0]
      BLUZHandleNotification.EvtOpcode = BLUZ_DISCON_HANDLE_EVT;
 80083f8:	4b8e      	ldr	r3, [pc, #568]	@ (8008634 <SVCCTL_App_Notification+0x2bc>)
 80083fa:	2201      	movs	r2, #1
 80083fc:	701a      	strb	r2, [r3, #0]
      BLUZHandleNotification.ConnectionHandle = p_disconnection_complete_event->Connection_Handle;
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8008404:	b29a      	uxth	r2, r3
 8008406:	4b8b      	ldr	r3, [pc, #556]	@ (8008634 <SVCCTL_App_Notification+0x2bc>)
 8008408:	805a      	strh	r2, [r3, #2]
      BLUZ_APP_EvtRx(&BLUZHandleNotification);
 800840a:	488a      	ldr	r0, [pc, #552]	@ (8008634 <SVCCTL_App_Notification+0x2bc>)
 800840c:	f001 f9d2 	bl	80097b4 <BLUZ_APP_EvtRx>
      status = aci_gap_set_discoverable(ADV_TYPE,
 8008410:	2300      	movs	r3, #0
 8008412:	9306      	str	r3, [sp, #24]
 8008414:	2300      	movs	r3, #0
 8008416:	9305      	str	r3, [sp, #20]
 8008418:	2300      	movs	r3, #0
 800841a:	9304      	str	r3, [sp, #16]
 800841c:	2300      	movs	r3, #0
 800841e:	9303      	str	r3, [sp, #12]
 8008420:	2300      	movs	r3, #0
 8008422:	9302      	str	r3, [sp, #8]
 8008424:	2300      	movs	r3, #0
 8008426:	9301      	str	r3, [sp, #4]
 8008428:	2300      	movs	r3, #0
 800842a:	9300      	str	r3, [sp, #0]
 800842c:	2300      	movs	r3, #0
 800842e:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8008432:	f44f 71a0 	mov.w	r1, #320	@ 0x140
 8008436:	2000      	movs	r0, #0
 8008438:	f020 f8c8 	bl	80285cc <aci_gap_set_discoverable>
 800843c:	4603      	mov	r3, r0
 800843e:	72fb      	strb	r3, [r7, #11]
      status = aci_gap_delete_ad_type(AD_TYPE_TX_POWER_LEVEL);
 8008440:	200a      	movs	r0, #10
 8008442:	f020 f97d 	bl	8028740 <aci_gap_delete_ad_type>
 8008446:	4603      	mov	r3, r0
 8008448:	72fb      	strb	r3, [r7, #11]
      status = aci_gap_update_adv_data(sizeof(a_AdvData), (uint8_t *) a_AdvData);
 800844a:	497b      	ldr	r1, [pc, #492]	@ (8008638 <SVCCTL_App_Notification+0x2c0>)
 800844c:	200b      	movs	r0, #11
 800844e:	f020 f8ef 	bl	8028630 <aci_gap_update_adv_data>
 8008452:	4603      	mov	r3, r0
 8008454:	72fb      	strb	r3, [r7, #11]
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 8008456:	e26b      	b.n	8008930 <SVCCTL_App_Notification+0x5b8>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 8008458:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800845a:	3302      	adds	r3, #2
 800845c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      switch (p_meta_evt->subevent)
 800845e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008460:	781b      	ldrb	r3, [r3, #0]
 8008462:	3b01      	subs	r3, #1
 8008464:	2b0b      	cmp	r3, #11
 8008466:	f200 8174 	bhi.w	8008752 <SVCCTL_App_Notification+0x3da>
 800846a:	a201      	add	r2, pc, #4	@ (adr r2, 8008470 <SVCCTL_App_Notification+0xf8>)
 800846c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008470:	08008655 	.word	0x08008655
 8008474:	08008753 	.word	0x08008753
 8008478:	080084a1 	.word	0x080084a1
 800847c:	08008753 	.word	0x08008753
 8008480:	08008753 	.word	0x08008753
 8008484:	08008753 	.word	0x08008753
 8008488:	08008753 	.word	0x08008753
 800848c:	08008753 	.word	0x08008753
 8008490:	08008753 	.word	0x08008753
 8008494:	0800852b 	.word	0x0800852b
 8008498:	08008753 	.word	0x08008753
 800849c:	0800851f 	.word	0x0800851f
          uint32_t conn_interval_us = 0;
 80084a0:	2300      	movs	r3, #0
 80084a2:	61fb      	str	r3, [r7, #28]
          p_conn_update_complete = (hci_le_connection_update_complete_event_rp0 *) p_meta_evt->data;
 80084a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084a6:	3301      	adds	r3, #1
 80084a8:	61bb      	str	r3, [r7, #24]
          conn_interval_us = p_conn_update_complete->Conn_Interval * 1250;
 80084aa:	69bb      	ldr	r3, [r7, #24]
 80084ac:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 80084b0:	b29b      	uxth	r3, r3
 80084b2:	461a      	mov	r2, r3
 80084b4:	f240 43e2 	movw	r3, #1250	@ 0x4e2
 80084b8:	fb02 f303 	mul.w	r3, r2, r3
 80084bc:	61fb      	str	r3, [r7, #28]
          LOG_INFO_APP(">>== HCI_LE_CONNECTION_UPDATE_COMPLETE_SUBEVT_CODE\n");
 80084be:	4a5f      	ldr	r2, [pc, #380]	@ (800863c <SVCCTL_App_Notification+0x2c4>)
 80084c0:	2102      	movs	r1, #2
 80084c2:	2000      	movs	r0, #0
 80084c4:	f001 ff4a 	bl	800a35c <Log_Module_Print>
          LOG_INFO_APP("     - Connection Interval:   %d.%02d ms\n     - Connection latency:    %d\n     - Supervision Timeout:   %d ms\n",
 80084c8:	69fb      	ldr	r3, [r7, #28]
 80084ca:	4a5d      	ldr	r2, [pc, #372]	@ (8008640 <SVCCTL_App_Notification+0x2c8>)
 80084cc:	fba2 2303 	umull	r2, r3, r2, r3
 80084d0:	0999      	lsrs	r1, r3, #6
 80084d2:	69fa      	ldr	r2, [r7, #28]
 80084d4:	4b5a      	ldr	r3, [pc, #360]	@ (8008640 <SVCCTL_App_Notification+0x2c8>)
 80084d6:	fba3 0302 	umull	r0, r3, r3, r2
 80084da:	099b      	lsrs	r3, r3, #6
 80084dc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80084e0:	fb00 f303 	mul.w	r3, r0, r3
 80084e4:	1ad3      	subs	r3, r2, r3
 80084e6:	4a57      	ldr	r2, [pc, #348]	@ (8008644 <SVCCTL_App_Notification+0x2cc>)
 80084e8:	fba2 2303 	umull	r2, r3, r2, r3
 80084ec:	08da      	lsrs	r2, r3, #3
 80084ee:	69bb      	ldr	r3, [r7, #24]
 80084f0:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 80084f4:	b29b      	uxth	r3, r3
 80084f6:	461c      	mov	r4, r3
 80084f8:	69bb      	ldr	r3, [r7, #24]
 80084fa:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 80084fe:	b29b      	uxth	r3, r3
 8008500:	4618      	mov	r0, r3
 8008502:	4603      	mov	r3, r0
 8008504:	009b      	lsls	r3, r3, #2
 8008506:	4403      	add	r3, r0
 8008508:	005b      	lsls	r3, r3, #1
 800850a:	9302      	str	r3, [sp, #8]
 800850c:	9401      	str	r4, [sp, #4]
 800850e:	9200      	str	r2, [sp, #0]
 8008510:	460b      	mov	r3, r1
 8008512:	4a4d      	ldr	r2, [pc, #308]	@ (8008648 <SVCCTL_App_Notification+0x2d0>)
 8008514:	2102      	movs	r1, #2
 8008516:	2000      	movs	r0, #0
 8008518:	f001 ff20 	bl	800a35c <Log_Module_Print>
          break;
 800851c:	e11a      	b.n	8008754 <SVCCTL_App_Notification+0x3dc>
          p_le_phy_update_complete = (hci_le_phy_update_complete_event_rp0*)p_meta_evt->data;
 800851e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008520:	3301      	adds	r3, #1
 8008522:	62bb      	str	r3, [r7, #40]	@ 0x28
          gap_cmd_resp_release();
 8008524:	f000 fd15 	bl	8008f52 <gap_cmd_resp_release>
          break;
 8008528:	e114      	b.n	8008754 <SVCCTL_App_Notification+0x3dc>
          uint32_t conn_interval_us = 0;
 800852a:	2300      	movs	r3, #0
 800852c:	627b      	str	r3, [r7, #36]	@ 0x24
          p_enhanced_conn_complete = (hci_le_enhanced_connection_complete_event_rp0 *) p_meta_evt->data;
 800852e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008530:	3301      	adds	r3, #1
 8008532:	623b      	str	r3, [r7, #32]
          conn_interval_us = p_enhanced_conn_complete->Conn_Interval * 1250;
 8008534:	6a3b      	ldr	r3, [r7, #32]
 8008536:	f8b3 3017 	ldrh.w	r3, [r3, #23]
 800853a:	b29b      	uxth	r3, r3
 800853c:	461a      	mov	r2, r3
 800853e:	f240 43e2 	movw	r3, #1250	@ 0x4e2
 8008542:	fb02 f303 	mul.w	r3, r2, r3
 8008546:	627b      	str	r3, [r7, #36]	@ 0x24
          LOG_INFO_APP(">>== HCI_LE_ENHANCED_CONNECTION_COMPLETE_SUBEVT_CODE - Connection handle: 0x%04X\n", p_enhanced_conn_complete->Connection_Handle);
 8008548:	6a3b      	ldr	r3, [r7, #32]
 800854a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800854e:	b29b      	uxth	r3, r3
 8008550:	4a3e      	ldr	r2, [pc, #248]	@ (800864c <SVCCTL_App_Notification+0x2d4>)
 8008552:	2102      	movs	r1, #2
 8008554:	2000      	movs	r0, #0
 8008556:	f001 ff01 	bl	800a35c <Log_Module_Print>
          LOG_INFO_APP("     - Connection established with @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 800855a:	6a3b      	ldr	r3, [r7, #32]
 800855c:	7a9b      	ldrb	r3, [r3, #10]
 800855e:	461d      	mov	r5, r3
 8008560:	6a3b      	ldr	r3, [r7, #32]
 8008562:	7a5b      	ldrb	r3, [r3, #9]
 8008564:	461a      	mov	r2, r3
 8008566:	6a3b      	ldr	r3, [r7, #32]
 8008568:	7a1b      	ldrb	r3, [r3, #8]
 800856a:	4619      	mov	r1, r3
 800856c:	6a3b      	ldr	r3, [r7, #32]
 800856e:	79db      	ldrb	r3, [r3, #7]
 8008570:	4618      	mov	r0, r3
 8008572:	6a3b      	ldr	r3, [r7, #32]
 8008574:	799b      	ldrb	r3, [r3, #6]
 8008576:	461c      	mov	r4, r3
 8008578:	6a3b      	ldr	r3, [r7, #32]
 800857a:	795b      	ldrb	r3, [r3, #5]
 800857c:	9304      	str	r3, [sp, #16]
 800857e:	9403      	str	r4, [sp, #12]
 8008580:	9002      	str	r0, [sp, #8]
 8008582:	9101      	str	r1, [sp, #4]
 8008584:	9200      	str	r2, [sp, #0]
 8008586:	462b      	mov	r3, r5
 8008588:	4a31      	ldr	r2, [pc, #196]	@ (8008650 <SVCCTL_App_Notification+0x2d8>)
 800858a:	2102      	movs	r1, #2
 800858c:	2000      	movs	r0, #0
 800858e:	f001 fee5 	bl	800a35c <Log_Module_Print>
          LOG_INFO_APP("     - Connection Interval:   %d.%02d ms\n     - Connection latency:    %d\n     - Supervision Timeout:   %d ms\n",
 8008592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008594:	4a2a      	ldr	r2, [pc, #168]	@ (8008640 <SVCCTL_App_Notification+0x2c8>)
 8008596:	fba2 2303 	umull	r2, r3, r2, r3
 800859a:	0999      	lsrs	r1, r3, #6
 800859c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800859e:	4b28      	ldr	r3, [pc, #160]	@ (8008640 <SVCCTL_App_Notification+0x2c8>)
 80085a0:	fba3 0302 	umull	r0, r3, r3, r2
 80085a4:	099b      	lsrs	r3, r3, #6
 80085a6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80085aa:	fb00 f303 	mul.w	r3, r0, r3
 80085ae:	1ad3      	subs	r3, r2, r3
 80085b0:	4a24      	ldr	r2, [pc, #144]	@ (8008644 <SVCCTL_App_Notification+0x2cc>)
 80085b2:	fba2 2303 	umull	r2, r3, r2, r3
 80085b6:	08da      	lsrs	r2, r3, #3
 80085b8:	6a3b      	ldr	r3, [r7, #32]
 80085ba:	f8b3 3019 	ldrh.w	r3, [r3, #25]
 80085be:	b29b      	uxth	r3, r3
 80085c0:	461c      	mov	r4, r3
 80085c2:	6a3b      	ldr	r3, [r7, #32]
 80085c4:	f8b3 301b 	ldrh.w	r3, [r3, #27]
 80085c8:	b29b      	uxth	r3, r3
 80085ca:	4618      	mov	r0, r3
 80085cc:	4603      	mov	r3, r0
 80085ce:	009b      	lsls	r3, r3, #2
 80085d0:	4403      	add	r3, r0
 80085d2:	005b      	lsls	r3, r3, #1
 80085d4:	9302      	str	r3, [sp, #8]
 80085d6:	9401      	str	r4, [sp, #4]
 80085d8:	9200      	str	r2, [sp, #0]
 80085da:	460b      	mov	r3, r1
 80085dc:	4a1a      	ldr	r2, [pc, #104]	@ (8008648 <SVCCTL_App_Notification+0x2d0>)
 80085de:	2102      	movs	r1, #2
 80085e0:	2000      	movs	r0, #0
 80085e2:	f001 febb 	bl	800a35c <Log_Module_Print>
          if (bleAppContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 80085e6:	4b0f      	ldr	r3, [pc, #60]	@ (8008624 <SVCCTL_App_Notification+0x2ac>)
 80085e8:	7e1b      	ldrb	r3, [r3, #24]
 80085ea:	2b01      	cmp	r3, #1
 80085ec:	d103      	bne.n	80085f6 <SVCCTL_App_Notification+0x27e>
            bleAppContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 80085ee:	4b0d      	ldr	r3, [pc, #52]	@ (8008624 <SVCCTL_App_Notification+0x2ac>)
 80085f0:	2203      	movs	r2, #3
 80085f2:	761a      	strb	r2, [r3, #24]
 80085f4:	e002      	b.n	80085fc <SVCCTL_App_Notification+0x284>
            bleAppContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 80085f6:	4b0b      	ldr	r3, [pc, #44]	@ (8008624 <SVCCTL_App_Notification+0x2ac>)
 80085f8:	2202      	movs	r2, #2
 80085fa:	761a      	strb	r2, [r3, #24]
          bleAppContext.BleApplicationContext_legacy.connectionHandle = p_enhanced_conn_complete->Connection_Handle;
 80085fc:	6a3b      	ldr	r3, [r7, #32]
 80085fe:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8008602:	b29a      	uxth	r2, r3
 8008604:	4b07      	ldr	r3, [pc, #28]	@ (8008624 <SVCCTL_App_Notification+0x2ac>)
 8008606:	82da      	strh	r2, [r3, #22]
          BLUZHandleNotification.EvtOpcode = BLUZ_CONN_HANDLE_EVT;
 8008608:	4b0a      	ldr	r3, [pc, #40]	@ (8008634 <SVCCTL_App_Notification+0x2bc>)
 800860a:	2200      	movs	r2, #0
 800860c:	701a      	strb	r2, [r3, #0]
          BLUZHandleNotification.ConnectionHandle = p_enhanced_conn_complete->Connection_Handle;
 800860e:	6a3b      	ldr	r3, [r7, #32]
 8008610:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8008614:	b29a      	uxth	r2, r3
 8008616:	4b07      	ldr	r3, [pc, #28]	@ (8008634 <SVCCTL_App_Notification+0x2bc>)
 8008618:	805a      	strh	r2, [r3, #2]
          BLUZ_APP_EvtRx(&BLUZHandleNotification);
 800861a:	4806      	ldr	r0, [pc, #24]	@ (8008634 <SVCCTL_App_Notification+0x2bc>)
 800861c:	f001 f8ca 	bl	80097b4 <BLUZ_APP_EvtRx>
          break; /* HCI_LE_ENHANCED_CONNECTION_COMPLETE_SUBEVT_CODE */
 8008620:	e098      	b.n	8008754 <SVCCTL_App_Notification+0x3dc>
 8008622:	bf00      	nop
 8008624:	200038c8 	.word	0x200038c8
 8008628:	08030a4c 	.word	0x08030a4c
 800862c:	08030a78 	.word	0x08030a78
 8008630:	20001708 	.word	0x20001708
 8008634:	200038e4 	.word	0x200038e4
 8008638:	20000034 	.word	0x20000034
 800863c:	08030ab8 	.word	0x08030ab8
 8008640:	10624dd3 	.word	0x10624dd3
 8008644:	cccccccd 	.word	0xcccccccd
 8008648:	08030aec 	.word	0x08030aec
 800864c:	08030b5c 	.word	0x08030b5c
 8008650:	08030bb0 	.word	0x08030bb0
          uint32_t conn_interval_us = 0;
 8008654:	2300      	movs	r3, #0
 8008656:	617b      	str	r3, [r7, #20]
          p_conn_complete = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 8008658:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800865a:	3301      	adds	r3, #1
 800865c:	613b      	str	r3, [r7, #16]
          conn_interval_us = p_conn_complete->Conn_Interval * 1250;
 800865e:	693b      	ldr	r3, [r7, #16]
 8008660:	f8b3 300b 	ldrh.w	r3, [r3, #11]
 8008664:	b29b      	uxth	r3, r3
 8008666:	461a      	mov	r2, r3
 8008668:	f240 43e2 	movw	r3, #1250	@ 0x4e2
 800866c:	fb02 f303 	mul.w	r3, r2, r3
 8008670:	617b      	str	r3, [r7, #20]
          LOG_INFO_APP(">>== HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE - Connection handle: 0x%04X\n", p_conn_complete->Connection_Handle);
 8008672:	693b      	ldr	r3, [r7, #16]
 8008674:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8008678:	b29b      	uxth	r3, r3
 800867a:	4ab0      	ldr	r2, [pc, #704]	@ (800893c <SVCCTL_App_Notification+0x5c4>)
 800867c:	2102      	movs	r1, #2
 800867e:	2000      	movs	r0, #0
 8008680:	f001 fe6c 	bl	800a35c <Log_Module_Print>
          LOG_INFO_APP("     - Connection established with @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 8008684:	693b      	ldr	r3, [r7, #16]
 8008686:	7a9b      	ldrb	r3, [r3, #10]
 8008688:	461d      	mov	r5, r3
 800868a:	693b      	ldr	r3, [r7, #16]
 800868c:	7a5b      	ldrb	r3, [r3, #9]
 800868e:	461a      	mov	r2, r3
 8008690:	693b      	ldr	r3, [r7, #16]
 8008692:	7a1b      	ldrb	r3, [r3, #8]
 8008694:	4619      	mov	r1, r3
 8008696:	693b      	ldr	r3, [r7, #16]
 8008698:	79db      	ldrb	r3, [r3, #7]
 800869a:	4618      	mov	r0, r3
 800869c:	693b      	ldr	r3, [r7, #16]
 800869e:	799b      	ldrb	r3, [r3, #6]
 80086a0:	461c      	mov	r4, r3
 80086a2:	693b      	ldr	r3, [r7, #16]
 80086a4:	795b      	ldrb	r3, [r3, #5]
 80086a6:	9304      	str	r3, [sp, #16]
 80086a8:	9403      	str	r4, [sp, #12]
 80086aa:	9002      	str	r0, [sp, #8]
 80086ac:	9101      	str	r1, [sp, #4]
 80086ae:	9200      	str	r2, [sp, #0]
 80086b0:	462b      	mov	r3, r5
 80086b2:	4aa3      	ldr	r2, [pc, #652]	@ (8008940 <SVCCTL_App_Notification+0x5c8>)
 80086b4:	2102      	movs	r1, #2
 80086b6:	2000      	movs	r0, #0
 80086b8:	f001 fe50 	bl	800a35c <Log_Module_Print>
          LOG_INFO_APP("     - Connection Interval:   %d.%02d ms\n     - Connection latency:    %d\n     - Supervision Timeout:   %d ms\n",
 80086bc:	697b      	ldr	r3, [r7, #20]
 80086be:	4aa1      	ldr	r2, [pc, #644]	@ (8008944 <SVCCTL_App_Notification+0x5cc>)
 80086c0:	fba2 2303 	umull	r2, r3, r2, r3
 80086c4:	0999      	lsrs	r1, r3, #6
 80086c6:	697a      	ldr	r2, [r7, #20]
 80086c8:	4b9e      	ldr	r3, [pc, #632]	@ (8008944 <SVCCTL_App_Notification+0x5cc>)
 80086ca:	fba3 0302 	umull	r0, r3, r3, r2
 80086ce:	099b      	lsrs	r3, r3, #6
 80086d0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80086d4:	fb00 f303 	mul.w	r3, r0, r3
 80086d8:	1ad3      	subs	r3, r2, r3
 80086da:	4a9b      	ldr	r2, [pc, #620]	@ (8008948 <SVCCTL_App_Notification+0x5d0>)
 80086dc:	fba2 2303 	umull	r2, r3, r2, r3
 80086e0:	08da      	lsrs	r2, r3, #3
 80086e2:	693b      	ldr	r3, [r7, #16]
 80086e4:	f8b3 300d 	ldrh.w	r3, [r3, #13]
 80086e8:	b29b      	uxth	r3, r3
 80086ea:	461c      	mov	r4, r3
 80086ec:	693b      	ldr	r3, [r7, #16]
 80086ee:	f8b3 300f 	ldrh.w	r3, [r3, #15]
 80086f2:	b29b      	uxth	r3, r3
 80086f4:	4618      	mov	r0, r3
 80086f6:	4603      	mov	r3, r0
 80086f8:	009b      	lsls	r3, r3, #2
 80086fa:	4403      	add	r3, r0
 80086fc:	005b      	lsls	r3, r3, #1
 80086fe:	9302      	str	r3, [sp, #8]
 8008700:	9401      	str	r4, [sp, #4]
 8008702:	9200      	str	r2, [sp, #0]
 8008704:	460b      	mov	r3, r1
 8008706:	4a91      	ldr	r2, [pc, #580]	@ (800894c <SVCCTL_App_Notification+0x5d4>)
 8008708:	2102      	movs	r1, #2
 800870a:	2000      	movs	r0, #0
 800870c:	f001 fe26 	bl	800a35c <Log_Module_Print>
          if (bleAppContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 8008710:	4b8f      	ldr	r3, [pc, #572]	@ (8008950 <SVCCTL_App_Notification+0x5d8>)
 8008712:	7e1b      	ldrb	r3, [r3, #24]
 8008714:	2b01      	cmp	r3, #1
 8008716:	d103      	bne.n	8008720 <SVCCTL_App_Notification+0x3a8>
            bleAppContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 8008718:	4b8d      	ldr	r3, [pc, #564]	@ (8008950 <SVCCTL_App_Notification+0x5d8>)
 800871a:	2203      	movs	r2, #3
 800871c:	761a      	strb	r2, [r3, #24]
 800871e:	e002      	b.n	8008726 <SVCCTL_App_Notification+0x3ae>
            bleAppContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 8008720:	4b8b      	ldr	r3, [pc, #556]	@ (8008950 <SVCCTL_App_Notification+0x5d8>)
 8008722:	2202      	movs	r2, #2
 8008724:	761a      	strb	r2, [r3, #24]
          bleAppContext.BleApplicationContext_legacy.connectionHandle = p_conn_complete->Connection_Handle;
 8008726:	693b      	ldr	r3, [r7, #16]
 8008728:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800872c:	b29a      	uxth	r2, r3
 800872e:	4b88      	ldr	r3, [pc, #544]	@ (8008950 <SVCCTL_App_Notification+0x5d8>)
 8008730:	82da      	strh	r2, [r3, #22]
          BLUZHandleNotification.EvtOpcode = BLUZ_CONN_HANDLE_EVT;
 8008732:	4b88      	ldr	r3, [pc, #544]	@ (8008954 <SVCCTL_App_Notification+0x5dc>)
 8008734:	2200      	movs	r2, #0
 8008736:	701a      	strb	r2, [r3, #0]
          BLUZHandleNotification.ConnectionHandle = p_conn_complete->Connection_Handle;
 8008738:	693b      	ldr	r3, [r7, #16]
 800873a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800873e:	b29a      	uxth	r2, r3
 8008740:	4b84      	ldr	r3, [pc, #528]	@ (8008954 <SVCCTL_App_Notification+0x5dc>)
 8008742:	805a      	strh	r2, [r3, #2]
          BLUZ_APP_EvtRx(&BLUZHandleNotification);
 8008744:	4883      	ldr	r0, [pc, #524]	@ (8008954 <SVCCTL_App_Notification+0x5dc>)
 8008746:	f001 f835 	bl	80097b4 <BLUZ_APP_EvtRx>
          connectFlag = true;
 800874a:	4b83      	ldr	r3, [pc, #524]	@ (8008958 <SVCCTL_App_Notification+0x5e0>)
 800874c:	2201      	movs	r2, #1
 800874e:	701a      	strb	r2, [r3, #0]
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 8008750:	e000      	b.n	8008754 <SVCCTL_App_Notification+0x3dc>
          break;
 8008752:	bf00      	nop
    break; /* HCI_LE_META_EVT_CODE */
 8008754:	e0ec      	b.n	8008930 <SVCCTL_App_Notification+0x5b8>
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 8008756:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008758:	3302      	adds	r3, #2
 800875a:	647b      	str	r3, [r7, #68]	@ 0x44
      switch (p_blecore_evt->ecode)
 800875c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800875e:	881b      	ldrh	r3, [r3, #0]
 8008760:	b29b      	uxth	r3, r3
 8008762:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008766:	d02f      	beq.n	80087c8 <SVCCTL_App_Notification+0x450>
 8008768:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800876c:	f300 80db 	bgt.w	8008926 <SVCCTL_App_Notification+0x5ae>
 8008770:	2b04      	cmp	r3, #4
 8008772:	f000 80da 	beq.w	800892a <SVCCTL_App_Notification+0x5b2>
 8008776:	2b04      	cmp	r3, #4
 8008778:	f2c0 80d5 	blt.w	8008926 <SVCCTL_App_Notification+0x5ae>
 800877c:	f240 420a 	movw	r2, #1034	@ 0x40a
 8008780:	4293      	cmp	r3, r2
 8008782:	f300 80d0 	bgt.w	8008926 <SVCCTL_App_Notification+0x5ae>
 8008786:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800878a:	f340 80cc 	ble.w	8008926 <SVCCTL_App_Notification+0x5ae>
 800878e:	f2a3 4301 	subw	r3, r3, #1025	@ 0x401
 8008792:	2b09      	cmp	r3, #9
 8008794:	f200 80c7 	bhi.w	8008926 <SVCCTL_App_Notification+0x5ae>
 8008798:	a201      	add	r2, pc, #4	@ (adr r2, 80087a0 <SVCCTL_App_Notification+0x428>)
 800879a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800879e:	bf00      	nop
 80087a0:	080088a1 	.word	0x080088a1
 80087a4:	080087ef 	.word	0x080087ef
 80087a8:	08008927 	.word	0x08008927
 80087ac:	08008927 	.word	0x08008927
 80087b0:	080088e9 	.word	0x080088e9
 80087b4:	08008927 	.word	0x08008927
 80087b8:	080087d1 	.word	0x080087d1
 80087bc:	08008927 	.word	0x08008927
 80087c0:	08008833 	.word	0x08008833
 80087c4:	080087e3 	.word	0x080087e3
          p_l2cap_conn_update_resp = (aci_l2cap_connection_update_resp_event_rp0 *) p_blecore_evt->data;
 80087c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80087ca:	3302      	adds	r3, #2
 80087cc:	643b      	str	r3, [r7, #64]	@ 0x40
          break;
 80087ce:	e0ad      	b.n	800892c <SVCCTL_App_Notification+0x5b4>
          p_gap_proc_complete = (aci_gap_proc_complete_event_rp0*) p_blecore_evt->data;
 80087d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80087d2:	3302      	adds	r3, #2
 80087d4:	63bb      	str	r3, [r7, #56]	@ 0x38
          LOG_INFO_APP(">>== ACI_GAP_PROC_COMPLETE_VSEVT_CODE\n");
 80087d6:	4a61      	ldr	r2, [pc, #388]	@ (800895c <SVCCTL_App_Notification+0x5e4>)
 80087d8:	2102      	movs	r1, #2
 80087da:	2000      	movs	r0, #0
 80087dc:	f001 fdbe 	bl	800a35c <Log_Module_Print>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 80087e0:	e0a4      	b.n	800892c <SVCCTL_App_Notification+0x5b4>
          LOG_INFO_APP(">>== ACI_GAP_KEYPRESS_NOTIFICATION_VSEVT_CODE\n");
 80087e2:	4a5f      	ldr	r2, [pc, #380]	@ (8008960 <SVCCTL_App_Notification+0x5e8>)
 80087e4:	2102      	movs	r1, #2
 80087e6:	2000      	movs	r0, #0
 80087e8:	f001 fdb8 	bl	800a35c <Log_Module_Print>
          break;
 80087ec:	e09e      	b.n	800892c <SVCCTL_App_Notification+0x5b4>
          LOG_INFO_APP(">>== ACI_GAP_PASS_KEY_REQ_VSEVT_CODE\n");
 80087ee:	4a5d      	ldr	r2, [pc, #372]	@ (8008964 <SVCCTL_App_Notification+0x5ec>)
 80087f0:	2102      	movs	r1, #2
 80087f2:	2000      	movs	r0, #0
 80087f4:	f001 fdb2 	bl	800a35c <Log_Module_Print>
          pin = CFG_FIXED_PIN;
 80087f8:	4b5b      	ldr	r3, [pc, #364]	@ (8008968 <SVCCTL_App_Notification+0x5f0>)
 80087fa:	637b      	str	r3, [r7, #52]	@ 0x34
          ret = aci_gap_pass_key_resp(bleAppContext.BleApplicationContext_legacy.connectionHandle, pin);
 80087fc:	4b54      	ldr	r3, [pc, #336]	@ (8008950 <SVCCTL_App_Notification+0x5d8>)
 80087fe:	8adb      	ldrh	r3, [r3, #22]
 8008800:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8008802:	4618      	mov	r0, r3
 8008804:	f024 fd22 	bl	802d24c <aci_gap_pass_key_resp>
 8008808:	4603      	mov	r3, r0
 800880a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
          if (ret != BLE_STATUS_SUCCESS)
 800880e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8008812:	2b00      	cmp	r3, #0
 8008814:	d007      	beq.n	8008826 <SVCCTL_App_Notification+0x4ae>
            LOG_INFO_APP("==>> aci_gap_pass_key_resp : Fail, reason: 0x%02X\n", ret);
 8008816:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800881a:	4a54      	ldr	r2, [pc, #336]	@ (800896c <SVCCTL_App_Notification+0x5f4>)
 800881c:	2102      	movs	r1, #2
 800881e:	2000      	movs	r0, #0
 8008820:	f001 fd9c 	bl	800a35c <Log_Module_Print>
          break;
 8008824:	e082      	b.n	800892c <SVCCTL_App_Notification+0x5b4>
            LOG_INFO_APP("==>> aci_gap_pass_key_resp : Success\n");
 8008826:	4a52      	ldr	r2, [pc, #328]	@ (8008970 <SVCCTL_App_Notification+0x5f8>)
 8008828:	2102      	movs	r1, #2
 800882a:	2000      	movs	r0, #0
 800882c:	f001 fd96 	bl	800a35c <Log_Module_Print>
          break;
 8008830:	e07c      	b.n	800892c <SVCCTL_App_Notification+0x5b4>
          LOG_INFO_APP(">>== ACI_GAP_NUMERIC_COMPARISON_VALUE_VSEVT_CODE\n");
 8008832:	4a50      	ldr	r2, [pc, #320]	@ (8008974 <SVCCTL_App_Notification+0x5fc>)
 8008834:	2102      	movs	r1, #2
 8008836:	2000      	movs	r0, #0
 8008838:	f001 fd90 	bl	800a35c <Log_Module_Print>
          LOG_INFO_APP("     - numeric_value = %ld\n",
 800883c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800883e:	3302      	adds	r3, #2
 8008840:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8008844:	4a4c      	ldr	r2, [pc, #304]	@ (8008978 <SVCCTL_App_Notification+0x600>)
 8008846:	2102      	movs	r1, #2
 8008848:	2000      	movs	r0, #0
 800884a:	f001 fd87 	bl	800a35c <Log_Module_Print>
          LOG_INFO_APP("     - Hex_value = %lx\n",
 800884e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008850:	3302      	adds	r3, #2
 8008852:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8008856:	4a49      	ldr	r2, [pc, #292]	@ (800897c <SVCCTL_App_Notification+0x604>)
 8008858:	2102      	movs	r1, #2
 800885a:	2000      	movs	r0, #0
 800885c:	f001 fd7e 	bl	800a35c <Log_Module_Print>
          confirm_value = 1;
 8008860:	2301      	movs	r3, #1
 8008862:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
          ret = aci_gap_numeric_comparison_value_confirm_yesno(bleAppContext.BleApplicationContext_legacy.connectionHandle, confirm_value);
 8008866:	4b3a      	ldr	r3, [pc, #232]	@ (8008950 <SVCCTL_App_Notification+0x5d8>)
 8008868:	8adb      	ldrh	r3, [r3, #22]
 800886a:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800886e:	4611      	mov	r1, r2
 8008870:	4618      	mov	r0, r3
 8008872:	f026 fbf9 	bl	802f068 <aci_gap_numeric_comparison_value_confirm_yesno>
 8008876:	4603      	mov	r3, r0
 8008878:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
          if (ret != BLE_STATUS_SUCCESS)
 800887c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8008880:	2b00      	cmp	r3, #0
 8008882:	d007      	beq.n	8008894 <SVCCTL_App_Notification+0x51c>
            LOG_INFO_APP("==>> aci_gap_numeric_comparison_value_confirm_yesno : Fail, reason: 0x%02X\n", ret);
 8008884:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8008888:	4a3d      	ldr	r2, [pc, #244]	@ (8008980 <SVCCTL_App_Notification+0x608>)
 800888a:	2102      	movs	r1, #2
 800888c:	2000      	movs	r0, #0
 800888e:	f001 fd65 	bl	800a35c <Log_Module_Print>
          break;
 8008892:	e04b      	b.n	800892c <SVCCTL_App_Notification+0x5b4>
            LOG_INFO_APP("==>> aci_gap_numeric_comparison_value_confirm_yesno : Success\n");
 8008894:	4a3b      	ldr	r2, [pc, #236]	@ (8008984 <SVCCTL_App_Notification+0x60c>)
 8008896:	2102      	movs	r1, #2
 8008898:	2000      	movs	r0, #0
 800889a:	f001 fd5f 	bl	800a35c <Log_Module_Print>
          break;
 800889e:	e045      	b.n	800892c <SVCCTL_App_Notification+0x5b4>
          LOG_INFO_APP(">>== ACI_GAP_PAIRING_COMPLETE_VSEVT_CODE\n");
 80088a0:	4a39      	ldr	r2, [pc, #228]	@ (8008988 <SVCCTL_App_Notification+0x610>)
 80088a2:	2102      	movs	r1, #2
 80088a4:	2000      	movs	r0, #0
 80088a6:	f001 fd59 	bl	800a35c <Log_Module_Print>
          p_pairing_complete = (aci_gap_pairing_complete_event_rp0*)p_blecore_evt->data;
 80088aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80088ac:	3302      	adds	r3, #2
 80088ae:	633b      	str	r3, [r7, #48]	@ 0x30
          if (p_pairing_complete->Status != 0)
 80088b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088b2:	789b      	ldrb	r3, [r3, #2]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d00c      	beq.n	80088d2 <SVCCTL_App_Notification+0x55a>
            LOG_INFO_APP("     - Pairing KO\n     - Status: 0x%02X\n     - Reason: 0x%02X\n",
 80088b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088ba:	789b      	ldrb	r3, [r3, #2]
 80088bc:	461a      	mov	r2, r3
 80088be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088c0:	78db      	ldrb	r3, [r3, #3]
 80088c2:	9300      	str	r3, [sp, #0]
 80088c4:	4613      	mov	r3, r2
 80088c6:	4a31      	ldr	r2, [pc, #196]	@ (800898c <SVCCTL_App_Notification+0x614>)
 80088c8:	2102      	movs	r1, #2
 80088ca:	2000      	movs	r0, #0
 80088cc:	f001 fd46 	bl	800a35c <Log_Module_Print>
 80088d0:	e004      	b.n	80088dc <SVCCTL_App_Notification+0x564>
            LOG_INFO_APP("     - Pairing Success\n");
 80088d2:	4a2f      	ldr	r2, [pc, #188]	@ (8008990 <SVCCTL_App_Notification+0x618>)
 80088d4:	2102      	movs	r1, #2
 80088d6:	2000      	movs	r0, #0
 80088d8:	f001 fd40 	bl	800a35c <Log_Module_Print>
          LOG_INFO_APP("\n");
 80088dc:	4a2d      	ldr	r2, [pc, #180]	@ (8008994 <SVCCTL_App_Notification+0x61c>)
 80088de:	2102      	movs	r1, #2
 80088e0:	2000      	movs	r0, #0
 80088e2:	f001 fd3b 	bl	800a35c <Log_Module_Print>
          break;
 80088e6:	e021      	b.n	800892c <SVCCTL_App_Notification+0x5b4>
          LOG_INFO_APP(">>== ACI_GAP_BOND_LOST_EVENT\n");
 80088e8:	4a2b      	ldr	r2, [pc, #172]	@ (8008998 <SVCCTL_App_Notification+0x620>)
 80088ea:	2102      	movs	r1, #2
 80088ec:	2000      	movs	r0, #0
 80088ee:	f001 fd35 	bl	800a35c <Log_Module_Print>
          ret = aci_gap_allow_rebond(bleAppContext.BleApplicationContext_legacy.connectionHandle);
 80088f2:	4b17      	ldr	r3, [pc, #92]	@ (8008950 <SVCCTL_App_Notification+0x5d8>)
 80088f4:	8adb      	ldrh	r3, [r3, #22]
 80088f6:	4618      	mov	r0, r3
 80088f8:	f024 fc94 	bl	802d224 <aci_gap_allow_rebond>
 80088fc:	4603      	mov	r3, r0
 80088fe:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
          if (ret != BLE_STATUS_SUCCESS)
 8008902:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8008906:	2b00      	cmp	r3, #0
 8008908:	d007      	beq.n	800891a <SVCCTL_App_Notification+0x5a2>
            LOG_INFO_APP("==>> aci_gap_allow_rebond : Fail, reason: 0x%02X\n", ret);
 800890a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800890e:	4a23      	ldr	r2, [pc, #140]	@ (800899c <SVCCTL_App_Notification+0x624>)
 8008910:	2102      	movs	r1, #2
 8008912:	2000      	movs	r0, #0
 8008914:	f001 fd22 	bl	800a35c <Log_Module_Print>
          break;
 8008918:	e008      	b.n	800892c <SVCCTL_App_Notification+0x5b4>
            LOG_INFO_APP("==>> aci_gap_allow_rebond : Success\n");
 800891a:	4a21      	ldr	r2, [pc, #132]	@ (80089a0 <SVCCTL_App_Notification+0x628>)
 800891c:	2102      	movs	r1, #2
 800891e:	2000      	movs	r0, #0
 8008920:	f001 fd1c 	bl	800a35c <Log_Module_Print>
          break;
 8008924:	e002      	b.n	800892c <SVCCTL_App_Notification+0x5b4>
          break;
 8008926:	bf00      	nop
 8008928:	e002      	b.n	8008930 <SVCCTL_App_Notification+0x5b8>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 800892a:	bf00      	nop
    break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800892c:	e000      	b.n	8008930 <SVCCTL_App_Notification+0x5b8>
      break;
 800892e:	bf00      	nop
  }
  /* USER CODE BEGIN SVCCTL_App_Notification_1 */

  /* USER CODE END SVCCTL_App_Notification_1 */

  return (SVCCTL_UserEvtFlowEnable);
 8008930:	2301      	movs	r3, #1
}
 8008932:	4618      	mov	r0, r3
 8008934:	3750      	adds	r7, #80	@ 0x50
 8008936:	46bd      	mov	sp, r7
 8008938:	bdb0      	pop	{r4, r5, r7, pc}
 800893a:	bf00      	nop
 800893c:	08030bf4 	.word	0x08030bf4
 8008940:	08030bb0 	.word	0x08030bb0
 8008944:	10624dd3 	.word	0x10624dd3
 8008948:	cccccccd 	.word	0xcccccccd
 800894c:	08030aec 	.word	0x08030aec
 8008950:	200038c8 	.word	0x200038c8
 8008954:	200038e4 	.word	0x200038e4
 8008958:	20001708 	.word	0x20001708
 800895c:	08030c40 	.word	0x08030c40
 8008960:	08030c68 	.word	0x08030c68
 8008964:	08030c98 	.word	0x08030c98
 8008968:	0001b207 	.word	0x0001b207
 800896c:	08030cc0 	.word	0x08030cc0
 8008970:	08030cf4 	.word	0x08030cf4
 8008974:	08030d1c 	.word	0x08030d1c
 8008978:	08030d50 	.word	0x08030d50
 800897c:	08030d6c 	.word	0x08030d6c
 8008980:	08030d84 	.word	0x08030d84
 8008984:	08030dd0 	.word	0x08030dd0
 8008988:	08030e10 	.word	0x08030e10
 800898c:	08030e3c 	.word	0x08030e3c
 8008990:	08030e7c 	.word	0x08030e7c
 8008994:	08030e38 	.word	0x08030e38
 8008998:	08030e94 	.word	0x08030e94
 800899c:	08030eb4 	.word	0x08030eb4
 80089a0:	08030ee8 	.word	0x08030ee8

080089a4 <HOST_BLE_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static uint8_t HOST_BLE_Init(void)
{
 80089a4:	b580      	push	{r7, lr}
 80089a6:	b082      	sub	sp, #8
 80089a8:	af00      	add	r7, sp, #0
  tBleStatus return_status;

  pInitParams.numAttrRecord           = CFG_BLE_NUM_GATT_ATTRIBUTES;
 80089aa:	4b1e      	ldr	r3, [pc, #120]	@ (8008a24 <HOST_BLE_Init+0x80>)
 80089ac:	2244      	movs	r2, #68	@ 0x44
 80089ae:	821a      	strh	r2, [r3, #16]
  pInitParams.numAttrServ             = CFG_BLE_NUM_GATT_SERVICES;
 80089b0:	4b1c      	ldr	r3, [pc, #112]	@ (8008a24 <HOST_BLE_Init+0x80>)
 80089b2:	2208      	movs	r2, #8
 80089b4:	825a      	strh	r2, [r3, #18]
  pInitParams.attrValueArrSize        = CFG_BLE_ATT_VALUE_ARRAY_SIZE;
 80089b6:	4b1b      	ldr	r3, [pc, #108]	@ (8008a24 <HOST_BLE_Init+0x80>)
 80089b8:	f44f 62a8 	mov.w	r2, #1344	@ 0x540
 80089bc:	829a      	strh	r2, [r3, #20]
  pInitParams.prWriteListSize         = CFG_BLE_ATTR_PREPARE_WRITE_VALUE_SIZE;
 80089be:	4b19      	ldr	r3, [pc, #100]	@ (8008a24 <HOST_BLE_Init+0x80>)
 80089c0:	221e      	movs	r2, #30
 80089c2:	75da      	strb	r2, [r3, #23]
  pInitParams.attMtu                  = CFG_BLE_ATT_MTU_MAX;
 80089c4:	4b17      	ldr	r3, [pc, #92]	@ (8008a24 <HOST_BLE_Init+0x80>)
 80089c6:	22fb      	movs	r2, #251	@ 0xfb
 80089c8:	835a      	strh	r2, [r3, #26]
  pInitParams.max_coc_nbr             = CFG_BLE_COC_NBR_MAX;
 80089ca:	4b16      	ldr	r3, [pc, #88]	@ (8008a24 <HOST_BLE_Init+0x80>)
 80089cc:	2240      	movs	r2, #64	@ 0x40
 80089ce:	779a      	strb	r2, [r3, #30]
  pInitParams.max_coc_mps             = CFG_BLE_COC_MPS_MAX;
 80089d0:	4b14      	ldr	r3, [pc, #80]	@ (8008a24 <HOST_BLE_Init+0x80>)
 80089d2:	22f8      	movs	r2, #248	@ 0xf8
 80089d4:	839a      	strh	r2, [r3, #28]
  pInitParams.max_coc_initiator_nbr   = CFG_BLE_COC_INITIATOR_NBR_MAX;
 80089d6:	4b13      	ldr	r3, [pc, #76]	@ (8008a24 <HOST_BLE_Init+0x80>)
 80089d8:	2220      	movs	r2, #32
 80089da:	77da      	strb	r2, [r3, #31]
  pInitParams.numOfLinks              = CFG_BLE_NUM_LINK;
 80089dc:	4b11      	ldr	r3, [pc, #68]	@ (8008a24 <HOST_BLE_Init+0x80>)
 80089de:	2202      	movs	r2, #2
 80089e0:	759a      	strb	r2, [r3, #22]
  pInitParams.mblockCount             = CFG_BLE_MBLOCK_COUNT;
 80089e2:	4b10      	ldr	r3, [pc, #64]	@ (8008a24 <HOST_BLE_Init+0x80>)
 80089e4:	226f      	movs	r2, #111	@ 0x6f
 80089e6:	831a      	strh	r2, [r3, #24]
  pInitParams.bleStartRamAddress      = (uint8_t*)buffer;
 80089e8:	4b0e      	ldr	r3, [pc, #56]	@ (8008a24 <HOST_BLE_Init+0x80>)
 80089ea:	4a0f      	ldr	r2, [pc, #60]	@ (8008a28 <HOST_BLE_Init+0x84>)
 80089ec:	601a      	str	r2, [r3, #0]
  pInitParams.total_buffer_size       = BLE_DYN_ALLOC_SIZE;
 80089ee:	4b0d      	ldr	r3, [pc, #52]	@ (8008a24 <HOST_BLE_Init+0x80>)
 80089f0:	f241 5274 	movw	r2, #5492	@ 0x1574
 80089f4:	605a      	str	r2, [r3, #4]
  pInitParams.bleStartRamAddress_GATT = (uint8_t*)gatt_buffer;
 80089f6:	4b0b      	ldr	r3, [pc, #44]	@ (8008a24 <HOST_BLE_Init+0x80>)
 80089f8:	4a0c      	ldr	r2, [pc, #48]	@ (8008a2c <HOST_BLE_Init+0x88>)
 80089fa:	609a      	str	r2, [r3, #8]
  pInitParams.total_buffer_size_GATT  = BLE_GATT_BUF_SIZE;
 80089fc:	4b09      	ldr	r3, [pc, #36]	@ (8008a24 <HOST_BLE_Init+0x80>)
 80089fe:	f44f 528b 	mov.w	r2, #4448	@ 0x1160
 8008a02:	60da      	str	r2, [r3, #12]
  pInitParams.options                 = CFG_BLE_OPTIONS;
 8008a04:	4b07      	ldr	r3, [pc, #28]	@ (8008a24 <HOST_BLE_Init+0x80>)
 8008a06:	2280      	movs	r2, #128	@ 0x80
 8008a08:	841a      	strh	r2, [r3, #32]
  pInitParams.debug                   = 0U;
 8008a0a:	4b06      	ldr	r3, [pc, #24]	@ (8008a24 <HOST_BLE_Init+0x80>)
 8008a0c:	2200      	movs	r2, #0
 8008a0e:	625a      	str	r2, [r3, #36]	@ 0x24
/* USER CODE BEGIN HOST_BLE_Init_Params */

/* USER CODE END HOST_BLE_Init_Params */
  return_status = BleStack_Init(&pInitParams);
 8008a10:	4804      	ldr	r0, [pc, #16]	@ (8008a24 <HOST_BLE_Init+0x80>)
 8008a12:	f01e fb8b 	bl	802712c <BleStack_Init>
 8008a16:	4603      	mov	r3, r0
 8008a18:	71fb      	strb	r3, [r7, #7]
/* USER CODE BEGIN HOST_BLE_Init */

/* USER CODE END HOST_BLE_Init */
  return ((uint8_t)return_status);
 8008a1a:	79fb      	ldrb	r3, [r7, #7]
}
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	3708      	adds	r7, #8
 8008a20:	46bd      	mov	sp, r7
 8008a22:	bd80      	pop	{r7, pc}
 8008a24:	200067a8 	.word	0x200067a8
 8008a28:	200040d4 	.word	0x200040d4
 8008a2c:	20005648 	.word	0x20005648

08008a30 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 8008a30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008a32:	b08b      	sub	sp, #44	@ 0x2c
 8008a34:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle = 0U, gap_dev_name_char_handle = 0U, gap_appearance_char_handle = 0U;
 8008a36:	2300      	movs	r3, #0
 8008a38:	813b      	strh	r3, [r7, #8]
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	80fb      	strh	r3, [r7, #6]
 8008a3e:	2300      	movs	r3, #0
 8008a40:	80bb      	strh	r3, [r7, #4]
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {CFG_GAP_APPEARANCE};
 8008a42:	2300      	movs	r3, #0
 8008a44:	803b      	strh	r3, [r7, #0]

  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init*/

  LOG_INFO_APP("==>> Start Ble_Hci_Gap_Gatt_Init function\n");
 8008a46:	4aab      	ldr	r2, [pc, #684]	@ (8008cf4 <Ble_Hci_Gap_Gatt_Init+0x2c4>)
 8008a48:	2102      	movs	r1, #2
 8008a4a:	2000      	movs	r0, #0
 8008a4c:	f001 fc86 	bl	800a35c <Log_Module_Print>

  /* Write the BD Address */
  p_bd_addr = BleGetBdAddress();
 8008a50:	f000 f9f0 	bl	8008e34 <BleGetBdAddress>
 8008a54:	60f8      	str	r0, [r7, #12]

  /* USER CODE BEGIN BD_Address_Mngt */

  /* USER CODE END BD_Address_Mngt */

  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,
 8008a56:	68fa      	ldr	r2, [r7, #12]
 8008a58:	2106      	movs	r1, #6
 8008a5a:	2000      	movs	r0, #0
 8008a5c:	f01e ffec 	bl	8027a38 <aci_hal_write_config_data>
 8008a60:	4603      	mov	r3, r0
 8008a62:	72fb      	strb	r3, [r7, #11]
                                  CONFIG_DATA_PUBADDR_LEN,
                                  (uint8_t*) p_bd_addr);
  if (ret != BLE_STATUS_SUCCESS)
 8008a64:	7afb      	ldrb	r3, [r7, #11]
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d006      	beq.n	8008a78 <Ble_Hci_Gap_Gatt_Init+0x48>
  {
    LOG_INFO_APP("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_PUBADDR_OFFSET, result: 0x%02X\n", ret);
 8008a6a:	7afb      	ldrb	r3, [r7, #11]
 8008a6c:	4aa2      	ldr	r2, [pc, #648]	@ (8008cf8 <Ble_Hci_Gap_Gatt_Init+0x2c8>)
 8008a6e:	2102      	movs	r1, #2
 8008a70:	2000      	movs	r0, #0
 8008a72:	f001 fc73 	bl	800a35c <Log_Module_Print>
 8008a76:	e025      	b.n	8008ac4 <Ble_Hci_Gap_Gatt_Init+0x94>
  }
  else
  {
    LOG_INFO_APP("  Success: aci_hal_write_config_data command - CONFIG_DATA_PUBADDR_OFFSET\n");
 8008a78:	4aa0      	ldr	r2, [pc, #640]	@ (8008cfc <Ble_Hci_Gap_Gatt_Init+0x2cc>)
 8008a7a:	2102      	movs	r1, #2
 8008a7c:	2000      	movs	r0, #0
 8008a7e:	f001 fc6d 	bl	800a35c <Log_Module_Print>
    LOG_INFO_APP("  Public Bluetooth Address: %02x:%02x:%02x:%02x:%02x:%02x\n",p_bd_addr[5],p_bd_addr[4],p_bd_addr[3],p_bd_addr[2],p_bd_addr[1],p_bd_addr[0]);
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	3305      	adds	r3, #5
 8008a86:	781b      	ldrb	r3, [r3, #0]
 8008a88:	461d      	mov	r5, r3
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	3304      	adds	r3, #4
 8008a8e:	781b      	ldrb	r3, [r3, #0]
 8008a90:	461a      	mov	r2, r3
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	3303      	adds	r3, #3
 8008a96:	781b      	ldrb	r3, [r3, #0]
 8008a98:	4619      	mov	r1, r3
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	3302      	adds	r3, #2
 8008a9e:	781b      	ldrb	r3, [r3, #0]
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	3301      	adds	r3, #1
 8008aa6:	781b      	ldrb	r3, [r3, #0]
 8008aa8:	461c      	mov	r4, r3
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	781b      	ldrb	r3, [r3, #0]
 8008aae:	9304      	str	r3, [sp, #16]
 8008ab0:	9403      	str	r4, [sp, #12]
 8008ab2:	9002      	str	r0, [sp, #8]
 8008ab4:	9101      	str	r1, [sp, #4]
 8008ab6:	9200      	str	r2, [sp, #0]
 8008ab8:	462b      	mov	r3, r5
 8008aba:	4a91      	ldr	r2, [pc, #580]	@ (8008d00 <Ble_Hci_Gap_Gatt_Init+0x2d0>)
 8008abc:	2102      	movs	r1, #2
 8008abe:	2000      	movs	r0, #0
 8008ac0:	f001 fc4c 	bl	800a35c <Log_Module_Print>
  }

  /* Write Identity root key used to derive IRK and DHK(Legacy) */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 8008ac4:	4a8f      	ldr	r2, [pc, #572]	@ (8008d04 <Ble_Hci_Gap_Gatt_Init+0x2d4>)
 8008ac6:	2110      	movs	r1, #16
 8008ac8:	2018      	movs	r0, #24
 8008aca:	f01e ffb5 	bl	8027a38 <aci_hal_write_config_data>
 8008ace:	4603      	mov	r3, r0
 8008ad0:	72fb      	strb	r3, [r7, #11]
  if (ret != BLE_STATUS_SUCCESS)
 8008ad2:	7afb      	ldrb	r3, [r7, #11]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d006      	beq.n	8008ae6 <Ble_Hci_Gap_Gatt_Init+0xb6>
  {
    LOG_INFO_APP("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_IR_OFFSET, result: 0x%02X\n", ret);
 8008ad8:	7afb      	ldrb	r3, [r7, #11]
 8008ada:	4a8b      	ldr	r2, [pc, #556]	@ (8008d08 <Ble_Hci_Gap_Gatt_Init+0x2d8>)
 8008adc:	2102      	movs	r1, #2
 8008ade:	2000      	movs	r0, #0
 8008ae0:	f001 fc3c 	bl	800a35c <Log_Module_Print>
 8008ae4:	e004      	b.n	8008af0 <Ble_Hci_Gap_Gatt_Init+0xc0>
  }
  else
  {
    LOG_INFO_APP("  Success: aci_hal_write_config_data command - CONFIG_DATA_IR_OFFSET\n");
 8008ae6:	4a89      	ldr	r2, [pc, #548]	@ (8008d0c <Ble_Hci_Gap_Gatt_Init+0x2dc>)
 8008ae8:	2102      	movs	r1, #2
 8008aea:	2000      	movs	r0, #0
 8008aec:	f001 fc36 	bl	800a35c <Log_Module_Print>
  }

  /* Write Encryption root key used to derive LTK and CSRK */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 8008af0:	4a87      	ldr	r2, [pc, #540]	@ (8008d10 <Ble_Hci_Gap_Gatt_Init+0x2e0>)
 8008af2:	2110      	movs	r1, #16
 8008af4:	2008      	movs	r0, #8
 8008af6:	f01e ff9f 	bl	8027a38 <aci_hal_write_config_data>
 8008afa:	4603      	mov	r3, r0
 8008afc:	72fb      	strb	r3, [r7, #11]
  if (ret != BLE_STATUS_SUCCESS)
 8008afe:	7afb      	ldrb	r3, [r7, #11]
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d006      	beq.n	8008b12 <Ble_Hci_Gap_Gatt_Init+0xe2>
  {
    LOG_INFO_APP("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_ER_OFFSET, result: 0x%02X\n", ret);
 8008b04:	7afb      	ldrb	r3, [r7, #11]
 8008b06:	4a83      	ldr	r2, [pc, #524]	@ (8008d14 <Ble_Hci_Gap_Gatt_Init+0x2e4>)
 8008b08:	2102      	movs	r1, #2
 8008b0a:	2000      	movs	r0, #0
 8008b0c:	f001 fc26 	bl	800a35c <Log_Module_Print>
 8008b10:	e004      	b.n	8008b1c <Ble_Hci_Gap_Gatt_Init+0xec>
  }
  else
  {
    LOG_INFO_APP("  Success: aci_hal_write_config_data command - CONFIG_DATA_ER_OFFSET\n");
 8008b12:	4a81      	ldr	r2, [pc, #516]	@ (8008d18 <Ble_Hci_Gap_Gatt_Init+0x2e8>)
 8008b14:	2102      	movs	r1, #2
 8008b16:	2000      	movs	r0, #0
 8008b18:	f001 fc20 	bl	800a35c <Log_Module_Print>
  }

  /* Set Transmission RF Power. */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 8008b1c:	2117      	movs	r1, #23
 8008b1e:	2001      	movs	r0, #1
 8008b20:	f01e ff9a 	bl	8027a58 <aci_hal_set_tx_power_level>
 8008b24:	4603      	mov	r3, r0
 8008b26:	72fb      	strb	r3, [r7, #11]
  if (ret != BLE_STATUS_SUCCESS)
 8008b28:	7afb      	ldrb	r3, [r7, #11]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d006      	beq.n	8008b3c <Ble_Hci_Gap_Gatt_Init+0x10c>
  {
    LOG_INFO_APP("  Fail   : aci_hal_set_tx_power_level command, result: 0x%02X\n", ret);
 8008b2e:	7afb      	ldrb	r3, [r7, #11]
 8008b30:	4a7a      	ldr	r2, [pc, #488]	@ (8008d1c <Ble_Hci_Gap_Gatt_Init+0x2ec>)
 8008b32:	2102      	movs	r1, #2
 8008b34:	2000      	movs	r0, #0
 8008b36:	f001 fc11 	bl	800a35c <Log_Module_Print>
 8008b3a:	e004      	b.n	8008b46 <Ble_Hci_Gap_Gatt_Init+0x116>
  }
  else
  {
    LOG_INFO_APP("  Success: aci_hal_set_tx_power_level command\n");
 8008b3c:	4a78      	ldr	r2, [pc, #480]	@ (8008d20 <Ble_Hci_Gap_Gatt_Init+0x2f0>)
 8008b3e:	2102      	movs	r1, #2
 8008b40:	2000      	movs	r0, #0
 8008b42:	f001 fc0b 	bl	800a35c <Log_Module_Print>
  }

  /* Initialize GATT interface */
  ret = aci_gatt_init();
 8008b46:	f020 fbb9 	bl	80292bc <aci_gatt_init>
 8008b4a:	4603      	mov	r3, r0
 8008b4c:	72fb      	strb	r3, [r7, #11]
  if (ret != BLE_STATUS_SUCCESS)
 8008b4e:	7afb      	ldrb	r3, [r7, #11]
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d006      	beq.n	8008b62 <Ble_Hci_Gap_Gatt_Init+0x132>
  {
    LOG_INFO_APP("  Fail   : aci_gatt_init command, result: 0x%02X\n", ret);
 8008b54:	7afb      	ldrb	r3, [r7, #11]
 8008b56:	4a73      	ldr	r2, [pc, #460]	@ (8008d24 <Ble_Hci_Gap_Gatt_Init+0x2f4>)
 8008b58:	2102      	movs	r1, #2
 8008b5a:	2000      	movs	r0, #0
 8008b5c:	f001 fbfe 	bl	800a35c <Log_Module_Print>
 8008b60:	e004      	b.n	8008b6c <Ble_Hci_Gap_Gatt_Init+0x13c>
  }
  else
  {
    LOG_INFO_APP("  Success: aci_gatt_init command\n");
 8008b62:	4a71      	ldr	r2, [pc, #452]	@ (8008d28 <Ble_Hci_Gap_Gatt_Init+0x2f8>)
 8008b64:	2102      	movs	r1, #2
 8008b66:	2000      	movs	r0, #0
 8008b68:	f001 fbf8 	bl	800a35c <Log_Module_Print>
  }

  /* Initialize GAP interface */
  role = 0U;
 8008b6c:	2300      	movs	r3, #0
 8008b6e:	72bb      	strb	r3, [r7, #10]
  role |= GAP_PERIPHERAL_ROLE;
 8008b70:	7abb      	ldrb	r3, [r7, #10]
 8008b72:	f043 0301 	orr.w	r3, r3, #1
 8008b76:	72bb      	strb	r3, [r7, #10]

  /* USER CODE BEGIN Role_Mngt*/

  /* USER CODE END Role_Mngt */

  if (role > 0)
 8008b78:	7abb      	ldrb	r3, [r7, #10]
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d04f      	beq.n	8008c1e <Ble_Hci_Gap_Gatt_Init+0x1ee>
  {
    ret = aci_gap_init(role,
 8008b7e:	f107 0208 	add.w	r2, r7, #8
 8008b82:	7ab8      	ldrb	r0, [r7, #10]
 8008b84:	1d3b      	adds	r3, r7, #4
 8008b86:	9301      	str	r3, [sp, #4]
 8008b88:	1dbb      	adds	r3, r7, #6
 8008b8a:	9300      	str	r3, [sp, #0]
 8008b8c:	4613      	mov	r3, r2
 8008b8e:	2204      	movs	r2, #4
 8008b90:	2100      	movs	r1, #0
 8008b92:	f01f fb8f 	bl	80282b4 <aci_gap_init>
 8008b96:	4603      	mov	r3, r0
 8008b98:	72fb      	strb	r3, [r7, #11]
                       sizeof(a_GapDeviceName),
                       &gap_service_handle,
                       &gap_dev_name_char_handle,
                       &gap_appearance_char_handle);

    if (ret != BLE_STATUS_SUCCESS)
 8008b9a:	7afb      	ldrb	r3, [r7, #11]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d006      	beq.n	8008bae <Ble_Hci_Gap_Gatt_Init+0x17e>
    {
      LOG_INFO_APP("  Fail   : aci_gap_init command, result: 0x%02X\n", ret);
 8008ba0:	7afb      	ldrb	r3, [r7, #11]
 8008ba2:	4a62      	ldr	r2, [pc, #392]	@ (8008d2c <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 8008ba4:	2102      	movs	r1, #2
 8008ba6:	2000      	movs	r0, #0
 8008ba8:	f001 fbd8 	bl	800a35c <Log_Module_Print>
 8008bac:	e004      	b.n	8008bb8 <Ble_Hci_Gap_Gatt_Init+0x188>
    }
    else
    {
      LOG_INFO_APP("  Success: aci_gap_init command\n");
 8008bae:	4a60      	ldr	r2, [pc, #384]	@ (8008d30 <Ble_Hci_Gap_Gatt_Init+0x300>)
 8008bb0:	2102      	movs	r1, #2
 8008bb2:	2000      	movs	r0, #0
 8008bb4:	f001 fbd2 	bl	800a35c <Log_Module_Print>
    }

    ret = aci_gatt_update_char_value(gap_service_handle,
 8008bb8:	8938      	ldrh	r0, [r7, #8]
 8008bba:	88f9      	ldrh	r1, [r7, #6]
 8008bbc:	4b5d      	ldr	r3, [pc, #372]	@ (8008d34 <Ble_Hci_Gap_Gatt_Init+0x304>)
 8008bbe:	9300      	str	r3, [sp, #0]
 8008bc0:	2304      	movs	r3, #4
 8008bc2:	2200      	movs	r2, #0
 8008bc4:	f020 fe18 	bl	80297f8 <aci_gatt_update_char_value>
 8008bc8:	4603      	mov	r3, r0
 8008bca:	72fb      	strb	r3, [r7, #11]
                                     gap_dev_name_char_handle,
                                     0,
                                     sizeof(a_GapDeviceName),
                                     (uint8_t *) a_GapDeviceName);
    if (ret != BLE_STATUS_SUCCESS)
 8008bcc:	7afb      	ldrb	r3, [r7, #11]
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d006      	beq.n	8008be0 <Ble_Hci_Gap_Gatt_Init+0x1b0>
    {
      LOG_INFO_APP("  Fail   : aci_gatt_update_char_value - Device Name, result: 0x%02X\n", ret);
 8008bd2:	7afb      	ldrb	r3, [r7, #11]
 8008bd4:	4a58      	ldr	r2, [pc, #352]	@ (8008d38 <Ble_Hci_Gap_Gatt_Init+0x308>)
 8008bd6:	2102      	movs	r1, #2
 8008bd8:	2000      	movs	r0, #0
 8008bda:	f001 fbbf 	bl	800a35c <Log_Module_Print>
 8008bde:	e004      	b.n	8008bea <Ble_Hci_Gap_Gatt_Init+0x1ba>
    }
    else
    {
      LOG_INFO_APP("  Success: aci_gatt_update_char_value - Device Name\n");
 8008be0:	4a56      	ldr	r2, [pc, #344]	@ (8008d3c <Ble_Hci_Gap_Gatt_Init+0x30c>)
 8008be2:	2102      	movs	r1, #2
 8008be4:	2000      	movs	r0, #0
 8008be6:	f001 fbb9 	bl	800a35c <Log_Module_Print>
    }

    ret = aci_gatt_update_char_value(gap_service_handle,
 8008bea:	8938      	ldrh	r0, [r7, #8]
 8008bec:	88b9      	ldrh	r1, [r7, #4]
 8008bee:	463b      	mov	r3, r7
 8008bf0:	9300      	str	r3, [sp, #0]
 8008bf2:	2302      	movs	r3, #2
 8008bf4:	2200      	movs	r2, #0
 8008bf6:	f020 fdff 	bl	80297f8 <aci_gatt_update_char_value>
 8008bfa:	4603      	mov	r3, r0
 8008bfc:	72fb      	strb	r3, [r7, #11]
                                     gap_appearance_char_handle,
                                     0,
                                     sizeof(a_appearance),
                                     (uint8_t *)&a_appearance);
    if (ret != BLE_STATUS_SUCCESS)
 8008bfe:	7afb      	ldrb	r3, [r7, #11]
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d006      	beq.n	8008c12 <Ble_Hci_Gap_Gatt_Init+0x1e2>
    {
      LOG_INFO_APP("  Fail   : aci_gatt_update_char_value - Appearance, result: 0x%02X\n", ret);
 8008c04:	7afb      	ldrb	r3, [r7, #11]
 8008c06:	4a4e      	ldr	r2, [pc, #312]	@ (8008d40 <Ble_Hci_Gap_Gatt_Init+0x310>)
 8008c08:	2102      	movs	r1, #2
 8008c0a:	2000      	movs	r0, #0
 8008c0c:	f001 fba6 	bl	800a35c <Log_Module_Print>
 8008c10:	e00a      	b.n	8008c28 <Ble_Hci_Gap_Gatt_Init+0x1f8>
    }
    else
    {
      LOG_INFO_APP("  Success: aci_gatt_update_char_value - Appearance\n");
 8008c12:	4a4c      	ldr	r2, [pc, #304]	@ (8008d44 <Ble_Hci_Gap_Gatt_Init+0x314>)
 8008c14:	2102      	movs	r1, #2
 8008c16:	2000      	movs	r0, #0
 8008c18:	f001 fba0 	bl	800a35c <Log_Module_Print>
 8008c1c:	e004      	b.n	8008c28 <Ble_Hci_Gap_Gatt_Init+0x1f8>
    }
  }
  else
  {
    LOG_ERROR_APP("GAP role cannot be null\n");
 8008c1e:	4a4a      	ldr	r2, [pc, #296]	@ (8008d48 <Ble_Hci_Gap_Gatt_Init+0x318>)
 8008c20:	2102      	movs	r1, #2
 8008c22:	2001      	movs	r0, #1
 8008c24:	f001 fb9a 	bl	800a35c <Log_Module_Print>
  }

  /* Initialize Default PHY */
  ret = hci_le_set_default_phy(CFG_PHY_PREF, CFG_PHY_PREF_TX, CFG_PHY_PREF_RX);
 8008c28:	2202      	movs	r2, #2
 8008c2a:	2102      	movs	r1, #2
 8008c2c:	2000      	movs	r0, #0
 8008c2e:	f01e fed3 	bl	80279d8 <hci_le_set_default_phy>
 8008c32:	4603      	mov	r3, r0
 8008c34:	72fb      	strb	r3, [r7, #11]
  if (ret != BLE_STATUS_SUCCESS)
 8008c36:	7afb      	ldrb	r3, [r7, #11]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d006      	beq.n	8008c4a <Ble_Hci_Gap_Gatt_Init+0x21a>
  {
    LOG_INFO_APP("  Fail   : hci_le_set_default_phy command, result: 0x%02X\n", ret);
 8008c3c:	7afb      	ldrb	r3, [r7, #11]
 8008c3e:	4a43      	ldr	r2, [pc, #268]	@ (8008d4c <Ble_Hci_Gap_Gatt_Init+0x31c>)
 8008c40:	2102      	movs	r1, #2
 8008c42:	2000      	movs	r0, #0
 8008c44:	f001 fb8a 	bl	800a35c <Log_Module_Print>
 8008c48:	e004      	b.n	8008c54 <Ble_Hci_Gap_Gatt_Init+0x224>
  }
  else
  {
    LOG_INFO_APP("  Success: hci_le_set_default_phy command\n");
 8008c4a:	4a41      	ldr	r2, [pc, #260]	@ (8008d50 <Ble_Hci_Gap_Gatt_Init+0x320>)
 8008c4c:	2102      	movs	r1, #2
 8008c4e:	2000      	movs	r0, #0
 8008c50:	f001 fb84 	bl	800a35c <Log_Module_Print>
  }

  /* Initialize IO capability */
  bleAppContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 8008c54:	4b3f      	ldr	r3, [pc, #252]	@ (8008d54 <Ble_Hci_Gap_Gatt_Init+0x324>)
 8008c56:	2203      	movs	r2, #3
 8008c58:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(bleAppContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 8008c5a:	4b3e      	ldr	r3, [pc, #248]	@ (8008d54 <Ble_Hci_Gap_Gatt_Init+0x324>)
 8008c5c:	781b      	ldrb	r3, [r3, #0]
 8008c5e:	4618      	mov	r0, r3
 8008c60:	f024 fa8a 	bl	802d178 <aci_gap_set_io_capability>
 8008c64:	4603      	mov	r3, r0
 8008c66:	72fb      	strb	r3, [r7, #11]
  if (ret != BLE_STATUS_SUCCESS)
 8008c68:	7afb      	ldrb	r3, [r7, #11]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d006      	beq.n	8008c7c <Ble_Hci_Gap_Gatt_Init+0x24c>
  {
    LOG_INFO_APP("  Fail   : aci_gap_set_io_capability command, result: 0x%02X\n", ret);
 8008c6e:	7afb      	ldrb	r3, [r7, #11]
 8008c70:	4a39      	ldr	r2, [pc, #228]	@ (8008d58 <Ble_Hci_Gap_Gatt_Init+0x328>)
 8008c72:	2102      	movs	r1, #2
 8008c74:	2000      	movs	r0, #0
 8008c76:	f001 fb71 	bl	800a35c <Log_Module_Print>
 8008c7a:	e004      	b.n	8008c86 <Ble_Hci_Gap_Gatt_Init+0x256>
  }
  else
  {
    LOG_INFO_APP("  Success: aci_gap_set_io_capability command\n");
 8008c7c:	4a37      	ldr	r2, [pc, #220]	@ (8008d5c <Ble_Hci_Gap_Gatt_Init+0x32c>)
 8008c7e:	2102      	movs	r1, #2
 8008c80:	2000      	movs	r0, #0
 8008c82:	f001 fb6b 	bl	800a35c <Log_Module_Print>
  }

  /* Initialize authentication */
  bleAppContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode             = CFG_MITM_PROTECTION;
 8008c86:	4b33      	ldr	r3, [pc, #204]	@ (8008d54 <Ble_Hci_Gap_Gatt_Init+0x324>)
 8008c88:	2200      	movs	r2, #0
 8008c8a:	705a      	strb	r2, [r3, #1]
  bleAppContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin  = CFG_ENCRYPTION_KEY_SIZE_MIN;
 8008c8c:	4b31      	ldr	r3, [pc, #196]	@ (8008d54 <Ble_Hci_Gap_Gatt_Init+0x324>)
 8008c8e:	2208      	movs	r2, #8
 8008c90:	711a      	strb	r2, [r3, #4]
  bleAppContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax  = CFG_ENCRYPTION_KEY_SIZE_MAX;
 8008c92:	4b30      	ldr	r3, [pc, #192]	@ (8008d54 <Ble_Hci_Gap_Gatt_Init+0x324>)
 8008c94:	2210      	movs	r2, #16
 8008c96:	715a      	strb	r2, [r3, #5]
  bleAppContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin         = CFG_USED_FIXED_PIN;
 8008c98:	4b2e      	ldr	r3, [pc, #184]	@ (8008d54 <Ble_Hci_Gap_Gatt_Init+0x324>)
 8008c9a:	2201      	movs	r2, #1
 8008c9c:	70da      	strb	r2, [r3, #3]
  bleAppContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin             = CFG_FIXED_PIN;
 8008c9e:	4b2d      	ldr	r3, [pc, #180]	@ (8008d54 <Ble_Hci_Gap_Gatt_Init+0x324>)
 8008ca0:	4a2f      	ldr	r2, [pc, #188]	@ (8008d60 <Ble_Hci_Gap_Gatt_Init+0x330>)
 8008ca2:	609a      	str	r2, [r3, #8]
  bleAppContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode          = CFG_BONDING_MODE;
 8008ca4:	4b2b      	ldr	r3, [pc, #172]	@ (8008d54 <Ble_Hci_Gap_Gatt_Init+0x324>)
 8008ca6:	2200      	movs	r2, #0
 8008ca8:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(bleAppContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 8008caa:	4b2a      	ldr	r3, [pc, #168]	@ (8008d54 <Ble_Hci_Gap_Gatt_Init+0x324>)
 8008cac:	789c      	ldrb	r4, [r3, #2]
 8008cae:	4b29      	ldr	r3, [pc, #164]	@ (8008d54 <Ble_Hci_Gap_Gatt_Init+0x324>)
 8008cb0:	785d      	ldrb	r5, [r3, #1]
 8008cb2:	4b28      	ldr	r3, [pc, #160]	@ (8008d54 <Ble_Hci_Gap_Gatt_Init+0x324>)
 8008cb4:	791b      	ldrb	r3, [r3, #4]
 8008cb6:	4a27      	ldr	r2, [pc, #156]	@ (8008d54 <Ble_Hci_Gap_Gatt_Init+0x324>)
 8008cb8:	7952      	ldrb	r2, [r2, #5]
 8008cba:	4926      	ldr	r1, [pc, #152]	@ (8008d54 <Ble_Hci_Gap_Gatt_Init+0x324>)
 8008cbc:	78c9      	ldrb	r1, [r1, #3]
 8008cbe:	4825      	ldr	r0, [pc, #148]	@ (8008d54 <Ble_Hci_Gap_Gatt_Init+0x324>)
 8008cc0:	6880      	ldr	r0, [r0, #8]
 8008cc2:	2600      	movs	r6, #0
 8008cc4:	9604      	str	r6, [sp, #16]
 8008cc6:	9003      	str	r0, [sp, #12]
 8008cc8:	9102      	str	r1, [sp, #8]
 8008cca:	9201      	str	r2, [sp, #4]
 8008ccc:	9300      	str	r3, [sp, #0]
 8008cce:	2300      	movs	r3, #0
 8008cd0:	2200      	movs	r2, #0
 8008cd2:	4629      	mov	r1, r5
 8008cd4:	4620      	mov	r0, r4
 8008cd6:	f024 fa59 	bl	802d18c <aci_gap_set_authentication_requirement>
 8008cda:	4603      	mov	r3, r0
 8008cdc:	72fb      	strb	r3, [r7, #11]
                                               bleAppContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin,
                                               bleAppContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax,
                                               bleAppContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin,
                                               bleAppContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin,
                                               CFG_BD_ADDRESS_TYPE);
  if (ret != BLE_STATUS_SUCCESS)
 8008cde:	7afb      	ldrb	r3, [r7, #11]
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d041      	beq.n	8008d68 <Ble_Hci_Gap_Gatt_Init+0x338>
  {
    LOG_INFO_APP("  Fail   : aci_gap_set_authentication_requirement command, result: 0x%02X\n", ret);
 8008ce4:	7afb      	ldrb	r3, [r7, #11]
 8008ce6:	4a1f      	ldr	r2, [pc, #124]	@ (8008d64 <Ble_Hci_Gap_Gatt_Init+0x334>)
 8008ce8:	2102      	movs	r1, #2
 8008cea:	2000      	movs	r0, #0
 8008cec:	f001 fb36 	bl	800a35c <Log_Module_Print>
 8008cf0:	e03f      	b.n	8008d72 <Ble_Hci_Gap_Gatt_Init+0x342>
 8008cf2:	bf00      	nop
 8008cf4:	08030f10 	.word	0x08030f10
 8008cf8:	08030f3c 	.word	0x08030f3c
 8008cfc:	08030f98 	.word	0x08030f98
 8008d00:	08030fe4 	.word	0x08030fe4
 8008d04:	080309d4 	.word	0x080309d4
 8008d08:	08031020 	.word	0x08031020
 8008d0c:	08031078 	.word	0x08031078
 8008d10:	080309e4 	.word	0x080309e4
 8008d14:	080310c0 	.word	0x080310c0
 8008d18:	08031118 	.word	0x08031118
 8008d1c:	08031160 	.word	0x08031160
 8008d20:	080311a0 	.word	0x080311a0
 8008d24:	080311d0 	.word	0x080311d0
 8008d28:	08031204 	.word	0x08031204
 8008d2c:	08031228 	.word	0x08031228
 8008d30:	0803125c 	.word	0x0803125c
 8008d34:	20000030 	.word	0x20000030
 8008d38:	08031280 	.word	0x08031280
 8008d3c:	080312c8 	.word	0x080312c8
 8008d40:	08031300 	.word	0x08031300
 8008d44:	08031344 	.word	0x08031344
 8008d48:	08031378 	.word	0x08031378
 8008d4c:	08031394 	.word	0x08031394
 8008d50:	080313d0 	.word	0x080313d0
 8008d54:	200038c8 	.word	0x200038c8
 8008d58:	080313fc 	.word	0x080313fc
 8008d5c:	0803143c 	.word	0x0803143c
 8008d60:	0001b207 	.word	0x0001b207
 8008d64:	0803146c 	.word	0x0803146c
  }
  else
  {
    LOG_INFO_APP("  Success: aci_gap_set_authentication_requirement command\n");
 8008d68:	4a12      	ldr	r2, [pc, #72]	@ (8008db4 <Ble_Hci_Gap_Gatt_Init+0x384>)
 8008d6a:	2102      	movs	r1, #2
 8008d6c:	2000      	movs	r0, #0
 8008d6e:	f001 faf5 	bl	800a35c <Log_Module_Print>
  }

  /* Initialize whitelist */
  if (bleAppContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 8008d72:	4b11      	ldr	r3, [pc, #68]	@ (8008db8 <Ble_Hci_Gap_Gatt_Init+0x388>)
 8008d74:	789b      	ldrb	r3, [r3, #2]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d012      	beq.n	8008da0 <Ble_Hci_Gap_Gatt_Init+0x370>
  {
    ret = aci_gap_configure_whitelist();
 8008d7a:	f01f fd75 	bl	8028868 <aci_gap_configure_filter_accept_list>
 8008d7e:	4603      	mov	r3, r0
 8008d80:	72fb      	strb	r3, [r7, #11]
    if (ret != BLE_STATUS_SUCCESS)
 8008d82:	7afb      	ldrb	r3, [r7, #11]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d006      	beq.n	8008d96 <Ble_Hci_Gap_Gatt_Init+0x366>
    {
      LOG_INFO_APP("  Fail   : aci_gap_configure_whitelist command, result: 0x%02X\n", ret);
 8008d88:	7afb      	ldrb	r3, [r7, #11]
 8008d8a:	4a0c      	ldr	r2, [pc, #48]	@ (8008dbc <Ble_Hci_Gap_Gatt_Init+0x38c>)
 8008d8c:	2102      	movs	r1, #2
 8008d8e:	2000      	movs	r0, #0
 8008d90:	f001 fae4 	bl	800a35c <Log_Module_Print>
 8008d94:	e004      	b.n	8008da0 <Ble_Hci_Gap_Gatt_Init+0x370>
    }
    else
    {
      LOG_INFO_APP("  Success: aci_gap_configure_whitelist command\n");
 8008d96:	4a0a      	ldr	r2, [pc, #40]	@ (8008dc0 <Ble_Hci_Gap_Gatt_Init+0x390>)
 8008d98:	2102      	movs	r1, #2
 8008d9a:	2000      	movs	r0, #0
 8008d9c:	f001 fade 	bl	800a35c <Log_Module_Print>
    }
  }

  LOG_INFO_APP("==>> End Ble_Hci_Gap_Gatt_Init function\n");
 8008da0:	4a08      	ldr	r2, [pc, #32]	@ (8008dc4 <Ble_Hci_Gap_Gatt_Init+0x394>)
 8008da2:	2102      	movs	r1, #2
 8008da4:	2000      	movs	r0, #0
 8008da6:	f001 fad9 	bl	800a35c <Log_Module_Print>

  return;
 8008daa:	bf00      	nop
}
 8008dac:	3714      	adds	r7, #20
 8008dae:	46bd      	mov	sp, r7
 8008db0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008db2:	bf00      	nop
 8008db4:	080314b8 	.word	0x080314b8
 8008db8:	200038c8 	.word	0x200038c8
 8008dbc:	080314f4 	.word	0x080314f4
 8008dc0:	08031534 	.word	0x08031534
 8008dc4:	08031564 	.word	0x08031564

08008dc8 <Ble_UserEvtRx>:

static void Ble_UserEvtRx( void)
{
 8008dc8:	b580      	push	{r7, lr}
 8008dca:	b082      	sub	sp, #8
 8008dcc:	af00      	add	r7, sp, #0
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  BleEvtPacket_t *phcievt = NULL;
 8008dce:	2300      	movs	r3, #0
 8008dd0:	603b      	str	r3, [r7, #0]

  LST_remove_head ( &BleAsynchEventQueue, (tListNode **)&phcievt );
 8008dd2:	463b      	mov	r3, r7
 8008dd4:	4619      	mov	r1, r3
 8008dd6:	4816      	ldr	r0, [pc, #88]	@ (8008e30 <Ble_UserEvtRx+0x68>)
 8008dd8:	f007 f9e7 	bl	80101aa <LST_remove_head>

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(phcievt->evtserial));
 8008ddc:	683b      	ldr	r3, [r7, #0]
 8008dde:	3308      	adds	r3, #8
 8008de0:	4618      	mov	r0, r3
 8008de2:	f7ff f83b 	bl	8007e5c <SVCCTL_UserEvtRx>
 8008de6:	4603      	mov	r3, r0
 8008de8:	71fb      	strb	r3, [r7, #7]

  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 8008dea:	79fb      	ldrb	r3, [r7, #7]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d004      	beq.n	8008dfa <Ble_UserEvtRx+0x32>
  {
    AMM_Free((uint32_t *)phcievt);
 8008df0:	683b      	ldr	r3, [r7, #0]
 8008df2:	4618      	mov	r0, r3
 8008df4:	f005 fc0c 	bl	800e610 <AMM_Free>
 8008df8:	e004      	b.n	8008e04 <Ble_UserEvtRx+0x3c>
  }
  else
  {
    LST_insert_head ( &BleAsynchEventQueue, (tListNode *)phcievt );
 8008dfa:	683b      	ldr	r3, [r7, #0]
 8008dfc:	4619      	mov	r1, r3
 8008dfe:	480c      	ldr	r0, [pc, #48]	@ (8008e30 <Ble_UserEvtRx+0x68>)
 8008e00:	f007 f966 	bl	80100d0 <LST_insert_head>
  }

  if ((LST_is_empty(&BleAsynchEventQueue) == FALSE) && (svctl_return_status != SVCCTL_UserEvtFlowDisable) )
 8008e04:	480a      	ldr	r0, [pc, #40]	@ (8008e30 <Ble_UserEvtRx+0x68>)
 8008e06:	f007 f941 	bl	801008c <LST_is_empty>
 8008e0a:	4603      	mov	r3, r0
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d106      	bne.n	8008e1e <Ble_UserEvtRx+0x56>
 8008e10:	79fb      	ldrb	r3, [r7, #7]
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d003      	beq.n	8008e1e <Ble_UserEvtRx+0x56>
  {
    UTIL_SEQ_SetTask(1U << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SEQ_PRIO_0);
 8008e16:	2100      	movs	r1, #0
 8008e18:	2004      	movs	r0, #4
 8008e1a:	f007 fd57 	bl	80108cc <UTIL_SEQ_SetTask>
  }

  /* set the BG_BleStack_Process task for scheduling */
  UTIL_SEQ_SetTask(1U << CFG_TASK_BLE_HOST, CFG_SEQ_PRIO_0);
 8008e1e:	2100      	movs	r1, #0
 8008e20:	2008      	movs	r0, #8
 8008e22:	f007 fd53 	bl	80108cc <UTIL_SEQ_SetTask>

}
 8008e26:	bf00      	nop
 8008e28:	3708      	adds	r7, #8
 8008e2a:	46bd      	mov	sp, r7
 8008e2c:	bd80      	pop	{r7, pc}
 8008e2e:	bf00      	nop
 8008e30:	200038b8 	.word	0x200038b8

08008e34 <BleGetBdAddress>:

static const uint8_t* BleGetBdAddress(void)
{
 8008e34:	b580      	push	{r7, lr}
 8008e36:	b088      	sub	sp, #32
 8008e38:	af00      	add	r7, sp, #0
  OTP_Data_s *p_otp_addr = NULL;
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	60fb      	str	r3, [r7, #12]
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  uint8_t a_BDAddrNull[BD_ADDR_SIZE];
  memset(&a_BDAddrNull[0], 0x00, sizeof(a_BDAddrNull));
 8008e3e:	1d3b      	adds	r3, r7, #4
 8008e40:	2206      	movs	r2, #6
 8008e42:	2100      	movs	r1, #0
 8008e44:	4618      	mov	r0, r3
 8008e46:	f026 fab3 	bl	802f3b0 <memset>

  a_BdAddr[0] = (uint8_t)(CFG_BD_ADDRESS & 0x0000000000FF);
 8008e4a:	4b3a      	ldr	r3, [pc, #232]	@ (8008f34 <BleGetBdAddress+0x100>)
 8008e4c:	2234      	movs	r2, #52	@ 0x34
 8008e4e:	701a      	strb	r2, [r3, #0]
  a_BdAddr[1] = (uint8_t)((CFG_BD_ADDRESS & 0x00000000FF00) >> 8);
 8008e50:	4b38      	ldr	r3, [pc, #224]	@ (8008f34 <BleGetBdAddress+0x100>)
 8008e52:	2212      	movs	r2, #18
 8008e54:	705a      	strb	r2, [r3, #1]
  a_BdAddr[2] = (uint8_t)((CFG_BD_ADDRESS & 0x000000FF0000) >> 16);
 8008e56:	4b37      	ldr	r3, [pc, #220]	@ (8008f34 <BleGetBdAddress+0x100>)
 8008e58:	222a      	movs	r2, #42	@ 0x2a
 8008e5a:	709a      	strb	r2, [r3, #2]
  a_BdAddr[3] = (uint8_t)((CFG_BD_ADDRESS & 0x0000FF000000) >> 24);
 8008e5c:	4b35      	ldr	r3, [pc, #212]	@ (8008f34 <BleGetBdAddress+0x100>)
 8008e5e:	22e1      	movs	r2, #225	@ 0xe1
 8008e60:	70da      	strb	r2, [r3, #3]
  a_BdAddr[4] = (uint8_t)((CFG_BD_ADDRESS & 0x00FF00000000) >> 32);
 8008e62:	4b34      	ldr	r3, [pc, #208]	@ (8008f34 <BleGetBdAddress+0x100>)
 8008e64:	2208      	movs	r2, #8
 8008e66:	711a      	strb	r2, [r3, #4]
  a_BdAddr[5] = (uint8_t)((CFG_BD_ADDRESS & 0xFF0000000000) >> 40);
 8008e68:	4b32      	ldr	r3, [pc, #200]	@ (8008f34 <BleGetBdAddress+0x100>)
 8008e6a:	2200      	movs	r2, #0
 8008e6c:	715a      	strb	r2, [r3, #5]

  if(memcmp(&a_BdAddr[0], &a_BDAddrNull[0], BD_ADDR_SIZE) != 0)
 8008e6e:	1d3b      	adds	r3, r7, #4
 8008e70:	2206      	movs	r2, #6
 8008e72:	4619      	mov	r1, r3
 8008e74:	482f      	ldr	r0, [pc, #188]	@ (8008f34 <BleGetBdAddress+0x100>)
 8008e76:	f026 fa71 	bl	802f35c <memcmp>
 8008e7a:	4603      	mov	r3, r0
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d002      	beq.n	8008e86 <BleGetBdAddress+0x52>
  {
    p_bd_addr = (const uint8_t *)a_BdAddr;
 8008e80:	4b2c      	ldr	r3, [pc, #176]	@ (8008f34 <BleGetBdAddress+0x100>)
 8008e82:	61fb      	str	r3, [r7, #28]
 8008e84:	e050      	b.n	8008f28 <BleGetBdAddress+0xf4>
  }
  else
  {
    udn = LL_FLASH_GetUDN();
 8008e86:	f7ff f9bb 	bl	8008200 <LL_FLASH_GetUDN>
 8008e8a:	61b8      	str	r0, [r7, #24]

    /* USER CODE BEGIN BleGetBdAddress_1 */

    /* USER CODE END BleGetBdAddress_1 */

    if (udn != 0xFFFFFFFF)
 8008e8c:	69bb      	ldr	r3, [r7, #24]
 8008e8e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008e92:	d023      	beq.n	8008edc <BleGetBdAddress+0xa8>
    {
      company_id = LL_FLASH_GetSTCompanyID();
 8008e94:	f7ff f9cc 	bl	8008230 <LL_FLASH_GetSTCompanyID>
 8008e98:	6178      	str	r0, [r7, #20]
      device_id = LL_FLASH_GetDeviceID();
 8008e9a:	f7ff f9bd 	bl	8008218 <LL_FLASH_GetDeviceID>
 8008e9e:	6138      	str	r0, [r7, #16]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
      a_BdAddr[0] = (uint8_t)(udn & 0x000000FF);
 8008ea0:	69bb      	ldr	r3, [r7, #24]
 8008ea2:	b2da      	uxtb	r2, r3
 8008ea4:	4b23      	ldr	r3, [pc, #140]	@ (8008f34 <BleGetBdAddress+0x100>)
 8008ea6:	701a      	strb	r2, [r3, #0]
      a_BdAddr[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 8008ea8:	69bb      	ldr	r3, [r7, #24]
 8008eaa:	0a1b      	lsrs	r3, r3, #8
 8008eac:	b2da      	uxtb	r2, r3
 8008eae:	4b21      	ldr	r3, [pc, #132]	@ (8008f34 <BleGetBdAddress+0x100>)
 8008eb0:	705a      	strb	r2, [r3, #1]
      a_BdAddr[2] = (uint8_t)device_id;
 8008eb2:	693b      	ldr	r3, [r7, #16]
 8008eb4:	b2da      	uxtb	r2, r3
 8008eb6:	4b1f      	ldr	r3, [pc, #124]	@ (8008f34 <BleGetBdAddress+0x100>)
 8008eb8:	709a      	strb	r2, [r3, #2]
      a_BdAddr[3] = (uint8_t)(company_id & 0x000000FF);
 8008eba:	697b      	ldr	r3, [r7, #20]
 8008ebc:	b2da      	uxtb	r2, r3
 8008ebe:	4b1d      	ldr	r3, [pc, #116]	@ (8008f34 <BleGetBdAddress+0x100>)
 8008ec0:	70da      	strb	r2, [r3, #3]
      a_BdAddr[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 8008ec2:	697b      	ldr	r3, [r7, #20]
 8008ec4:	0a1b      	lsrs	r3, r3, #8
 8008ec6:	b2da      	uxtb	r2, r3
 8008ec8:	4b1a      	ldr	r3, [pc, #104]	@ (8008f34 <BleGetBdAddress+0x100>)
 8008eca:	711a      	strb	r2, [r3, #4]
      a_BdAddr[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 8008ecc:	697b      	ldr	r3, [r7, #20]
 8008ece:	0c1b      	lsrs	r3, r3, #16
 8008ed0:	b2da      	uxtb	r2, r3
 8008ed2:	4b18      	ldr	r3, [pc, #96]	@ (8008f34 <BleGetBdAddress+0x100>)
 8008ed4:	715a      	strb	r2, [r3, #5]
      p_bd_addr = (const uint8_t *)a_BdAddr;
 8008ed6:	4b17      	ldr	r3, [pc, #92]	@ (8008f34 <BleGetBdAddress+0x100>)
 8008ed8:	61fb      	str	r3, [r7, #28]
 8008eda:	e025      	b.n	8008f28 <BleGetBdAddress+0xf4>
    }
    else
    {
      if (OTP_Read(0, &p_otp_addr) == HAL_OK)
 8008edc:	f107 030c 	add.w	r3, r7, #12
 8008ee0:	4619      	mov	r1, r3
 8008ee2:	2000      	movs	r0, #0
 8008ee4:	f006 fb88 	bl	800f5f8 <OTP_Read>
 8008ee8:	4603      	mov	r3, r0
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d11a      	bne.n	8008f24 <BleGetBdAddress+0xf0>
      {
        a_BdAddr[0] = p_otp_addr->bd_address[0];
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	7a1a      	ldrb	r2, [r3, #8]
 8008ef2:	4b10      	ldr	r3, [pc, #64]	@ (8008f34 <BleGetBdAddress+0x100>)
 8008ef4:	701a      	strb	r2, [r3, #0]
        a_BdAddr[1] = p_otp_addr->bd_address[1];
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	7a5a      	ldrb	r2, [r3, #9]
 8008efa:	4b0e      	ldr	r3, [pc, #56]	@ (8008f34 <BleGetBdAddress+0x100>)
 8008efc:	705a      	strb	r2, [r3, #1]
        a_BdAddr[2] = p_otp_addr->bd_address[2];
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	7a9a      	ldrb	r2, [r3, #10]
 8008f02:	4b0c      	ldr	r3, [pc, #48]	@ (8008f34 <BleGetBdAddress+0x100>)
 8008f04:	709a      	strb	r2, [r3, #2]
        a_BdAddr[3] = p_otp_addr->bd_address[3];
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	7ada      	ldrb	r2, [r3, #11]
 8008f0a:	4b0a      	ldr	r3, [pc, #40]	@ (8008f34 <BleGetBdAddress+0x100>)
 8008f0c:	70da      	strb	r2, [r3, #3]
        a_BdAddr[4] = p_otp_addr->bd_address[4];
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	7b1a      	ldrb	r2, [r3, #12]
 8008f12:	4b08      	ldr	r3, [pc, #32]	@ (8008f34 <BleGetBdAddress+0x100>)
 8008f14:	711a      	strb	r2, [r3, #4]
        a_BdAddr[5] = p_otp_addr->bd_address[5];
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	7b5a      	ldrb	r2, [r3, #13]
 8008f1a:	4b06      	ldr	r3, [pc, #24]	@ (8008f34 <BleGetBdAddress+0x100>)
 8008f1c:	715a      	strb	r2, [r3, #5]
        p_bd_addr = (const uint8_t *)a_BdAddr;
 8008f1e:	4b05      	ldr	r3, [pc, #20]	@ (8008f34 <BleGetBdAddress+0x100>)
 8008f20:	61fb      	str	r3, [r7, #28]
 8008f22:	e001      	b.n	8008f28 <BleGetBdAddress+0xf4>
      }
      else
      {
        p_bd_addr = (const uint8_t *)a_BdAddrDefault;
 8008f24:	4b04      	ldr	r3, [pc, #16]	@ (8008f38 <BleGetBdAddress+0x104>)
 8008f26:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return p_bd_addr;
 8008f28:	69fb      	ldr	r3, [r7, #28]
}
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	3720      	adds	r7, #32
 8008f2e:	46bd      	mov	sp, r7
 8008f30:	bd80      	pop	{r7, pc}
 8008f32:	bf00      	nop
 8008f34:	200038c0 	.word	0x200038c0
 8008f38:	080309cc 	.word	0x080309cc

08008f3c <BleStack_Process_BG>:

static void BleStack_Process_BG(void)
{
 8008f3c:	b580      	push	{r7, lr}
 8008f3e:	af00      	add	r7, sp, #0
  if (BleStack_Process( ) == 0x0)
 8008f40:	f01e f956 	bl	80271f0 <BleStack_Process>
 8008f44:	4603      	mov	r3, r0
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d101      	bne.n	8008f4e <BleStack_Process_BG+0x12>
  {
    BleStackCB_Process( );
 8008f4a:	f000 febc 	bl	8009cc6 <BleStackCB_Process>
  }
}
 8008f4e:	bf00      	nop
 8008f50:	bd80      	pop	{r7, pc}

08008f52 <gap_cmd_resp_release>:

static void gap_cmd_resp_release(void)
{
 8008f52:	b580      	push	{r7, lr}
 8008f54:	af00      	add	r7, sp, #0
  UTIL_SEQ_SetEvt(1U << CFG_IDLEEVT_PROC_GAP_COMPLETE);
 8008f56:	2001      	movs	r0, #1
 8008f58:	f007 fce4 	bl	8010924 <UTIL_SEQ_SetEvt>
  return;
 8008f5c:	bf00      	nop
}
 8008f5e:	bd80      	pop	{r7, pc}

08008f60 <BLE_ResumeFlowProcessCallback>:
  * @brief  Notify the LL to resume the flow process
  * @param  None
  * @retval None
  */
static void BLE_ResumeFlowProcessCallback(void)
{
 8008f60:	b580      	push	{r7, lr}
 8008f62:	b082      	sub	sp, #8
 8008f64:	af00      	add	r7, sp, #0
  /* Receive any events from the LL. */
  change_state_options_t notify_options;

  notify_options.combined_value = 0x0F;
 8008f66:	230f      	movs	r3, #15
 8008f68:	713b      	strb	r3, [r7, #4]

  ll_intf_chng_evnt_hndlr_state( notify_options );
 8008f6a:	7938      	ldrb	r0, [r7, #4]
 8008f6c:	f00b ff3e 	bl	8014dec <ll_intf_chng_evnt_hndlr_state>
}
 8008f70:	bf00      	nop
 8008f72:	3708      	adds	r7, #8
 8008f74:	46bd      	mov	sp, r7
 8008f76:	bd80      	pop	{r7, pc}

08008f78 <BLE_NvmCallback>:

static void BLE_NvmCallback (SNVMA_Callback_Status_t CbkStatus)
{
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	b082      	sub	sp, #8
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	4603      	mov	r3, r0
 8008f80:	71fb      	strb	r3, [r7, #7]
  if (CbkStatus != SNVMA_OPERATION_COMPLETE)
 8008f82:	79fb      	ldrb	r3, [r7, #7]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d003      	beq.n	8008f90 <BLE_NvmCallback+0x18>
  {
    /* Retry the write operation */
    SNVMA_Write (APP_BLE_NvmBuffer,
 8008f88:	4903      	ldr	r1, [pc, #12]	@ (8008f98 <BLE_NvmCallback+0x20>)
 8008f8a:	2000      	movs	r0, #0
 8008f8c:	f003 fbb4 	bl	800c6f8 <SNVMA_Write>
                 BLE_NvmCallback);
  }
}
 8008f90:	bf00      	nop
 8008f92:	3708      	adds	r7, #8
 8008f94:	46bd      	mov	sp, r7
 8008f96:	bd80      	pop	{r7, pc}
 8008f98:	08008f79 	.word	0x08008f79

08008f9c <BLECB_Indication>:

tBleStatus BLECB_Indication( const uint8_t* data,
                          uint16_t length,
                          const uint8_t* ext_data,
                          uint16_t ext_length )
{
 8008f9c:	b580      	push	{r7, lr}
 8008f9e:	b086      	sub	sp, #24
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	60f8      	str	r0, [r7, #12]
 8008fa4:	607a      	str	r2, [r7, #4]
 8008fa6:	461a      	mov	r2, r3
 8008fa8:	460b      	mov	r3, r1
 8008faa:	817b      	strh	r3, [r7, #10]
 8008fac:	4613      	mov	r3, r2
 8008fae:	813b      	strh	r3, [r7, #8]
  uint8_t status = BLE_STATUS_FAILED;
 8008fb0:	2391      	movs	r3, #145	@ 0x91
 8008fb2:	75fb      	strb	r3, [r7, #23]
  BleEvtPacket_t *phcievt = NULL;
 8008fb4:	2300      	movs	r3, #0
 8008fb6:	613b      	str	r3, [r7, #16]
  uint16_t total_length = (length+ext_length);
 8008fb8:	897a      	ldrh	r2, [r7, #10]
 8008fba:	893b      	ldrh	r3, [r7, #8]
 8008fbc:	4413      	add	r3, r2
 8008fbe:	82bb      	strh	r3, [r7, #20]

  UNUSED(ext_data);

  if (data[0] == HCI_EVENT_PKT_TYPE)
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	781b      	ldrb	r3, [r3, #0]
 8008fc4:	2b04      	cmp	r3, #4
 8008fc6:	d13d      	bne.n	8009044 <BLECB_Indication+0xa8>
  {
    APP_BLE_ResumeFlowProcessCb.Callback = BLE_ResumeFlowProcessCallback;
 8008fc8:	4b24      	ldr	r3, [pc, #144]	@ (800905c <BLECB_Indication+0xc0>)
 8008fca:	4a25      	ldr	r2, [pc, #148]	@ (8009060 <BLECB_Indication+0xc4>)
 8008fcc:	609a      	str	r2, [r3, #8]
    if (AMM_Alloc (CFG_AMM_VIRTUAL_APP_BLE,
                   DIVC((sizeof(BleEvtPacketHeader_t) + total_length), sizeof (uint32_t)),
 8008fce:	8abb      	ldrh	r3, [r7, #20]
 8008fd0:	330b      	adds	r3, #11
 8008fd2:	0899      	lsrs	r1, r3, #2
    if (AMM_Alloc (CFG_AMM_VIRTUAL_APP_BLE,
 8008fd4:	f107 0210 	add.w	r2, r7, #16
 8008fd8:	4b20      	ldr	r3, [pc, #128]	@ (800905c <BLECB_Indication+0xc0>)
 8008fda:	2002      	movs	r0, #2
 8008fdc:	f005 f9da 	bl	800e394 <AMM_Alloc>
 8008fe0:	4603      	mov	r3, r0
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d007      	beq.n	8008ff6 <BLECB_Indication+0x5a>
                   (uint32_t **)&phcievt,
                   &APP_BLE_ResumeFlowProcessCb) != AMM_ERROR_OK)
    {
      LOG_INFO_APP("Alloc failed\n");
 8008fe6:	4a1f      	ldr	r2, [pc, #124]	@ (8009064 <BLECB_Indication+0xc8>)
 8008fe8:	2102      	movs	r1, #2
 8008fea:	2000      	movs	r0, #0
 8008fec:	f001 f9b6 	bl	800a35c <Log_Module_Print>
      status = BLE_STATUS_FAILED;
 8008ff0:	2391      	movs	r3, #145	@ 0x91
 8008ff2:	75fb      	strb	r3, [r7, #23]
 8008ff4:	e02c      	b.n	8009050 <BLECB_Indication+0xb4>
    }
    else if (phcievt != (BleEvtPacket_t *)0 )
 8008ff6:	693b      	ldr	r3, [r7, #16]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d029      	beq.n	8009050 <BLECB_Indication+0xb4>
    {
      phcievt->evtserial.type = HCI_EVENT_PKT_TYPE;
 8008ffc:	693b      	ldr	r3, [r7, #16]
 8008ffe:	2204      	movs	r2, #4
 8009000:	721a      	strb	r2, [r3, #8]
      phcievt->evtserial.evt.evtcode = data[1];
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	1c5a      	adds	r2, r3, #1
 8009006:	693b      	ldr	r3, [r7, #16]
 8009008:	7812      	ldrb	r2, [r2, #0]
 800900a:	725a      	strb	r2, [r3, #9]
      phcievt->evtserial.evt.plen  = data[2];
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	1c9a      	adds	r2, r3, #2
 8009010:	693b      	ldr	r3, [r7, #16]
 8009012:	7812      	ldrb	r2, [r2, #0]
 8009014:	729a      	strb	r2, [r3, #10]
      memcpy( (void*)&phcievt->evtserial.evt.payload, &data[3], data[2]);
 8009016:	693b      	ldr	r3, [r7, #16]
 8009018:	f103 000b 	add.w	r0, r3, #11
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	1cd9      	adds	r1, r3, #3
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	3302      	adds	r3, #2
 8009024:	781b      	ldrb	r3, [r3, #0]
 8009026:	461a      	mov	r2, r3
 8009028:	f026 f9f9 	bl	802f41e <memcpy>
      LST_insert_tail(&BleAsynchEventQueue, (tListNode *)phcievt);
 800902c:	693b      	ldr	r3, [r7, #16]
 800902e:	4619      	mov	r1, r3
 8009030:	480d      	ldr	r0, [pc, #52]	@ (8009068 <BLECB_Indication+0xcc>)
 8009032:	f007 f873 	bl	801011c <LST_insert_tail>
      UTIL_SEQ_SetTask(1U << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SEQ_PRIO_0);
 8009036:	2100      	movs	r1, #0
 8009038:	2004      	movs	r0, #4
 800903a:	f007 fc47 	bl	80108cc <UTIL_SEQ_SetTask>
      status = BLE_STATUS_SUCCESS;
 800903e:	2300      	movs	r3, #0
 8009040:	75fb      	strb	r3, [r7, #23]
 8009042:	e005      	b.n	8009050 <BLECB_Indication+0xb4>
    }
  }
  else if (data[0] == HCI_ACLDATA_PKT_TYPE)
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	781b      	ldrb	r3, [r3, #0]
 8009048:	2b02      	cmp	r3, #2
 800904a:	d101      	bne.n	8009050 <BLECB_Indication+0xb4>
  {
    status = BLE_STATUS_SUCCESS;
 800904c:	2300      	movs	r3, #0
 800904e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8009050:	7dfb      	ldrb	r3, [r7, #23]
}
 8009052:	4618      	mov	r0, r3
 8009054:	3718      	adds	r7, #24
 8009056:	46bd      	mov	sp, r7
 8009058:	bd80      	pop	{r7, pc}
 800905a:	bf00      	nop
 800905c:	200040c8 	.word	0x200040c8
 8009060:	08008f61 	.word	0x08008f61
 8009064:	08031590 	.word	0x08031590
 8009068:	200038b8 	.word	0x200038b8

0800906c <NVMCB_Store>:

void NVMCB_Store( const uint32_t* ptr, uint32_t size )
{
 800906c:	b580      	push	{r7, lr}
 800906e:	b082      	sub	sp, #8
 8009070:	af00      	add	r7, sp, #0
 8009072:	6078      	str	r0, [r7, #4]
 8009074:	6039      	str	r1, [r7, #0]
  UNUSED(ptr);
  UNUSED(size);

  /* Call SNVMA for storing - Without callback */
  SNVMA_Write (APP_BLE_NvmBuffer,
 8009076:	4904      	ldr	r1, [pc, #16]	@ (8009088 <NVMCB_Store+0x1c>)
 8009078:	2000      	movs	r0, #0
 800907a:	f003 fb3d 	bl	800c6f8 <SNVMA_Write>
               BLE_NvmCallback);
}
 800907e:	bf00      	nop
 8009080:	3708      	adds	r7, #8
 8009082:	46bd      	mov	sp, r7
 8009084:	bd80      	pop	{r7, pc}
 8009086:	bf00      	nop
 8009088:	08008f79 	.word	0x08008f79

0800908c <BLUZ_EventHandler>:
 * @brief  Event handler
 * @param  p_Event: Address of the buffer holding the p_Event
 * @retval Ack: Return whether the p_Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t BLUZ_EventHandler(void *p_Event)
{
 800908c:	b580      	push	{r7, lr}
 800908e:	b08e      	sub	sp, #56	@ 0x38
 8009090:	af00      	add	r7, sp, #0
 8009092:	6078      	str	r0, [r7, #4]
  BLUZ_NotificationEvt_t                 notification;
  /* USER CODE BEGIN Service1_EventHandler_1 */

  /* USER CODE END Service1_EventHandler_1 */

  return_value = SVCCTL_EvtNotAck;
 8009094:	2300      	movs	r3, #0
 8009096:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  p_event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)p_Event)->data);
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	3301      	adds	r3, #1
 800909e:	633b      	str	r3, [r7, #48]	@ 0x30

  switch(p_event_pckt->evt)
 80090a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090a2:	781b      	ldrb	r3, [r3, #0]
 80090a4:	2bff      	cmp	r3, #255	@ 0xff
 80090a6:	f040 80da 	bne.w	800925e <BLUZ_EventHandler+0x1d2>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
      p_blecore_evt = (evt_blecore_aci*)p_event_pckt->data;
 80090aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090ac:	3302      	adds	r3, #2
 80090ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
      switch(p_blecore_evt->ecode)
 80090b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090b2:	881b      	ldrh	r3, [r3, #0]
 80090b4:	b29b      	uxth	r3, r3
 80090b6:	f6a3 4301 	subw	r3, r3, #3073	@ 0xc01
 80090ba:	2b15      	cmp	r3, #21
 80090bc:	f200 80cb 	bhi.w	8009256 <BLUZ_EventHandler+0x1ca>
 80090c0:	a201      	add	r2, pc, #4	@ (adr r2, 80090c8 <BLUZ_EventHandler+0x3c>)
 80090c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090c6:	bf00      	nop
 80090c8:	08009121 	.word	0x08009121
 80090cc:	08009257 	.word	0x08009257
 80090d0:	08009205 	.word	0x08009205
 80090d4:	08009257 	.word	0x08009257
 80090d8:	08009257 	.word	0x08009257
 80090dc:	08009257 	.word	0x08009257
 80090e0:	08009257 	.word	0x08009257
 80090e4:	08009257 	.word	0x08009257
 80090e8:	08009257 	.word	0x08009257
 80090ec:	08009257 	.word	0x08009257
 80090f0:	08009257 	.word	0x08009257
 80090f4:	08009257 	.word	0x08009257
 80090f8:	08009257 	.word	0x08009257
 80090fc:	08009257 	.word	0x08009257
 8009100:	08009257 	.word	0x08009257
 8009104:	08009257 	.word	0x08009257
 8009108:	08009257 	.word	0x08009257
 800910c:	08009257 	.word	0x08009257
 8009110:	08009257 	.word	0x08009257
 8009114:	08009257 	.word	0x08009257
 8009118:	08009257 	.word	0x08009257
 800911c:	080091fd 	.word	0x080091fd
        case ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE:
        {
          /* USER CODE BEGIN EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_BEGIN */

          /* USER CODE END EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_BEGIN */
          p_attribute_modified = (aci_gatt_attribute_modified_event_rp0*)p_blecore_evt->data;
 8009120:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009122:	3302      	adds	r3, #2
 8009124:	623b      	str	r3, [r7, #32]
          notification.ConnectionHandle         = p_attribute_modified->Connection_Handle;
 8009126:	6a3b      	ldr	r3, [r7, #32]
 8009128:	881b      	ldrh	r3, [r3, #0]
 800912a:	b29b      	uxth	r3, r3
 800912c:	833b      	strh	r3, [r7, #24]
          notification.AttributeHandle          = p_attribute_modified->Attr_Handle;
 800912e:	6a3b      	ldr	r3, [r7, #32]
 8009130:	885b      	ldrh	r3, [r3, #2]
 8009132:	b29b      	uxth	r3, r3
 8009134:	837b      	strh	r3, [r7, #26]
          notification.DataTransfered.Length    = p_attribute_modified->Attr_Data_Length;
 8009136:	6a3b      	ldr	r3, [r7, #32]
 8009138:	88db      	ldrh	r3, [r3, #6]
 800913a:	b29b      	uxth	r3, r3
 800913c:	b2db      	uxtb	r3, r3
 800913e:	753b      	strb	r3, [r7, #20]
          notification.DataTransfered.p_Payload = p_attribute_modified->Attr_Data;
 8009140:	6a3b      	ldr	r3, [r7, #32]
 8009142:	3308      	adds	r3, #8
 8009144:	613b      	str	r3, [r7, #16]
          if(p_attribute_modified->Attr_Handle == (BLUZ_Context.RxCharHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 8009146:	6a3b      	ldr	r3, [r7, #32]
 8009148:	885b      	ldrh	r3, [r3, #2]
 800914a:	b29b      	uxth	r3, r3
 800914c:	461a      	mov	r2, r3
 800914e:	4b47      	ldr	r3, [pc, #284]	@ (800926c <BLUZ_EventHandler+0x1e0>)
 8009150:	885b      	ldrh	r3, [r3, #2]
 8009152:	3302      	adds	r3, #2
 8009154:	429a      	cmp	r2, r3
 8009156:	d119      	bne.n	800918c <BLUZ_EventHandler+0x100>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 8009158:	2301      	movs	r3, #1
 800915a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            /* USER CODE BEGIN Service1_Char_1 */

            /* USER CODE END Service1_Char_1 */
            switch(p_attribute_modified->Attr_Data[0])
 800915e:	6a3b      	ldr	r3, [r7, #32]
 8009160:	7a1b      	ldrb	r3, [r3, #8]
 8009162:	2b00      	cmp	r3, #0
 8009164:	d002      	beq.n	800916c <BLUZ_EventHandler+0xe0>
 8009166:	2b01      	cmp	r3, #1
 8009168:	d008      	beq.n	800917c <BLUZ_EventHandler+0xf0>

              default:
                /* USER CODE BEGIN Service1_Char_1_default */

                /* USER CODE END Service1_Char_1_default */
                break;
 800916a:	e046      	b.n	80091fa <BLUZ_EventHandler+0x16e>
                notification.EvtOpcode = BLUZ_RX_NOTIFY_DISABLED_EVT;
 800916c:	2301      	movs	r3, #1
 800916e:	733b      	strb	r3, [r7, #12]
                BLUZ_Notification(&notification);
 8009170:	f107 030c 	add.w	r3, r7, #12
 8009174:	4618      	mov	r0, r3
 8009176:	f000 fa2f 	bl	80095d8 <BLUZ_Notification>
                break;
 800917a:	e03e      	b.n	80091fa <BLUZ_EventHandler+0x16e>
                notification.EvtOpcode = BLUZ_RX_NOTIFY_ENABLED_EVT;
 800917c:	2300      	movs	r3, #0
 800917e:	733b      	strb	r3, [r7, #12]
                BLUZ_Notification(&notification);
 8009180:	f107 030c 	add.w	r3, r7, #12
 8009184:	4618      	mov	r0, r3
 8009186:	f000 fa27 	bl	80095d8 <BLUZ_Notification>
                break;
 800918a:	e036      	b.n	80091fa <BLUZ_EventHandler+0x16e>
            }
          }  /* if(p_attribute_modified->Attr_Handle == (BLUZ_Context.RxCharHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))*/

          else if(p_attribute_modified->Attr_Handle == (BLUZ_Context.TxCharHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 800918c:	6a3b      	ldr	r3, [r7, #32]
 800918e:	885b      	ldrh	r3, [r3, #2]
 8009190:	b29b      	uxth	r3, r3
 8009192:	461a      	mov	r2, r3
 8009194:	4b35      	ldr	r3, [pc, #212]	@ (800926c <BLUZ_EventHandler+0x1e0>)
 8009196:	889b      	ldrh	r3, [r3, #4]
 8009198:	3302      	adds	r3, #2
 800919a:	429a      	cmp	r2, r3
 800919c:	d119      	bne.n	80091d2 <BLUZ_EventHandler+0x146>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 800919e:	2301      	movs	r3, #1
 80091a0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            /* USER CODE BEGIN Service1_Char_2 */

            /* USER CODE END Service1_Char_2 */
            switch(p_attribute_modified->Attr_Data[0])
 80091a4:	6a3b      	ldr	r3, [r7, #32]
 80091a6:	7a1b      	ldrb	r3, [r3, #8]
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d002      	beq.n	80091b2 <BLUZ_EventHandler+0x126>
 80091ac:	2b01      	cmp	r3, #1
 80091ae:	d008      	beq.n	80091c2 <BLUZ_EventHandler+0x136>

              default:
                /* USER CODE BEGIN Service1_Char_2_default */

                /* USER CODE END Service1_Char_2_default */
                break;
 80091b0:	e023      	b.n	80091fa <BLUZ_EventHandler+0x16e>
                notification.EvtOpcode = BLUZ_TX_NOTIFY_DISABLED_EVT;
 80091b2:	2304      	movs	r3, #4
 80091b4:	733b      	strb	r3, [r7, #12]
                BLUZ_Notification(&notification);
 80091b6:	f107 030c 	add.w	r3, r7, #12
 80091ba:	4618      	mov	r0, r3
 80091bc:	f000 fa0c 	bl	80095d8 <BLUZ_Notification>
                break;
 80091c0:	e01b      	b.n	80091fa <BLUZ_EventHandler+0x16e>
                notification.EvtOpcode = BLUZ_TX_NOTIFY_ENABLED_EVT;
 80091c2:	2303      	movs	r3, #3
 80091c4:	733b      	strb	r3, [r7, #12]
                BLUZ_Notification(&notification);
 80091c6:	f107 030c 	add.w	r3, r7, #12
 80091ca:	4618      	mov	r0, r3
 80091cc:	f000 fa04 	bl	80095d8 <BLUZ_Notification>
                break;
 80091d0:	e013      	b.n	80091fa <BLUZ_EventHandler+0x16e>
            }
          }  /* if(p_attribute_modified->Attr_Handle == (BLUZ_Context.TxCharHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))*/

          else if(p_attribute_modified->Attr_Handle == (BLUZ_Context.TxCharHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 80091d2:	6a3b      	ldr	r3, [r7, #32]
 80091d4:	885b      	ldrh	r3, [r3, #2]
 80091d6:	b29b      	uxth	r3, r3
 80091d8:	461a      	mov	r2, r3
 80091da:	4b24      	ldr	r3, [pc, #144]	@ (800926c <BLUZ_EventHandler+0x1e0>)
 80091dc:	889b      	ldrh	r3, [r3, #4]
 80091de:	3301      	adds	r3, #1
 80091e0:	429a      	cmp	r2, r3
 80091e2:	d13a      	bne.n	800925a <BLUZ_EventHandler+0x1ce>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 80091e4:	2301      	movs	r3, #1
 80091e6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

            notification.EvtOpcode = BLUZ_TX_WRITE_NO_RESP_EVT;
 80091ea:	2302      	movs	r3, #2
 80091ec:	733b      	strb	r3, [r7, #12]
            /* USER CODE BEGIN Service1_Char_2_ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE */

            /* USER CODE END Service1_Char_2_ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE */
            BLUZ_Notification(&notification);
 80091ee:	f107 030c 	add.w	r3, r7, #12
 80091f2:	4618      	mov	r0, r3
 80091f4:	f000 f9f0 	bl	80095d8 <BLUZ_Notification>
          } /* if(p_attribute_modified->Attr_Handle == (BLUZ_Context.TxCharHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))*/

          /* USER CODE BEGIN EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_END */

          /* USER CODE END EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_END */
          break;/* ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE */
 80091f8:	e02f      	b.n	800925a <BLUZ_EventHandler+0x1ce>
 80091fa:	e02e      	b.n	800925a <BLUZ_EventHandler+0x1ce>
          break;/* ACI_GATT_WRITE_PERMIT_REQ_VSEVT_CODE */
        }
        case ACI_GATT_TX_POOL_AVAILABLE_VSEVT_CODE:
        {
          aci_gatt_tx_pool_available_event_rp0 *p_tx_pool_available_event;
          p_tx_pool_available_event = (aci_gatt_tx_pool_available_event_rp0 *) p_blecore_evt->data;
 80091fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091fe:	3302      	adds	r3, #2
 8009200:	62bb      	str	r3, [r7, #40]	@ 0x28
          UNUSED(p_tx_pool_available_event);

          /* USER CODE BEGIN ACI_GATT_TX_POOL_AVAILABLE_VSEVT_CODE */

          /* USER CODE END ACI_GATT_TX_POOL_AVAILABLE_VSEVT_CODE */
          break;/* ACI_GATT_TX_POOL_AVAILABLE_VSEVT_CODE*/
 8009202:	e02b      	b.n	800925c <BLUZ_EventHandler+0x1d0>
        }
        case ACI_ATT_EXCHANGE_MTU_RESP_VSEVT_CODE:
        {
          aci_att_exchange_mtu_resp_event_rp0 *p_exchange_mtu;
          p_exchange_mtu = (aci_att_exchange_mtu_resp_event_rp0 *)  p_blecore_evt->data;
 8009204:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009206:	3302      	adds	r3, #2
 8009208:	627b      	str	r3, [r7, #36]	@ 0x24
          UNUSED(p_exchange_mtu);

          /* USER CODE BEGIN ACI_ATT_EXCHANGE_MTU_RESP_VSEVT_CODE */
          bzero((char *) uartBuffer, sizeof(uartBuffer));
 800920a:	4b19      	ldr	r3, [pc, #100]	@ (8009270 <BLUZ_EventHandler+0x1e4>)
 800920c:	4618      	mov	r0, r3
 800920e:	2364      	movs	r3, #100	@ 0x64
 8009210:	461a      	mov	r2, r3
 8009212:	2100      	movs	r1, #0
 8009214:	f026 f8cc 	bl	802f3b0 <memset>
          sprintf(uartBuffer, "ACI_ATT_EXCHANGE_MTU_RESP_VSEVT_CODE\n\r");
 8009218:	4916      	ldr	r1, [pc, #88]	@ (8009274 <BLUZ_EventHandler+0x1e8>)
 800921a:	4815      	ldr	r0, [pc, #84]	@ (8009270 <BLUZ_EventHandler+0x1e4>)
 800921c:	f026 f87e 	bl	802f31c <siprintf>
          HAL_UART_Transmit(&huart2, (uint8_t *) uartBuffer, strlen(uartBuffer), 100);
 8009220:	4813      	ldr	r0, [pc, #76]	@ (8009270 <BLUZ_EventHandler+0x1e4>)
 8009222:	f7f7 f80a 	bl	800023a <strlen>
 8009226:	4603      	mov	r3, r0
 8009228:	b29a      	uxth	r2, r3
 800922a:	2364      	movs	r3, #100	@ 0x64
 800922c:	4910      	ldr	r1, [pc, #64]	@ (8009270 <BLUZ_EventHandler+0x1e4>)
 800922e:	4812      	ldr	r0, [pc, #72]	@ (8009278 <BLUZ_EventHandler+0x1ec>)
 8009230:	f7fd ff94 	bl	800715c <HAL_UART_Transmit>
          if (p_exchange_mtu->Server_RX_MTU < DATA_NOTIFICATION_MAX_PACKET_SIZE)
 8009234:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009236:	885b      	ldrh	r3, [r3, #2]
 8009238:	b29b      	uxth	r3, r3
 800923a:	2bf3      	cmp	r3, #243	@ 0xf3
 800923c:	d807      	bhi.n	800924e <BLUZ_EventHandler+0x1c2>
          {
            MTUSizeValue = p_exchange_mtu->Server_RX_MTU - 3;
 800923e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009240:	885b      	ldrh	r3, [r3, #2]
 8009242:	b29b      	uxth	r3, r3
 8009244:	3b03      	subs	r3, #3
 8009246:	b29a      	uxth	r2, r3
 8009248:	4b0c      	ldr	r3, [pc, #48]	@ (800927c <BLUZ_EventHandler+0x1f0>)
 800924a:	801a      	strh	r2, [r3, #0]
          {
            MTUSizeValue = DATA_NOTIFICATION_MAX_PACKET_SIZE;
          }

          /* USER CODE END ACI_ATT_EXCHANGE_MTU_RESP_VSEVT_CODE */
          break;/* ACI_ATT_EXCHANGE_MTU_RESP_VSEVT_CODE */
 800924c:	e006      	b.n	800925c <BLUZ_EventHandler+0x1d0>
            MTUSizeValue = DATA_NOTIFICATION_MAX_PACKET_SIZE;
 800924e:	4b0b      	ldr	r3, [pc, #44]	@ (800927c <BLUZ_EventHandler+0x1f0>)
 8009250:	22f4      	movs	r2, #244	@ 0xf4
 8009252:	801a      	strh	r2, [r3, #0]
          break;/* ACI_ATT_EXCHANGE_MTU_RESP_VSEVT_CODE */
 8009254:	e002      	b.n	800925c <BLUZ_EventHandler+0x1d0>
        /* USER CODE END BLECORE_EVT */
        default:
          /* USER CODE BEGIN EVT_DEFAULT */

          /* USER CODE END EVT_DEFAULT */
          break;
 8009256:	bf00      	nop
 8009258:	e002      	b.n	8009260 <BLUZ_EventHandler+0x1d4>
          break;/* ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE */
 800925a:	bf00      	nop
      }
      /* USER CODE BEGIN EVT_VENDOR*/

      /* USER CODE END EVT_VENDOR*/
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800925c:	e000      	b.n	8009260 <BLUZ_EventHandler+0x1d4>

    default:
      /* USER CODE BEGIN EVENT_PCKT*/

      /* USER CODE END EVENT_PCKT*/
      break;
 800925e:	bf00      	nop

  /* USER CODE BEGIN Service1_EventHandler_2 */

  /* USER CODE END Service1_EventHandler_2 */

  return(return_value);
 8009260:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}/* end BLUZ_EventHandler */
 8009264:	4618      	mov	r0, r3
 8009266:	3738      	adds	r7, #56	@ 0x38
 8009268:	46bd      	mov	sp, r7
 800926a:	bd80      	pop	{r7, pc}
 800926c:	200067d4 	.word	0x200067d4
 8009270:	20001720 	.word	0x20001720
 8009274:	0802fccc 	.word	0x0802fccc
 8009278:	20001674 	.word	0x20001674
 800927c:	200067d0 	.word	0x200067d0

08009280 <BLUZ_Init>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void BLUZ_Init(void)
{
 8009280:	b580      	push	{r7, lr}
 8009282:	b08c      	sub	sp, #48	@ 0x30
 8009284:	af06      	add	r7, sp, #24
  /* USER CODE END SVCCTL_InitService1Svc_1 */

  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(BLUZ_EventHandler);
 8009286:	4866      	ldr	r0, [pc, #408]	@ (8009420 <BLUZ_Init+0x1a0>)
 8009288:	f7fe fdce 	bl	8007e28 <SVCCTL_RegisterSvcHandler>
   *                                1 for TX configuration descriptor +
   *                              = 7
   * This value doesn't take into account number of descriptors manually added
   * In case of descriptors added, please update the max_attr_record value accordingly in the next SVCCTL_InitService User Section
   */
  max_attr_record = 7;
 800928c:	2307      	movs	r3, #7
 800928e:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN SVCCTL_InitService */
  /* max_attr_record to be updated if descriptors have been added */

  /* USER CODE END SVCCTL_InitService */

  COPY_BLUZ_UUID(uuid.Char_UUID_128);
 8009290:	238f      	movs	r3, #143	@ 0x8f
 8009292:	713b      	strb	r3, [r7, #4]
 8009294:	23e5      	movs	r3, #229	@ 0xe5
 8009296:	717b      	strb	r3, [r7, #5]
 8009298:	23b3      	movs	r3, #179	@ 0xb3
 800929a:	71bb      	strb	r3, [r7, #6]
 800929c:	23d5      	movs	r3, #213	@ 0xd5
 800929e:	71fb      	strb	r3, [r7, #7]
 80092a0:	232e      	movs	r3, #46	@ 0x2e
 80092a2:	723b      	strb	r3, [r7, #8]
 80092a4:	237f      	movs	r3, #127	@ 0x7f
 80092a6:	727b      	strb	r3, [r7, #9]
 80092a8:	234a      	movs	r3, #74	@ 0x4a
 80092aa:	72bb      	strb	r3, [r7, #10]
 80092ac:	2398      	movs	r3, #152	@ 0x98
 80092ae:	72fb      	strb	r3, [r7, #11]
 80092b0:	232a      	movs	r3, #42	@ 0x2a
 80092b2:	733b      	strb	r3, [r7, #12]
 80092b4:	2348      	movs	r3, #72	@ 0x48
 80092b6:	737b      	strb	r3, [r7, #13]
 80092b8:	237a      	movs	r3, #122	@ 0x7a
 80092ba:	73bb      	strb	r3, [r7, #14]
 80092bc:	23cc      	movs	r3, #204	@ 0xcc
 80092be:	73fb      	strb	r3, [r7, #15]
 80092c0:	2380      	movs	r3, #128	@ 0x80
 80092c2:	743b      	strb	r3, [r7, #16]
 80092c4:	23fe      	movs	r3, #254	@ 0xfe
 80092c6:	747b      	strb	r3, [r7, #17]
 80092c8:	2300      	movs	r3, #0
 80092ca:	74bb      	strb	r3, [r7, #18]
 80092cc:	2300      	movs	r3, #0
 80092ce:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_service(UUID_TYPE_128,
 80092d0:	7dfb      	ldrb	r3, [r7, #23]
 80092d2:	1d39      	adds	r1, r7, #4
 80092d4:	4a53      	ldr	r2, [pc, #332]	@ (8009424 <BLUZ_Init+0x1a4>)
 80092d6:	9200      	str	r2, [sp, #0]
 80092d8:	2201      	movs	r2, #1
 80092da:	2002      	movs	r0, #2
 80092dc:	f020 f84c 	bl	8029378 <aci_gatt_add_service>
 80092e0:	4603      	mov	r3, r0
 80092e2:	75bb      	strb	r3, [r7, #22]
                             (Service_UUID_t *) &uuid,
                             PRIMARY_SERVICE,
                             max_attr_record,
                             &(BLUZ_Context.BluzSvcHdle));
  if (ret != BLE_STATUS_SUCCESS)
 80092e4:	7dbb      	ldrb	r3, [r7, #22]
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d006      	beq.n	80092f8 <BLUZ_Init+0x78>
  {
    LOG_INFO_APP("  Fail   : aci_gatt_add_service command: BluZ, error code: 0x%x \n\r", ret);
 80092ea:	7dbb      	ldrb	r3, [r7, #22]
 80092ec:	4a4e      	ldr	r2, [pc, #312]	@ (8009428 <BLUZ_Init+0x1a8>)
 80092ee:	2102      	movs	r1, #2
 80092f0:	2000      	movs	r0, #0
 80092f2:	f001 f833 	bl	800a35c <Log_Module_Print>
 80092f6:	e004      	b.n	8009302 <BLUZ_Init+0x82>
  }
  else
  {
    LOG_INFO_APP("  Success: aci_gatt_add_service command: BluZ \n\r");
 80092f8:	4a4c      	ldr	r2, [pc, #304]	@ (800942c <BLUZ_Init+0x1ac>)
 80092fa:	2102      	movs	r1, #2
 80092fc:	2000      	movs	r0, #0
 80092fe:	f001 f82d 	bl	800a35c <Log_Module_Print>
  }

  /**
   * RX
   */
  COPY_RX_UUID(uuid.Char_UUID_128);
 8009302:	2319      	movs	r3, #25
 8009304:	713b      	strb	r3, [r7, #4]
 8009306:	23ed      	movs	r3, #237	@ 0xed
 8009308:	717b      	strb	r3, [r7, #5]
 800930a:	2382      	movs	r3, #130	@ 0x82
 800930c:	71bb      	strb	r3, [r7, #6]
 800930e:	23ae      	movs	r3, #174	@ 0xae
 8009310:	71fb      	strb	r3, [r7, #7]
 8009312:	23ed      	movs	r3, #237	@ 0xed
 8009314:	723b      	strb	r3, [r7, #8]
 8009316:	2321      	movs	r3, #33	@ 0x21
 8009318:	727b      	strb	r3, [r7, #9]
 800931a:	234c      	movs	r3, #76	@ 0x4c
 800931c:	72bb      	strb	r3, [r7, #10]
 800931e:	239d      	movs	r3, #157	@ 0x9d
 8009320:	72fb      	strb	r3, [r7, #11]
 8009322:	2341      	movs	r3, #65	@ 0x41
 8009324:	733b      	strb	r3, [r7, #12]
 8009326:	2345      	movs	r3, #69	@ 0x45
 8009328:	737b      	strb	r3, [r7, #13]
 800932a:	2322      	movs	r3, #34	@ 0x22
 800932c:	73bb      	strb	r3, [r7, #14]
 800932e:	238e      	movs	r3, #142	@ 0x8e
 8009330:	73fb      	strb	r3, [r7, #15]
 8009332:	2381      	movs	r3, #129	@ 0x81
 8009334:	743b      	strb	r3, [r7, #16]
 8009336:	23fe      	movs	r3, #254	@ 0xfe
 8009338:	747b      	strb	r3, [r7, #17]
 800933a:	2300      	movs	r3, #0
 800933c:	74bb      	strb	r3, [r7, #18]
 800933e:	2300      	movs	r3, #0
 8009340:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(BLUZ_Context.BluzSvcHdle,
 8009342:	4b38      	ldr	r3, [pc, #224]	@ (8009424 <BLUZ_Init+0x1a4>)
 8009344:	8818      	ldrh	r0, [r3, #0]
 8009346:	21ff      	movs	r1, #255	@ 0xff
 8009348:	1d3a      	adds	r2, r7, #4
 800934a:	4b39      	ldr	r3, [pc, #228]	@ (8009430 <BLUZ_Init+0x1b0>)
 800934c:	9305      	str	r3, [sp, #20]
 800934e:	2300      	movs	r3, #0
 8009350:	9304      	str	r3, [sp, #16]
 8009352:	2310      	movs	r3, #16
 8009354:	9303      	str	r3, [sp, #12]
 8009356:	2301      	movs	r3, #1
 8009358:	9302      	str	r3, [sp, #8]
 800935a:	2300      	movs	r3, #0
 800935c:	9301      	str	r3, [sp, #4]
 800935e:	2310      	movs	r3, #16
 8009360:	9300      	str	r3, [sp, #0]
 8009362:	460b      	mov	r3, r1
 8009364:	2102      	movs	r1, #2
 8009366:	f020 fbef 	bl	8029b48 <aci_gatt_add_char>
 800936a:	4603      	mov	r3, r0
 800936c:	75bb      	strb	r3, [r7, #22]
                          ATTR_PERMISSION_NONE,
                          GATT_NOTIFY_ATTRIBUTE_WRITE,
                          0x10,
                          CHAR_VALUE_LEN_CONSTANT,
                          &(BLUZ_Context.RxCharHdle));
  if (ret != BLE_STATUS_SUCCESS)
 800936e:	7dbb      	ldrb	r3, [r7, #22]
 8009370:	2b00      	cmp	r3, #0
 8009372:	d006      	beq.n	8009382 <BLUZ_Init+0x102>
  {
    LOG_INFO_APP("  Fail   : aci_gatt_add_char command   : RX, error code: 0x%2X\n", ret);
 8009374:	7dbb      	ldrb	r3, [r7, #22]
 8009376:	4a2f      	ldr	r2, [pc, #188]	@ (8009434 <BLUZ_Init+0x1b4>)
 8009378:	2102      	movs	r1, #2
 800937a:	2000      	movs	r0, #0
 800937c:	f000 ffee 	bl	800a35c <Log_Module_Print>
 8009380:	e004      	b.n	800938c <BLUZ_Init+0x10c>
  }
  else
  {
    LOG_INFO_APP("  Success: aci_gatt_add_char command   : RX\n");
 8009382:	4a2d      	ldr	r2, [pc, #180]	@ (8009438 <BLUZ_Init+0x1b8>)
 8009384:	2102      	movs	r1, #2
 8009386:	2000      	movs	r0, #0
 8009388:	f000 ffe8 	bl	800a35c <Log_Module_Print>
  /* USER CODE END SVCCTL_InitService1Char1 */

  /**
   * TX
   */
  COPY_TX_UUID(uuid.Char_UUID_128);
 800938c:	2319      	movs	r3, #25
 800938e:	713b      	strb	r3, [r7, #4]
 8009390:	23ed      	movs	r3, #237	@ 0xed
 8009392:	717b      	strb	r3, [r7, #5]
 8009394:	2382      	movs	r3, #130	@ 0x82
 8009396:	71bb      	strb	r3, [r7, #6]
 8009398:	23ae      	movs	r3, #174	@ 0xae
 800939a:	71fb      	strb	r3, [r7, #7]
 800939c:	23ed      	movs	r3, #237	@ 0xed
 800939e:	723b      	strb	r3, [r7, #8]
 80093a0:	2321      	movs	r3, #33	@ 0x21
 80093a2:	727b      	strb	r3, [r7, #9]
 80093a4:	234c      	movs	r3, #76	@ 0x4c
 80093a6:	72bb      	strb	r3, [r7, #10]
 80093a8:	239d      	movs	r3, #157	@ 0x9d
 80093aa:	72fb      	strb	r3, [r7, #11]
 80093ac:	2341      	movs	r3, #65	@ 0x41
 80093ae:	733b      	strb	r3, [r7, #12]
 80093b0:	2345      	movs	r3, #69	@ 0x45
 80093b2:	737b      	strb	r3, [r7, #13]
 80093b4:	2322      	movs	r3, #34	@ 0x22
 80093b6:	73bb      	strb	r3, [r7, #14]
 80093b8:	238e      	movs	r3, #142	@ 0x8e
 80093ba:	73fb      	strb	r3, [r7, #15]
 80093bc:	2382      	movs	r3, #130	@ 0x82
 80093be:	743b      	strb	r3, [r7, #16]
 80093c0:	23fe      	movs	r3, #254	@ 0xfe
 80093c2:	747b      	strb	r3, [r7, #17]
 80093c4:	2300      	movs	r3, #0
 80093c6:	74bb      	strb	r3, [r7, #18]
 80093c8:	2300      	movs	r3, #0
 80093ca:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(BLUZ_Context.BluzSvcHdle,
 80093cc:	4b15      	ldr	r3, [pc, #84]	@ (8009424 <BLUZ_Init+0x1a4>)
 80093ce:	8818      	ldrh	r0, [r3, #0]
 80093d0:	21ff      	movs	r1, #255	@ 0xff
 80093d2:	1d3a      	adds	r2, r7, #4
 80093d4:	4b19      	ldr	r3, [pc, #100]	@ (800943c <BLUZ_Init+0x1bc>)
 80093d6:	9305      	str	r3, [sp, #20]
 80093d8:	2300      	movs	r3, #0
 80093da:	9304      	str	r3, [sp, #16]
 80093dc:	2310      	movs	r3, #16
 80093de:	9303      	str	r3, [sp, #12]
 80093e0:	2301      	movs	r3, #1
 80093e2:	9302      	str	r3, [sp, #8]
 80093e4:	2300      	movs	r3, #0
 80093e6:	9301      	str	r3, [sp, #4]
 80093e8:	2314      	movs	r3, #20
 80093ea:	9300      	str	r3, [sp, #0]
 80093ec:	460b      	mov	r3, r1
 80093ee:	2102      	movs	r1, #2
 80093f0:	f020 fbaa 	bl	8029b48 <aci_gatt_add_char>
 80093f4:	4603      	mov	r3, r0
 80093f6:	75bb      	strb	r3, [r7, #22]
                          ATTR_PERMISSION_NONE,
                          GATT_NOTIFY_ATTRIBUTE_WRITE,
                          0x10,
                          CHAR_VALUE_LEN_CONSTANT,
                          &(BLUZ_Context.TxCharHdle));
  if (ret != BLE_STATUS_SUCCESS)
 80093f8:	7dbb      	ldrb	r3, [r7, #22]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d006      	beq.n	800940c <BLUZ_Init+0x18c>
  {
    LOG_INFO_APP("  Fail   : aci_gatt_add_char command   : TX, error code: 0x%2X\n", ret);
 80093fe:	7dbb      	ldrb	r3, [r7, #22]
 8009400:	4a0f      	ldr	r2, [pc, #60]	@ (8009440 <BLUZ_Init+0x1c0>)
 8009402:	2102      	movs	r1, #2
 8009404:	2000      	movs	r0, #0
 8009406:	f000 ffa9 	bl	800a35c <Log_Module_Print>

  /* USER CODE BEGIN SVCCTL_InitService1Svc_2 */

  /* USER CODE END SVCCTL_InitService1Svc_2 */

  return;
 800940a:	e005      	b.n	8009418 <BLUZ_Init+0x198>
    LOG_INFO_APP("  Success: aci_gatt_add_char command   : TX\n");
 800940c:	4a0d      	ldr	r2, [pc, #52]	@ (8009444 <BLUZ_Init+0x1c4>)
 800940e:	2102      	movs	r1, #2
 8009410:	2000      	movs	r0, #0
 8009412:	f000 ffa3 	bl	800a35c <Log_Module_Print>
  return;
 8009416:	bf00      	nop
}
 8009418:	3718      	adds	r7, #24
 800941a:	46bd      	mov	sp, r7
 800941c:	bd80      	pop	{r7, pc}
 800941e:	bf00      	nop
 8009420:	0800908d 	.word	0x0800908d
 8009424:	200067d4 	.word	0x200067d4
 8009428:	0802fcf4 	.word	0x0802fcf4
 800942c:	0802fd38 	.word	0x0802fd38
 8009430:	200067d6 	.word	0x200067d6
 8009434:	0802fd6c 	.word	0x0802fd6c
 8009438:	0802fdac 	.word	0x0802fdac
 800943c:	200067d8 	.word	0x200067d8
 8009440:	0802fddc 	.word	0x0802fddc
 8009444:	0802fe1c 	.word	0x0802fe1c

08009448 <BLUZ_UpdateValue>:
 * @param  CharOpcode: Characteristic identifier
 * @param  Service_Instance: Instance of the service to which the characteristic belongs
 *
 */
tBleStatus BLUZ_UpdateValue(BLUZ_CharOpcode_t CharOpcode, BLUZ_Data_t *pData)
{
 8009448:	b580      	push	{r7, lr}
 800944a:	b086      	sub	sp, #24
 800944c:	af02      	add	r7, sp, #8
 800944e:	4603      	mov	r3, r0
 8009450:	6039      	str	r1, [r7, #0]
 8009452:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8009454:	2392      	movs	r3, #146	@ 0x92
 8009456:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN Service1_App_Update_Char_1 */
	bzero((char *) uartBuffer, sizeof(uartBuffer));
 8009458:	4b53      	ldr	r3, [pc, #332]	@ (80095a8 <BLUZ_UpdateValue+0x160>)
 800945a:	4618      	mov	r0, r3
 800945c:	2364      	movs	r3, #100	@ 0x64
 800945e:	461a      	mov	r2, r3
 8009460:	2100      	movs	r1, #0
 8009462:	f025 ffa5 	bl	802f3b0 <memset>
	sprintf(uartBuffer, "Service1_App_Update_Char_1\n\rLength: %d\n\r", pData->Length);
 8009466:	683b      	ldr	r3, [r7, #0]
 8009468:	791b      	ldrb	r3, [r3, #4]
 800946a:	461a      	mov	r2, r3
 800946c:	494f      	ldr	r1, [pc, #316]	@ (80095ac <BLUZ_UpdateValue+0x164>)
 800946e:	484e      	ldr	r0, [pc, #312]	@ (80095a8 <BLUZ_UpdateValue+0x160>)
 8009470:	f025 ff54 	bl	802f31c <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t *) uartBuffer, strlen(uartBuffer), 100);
 8009474:	484c      	ldr	r0, [pc, #304]	@ (80095a8 <BLUZ_UpdateValue+0x160>)
 8009476:	f7f6 fee0 	bl	800023a <strlen>
 800947a:	4603      	mov	r3, r0
 800947c:	b29a      	uxth	r2, r3
 800947e:	2364      	movs	r3, #100	@ 0x64
 8009480:	4949      	ldr	r1, [pc, #292]	@ (80095a8 <BLUZ_UpdateValue+0x160>)
 8009482:	484b      	ldr	r0, [pc, #300]	@ (80095b0 <BLUZ_UpdateValue+0x168>)
 8009484:	f7fd fe6a 	bl	800715c <HAL_UART_Transmit>

  /* USER CODE END Service1_App_Update_Char_1 */

  switch(CharOpcode)
 8009488:	79fb      	ldrb	r3, [r7, #7]
 800948a:	2b00      	cmp	r3, #0
 800948c:	d002      	beq.n	8009494 <BLUZ_UpdateValue+0x4c>
 800948e:	2b01      	cmp	r3, #1
 8009490:	d051      	beq.n	8009536 <BLUZ_UpdateValue+0xee>
		HAL_UART_Transmit(&huart2, (uint8_t *) uartBuffer, strlen(uartBuffer), 100);
      /* USER CODE END Service1_Char_Value_2*/
      break;

    default:
      break;
 8009492:	e084      	b.n	800959e <BLUZ_UpdateValue+0x156>
      ret = aci_gatt_update_char_value(BLUZ_Context.BluzSvcHdle,
 8009494:	4b47      	ldr	r3, [pc, #284]	@ (80095b4 <BLUZ_UpdateValue+0x16c>)
 8009496:	8818      	ldrh	r0, [r3, #0]
 8009498:	4b46      	ldr	r3, [pc, #280]	@ (80095b4 <BLUZ_UpdateValue+0x16c>)
 800949a:	8859      	ldrh	r1, [r3, #2]
 800949c:	683b      	ldr	r3, [r7, #0]
 800949e:	791a      	ldrb	r2, [r3, #4]
                                       (uint8_t *)pData->p_Payload);
 80094a0:	683b      	ldr	r3, [r7, #0]
 80094a2:	681b      	ldr	r3, [r3, #0]
      ret = aci_gatt_update_char_value(BLUZ_Context.BluzSvcHdle,
 80094a4:	9300      	str	r3, [sp, #0]
 80094a6:	4613      	mov	r3, r2
 80094a8:	2200      	movs	r2, #0
 80094aa:	f020 f9a5 	bl	80297f8 <aci_gatt_update_char_value>
 80094ae:	4603      	mov	r3, r0
 80094b0:	73fb      	strb	r3, [r7, #15]
      if (ret != BLE_STATUS_SUCCESS)
 80094b2:	7bfb      	ldrb	r3, [r7, #15]
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d006      	beq.n	80094c6 <BLUZ_UpdateValue+0x7e>
        LOG_INFO_APP("  Fail   : aci_gatt_update_char_value RX command, error code: 0x%2X\n", ret);
 80094b8:	7bfb      	ldrb	r3, [r7, #15]
 80094ba:	4a3f      	ldr	r2, [pc, #252]	@ (80095b8 <BLUZ_UpdateValue+0x170>)
 80094bc:	2102      	movs	r1, #2
 80094be:	2000      	movs	r0, #0
 80094c0:	f000 ff4c 	bl	800a35c <Log_Module_Print>
 80094c4:	e004      	b.n	80094d0 <BLUZ_UpdateValue+0x88>
        LOG_INFO_APP("  Success: aci_gatt_update_char_value RX command\n");
 80094c6:	4a3d      	ldr	r2, [pc, #244]	@ (80095bc <BLUZ_UpdateValue+0x174>)
 80094c8:	2102      	movs	r1, #2
 80094ca:	2000      	movs	r0, #0
 80094cc:	f000 ff46 	bl	800a35c <Log_Module_Print>
		bzero((char *) uartBuffer, sizeof(uartBuffer));
 80094d0:	4b35      	ldr	r3, [pc, #212]	@ (80095a8 <BLUZ_UpdateValue+0x160>)
 80094d2:	4618      	mov	r0, r3
 80094d4:	2364      	movs	r3, #100	@ 0x64
 80094d6:	461a      	mov	r2, r3
 80094d8:	2100      	movs	r1, #0
 80094da:	f025 ff69 	bl	802f3b0 <memset>
		sprintf(uartBuffer, "Service1_Char_Value_1\n\r");
 80094de:	4938      	ldr	r1, [pc, #224]	@ (80095c0 <BLUZ_UpdateValue+0x178>)
 80094e0:	4831      	ldr	r0, [pc, #196]	@ (80095a8 <BLUZ_UpdateValue+0x160>)
 80094e2:	f025 ff1b 	bl	802f31c <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t *) uartBuffer, strlen(uartBuffer), 100);
 80094e6:	4830      	ldr	r0, [pc, #192]	@ (80095a8 <BLUZ_UpdateValue+0x160>)
 80094e8:	f7f6 fea7 	bl	800023a <strlen>
 80094ec:	4603      	mov	r3, r0
 80094ee:	b29a      	uxth	r2, r3
 80094f0:	2364      	movs	r3, #100	@ 0x64
 80094f2:	492d      	ldr	r1, [pc, #180]	@ (80095a8 <BLUZ_UpdateValue+0x160>)
 80094f4:	482e      	ldr	r0, [pc, #184]	@ (80095b0 <BLUZ_UpdateValue+0x168>)
 80094f6:	f7fd fe31 	bl	800715c <HAL_UART_Transmit>
		bzero((char *) uartBuffer, sizeof(uartBuffer));
 80094fa:	4b2b      	ldr	r3, [pc, #172]	@ (80095a8 <BLUZ_UpdateValue+0x160>)
 80094fc:	4618      	mov	r0, r3
 80094fe:	2364      	movs	r3, #100	@ 0x64
 8009500:	461a      	mov	r2, r3
 8009502:	2100      	movs	r1, #0
 8009504:	f025 ff54 	bl	802f3b0 <memset>
		if (ret != BLE_STATUS_SUCCESS) {
 8009508:	7bfb      	ldrb	r3, [r7, #15]
 800950a:	2b00      	cmp	r3, #0
 800950c:	d004      	beq.n	8009518 <BLUZ_UpdateValue+0xd0>
			sprintf(uartBuffer, "NO SUCCESS\n\r");
 800950e:	492d      	ldr	r1, [pc, #180]	@ (80095c4 <BLUZ_UpdateValue+0x17c>)
 8009510:	4825      	ldr	r0, [pc, #148]	@ (80095a8 <BLUZ_UpdateValue+0x160>)
 8009512:	f025 ff03 	bl	802f31c <siprintf>
 8009516:	e003      	b.n	8009520 <BLUZ_UpdateValue+0xd8>
			sprintf(uartBuffer, "SUCCESS\n\r");
 8009518:	492b      	ldr	r1, [pc, #172]	@ (80095c8 <BLUZ_UpdateValue+0x180>)
 800951a:	4823      	ldr	r0, [pc, #140]	@ (80095a8 <BLUZ_UpdateValue+0x160>)
 800951c:	f025 fefe 	bl	802f31c <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t *) uartBuffer, strlen(uartBuffer), 100);
 8009520:	4821      	ldr	r0, [pc, #132]	@ (80095a8 <BLUZ_UpdateValue+0x160>)
 8009522:	f7f6 fe8a 	bl	800023a <strlen>
 8009526:	4603      	mov	r3, r0
 8009528:	b29a      	uxth	r2, r3
 800952a:	2364      	movs	r3, #100	@ 0x64
 800952c:	491e      	ldr	r1, [pc, #120]	@ (80095a8 <BLUZ_UpdateValue+0x160>)
 800952e:	4820      	ldr	r0, [pc, #128]	@ (80095b0 <BLUZ_UpdateValue+0x168>)
 8009530:	f7fd fe14 	bl	800715c <HAL_UART_Transmit>
      break;
 8009534:	e033      	b.n	800959e <BLUZ_UpdateValue+0x156>
      ret = aci_gatt_update_char_value(BLUZ_Context.BluzSvcHdle,
 8009536:	4b1f      	ldr	r3, [pc, #124]	@ (80095b4 <BLUZ_UpdateValue+0x16c>)
 8009538:	8818      	ldrh	r0, [r3, #0]
 800953a:	4b1e      	ldr	r3, [pc, #120]	@ (80095b4 <BLUZ_UpdateValue+0x16c>)
 800953c:	8899      	ldrh	r1, [r3, #4]
 800953e:	683b      	ldr	r3, [r7, #0]
 8009540:	791a      	ldrb	r2, [r3, #4]
                                       (uint8_t *)pData->p_Payload);
 8009542:	683b      	ldr	r3, [r7, #0]
 8009544:	681b      	ldr	r3, [r3, #0]
      ret = aci_gatt_update_char_value(BLUZ_Context.BluzSvcHdle,
 8009546:	9300      	str	r3, [sp, #0]
 8009548:	4613      	mov	r3, r2
 800954a:	2200      	movs	r2, #0
 800954c:	f020 f954 	bl	80297f8 <aci_gatt_update_char_value>
 8009550:	4603      	mov	r3, r0
 8009552:	73fb      	strb	r3, [r7, #15]
      if (ret != BLE_STATUS_SUCCESS)
 8009554:	7bfb      	ldrb	r3, [r7, #15]
 8009556:	2b00      	cmp	r3, #0
 8009558:	d006      	beq.n	8009568 <BLUZ_UpdateValue+0x120>
        LOG_INFO_APP("  Fail   : aci_gatt_update_char_value TX command, error code: 0x%2X\n", ret);
 800955a:	7bfb      	ldrb	r3, [r7, #15]
 800955c:	4a1b      	ldr	r2, [pc, #108]	@ (80095cc <BLUZ_UpdateValue+0x184>)
 800955e:	2102      	movs	r1, #2
 8009560:	2000      	movs	r0, #0
 8009562:	f000 fefb 	bl	800a35c <Log_Module_Print>
 8009566:	e004      	b.n	8009572 <BLUZ_UpdateValue+0x12a>
        LOG_INFO_APP("  Success: aci_gatt_update_char_value TX command\n");
 8009568:	4a19      	ldr	r2, [pc, #100]	@ (80095d0 <BLUZ_UpdateValue+0x188>)
 800956a:	2102      	movs	r1, #2
 800956c:	2000      	movs	r0, #0
 800956e:	f000 fef5 	bl	800a35c <Log_Module_Print>
		bzero((char *) uartBuffer, sizeof(uartBuffer));
 8009572:	4b0d      	ldr	r3, [pc, #52]	@ (80095a8 <BLUZ_UpdateValue+0x160>)
 8009574:	4618      	mov	r0, r3
 8009576:	2364      	movs	r3, #100	@ 0x64
 8009578:	461a      	mov	r2, r3
 800957a:	2100      	movs	r1, #0
 800957c:	f025 ff18 	bl	802f3b0 <memset>
		sprintf(uartBuffer, "Service1_Char_Value_2\n\r");
 8009580:	4914      	ldr	r1, [pc, #80]	@ (80095d4 <BLUZ_UpdateValue+0x18c>)
 8009582:	4809      	ldr	r0, [pc, #36]	@ (80095a8 <BLUZ_UpdateValue+0x160>)
 8009584:	f025 feca 	bl	802f31c <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t *) uartBuffer, strlen(uartBuffer), 100);
 8009588:	4807      	ldr	r0, [pc, #28]	@ (80095a8 <BLUZ_UpdateValue+0x160>)
 800958a:	f7f6 fe56 	bl	800023a <strlen>
 800958e:	4603      	mov	r3, r0
 8009590:	b29a      	uxth	r2, r3
 8009592:	2364      	movs	r3, #100	@ 0x64
 8009594:	4904      	ldr	r1, [pc, #16]	@ (80095a8 <BLUZ_UpdateValue+0x160>)
 8009596:	4806      	ldr	r0, [pc, #24]	@ (80095b0 <BLUZ_UpdateValue+0x168>)
 8009598:	f7fd fde0 	bl	800715c <HAL_UART_Transmit>
      break;
 800959c:	bf00      	nop

  /* USER CODE BEGIN Service1_App_Update_Char_2 */

  /* USER CODE END Service1_App_Update_Char_2 */

  return ret;
 800959e:	7bfb      	ldrb	r3, [r7, #15]
}
 80095a0:	4618      	mov	r0, r3
 80095a2:	3710      	adds	r7, #16
 80095a4:	46bd      	mov	sp, r7
 80095a6:	bd80      	pop	{r7, pc}
 80095a8:	20001720 	.word	0x20001720
 80095ac:	0802fe4c 	.word	0x0802fe4c
 80095b0:	20001674 	.word	0x20001674
 80095b4:	200067d4 	.word	0x200067d4
 80095b8:	0802fe78 	.word	0x0802fe78
 80095bc:	0802fec0 	.word	0x0802fec0
 80095c0:	0802fef4 	.word	0x0802fef4
 80095c4:	0802ff0c 	.word	0x0802ff0c
 80095c8:	0802ff1c 	.word	0x0802ff1c
 80095cc:	0802ff28 	.word	0x0802ff28
 80095d0:	0802ff70 	.word	0x0802ff70
 80095d4:	0802ffa4 	.word	0x0802ffa4

080095d8 <BLUZ_Notification>:
static uint8_t Notification_Data_Buffer[DATA_NOTIFICATION_MAX_PACKET_SIZE]; /* DATA_NOTIFICATION_MAX_PACKET_SIZE data + CRC */
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void BLUZ_Notification(BLUZ_NotificationEvt_t *p_Notification)
{
 80095d8:	b580      	push	{r7, lr}
 80095da:	b084      	sub	sp, #16
 80095dc:	af00      	add	r7, sp, #0
 80095de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Service1_Notification_1 */
	bzero((char *) uartBuffer, sizeof(uartBuffer));
 80095e0:	4b69      	ldr	r3, [pc, #420]	@ (8009788 <BLUZ_Notification+0x1b0>)
 80095e2:	4618      	mov	r0, r3
 80095e4:	2364      	movs	r3, #100	@ 0x64
 80095e6:	461a      	mov	r2, r3
 80095e8:	2100      	movs	r1, #0
 80095ea:	f025 fee1 	bl	802f3b0 <memset>
	sprintf(uartBuffer, "Service1_Notification_1\n\r");
 80095ee:	4967      	ldr	r1, [pc, #412]	@ (800978c <BLUZ_Notification+0x1b4>)
 80095f0:	4865      	ldr	r0, [pc, #404]	@ (8009788 <BLUZ_Notification+0x1b0>)
 80095f2:	f025 fe93 	bl	802f31c <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t *) uartBuffer, strlen(uartBuffer), 100);
 80095f6:	4864      	ldr	r0, [pc, #400]	@ (8009788 <BLUZ_Notification+0x1b0>)
 80095f8:	f7f6 fe1f 	bl	800023a <strlen>
 80095fc:	4603      	mov	r3, r0
 80095fe:	b29a      	uxth	r2, r3
 8009600:	2364      	movs	r3, #100	@ 0x64
 8009602:	4961      	ldr	r1, [pc, #388]	@ (8009788 <BLUZ_Notification+0x1b0>)
 8009604:	4862      	ldr	r0, [pc, #392]	@ (8009790 <BLUZ_Notification+0x1b8>)
 8009606:	f7fd fda9 	bl	800715c <HAL_UART_Transmit>

  /* USER CODE END Service1_Notification_1 */
  switch(p_Notification->EvtOpcode)
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	781b      	ldrb	r3, [r3, #0]
 800960e:	2b04      	cmp	r3, #4
 8009610:	f200 80b3 	bhi.w	800977a <BLUZ_Notification+0x1a2>
 8009614:	a201      	add	r2, pc, #4	@ (adr r2, 800961c <BLUZ_Notification+0x44>)
 8009616:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800961a:	bf00      	nop
 800961c:	08009631 	.word	0x08009631
 8009620:	0800965d 	.word	0x0800965d
 8009624:	08009689 	.word	0x08009689
 8009628:	08009723 	.word	0x08009723
 800962c:	0800974f 	.word	0x0800974f
*/
    /* USER CODE END Service1_Notification_Service1_EvtOpcode */

    case BLUZ_RX_NOTIFY_ENABLED_EVT:
      /* USER CODE BEGIN Service1Char1_NOTIFY_ENABLED_EVT */
    	bzero((char *) uartBuffer, sizeof(uartBuffer));
 8009630:	4b55      	ldr	r3, [pc, #340]	@ (8009788 <BLUZ_Notification+0x1b0>)
 8009632:	4618      	mov	r0, r3
 8009634:	2364      	movs	r3, #100	@ 0x64
 8009636:	461a      	mov	r2, r3
 8009638:	2100      	movs	r1, #0
 800963a:	f025 feb9 	bl	802f3b0 <memset>
    	sprintf(uartBuffer, "Service1Char1_NOTIFY_ENABLED_EVT\n\r");
 800963e:	4955      	ldr	r1, [pc, #340]	@ (8009794 <BLUZ_Notification+0x1bc>)
 8009640:	4851      	ldr	r0, [pc, #324]	@ (8009788 <BLUZ_Notification+0x1b0>)
 8009642:	f025 fe6b 	bl	802f31c <siprintf>
    	HAL_UART_Transmit(&huart2, (uint8_t *) uartBuffer, strlen(uartBuffer), 100);
 8009646:	4850      	ldr	r0, [pc, #320]	@ (8009788 <BLUZ_Notification+0x1b0>)
 8009648:	f7f6 fdf7 	bl	800023a <strlen>
 800964c:	4603      	mov	r3, r0
 800964e:	b29a      	uxth	r2, r3
 8009650:	2364      	movs	r3, #100	@ 0x64
 8009652:	494d      	ldr	r1, [pc, #308]	@ (8009788 <BLUZ_Notification+0x1b0>)
 8009654:	484e      	ldr	r0, [pc, #312]	@ (8009790 <BLUZ_Notification+0x1b8>)
 8009656:	f7fd fd81 	bl	800715c <HAL_UART_Transmit>
      /* USER CODE END Service1Char1_NOTIFY_ENABLED_EVT */
      break;
 800965a:	e091      	b.n	8009780 <BLUZ_Notification+0x1a8>

    case BLUZ_RX_NOTIFY_DISABLED_EVT:
      /* USER CODE BEGIN Service1Char1_NOTIFY_DISABLED_EVT */
    	bzero((char *) uartBuffer, sizeof(uartBuffer));
 800965c:	4b4a      	ldr	r3, [pc, #296]	@ (8009788 <BLUZ_Notification+0x1b0>)
 800965e:	4618      	mov	r0, r3
 8009660:	2364      	movs	r3, #100	@ 0x64
 8009662:	461a      	mov	r2, r3
 8009664:	2100      	movs	r1, #0
 8009666:	f025 fea3 	bl	802f3b0 <memset>
    	sprintf(uartBuffer, "Service1Char1_NOTIFY_DISABLED_EVT\n\r");
 800966a:	494b      	ldr	r1, [pc, #300]	@ (8009798 <BLUZ_Notification+0x1c0>)
 800966c:	4846      	ldr	r0, [pc, #280]	@ (8009788 <BLUZ_Notification+0x1b0>)
 800966e:	f025 fe55 	bl	802f31c <siprintf>
    	HAL_UART_Transmit(&huart2, (uint8_t *) uartBuffer, strlen(uartBuffer), 100);
 8009672:	4845      	ldr	r0, [pc, #276]	@ (8009788 <BLUZ_Notification+0x1b0>)
 8009674:	f7f6 fde1 	bl	800023a <strlen>
 8009678:	4603      	mov	r3, r0
 800967a:	b29a      	uxth	r2, r3
 800967c:	2364      	movs	r3, #100	@ 0x64
 800967e:	4942      	ldr	r1, [pc, #264]	@ (8009788 <BLUZ_Notification+0x1b0>)
 8009680:	4843      	ldr	r0, [pc, #268]	@ (8009790 <BLUZ_Notification+0x1b8>)
 8009682:	f7fd fd6b 	bl	800715c <HAL_UART_Transmit>
      /* USER CODE END Service1Char1_NOTIFY_DISABLED_EVT */
      break;
 8009686:	e07b      	b.n	8009780 <BLUZ_Notification+0x1a8>

    case BLUZ_TX_WRITE_NO_RESP_EVT:
      /* USER CODE BEGIN Service1Char2_WRITE_NO_RESP_EVT */
    	/* Прием данных со смартфона */
    	bzero((char *) uartBuffer, sizeof(uartBuffer));
 8009688:	4b3f      	ldr	r3, [pc, #252]	@ (8009788 <BLUZ_Notification+0x1b0>)
 800968a:	4618      	mov	r0, r3
 800968c:	2364      	movs	r3, #100	@ 0x64
 800968e:	461a      	mov	r2, r3
 8009690:	2100      	movs	r1, #0
 8009692:	f025 fe8d 	bl	802f3b0 <memset>
    	sprintf(uartBuffer, "Service1Char2_WRITE_NO_RESP_EVT\n\r");
 8009696:	4941      	ldr	r1, [pc, #260]	@ (800979c <BLUZ_Notification+0x1c4>)
 8009698:	483b      	ldr	r0, [pc, #236]	@ (8009788 <BLUZ_Notification+0x1b0>)
 800969a:	f025 fe3f 	bl	802f31c <siprintf>
    	HAL_UART_Transmit(&huart2, (uint8_t *) uartBuffer, strlen(uartBuffer), 100);
 800969e:	483a      	ldr	r0, [pc, #232]	@ (8009788 <BLUZ_Notification+0x1b0>)
 80096a0:	f7f6 fdcb 	bl	800023a <strlen>
 80096a4:	4603      	mov	r3, r0
 80096a6:	b29a      	uxth	r2, r3
 80096a8:	2364      	movs	r3, #100	@ 0x64
 80096aa:	4937      	ldr	r1, [pc, #220]	@ (8009788 <BLUZ_Notification+0x1b0>)
 80096ac:	4838      	ldr	r0, [pc, #224]	@ (8009790 <BLUZ_Notification+0x1b8>)
 80096ae:	f7fd fd55 	bl	800715c <HAL_UART_Transmit>
		if (p_Notification->DataTransfered.Length > 10) {
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	7a1b      	ldrb	r3, [r3, #8]
 80096b6:	2b0a      	cmp	r3, #10
 80096b8:	d961      	bls.n	800977e <BLUZ_Notification+0x1a6>
			bzero((char *) uartBuffer, sizeof(uartBuffer));
 80096ba:	4b33      	ldr	r3, [pc, #204]	@ (8009788 <BLUZ_Notification+0x1b0>)
 80096bc:	4618      	mov	r0, r3
 80096be:	2364      	movs	r3, #100	@ 0x64
 80096c0:	461a      	mov	r2, r3
 80096c2:	2100      	movs	r1, #0
 80096c4:	f025 fe74 	bl	802f3b0 <memset>
			sprintf(uartBuffer, "bz_rx_app: DataTransfered\n\r");
 80096c8:	4935      	ldr	r1, [pc, #212]	@ (80097a0 <BLUZ_Notification+0x1c8>)
 80096ca:	482f      	ldr	r0, [pc, #188]	@ (8009788 <BLUZ_Notification+0x1b0>)
 80096cc:	f025 fe26 	bl	802f31c <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t *) uartBuffer, sizeof(uartBuffer), 100);
 80096d0:	2364      	movs	r3, #100	@ 0x64
 80096d2:	2264      	movs	r2, #100	@ 0x64
 80096d4:	492c      	ldr	r1, [pc, #176]	@ (8009788 <BLUZ_Notification+0x1b0>)
 80096d6:	482e      	ldr	r0, [pc, #184]	@ (8009790 <BLUZ_Notification+0x1b8>)
 80096d8:	f7fd fd40 	bl	800715c <HAL_UART_Transmit>
			for (int iii = 0; iii < p_Notification->DataTransfered.Length; iii++) {
 80096dc:	2300      	movs	r3, #0
 80096de:	60fb      	str	r3, [r7, #12]
 80096e0:	e012      	b.n	8009708 <BLUZ_Notification+0x130>
				sprintf(uartBuffer, "%02X ", p_Notification->DataTransfered.p_Payload[iii]);
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	685a      	ldr	r2, [r3, #4]
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	4413      	add	r3, r2
 80096ea:	781b      	ldrb	r3, [r3, #0]
 80096ec:	461a      	mov	r2, r3
 80096ee:	492d      	ldr	r1, [pc, #180]	@ (80097a4 <BLUZ_Notification+0x1cc>)
 80096f0:	4825      	ldr	r0, [pc, #148]	@ (8009788 <BLUZ_Notification+0x1b0>)
 80096f2:	f025 fe13 	bl	802f31c <siprintf>
				HAL_UART_Transmit(&huart2, (uint8_t *) uartBuffer, 3, 100);
 80096f6:	2364      	movs	r3, #100	@ 0x64
 80096f8:	2203      	movs	r2, #3
 80096fa:	4923      	ldr	r1, [pc, #140]	@ (8009788 <BLUZ_Notification+0x1b0>)
 80096fc:	4824      	ldr	r0, [pc, #144]	@ (8009790 <BLUZ_Notification+0x1b8>)
 80096fe:	f7fd fd2d 	bl	800715c <HAL_UART_Transmit>
			for (int iii = 0; iii < p_Notification->DataTransfered.Length; iii++) {
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	3301      	adds	r3, #1
 8009706:	60fb      	str	r3, [r7, #12]
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	7a1b      	ldrb	r3, [r3, #8]
 800970c:	461a      	mov	r2, r3
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	4293      	cmp	r3, r2
 8009712:	dbe6      	blt.n	80096e2 <BLUZ_Notification+0x10a>
			}
			HAL_UART_Transmit(&huart2, (uint8_t *) "\n\r", 2, 100);
 8009714:	2364      	movs	r3, #100	@ 0x64
 8009716:	2202      	movs	r2, #2
 8009718:	4923      	ldr	r1, [pc, #140]	@ (80097a8 <BLUZ_Notification+0x1d0>)
 800971a:	481d      	ldr	r0, [pc, #116]	@ (8009790 <BLUZ_Notification+0x1b8>)
 800971c:	f7fd fd1e 	bl	800715c <HAL_UART_Transmit>
		}
      /* USER CODE END Service1Char2_WRITE_NO_RESP_EVT */
      break;
 8009720:	e02d      	b.n	800977e <BLUZ_Notification+0x1a6>

    case BLUZ_TX_NOTIFY_ENABLED_EVT:
      /* USER CODE BEGIN Service1Char2_NOTIFY_ENABLED_EVT */
    	bzero((char *) uartBuffer, sizeof(uartBuffer));
 8009722:	4b19      	ldr	r3, [pc, #100]	@ (8009788 <BLUZ_Notification+0x1b0>)
 8009724:	4618      	mov	r0, r3
 8009726:	2364      	movs	r3, #100	@ 0x64
 8009728:	461a      	mov	r2, r3
 800972a:	2100      	movs	r1, #0
 800972c:	f025 fe40 	bl	802f3b0 <memset>
    	sprintf(uartBuffer, "Service1Char2_NOTIFY_ENABLED_EVT\n\r");
 8009730:	491e      	ldr	r1, [pc, #120]	@ (80097ac <BLUZ_Notification+0x1d4>)
 8009732:	4815      	ldr	r0, [pc, #84]	@ (8009788 <BLUZ_Notification+0x1b0>)
 8009734:	f025 fdf2 	bl	802f31c <siprintf>
    	HAL_UART_Transmit(&huart2, (uint8_t *) uartBuffer, strlen(uartBuffer), 100);
 8009738:	4813      	ldr	r0, [pc, #76]	@ (8009788 <BLUZ_Notification+0x1b0>)
 800973a:	f7f6 fd7e 	bl	800023a <strlen>
 800973e:	4603      	mov	r3, r0
 8009740:	b29a      	uxth	r2, r3
 8009742:	2364      	movs	r3, #100	@ 0x64
 8009744:	4910      	ldr	r1, [pc, #64]	@ (8009788 <BLUZ_Notification+0x1b0>)
 8009746:	4812      	ldr	r0, [pc, #72]	@ (8009790 <BLUZ_Notification+0x1b8>)
 8009748:	f7fd fd08 	bl	800715c <HAL_UART_Transmit>
      /* USER CODE END Service1Char2_NOTIFY_ENABLED_EVT */
      break;
 800974c:	e018      	b.n	8009780 <BLUZ_Notification+0x1a8>

    case BLUZ_TX_NOTIFY_DISABLED_EVT:
      /* USER CODE BEGIN Service1Char2_NOTIFY_DISABLED_EVT */
    	bzero((char *) uartBuffer, sizeof(uartBuffer));
 800974e:	4b0e      	ldr	r3, [pc, #56]	@ (8009788 <BLUZ_Notification+0x1b0>)
 8009750:	4618      	mov	r0, r3
 8009752:	2364      	movs	r3, #100	@ 0x64
 8009754:	461a      	mov	r2, r3
 8009756:	2100      	movs	r1, #0
 8009758:	f025 fe2a 	bl	802f3b0 <memset>
    	sprintf(uartBuffer, "Service1Char2_NOTIFY_DISABLED_EVT\n\r");
 800975c:	4914      	ldr	r1, [pc, #80]	@ (80097b0 <BLUZ_Notification+0x1d8>)
 800975e:	480a      	ldr	r0, [pc, #40]	@ (8009788 <BLUZ_Notification+0x1b0>)
 8009760:	f025 fddc 	bl	802f31c <siprintf>
    	HAL_UART_Transmit(&huart2, (uint8_t *) uartBuffer, strlen(uartBuffer), 100);
 8009764:	4808      	ldr	r0, [pc, #32]	@ (8009788 <BLUZ_Notification+0x1b0>)
 8009766:	f7f6 fd68 	bl	800023a <strlen>
 800976a:	4603      	mov	r3, r0
 800976c:	b29a      	uxth	r2, r3
 800976e:	2364      	movs	r3, #100	@ 0x64
 8009770:	4905      	ldr	r1, [pc, #20]	@ (8009788 <BLUZ_Notification+0x1b0>)
 8009772:	4807      	ldr	r0, [pc, #28]	@ (8009790 <BLUZ_Notification+0x1b8>)
 8009774:	f7fd fcf2 	bl	800715c <HAL_UART_Transmit>
      /* USER CODE END Service1Char2_NOTIFY_DISABLED_EVT */
      break;
 8009778:	e002      	b.n	8009780 <BLUZ_Notification+0x1a8>

    default:
      /* USER CODE BEGIN Service1_Notification_default */

      /* USER CODE END Service1_Notification_default */
      break;
 800977a:	bf00      	nop
 800977c:	e000      	b.n	8009780 <BLUZ_Notification+0x1a8>
      break;
 800977e:	bf00      	nop
  }
  /* USER CODE BEGIN Service1_Notification_2 */

  /* USER CODE END Service1_Notification_2 */
  return;
 8009780:	bf00      	nop
}
 8009782:	3710      	adds	r7, #16
 8009784:	46bd      	mov	sp, r7
 8009786:	bd80      	pop	{r7, pc}
 8009788:	20001720 	.word	0x20001720
 800978c:	0802ffbc 	.word	0x0802ffbc
 8009790:	20001674 	.word	0x20001674
 8009794:	0802ffd8 	.word	0x0802ffd8
 8009798:	0802fffc 	.word	0x0802fffc
 800979c:	08030020 	.word	0x08030020
 80097a0:	08030044 	.word	0x08030044
 80097a4:	08030060 	.word	0x08030060
 80097a8:	08030068 	.word	0x08030068
 80097ac:	0803006c 	.word	0x0803006c
 80097b0:	08030090 	.word	0x08030090

080097b4 <BLUZ_APP_EvtRx>:

void BLUZ_APP_EvtRx(BLUZ_APP_ConnHandleNotEvt_t *p_Notification)
{
 80097b4:	b580      	push	{r7, lr}
 80097b6:	b082      	sub	sp, #8
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Service1_APP_EvtRx_1 */
	bzero((char *) uartBuffer, sizeof(uartBuffer));
 80097bc:	4b11      	ldr	r3, [pc, #68]	@ (8009804 <BLUZ_APP_EvtRx+0x50>)
 80097be:	4618      	mov	r0, r3
 80097c0:	2364      	movs	r3, #100	@ 0x64
 80097c2:	461a      	mov	r2, r3
 80097c4:	2100      	movs	r1, #0
 80097c6:	f025 fdf3 	bl	802f3b0 <memset>
	sprintf(uartBuffer, "Service1_APP_EvtRx_1\n\r");
 80097ca:	490f      	ldr	r1, [pc, #60]	@ (8009808 <BLUZ_APP_EvtRx+0x54>)
 80097cc:	480d      	ldr	r0, [pc, #52]	@ (8009804 <BLUZ_APP_EvtRx+0x50>)
 80097ce:	f025 fda5 	bl	802f31c <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t *) uartBuffer, strlen(uartBuffer), 100);
 80097d2:	480c      	ldr	r0, [pc, #48]	@ (8009804 <BLUZ_APP_EvtRx+0x50>)
 80097d4:	f7f6 fd31 	bl	800023a <strlen>
 80097d8:	4603      	mov	r3, r0
 80097da:	b29a      	uxth	r2, r3
 80097dc:	2364      	movs	r3, #100	@ 0x64
 80097de:	4909      	ldr	r1, [pc, #36]	@ (8009804 <BLUZ_APP_EvtRx+0x50>)
 80097e0:	480a      	ldr	r0, [pc, #40]	@ (800980c <BLUZ_APP_EvtRx+0x58>)
 80097e2:	f7fd fcbb 	bl	800715c <HAL_UART_Transmit>

  /* USER CODE END Service1_APP_EvtRx_1 */

  switch(p_Notification->EvtOpcode)
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	781b      	ldrb	r3, [r3, #0]
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d002      	beq.n	80097f4 <BLUZ_APP_EvtRx+0x40>
 80097ee:	2b01      	cmp	r3, #1
 80097f0:	d002      	beq.n	80097f8 <BLUZ_APP_EvtRx+0x44>

    default:
      /* USER CODE BEGIN Service1_APP_EvtRx_default */

      /* USER CODE END Service1_APP_EvtRx_default */
      break;
 80097f2:	e002      	b.n	80097fa <BLUZ_APP_EvtRx+0x46>
      break;
 80097f4:	bf00      	nop
 80097f6:	e000      	b.n	80097fa <BLUZ_APP_EvtRx+0x46>
      break;
 80097f8:	bf00      	nop

  /* USER CODE BEGIN Service1_APP_EvtRx_2 */

  /* USER CODE END Service1_APP_EvtRx_2 */

  return;
 80097fa:	bf00      	nop
}
 80097fc:	3708      	adds	r7, #8
 80097fe:	46bd      	mov	sp, r7
 8009800:	bd80      	pop	{r7, pc}
 8009802:	bf00      	nop
 8009804:	20001720 	.word	0x20001720
 8009808:	080300b4 	.word	0x080300b4
 800980c:	20001674 	.word	0x20001674

08009810 <BLUZ_APP_Init>:

void BLUZ_APP_Init(void)
{
 8009810:	b580      	push	{r7, lr}
 8009812:	af00      	add	r7, sp, #0
  UNUSED(BLUZ_APP_Context);
  BLUZ_Init();
 8009814:	f7ff fd34 	bl	8009280 <BLUZ_Init>

  /* USER CODE BEGIN Service1_APP_Init */

  /* USER CODE END Service1_APP_Init */
  return;
 8009818:	bf00      	nop
}
 800981a:	bd80      	pop	{r7, pc}

0800981c <sendData>:
  return;
}

/* USER CODE BEGIN FD_LOCAL_FUNCTIONS*/
void sendData( void )
{
 800981c:	b580      	push	{r7, lr}
 800981e:	b084      	sub	sp, #16
 8009820:	af00      	add	r7, sp, #0
	if (connectFlag) {
 8009822:	4b28      	ldr	r3, [pc, #160]	@ (80098c4 <sendData+0xa8>)
 8009824:	781b      	ldrb	r3, [r3, #0]
 8009826:	2b00      	cmp	r3, #0
 8009828:	d048      	beq.n	80098bc <sendData+0xa0>
	  tBleStatus status = BLE_STATUS_INVALID_PARAMS;
 800982a:	2392      	movs	r3, #146	@ 0x92
 800982c:	71fb      	strb	r3, [r7, #7]
		/*Data Packet to send to remote*/
		//Notification_Data_Buffer[0] += 1;
		/* compute CRC */
		//crc_result = APP_BLE_ComputeCRC8((uint8_t*) Notification_Data_Buffer, (MTUSizeValue - 1));
		//Notification_Data_Buffer[MTUSizeValue - 1] = crc_result;
		uint8_t chr = 0x30;
 800982e:	2330      	movs	r3, #48	@ 0x30
 8009830:	73fb      	strb	r3, [r7, #15]
		for (int iii = 0; iii < MTUSizeValue; iii++) {
 8009832:	2300      	movs	r3, #0
 8009834:	60bb      	str	r3, [r7, #8]
 8009836:	e00e      	b.n	8009856 <sendData+0x3a>
			if (chr > 0x39) {
 8009838:	7bfb      	ldrb	r3, [r7, #15]
 800983a:	2b39      	cmp	r3, #57	@ 0x39
 800983c:	d901      	bls.n	8009842 <sendData+0x26>
				chr = 0x30;
 800983e:	2330      	movs	r3, #48	@ 0x30
 8009840:	73fb      	strb	r3, [r7, #15]
			}
			Notification_Data_Buffer[iii] = chr++;
 8009842:	7bfb      	ldrb	r3, [r7, #15]
 8009844:	1c5a      	adds	r2, r3, #1
 8009846:	73fa      	strb	r2, [r7, #15]
 8009848:	491f      	ldr	r1, [pc, #124]	@ (80098c8 <sendData+0xac>)
 800984a:	68ba      	ldr	r2, [r7, #8]
 800984c:	440a      	add	r2, r1
 800984e:	7013      	strb	r3, [r2, #0]
		for (int iii = 0; iii < MTUSizeValue; iii++) {
 8009850:	68bb      	ldr	r3, [r7, #8]
 8009852:	3301      	adds	r3, #1
 8009854:	60bb      	str	r3, [r7, #8]
 8009856:	4b1d      	ldr	r3, [pc, #116]	@ (80098cc <sendData+0xb0>)
 8009858:	881b      	ldrh	r3, [r3, #0]
 800985a:	461a      	mov	r2, r3
 800985c:	68bb      	ldr	r3, [r7, #8]
 800985e:	4293      	cmp	r3, r2
 8009860:	dbea      	blt.n	8009838 <sendData+0x1c>
		}
		BZ_Context.TxData.p_Payload = Notification_Data_Buffer;
 8009862:	4b1b      	ldr	r3, [pc, #108]	@ (80098d0 <sendData+0xb4>)
 8009864:	4a18      	ldr	r2, [pc, #96]	@ (80098c8 <sendData+0xac>)
 8009866:	601a      	str	r2, [r3, #0]
		BZ_Context.TxData.Length =  MTUSizeValue;
 8009868:	4b18      	ldr	r3, [pc, #96]	@ (80098cc <sendData+0xb0>)
 800986a:	881b      	ldrh	r3, [r3, #0]
 800986c:	b2da      	uxtb	r2, r3
 800986e:	4b18      	ldr	r3, [pc, #96]	@ (80098d0 <sendData+0xb4>)
 8009870:	711a      	strb	r2, [r3, #4]

		status = BLUZ_UpdateValue(BLUZ_RX, (BLUZ_Data_t *) &BZ_Context.TxData);
 8009872:	4917      	ldr	r1, [pc, #92]	@ (80098d0 <sendData+0xb4>)
 8009874:	2000      	movs	r0, #0
 8009876:	f7ff fde7 	bl	8009448 <BLUZ_UpdateValue>
 800987a:	4603      	mov	r3, r0
 800987c:	71fb      	strb	r3, [r7, #7]

		if (status == BLE_STATUS_INSUFFICIENT_RESOURCES) {
 800987e:	79fb      	ldrb	r3, [r7, #7]
 8009880:	2b64      	cmp	r3, #100	@ 0x64
 8009882:	d10d      	bne.n	80098a0 <sendData+0x84>
			bzero((char *) uartBuffer, sizeof(uartBuffer));
 8009884:	4b13      	ldr	r3, [pc, #76]	@ (80098d4 <sendData+0xb8>)
 8009886:	4618      	mov	r0, r3
 8009888:	2364      	movs	r3, #100	@ 0x64
 800988a:	461a      	mov	r2, r3
 800988c:	2100      	movs	r1, #0
 800988e:	f025 fd8f 	bl	802f3b0 <memset>
			sprintf(uartBuffer, "bz_rx_app: Error transfer with status: %d\n\r", status);
 8009892:	79fb      	ldrb	r3, [r7, #7]
 8009894:	461a      	mov	r2, r3
 8009896:	4910      	ldr	r1, [pc, #64]	@ (80098d8 <sendData+0xbc>)
 8009898:	480e      	ldr	r0, [pc, #56]	@ (80098d4 <sendData+0xb8>)
 800989a:	f025 fd3f 	bl	802f31c <siprintf>
 800989e:	e00a      	b.n	80098b6 <sendData+0x9a>
			//HAL_UART_Transmit(&huart1, (uint8_t *) uartBuffer, sizeof(uartBuffer), 100);
		} else {
			bzero((char *) uartBuffer, sizeof(uartBuffer));
 80098a0:	4b0c      	ldr	r3, [pc, #48]	@ (80098d4 <sendData+0xb8>)
 80098a2:	4618      	mov	r0, r3
 80098a4:	2364      	movs	r3, #100	@ 0x64
 80098a6:	461a      	mov	r2, r3
 80098a8:	2100      	movs	r1, #0
 80098aa:	f025 fd81 	bl	802f3b0 <memset>
			sprintf(uartBuffer, "bz_rx_app: Send complete\n\r");
 80098ae:	490b      	ldr	r1, [pc, #44]	@ (80098dc <sendData+0xc0>)
 80098b0:	4808      	ldr	r0, [pc, #32]	@ (80098d4 <sendData+0xb8>)
 80098b2:	f025 fd33 	bl	802f31c <siprintf>
			//HAL_UART_Transmit(&huart1, (uint8_t *) uartBuffer, sizeof(uartBuffer), 100);
		}

	  BleStackCB_Process();
 80098b6:	f000 fa06 	bl	8009cc6 <BleStackCB_Process>
	}
  return;
 80098ba:	bf00      	nop
 80098bc:	bf00      	nop
}
 80098be:	3710      	adds	r7, #16
 80098c0:	46bd      	mov	sp, r7
 80098c2:	bd80      	pop	{r7, pc}
 80098c4:	20001708 	.word	0x20001708
 80098c8:	200067e8 	.word	0x200067e8
 80098cc:	200067d0 	.word	0x200067d0
 80098d0:	200067dc 	.word	0x200067dc
 80098d4:	20001720 	.word	0x20001720
 80098d8:	080300cc 	.word	0x080300cc
 80098dc:	080300f8 	.word	0x080300f8

080098e0 <BLEPLAT_Init>:
#include "ble_timer.h"

/*****************************************************************************/

void BLEPLAT_Init( void )
{
 80098e0:	b580      	push	{r7, lr}
 80098e2:	af00      	add	r7, sp, #0
  BAES_Reset( );
 80098e4:	f006 fe10 	bl	8010508 <BAES_Reset>
  BPKA_Reset( );
 80098e8:	f000 f8e0 	bl	8009aac <BPKA_Reset>
  BLE_TIMER_Init();
 80098ec:	f005 fc56 	bl	800f19c <BLE_TIMER_Init>
}
 80098f0:	bf00      	nop
 80098f2:	bd80      	pop	{r7, pc}

080098f4 <BLEPLAT_NvmAdd>:
int BLEPLAT_NvmAdd( uint8_t type,
                    const uint8_t* data,
                    uint16_t size,
                    const uint8_t* extra_data,
                    uint16_t extra_size )
{
 80098f4:	b580      	push	{r7, lr}
 80098f6:	b086      	sub	sp, #24
 80098f8:	af02      	add	r7, sp, #8
 80098fa:	60b9      	str	r1, [r7, #8]
 80098fc:	607b      	str	r3, [r7, #4]
 80098fe:	4603      	mov	r3, r0
 8009900:	73fb      	strb	r3, [r7, #15]
 8009902:	4613      	mov	r3, r2
 8009904:	81bb      	strh	r3, [r7, #12]
  return NVM_Add( type, data, size, extra_data, extra_size );
 8009906:	89ba      	ldrh	r2, [r7, #12]
 8009908:	7bf8      	ldrb	r0, [r7, #15]
 800990a:	8b3b      	ldrh	r3, [r7, #24]
 800990c:	9300      	str	r3, [sp, #0]
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	68b9      	ldr	r1, [r7, #8]
 8009912:	f005 f98b 	bl	800ec2c <NVM_Add>
 8009916:	4603      	mov	r3, r0
}
 8009918:	4618      	mov	r0, r3
 800991a:	3710      	adds	r7, #16
 800991c:	46bd      	mov	sp, r7
 800991e:	bd80      	pop	{r7, pc}

08009920 <BLEPLAT_NvmGet>:
int BLEPLAT_NvmGet( uint8_t mode,
                    uint8_t type,
                    uint16_t offset,
                    uint8_t* data,
                    uint16_t size )
{
 8009920:	b580      	push	{r7, lr}
 8009922:	b084      	sub	sp, #16
 8009924:	af02      	add	r7, sp, #8
 8009926:	603b      	str	r3, [r7, #0]
 8009928:	4603      	mov	r3, r0
 800992a:	71fb      	strb	r3, [r7, #7]
 800992c:	460b      	mov	r3, r1
 800992e:	71bb      	strb	r3, [r7, #6]
 8009930:	4613      	mov	r3, r2
 8009932:	80bb      	strh	r3, [r7, #4]
  return NVM_Get( mode, type, offset, data, size );
 8009934:	88ba      	ldrh	r2, [r7, #4]
 8009936:	79b9      	ldrb	r1, [r7, #6]
 8009938:	79f8      	ldrb	r0, [r7, #7]
 800993a:	8a3b      	ldrh	r3, [r7, #16]
 800993c:	9300      	str	r3, [sp, #0]
 800993e:	683b      	ldr	r3, [r7, #0]
 8009940:	f005 fa7a 	bl	800ee38 <NVM_Get>
 8009944:	4603      	mov	r3, r0
}
 8009946:	4618      	mov	r0, r3
 8009948:	3708      	adds	r7, #8
 800994a:	46bd      	mov	sp, r7
 800994c:	bd80      	pop	{r7, pc}

0800994e <BLEPLAT_NvmCompare>:
/*****************************************************************************/

int BLEPLAT_NvmCompare( uint16_t offset,
                        const uint8_t* data,
                        uint16_t size )
{
 800994e:	b580      	push	{r7, lr}
 8009950:	b082      	sub	sp, #8
 8009952:	af00      	add	r7, sp, #0
 8009954:	4603      	mov	r3, r0
 8009956:	6039      	str	r1, [r7, #0]
 8009958:	80fb      	strh	r3, [r7, #6]
 800995a:	4613      	mov	r3, r2
 800995c:	80bb      	strh	r3, [r7, #4]
  return NVM_Compare( offset, data, size );
 800995e:	88ba      	ldrh	r2, [r7, #4]
 8009960:	88fb      	ldrh	r3, [r7, #6]
 8009962:	6839      	ldr	r1, [r7, #0]
 8009964:	4618      	mov	r0, r3
 8009966:	f005 fb1d 	bl	800efa4 <NVM_Compare>
 800996a:	4603      	mov	r3, r0
}
 800996c:	4618      	mov	r0, r3
 800996e:	3708      	adds	r7, #8
 8009970:	46bd      	mov	sp, r7
 8009972:	bd80      	pop	{r7, pc}

08009974 <BLEPLAT_NvmDiscard>:

/*****************************************************************************/

void BLEPLAT_NvmDiscard( uint8_t mode )
{
 8009974:	b580      	push	{r7, lr}
 8009976:	b082      	sub	sp, #8
 8009978:	af00      	add	r7, sp, #0
 800997a:	4603      	mov	r3, r0
 800997c:	71fb      	strb	r3, [r7, #7]
  NVM_Discard( mode );
 800997e:	79fb      	ldrb	r3, [r7, #7]
 8009980:	4618      	mov	r0, r3
 8009982:	f005 fb51 	bl	800f028 <NVM_Discard>
}
 8009986:	bf00      	nop
 8009988:	3708      	adds	r7, #8
 800998a:	46bd      	mov	sp, r7
 800998c:	bd80      	pop	{r7, pc}

0800998e <BLEPLAT_RngGet>:

/*****************************************************************************/

void BLEPLAT_RngGet( uint8_t n,
                     uint32_t* val )
{
 800998e:	b580      	push	{r7, lr}
 8009990:	b082      	sub	sp, #8
 8009992:	af00      	add	r7, sp, #0
 8009994:	4603      	mov	r3, r0
 8009996:	6039      	str	r1, [r7, #0]
 8009998:	71fb      	strb	r3, [r7, #7]
  /* Read 32-bit random values from HW driver */
  HW_RNG_Get( n, val );
 800999a:	79fb      	ldrb	r3, [r7, #7]
 800999c:	6839      	ldr	r1, [r7, #0]
 800999e:	4618      	mov	r0, r3
 80099a0:	f001 fa0a 	bl	800adb8 <HW_RNG_Get>
}
 80099a4:	bf00      	nop
 80099a6:	3708      	adds	r7, #8
 80099a8:	46bd      	mov	sp, r7
 80099aa:	bd80      	pop	{r7, pc}

080099ac <BLEPLAT_AesEcbEncrypt>:
/*****************************************************************************/

void BLEPLAT_AesEcbEncrypt( const uint8_t* key,
                            const uint8_t* input,
                            uint8_t* output )
{
 80099ac:	b580      	push	{r7, lr}
 80099ae:	b084      	sub	sp, #16
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	60f8      	str	r0, [r7, #12]
 80099b4:	60b9      	str	r1, [r7, #8]
 80099b6:	607a      	str	r2, [r7, #4]
  BAES_EcbCrypt( key, input, output, 1 );
 80099b8:	2301      	movs	r3, #1
 80099ba:	687a      	ldr	r2, [r7, #4]
 80099bc:	68b9      	ldr	r1, [r7, #8]
 80099be:	68f8      	ldr	r0, [r7, #12]
 80099c0:	f006 fda8 	bl	8010514 <BAES_EcbCrypt>
}
 80099c4:	bf00      	nop
 80099c6:	3710      	adds	r7, #16
 80099c8:	46bd      	mov	sp, r7
 80099ca:	bd80      	pop	{r7, pc}

080099cc <BLEPLAT_AesCmacSetKey>:

/*****************************************************************************/

void BLEPLAT_AesCmacSetKey( const uint8_t* key )
{
 80099cc:	b580      	push	{r7, lr}
 80099ce:	b082      	sub	sp, #8
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	6078      	str	r0, [r7, #4]
  BAES_CmacSetKey( key );
 80099d4:	6878      	ldr	r0, [r7, #4]
 80099d6:	f006 fc6f 	bl	80102b8 <BAES_CmacSetKey>
}
 80099da:	bf00      	nop
 80099dc:	3708      	adds	r7, #8
 80099de:	46bd      	mov	sp, r7
 80099e0:	bd80      	pop	{r7, pc}

080099e2 <BLEPLAT_AesCmacCompute>:
/*****************************************************************************/

void BLEPLAT_AesCmacCompute( const uint8_t* input,
                             uint32_t input_length,
                             uint8_t* output_tag )
{
 80099e2:	b580      	push	{r7, lr}
 80099e4:	b084      	sub	sp, #16
 80099e6:	af00      	add	r7, sp, #0
 80099e8:	60f8      	str	r0, [r7, #12]
 80099ea:	60b9      	str	r1, [r7, #8]
 80099ec:	607a      	str	r2, [r7, #4]
  BAES_CmacCompute( input, input_length, output_tag );
 80099ee:	687a      	ldr	r2, [r7, #4]
 80099f0:	68b9      	ldr	r1, [r7, #8]
 80099f2:	68f8      	ldr	r0, [r7, #12]
 80099f4:	f006 fc82 	bl	80102fc <BAES_CmacCompute>
}
 80099f8:	bf00      	nop
 80099fa:	3710      	adds	r7, #16
 80099fc:	46bd      	mov	sp, r7
 80099fe:	bd80      	pop	{r7, pc}

08009a00 <BLEPLAT_PkaStartP256Key>:

/*****************************************************************************/

int BLEPLAT_PkaStartP256Key( const uint32_t* local_private_key )
{
 8009a00:	b580      	push	{r7, lr}
 8009a02:	b082      	sub	sp, #8
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	6078      	str	r0, [r7, #4]
  return BPKA_StartP256Key( local_private_key );
 8009a08:	6878      	ldr	r0, [r7, #4]
 8009a0a:	f000 f85b 	bl	8009ac4 <BPKA_StartP256Key>
 8009a0e:	4603      	mov	r3, r0
}
 8009a10:	4618      	mov	r0, r3
 8009a12:	3708      	adds	r7, #8
 8009a14:	46bd      	mov	sp, r7
 8009a16:	bd80      	pop	{r7, pc}

08009a18 <BLEPLAT_PkaReadP256Key>:

/*****************************************************************************/

void BLEPLAT_PkaReadP256Key( uint32_t* local_public_key )
{
 8009a18:	b580      	push	{r7, lr}
 8009a1a:	b082      	sub	sp, #8
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	6078      	str	r0, [r7, #4]
  BPKA_ReadP256Key( local_public_key );
 8009a20:	6878      	ldr	r0, [r7, #4]
 8009a22:	f000 f86d 	bl	8009b00 <BPKA_ReadP256Key>
}
 8009a26:	bf00      	nop
 8009a28:	3708      	adds	r7, #8
 8009a2a:	46bd      	mov	sp, r7
 8009a2c:	bd80      	pop	{r7, pc}

08009a2e <BLEPLAT_PkaStartDhKey>:

/*****************************************************************************/

int BLEPLAT_PkaStartDhKey( const uint32_t* local_private_key,
                           const uint32_t* remote_public_key )
{
 8009a2e:	b580      	push	{r7, lr}
 8009a30:	b082      	sub	sp, #8
 8009a32:	af00      	add	r7, sp, #0
 8009a34:	6078      	str	r0, [r7, #4]
 8009a36:	6039      	str	r1, [r7, #0]
  return BPKA_StartDhKey( local_private_key, remote_public_key );
 8009a38:	6839      	ldr	r1, [r7, #0]
 8009a3a:	6878      	ldr	r0, [r7, #4]
 8009a3c:	f000 f870 	bl	8009b20 <BPKA_StartDhKey>
 8009a40:	4603      	mov	r3, r0
}
 8009a42:	4618      	mov	r0, r3
 8009a44:	3708      	adds	r7, #8
 8009a46:	46bd      	mov	sp, r7
 8009a48:	bd80      	pop	{r7, pc}

08009a4a <BLEPLAT_PkaReadDhKey>:

/*****************************************************************************/

int BLEPLAT_PkaReadDhKey( uint32_t* dh_key )
{
 8009a4a:	b580      	push	{r7, lr}
 8009a4c:	b082      	sub	sp, #8
 8009a4e:	af00      	add	r7, sp, #0
 8009a50:	6078      	str	r0, [r7, #4]
  return BPKA_ReadDhKey( dh_key );
 8009a52:	6878      	ldr	r0, [r7, #4]
 8009a54:	f000 f894 	bl	8009b80 <BPKA_ReadDhKey>
 8009a58:	4603      	mov	r3, r0
}
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	3708      	adds	r7, #8
 8009a5e:	46bd      	mov	sp, r7
 8009a60:	bd80      	pop	{r7, pc}

08009a62 <BPKACB_Complete>:

/*****************************************************************************/

void BPKACB_Complete( void )
{
 8009a62:	b580      	push	{r7, lr}
 8009a64:	af00      	add	r7, sp, #0
  BLEPLATCB_PkaComplete( );
 8009a66:	f01e fbf9 	bl	802825c <BLEPLATCB_PkaComplete>
  HostStack_Process( );
 8009a6a:	f000 f926 	bl	8009cba <HostStack_Process>
}
 8009a6e:	bf00      	nop
 8009a70:	bd80      	pop	{r7, pc}

08009a72 <BLEPLAT_TimerStart>:

/*****************************************************************************/

uint8_t BLEPLAT_TimerStart( uint16_t layer,
                            uint32_t timeout )
{
 8009a72:	b580      	push	{r7, lr}
 8009a74:	b082      	sub	sp, #8
 8009a76:	af00      	add	r7, sp, #0
 8009a78:	4603      	mov	r3, r0
 8009a7a:	6039      	str	r1, [r7, #0]
 8009a7c:	80fb      	strh	r3, [r7, #6]
  return BLE_TIMER_Start( (uint16_t)layer, timeout );
 8009a7e:	88fb      	ldrh	r3, [r7, #6]
 8009a80:	6839      	ldr	r1, [r7, #0]
 8009a82:	4618      	mov	r0, r3
 8009a84:	f005 fb9c 	bl	800f1c0 <BLE_TIMER_Start>
 8009a88:	4603      	mov	r3, r0
}
 8009a8a:	4618      	mov	r0, r3
 8009a8c:	3708      	adds	r7, #8
 8009a8e:	46bd      	mov	sp, r7
 8009a90:	bd80      	pop	{r7, pc}

08009a92 <BLEPLAT_TimerStop>:

/*****************************************************************************/

void BLEPLAT_TimerStop( uint16_t layer )
{
 8009a92:	b580      	push	{r7, lr}
 8009a94:	b082      	sub	sp, #8
 8009a96:	af00      	add	r7, sp, #0
 8009a98:	4603      	mov	r3, r0
 8009a9a:	80fb      	strh	r3, [r7, #6]
  BLE_TIMER_Stop( (uint16_t)layer );
 8009a9c:	88fb      	ldrh	r3, [r7, #6]
 8009a9e:	4618      	mov	r0, r3
 8009aa0:	f005 fbe0 	bl	800f264 <BLE_TIMER_Stop>
}
 8009aa4:	bf00      	nop
 8009aa6:	3708      	adds	r7, #8
 8009aa8:	46bd      	mov	sp, r7
 8009aaa:	bd80      	pop	{r7, pc}

08009aac <BPKA_Reset>:
static uint32_t BPKA_buffer[24];

/*****************************************************************************/

void BPKA_Reset( void )
{
 8009aac:	b580      	push	{r7, lr}
 8009aae:	af00      	add	r7, sp, #0
  /* Disable PKA hardware */
  HW_PKA_Disable( );
 8009ab0:	f000 ff1e 	bl	800a8f0 <HW_PKA_Disable>

  BPKA_state = BPKA_IDLE;
 8009ab4:	4b02      	ldr	r3, [pc, #8]	@ (8009ac0 <BPKA_Reset+0x14>)
 8009ab6:	2200      	movs	r2, #0
 8009ab8:	701a      	strb	r2, [r3, #0]
}
 8009aba:	bf00      	nop
 8009abc:	bd80      	pop	{r7, pc}
 8009abe:	bf00      	nop
 8009ac0:	200068dc 	.word	0x200068dc

08009ac4 <BPKA_StartP256Key>:

/*****************************************************************************/

int BPKA_StartP256Key( const uint32_t* local_private_key )
{
 8009ac4:	b580      	push	{r7, lr}
 8009ac6:	b082      	sub	sp, #8
 8009ac8:	af00      	add	r7, sp, #0
 8009aca:	6078      	str	r0, [r7, #4]
  /* Enable PKA hardware */
  if ( ! HW_PKA_Enable( ) )
 8009acc:	f000 fe44 	bl	800a758 <HW_PKA_Enable>
 8009ad0:	4603      	mov	r3, r0
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d102      	bne.n	8009adc <BPKA_StartP256Key+0x18>
    return BPKA_BUSY;
 8009ad6:	f06f 0301 	mvn.w	r3, #1
 8009ada:	e00a      	b.n	8009af2 <BPKA_StartP256Key+0x2e>

  /* Call the PKA scalar multiplication with the local private key
     as k and the standard point as starting point,
     in order to compute the local public key */
  HW_PKA_P256_StartEccScalarMul( local_private_key, NULL, NULL );
 8009adc:	2200      	movs	r2, #0
 8009ade:	2100      	movs	r1, #0
 8009ae0:	6878      	ldr	r0, [r7, #4]
 8009ae2:	f001 fa73 	bl	800afcc <HW_PKA_P256_StartEccScalarMul>

  BPKA_state = BPKA_P256_KEY_GEN;
 8009ae6:	4b05      	ldr	r3, [pc, #20]	@ (8009afc <BPKA_StartP256Key+0x38>)
 8009ae8:	2201      	movs	r2, #1
 8009aea:	701a      	strb	r2, [r3, #0]

  BPKACB_Process( );
 8009aec:	f7f6 fe7b 	bl	80007e6 <BPKACB_Process>

  return BPKA_OK;
 8009af0:	2300      	movs	r3, #0
}
 8009af2:	4618      	mov	r0, r3
 8009af4:	3708      	adds	r7, #8
 8009af6:	46bd      	mov	sp, r7
 8009af8:	bd80      	pop	{r7, pc}
 8009afa:	bf00      	nop
 8009afc:	200068dc 	.word	0x200068dc

08009b00 <BPKA_ReadP256Key>:

/*****************************************************************************/

void BPKA_ReadP256Key( uint32_t* local_public_key )
{
 8009b00:	b580      	push	{r7, lr}
 8009b02:	b082      	sub	sp, #8
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	6078      	str	r0, [r7, #4]
  /* Get local public key from buffer */
  memcpy( local_public_key, BPKA_buffer, 64 );
 8009b08:	2240      	movs	r2, #64	@ 0x40
 8009b0a:	4904      	ldr	r1, [pc, #16]	@ (8009b1c <BPKA_ReadP256Key+0x1c>)
 8009b0c:	6878      	ldr	r0, [r7, #4]
 8009b0e:	f025 fc86 	bl	802f41e <memcpy>
}
 8009b12:	bf00      	nop
 8009b14:	3708      	adds	r7, #8
 8009b16:	46bd      	mov	sp, r7
 8009b18:	bd80      	pop	{r7, pc}
 8009b1a:	bf00      	nop
 8009b1c:	200068e0 	.word	0x200068e0

08009b20 <BPKA_StartDhKey>:

/*****************************************************************************/

int BPKA_StartDhKey( const uint32_t* local_private_key,
                     const uint32_t* remote_public_key )
{
 8009b20:	b580      	push	{r7, lr}
 8009b22:	b082      	sub	sp, #8
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	6078      	str	r0, [r7, #4]
 8009b28:	6039      	str	r1, [r7, #0]
  /* Enable PKA hardware */
  if ( ! HW_PKA_Enable( ) )
 8009b2a:	f000 fe15 	bl	800a758 <HW_PKA_Enable>
 8009b2e:	4603      	mov	r3, r0
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d102      	bne.n	8009b3a <BPKA_StartDhKey+0x1a>
    return BPKA_BUSY;
 8009b34:	f06f 0301 	mvn.w	r3, #1
 8009b38:	e016      	b.n	8009b68 <BPKA_StartDhKey+0x48>

  /* Call the PKA range check operation for public key X coordinate */
  HW_PKA_P256_StartRangeCheck( remote_public_key );
 8009b3a:	6838      	ldr	r0, [r7, #0]
 8009b3c:	f001 f9cc 	bl	800aed8 <HW_PKA_P256_StartRangeCheck>

  /* Save input data */
  memcpy( BPKA_buffer, local_private_key, 32 );
 8009b40:	2220      	movs	r2, #32
 8009b42:	6879      	ldr	r1, [r7, #4]
 8009b44:	480a      	ldr	r0, [pc, #40]	@ (8009b70 <BPKA_StartDhKey+0x50>)
 8009b46:	f025 fc6a 	bl	802f41e <memcpy>
  memcpy( BPKA_buffer + 8, remote_public_key, 64 );
 8009b4a:	4b0a      	ldr	r3, [pc, #40]	@ (8009b74 <BPKA_StartDhKey+0x54>)
 8009b4c:	2240      	movs	r2, #64	@ 0x40
 8009b4e:	6839      	ldr	r1, [r7, #0]
 8009b50:	4618      	mov	r0, r3
 8009b52:	f025 fc64 	bl	802f41e <memcpy>

  BPKA_state = BPKA_RANGE_X_CHECK;
 8009b56:	4b08      	ldr	r3, [pc, #32]	@ (8009b78 <BPKA_StartDhKey+0x58>)
 8009b58:	2202      	movs	r2, #2
 8009b5a:	701a      	strb	r2, [r3, #0]
  BPKA_error = 1;
 8009b5c:	4b07      	ldr	r3, [pc, #28]	@ (8009b7c <BPKA_StartDhKey+0x5c>)
 8009b5e:	2201      	movs	r2, #1
 8009b60:	701a      	strb	r2, [r3, #0]

  BPKACB_Process( );
 8009b62:	f7f6 fe40 	bl	80007e6 <BPKACB_Process>

  return BPKA_OK;
 8009b66:	2300      	movs	r3, #0
}
 8009b68:	4618      	mov	r0, r3
 8009b6a:	3708      	adds	r7, #8
 8009b6c:	46bd      	mov	sp, r7
 8009b6e:	bd80      	pop	{r7, pc}
 8009b70:	200068e0 	.word	0x200068e0
 8009b74:	20006900 	.word	0x20006900
 8009b78:	200068dc 	.word	0x200068dc
 8009b7c:	200068dd 	.word	0x200068dd

08009b80 <BPKA_ReadDhKey>:

/*****************************************************************************/

int BPKA_ReadDhKey( uint32_t* dh_key )
{
 8009b80:	b580      	push	{r7, lr}
 8009b82:	b082      	sub	sp, #8
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	6078      	str	r0, [r7, #4]
  if ( BPKA_error )
 8009b88:	4b08      	ldr	r3, [pc, #32]	@ (8009bac <BPKA_ReadDhKey+0x2c>)
 8009b8a:	781b      	ldrb	r3, [r3, #0]
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d002      	beq.n	8009b96 <BPKA_ReadDhKey+0x16>
    return BPKA_EOF;
 8009b90:	f06f 0302 	mvn.w	r3, #2
 8009b94:	e005      	b.n	8009ba2 <BPKA_ReadDhKey+0x22>

  /* Get DH key from buffer */
  memcpy( dh_key, BPKA_buffer, 32 );
 8009b96:	2220      	movs	r2, #32
 8009b98:	4905      	ldr	r1, [pc, #20]	@ (8009bb0 <BPKA_ReadDhKey+0x30>)
 8009b9a:	6878      	ldr	r0, [r7, #4]
 8009b9c:	f025 fc3f 	bl	802f41e <memcpy>

  return BPKA_OK;
 8009ba0:	2300      	movs	r3, #0
}
 8009ba2:	4618      	mov	r0, r3
 8009ba4:	3708      	adds	r7, #8
 8009ba6:	46bd      	mov	sp, r7
 8009ba8:	bd80      	pop	{r7, pc}
 8009baa:	bf00      	nop
 8009bac:	200068dd 	.word	0x200068dd
 8009bb0:	200068e0 	.word	0x200068e0

08009bb4 <BPKA_Process>:
}

/*****************************************************************************/

int BPKA_Process( void )
{
 8009bb4:	b580      	push	{r7, lr}
 8009bb6:	af00      	add	r7, sp, #0
  /* This function implements the offline key computation using the PKA
   */
  if ( BPKA_state == BPKA_IDLE )
 8009bb8:	4b35      	ldr	r3, [pc, #212]	@ (8009c90 <BPKA_Process+0xdc>)
 8009bba:	781b      	ldrb	r3, [r3, #0]
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d101      	bne.n	8009bc4 <BPKA_Process+0x10>
  {
    return BPKA_OK;
 8009bc0:	2300      	movs	r3, #0
 8009bc2:	e062      	b.n	8009c8a <BPKA_Process+0xd6>
  }

  /* Check if the current operation is finished */
  if ( ! HW_PKA_EndOfOperation( ) )
 8009bc4:	f000 fe54 	bl	800a870 <HW_PKA_EndOfOperation>
 8009bc8:	4603      	mov	r3, r0
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d102      	bne.n	8009bd4 <BPKA_Process+0x20>
    return BPKA_BUSY;
 8009bce:	f06f 0301 	mvn.w	r3, #1
 8009bd2:	e05a      	b.n	8009c8a <BPKA_Process+0xd6>

  switch ( BPKA_state )
 8009bd4:	4b2e      	ldr	r3, [pc, #184]	@ (8009c90 <BPKA_Process+0xdc>)
 8009bd6:	781b      	ldrb	r3, [r3, #0]
 8009bd8:	3b01      	subs	r3, #1
 8009bda:	2b04      	cmp	r3, #4
 8009bdc:	d850      	bhi.n	8009c80 <BPKA_Process+0xcc>
 8009bde:	a201      	add	r2, pc, #4	@ (adr r2, 8009be4 <BPKA_Process+0x30>)
 8009be0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009be4:	08009bf9 	.word	0x08009bf9
 8009be8:	08009c05 	.word	0x08009c05
 8009bec:	08009c23 	.word	0x08009c23
 8009bf0:	08009c45 	.word	0x08009c45
 8009bf4:	08009c67 	.word	0x08009c67
  {
  case BPKA_P256_KEY_GEN:

    /* Read the PKA scalar multiplication result which is the local public
       key */
    HW_PKA_P256_ReadEccScalarMul( BPKA_buffer, BPKA_buffer + 8 );
 8009bf8:	4b26      	ldr	r3, [pc, #152]	@ (8009c94 <BPKA_Process+0xe0>)
 8009bfa:	4619      	mov	r1, r3
 8009bfc:	4826      	ldr	r0, [pc, #152]	@ (8009c98 <BPKA_Process+0xe4>)
 8009bfe:	f001 fa3f 	bl	800b080 <HW_PKA_P256_ReadEccScalarMul>

    break;
 8009c02:	e03d      	b.n	8009c80 <BPKA_Process+0xcc>

  case BPKA_RANGE_X_CHECK:

    /* Test result of range check operation for public key X coordinate */
    if ( ! HW_PKA_P256_IsRangeCheckOk( ) )
 8009c04:	f001 f986 	bl	800af14 <HW_PKA_P256_IsRangeCheckOk>
 8009c08:	4603      	mov	r3, r0
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d033      	beq.n	8009c76 <BPKA_Process+0xc2>
      break;

    /* Call the PKA range check operation for public key Y coordinate */
    HW_PKA_P256_StartRangeCheck( BPKA_buffer + 16 );
 8009c0e:	4b23      	ldr	r3, [pc, #140]	@ (8009c9c <BPKA_Process+0xe8>)
 8009c10:	4618      	mov	r0, r3
 8009c12:	f001 f961 	bl	800aed8 <HW_PKA_P256_StartRangeCheck>

    BPKA_state = BPKA_RANGE_Y_CHECK;
 8009c16:	4b1e      	ldr	r3, [pc, #120]	@ (8009c90 <BPKA_Process+0xdc>)
 8009c18:	2203      	movs	r2, #3
 8009c1a:	701a      	strb	r2, [r3, #0]

    return BPKA_BUSY;
 8009c1c:	f06f 0301 	mvn.w	r3, #1
 8009c20:	e033      	b.n	8009c8a <BPKA_Process+0xd6>

  case BPKA_RANGE_Y_CHECK:

    /* Test result of range check operation for public key Y coordinate */
    if ( ! HW_PKA_P256_IsRangeCheckOk( ) )
 8009c22:	f001 f977 	bl	800af14 <HW_PKA_P256_IsRangeCheckOk>
 8009c26:	4603      	mov	r3, r0
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d026      	beq.n	8009c7a <BPKA_Process+0xc6>
      break;

    /* Call the PKA point check operation for remote public key */
    HW_PKA_P256_StartPointCheck( BPKA_buffer + 8,
 8009c2c:	4b19      	ldr	r3, [pc, #100]	@ (8009c94 <BPKA_Process+0xe0>)
 8009c2e:	4a1b      	ldr	r2, [pc, #108]	@ (8009c9c <BPKA_Process+0xe8>)
 8009c30:	4611      	mov	r1, r2
 8009c32:	4618      	mov	r0, r3
 8009c34:	f001 f97e 	bl	800af34 <HW_PKA_P256_StartPointCheck>
                                 BPKA_buffer + 16 );

    BPKA_state = BPKA_POINT_CHECK;
 8009c38:	4b15      	ldr	r3, [pc, #84]	@ (8009c90 <BPKA_Process+0xdc>)
 8009c3a:	2204      	movs	r2, #4
 8009c3c:	701a      	strb	r2, [r3, #0]

    return BPKA_BUSY;
 8009c3e:	f06f 0301 	mvn.w	r3, #1
 8009c42:	e022      	b.n	8009c8a <BPKA_Process+0xd6>

  case BPKA_POINT_CHECK:

    /* Test result of point check operation for remote public key */
    if ( ! HW_PKA_P256_IsPointCheckOk( ) )
 8009c44:	f001 f9b2 	bl	800afac <HW_PKA_P256_IsPointCheckOk>
 8009c48:	4603      	mov	r3, r0
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d017      	beq.n	8009c7e <BPKA_Process+0xca>
      break;

    /* Call the PKA scalar multiplication with the local private key
       as k and the remote public key as starting point,
       in order to compute the DH key */
    HW_PKA_P256_StartEccScalarMul( BPKA_buffer,
 8009c4e:	4b11      	ldr	r3, [pc, #68]	@ (8009c94 <BPKA_Process+0xe0>)
 8009c50:	4a12      	ldr	r2, [pc, #72]	@ (8009c9c <BPKA_Process+0xe8>)
 8009c52:	4619      	mov	r1, r3
 8009c54:	4810      	ldr	r0, [pc, #64]	@ (8009c98 <BPKA_Process+0xe4>)
 8009c56:	f001 f9b9 	bl	800afcc <HW_PKA_P256_StartEccScalarMul>
                                   BPKA_buffer + 8,
                                   BPKA_buffer + 16 );

    BPKA_state = BPKA_DH_KEY_GEN;
 8009c5a:	4b0d      	ldr	r3, [pc, #52]	@ (8009c90 <BPKA_Process+0xdc>)
 8009c5c:	2205      	movs	r2, #5
 8009c5e:	701a      	strb	r2, [r3, #0]

    return BPKA_BUSY;
 8009c60:	f06f 0301 	mvn.w	r3, #1
 8009c64:	e011      	b.n	8009c8a <BPKA_Process+0xd6>

  case BPKA_DH_KEY_GEN:

    /* Read the PKA scalar multiplication result which is the DH key */
    HW_PKA_P256_ReadEccScalarMul( BPKA_buffer, NULL );
 8009c66:	2100      	movs	r1, #0
 8009c68:	480b      	ldr	r0, [pc, #44]	@ (8009c98 <BPKA_Process+0xe4>)
 8009c6a:	f001 fa09 	bl	800b080 <HW_PKA_P256_ReadEccScalarMul>

    BPKA_error = 0;
 8009c6e:	4b0c      	ldr	r3, [pc, #48]	@ (8009ca0 <BPKA_Process+0xec>)
 8009c70:	2200      	movs	r2, #0
 8009c72:	701a      	strb	r2, [r3, #0]

    break;
 8009c74:	e004      	b.n	8009c80 <BPKA_Process+0xcc>
      break;
 8009c76:	bf00      	nop
 8009c78:	e002      	b.n	8009c80 <BPKA_Process+0xcc>
      break;
 8009c7a:	bf00      	nop
 8009c7c:	e000      	b.n	8009c80 <BPKA_Process+0xcc>
      break;
 8009c7e:	bf00      	nop
  }

  /* Callback to inform the BLE stack of the completion of PKA operation */
  BPKACB_Complete( );
 8009c80:	f7ff feef 	bl	8009a62 <BPKACB_Complete>

  /* End of process: reset the PKA module */
  BPKA_Reset( );
 8009c84:	f7ff ff12 	bl	8009aac <BPKA_Reset>

  return BPKA_OK;
 8009c88:	2300      	movs	r3, #0
}
 8009c8a:	4618      	mov	r0, r3
 8009c8c:	bd80      	pop	{r7, pc}
 8009c8e:	bf00      	nop
 8009c90:	200068dc 	.word	0x200068dc
 8009c94:	20006900 	.word	0x20006900
 8009c98:	200068e0 	.word	0x200068e0
 8009c9c:	20006920 	.word	0x20006920
 8009ca0:	200068dd 	.word	0x200068dd

08009ca4 <BPKA_BG_Process>:

void BPKA_BG_Process( void )
{
 8009ca4:	b580      	push	{r7, lr}
 8009ca6:	af00      	add	r7, sp, #0
  if( BPKA_Process( ) != 0)
 8009ca8:	f7ff ff84 	bl	8009bb4 <BPKA_Process>
 8009cac:	4603      	mov	r3, r0
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d001      	beq.n	8009cb6 <BPKA_BG_Process+0x12>
  {
    BPKACB_Process( );
 8009cb2:	f7f6 fd98 	bl	80007e6 <BPKACB_Process>
  }
}
 8009cb6:	bf00      	nop
 8009cb8:	bd80      	pop	{r7, pc}

08009cba <HostStack_Process>:
  * @brief  BLE Host stack processing request.
  * @param  None
  * @retval None
  */
void HostStack_Process(void)
{
 8009cba:	b580      	push	{r7, lr}
 8009cbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HostStack_Process 0 */

  /* USER CODE END HostStack_Process 0 */

  /* Process BLE Host stack */
  BleStackCB_Process();
 8009cbe:	f000 f802 	bl	8009cc6 <BleStackCB_Process>

  /* USER CODE BEGIN HostStack_Process 1 */

  /* USER CODE END HostStack_Process 1 */
}
 8009cc2:	bf00      	nop
 8009cc4:	bd80      	pop	{r7, pc}

08009cc6 <BleStackCB_Process>:
  * @brief  BLE Host stack processing callback.
  * @param  None
  * @retval None
  */
void BleStackCB_Process(void)
{
 8009cc6:	b580      	push	{r7, lr}
 8009cc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BleStackCB_Process 0 */

  /* USER CODE END BleStackCB_Process 0 */
  /* BLE Host stack processing through background task */
  UTIL_SEQ_SetTask( 1U << CFG_TASK_BLE_HOST, CFG_SEQ_PRIO_0);
 8009cca:	2100      	movs	r1, #0
 8009ccc:	2008      	movs	r0, #8
 8009cce:	f006 fdfd 	bl	80108cc <UTIL_SEQ_SetTask>

  /* USER CODE BEGIN BleStackCB_Process 1 */

  /* USER CODE END BleStackCB_Process 1 */
}
 8009cd2:	bf00      	nop
 8009cd4:	bd80      	pop	{r7, pc}
	...

08009cd8 <__NVIC_GetActive>:
{
 8009cd8:	b480      	push	{r7}
 8009cda:	b083      	sub	sp, #12
 8009cdc:	af00      	add	r7, sp, #0
 8009cde:	4603      	mov	r3, r0
 8009ce0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009ce2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	db0e      	blt.n	8009d08 <__NVIC_GetActive+0x30>
    return((uint32_t)(((NVIC->IABR[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
 8009cea:	4a0b      	ldr	r2, [pc, #44]	@ (8009d18 <__NVIC_GetActive+0x40>)
 8009cec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009cf0:	095b      	lsrs	r3, r3, #5
 8009cf2:	3380      	adds	r3, #128	@ 0x80
 8009cf4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8009cf8:	79fb      	ldrb	r3, [r7, #7]
 8009cfa:	f003 031f 	and.w	r3, r3, #31
 8009cfe:	fa22 f303 	lsr.w	r3, r2, r3
 8009d02:	f003 0301 	and.w	r3, r3, #1
 8009d06:	e000      	b.n	8009d0a <__NVIC_GetActive+0x32>
    return(0U);
 8009d08:	2300      	movs	r3, #0
}
 8009d0a:	4618      	mov	r0, r3
 8009d0c:	370c      	adds	r7, #12
 8009d0e:	46bd      	mov	sp, r7
 8009d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d14:	4770      	bx	lr
 8009d16:	bf00      	nop
 8009d18:	e000e100 	.word	0xe000e100

08009d1c <__NVIC_SetPriority>:
{
 8009d1c:	b480      	push	{r7}
 8009d1e:	b083      	sub	sp, #12
 8009d20:	af00      	add	r7, sp, #0
 8009d22:	4603      	mov	r3, r0
 8009d24:	6039      	str	r1, [r7, #0]
 8009d26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009d28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	db0a      	blt.n	8009d46 <__NVIC_SetPriority+0x2a>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009d30:	683b      	ldr	r3, [r7, #0]
 8009d32:	b2da      	uxtb	r2, r3
 8009d34:	490c      	ldr	r1, [pc, #48]	@ (8009d68 <__NVIC_SetPriority+0x4c>)
 8009d36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009d3a:	0112      	lsls	r2, r2, #4
 8009d3c:	b2d2      	uxtb	r2, r2
 8009d3e:	440b      	add	r3, r1
 8009d40:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8009d44:	e00a      	b.n	8009d5c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009d46:	683b      	ldr	r3, [r7, #0]
 8009d48:	b2da      	uxtb	r2, r3
 8009d4a:	4908      	ldr	r1, [pc, #32]	@ (8009d6c <__NVIC_SetPriority+0x50>)
 8009d4c:	79fb      	ldrb	r3, [r7, #7]
 8009d4e:	f003 030f 	and.w	r3, r3, #15
 8009d52:	3b04      	subs	r3, #4
 8009d54:	0112      	lsls	r2, r2, #4
 8009d56:	b2d2      	uxtb	r2, r2
 8009d58:	440b      	add	r3, r1
 8009d5a:	761a      	strb	r2, [r3, #24]
}
 8009d5c:	bf00      	nop
 8009d5e:	370c      	adds	r7, #12
 8009d60:	46bd      	mov	sp, r7
 8009d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d66:	4770      	bx	lr
 8009d68:	e000e100 	.word	0xe000e100
 8009d6c:	e000ed00 	.word	0xe000ed00

08009d70 <LL_RCC_HSE_IsReady>:
{
 8009d70:	b480      	push	{r7}
 8009d72:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == RCC_CR_HSERDY) ? 1UL : 0UL);
 8009d74:	4b07      	ldr	r3, [pc, #28]	@ (8009d94 <LL_RCC_HSE_IsReady+0x24>)
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009d7c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009d80:	d101      	bne.n	8009d86 <LL_RCC_HSE_IsReady+0x16>
 8009d82:	2301      	movs	r3, #1
 8009d84:	e000      	b.n	8009d88 <LL_RCC_HSE_IsReady+0x18>
 8009d86:	2300      	movs	r3, #0
}
 8009d88:	4618      	mov	r0, r3
 8009d8a:	46bd      	mov	sp, r7
 8009d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d90:	4770      	bx	lr
 8009d92:	bf00      	nop
 8009d94:	46020c00 	.word	0x46020c00

08009d98 <LL_RCC_RADIO_GetSleepTimerClockSource>:
{
 8009d98:	b480      	push	{r7}
 8009d9a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR1, RCC_BDCR1_RADIOSTSEL));
 8009d9c:	4b04      	ldr	r3, [pc, #16]	@ (8009db0 <LL_RCC_RADIO_GetSleepTimerClockSource+0x18>)
 8009d9e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009da2:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
}
 8009da6:	4618      	mov	r0, r3
 8009da8:	46bd      	mov	sp, r7
 8009daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dae:	4770      	bx	lr
 8009db0:	46020c00 	.word	0x46020c00

08009db4 <LL_PWR_IsActiveFlag_VOS>:
  *         scaling range or not.
  * @rmtoll VOSR          VOSRDY          LL_PWR_IsActiveFlag_VOS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_VOS(void)
{
 8009db4:	b480      	push	{r7}
 8009db6:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->VOSR, PWR_VOSR_VOSRDY) == (PWR_VOSR_VOSRDY)) ? 1UL : 0UL);
 8009db8:	4b07      	ldr	r3, [pc, #28]	@ (8009dd8 <LL_PWR_IsActiveFlag_VOS+0x24>)
 8009dba:	68db      	ldr	r3, [r3, #12]
 8009dbc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009dc0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009dc4:	d101      	bne.n	8009dca <LL_PWR_IsActiveFlag_VOS+0x16>
 8009dc6:	2301      	movs	r3, #1
 8009dc8:	e000      	b.n	8009dcc <LL_PWR_IsActiveFlag_VOS+0x18>
 8009dca:	2300      	movs	r3, #0
}
 8009dcc:	4618      	mov	r0, r3
 8009dce:	46bd      	mov	sp, r7
 8009dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd4:	4770      	bx	lr
 8009dd6:	bf00      	nop
 8009dd8:	46020800 	.word	0x46020800

08009ddc <LINKLAYER_PLAT_ClockInit>:
  * @brief  Configure the necessary clock sources for the radio.
  * @param  None
  * @retval None
  */
void LINKLAYER_PLAT_ClockInit()
{
 8009ddc:	b580      	push	{r7, lr}
 8009dde:	b082      	sub	sp, #8
 8009de0:	af00      	add	r7, sp, #0
  uint32_t linklayer_slp_clk_src = LL_RCC_RADIOSLEEPSOURCE_NONE;
 8009de2:	2300      	movs	r3, #0
 8009de4:	607b      	str	r3, [r7, #4]

  /* Get the Link Layer sleep timer clock source */
  linklayer_slp_clk_src = LL_RCC_RADIO_GetSleepTimerClockSource();
 8009de6:	f7ff ffd7 	bl	8009d98 <LL_RCC_RADIO_GetSleepTimerClockSource>
 8009dea:	6078      	str	r0, [r7, #4]
    /* If there is no clock source defined, should be selected before */
    assert_param(0);
  }

  /* Enable AHB5ENR peripheral clock (bus CLK) */
  __HAL_RCC_RADIO_CLK_ENABLE();
 8009dec:	4b09      	ldr	r3, [pc, #36]	@ (8009e14 <LINKLAYER_PLAT_ClockInit+0x38>)
 8009dee:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009df2:	4a08      	ldr	r2, [pc, #32]	@ (8009e14 <LINKLAYER_PLAT_ClockInit+0x38>)
 8009df4:	f043 0301 	orr.w	r3, r3, #1
 8009df8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
 8009dfc:	4b05      	ldr	r3, [pc, #20]	@ (8009e14 <LINKLAYER_PLAT_ClockInit+0x38>)
 8009dfe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009e02:	f003 0301 	and.w	r3, r3, #1
 8009e06:	603b      	str	r3, [r7, #0]
 8009e08:	683b      	ldr	r3, [r7, #0]
}
 8009e0a:	bf00      	nop
 8009e0c:	3708      	adds	r7, #8
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	bd80      	pop	{r7, pc}
 8009e12:	bf00      	nop
 8009e14:	46020c00 	.word	0x46020c00

08009e18 <LINKLAYER_PLAT_DelayUs>:
  * @brief  Link Layer active waiting loop.
  * @param  delay: delay in us
  * @retval None
  */
void LINKLAYER_PLAT_DelayUs(uint32_t delay)
{
 8009e18:	b480      	push	{r7}
 8009e1a:	b085      	sub	sp, #20
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	6078      	str	r0, [r7, #4]
__IO register uint32_t Delay = delay * (SystemCoreClock / 1000000U);
 8009e20:	4b0b      	ldr	r3, [pc, #44]	@ (8009e50 <LINKLAYER_PLAT_DelayUs+0x38>)
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	4a0b      	ldr	r2, [pc, #44]	@ (8009e54 <LINKLAYER_PLAT_DelayUs+0x3c>)
 8009e26:	fba2 2303 	umull	r2, r3, r2, r3
 8009e2a:	0c9b      	lsrs	r3, r3, #18
 8009e2c:	687a      	ldr	r2, [r7, #4]
 8009e2e:	fb02 f303 	mul.w	r3, r2, r3
 8009e32:	60fb      	str	r3, [r7, #12]
	do
	{
		__NOP();
 8009e34:	bf00      	nop
	}
	while (Delay --);
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	1e5a      	subs	r2, r3, #1
 8009e3a:	60fa      	str	r2, [r7, #12]
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d1f9      	bne.n	8009e34 <LINKLAYER_PLAT_DelayUs+0x1c>
}
 8009e40:	bf00      	nop
 8009e42:	bf00      	nop
 8009e44:	3714      	adds	r7, #20
 8009e46:	46bd      	mov	sp, r7
 8009e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e4c:	4770      	bx	lr
 8009e4e:	bf00      	nop
 8009e50:	20000024 	.word	0x20000024
 8009e54:	431bde83 	.word	0x431bde83

08009e58 <LINKLAYER_PLAT_Assert>:
  * @brief  Link Layer assertion API
  * @param  condition: conditional statement to be checked.
  * @retval None
  */
void LINKLAYER_PLAT_Assert(uint8_t condition)
{
 8009e58:	b480      	push	{r7}
 8009e5a:	b083      	sub	sp, #12
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	4603      	mov	r3, r0
 8009e60:	71fb      	strb	r3, [r7, #7]
  assert_param(condition);
}
 8009e62:	bf00      	nop
 8009e64:	370c      	adds	r7, #12
 8009e66:	46bd      	mov	sp, r7
 8009e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e6c:	4770      	bx	lr

08009e6e <LINKLAYER_PLAT_AclkCtrl>:
  * @brief  Active wait on bus clock readiness.
  * @param  None
  * @retval None
  */
void LINKLAYER_PLAT_AclkCtrl(uint8_t enable)
{
 8009e6e:	b580      	push	{r7, lr}
 8009e70:	b082      	sub	sp, #8
 8009e72:	af00      	add	r7, sp, #0
 8009e74:	4603      	mov	r3, r0
 8009e76:	71fb      	strb	r3, [r7, #7]
  if(enable){
 8009e78:	79fb      	ldrb	r3, [r7, #7]
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d008      	beq.n	8009e90 <LINKLAYER_PLAT_AclkCtrl+0x22>
    /* Enable RADIO baseband clock (active CLK) */
    HAL_RCCEx_EnableRadioBBClock();
 8009e7e:	f7fb fddd 	bl	8005a3c <HAL_RCCEx_EnableRadioBBClock>

    /* Polling on HSE32 activation */
    while ( LL_RCC_HSE_IsReady() == 0);
 8009e82:	bf00      	nop
 8009e84:	f7ff ff74 	bl	8009d70 <LL_RCC_HSE_IsReady>
 8009e88:	4603      	mov	r3, r0
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d0fa      	beq.n	8009e84 <LINKLAYER_PLAT_AclkCtrl+0x16>
  else
  {
    /* Disable RADIO baseband clock (active CLK) */
    HAL_RCCEx_DisableRadioBBClock();
  }
}
 8009e8e:	e001      	b.n	8009e94 <LINKLAYER_PLAT_AclkCtrl+0x26>
    HAL_RCCEx_DisableRadioBBClock();
 8009e90:	f7fb fde6 	bl	8005a60 <HAL_RCCEx_DisableRadioBBClock>
}
 8009e94:	bf00      	nop
 8009e96:	3708      	adds	r7, #8
 8009e98:	46bd      	mov	sp, r7
 8009e9a:	bd80      	pop	{r7, pc}

08009e9c <LINKLAYER_PLAT_GetRNG>:
  * @param  ptr_rnd: pointer to the variable that hosts the number.
  * @param  len: number of byte of anthropy to get.
  * @retval None
  */
void LINKLAYER_PLAT_GetRNG(uint8_t *ptr_rnd, uint32_t len)
{
 8009e9c:	b580      	push	{r7, lr}
 8009e9e:	b084      	sub	sp, #16
 8009ea0:	af00      	add	r7, sp, #0
 8009ea2:	6078      	str	r0, [r7, #4]
 8009ea4:	6039      	str	r1, [r7, #0]
  uint32_t nb_remaining_rng = len;
 8009ea6:	683b      	ldr	r3, [r7, #0]
 8009ea8:	60fb      	str	r3, [r7, #12]
  uint32_t generated_rng;

  /* Get the requested RNGs (4 bytes by 4bytes) */
  while(nb_remaining_rng >= 4)
 8009eaa:	e011      	b.n	8009ed0 <LINKLAYER_PLAT_GetRNG+0x34>
  {
    generated_rng = 0;
 8009eac:	2300      	movs	r3, #0
 8009eae:	60bb      	str	r3, [r7, #8]
    HW_RNG_Get(1, &generated_rng);
 8009eb0:	f107 0308 	add.w	r3, r7, #8
 8009eb4:	4619      	mov	r1, r3
 8009eb6:	2001      	movs	r0, #1
 8009eb8:	f000 ff7e 	bl	800adb8 <HW_RNG_Get>
    memcpy((ptr_rnd+(len-nb_remaining_rng)), &generated_rng, 4);
 8009ebc:	683a      	ldr	r2, [r7, #0]
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	1ad3      	subs	r3, r2, r3
 8009ec2:	687a      	ldr	r2, [r7, #4]
 8009ec4:	4413      	add	r3, r2
 8009ec6:	68ba      	ldr	r2, [r7, #8]
 8009ec8:	601a      	str	r2, [r3, #0]
    nb_remaining_rng -=4;
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	3b04      	subs	r3, #4
 8009ece:	60fb      	str	r3, [r7, #12]
  while(nb_remaining_rng >= 4)
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	2b03      	cmp	r3, #3
 8009ed4:	d8ea      	bhi.n	8009eac <LINKLAYER_PLAT_GetRNG+0x10>
  }

  /* Get the remaining number of RNGs */
  if(nb_remaining_rng>0){
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d012      	beq.n	8009f02 <LINKLAYER_PLAT_GetRNG+0x66>
    generated_rng = 0;
 8009edc:	2300      	movs	r3, #0
 8009ede:	60bb      	str	r3, [r7, #8]
    HW_RNG_Get(1, &generated_rng);
 8009ee0:	f107 0308 	add.w	r3, r7, #8
 8009ee4:	4619      	mov	r1, r3
 8009ee6:	2001      	movs	r0, #1
 8009ee8:	f000 ff66 	bl	800adb8 <HW_RNG_Get>
    memcpy((ptr_rnd+(len-nb_remaining_rng)), &generated_rng, nb_remaining_rng);
 8009eec:	683a      	ldr	r2, [r7, #0]
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	1ad3      	subs	r3, r2, r3
 8009ef2:	687a      	ldr	r2, [r7, #4]
 8009ef4:	4413      	add	r3, r2
 8009ef6:	f107 0108 	add.w	r1, r7, #8
 8009efa:	68fa      	ldr	r2, [r7, #12]
 8009efc:	4618      	mov	r0, r3
 8009efe:	f025 fa8e 	bl	802f41e <memcpy>
  }
}
 8009f02:	bf00      	nop
 8009f04:	3710      	adds	r7, #16
 8009f06:	46bd      	mov	sp, r7
 8009f08:	bd80      	pop	{r7, pc}
	...

08009f0c <LINKLAYER_PLAT_SetupRadioIT>:
  * @brief  Initialize Link Layer radio high priority interrupt.
  * @param  intr_cb: function pointer to assign for the radio high priority ISR routine.
  * @retval None
  */
void LINKLAYER_PLAT_SetupRadioIT(void (*intr_cb)())
{
 8009f0c:	b580      	push	{r7, lr}
 8009f0e:	b082      	sub	sp, #8
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	6078      	str	r0, [r7, #4]
  radio_callback = intr_cb;
 8009f14:	4a07      	ldr	r2, [pc, #28]	@ (8009f34 <LINKLAYER_PLAT_SetupRadioIT+0x28>)
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriority((IRQn_Type) RADIO_INTR_NUM, RADIO_INTR_PRIO_HIGH, 0);
 8009f1a:	2200      	movs	r2, #0
 8009f1c:	2100      	movs	r1, #0
 8009f1e:	2042      	movs	r0, #66	@ 0x42
 8009f20:	f7f8 fee2 	bl	8002ce8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type) RADIO_INTR_NUM);
 8009f24:	2042      	movs	r0, #66	@ 0x42
 8009f26:	f7f8 fefc 	bl	8002d22 <HAL_NVIC_EnableIRQ>
}
 8009f2a:	bf00      	nop
 8009f2c:	3708      	adds	r7, #8
 8009f2e:	46bd      	mov	sp, r7
 8009f30:	bd80      	pop	{r7, pc}
 8009f32:	bf00      	nop
 8009f34:	20006940 	.word	0x20006940

08009f38 <LINKLAYER_PLAT_SetupSwLowIT>:
  * @brief  Initialize Link Layer SW low priority interrupt.
  * @param  intr_cb: function pointer to assign for the SW low priority ISR routine.
  * @retval None
  */
void LINKLAYER_PLAT_SetupSwLowIT(void (*intr_cb)())
{
 8009f38:	b580      	push	{r7, lr}
 8009f3a:	b082      	sub	sp, #8
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	6078      	str	r0, [r7, #4]
  low_isr_callback = intr_cb;
 8009f40:	4a07      	ldr	r2, [pc, #28]	@ (8009f60 <LINKLAYER_PLAT_SetupSwLowIT+0x28>)
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	6013      	str	r3, [r2, #0]

  HAL_NVIC_SetPriority((IRQn_Type) RADIO_SW_LOW_INTR_NUM, RADIO_SW_LOW_INTR_PRIO, 0);
 8009f46:	2200      	movs	r2, #0
 8009f48:	210f      	movs	r1, #15
 8009f4a:	203d      	movs	r0, #61	@ 0x3d
 8009f4c:	f7f8 fecc 	bl	8002ce8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type) RADIO_SW_LOW_INTR_NUM);
 8009f50:	203d      	movs	r0, #61	@ 0x3d
 8009f52:	f7f8 fee6 	bl	8002d22 <HAL_NVIC_EnableIRQ>
}
 8009f56:	bf00      	nop
 8009f58:	3708      	adds	r7, #8
 8009f5a:	46bd      	mov	sp, r7
 8009f5c:	bd80      	pop	{r7, pc}
 8009f5e:	bf00      	nop
 8009f60:	20006944 	.word	0x20006944

08009f64 <LINKLAYER_PLAT_TriggerSwLowIT>:
  * @brief  Trigger the link layer SW low interrupt.
  * @param  None
  * @retval None
  */
void LINKLAYER_PLAT_TriggerSwLowIT(uint8_t priority)
{
 8009f64:	b580      	push	{r7, lr}
 8009f66:	b084      	sub	sp, #16
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	4603      	mov	r3, r0
 8009f6c:	71fb      	strb	r3, [r7, #7]
  uint8_t low_isr_priority = RADIO_INTR_PRIO_LOW;
 8009f6e:	2305      	movs	r3, #5
 8009f70:	73fb      	strb	r3, [r7, #15]

  /* Check if a SW low interrupt as already been raised.
   * Nested call far radio low isr are not supported
   **/

  if(NVIC_GetActive(RADIO_SW_LOW_INTR_NUM) == 0)
 8009f72:	203d      	movs	r0, #61	@ 0x3d
 8009f74:	f7ff feb0 	bl	8009cd8 <__NVIC_GetActive>
 8009f78:	4603      	mov	r3, r0
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d10b      	bne.n	8009f96 <LINKLAYER_PLAT_TriggerSwLowIT+0x32>
  {
    /* No nested SW low ISR, default behavior */

    if(priority == 0)
 8009f7e:	79fb      	ldrb	r3, [r7, #7]
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d101      	bne.n	8009f88 <LINKLAYER_PLAT_TriggerSwLowIT+0x24>
    {
      low_isr_priority = RADIO_SW_LOW_INTR_PRIO;
 8009f84:	230f      	movs	r3, #15
 8009f86:	73fb      	strb	r3, [r7, #15]
    }

    HAL_NVIC_SetPriority((IRQn_Type) RADIO_SW_LOW_INTR_NUM, low_isr_priority, 0);
 8009f88:	7bfb      	ldrb	r3, [r7, #15]
 8009f8a:	2200      	movs	r2, #0
 8009f8c:	4619      	mov	r1, r3
 8009f8e:	203d      	movs	r0, #61	@ 0x3d
 8009f90:	f7f8 feaa 	bl	8002ce8 <HAL_NVIC_SetPriority>
 8009f94:	e005      	b.n	8009fa2 <LINKLAYER_PLAT_TriggerSwLowIT+0x3e>
  else
  {
    /* Nested call detected */
    /* No change for SW radio low interrupt priority for the moment */

    if(priority != 0)
 8009f96:	79fb      	ldrb	r3, [r7, #7]
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d002      	beq.n	8009fa2 <LINKLAYER_PLAT_TriggerSwLowIT+0x3e>
    {
      /* At the end of current SW radio low ISR, this pending SW low interrupt
       * will run with RADIO_INTR_PRIO_LOW priority
       **/
      radio_sw_low_isr_is_running_high_prio = 1;
 8009f9c:	4b04      	ldr	r3, [pc, #16]	@ (8009fb0 <LINKLAYER_PLAT_TriggerSwLowIT+0x4c>)
 8009f9e:	2201      	movs	r2, #1
 8009fa0:	701a      	strb	r2, [r3, #0]
    }
  }

  HAL_NVIC_SetPendingIRQ((IRQn_Type) RADIO_SW_LOW_INTR_NUM);
 8009fa2:	203d      	movs	r0, #61	@ 0x3d
 8009fa4:	f7f8 fefc 	bl	8002da0 <HAL_NVIC_SetPendingIRQ>
}
 8009fa8:	bf00      	nop
 8009faa:	3710      	adds	r7, #16
 8009fac:	46bd      	mov	sp, r7
 8009fae:	bd80      	pop	{r7, pc}
 8009fb0:	20006960 	.word	0x20006960

08009fb4 <LINKLAYER_PLAT_EnableIRQ>:
  * @brief  Enable interrupts.
  * @param  None
  * @retval None
  */
void LINKLAYER_PLAT_EnableIRQ(void)
{
 8009fb4:	b480      	push	{r7}
 8009fb6:	b083      	sub	sp, #12
 8009fb8:	af00      	add	r7, sp, #0
  irq_counter = max(0,irq_counter-1);
 8009fba:	4b0e      	ldr	r3, [pc, #56]	@ (8009ff4 <LINKLAYER_PLAT_EnableIRQ+0x40>)
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	dd03      	ble.n	8009fca <LINKLAYER_PLAT_EnableIRQ+0x16>
 8009fc2:	4b0c      	ldr	r3, [pc, #48]	@ (8009ff4 <LINKLAYER_PLAT_EnableIRQ+0x40>)
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	3b01      	subs	r3, #1
 8009fc8:	e000      	b.n	8009fcc <LINKLAYER_PLAT_EnableIRQ+0x18>
 8009fca:	2300      	movs	r3, #0
 8009fcc:	4a09      	ldr	r2, [pc, #36]	@ (8009ff4 <LINKLAYER_PLAT_EnableIRQ+0x40>)
 8009fce:	6013      	str	r3, [r2, #0]

  if(irq_counter == 0)
 8009fd0:	4b08      	ldr	r3, [pc, #32]	@ (8009ff4 <LINKLAYER_PLAT_EnableIRQ+0x40>)
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d106      	bne.n	8009fe6 <LINKLAYER_PLAT_EnableIRQ+0x32>
  {
    /* When irq_counter reaches 0, restore primask bit */
    __set_PRIMASK(primask_bit);
 8009fd8:	4b07      	ldr	r3, [pc, #28]	@ (8009ff8 <LINKLAYER_PLAT_EnableIRQ+0x44>)
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	f383 8810 	msr	PRIMASK, r3
}
 8009fe4:	bf00      	nop
  }
}
 8009fe6:	bf00      	nop
 8009fe8:	370c      	adds	r7, #12
 8009fea:	46bd      	mov	sp, r7
 8009fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff0:	4770      	bx	lr
 8009ff2:	bf00      	nop
 8009ff4:	20006958 	.word	0x20006958
 8009ff8:	20006948 	.word	0x20006948

08009ffc <LINKLAYER_PLAT_DisableIRQ>:
  * @brief  Disable interrupts.
  * @param  None
  * @retval None
  */
void LINKLAYER_PLAT_DisableIRQ(void)
{
 8009ffc:	b480      	push	{r7}
 8009ffe:	b083      	sub	sp, #12
 800a000:	af00      	add	r7, sp, #0
  if(irq_counter == 0)
 800a002:	4b0b      	ldr	r3, [pc, #44]	@ (800a030 <LINKLAYER_PLAT_DisableIRQ+0x34>)
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	2b00      	cmp	r3, #0
 800a008:	d105      	bne.n	800a016 <LINKLAYER_PLAT_DisableIRQ+0x1a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800a00a:	f3ef 8310 	mrs	r3, PRIMASK
 800a00e:	607b      	str	r3, [r7, #4]
  return(result);
 800a010:	687b      	ldr	r3, [r7, #4]
  {
    /* Save primask bit at first interrupt disablement */
    primask_bit= __get_PRIMASK();
 800a012:	4a08      	ldr	r2, [pc, #32]	@ (800a034 <LINKLAYER_PLAT_DisableIRQ+0x38>)
 800a014:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800a016:	b672      	cpsid	i
}
 800a018:	bf00      	nop
  }
  __disable_irq();
  irq_counter ++;
 800a01a:	4b05      	ldr	r3, [pc, #20]	@ (800a030 <LINKLAYER_PLAT_DisableIRQ+0x34>)
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	3301      	adds	r3, #1
 800a020:	4a03      	ldr	r2, [pc, #12]	@ (800a030 <LINKLAYER_PLAT_DisableIRQ+0x34>)
 800a022:	6013      	str	r3, [r2, #0]
}
 800a024:	bf00      	nop
 800a026:	370c      	adds	r7, #12
 800a028:	46bd      	mov	sp, r7
 800a02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a02e:	4770      	bx	lr
 800a030:	20006958 	.word	0x20006958
 800a034:	20006948 	.word	0x20006948

0800a038 <LINKLAYER_PLAT_EnableSpecificIRQ>:
  *         @arg SYS_LOW_ISR: mask interrupts for all the other system ISR with
  *              lower priority that link layer SW low interrupt.
  * @retval None
  */
void LINKLAYER_PLAT_EnableSpecificIRQ(uint8_t isr_type)
{
 800a038:	b580      	push	{r7, lr}
 800a03a:	b084      	sub	sp, #16
 800a03c:	af00      	add	r7, sp, #0
 800a03e:	4603      	mov	r3, r0
 800a040:	71fb      	strb	r3, [r7, #7]
  if( (isr_type & LL_HIGH_ISR_ONLY) != 0 )
 800a042:	79fb      	ldrb	r3, [r7, #7]
 800a044:	f003 0301 	and.w	r3, r3, #1
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d00b      	beq.n	800a064 <LINKLAYER_PLAT_EnableSpecificIRQ+0x2c>
  {
    prio_high_isr_counter--;
 800a04c:	4b1a      	ldr	r3, [pc, #104]	@ (800a0b8 <LINKLAYER_PLAT_EnableSpecificIRQ+0x80>)
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	3b01      	subs	r3, #1
 800a052:	4a19      	ldr	r2, [pc, #100]	@ (800a0b8 <LINKLAYER_PLAT_EnableSpecificIRQ+0x80>)
 800a054:	6013      	str	r3, [r2, #0]
    if(prio_high_isr_counter == 0)
 800a056:	4b18      	ldr	r3, [pc, #96]	@ (800a0b8 <LINKLAYER_PLAT_EnableSpecificIRQ+0x80>)
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d102      	bne.n	800a064 <LINKLAYER_PLAT_EnableSpecificIRQ+0x2c>
    {
      /* When specific counter for link layer high ISR reaches 0, interrupt is enabled */
      HAL_NVIC_EnableIRQ(RADIO_INTR_NUM);
 800a05e:	2042      	movs	r0, #66	@ 0x42
 800a060:	f7f8 fe5f 	bl	8002d22 <HAL_NVIC_EnableIRQ>

      /* USER CODE END LINKLAYER_PLAT_EnableSpecificIRQ_1*/
    }
  }

  if( (isr_type & LL_LOW_ISR_ONLY) != 0 )
 800a064:	79fb      	ldrb	r3, [r7, #7]
 800a066:	f003 0302 	and.w	r3, r3, #2
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d00b      	beq.n	800a086 <LINKLAYER_PLAT_EnableSpecificIRQ+0x4e>
  {
    prio_low_isr_counter--;
 800a06e:	4b13      	ldr	r3, [pc, #76]	@ (800a0bc <LINKLAYER_PLAT_EnableSpecificIRQ+0x84>)
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	3b01      	subs	r3, #1
 800a074:	4a11      	ldr	r2, [pc, #68]	@ (800a0bc <LINKLAYER_PLAT_EnableSpecificIRQ+0x84>)
 800a076:	6013      	str	r3, [r2, #0]
    if(prio_low_isr_counter == 0)
 800a078:	4b10      	ldr	r3, [pc, #64]	@ (800a0bc <LINKLAYER_PLAT_EnableSpecificIRQ+0x84>)
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d102      	bne.n	800a086 <LINKLAYER_PLAT_EnableSpecificIRQ+0x4e>
    {
      /* When specific counter for link layer SW low ISR reaches 0, interrupt is enabled */
      HAL_NVIC_EnableIRQ(RADIO_SW_LOW_INTR_NUM);
 800a080:	203d      	movs	r0, #61	@ 0x3d
 800a082:	f7f8 fe4e 	bl	8002d22 <HAL_NVIC_EnableIRQ>
    }

  }

  if( (isr_type & SYS_LOW_ISR) != 0 )
 800a086:	79fb      	ldrb	r3, [r7, #7]
 800a088:	f003 0304 	and.w	r3, r3, #4
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d00f      	beq.n	800a0b0 <LINKLAYER_PLAT_EnableSpecificIRQ+0x78>
  {
    prio_sys_isr_counter--;
 800a090:	4b0b      	ldr	r3, [pc, #44]	@ (800a0c0 <LINKLAYER_PLAT_EnableSpecificIRQ+0x88>)
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	3b01      	subs	r3, #1
 800a096:	4a0a      	ldr	r2, [pc, #40]	@ (800a0c0 <LINKLAYER_PLAT_EnableSpecificIRQ+0x88>)
 800a098:	6013      	str	r3, [r2, #0]
    if(prio_sys_isr_counter == 0)
 800a09a:	4b09      	ldr	r3, [pc, #36]	@ (800a0c0 <LINKLAYER_PLAT_EnableSpecificIRQ+0x88>)
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d106      	bne.n	800a0b0 <LINKLAYER_PLAT_EnableSpecificIRQ+0x78>
    {
      /* Restore basepri value */
      __set_BASEPRI(local_basepri_value);
 800a0a2:	4b08      	ldr	r3, [pc, #32]	@ (800a0c4 <LINKLAYER_PLAT_EnableSpecificIRQ+0x8c>)
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Base Priority register.
  \param [in]    basePri  Base Priority value to set
 */
__STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	f383 8811 	msr	BASEPRI, r3
}
 800a0ae:	bf00      	nop
    }
  }
}
 800a0b0:	bf00      	nop
 800a0b2:	3710      	adds	r7, #16
 800a0b4:	46bd      	mov	sp, r7
 800a0b6:	bd80      	pop	{r7, pc}
 800a0b8:	2000694c 	.word	0x2000694c
 800a0bc:	20006950 	.word	0x20006950
 800a0c0:	20006954 	.word	0x20006954
 800a0c4:	2000695c 	.word	0x2000695c

0800a0c8 <LINKLAYER_PLAT_DisableSpecificIRQ>:
  *         @arg SYS_LOW_ISR: unmask interrupts for all the other system ISR with
  *              lower priority that link layer SW low interrupt.
  * @retval None
  */
void LINKLAYER_PLAT_DisableSpecificIRQ(uint8_t isr_type)
{
 800a0c8:	b580      	push	{r7, lr}
 800a0ca:	b084      	sub	sp, #16
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	4603      	mov	r3, r0
 800a0d0:	71fb      	strb	r3, [r7, #7]
  if( (isr_type & LL_HIGH_ISR_ONLY) != 0 )
 800a0d2:	79fb      	ldrb	r3, [r7, #7]
 800a0d4:	f003 0301 	and.w	r3, r3, #1
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d00b      	beq.n	800a0f4 <LINKLAYER_PLAT_DisableSpecificIRQ+0x2c>
  {
    prio_high_isr_counter++;
 800a0dc:	4b1d      	ldr	r3, [pc, #116]	@ (800a154 <LINKLAYER_PLAT_DisableSpecificIRQ+0x8c>)
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	3301      	adds	r3, #1
 800a0e2:	4a1c      	ldr	r2, [pc, #112]	@ (800a154 <LINKLAYER_PLAT_DisableSpecificIRQ+0x8c>)
 800a0e4:	6013      	str	r3, [r2, #0]
    if(prio_high_isr_counter == 1)
 800a0e6:	4b1b      	ldr	r3, [pc, #108]	@ (800a154 <LINKLAYER_PLAT_DisableSpecificIRQ+0x8c>)
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	2b01      	cmp	r3, #1
 800a0ec:	d102      	bne.n	800a0f4 <LINKLAYER_PLAT_DisableSpecificIRQ+0x2c>
    {
      /* USER CODE BEGIN LINKLAYER_PLAT_DisableSpecificIRQ_1*/

      /* USER CODE END LINKLAYER_PLAT_DisableSpecificIRQ_1*/
      /* When specific counter for link layer high ISR value is 1, interrupt is disabled */
      HAL_NVIC_DisableIRQ(RADIO_INTR_NUM);
 800a0ee:	2042      	movs	r0, #66	@ 0x42
 800a0f0:	f7f8 fe25 	bl	8002d3e <HAL_NVIC_DisableIRQ>
    }
  }

  if( (isr_type & LL_LOW_ISR_ONLY) != 0 )
 800a0f4:	79fb      	ldrb	r3, [r7, #7]
 800a0f6:	f003 0302 	and.w	r3, r3, #2
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d00b      	beq.n	800a116 <LINKLAYER_PLAT_DisableSpecificIRQ+0x4e>
  {
    prio_low_isr_counter++;
 800a0fe:	4b16      	ldr	r3, [pc, #88]	@ (800a158 <LINKLAYER_PLAT_DisableSpecificIRQ+0x90>)
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	3301      	adds	r3, #1
 800a104:	4a14      	ldr	r2, [pc, #80]	@ (800a158 <LINKLAYER_PLAT_DisableSpecificIRQ+0x90>)
 800a106:	6013      	str	r3, [r2, #0]
    if(prio_low_isr_counter == 1)
 800a108:	4b13      	ldr	r3, [pc, #76]	@ (800a158 <LINKLAYER_PLAT_DisableSpecificIRQ+0x90>)
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	2b01      	cmp	r3, #1
 800a10e:	d102      	bne.n	800a116 <LINKLAYER_PLAT_DisableSpecificIRQ+0x4e>
    {
      /* When specific counter for link layer SW low ISR value is 1, interrupt is disabled */
      HAL_NVIC_DisableIRQ(RADIO_SW_LOW_INTR_NUM);
 800a110:	203d      	movs	r0, #61	@ 0x3d
 800a112:	f7f8 fe14 	bl	8002d3e <HAL_NVIC_DisableIRQ>
    }
  }

  if( (isr_type & SYS_LOW_ISR) != 0 )
 800a116:	79fb      	ldrb	r3, [r7, #7]
 800a118:	f003 0304 	and.w	r3, r3, #4
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d014      	beq.n	800a14a <LINKLAYER_PLAT_DisableSpecificIRQ+0x82>
  {
    prio_sys_isr_counter++;
 800a120:	4b0e      	ldr	r3, [pc, #56]	@ (800a15c <LINKLAYER_PLAT_DisableSpecificIRQ+0x94>)
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	3301      	adds	r3, #1
 800a126:	4a0d      	ldr	r2, [pc, #52]	@ (800a15c <LINKLAYER_PLAT_DisableSpecificIRQ+0x94>)
 800a128:	6013      	str	r3, [r2, #0]
    if(prio_sys_isr_counter == 1)
 800a12a:	4b0c      	ldr	r3, [pc, #48]	@ (800a15c <LINKLAYER_PLAT_DisableSpecificIRQ+0x94>)
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	2b01      	cmp	r3, #1
 800a130:	d10b      	bne.n	800a14a <LINKLAYER_PLAT_DisableSpecificIRQ+0x82>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a132:	f3ef 8311 	mrs	r3, BASEPRI
 800a136:	60bb      	str	r3, [r7, #8]
  return(result);
 800a138:	68bb      	ldr	r3, [r7, #8]
    {
      /* Save basepri register value */
      local_basepri_value = __get_BASEPRI();
 800a13a:	4a09      	ldr	r2, [pc, #36]	@ (800a160 <LINKLAYER_PLAT_DisableSpecificIRQ+0x98>)
 800a13c:	6013      	str	r3, [r2, #0]
 800a13e:	2350      	movs	r3, #80	@ 0x50
 800a140:	60fb      	str	r3, [r7, #12]
           or the new value increases the BASEPRI priority level.
  \param [in]    basePri  Base Priority value to set
 */
__STATIC_FORCEINLINE void __set_BASEPRI_MAX(uint32_t basePri)
{
  __ASM volatile ("MSR basepri_max, %0" : : "r" (basePri) : "memory");
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	f383 8812 	msr	BASEPRI_MAX, r3
}
 800a148:	bf00      	nop

      /* Mask all other interrupts with lower priority that link layer SW low ISR */
      __set_BASEPRI_MAX(RADIO_INTR_PRIO_LOW<<4);
    }
  }
}
 800a14a:	bf00      	nop
 800a14c:	3710      	adds	r7, #16
 800a14e:	46bd      	mov	sp, r7
 800a150:	bd80      	pop	{r7, pc}
 800a152:	bf00      	nop
 800a154:	2000694c 	.word	0x2000694c
 800a158:	20006950 	.word	0x20006950
 800a15c:	20006954 	.word	0x20006954
 800a160:	2000695c 	.word	0x2000695c

0800a164 <LINKLAYER_PLAT_EnableRadioIT>:
  * @brief  Enable link layer high priority ISR only.
  * @param  None
  * @retval None
  */
void LINKLAYER_PLAT_EnableRadioIT(void)
{
 800a164:	b580      	push	{r7, lr}
 800a166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LINKLAYER_PLAT_EnableRadioIT_1*/

  /* USER CODE END LINKLAYER_PLAT_EnableRadioIT_1*/

  HAL_NVIC_EnableIRQ((IRQn_Type) RADIO_INTR_NUM);
 800a168:	2042      	movs	r0, #66	@ 0x42
 800a16a:	f7f8 fdda 	bl	8002d22 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN LINKLAYER_PLAT_EnableRadioIT_2*/

  /* USER CODE END LINKLAYER_PLAT_EnableRadioIT_2*/
}
 800a16e:	bf00      	nop
 800a170:	bd80      	pop	{r7, pc}

0800a172 <LINKLAYER_PLAT_DisableRadioIT>:
  * @brief  Disable link layer high priority ISR only.
  * @param  None
  * @retval None
  */
void LINKLAYER_PLAT_DisableRadioIT(void)
{
 800a172:	b580      	push	{r7, lr}
 800a174:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LINKLAYER_PLAT_DisableRadioIT_1*/

  /* USER CODE END LINKLAYER_PLAT_DisableRadioIT_1*/

  HAL_NVIC_DisableIRQ((IRQn_Type) RADIO_INTR_NUM);
 800a176:	2042      	movs	r0, #66	@ 0x42
 800a178:	f7f8 fde1 	bl	8002d3e <HAL_NVIC_DisableIRQ>

  /* USER CODE BEGIN LINKLAYER_PLAT_DisableRadioIT_2*/

  /* USER CODE END LINKLAYER_PLAT_DisableRadioIT_2*/
}
 800a17c:	bf00      	nop
 800a17e:	bd80      	pop	{r7, pc}

0800a180 <LINKLAYER_PLAT_StartRadioEvt>:
  * @brief  Link Layer notification for radio activity start.
  * @param  None
  * @retval None
  */
void LINKLAYER_PLAT_StartRadioEvt(void)
{
 800a180:	b580      	push	{r7, lr}
 800a182:	af00      	add	r7, sp, #0
  __HAL_RCC_RADIO_CLK_SLEEP_ENABLE();
 800a184:	4b08      	ldr	r3, [pc, #32]	@ (800a1a8 <LINKLAYER_PLAT_StartRadioEvt+0x28>)
 800a186:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800a18a:	4a07      	ldr	r2, [pc, #28]	@ (800a1a8 <LINKLAYER_PLAT_StartRadioEvt+0x28>)
 800a18c:	f043 0301 	orr.w	r3, r3, #1
 800a190:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
  NVIC_SetPriority(RADIO_INTR_NUM, RADIO_INTR_PRIO_HIGH);
 800a194:	2100      	movs	r1, #0
 800a196:	2042      	movs	r0, #66	@ 0x42
 800a198:	f7ff fdc0 	bl	8009d1c <__NVIC_SetPriority>
#if (CFG_SCM_SUPPORTED == 1)
  scm_notifyradiostate(SCM_RADIO_ACTIVE);
 800a19c:	2001      	movs	r0, #1
 800a19e:	f005 ff47 	bl	8010030 <scm_notifyradiostate>
#endif /* CFG_SCM_SUPPORTED */
}
 800a1a2:	bf00      	nop
 800a1a4:	bd80      	pop	{r7, pc}
 800a1a6:	bf00      	nop
 800a1a8:	46020c00 	.word	0x46020c00

0800a1ac <LINKLAYER_PLAT_StopRadioEvt>:
  * @brief  Link Layer notification for radio activity end.
  * @param  None
  * @retval None
  */
void LINKLAYER_PLAT_StopRadioEvt(void)
{
 800a1ac:	b580      	push	{r7, lr}
 800a1ae:	af00      	add	r7, sp, #0
  __HAL_RCC_RADIO_CLK_SLEEP_DISABLE();
 800a1b0:	4b08      	ldr	r3, [pc, #32]	@ (800a1d4 <LINKLAYER_PLAT_StopRadioEvt+0x28>)
 800a1b2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800a1b6:	4a07      	ldr	r2, [pc, #28]	@ (800a1d4 <LINKLAYER_PLAT_StopRadioEvt+0x28>)
 800a1b8:	f023 0301 	bic.w	r3, r3, #1
 800a1bc:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
  NVIC_SetPriority(RADIO_INTR_NUM, RADIO_INTR_PRIO_LOW);
 800a1c0:	2105      	movs	r1, #5
 800a1c2:	2042      	movs	r0, #66	@ 0x42
 800a1c4:	f7ff fdaa 	bl	8009d1c <__NVIC_SetPriority>
#if (CFG_SCM_SUPPORTED == 1)
  scm_notifyradiostate(SCM_RADIO_NOT_ACTIVE);
 800a1c8:	2000      	movs	r0, #0
 800a1ca:	f005 ff31 	bl	8010030 <scm_notifyradiostate>
#endif /* CFG_SCM_SUPPORTED */
}
 800a1ce:	bf00      	nop
 800a1d0:	bd80      	pop	{r7, pc}
 800a1d2:	bf00      	nop
 800a1d4:	46020c00 	.word	0x46020c00

0800a1d8 <LINKLAYER_PLAT_RCOStartClbr>:
  * @brief  Link Layer notification for RCO calibration start.
  * @param  None
  * @retval None
  */
void LINKLAYER_PLAT_RCOStartClbr(void)
{
 800a1d8:	b580      	push	{r7, lr}
 800a1da:	af00      	add	r7, sp, #0
#if (CFG_LPM_STDBY_SUPPORTED == 1)
  UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_DISABLE);
#endif /* (CFG_LPM_STDBY_SUPPORTED == 1) */
  UTIL_LPM_SetStopMode(1U << CFG_LPM_APP, UTIL_LPM_DISABLE);
#endif /* (CFG_LPM_LEVEL != 0) */
  scm_setsystemclock(SCM_USER_LL_HW_RCO_CLBR, HSE_32MHZ);
 800a1dc:	2102      	movs	r1, #2
 800a1de:	2002      	movs	r0, #2
 800a1e0:	f005 fda6 	bl	800fd30 <scm_setsystemclock>
  while (LL_PWR_IsActiveFlag_VOS() == 0);
 800a1e4:	bf00      	nop
 800a1e6:	f7ff fde5 	bl	8009db4 <LL_PWR_IsActiveFlag_VOS>
 800a1ea:	4603      	mov	r3, r0
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d0fa      	beq.n	800a1e6 <LINKLAYER_PLAT_RCOStartClbr+0xe>
#endif /* CFG_SCM_SUPPORTED */
}
 800a1f0:	bf00      	nop
 800a1f2:	bf00      	nop
 800a1f4:	bd80      	pop	{r7, pc}

0800a1f6 <LINKLAYER_PLAT_RCOStopClbr>:
  * @brief  Link Layer notification for RCO calibration end.
  * @param  None
  * @retval None
  */
void LINKLAYER_PLAT_RCOStopClbr(void)
{
 800a1f6:	b580      	push	{r7, lr}
 800a1f8:	af00      	add	r7, sp, #0
#if (CFG_LPM_STDBY_SUPPORTED == 1)
  UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
#endif /* (CFG_LPM_STDBY_SUPPORTED == 1) */
  UTIL_LPM_SetStopMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
#endif /* (CFG_LPM_LEVEL != 0) */
  scm_setsystemclock(SCM_USER_LL_HW_RCO_CLBR, HSE_16MHZ);
 800a1fa:	2101      	movs	r1, #1
 800a1fc:	2002      	movs	r0, #2
 800a1fe:	f005 fd97 	bl	800fd30 <scm_setsystemclock>
  while (LL_PWR_IsActiveFlag_VOS() == 0);
 800a202:	bf00      	nop
 800a204:	f7ff fdd6 	bl	8009db4 <LL_PWR_IsActiveFlag_VOS>
 800a208:	4603      	mov	r3, r0
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d0fa      	beq.n	800a204 <LINKLAYER_PLAT_RCOStopClbr+0xe>
#endif /* CFG_SCM_SUPPORTED */
}
 800a20e:	bf00      	nop
 800a210:	bf00      	nop
 800a212:	bd80      	pop	{r7, pc}

0800a214 <LINKLAYER_PLAT_RequestTemperature>:
  * @brief  Link Layer requests temperature.
  * @param  None
  * @retval None
  */
void LINKLAYER_PLAT_RequestTemperature(void)
{
 800a214:	b480      	push	{r7}
 800a216:	af00      	add	r7, sp, #0
}
 800a218:	bf00      	nop
 800a21a:	46bd      	mov	sp, r7
 800a21c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a220:	4770      	bx	lr

0800a222 <LINKLAYER_PLAT_EnableOSContextSwitch>:
  * @brief  Enable RTOS context switch.
  * @param  None
  * @retval None
  */
void LINKLAYER_PLAT_EnableOSContextSwitch(void)
{
 800a222:	b480      	push	{r7}
 800a224:	af00      	add	r7, sp, #0
}
 800a226:	bf00      	nop
 800a228:	46bd      	mov	sp, r7
 800a22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a22e:	4770      	bx	lr

0800a230 <LINKLAYER_PLAT_DisableOSContextSwitch>:
  * @brief  Disable RTOS context switch.
  * @param  None
  * @retval None
  */
void LINKLAYER_PLAT_DisableOSContextSwitch(void)
{
 800a230:	b480      	push	{r7}
 800a232:	af00      	add	r7, sp, #0
}
 800a234:	bf00      	nop
 800a236:	46bd      	mov	sp, r7
 800a238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a23c:	4770      	bx	lr

0800a23e <LINKLAYER_PLAT_SCHLDR_TIMING_UPDATE_NOT>:
 * @brief Notify the upper layer that new Link Layer timings have been applied.
 * @param evnt_timing[in]: Evnt_timing_t pointer to structure contains drift time , execution time and scheduling time
 * @retval None.
 */
void LINKLAYER_PLAT_SCHLDR_TIMING_UPDATE_NOT(Evnt_timing_t * p_evnt_timing)
{
 800a23e:	b480      	push	{r7}
 800a240:	b083      	sub	sp, #12
 800a242:	af00      	add	r7, sp, #0
 800a244:	6078      	str	r0, [r7, #4]
}
 800a246:	bf00      	nop
 800a248:	370c      	adds	r7, #12
 800a24a:	46bd      	mov	sp, r7
 800a24c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a250:	4770      	bx	lr
	...

0800a254 <LL_RCC_RADIO_GetSleepTimerClockSource>:
{
 800a254:	b480      	push	{r7}
 800a256:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR1, RCC_BDCR1_RADIOSTSEL));
 800a258:	4b04      	ldr	r3, [pc, #16]	@ (800a26c <LL_RCC_RADIO_GetSleepTimerClockSource+0x18>)
 800a25a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a25e:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
}
 800a262:	4618      	mov	r0, r3
 800a264:	46bd      	mov	sp, r7
 800a266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a26a:	4770      	bx	lr
 800a26c:	46020c00 	.word	0x46020c00

0800a270 <ll_sys_bg_process_init>:
  * @brief  Link Layer background process initialization
  * @param  None
  * @retval None
  */
void ll_sys_bg_process_init(void)
{
 800a270:	b580      	push	{r7, lr}
 800a272:	af00      	add	r7, sp, #0
  /* Tasks creation */
  UTIL_SEQ_RegTask(1U << CFG_TASK_LINK_LAYER, UTIL_SEQ_RFU, ll_sys_bg_process);
 800a274:	4a03      	ldr	r2, [pc, #12]	@ (800a284 <ll_sys_bg_process_init+0x14>)
 800a276:	2100      	movs	r1, #0
 800a278:	2002      	movs	r0, #2
 800a27a:	f006 fb05 	bl	8010888 <UTIL_SEQ_RegTask>
}
 800a27e:	bf00      	nop
 800a280:	bd80      	pop	{r7, pc}
 800a282:	bf00      	nop
 800a284:	0800812f 	.word	0x0800812f

0800a288 <ll_sys_schedule_bg_process>:
  * @brief  Link Layer background process next iteration scheduling
  * @param  None
  * @retval None
  */
void ll_sys_schedule_bg_process(void)
{
 800a288:	b580      	push	{r7, lr}
 800a28a:	af00      	add	r7, sp, #0
  UTIL_SEQ_SetTask(1U << CFG_TASK_LINK_LAYER, CFG_TASK_PRIO_LINK_LAYER);
 800a28c:	2100      	movs	r1, #0
 800a28e:	2002      	movs	r0, #2
 800a290:	f006 fb1c 	bl	80108cc <UTIL_SEQ_SetTask>
}
 800a294:	bf00      	nop
 800a296:	bd80      	pop	{r7, pc}

0800a298 <ll_sys_schedule_bg_process_isr>:
  * @brief  Link Layer background process next iteration scheduling from ISR
  * @param  None
  * @retval None
  */
void ll_sys_schedule_bg_process_isr(void)
{
 800a298:	b580      	push	{r7, lr}
 800a29a:	af00      	add	r7, sp, #0
  UTIL_SEQ_SetTask(1U << CFG_TASK_LINK_LAYER, CFG_TASK_PRIO_LINK_LAYER);
 800a29c:	2100      	movs	r1, #0
 800a29e:	2002      	movs	r0, #2
 800a2a0:	f006 fb14 	bl	80108cc <UTIL_SEQ_SetTask>
}
 800a2a4:	bf00      	nop
 800a2a6:	bd80      	pop	{r7, pc}

0800a2a8 <ll_sys_config_params>:
  * @brief  Link Layer configuration phase before application startup.
  * @param  None
  * @retval None
  */
void ll_sys_config_params(void)
{
 800a2a8:	b580      	push	{r7, lr}
 800a2aa:	b082      	sub	sp, #8
 800a2ac:	af00      	add	r7, sp, #0
  uint16_t freq_value = 0;
 800a2ae:	2300      	movs	r3, #0
 800a2b0:	807b      	strh	r3, [r7, #2]
  uint32_t linklayer_slp_clk_src = LL_RCC_RADIOSLEEPSOURCE_NONE;
 800a2b2:	2300      	movs	r3, #0
 800a2b4:	607b      	str	r3, [r7, #4]

  /* Configure link layer behavior for low ISR use and next event scheduling method:
   * - SW low ISR is used.
   * - Next event is scheduled from ISR.
   */
  ll_intf_config_ll_ctx_params(USE_RADIO_LOW_ISR, NEXT_EVENT_SCHEDULING_FROM_ISR);
 800a2b6:	2101      	movs	r1, #1
 800a2b8:	2001      	movs	r0, #1
 800a2ba:	f00a fd2c 	bl	8014d16 <ll_intf_config_ll_ctx_params>

  linklayer_slp_clk_src = LL_RCC_RADIO_GetSleepTimerClockSource();
 800a2be:	f7ff ffc9 	bl	800a254 <LL_RCC_RADIO_GetSleepTimerClockSource>
 800a2c2:	6078      	str	r0, [r7, #4]
  switch(linklayer_slp_clk_src)
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800a2ca:	d018      	beq.n	800a2fe <ll_sys_config_params+0x56>
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800a2d2:	d818      	bhi.n	800a306 <ll_sys_config_params+0x5e>
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800a2da:	d00d      	beq.n	800a2f8 <ll_sys_config_params+0x50>
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800a2e2:	d810      	bhi.n	800a306 <ll_sys_config_params+0x5e>
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d00c      	beq.n	800a304 <ll_sys_config_params+0x5c>
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a2f0:	d109      	bne.n	800a306 <ll_sys_config_params+0x5e>
  {
    case LL_RCC_RADIOSLEEPSOURCE_LSE:
      linklayer_slp_clk_src = RTC_SLPTMR;
 800a2f2:	2302      	movs	r3, #2
 800a2f4:	607b      	str	r3, [r7, #4]
      break;
 800a2f6:	e006      	b.n	800a306 <ll_sys_config_params+0x5e>

    case LL_RCC_RADIOSLEEPSOURCE_LSI:
      linklayer_slp_clk_src = RCO_SLPTMR;
 800a2f8:	2301      	movs	r3, #1
 800a2fa:	607b      	str	r3, [r7, #4]
      break;
 800a2fc:	e003      	b.n	800a306 <ll_sys_config_params+0x5e>

    case LL_RCC_RADIOSLEEPSOURCE_HSE_DIV1000:
      linklayer_slp_clk_src = CRYSTAL_OSCILLATOR_SLPTMR;
 800a2fe:	2300      	movs	r3, #0
 800a300:	607b      	str	r3, [r7, #4]
      break;
 800a302:	e000      	b.n	800a306 <ll_sys_config_params+0x5e>

    case LL_RCC_RADIOSLEEPSOURCE_NONE:
      /* No Link Layer sleep clock source selected */
      assert_param(0);
      break;
 800a304:	bf00      	nop
  }
  ll_intf_le_select_slp_clk_src((uint8_t)linklayer_slp_clk_src, &freq_value);
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	b2db      	uxtb	r3, r3
 800a30a:	1cba      	adds	r2, r7, #2
 800a30c:	4611      	mov	r1, r2
 800a30e:	4618      	mov	r0, r3
 800a310:	f00a fcd3 	bl	8014cba <ll_intf_le_select_slp_clk_src>

  /* Link Layer power table */
  ll_intf_select_tx_power_table(CFG_RF_TX_POWER_TABLE_ID);
 800a314:	2001      	movs	r0, #1
 800a316:	f00a fcf0 	bl	8014cfa <ll_intf_select_tx_power_table>
}
 800a31a:	bf00      	nop
 800a31c:	3708      	adds	r7, #8
 800a31e:	46bd      	mov	sp, r7
 800a320:	bd80      	pop	{r7, pc}

0800a322 <APP_DEBUG_SIGNAL_SET>:
/****************************/
/** Application debug APIs **/
/****************************/

void APP_DEBUG_SIGNAL_SET(app_debug_signal_t signal)
{
 800a322:	b480      	push	{r7}
 800a324:	b083      	sub	sp, #12
 800a326:	af00      	add	r7, sp, #0
 800a328:	4603      	mov	r3, r0
 800a32a:	71fb      	strb	r3, [r7, #7]
#if(CFG_RT_DEBUG_GPIO_MODULE == 1)
  GENERIC_DEBUG_GPIO_SET(signal, app_debug_table);
#endif /* CFG_RT_DEBUG_GPIO_MODULE */
}
 800a32c:	bf00      	nop
 800a32e:	370c      	adds	r7, #12
 800a330:	46bd      	mov	sp, r7
 800a332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a336:	4770      	bx	lr

0800a338 <APP_DEBUG_SIGNAL_RESET>:
void APP_DEBUG_SIGNAL_RESET(app_debug_signal_t signal)
{
 800a338:	b480      	push	{r7}
 800a33a:	b083      	sub	sp, #12
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	4603      	mov	r3, r0
 800a340:	71fb      	strb	r3, [r7, #7]
#if(CFG_RT_DEBUG_GPIO_MODULE == 1)
  GENERIC_DEBUG_GPIO_RESET(signal, app_debug_table);
#endif /* CFG_RT_DEBUG_GPIO_MODULE */
}
 800a342:	bf00      	nop
 800a344:	370c      	adds	r7, #12
 800a346:	46bd      	mov	sp, r7
 800a348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a34c:	4770      	bx	lr

0800a34e <RT_DEBUG_GPIO_Init>:
#if(CFG_RT_DEBUG_GPIO_MODULE == 1)
static uint32_t GPIO_PORT_TO_PWR_NUM(GPIO_TypeDef* gpio_port);
#endif /* CFG_RT_DEBUG_GPIO_MODULE */

void RT_DEBUG_GPIO_Init(void)
{
 800a34e:	b480      	push	{r7}
 800a350:	af00      	add	r7, sp, #0
#if(CFG_RT_DEBUG_DTB == 1)
  /* DTB initialization and configuration */
  RT_DEBUG_DTBInit();
  RT_DEBUG_DTBConfig();
#endif /* CFG_RT_DEBUG_DTB */
}
 800a352:	bf00      	nop
 800a354:	46bd      	mov	sp, r7
 800a356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a35a:	4770      	bx	lr

0800a35c <Log_Module_Print>:

/**
 *
 */
void Log_Module_Print( Log_Verbose_Level_t eVerboseLevel, Log_Region_t eRegion, const char * pText, ...)
{
 800a35c:	b40c      	push	{r2, r3}
 800a35e:	b480      	push	{r7}
 800a360:	b083      	sub	sp, #12
 800a362:	af00      	add	r7, sp, #0
 800a364:	6078      	str	r0, [r7, #4]
 800a366:	6039      	str	r1, [r7, #0]
#else /* (CFG_LOG_SUPPORTED != 0) */
  UNUSED(eVerboseLevel);
  UNUSED(eRegion);
  UNUSED(pText);
#endif /* (CFG_LOG_SUPPORTED != 0)  */
}
 800a368:	bf00      	nop
 800a36a:	370c      	adds	r7, #12
 800a36c:	46bd      	mov	sp, r7
 800a36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a372:	b002      	add	sp, #8
 800a374:	4770      	bx	lr
	...

0800a378 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800a378:	b480      	push	{r7}
 800a37a:	b085      	sub	sp, #20
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 800a380:	4b0a      	ldr	r3, [pc, #40]	@ (800a3ac <LL_AHB2_GRP1_EnableClock+0x34>)
 800a382:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800a386:	4909      	ldr	r1, [pc, #36]	@ (800a3ac <LL_AHB2_GRP1_EnableClock+0x34>)
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	4313      	orrs	r3, r2
 800a38c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800a390:	4b06      	ldr	r3, [pc, #24]	@ (800a3ac <LL_AHB2_GRP1_EnableClock+0x34>)
 800a392:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	4013      	ands	r3, r2
 800a39a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800a39c:	68fb      	ldr	r3, [r7, #12]
}
 800a39e:	bf00      	nop
 800a3a0:	3714      	adds	r7, #20
 800a3a2:	46bd      	mov	sp, r7
 800a3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a8:	4770      	bx	lr
 800a3aa:	bf00      	nop
 800a3ac:	46020c00 	.word	0x46020c00

0800a3b0 <LL_AHB2_GRP1_IsEnabledClock>:
  *
  *         (*) value not defined in all devices.
  * @retval State of Periphs (1 or 0).
  */
__STATIC_INLINE uint32_t LL_AHB2_GRP1_IsEnabledClock(uint32_t Periphs)
{
 800a3b0:	b480      	push	{r7}
 800a3b2:	b083      	sub	sp, #12
 800a3b4:	af00      	add	r7, sp, #0
 800a3b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(RCC->AHB2ENR, Periphs) == Periphs) ? 1UL : 0UL);
 800a3b8:	4b08      	ldr	r3, [pc, #32]	@ (800a3dc <LL_AHB2_GRP1_IsEnabledClock+0x2c>)
 800a3ba:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	4013      	ands	r3, r2
 800a3c2:	687a      	ldr	r2, [r7, #4]
 800a3c4:	429a      	cmp	r2, r3
 800a3c6:	d101      	bne.n	800a3cc <LL_AHB2_GRP1_IsEnabledClock+0x1c>
 800a3c8:	2301      	movs	r3, #1
 800a3ca:	e000      	b.n	800a3ce <LL_AHB2_GRP1_IsEnabledClock+0x1e>
 800a3cc:	2300      	movs	r3, #0
}
 800a3ce:	4618      	mov	r0, r3
 800a3d0:	370c      	adds	r7, #12
 800a3d2:	46bd      	mov	sp, r7
 800a3d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d8:	4770      	bx	lr
 800a3da:	bf00      	nop
 800a3dc:	46020c00 	.word	0x46020c00

0800a3e0 <LL_AHB2_GRP1_DisableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_DisableClock(uint32_t Periphs)
{
 800a3e0:	b480      	push	{r7}
 800a3e2:	b083      	sub	sp, #12
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->AHB2ENR, Periphs);
 800a3e8:	4b07      	ldr	r3, [pc, #28]	@ (800a408 <LL_AHB2_GRP1_DisableClock+0x28>)
 800a3ea:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	43db      	mvns	r3, r3
 800a3f2:	4905      	ldr	r1, [pc, #20]	@ (800a408 <LL_AHB2_GRP1_DisableClock+0x28>)
 800a3f4:	4013      	ands	r3, r2
 800a3f6:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
}
 800a3fa:	bf00      	nop
 800a3fc:	370c      	adds	r7, #12
 800a3fe:	46bd      	mov	sp, r7
 800a400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a404:	4770      	bx	lr
 800a406:	bf00      	nop
 800a408:	46020c00 	.word	0x46020c00

0800a40c <HW_AES_Enable>:
static HW_AES_VAR_T HW_AES_var;

/*****************************************************************************/

int HW_AES_Enable( void )
{
 800a40c:	b580      	push	{r7, lr}
 800a40e:	b084      	sub	sp, #16
 800a410:	af00      	add	r7, sp, #0
  HW_AES_VAR_T* av = &HW_AES_var;
 800a412:	4b12      	ldr	r3, [pc, #72]	@ (800a45c <HW_AES_Enable+0x50>)
 800a414:	60fb      	str	r3, [r7, #12]

  /* Test if the driver is not already in use */

  if ( HW_AES_CLOCK_IS_ENABLE() )
 800a416:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800a41a:	f7ff ffc9 	bl	800a3b0 <LL_AHB2_GRP1_IsEnabledClock>
 800a41e:	4603      	mov	r3, r0
 800a420:	2b00      	cmp	r3, #0
 800a422:	d001      	beq.n	800a428 <HW_AES_Enable+0x1c>
  {
    return FALSE;
 800a424:	2300      	movs	r3, #0
 800a426:	e014      	b.n	800a452 <HW_AES_Enable+0x46>
  }
  av->run = TRUE;
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	2201      	movs	r2, #1
 800a42c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800a42e:	f3ef 8310 	mrs	r3, PRIMASK
 800a432:	603b      	str	r3, [r7, #0]
  return(result);
 800a434:	683b      	ldr	r3, [r7, #0]

  UTILS_ENTER_CRITICAL_SECTION( );
 800a436:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("cpsid i" : : : "memory");
 800a438:	b672      	cpsid	i
}
 800a43a:	bf00      	nop

  /* Enable AES clock */
  HW_AES_CLOCK_ENABLE( );
 800a43c:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800a440:	f7ff ff9a 	bl	800a378 <LL_AHB2_GRP1_EnableClock>
 800a444:	68bb      	ldr	r3, [r7, #8]
 800a446:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	f383 8810 	msr	PRIMASK, r3
}
 800a44e:	bf00      	nop

  UTILS_EXIT_CRITICAL_SECTION( );

  return TRUE;
 800a450:	2301      	movs	r3, #1
}
 800a452:	4618      	mov	r0, r3
 800a454:	3710      	adds	r7, #16
 800a456:	46bd      	mov	sp, r7
 800a458:	bd80      	pop	{r7, pc}
 800a45a:	bf00      	nop
 800a45c:	20006964 	.word	0x20006964

0800a460 <HW_AES_SetKey>:

/*****************************************************************************/

void HW_AES_SetKey( uint32_t mode,
                    const uint8_t* key )
{
 800a460:	b580      	push	{r7, lr}
 800a462:	b08a      	sub	sp, #40	@ 0x28
 800a464:	af00      	add	r7, sp, #0
 800a466:	6078      	str	r0, [r7, #4]
 800a468:	6039      	str	r1, [r7, #0]
  uint32_t tmp[4];

  /* Retrieve all bytes of key */
  memcpy( tmp, key, 16 );
 800a46a:	f107 0308 	add.w	r3, r7, #8
 800a46e:	2210      	movs	r2, #16
 800a470:	6839      	ldr	r1, [r7, #0]
 800a472:	4618      	mov	r0, r3
 800a474:	f024 ffd3 	bl	802f41e <memcpy>
     - Data type:      32-bit
     - Operating mode: encryption
     - Chaining mode:  ECB
     - Key size:       128-bit
  */
  HW_AESX->CR = 0;
 800a478:	4b34      	ldr	r3, [pc, #208]	@ (800a54c <HW_AES_SetKey+0xec>)
 800a47a:	2200      	movs	r2, #0
 800a47c:	601a      	str	r2, [r3, #0]

  /* Copy key bytes to the AES registers */

  if ( mode & HW_AES_REV )
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	f003 0302 	and.w	r3, r3, #2
 800a484:	2b00      	cmp	r3, #0
 800a486:	d00c      	beq.n	800a4a2 <HW_AES_SetKey+0x42>
  {
    HW_AESX->KEYR0 = tmp[0];
 800a488:	4a30      	ldr	r2, [pc, #192]	@ (800a54c <HW_AES_SetKey+0xec>)
 800a48a:	68bb      	ldr	r3, [r7, #8]
 800a48c:	6113      	str	r3, [r2, #16]
    HW_AESX->KEYR1 = tmp[1];
 800a48e:	4a2f      	ldr	r2, [pc, #188]	@ (800a54c <HW_AES_SetKey+0xec>)
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	6153      	str	r3, [r2, #20]
    HW_AESX->KEYR2 = tmp[2];
 800a494:	4a2d      	ldr	r2, [pc, #180]	@ (800a54c <HW_AES_SetKey+0xec>)
 800a496:	693b      	ldr	r3, [r7, #16]
 800a498:	6193      	str	r3, [r2, #24]
    HW_AESX->KEYR3 = tmp[3];
 800a49a:	4a2c      	ldr	r2, [pc, #176]	@ (800a54c <HW_AES_SetKey+0xec>)
 800a49c:	697b      	ldr	r3, [r7, #20]
 800a49e:	61d3      	str	r3, [r2, #28]
 800a4a0:	e017      	b.n	800a4d2 <HW_AES_SetKey+0x72>
  }
  else
  {
    HW_AESX->KEYR3 = __REV( tmp[0] );
 800a4a2:	68bb      	ldr	r3, [r7, #8]
 800a4a4:	4a29      	ldr	r2, [pc, #164]	@ (800a54c <HW_AES_SetKey+0xec>)
 800a4a6:	61bb      	str	r3, [r7, #24]
  return __builtin_bswap32(value);
 800a4a8:	69bb      	ldr	r3, [r7, #24]
 800a4aa:	ba1b      	rev	r3, r3
 800a4ac:	61d3      	str	r3, [r2, #28]
    HW_AESX->KEYR2 = __REV( tmp[1] );
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	4a26      	ldr	r2, [pc, #152]	@ (800a54c <HW_AES_SetKey+0xec>)
 800a4b2:	61fb      	str	r3, [r7, #28]
 800a4b4:	69fb      	ldr	r3, [r7, #28]
 800a4b6:	ba1b      	rev	r3, r3
 800a4b8:	6193      	str	r3, [r2, #24]
    HW_AESX->KEYR1 = __REV( tmp[2] );
 800a4ba:	693b      	ldr	r3, [r7, #16]
 800a4bc:	4a23      	ldr	r2, [pc, #140]	@ (800a54c <HW_AES_SetKey+0xec>)
 800a4be:	623b      	str	r3, [r7, #32]
 800a4c0:	6a3b      	ldr	r3, [r7, #32]
 800a4c2:	ba1b      	rev	r3, r3
 800a4c4:	6153      	str	r3, [r2, #20]
    HW_AESX->KEYR0 = __REV( tmp[3] );
 800a4c6:	697b      	ldr	r3, [r7, #20]
 800a4c8:	4a20      	ldr	r2, [pc, #128]	@ (800a54c <HW_AES_SetKey+0xec>)
 800a4ca:	627b      	str	r3, [r7, #36]	@ 0x24
 800a4cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4ce:	ba1b      	rev	r3, r3
 800a4d0:	6113      	str	r3, [r2, #16]
  }

  if ( !(mode & HW_AES_ENC) )
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	f003 0301 	and.w	r3, r3, #1
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d11a      	bne.n	800a512 <HW_AES_SetKey+0xb2>
  {
    /* Set key preparation mode */
    HW_AESX->CR = AES_CR_MODE_0;
 800a4dc:	4b1b      	ldr	r3, [pc, #108]	@ (800a54c <HW_AES_SetKey+0xec>)
 800a4de:	2208      	movs	r2, #8
 800a4e0:	601a      	str	r2, [r3, #0]

    /* Enable AES processing */
    HW_AESX->CR |= AES_CR_EN;
 800a4e2:	4b1a      	ldr	r3, [pc, #104]	@ (800a54c <HW_AES_SetKey+0xec>)
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	4a19      	ldr	r2, [pc, #100]	@ (800a54c <HW_AES_SetKey+0xec>)
 800a4e8:	f043 0301 	orr.w	r3, r3, #1
 800a4ec:	6013      	str	r3, [r2, #0]

    /* Wait for CCF flag to be raised */
    while ( ! (HW_AESX->SR & AES_SR_CCF) );
 800a4ee:	bf00      	nop
 800a4f0:	4b16      	ldr	r3, [pc, #88]	@ (800a54c <HW_AES_SetKey+0xec>)
 800a4f2:	685b      	ldr	r3, [r3, #4]
 800a4f4:	f003 0301 	and.w	r3, r3, #1
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d0f9      	beq.n	800a4f0 <HW_AES_SetKey+0x90>

    /* Clear CCF Flag */
    HW_AESX->ICR |= AES_ICR_CCF;
 800a4fc:	4b13      	ldr	r3, [pc, #76]	@ (800a54c <HW_AES_SetKey+0xec>)
 800a4fe:	f8d3 3308 	ldr.w	r3, [r3, #776]	@ 0x308
 800a502:	4a12      	ldr	r2, [pc, #72]	@ (800a54c <HW_AES_SetKey+0xec>)
 800a504:	f043 0301 	orr.w	r3, r3, #1
 800a508:	f8c2 3308 	str.w	r3, [r2, #776]	@ 0x308

    /* Set decryption mode */
    HW_AESX->CR = AES_CR_MODE_1;
 800a50c:	4b0f      	ldr	r3, [pc, #60]	@ (800a54c <HW_AES_SetKey+0xec>)
 800a50e:	2210      	movs	r2, #16
 800a510:	601a      	str	r2, [r3, #0]
  }

  /* Enable byte swapping if needed */
  if ( mode & HW_AES_SWAP )
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	f003 0304 	and.w	r3, r3, #4
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d005      	beq.n	800a528 <HW_AES_SetKey+0xc8>
    HW_AESX->CR |= AES_CR_DATATYPE_1;
 800a51c:	4b0b      	ldr	r3, [pc, #44]	@ (800a54c <HW_AES_SetKey+0xec>)
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	4a0a      	ldr	r2, [pc, #40]	@ (800a54c <HW_AES_SetKey+0xec>)
 800a522:	f043 0304 	orr.w	r3, r3, #4
 800a526:	6013      	str	r3, [r2, #0]

  /* Wait until KEYVALID is set */
  while ( !(HW_AESX->SR & AES_SR_KEYVALID) );
 800a528:	bf00      	nop
 800a52a:	4b08      	ldr	r3, [pc, #32]	@ (800a54c <HW_AES_SetKey+0xec>)
 800a52c:	685b      	ldr	r3, [r3, #4]
 800a52e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a532:	2b00      	cmp	r3, #0
 800a534:	d0f9      	beq.n	800a52a <HW_AES_SetKey+0xca>

  /* Enable AES processing */
  HW_AESX->CR |= AES_CR_EN;
 800a536:	4b05      	ldr	r3, [pc, #20]	@ (800a54c <HW_AES_SetKey+0xec>)
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	4a04      	ldr	r2, [pc, #16]	@ (800a54c <HW_AES_SetKey+0xec>)
 800a53c:	f043 0301 	orr.w	r3, r3, #1
 800a540:	6013      	str	r3, [r2, #0]
}
 800a542:	bf00      	nop
 800a544:	3728      	adds	r7, #40	@ 0x28
 800a546:	46bd      	mov	sp, r7
 800a548:	bd80      	pop	{r7, pc}
 800a54a:	bf00      	nop
 800a54c:	420c0000 	.word	0x420c0000

0800a550 <HW_AES_Crypt>:

/*****************************************************************************/

void HW_AES_Crypt( const uint32_t* input,
                   uint32_t* output )
{
 800a550:	b480      	push	{r7}
 800a552:	b083      	sub	sp, #12
 800a554:	af00      	add	r7, sp, #0
 800a556:	6078      	str	r0, [r7, #4]
 800a558:	6039      	str	r1, [r7, #0]
  /* Write the input block into the input FIFO */
  HW_AESX->DINR = input[0];
 800a55a:	4a1d      	ldr	r2, [pc, #116]	@ (800a5d0 <HW_AES_Crypt+0x80>)
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	6093      	str	r3, [r2, #8]
  HW_AESX->DINR = input[1];
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	3304      	adds	r3, #4
 800a566:	4a1a      	ldr	r2, [pc, #104]	@ (800a5d0 <HW_AES_Crypt+0x80>)
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	6093      	str	r3, [r2, #8]
  HW_AESX->DINR = input[2];
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	3308      	adds	r3, #8
 800a570:	4a17      	ldr	r2, [pc, #92]	@ (800a5d0 <HW_AES_Crypt+0x80>)
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	6093      	str	r3, [r2, #8]
  HW_AESX->DINR = input[3];
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	330c      	adds	r3, #12
 800a57a:	4a15      	ldr	r2, [pc, #84]	@ (800a5d0 <HW_AES_Crypt+0x80>)
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	6093      	str	r3, [r2, #8]

  /* Wait for CCF flag to be raised */
  while ( !(HW_AESX->SR & AES_SR_CCF) );
 800a580:	bf00      	nop
 800a582:	4b13      	ldr	r3, [pc, #76]	@ (800a5d0 <HW_AES_Crypt+0x80>)
 800a584:	685b      	ldr	r3, [r3, #4]
 800a586:	f003 0301 	and.w	r3, r3, #1
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d0f9      	beq.n	800a582 <HW_AES_Crypt+0x32>

  /* Read the output block from the output FIFO */
  output[0] = HW_AESX->DOUTR;
 800a58e:	4b10      	ldr	r3, [pc, #64]	@ (800a5d0 <HW_AES_Crypt+0x80>)
 800a590:	68da      	ldr	r2, [r3, #12]
 800a592:	683b      	ldr	r3, [r7, #0]
 800a594:	601a      	str	r2, [r3, #0]
  output[1] = HW_AESX->DOUTR;
 800a596:	4a0e      	ldr	r2, [pc, #56]	@ (800a5d0 <HW_AES_Crypt+0x80>)
 800a598:	683b      	ldr	r3, [r7, #0]
 800a59a:	3304      	adds	r3, #4
 800a59c:	68d2      	ldr	r2, [r2, #12]
 800a59e:	601a      	str	r2, [r3, #0]
  output[2] = HW_AESX->DOUTR;
 800a5a0:	4a0b      	ldr	r2, [pc, #44]	@ (800a5d0 <HW_AES_Crypt+0x80>)
 800a5a2:	683b      	ldr	r3, [r7, #0]
 800a5a4:	3308      	adds	r3, #8
 800a5a6:	68d2      	ldr	r2, [r2, #12]
 800a5a8:	601a      	str	r2, [r3, #0]
  output[3] = HW_AESX->DOUTR;
 800a5aa:	4a09      	ldr	r2, [pc, #36]	@ (800a5d0 <HW_AES_Crypt+0x80>)
 800a5ac:	683b      	ldr	r3, [r7, #0]
 800a5ae:	330c      	adds	r3, #12
 800a5b0:	68d2      	ldr	r2, [r2, #12]
 800a5b2:	601a      	str	r2, [r3, #0]

  /* Clear CCF Flag */
  HW_AESX->ICR |= AES_ICR_CCF;
 800a5b4:	4b06      	ldr	r3, [pc, #24]	@ (800a5d0 <HW_AES_Crypt+0x80>)
 800a5b6:	f8d3 3308 	ldr.w	r3, [r3, #776]	@ 0x308
 800a5ba:	4a05      	ldr	r2, [pc, #20]	@ (800a5d0 <HW_AES_Crypt+0x80>)
 800a5bc:	f043 0301 	orr.w	r3, r3, #1
 800a5c0:	f8c2 3308 	str.w	r3, [r2, #776]	@ 0x308
}
 800a5c4:	bf00      	nop
 800a5c6:	370c      	adds	r7, #12
 800a5c8:	46bd      	mov	sp, r7
 800a5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ce:	4770      	bx	lr
 800a5d0:	420c0000 	.word	0x420c0000

0800a5d4 <HW_AES_Disable>:

/*****************************************************************************/

void HW_AES_Disable( void )
{
 800a5d4:	b580      	push	{r7, lr}
 800a5d6:	b084      	sub	sp, #16
 800a5d8:	af00      	add	r7, sp, #0
  HW_AES_VAR_T* av = &HW_AES_var;
 800a5da:	4b10      	ldr	r3, [pc, #64]	@ (800a61c <HW_AES_Disable+0x48>)
 800a5dc:	60fb      	str	r3, [r7, #12]

  if ( av->run )
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	781b      	ldrb	r3, [r3, #0]
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d016      	beq.n	800a614 <HW_AES_Disable+0x40>
  {
    /* Disable AES processing */
    HW_AESX->CR = 0;
 800a5e6:	4b0e      	ldr	r3, [pc, #56]	@ (800a620 <HW_AES_Disable+0x4c>)
 800a5e8:	2200      	movs	r2, #0
 800a5ea:	601a      	str	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800a5ec:	f3ef 8310 	mrs	r3, PRIMASK
 800a5f0:	603b      	str	r3, [r7, #0]
  return(result);
 800a5f2:	683b      	ldr	r3, [r7, #0]

    UTILS_ENTER_CRITICAL_SECTION( );
 800a5f4:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("cpsid i" : : : "memory");
 800a5f6:	b672      	cpsid	i
}
 800a5f8:	bf00      	nop

    /* Disable AES clock */
    HW_AES_CLOCK_DISABLE( );
 800a5fa:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800a5fe:	f7ff feef 	bl	800a3e0 <LL_AHB2_GRP1_DisableClock>
 800a602:	68bb      	ldr	r3, [r7, #8]
 800a604:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	f383 8810 	msr	PRIMASK, r3
}
 800a60c:	bf00      	nop

    UTILS_EXIT_CRITICAL_SECTION( );

    av->run = FALSE;
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	2200      	movs	r2, #0
 800a612:	701a      	strb	r2, [r3, #0]
  }
}
 800a614:	bf00      	nop
 800a616:	3710      	adds	r7, #16
 800a618:	46bd      	mov	sp, r7
 800a61a:	bd80      	pop	{r7, pc}
 800a61c:	20006964 	.word	0x20006964
 800a620:	420c0000 	.word	0x420c0000

0800a624 <LL_AHB2_GRP1_EnableClock>:
{
 800a624:	b480      	push	{r7}
 800a626:	b085      	sub	sp, #20
 800a628:	af00      	add	r7, sp, #0
 800a62a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800a62c:	4b0a      	ldr	r3, [pc, #40]	@ (800a658 <LL_AHB2_GRP1_EnableClock+0x34>)
 800a62e:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800a632:	4909      	ldr	r1, [pc, #36]	@ (800a658 <LL_AHB2_GRP1_EnableClock+0x34>)
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	4313      	orrs	r3, r2
 800a638:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800a63c:	4b06      	ldr	r3, [pc, #24]	@ (800a658 <LL_AHB2_GRP1_EnableClock+0x34>)
 800a63e:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	4013      	ands	r3, r2
 800a646:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800a648:	68fb      	ldr	r3, [r7, #12]
}
 800a64a:	bf00      	nop
 800a64c:	3714      	adds	r7, #20
 800a64e:	46bd      	mov	sp, r7
 800a650:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a654:	4770      	bx	lr
 800a656:	bf00      	nop
 800a658:	46020c00 	.word	0x46020c00

0800a65c <LL_AHB2_GRP1_DisableClock>:
{
 800a65c:	b480      	push	{r7}
 800a65e:	b083      	sub	sp, #12
 800a660:	af00      	add	r7, sp, #0
 800a662:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->AHB2ENR, Periphs);
 800a664:	4b07      	ldr	r3, [pc, #28]	@ (800a684 <LL_AHB2_GRP1_DisableClock+0x28>)
 800a666:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	43db      	mvns	r3, r3
 800a66e:	4905      	ldr	r1, [pc, #20]	@ (800a684 <LL_AHB2_GRP1_DisableClock+0x28>)
 800a670:	4013      	ands	r3, r2
 800a672:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
}
 800a676:	bf00      	nop
 800a678:	370c      	adds	r7, #12
 800a67a:	46bd      	mov	sp, r7
 800a67c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a680:	4770      	bx	lr
 800a682:	bf00      	nop
 800a684:	46020c00 	.word	0x46020c00

0800a688 <LL_PKA_Config>:
  *         @arg @ref LL_PKA_MODE_ECC_COMPLETE_ADD
  *         @arg @ref LL_PKA_MODE_ECC_MUL
  *         @arg @ref LL_PKA_MODE_MODULAR_EXP_FAST
  */
__STATIC_INLINE void LL_PKA_Config(PKA_TypeDef *PKAx, uint32_t Mode)
{
 800a688:	b480      	push	{r7}
 800a68a:	b083      	sub	sp, #12
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	6078      	str	r0, [r7, #4]
 800a690:	6039      	str	r1, [r7, #0]
  MODIFY_REG(PKAx->CR, (PKA_CR_MODE), (Mode << PKA_CR_MODE_Pos));
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 800a69a:	683b      	ldr	r3, [r7, #0]
 800a69c:	021b      	lsls	r3, r3, #8
 800a69e:	431a      	orrs	r2, r3
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	601a      	str	r2, [r3, #0]
}
 800a6a4:	bf00      	nop
 800a6a6:	370c      	adds	r7, #12
 800a6a8:	46bd      	mov	sp, r7
 800a6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ae:	4770      	bx	lr

0800a6b0 <LL_PKA_Enable>:
  * @rmtoll CR           EN            LL_PKA_Enable
  * @param  PKAx PKA Instance.
  * @retval None
  */
__STATIC_INLINE void LL_PKA_Enable(PKA_TypeDef *PKAx)
{
 800a6b0:	b480      	push	{r7}
 800a6b2:	b083      	sub	sp, #12
 800a6b4:	af00      	add	r7, sp, #0
 800a6b6:	6078      	str	r0, [r7, #4]
  SET_BIT(PKAx->CR, PKA_CR_EN);
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	f043 0201 	orr.w	r2, r3, #1
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	601a      	str	r2, [r3, #0]
}
 800a6c4:	bf00      	nop
 800a6c6:	370c      	adds	r7, #12
 800a6c8:	46bd      	mov	sp, r7
 800a6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ce:	4770      	bx	lr

0800a6d0 <LL_PKA_Disable>:
  * @rmtoll CR           EN            LL_PKA_Disable
  * @param  PKAx PKA Instance.
  * @retval None
  */
__STATIC_INLINE void LL_PKA_Disable(PKA_TypeDef *PKAx)
{
 800a6d0:	b480      	push	{r7}
 800a6d2:	b083      	sub	sp, #12
 800a6d4:	af00      	add	r7, sp, #0
 800a6d6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(PKAx->CR, PKA_CR_EN);
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	f023 0201 	bic.w	r2, r3, #1
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	601a      	str	r2, [r3, #0]
}
 800a6e4:	bf00      	nop
 800a6e6:	370c      	adds	r7, #12
 800a6e8:	46bd      	mov	sp, r7
 800a6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ee:	4770      	bx	lr

0800a6f0 <LL_PKA_Start>:
  * @rmtoll CR           START         LL_PKA_Start
  * @param  PKAx PKA Instance.
  * @retval None
  */
__STATIC_INLINE void LL_PKA_Start(PKA_TypeDef *PKAx)
{
 800a6f0:	b480      	push	{r7}
 800a6f2:	b083      	sub	sp, #12
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	6078      	str	r0, [r7, #4]
  SET_BIT(PKAx->CR, PKA_CR_START);
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	f043 0202 	orr.w	r2, r3, #2
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	601a      	str	r2, [r3, #0]
}
 800a704:	bf00      	nop
 800a706:	370c      	adds	r7, #12
 800a708:	46bd      	mov	sp, r7
 800a70a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a70e:	4770      	bx	lr

0800a710 <LL_PKA_IsActiveFlag_PROCEND>:
  * @rmtoll SR           PROCENDF      LL_PKA_IsActiveFlag_PROCEND
  * @param  PKAx PKA Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PKA_IsActiveFlag_PROCEND(const PKA_TypeDef *PKAx)
{
 800a710:	b480      	push	{r7}
 800a712:	b083      	sub	sp, #12
 800a714:	af00      	add	r7, sp, #0
 800a716:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(PKAx->SR, PKA_SR_PROCENDF) == (PKA_SR_PROCENDF)) ? 1UL : 0UL);
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	685b      	ldr	r3, [r3, #4]
 800a71c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a720:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a724:	d101      	bne.n	800a72a <LL_PKA_IsActiveFlag_PROCEND+0x1a>
 800a726:	2301      	movs	r3, #1
 800a728:	e000      	b.n	800a72c <LL_PKA_IsActiveFlag_PROCEND+0x1c>
 800a72a:	2300      	movs	r3, #0
}
 800a72c:	4618      	mov	r0, r3
 800a72e:	370c      	adds	r7, #12
 800a730:	46bd      	mov	sp, r7
 800a732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a736:	4770      	bx	lr

0800a738 <LL_PKA_ClearFlag_PROCEND>:
  * @rmtoll CLRFR        PROCENDFC     LL_PKA_ClearFlag_PROCEND
  * @param  PKAx PKA Instance.
  * @retval None
  */
__STATIC_INLINE void LL_PKA_ClearFlag_PROCEND(PKA_TypeDef *PKAx)
{
 800a738:	b480      	push	{r7}
 800a73a:	b083      	sub	sp, #12
 800a73c:	af00      	add	r7, sp, #0
 800a73e:	6078      	str	r0, [r7, #4]
  SET_BIT(PKAx->CLRFR, PKA_CLRFR_PROCENDFC);
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	689b      	ldr	r3, [r3, #8]
 800a744:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	609a      	str	r2, [r3, #8]
}
 800a74c:	bf00      	nop
 800a74e:	370c      	adds	r7, #12
 800a750:	46bd      	mov	sp, r7
 800a752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a756:	4770      	bx	lr

0800a758 <HW_PKA_Enable>:
static HW_PKA_VAR_T HW_PKA_var;

/*****************************************************************************/

int HW_PKA_Enable( void )
{
 800a758:	b580      	push	{r7, lr}
 800a75a:	b084      	sub	sp, #16
 800a75c:	af00      	add	r7, sp, #0
  HW_PKA_VAR_T* pv = &HW_PKA_var;
 800a75e:	4b1b      	ldr	r3, [pc, #108]	@ (800a7cc <HW_PKA_Enable+0x74>)
 800a760:	60fb      	str	r3, [r7, #12]

  /* Test if the driver is not already in use */

  if ( pv->run )
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	781b      	ldrb	r3, [r3, #0]
 800a766:	2b00      	cmp	r3, #0
 800a768:	d001      	beq.n	800a76e <HW_PKA_Enable+0x16>
  {
    return FALSE;
 800a76a:	2300      	movs	r3, #0
 800a76c:	e02a      	b.n	800a7c4 <HW_PKA_Enable+0x6c>
  }

  pv->run = TRUE;
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	2201      	movs	r2, #1
 800a772:	701a      	strb	r2, [r3, #0]

  /* Enable the RNG clock as it is needed.
   * See PKA chapter in IUM: the RNG peripheral must be clocked.
   */
  HW_RNG_EnableClock( 2 );
 800a774:	2002      	movs	r0, #2
 800a776:	f000 f9e3 	bl	800ab40 <HW_RNG_EnableClock>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800a77a:	f3ef 8310 	mrs	r3, PRIMASK
 800a77e:	603b      	str	r3, [r7, #0]
  return(result);
 800a780:	683b      	ldr	r3, [r7, #0]

  UTILS_ENTER_CRITICAL_SECTION( );
 800a782:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("cpsid i" : : : "memory");
 800a784:	b672      	cpsid	i
}
 800a786:	bf00      	nop

  /* Enable the PKA clock */
  LL_AHB2_GRP1_EnableClock( LL_AHB2_GRP1_PERIPH_PKA );
 800a788:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800a78c:	f7ff ff4a 	bl	800a624 <LL_AHB2_GRP1_EnableClock>
 800a790:	68bb      	ldr	r3, [r7, #8]
 800a792:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	f383 8810 	msr	PRIMASK, r3
}
 800a79a:	bf00      	nop

  UTILS_EXIT_CRITICAL_SECTION( );

  /* Enable the PKA block */
  LL_PKA_Enable( PKA );
 800a79c:	480c      	ldr	r0, [pc, #48]	@ (800a7d0 <HW_PKA_Enable+0x78>)
 800a79e:	f7ff ff87 	bl	800a6b0 <LL_PKA_Enable>

  /* Wait for PKA initialization OK */
  while ( !(PKA->SR & PKA_SR_INITOK) );
 800a7a2:	bf00      	nop
 800a7a4:	4b0a      	ldr	r3, [pc, #40]	@ (800a7d0 <HW_PKA_Enable+0x78>)
 800a7a6:	685b      	ldr	r3, [r3, #4]
 800a7a8:	f003 0301 	and.w	r3, r3, #1
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d0f9      	beq.n	800a7a4 <HW_PKA_Enable+0x4c>

  /* Reset any pending flag */
  SET_BIT(PKA->CLRFR, (PKA_CLRFR_PROCENDFC | PKA_CLRFR_RAMERRFC |
 800a7b0:	4b07      	ldr	r3, [pc, #28]	@ (800a7d0 <HW_PKA_Enable+0x78>)
 800a7b2:	689b      	ldr	r3, [r3, #8]
 800a7b4:	4a06      	ldr	r2, [pc, #24]	@ (800a7d0 <HW_PKA_Enable+0x78>)
 800a7b6:	f443 1368 	orr.w	r3, r3, #3801088	@ 0x3a0000
 800a7ba:	6093      	str	r3, [r2, #8]
                       PKA_CLRFR_ADDRERRFC | PKA_CLRFR_OPERRFC));

  /* Disable the RNG clock as it is no more needed ???
   */
  HW_RNG_DisableClock( 2 );
 800a7bc:	2002      	movs	r0, #2
 800a7be:	f000 f9ed 	bl	800ab9c <HW_RNG_DisableClock>

  return TRUE;
 800a7c2:	2301      	movs	r3, #1
}
 800a7c4:	4618      	mov	r0, r3
 800a7c6:	3710      	adds	r7, #16
 800a7c8:	46bd      	mov	sp, r7
 800a7ca:	bd80      	pop	{r7, pc}
 800a7cc:	20006968 	.word	0x20006968
 800a7d0:	420c2000 	.word	0x420c2000

0800a7d4 <HW_PKA_WriteSingleInput>:

/*****************************************************************************/

void HW_PKA_WriteSingleInput( uint32_t index, uint32_t word )
{
 800a7d4:	b480      	push	{r7}
 800a7d6:	b083      	sub	sp, #12
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	6078      	str	r0, [r7, #4]
 800a7dc:	6039      	str	r1, [r7, #0]
  /* Write the single word into PKA RAM */

  PKA->RAM[index] = word;
 800a7de:	4906      	ldr	r1, [pc, #24]	@ (800a7f8 <HW_PKA_WriteSingleInput+0x24>)
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800a7e6:	683a      	ldr	r2, [r7, #0]
 800a7e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800a7ec:	bf00      	nop
 800a7ee:	370c      	adds	r7, #12
 800a7f0:	46bd      	mov	sp, r7
 800a7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f6:	4770      	bx	lr
 800a7f8:	420c2000 	.word	0x420c2000

0800a7fc <HW_PKA_WriteOperand>:

/*****************************************************************************/

void HW_PKA_WriteOperand( uint32_t index, int size, const uint32_t* in )
{
 800a7fc:	b480      	push	{r7}
 800a7fe:	b087      	sub	sp, #28
 800a800:	af00      	add	r7, sp, #0
 800a802:	60f8      	str	r0, [r7, #12]
 800a804:	60b9      	str	r1, [r7, #8]
 800a806:	607a      	str	r2, [r7, #4]
  uint32_t* pka_ram = (uint32_t*)&PKA->RAM[index];
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	009a      	lsls	r2, r3, #2
 800a80c:	4b0d      	ldr	r3, [pc, #52]	@ (800a844 <HW_PKA_WriteOperand+0x48>)
 800a80e:	4413      	add	r3, r2
 800a810:	617b      	str	r3, [r7, #20]

  /* Write the input data into PKA RAM */

  for ( ; size > 0; size-- )
 800a812:	e00a      	b.n	800a82a <HW_PKA_WriteOperand+0x2e>
  {
    *pka_ram++ = *in++;
 800a814:	687a      	ldr	r2, [r7, #4]
 800a816:	1d13      	adds	r3, r2, #4
 800a818:	607b      	str	r3, [r7, #4]
 800a81a:	697b      	ldr	r3, [r7, #20]
 800a81c:	1d19      	adds	r1, r3, #4
 800a81e:	6179      	str	r1, [r7, #20]
 800a820:	6812      	ldr	r2, [r2, #0]
 800a822:	601a      	str	r2, [r3, #0]
  for ( ; size > 0; size-- )
 800a824:	68bb      	ldr	r3, [r7, #8]
 800a826:	3b01      	subs	r3, #1
 800a828:	60bb      	str	r3, [r7, #8]
 800a82a:	68bb      	ldr	r3, [r7, #8]
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	dcf1      	bgt.n	800a814 <HW_PKA_WriteOperand+0x18>
  }

  /* Write extra zeros into PKA RAM */

  *pka_ram = 0;
 800a830:	697b      	ldr	r3, [r7, #20]
 800a832:	2200      	movs	r2, #0
 800a834:	601a      	str	r2, [r3, #0]
}
 800a836:	bf00      	nop
 800a838:	371c      	adds	r7, #28
 800a83a:	46bd      	mov	sp, r7
 800a83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a840:	4770      	bx	lr
 800a842:	bf00      	nop
 800a844:	420c2400 	.word	0x420c2400

0800a848 <HW_PKA_Start>:

/*****************************************************************************/

void HW_PKA_Start( uint32_t mode )
{
 800a848:	b580      	push	{r7, lr}
 800a84a:	b082      	sub	sp, #8
 800a84c:	af00      	add	r7, sp, #0
 800a84e:	6078      	str	r0, [r7, #4]
  /* Set the configuration */
  LL_PKA_Config( PKA, mode );
 800a850:	6879      	ldr	r1, [r7, #4]
 800a852:	4806      	ldr	r0, [pc, #24]	@ (800a86c <HW_PKA_Start+0x24>)
 800a854:	f7ff ff18 	bl	800a688 <LL_PKA_Config>

  /* Start the PKA processing */
  LL_PKA_ClearFlag_PROCEND( PKA );
 800a858:	4804      	ldr	r0, [pc, #16]	@ (800a86c <HW_PKA_Start+0x24>)
 800a85a:	f7ff ff6d 	bl	800a738 <LL_PKA_ClearFlag_PROCEND>
  LL_PKA_Start( PKA );
 800a85e:	4803      	ldr	r0, [pc, #12]	@ (800a86c <HW_PKA_Start+0x24>)
 800a860:	f7ff ff46 	bl	800a6f0 <LL_PKA_Start>
}
 800a864:	bf00      	nop
 800a866:	3708      	adds	r7, #8
 800a868:	46bd      	mov	sp, r7
 800a86a:	bd80      	pop	{r7, pc}
 800a86c:	420c2000 	.word	0x420c2000

0800a870 <HW_PKA_EndOfOperation>:

/*****************************************************************************/

int HW_PKA_EndOfOperation( void )
{
 800a870:	b580      	push	{r7, lr}
 800a872:	af00      	add	r7, sp, #0
  /* Return 0 if the processing is still active */
  return LL_PKA_IsActiveFlag_PROCEND( PKA );
 800a874:	4802      	ldr	r0, [pc, #8]	@ (800a880 <HW_PKA_EndOfOperation+0x10>)
 800a876:	f7ff ff4b 	bl	800a710 <LL_PKA_IsActiveFlag_PROCEND>
 800a87a:	4603      	mov	r3, r0
}
 800a87c:	4618      	mov	r0, r3
 800a87e:	bd80      	pop	{r7, pc}
 800a880:	420c2000 	.word	0x420c2000

0800a884 <HW_PKA_ReadSingleOutput>:

/*****************************************************************************/

uint32_t HW_PKA_ReadSingleOutput( uint32_t index )
{
 800a884:	b480      	push	{r7}
 800a886:	b083      	sub	sp, #12
 800a888:	af00      	add	r7, sp, #0
 800a88a:	6078      	str	r0, [r7, #4]
  /* Read a single word from PKA RAM */

  return PKA->RAM[index];
 800a88c:	4a05      	ldr	r2, [pc, #20]	@ (800a8a4 <HW_PKA_ReadSingleOutput+0x20>)
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800a894:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 800a898:	4618      	mov	r0, r3
 800a89a:	370c      	adds	r7, #12
 800a89c:	46bd      	mov	sp, r7
 800a89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a2:	4770      	bx	lr
 800a8a4:	420c2000 	.word	0x420c2000

0800a8a8 <HW_PKA_ReadResult>:

/*****************************************************************************/

void HW_PKA_ReadResult( uint32_t index, int size, uint32_t* out )
{
 800a8a8:	b480      	push	{r7}
 800a8aa:	b087      	sub	sp, #28
 800a8ac:	af00      	add	r7, sp, #0
 800a8ae:	60f8      	str	r0, [r7, #12]
 800a8b0:	60b9      	str	r1, [r7, #8]
 800a8b2:	607a      	str	r2, [r7, #4]
  uint32_t* pka_ram = (uint32_t*)&PKA->RAM[index];
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	009a      	lsls	r2, r3, #2
 800a8b8:	4b0c      	ldr	r3, [pc, #48]	@ (800a8ec <HW_PKA_ReadResult+0x44>)
 800a8ba:	4413      	add	r3, r2
 800a8bc:	617b      	str	r3, [r7, #20]

  /* Read from PKA RAM */

  for ( ; size > 0; size-- )
 800a8be:	e00a      	b.n	800a8d6 <HW_PKA_ReadResult+0x2e>
  {
    *out++ = *pka_ram++;
 800a8c0:	697a      	ldr	r2, [r7, #20]
 800a8c2:	1d13      	adds	r3, r2, #4
 800a8c4:	617b      	str	r3, [r7, #20]
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	1d19      	adds	r1, r3, #4
 800a8ca:	6079      	str	r1, [r7, #4]
 800a8cc:	6812      	ldr	r2, [r2, #0]
 800a8ce:	601a      	str	r2, [r3, #0]
  for ( ; size > 0; size-- )
 800a8d0:	68bb      	ldr	r3, [r7, #8]
 800a8d2:	3b01      	subs	r3, #1
 800a8d4:	60bb      	str	r3, [r7, #8]
 800a8d6:	68bb      	ldr	r3, [r7, #8]
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	dcf1      	bgt.n	800a8c0 <HW_PKA_ReadResult+0x18>
  }
}
 800a8dc:	bf00      	nop
 800a8de:	bf00      	nop
 800a8e0:	371c      	adds	r7, #28
 800a8e2:	46bd      	mov	sp, r7
 800a8e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e8:	4770      	bx	lr
 800a8ea:	bf00      	nop
 800a8ec:	420c2400 	.word	0x420c2400

0800a8f0 <HW_PKA_Disable>:

/*****************************************************************************/

void HW_PKA_Disable( void )
{
 800a8f0:	b580      	push	{r7, lr}
 800a8f2:	b084      	sub	sp, #16
 800a8f4:	af00      	add	r7, sp, #0
  HW_PKA_VAR_T* pv = &HW_PKA_var;
 800a8f6:	4b10      	ldr	r3, [pc, #64]	@ (800a938 <HW_PKA_Disable+0x48>)
 800a8f8:	60fb      	str	r3, [r7, #12]

  if ( pv->run )
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	781b      	ldrb	r3, [r3, #0]
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d016      	beq.n	800a930 <HW_PKA_Disable+0x40>
  {
    /* Disable the PKA block */
    LL_PKA_Disable( PKA );
 800a902:	480e      	ldr	r0, [pc, #56]	@ (800a93c <HW_PKA_Disable+0x4c>)
 800a904:	f7ff fee4 	bl	800a6d0 <LL_PKA_Disable>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800a908:	f3ef 8310 	mrs	r3, PRIMASK
 800a90c:	603b      	str	r3, [r7, #0]
  return(result);
 800a90e:	683b      	ldr	r3, [r7, #0]

    UTILS_ENTER_CRITICAL_SECTION( );
 800a910:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("cpsid i" : : : "memory");
 800a912:	b672      	cpsid	i
}
 800a914:	bf00      	nop

    /* Disable the PKA clock */
    LL_AHB2_GRP1_DisableClock( LL_AHB2_GRP1_PERIPH_PKA );
 800a916:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800a91a:	f7ff fe9f 	bl	800a65c <LL_AHB2_GRP1_DisableClock>
 800a91e:	68bb      	ldr	r3, [r7, #8]
 800a920:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	f383 8810 	msr	PRIMASK, r3
}
 800a928:	bf00      	nop

    UTILS_EXIT_CRITICAL_SECTION( );

    pv->run = FALSE;
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	2200      	movs	r2, #0
 800a92e:	701a      	strb	r2, [r3, #0]
  }
}
 800a930:	bf00      	nop
 800a932:	3710      	adds	r7, #16
 800a934:	46bd      	mov	sp, r7
 800a936:	bd80      	pop	{r7, pc}
 800a938:	20006968 	.word	0x20006968
 800a93c:	420c2000 	.word	0x420c2000

0800a940 <LL_RCC_HSI_Enable>:
{
 800a940:	b480      	push	{r7}
 800a942:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800a944:	4b05      	ldr	r3, [pc, #20]	@ (800a95c <LL_RCC_HSI_Enable+0x1c>)
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	4a04      	ldr	r2, [pc, #16]	@ (800a95c <LL_RCC_HSI_Enable+0x1c>)
 800a94a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a94e:	6013      	str	r3, [r2, #0]
}
 800a950:	bf00      	nop
 800a952:	46bd      	mov	sp, r7
 800a954:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a958:	4770      	bx	lr
 800a95a:	bf00      	nop
 800a95c:	46020c00 	.word	0x46020c00

0800a960 <LL_RCC_HSI_IsReady>:
{
 800a960:	b480      	push	{r7}
 800a962:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 800a964:	4b07      	ldr	r3, [pc, #28]	@ (800a984 <LL_RCC_HSI_IsReady+0x24>)
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a96c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a970:	d101      	bne.n	800a976 <LL_RCC_HSI_IsReady+0x16>
 800a972:	2301      	movs	r3, #1
 800a974:	e000      	b.n	800a978 <LL_RCC_HSI_IsReady+0x18>
 800a976:	2300      	movs	r3, #0
}
 800a978:	4618      	mov	r0, r3
 800a97a:	46bd      	mov	sp, r7
 800a97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a980:	4770      	bx	lr
 800a982:	bf00      	nop
 800a984:	46020c00 	.word	0x46020c00

0800a988 <LL_AHB2_GRP1_EnableClock>:
{
 800a988:	b480      	push	{r7}
 800a98a:	b085      	sub	sp, #20
 800a98c:	af00      	add	r7, sp, #0
 800a98e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800a990:	4b0a      	ldr	r3, [pc, #40]	@ (800a9bc <LL_AHB2_GRP1_EnableClock+0x34>)
 800a992:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800a996:	4909      	ldr	r1, [pc, #36]	@ (800a9bc <LL_AHB2_GRP1_EnableClock+0x34>)
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	4313      	orrs	r3, r2
 800a99c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800a9a0:	4b06      	ldr	r3, [pc, #24]	@ (800a9bc <LL_AHB2_GRP1_EnableClock+0x34>)
 800a9a2:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	4013      	ands	r3, r2
 800a9aa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800a9ac:	68fb      	ldr	r3, [r7, #12]
}
 800a9ae:	bf00      	nop
 800a9b0:	3714      	adds	r7, #20
 800a9b2:	46bd      	mov	sp, r7
 800a9b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b8:	4770      	bx	lr
 800a9ba:	bf00      	nop
 800a9bc:	46020c00 	.word	0x46020c00

0800a9c0 <LL_AHB2_GRP1_DisableClock>:
{
 800a9c0:	b480      	push	{r7}
 800a9c2:	b083      	sub	sp, #12
 800a9c4:	af00      	add	r7, sp, #0
 800a9c6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->AHB2ENR, Periphs);
 800a9c8:	4b07      	ldr	r3, [pc, #28]	@ (800a9e8 <LL_AHB2_GRP1_DisableClock+0x28>)
 800a9ca:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	43db      	mvns	r3, r3
 800a9d2:	4905      	ldr	r1, [pc, #20]	@ (800a9e8 <LL_AHB2_GRP1_DisableClock+0x28>)
 800a9d4:	4013      	ands	r3, r2
 800a9d6:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
}
 800a9da:	bf00      	nop
 800a9dc:	370c      	adds	r7, #12
 800a9de:	46bd      	mov	sp, r7
 800a9e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e4:	4770      	bx	lr
 800a9e6:	bf00      	nop
 800a9e8:	46020c00 	.word	0x46020c00

0800a9ec <LL_RNG_Enable>:
  * @rmtoll CR           RNGEN         LL_RNG_Enable
  * @param  RNGx RNG Instance
  * @retval None
  */
__STATIC_INLINE void LL_RNG_Enable(RNG_TypeDef *RNGx)
{
 800a9ec:	b480      	push	{r7}
 800a9ee:	b083      	sub	sp, #12
 800a9f0:	af00      	add	r7, sp, #0
 800a9f2:	6078      	str	r0, [r7, #4]
  SET_BIT(RNGx->CR, RNG_CR_RNGEN);
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	f043 0204 	orr.w	r2, r3, #4
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	601a      	str	r2, [r3, #0]
}
 800aa00:	bf00      	nop
 800aa02:	370c      	adds	r7, #12
 800aa04:	46bd      	mov	sp, r7
 800aa06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa0a:	4770      	bx	lr

0800aa0c <LL_RNG_Disable>:
  * @rmtoll CR           RNGEN         LL_RNG_Disable
  * @param  RNGx RNG Instance
  * @retval None
  */
__STATIC_INLINE void LL_RNG_Disable(RNG_TypeDef *RNGx)
{
 800aa0c:	b480      	push	{r7}
 800aa0e:	b083      	sub	sp, #12
 800aa10:	af00      	add	r7, sp, #0
 800aa12:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RNGx->CR, RNG_CR_RNGEN);
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	f023 0204 	bic.w	r2, r3, #4
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	601a      	str	r2, [r3, #0]
}
 800aa20:	bf00      	nop
 800aa22:	370c      	adds	r7, #12
 800aa24:	46bd      	mov	sp, r7
 800aa26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa2a:	4770      	bx	lr

0800aa2c <LL_RNG_IsActiveFlag_DRDY>:
  * @rmtoll SR           DRDY          LL_RNG_IsActiveFlag_DRDY
  * @param  RNGx RNG Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RNG_IsActiveFlag_DRDY(const RNG_TypeDef *RNGx)
{
 800aa2c:	b480      	push	{r7}
 800aa2e:	b083      	sub	sp, #12
 800aa30:	af00      	add	r7, sp, #0
 800aa32:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(RNGx->SR, RNG_SR_DRDY) == (RNG_SR_DRDY)) ? 1UL : 0UL);
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	685b      	ldr	r3, [r3, #4]
 800aa38:	f003 0301 	and.w	r3, r3, #1
 800aa3c:	2b01      	cmp	r3, #1
 800aa3e:	d101      	bne.n	800aa44 <LL_RNG_IsActiveFlag_DRDY+0x18>
 800aa40:	2301      	movs	r3, #1
 800aa42:	e000      	b.n	800aa46 <LL_RNG_IsActiveFlag_DRDY+0x1a>
 800aa44:	2300      	movs	r3, #0
}
 800aa46:	4618      	mov	r0, r3
 800aa48:	370c      	adds	r7, #12
 800aa4a:	46bd      	mov	sp, r7
 800aa4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa50:	4770      	bx	lr

0800aa52 <LL_RNG_IsActiveFlag_CECS>:
  * @rmtoll SR           CECS          LL_RNG_IsActiveFlag_CECS
  * @param  RNGx RNG Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RNG_IsActiveFlag_CECS(const RNG_TypeDef *RNGx)
{
 800aa52:	b480      	push	{r7}
 800aa54:	b083      	sub	sp, #12
 800aa56:	af00      	add	r7, sp, #0
 800aa58:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(RNGx->SR, RNG_SR_CECS) == (RNG_SR_CECS)) ? 1UL : 0UL);
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	685b      	ldr	r3, [r3, #4]
 800aa5e:	f003 0302 	and.w	r3, r3, #2
 800aa62:	2b02      	cmp	r3, #2
 800aa64:	d101      	bne.n	800aa6a <LL_RNG_IsActiveFlag_CECS+0x18>
 800aa66:	2301      	movs	r3, #1
 800aa68:	e000      	b.n	800aa6c <LL_RNG_IsActiveFlag_CECS+0x1a>
 800aa6a:	2300      	movs	r3, #0
}
 800aa6c:	4618      	mov	r0, r3
 800aa6e:	370c      	adds	r7, #12
 800aa70:	46bd      	mov	sp, r7
 800aa72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa76:	4770      	bx	lr

0800aa78 <LL_RNG_IsActiveFlag_SEIS>:
  * @rmtoll SR           SEIS          LL_RNG_IsActiveFlag_SEIS
  * @param  RNGx RNG Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RNG_IsActiveFlag_SEIS(const RNG_TypeDef *RNGx)
{
 800aa78:	b480      	push	{r7}
 800aa7a:	b083      	sub	sp, #12
 800aa7c:	af00      	add	r7, sp, #0
 800aa7e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(RNGx->SR, RNG_SR_SEIS) == (RNG_SR_SEIS)) ? 1UL : 0UL);
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	685b      	ldr	r3, [r3, #4]
 800aa84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aa88:	2b40      	cmp	r3, #64	@ 0x40
 800aa8a:	d101      	bne.n	800aa90 <LL_RNG_IsActiveFlag_SEIS+0x18>
 800aa8c:	2301      	movs	r3, #1
 800aa8e:	e000      	b.n	800aa92 <LL_RNG_IsActiveFlag_SEIS+0x1a>
 800aa90:	2300      	movs	r3, #0
}
 800aa92:	4618      	mov	r0, r3
 800aa94:	370c      	adds	r7, #12
 800aa96:	46bd      	mov	sp, r7
 800aa98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa9c:	4770      	bx	lr

0800aa9e <LL_RNG_ClearFlag_CEIS>:
  * @rmtoll SR           CEIS          LL_RNG_ClearFlag_CEIS
  * @param  RNGx RNG Instance
  * @retval None
  */
__STATIC_INLINE void LL_RNG_ClearFlag_CEIS(RNG_TypeDef *RNGx)
{
 800aa9e:	b480      	push	{r7}
 800aaa0:	b083      	sub	sp, #12
 800aaa2:	af00      	add	r7, sp, #0
 800aaa4:	6078      	str	r0, [r7, #4]
  WRITE_REG(RNGx->SR, ~RNG_SR_CEIS);
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	f06f 0220 	mvn.w	r2, #32
 800aaac:	605a      	str	r2, [r3, #4]
}
 800aaae:	bf00      	nop
 800aab0:	370c      	adds	r7, #12
 800aab2:	46bd      	mov	sp, r7
 800aab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab8:	4770      	bx	lr

0800aaba <LL_RNG_ClearFlag_SEIS>:
  * @rmtoll SR           SEIS          LL_RNG_ClearFlag_SEIS
  * @param  RNGx RNG Instance
  * @retval None
  */
__STATIC_INLINE void LL_RNG_ClearFlag_SEIS(RNG_TypeDef *RNGx)
{
 800aaba:	b480      	push	{r7}
 800aabc:	b083      	sub	sp, #12
 800aabe:	af00      	add	r7, sp, #0
 800aac0:	6078      	str	r0, [r7, #4]
  WRITE_REG(RNGx->SR, ~RNG_SR_SEIS);
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800aac8:	605a      	str	r2, [r3, #4]
}
 800aaca:	bf00      	nop
 800aacc:	370c      	adds	r7, #12
 800aace:	46bd      	mov	sp, r7
 800aad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad4:	4770      	bx	lr

0800aad6 <LL_RNG_ReadRandData32>:
  * @rmtoll DR           RNDATA        LL_RNG_ReadRandData32
  * @param  RNGx RNG Instance
  * @retval Generated 32-bit random value
  */
__STATIC_INLINE uint32_t LL_RNG_ReadRandData32(const RNG_TypeDef *RNGx)
{
 800aad6:	b480      	push	{r7}
 800aad8:	b083      	sub	sp, #12
 800aada:	af00      	add	r7, sp, #0
 800aadc:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(RNGx->DR));
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	689b      	ldr	r3, [r3, #8]
}
 800aae2:	4618      	mov	r0, r3
 800aae4:	370c      	adds	r7, #12
 800aae6:	46bd      	mov	sp, r7
 800aae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaec:	4770      	bx	lr

0800aaee <RNG_KERNEL_CLK_ON>:
#include "stm32wbaxx_ll_bus.h"
#include "stm32wbaxx_ll_rng.h"
#include "RTDebug.h"

__weak void RNG_KERNEL_CLK_ON(void)
{
 800aaee:	b580      	push	{r7, lr}
 800aaf0:	af00      	add	r7, sp, #0
  LL_RCC_HSI_Enable();
 800aaf2:	f7ff ff25 	bl	800a940 <LL_RCC_HSI_Enable>
  while(LL_RCC_HSI_IsReady() == 0)
 800aaf6:	e001      	b.n	800aafc <RNG_KERNEL_CLK_ON+0xe>
  {
    LL_RCC_HSI_Enable();
 800aaf8:	f7ff ff22 	bl	800a940 <LL_RCC_HSI_Enable>
  while(LL_RCC_HSI_IsReady() == 0)
 800aafc:	f7ff ff30 	bl	800a960 <LL_RCC_HSI_IsReady>
 800ab00:	4603      	mov	r3, r0
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d0f8      	beq.n	800aaf8 <RNG_KERNEL_CLK_ON+0xa>
  }
}
 800ab06:	bf00      	nop
 800ab08:	bf00      	nop
 800ab0a:	bd80      	pop	{r7, pc}

0800ab0c <RNG_KERNEL_CLK_OFF>:

__weak void RNG_KERNEL_CLK_OFF(void)
{
 800ab0c:	b480      	push	{r7}
 800ab0e:	af00      	add	r7, sp, #0

}
 800ab10:	bf00      	nop
 800ab12:	46bd      	mov	sp, r7
 800ab14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab18:	4770      	bx	lr
	...

0800ab1c <HW_RNG_Disable>:
static void HW_RNG_WaitingClockSynchronization( void );

/*****************************************************************************/

void HW_RNG_Disable( void )
{
 800ab1c:	b580      	push	{r7, lr}
 800ab1e:	af00      	add	r7, sp, #0
  SYSTEM_DEBUG_SIGNAL_SET(RNG_DISABLE);
 800ab20:	2004      	movs	r0, #4
 800ab22:	f004 fb03 	bl	800f12c <SYSTEM_DEBUG_SIGNAL_SET>

  LL_RNG_Disable( RNG );
 800ab26:	4805      	ldr	r0, [pc, #20]	@ (800ab3c <HW_RNG_Disable+0x20>)
 800ab28:	f7ff ff70 	bl	800aa0c <LL_RNG_Disable>

  /* Disable RNG clocks */
  HW_RNG_DisableClock( 1 );
 800ab2c:	2001      	movs	r0, #1
 800ab2e:	f000 f835 	bl	800ab9c <HW_RNG_DisableClock>

  SYSTEM_DEBUG_SIGNAL_RESET(RNG_DISABLE);
 800ab32:	2004      	movs	r0, #4
 800ab34:	f004 fb05 	bl	800f142 <SYSTEM_DEBUG_SIGNAL_RESET>
}
 800ab38:	bf00      	nop
 800ab3a:	bd80      	pop	{r7, pc}
 800ab3c:	420c0800 	.word	0x420c0800

0800ab40 <HW_RNG_EnableClock>:

/*****************************************************************************/

void HW_RNG_EnableClock( uint8_t user_mask )
{
 800ab40:	b580      	push	{r7, lr}
 800ab42:	b086      	sub	sp, #24
 800ab44:	af00      	add	r7, sp, #0
 800ab46:	4603      	mov	r3, r0
 800ab48:	71fb      	strb	r3, [r7, #7]
  HW_RNG_VAR_T* pv = &HW_RNG_var;
 800ab4a:	4b13      	ldr	r3, [pc, #76]	@ (800ab98 <HW_RNG_EnableClock+0x58>)
 800ab4c:	617b      	str	r3, [r7, #20]

  RNG_KERNEL_CLK_ON();
 800ab4e:	f7ff ffce 	bl	800aaee <RNG_KERNEL_CLK_ON>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800ab52:	f3ef 8310 	mrs	r3, PRIMASK
 800ab56:	60fb      	str	r3, [r7, #12]
  return(result);
 800ab58:	68fb      	ldr	r3, [r7, #12]

  UTILS_ENTER_CRITICAL_SECTION( );
 800ab5a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800ab5c:	b672      	cpsid	i
}
 800ab5e:	bf00      	nop

  if ( pv->clock_en == 0 )
 800ab60:	697b      	ldr	r3, [r7, #20]
 800ab62:	f893 3082 	ldrb.w	r3, [r3, #130]	@ 0x82
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d103      	bne.n	800ab72 <HW_RNG_EnableClock+0x32>
  {
    LL_AHB2_GRP1_EnableClock( LL_AHB2_GRP1_PERIPH_RNG );
 800ab6a:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 800ab6e:	f7ff ff0b 	bl	800a988 <LL_AHB2_GRP1_EnableClock>
  }

  pv->clock_en |= user_mask;
 800ab72:	697b      	ldr	r3, [r7, #20]
 800ab74:	f893 2082 	ldrb.w	r2, [r3, #130]	@ 0x82
 800ab78:	79fb      	ldrb	r3, [r7, #7]
 800ab7a:	4313      	orrs	r3, r2
 800ab7c:	b2da      	uxtb	r2, r3
 800ab7e:	697b      	ldr	r3, [r7, #20]
 800ab80:	f883 2082 	strb.w	r2, [r3, #130]	@ 0x82
 800ab84:	693b      	ldr	r3, [r7, #16]
 800ab86:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ab88:	68bb      	ldr	r3, [r7, #8]
 800ab8a:	f383 8810 	msr	PRIMASK, r3
}
 800ab8e:	bf00      	nop

  UTILS_EXIT_CRITICAL_SECTION( );
}
 800ab90:	bf00      	nop
 800ab92:	3718      	adds	r7, #24
 800ab94:	46bd      	mov	sp, r7
 800ab96:	bd80      	pop	{r7, pc}
 800ab98:	2000696c 	.word	0x2000696c

0800ab9c <HW_RNG_DisableClock>:

/*****************************************************************************/

void HW_RNG_DisableClock( uint8_t user_mask )
{
 800ab9c:	b580      	push	{r7, lr}
 800ab9e:	b08a      	sub	sp, #40	@ 0x28
 800aba0:	af00      	add	r7, sp, #0
 800aba2:	4603      	mov	r3, r0
 800aba4:	71fb      	strb	r3, [r7, #7]
  HW_RNG_VAR_T* pv = &HW_RNG_var;
 800aba6:	4b20      	ldr	r3, [pc, #128]	@ (800ac28 <HW_RNG_DisableClock+0x8c>)
 800aba8:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800abaa:	f3ef 8310 	mrs	r3, PRIMASK
 800abae:	617b      	str	r3, [r7, #20]
  return(result);
 800abb0:	697b      	ldr	r3, [r7, #20]

  {
    UTILS_ENTER_CRITICAL_SECTION( );
 800abb2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800abb4:	b672      	cpsid	i
}
 800abb6:	bf00      	nop

    pv->clock_en &= ~user_mask;
 800abb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abba:	f893 3082 	ldrb.w	r3, [r3, #130]	@ 0x82
 800abbe:	b25a      	sxtb	r2, r3
 800abc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800abc4:	43db      	mvns	r3, r3
 800abc6:	b25b      	sxtb	r3, r3
 800abc8:	4013      	ands	r3, r2
 800abca:	b25b      	sxtb	r3, r3
 800abcc:	b2da      	uxtb	r2, r3
 800abce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abd0:	f883 2082 	strb.w	r2, [r3, #130]	@ 0x82
 800abd4:	6a3b      	ldr	r3, [r7, #32]
 800abd6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800abd8:	69bb      	ldr	r3, [r7, #24]
 800abda:	f383 8810 	msr	PRIMASK, r3
}
 800abde:	bf00      	nop
  }

  /* It does not matter much if the temporisation is executed even though
   * in the meantime pv->clock_en has been updated and is not more equal to 0
   */
  if ( pv->clock_en == 0 )
 800abe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abe2:	f893 3082 	ldrb.w	r3, [r3, #130]	@ 0x82
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d101      	bne.n	800abee <HW_RNG_DisableClock+0x52>
  {
    HW_RNG_WaitingClockSynchronization( );
 800abea:	f000 f81f 	bl	800ac2c <HW_RNG_WaitingClockSynchronization>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800abee:	f3ef 8310 	mrs	r3, PRIMASK
 800abf2:	613b      	str	r3, [r7, #16]
  return(result);
 800abf4:	693b      	ldr	r3, [r7, #16]
  }

  {
    UTILS_ENTER_CRITICAL_SECTION( );
 800abf6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800abf8:	b672      	cpsid	i
}
 800abfa:	bf00      	nop

    if ( pv->clock_en == 0 )
 800abfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abfe:	f893 3082 	ldrb.w	r3, [r3, #130]	@ 0x82
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d103      	bne.n	800ac0e <HW_RNG_DisableClock+0x72>
    {
      LL_AHB2_GRP1_DisableClock( LL_AHB2_GRP1_PERIPH_RNG );
 800ac06:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 800ac0a:	f7ff fed9 	bl	800a9c0 <LL_AHB2_GRP1_DisableClock>
 800ac0e:	69fb      	ldr	r3, [r7, #28]
 800ac10:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	f383 8810 	msr	PRIMASK, r3
}
 800ac18:	bf00      	nop
    }

    UTILS_EXIT_CRITICAL_SECTION( );
  }

  RNG_KERNEL_CLK_OFF();
 800ac1a:	f7ff ff77 	bl	800ab0c <RNG_KERNEL_CLK_OFF>
}
 800ac1e:	bf00      	nop
 800ac20:	3728      	adds	r7, #40	@ 0x28
 800ac22:	46bd      	mov	sp, r7
 800ac24:	bd80      	pop	{r7, pc}
 800ac26:	bf00      	nop
 800ac28:	2000696c 	.word	0x2000696c

0800ac2c <HW_RNG_WaitingClockSynchronization>:
/*
 * Wait for 2 RNG kernel clock.
 * Loop is sized with worst case : RNG kernel clock = 32Khz
 */
static void HW_RNG_WaitingClockSynchronization( void )
{
 800ac2c:	b480      	push	{r7}
 800ac2e:	b083      	sub	sp, #12
 800ac30:	af00      	add	r7, sp, #0
  volatile unsigned int cpt;

  for(cpt = 178 ; cpt!=0 ; --cpt);
 800ac32:	23b2      	movs	r3, #178	@ 0xb2
 800ac34:	607b      	str	r3, [r7, #4]
 800ac36:	e002      	b.n	800ac3e <HW_RNG_WaitingClockSynchronization+0x12>
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	3b01      	subs	r3, #1
 800ac3c:	607b      	str	r3, [r7, #4]
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d1f9      	bne.n	800ac38 <HW_RNG_WaitingClockSynchronization+0xc>
}
 800ac44:	bf00      	nop
 800ac46:	bf00      	nop
 800ac48:	370c      	adds	r7, #12
 800ac4a:	46bd      	mov	sp, r7
 800ac4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac50:	4770      	bx	lr
	...

0800ac54 <HW_RNG_Run>:
 * fills the pool with generated random numbers and then disables the RNG.
 * It always returns 0 in normal conditions. In error conditions, it returns
 * an error code different from 0.
 */
static int HW_RNG_Run( HW_RNG_VAR_T* pv )
{
 800ac54:	b590      	push	{r4, r7, lr}
 800ac56:	b089      	sub	sp, #36	@ 0x24
 800ac58:	af00      	add	r7, sp, #0
 800ac5a:	6078      	str	r0, [r7, #4]
  int i, error = HW_OK;
 800ac5c:	2300      	movs	r3, #0
 800ac5e:	61bb      	str	r3, [r7, #24]

  /* If the RNG is OFF */

  if ( !pv->run )
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d110      	bne.n	800ac8c <HW_RNG_Run+0x38>
  {
    SYSTEM_DEBUG_SIGNAL_SET(RNG_ENABLE);
 800ac6a:	2003      	movs	r0, #3
 800ac6c:	f004 fa5e 	bl	800f12c <SYSTEM_DEBUG_SIGNAL_SET>

    /* Enable RNG clocks */
    HW_RNG_EnableClock( 1 );
 800ac70:	2001      	movs	r0, #1
 800ac72:	f7ff ff65 	bl	800ab40 <HW_RNG_EnableClock>

    /* Set RNG enable bit */
    LL_RNG_Enable( RNG );
 800ac76:	4839      	ldr	r0, [pc, #228]	@ (800ad5c <HW_RNG_Run+0x108>)
 800ac78:	f7ff feb8 	bl	800a9ec <LL_RNG_Enable>

    SYSTEM_DEBUG_SIGNAL_RESET(RNG_ENABLE);
 800ac7c:	2003      	movs	r0, #3
 800ac7e:	f004 fa60 	bl	800f142 <SYSTEM_DEBUG_SIGNAL_RESET>

    /* Set flag indicating that RNG is ON */
    pv->run = TRUE;
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	2201      	movs	r2, #1
 800ac86:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
 800ac8a:	e062      	b.n	800ad52 <HW_RNG_Run+0xfe>
  }

  /* Else check for RNG clock error */

  else if ( LL_RNG_IsActiveFlag_CECS( RNG ) )
 800ac8c:	4833      	ldr	r0, [pc, #204]	@ (800ad5c <HW_RNG_Run+0x108>)
 800ac8e:	f7ff fee0 	bl	800aa52 <LL_RNG_IsActiveFlag_CECS>
 800ac92:	4603      	mov	r3, r0
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d006      	beq.n	800aca6 <HW_RNG_Run+0x52>
  {
    /* Clear RNG clock error interrupt status flags */
    LL_RNG_ClearFlag_CEIS( RNG );
 800ac98:	4830      	ldr	r0, [pc, #192]	@ (800ad5c <HW_RNG_Run+0x108>)
 800ac9a:	f7ff ff00 	bl	800aa9e <LL_RNG_ClearFlag_CEIS>

    error = HW_RNG_CLOCK_ERROR;
 800ac9e:	f240 1301 	movw	r3, #257	@ 0x101
 800aca2:	61bb      	str	r3, [r7, #24]
 800aca4:	e055      	b.n	800ad52 <HW_RNG_Run+0xfe>
  }

  /* Else check for RNG seed error */

  else if ( LL_RNG_IsActiveFlag_SEIS( RNG ) )
 800aca6:	482d      	ldr	r0, [pc, #180]	@ (800ad5c <HW_RNG_Run+0x108>)
 800aca8:	f7ff fee6 	bl	800aa78 <LL_RNG_IsActiveFlag_SEIS>
 800acac:	4603      	mov	r3, r0
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d012      	beq.n	800acd8 <HW_RNG_Run+0x84>
  {
    /* Clear RNG seed error interrupt status flags */
    LL_RNG_ClearFlag_SEIS( RNG );
 800acb2:	482a      	ldr	r0, [pc, #168]	@ (800ad5c <HW_RNG_Run+0x108>)
 800acb4:	f7ff ff01 	bl	800aaba <LL_RNG_ClearFlag_SEIS>

    /* Discard 12 words from RNG_DR in order to clean the pipeline */
    for ( i = 12; i > 0; i-- )
 800acb8:	230c      	movs	r3, #12
 800acba:	61fb      	str	r3, [r7, #28]
 800acbc:	e005      	b.n	800acca <HW_RNG_Run+0x76>
    {
      LL_RNG_ReadRandData32( RNG );
 800acbe:	4827      	ldr	r0, [pc, #156]	@ (800ad5c <HW_RNG_Run+0x108>)
 800acc0:	f7ff ff09 	bl	800aad6 <LL_RNG_ReadRandData32>
    for ( i = 12; i > 0; i-- )
 800acc4:	69fb      	ldr	r3, [r7, #28]
 800acc6:	3b01      	subs	r3, #1
 800acc8:	61fb      	str	r3, [r7, #28]
 800acca:	69fb      	ldr	r3, [r7, #28]
 800accc:	2b00      	cmp	r3, #0
 800acce:	dcf6      	bgt.n	800acbe <HW_RNG_Run+0x6a>
    }

    error = HW_RNG_NOISE_ERROR;
 800acd0:	f44f 7381 	mov.w	r3, #258	@ 0x102
 800acd4:	61bb      	str	r3, [r7, #24]
 800acd6:	e03c      	b.n	800ad52 <HW_RNG_Run+0xfe>
  }

  /* Else if the pool is not full */

  else if ( pv->size < CFG_HW_RNG_POOL_SIZE )
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800acde:	2b1f      	cmp	r3, #31
 800ace0:	d831      	bhi.n	800ad46 <HW_RNG_Run+0xf2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800ace2:	f3ef 8310 	mrs	r3, PRIMASK
 800ace6:	613b      	str	r3, [r7, #16]
  return(result);
 800ace8:	693b      	ldr	r3, [r7, #16]
  {
    /* Read the H/W generated values until the pool is full */

    UTILS_ENTER_CRITICAL_SECTION( );
 800acea:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800acec:	b672      	cpsid	i
}
 800acee:	bf00      	nop

    SYSTEM_DEBUG_SIGNAL_SET(RNG_GEN_RAND_NUM);
 800acf0:	2005      	movs	r0, #5
 800acf2:	f004 fa1b 	bl	800f12c <SYSTEM_DEBUG_SIGNAL_SET>

    while ( (pv->size < CFG_HW_RNG_POOL_SIZE) &&
 800acf6:	e012      	b.n	800ad1e <HW_RNG_Run+0xca>
            LL_RNG_IsActiveFlag_DRDY( RNG ) )
    {
      pv->pool[pv->size] = LL_RNG_ReadRandData32( RNG );
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800acfe:	461c      	mov	r4, r3
 800ad00:	4816      	ldr	r0, [pc, #88]	@ (800ad5c <HW_RNG_Run+0x108>)
 800ad02:	f7ff fee8 	bl	800aad6 <LL_RNG_ReadRandData32>
 800ad06:	4602      	mov	r2, r0
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
      pv->size++;
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800ad14:	3301      	adds	r3, #1
 800ad16:	b2da      	uxtb	r2, r3
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    while ( (pv->size < CFG_HW_RNG_POOL_SIZE) &&
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800ad24:	2b1f      	cmp	r3, #31
 800ad26:	d805      	bhi.n	800ad34 <HW_RNG_Run+0xe0>
            LL_RNG_IsActiveFlag_DRDY( RNG ) )
 800ad28:	480c      	ldr	r0, [pc, #48]	@ (800ad5c <HW_RNG_Run+0x108>)
 800ad2a:	f7ff fe7f 	bl	800aa2c <LL_RNG_IsActiveFlag_DRDY>
 800ad2e:	4603      	mov	r3, r0
    while ( (pv->size < CFG_HW_RNG_POOL_SIZE) &&
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d1e1      	bne.n	800acf8 <HW_RNG_Run+0xa4>
    }

    SYSTEM_DEBUG_SIGNAL_RESET(RNG_GEN_RAND_NUM);
 800ad34:	2005      	movs	r0, #5
 800ad36:	f004 fa04 	bl	800f142 <SYSTEM_DEBUG_SIGNAL_RESET>
 800ad3a:	697b      	ldr	r3, [r7, #20]
 800ad3c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	f383 8810 	msr	PRIMASK, r3
}
 800ad44:	e005      	b.n	800ad52 <HW_RNG_Run+0xfe>
  /* Else if the pool is full, disable the RNG */

  else
  {
    /* Disable RNG peripheral and its RCC clock */
    HW_RNG_Disable( );
 800ad46:	f7ff fee9 	bl	800ab1c <HW_RNG_Disable>

    /* Reset flag indicating that the RNG is ON */
    pv->run = FALSE;
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	2200      	movs	r2, #0
 800ad4e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  }

  return error;
 800ad52:	69bb      	ldr	r3, [r7, #24]
}
 800ad54:	4618      	mov	r0, r3
 800ad56:	3724      	adds	r7, #36	@ 0x24
 800ad58:	46bd      	mov	sp, r7
 800ad5a:	bd90      	pop	{r4, r7, pc}
 800ad5c:	420c0800 	.word	0x420c0800

0800ad60 <HW_RNG_Start>:

/*****************************************************************************/

void HW_RNG_Start( void )
{
 800ad60:	b580      	push	{r7, lr}
 800ad62:	b082      	sub	sp, #8
 800ad64:	af00      	add	r7, sp, #0
  HW_RNG_VAR_T* pv = &HW_RNG_var;
 800ad66:	4b13      	ldr	r3, [pc, #76]	@ (800adb4 <HW_RNG_Start+0x54>)
 800ad68:	607b      	str	r3, [r7, #4]

  /* Reset global variables */
  pv->size = 0;
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	2200      	movs	r2, #0
 800ad6e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
  pv->run = FALSE;
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	2200      	movs	r2, #0
 800ad76:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  pv->error = HW_OK;
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	2200      	movs	r2, #0
 800ad7e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  pv->clock_en = 0;
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	2200      	movs	r2, #0
 800ad86:	f883 2082 	strb.w	r2, [r3, #130]	@ 0x82

  /* Fill the random numbers pool by calling the "run" function */
  do
  {
    pv->error = HW_RNG_Run( pv );
 800ad8a:	6878      	ldr	r0, [r7, #4]
 800ad8c:	f7ff ff62 	bl	800ac54 <HW_RNG_Run>
 800ad90:	4602      	mov	r2, r0
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }
  while ( pv->run && !pv->error );
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d004      	beq.n	800adac <HW_RNG_Start+0x4c>
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d0ee      	beq.n	800ad8a <HW_RNG_Start+0x2a>
}
 800adac:	bf00      	nop
 800adae:	3708      	adds	r7, #8
 800adb0:	46bd      	mov	sp, r7
 800adb2:	bd80      	pop	{r7, pc}
 800adb4:	2000696c 	.word	0x2000696c

0800adb8 <HW_RNG_Get>:

/*****************************************************************************/

void HW_RNG_Get( uint8_t n, uint32_t* val )
{
 800adb8:	b580      	push	{r7, lr}
 800adba:	b088      	sub	sp, #32
 800adbc:	af00      	add	r7, sp, #0
 800adbe:	4603      	mov	r3, r0
 800adc0:	6039      	str	r1, [r7, #0]
 800adc2:	71fb      	strb	r3, [r7, #7]
  HW_RNG_VAR_T* pv = &HW_RNG_var;
 800adc4:	4b21      	ldr	r3, [pc, #132]	@ (800ae4c <HW_RNG_Get+0x94>)
 800adc6:	61bb      	str	r3, [r7, #24]
  uint32_t pool_value;

  while ( n-- )
 800adc8:	e034      	b.n	800ae34 <HW_RNG_Get+0x7c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800adca:	f3ef 8310 	mrs	r3, PRIMASK
 800adce:	613b      	str	r3, [r7, #16]
  return(result);
 800add0:	693b      	ldr	r3, [r7, #16]
  {
    UTILS_ENTER_CRITICAL_SECTION( );
 800add2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800add4:	b672      	cpsid	i
}
 800add6:	bf00      	nop

    if ( pv->size == 0 )
 800add8:	69bb      	ldr	r3, [r7, #24]
 800adda:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d10d      	bne.n	800adfe <HW_RNG_Get+0x46>
    {
      pv->error = HW_RNG_UFLOW_ERROR;
 800ade2:	69bb      	ldr	r3, [r7, #24]
 800ade4:	f240 1203 	movw	r2, #259	@ 0x103
 800ade8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      pool_value = ~pv->pool[n & (CFG_HW_RNG_POOL_SIZE - 1)];
 800adec:	79fb      	ldrb	r3, [r7, #7]
 800adee:	f003 021f 	and.w	r2, r3, #31
 800adf2:	69bb      	ldr	r3, [r7, #24]
 800adf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800adf8:	43db      	mvns	r3, r3
 800adfa:	61fb      	str	r3, [r7, #28]
 800adfc:	e00f      	b.n	800ae1e <HW_RNG_Get+0x66>
    }
    else
    {
      pool_value = pv->pool[--pv->size];
 800adfe:	69bb      	ldr	r3, [r7, #24]
 800ae00:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800ae04:	3b01      	subs	r3, #1
 800ae06:	b2da      	uxtb	r2, r3
 800ae08:	69bb      	ldr	r3, [r7, #24]
 800ae0a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 800ae0e:	69bb      	ldr	r3, [r7, #24]
 800ae10:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800ae14:	461a      	mov	r2, r3
 800ae16:	69bb      	ldr	r3, [r7, #24]
 800ae18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae1c:	61fb      	str	r3, [r7, #28]
 800ae1e:	697b      	ldr	r3, [r7, #20]
 800ae20:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	f383 8810 	msr	PRIMASK, r3
}
 800ae28:	bf00      	nop
    }

    UTILS_EXIT_CRITICAL_SECTION( );

    *val++ = pool_value;
 800ae2a:	683b      	ldr	r3, [r7, #0]
 800ae2c:	1d1a      	adds	r2, r3, #4
 800ae2e:	603a      	str	r2, [r7, #0]
 800ae30:	69fa      	ldr	r2, [r7, #28]
 800ae32:	601a      	str	r2, [r3, #0]
  while ( n-- )
 800ae34:	79fb      	ldrb	r3, [r7, #7]
 800ae36:	1e5a      	subs	r2, r3, #1
 800ae38:	71fa      	strb	r2, [r7, #7]
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d1c5      	bne.n	800adca <HW_RNG_Get+0x12>
  }

  /* Call the process callback function to fill the pool offline */
  HWCB_RNG_Process( );
 800ae3e:	f7f5 fcda 	bl	80007f6 <HWCB_RNG_Process>
}
 800ae42:	bf00      	nop
 800ae44:	3720      	adds	r7, #32
 800ae46:	46bd      	mov	sp, r7
 800ae48:	bd80      	pop	{r7, pc}
 800ae4a:	bf00      	nop
 800ae4c:	2000696c 	.word	0x2000696c

0800ae50 <HW_RNG_Process>:

/*****************************************************************************/

int HW_RNG_Process( void )
{
 800ae50:	b580      	push	{r7, lr}
 800ae52:	b086      	sub	sp, #24
 800ae54:	af00      	add	r7, sp, #0
  HW_RNG_VAR_T* pv = &HW_RNG_var;
 800ae56:	4b1f      	ldr	r3, [pc, #124]	@ (800aed4 <HW_RNG_Process+0x84>)
 800ae58:	613b      	str	r3, [r7, #16]
  int status = HW_OK;
 800ae5a:	2300      	movs	r3, #0
 800ae5c:	617b      	str	r3, [r7, #20]

  /* Check if the process is not done or if the pool is not full */
  if ( pv->run || (pv->size < CFG_HW_RNG_POOL_SIZE) )
 800ae5e:	693b      	ldr	r3, [r7, #16]
 800ae60:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d104      	bne.n	800ae72 <HW_RNG_Process+0x22>
 800ae68:	693b      	ldr	r3, [r7, #16]
 800ae6a:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800ae6e:	2b1f      	cmp	r3, #31
 800ae70:	d825      	bhi.n	800aebe <HW_RNG_Process+0x6e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800ae72:	f3ef 8310 	mrs	r3, PRIMASK
 800ae76:	607b      	str	r3, [r7, #4]
  return(result);
 800ae78:	687b      	ldr	r3, [r7, #4]
  {
    UTILS_ENTER_CRITICAL_SECTION( );
 800ae7a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800ae7c:	b672      	cpsid	i
}
 800ae7e:	bf00      	nop

    /* Check if an error occurred during a previous call to HW_RNG API */
    status = pv->error;
 800ae80:	693b      	ldr	r3, [r7, #16]
 800ae82:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ae86:	617b      	str	r3, [r7, #20]
    pv->error = HW_OK;
 800ae88:	693b      	ldr	r3, [r7, #16]
 800ae8a:	2200      	movs	r2, #0
 800ae8c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ae94:	68bb      	ldr	r3, [r7, #8]
 800ae96:	f383 8810 	msr	PRIMASK, r3
}
 800ae9a:	bf00      	nop

    UTILS_EXIT_CRITICAL_SECTION( );

    if ( status == HW_OK )
 800ae9c:	697b      	ldr	r3, [r7, #20]
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d10d      	bne.n	800aebe <HW_RNG_Process+0x6e>
    {
      /* Call the "run" function that generates random data */
      status = HW_RNG_Run( pv );
 800aea2:	6938      	ldr	r0, [r7, #16]
 800aea4:	f7ff fed6 	bl	800ac54 <HW_RNG_Run>
 800aea8:	6178      	str	r0, [r7, #20]

      /* If the process is not done, return "busy" status */
      if ( (status == HW_OK) && pv->run )
 800aeaa:	697b      	ldr	r3, [r7, #20]
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d106      	bne.n	800aebe <HW_RNG_Process+0x6e>
 800aeb0:	693b      	ldr	r3, [r7, #16]
 800aeb2:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d001      	beq.n	800aebe <HW_RNG_Process+0x6e>
      {
        status = HW_BUSY;
 800aeba:	2301      	movs	r3, #1
 800aebc:	617b      	str	r3, [r7, #20]
      }
    }
  }

  if(status != HW_OK)
 800aebe:	697b      	ldr	r3, [r7, #20]
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d001      	beq.n	800aec8 <HW_RNG_Process+0x78>
  {
    HWCB_RNG_Process( );
 800aec4:	f7f5 fc97 	bl	80007f6 <HWCB_RNG_Process>
  }

  /* Return status */
  return status;
 800aec8:	697b      	ldr	r3, [r7, #20]
}
 800aeca:	4618      	mov	r0, r3
 800aecc:	3718      	adds	r7, #24
 800aece:	46bd      	mov	sp, r7
 800aed0:	bd80      	pop	{r7, pc}
 800aed2:	bf00      	nop
 800aed4:	2000696c 	.word	0x2000696c

0800aed8 <HW_PKA_P256_StartRangeCheck>:
};

/*****************************************************************************/

void HW_PKA_P256_StartRangeCheck( const uint32_t* coord )
{
 800aed8:	b580      	push	{r7, lr}
 800aeda:	b082      	sub	sp, #8
 800aedc:	af00      	add	r7, sp, #0
 800aede:	6078      	str	r0, [r7, #4]
  /* Set the muber of bits of P */
  HW_PKA_WriteSingleInput( PKA_COMPARISON_IN_OP_NB_BITS, 256 );
 800aee0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800aee4:	2002      	movs	r0, #2
 800aee6:	f7ff fc75 	bl	800a7d4 <HW_PKA_WriteSingleInput>

  /* Set the coordinate */
  HW_PKA_WriteOperand( PKA_COMPARISON_IN_OP1, 8, coord );
 800aeea:	687a      	ldr	r2, [r7, #4]
 800aeec:	2108      	movs	r1, #8
 800aeee:	f44f 70ca 	mov.w	r0, #404	@ 0x194
 800aef2:	f7ff fc83 	bl	800a7fc <HW_PKA_WriteOperand>

  /* Set the modulus value p */
  HW_PKA_WriteOperand( PKA_COMPARISON_IN_OP2, 8, HW_PKA_P256_gfp );
 800aef6:	4a06      	ldr	r2, [pc, #24]	@ (800af10 <HW_PKA_P256_StartRangeCheck+0x38>)
 800aef8:	2108      	movs	r1, #8
 800aefa:	f240 201a 	movw	r0, #538	@ 0x21a
 800aefe:	f7ff fc7d 	bl	800a7fc <HW_PKA_WriteOperand>

  /* Start PKA hardware */
  HW_PKA_Start( LL_PKA_MODE_COMPARISON );
 800af02:	200c      	movs	r0, #12
 800af04:	f7ff fca0 	bl	800a848 <HW_PKA_Start>
}
 800af08:	bf00      	nop
 800af0a:	3708      	adds	r7, #8
 800af0c:	46bd      	mov	sp, r7
 800af0e:	bd80      	pop	{r7, pc}
 800af10:	080316a8 	.word	0x080316a8

0800af14 <HW_PKA_P256_IsRangeCheckOk>:

/*****************************************************************************/

uint32_t HW_PKA_P256_IsRangeCheckOk( void )
{
 800af14:	b580      	push	{r7, lr}
 800af16:	af00      	add	r7, sp, #0
  return (HW_PKA_ReadSingleOutput( PKA_COMPARISON_OUT_RESULT ) == 0x916AUL);
 800af18:	f240 209e 	movw	r0, #670	@ 0x29e
 800af1c:	f7ff fcb2 	bl	800a884 <HW_PKA_ReadSingleOutput>
 800af20:	4603      	mov	r3, r0
 800af22:	f249 126a 	movw	r2, #37226	@ 0x916a
 800af26:	4293      	cmp	r3, r2
 800af28:	bf0c      	ite	eq
 800af2a:	2301      	moveq	r3, #1
 800af2c:	2300      	movne	r3, #0
 800af2e:	b2db      	uxtb	r3, r3
}
 800af30:	4618      	mov	r0, r3
 800af32:	bd80      	pop	{r7, pc}

0800af34 <HW_PKA_P256_StartPointCheck>:

/*****************************************************************************/

void HW_PKA_P256_StartPointCheck( const uint32_t* x,
                                  const uint32_t* y )
{
 800af34:	b580      	push	{r7, lr}
 800af36:	b082      	sub	sp, #8
 800af38:	af00      	add	r7, sp, #0
 800af3a:	6078      	str	r0, [r7, #4]
 800af3c:	6039      	str	r1, [r7, #0]
  /* Set the muber of bits of p */
  HW_PKA_WriteSingleInput( PKA_POINT_CHECK_IN_MOD_NB_BITS, 256 );
 800af3e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800af42:	2002      	movs	r0, #2
 800af44:	f7ff fc46 	bl	800a7d4 <HW_PKA_WriteSingleInput>

  /* Set the coefficient a sign */
  HW_PKA_WriteSingleInput( PKA_POINT_CHECK_IN_A_COEFF_SIGN, 1 );
 800af48:	2101      	movs	r1, #1
 800af4a:	2004      	movs	r0, #4
 800af4c:	f7ff fc42 	bl	800a7d4 <HW_PKA_WriteSingleInput>

  /* Set the coefficient |a| */
  HW_PKA_WriteOperand( PKA_POINT_CHECK_IN_A_COEFF, 8, HW_PKA_P256_a );
 800af50:	4a12      	ldr	r2, [pc, #72]	@ (800af9c <HW_PKA_P256_StartPointCheck+0x68>)
 800af52:	2108      	movs	r1, #8
 800af54:	2006      	movs	r0, #6
 800af56:	f7ff fc51 	bl	800a7fc <HW_PKA_WriteOperand>

  /* Set the coefficient b */
  HW_PKA_WriteOperand( PKA_POINT_CHECK_IN_B_COEFF, 8, HW_PKA_P256_b );
 800af5a:	4a11      	ldr	r2, [pc, #68]	@ (800afa0 <HW_PKA_P256_StartPointCheck+0x6c>)
 800af5c:	2108      	movs	r1, #8
 800af5e:	2048      	movs	r0, #72	@ 0x48
 800af60:	f7ff fc4c 	bl	800a7fc <HW_PKA_WriteOperand>

  /* Set the modulus value p */
  HW_PKA_WriteOperand( PKA_POINT_CHECK_IN_MOD_GF, 8, HW_PKA_P256_gfp );
 800af64:	4a0f      	ldr	r2, [pc, #60]	@ (800afa4 <HW_PKA_P256_StartPointCheck+0x70>)
 800af66:	2108      	movs	r1, #8
 800af68:	201c      	movs	r0, #28
 800af6a:	f7ff fc47 	bl	800a7fc <HW_PKA_WriteOperand>

  /* Set the point coordinate x */
  HW_PKA_WriteOperand( PKA_POINT_CHECK_IN_INITIAL_POINT_X, 8, x );
 800af6e:	687a      	ldr	r2, [r7, #4]
 800af70:	2108      	movs	r1, #8
 800af72:	205e      	movs	r0, #94	@ 0x5e
 800af74:	f7ff fc42 	bl	800a7fc <HW_PKA_WriteOperand>

  /* Set the point coordinate y */
  HW_PKA_WriteOperand( PKA_POINT_CHECK_IN_INITIAL_POINT_Y, 8, y );
 800af78:	683a      	ldr	r2, [r7, #0]
 800af7a:	2108      	movs	r1, #8
 800af7c:	2074      	movs	r0, #116	@ 0x74
 800af7e:	f7ff fc3d 	bl	800a7fc <HW_PKA_WriteOperand>

  /* Set the Montgomery parameter */
  HW_PKA_WriteOperand( PKA_POINT_CHECK_IN_MONTGOMERY_PARAM,
 800af82:	4a09      	ldr	r2, [pc, #36]	@ (800afa8 <HW_PKA_P256_StartPointCheck+0x74>)
 800af84:	2108      	movs	r1, #8
 800af86:	2032      	movs	r0, #50	@ 0x32
 800af88:	f7ff fc38 	bl	800a7fc <HW_PKA_WriteOperand>
                       8, HW_PKA_P256_r2 );

  /* Start PKA hardware */
  HW_PKA_Start( LL_PKA_MODE_POINT_CHECK );
 800af8c:	2028      	movs	r0, #40	@ 0x28
 800af8e:	f7ff fc5b 	bl	800a848 <HW_PKA_Start>
}
 800af92:	bf00      	nop
 800af94:	3708      	adds	r7, #8
 800af96:	46bd      	mov	sp, r7
 800af98:	bd80      	pop	{r7, pc}
 800af9a:	bf00      	nop
 800af9c:	08031728 	.word	0x08031728
 800afa0:	08031748 	.word	0x08031748
 800afa4:	080316a8 	.word	0x080316a8
 800afa8:	080316c8 	.word	0x080316c8

0800afac <HW_PKA_P256_IsPointCheckOk>:

/*****************************************************************************/

uint32_t HW_PKA_P256_IsPointCheckOk( void )
{
 800afac:	b580      	push	{r7, lr}
 800afae:	af00      	add	r7, sp, #0
  return (HW_PKA_ReadSingleOutput( PKA_POINT_CHECK_OUT_ERROR ) == 0xD60DUL);
 800afb0:	20a0      	movs	r0, #160	@ 0xa0
 800afb2:	f7ff fc67 	bl	800a884 <HW_PKA_ReadSingleOutput>
 800afb6:	4603      	mov	r3, r0
 800afb8:	f24d 620d 	movw	r2, #54797	@ 0xd60d
 800afbc:	4293      	cmp	r3, r2
 800afbe:	bf0c      	ite	eq
 800afc0:	2301      	moveq	r3, #1
 800afc2:	2300      	movne	r3, #0
 800afc4:	b2db      	uxtb	r3, r3
}
 800afc6:	4618      	mov	r0, r3
 800afc8:	bd80      	pop	{r7, pc}
	...

0800afcc <HW_PKA_P256_StartEccScalarMul>:
/*****************************************************************************/

void HW_PKA_P256_StartEccScalarMul( const uint32_t* k,
                                    const uint32_t* p_x,
                                    const uint32_t* p_y )
{
 800afcc:	b580      	push	{r7, lr}
 800afce:	b084      	sub	sp, #16
 800afd0:	af00      	add	r7, sp, #0
 800afd2:	60f8      	str	r0, [r7, #12]
 800afd4:	60b9      	str	r1, [r7, #8]
 800afd6:	607a      	str	r2, [r7, #4]
  /* Set the scalar multiplier k length */
  HW_PKA_WriteSingleInput( PKA_ECC_SCALAR_MUL_IN_EXP_NB_BITS, 256 );
 800afd8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800afdc:	2000      	movs	r0, #0
 800afde:	f7ff fbf9 	bl	800a7d4 <HW_PKA_WriteSingleInput>

  /* Set the modulus length */
  HW_PKA_WriteSingleInput( PKA_ECC_SCALAR_MUL_IN_OP_NB_BITS, 256 );
 800afe2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800afe6:	2002      	movs	r0, #2
 800afe8:	f7ff fbf4 	bl	800a7d4 <HW_PKA_WriteSingleInput>

  /* Set the coefficient a sign */
  HW_PKA_WriteSingleInput( PKA_ECC_SCALAR_MUL_IN_A_COEFF_SIGN, 1 );
 800afec:	2101      	movs	r1, #1
 800afee:	2004      	movs	r0, #4
 800aff0:	f7ff fbf0 	bl	800a7d4 <HW_PKA_WriteSingleInput>

  /* Set the coefficient |a| */
  HW_PKA_WriteOperand( PKA_ECC_SCALAR_MUL_IN_A_COEFF, 8, HW_PKA_P256_a );
 800aff4:	4a1c      	ldr	r2, [pc, #112]	@ (800b068 <HW_PKA_P256_StartEccScalarMul+0x9c>)
 800aff6:	2108      	movs	r1, #8
 800aff8:	2006      	movs	r0, #6
 800affa:	f7ff fbff 	bl	800a7fc <HW_PKA_WriteOperand>

  /* Set the coefficient b */
  HW_PKA_WriteOperand( PKA_ECC_SCALAR_MUL_IN_B_COEFF, 8, HW_PKA_P256_b );
 800affe:	4a1b      	ldr	r2, [pc, #108]	@ (800b06c <HW_PKA_P256_StartEccScalarMul+0xa0>)
 800b000:	2108      	movs	r1, #8
 800b002:	2048      	movs	r0, #72	@ 0x48
 800b004:	f7ff fbfa 	bl	800a7fc <HW_PKA_WriteOperand>

  /* Set the modulus value p */
  HW_PKA_WriteOperand( PKA_ECC_SCALAR_MUL_IN_MOD_GF, 8, HW_PKA_P256_gfp );
 800b008:	4a19      	ldr	r2, [pc, #100]	@ (800b070 <HW_PKA_P256_StartEccScalarMul+0xa4>)
 800b00a:	2108      	movs	r1, #8
 800b00c:	f240 3022 	movw	r0, #802	@ 0x322
 800b010:	f7ff fbf4 	bl	800a7fc <HW_PKA_WriteOperand>

  /* Set the scalar multiplier k */
  HW_PKA_WriteOperand( PKA_ECC_SCALAR_MUL_IN_K, 8, k );
 800b014:	68fa      	ldr	r2, [r7, #12]
 800b016:	2108      	movs	r1, #8
 800b018:	f44f 706a 	mov.w	r0, #936	@ 0x3a8
 800b01c:	f7ff fbee 	bl	800a7fc <HW_PKA_WriteOperand>

  /* Set the point P coordinate x */
  HW_PKA_WriteOperand( PKA_ECC_SCALAR_MUL_IN_INITIAL_POINT_X,
 800b020:	68bb      	ldr	r3, [r7, #8]
 800b022:	2b00      	cmp	r3, #0
 800b024:	d001      	beq.n	800b02a <HW_PKA_P256_StartEccScalarMul+0x5e>
 800b026:	68bb      	ldr	r3, [r7, #8]
 800b028:	e000      	b.n	800b02c <HW_PKA_P256_StartEccScalarMul+0x60>
 800b02a:	4b12      	ldr	r3, [pc, #72]	@ (800b074 <HW_PKA_P256_StartEccScalarMul+0xa8>)
 800b02c:	461a      	mov	r2, r3
 800b02e:	2108      	movs	r1, #8
 800b030:	205e      	movs	r0, #94	@ 0x5e
 800b032:	f7ff fbe3 	bl	800a7fc <HW_PKA_WriteOperand>
                       8, p_x ? p_x : HW_PKA_P256_p_x );

  /* Set the point P coordinate y */
  HW_PKA_WriteOperand( PKA_ECC_SCALAR_MUL_IN_INITIAL_POINT_Y,
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d001      	beq.n	800b040 <HW_PKA_P256_StartEccScalarMul+0x74>
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	e000      	b.n	800b042 <HW_PKA_P256_StartEccScalarMul+0x76>
 800b040:	4b0d      	ldr	r3, [pc, #52]	@ (800b078 <HW_PKA_P256_StartEccScalarMul+0xac>)
 800b042:	461a      	mov	r2, r3
 800b044:	2108      	movs	r1, #8
 800b046:	201c      	movs	r0, #28
 800b048:	f7ff fbd8 	bl	800a7fc <HW_PKA_WriteOperand>
                       8, p_y ? p_y : HW_PKA_P256_p_y );

  /* Set the prime order n */
  HW_PKA_WriteOperand( PKA_ECC_SCALAR_MUL_IN_N_PRIME_ORDER,
 800b04c:	4a0b      	ldr	r2, [pc, #44]	@ (800b07c <HW_PKA_P256_StartEccScalarMul+0xb0>)
 800b04e:	2108      	movs	r1, #8
 800b050:	f240 20e2 	movw	r0, #738	@ 0x2e2
 800b054:	f7ff fbd2 	bl	800a7fc <HW_PKA_WriteOperand>
                       8, HW_PKA_P256_n );

  /* Start PKA hardware */
  HW_PKA_Start( LL_PKA_MODE_ECC_MUL );
 800b058:	2020      	movs	r0, #32
 800b05a:	f7ff fbf5 	bl	800a848 <HW_PKA_Start>
}
 800b05e:	bf00      	nop
 800b060:	3710      	adds	r7, #16
 800b062:	46bd      	mov	sp, r7
 800b064:	bd80      	pop	{r7, pc}
 800b066:	bf00      	nop
 800b068:	08031728 	.word	0x08031728
 800b06c:	08031748 	.word	0x08031748
 800b070:	080316a8 	.word	0x080316a8
 800b074:	080316e8 	.word	0x080316e8
 800b078:	08031708 	.word	0x08031708
 800b07c:	08031768 	.word	0x08031768

0800b080 <HW_PKA_P256_ReadEccScalarMul>:

/*****************************************************************************/

void HW_PKA_P256_ReadEccScalarMul( uint32_t* p_x,
                                   uint32_t* p_y )
{
 800b080:	b580      	push	{r7, lr}
 800b082:	b082      	sub	sp, #8
 800b084:	af00      	add	r7, sp, #0
 800b086:	6078      	str	r0, [r7, #4]
 800b088:	6039      	str	r1, [r7, #0]
  /* Read the output point X */
  if ( p_x )
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d004      	beq.n	800b09a <HW_PKA_P256_ReadEccScalarMul+0x1a>
  {
    HW_PKA_ReadResult( PKA_ECC_SCALAR_MUL_OUT_RESULT_X, 8, p_x );
 800b090:	687a      	ldr	r2, [r7, #4]
 800b092:	2108      	movs	r1, #8
 800b094:	205e      	movs	r0, #94	@ 0x5e
 800b096:	f7ff fc07 	bl	800a8a8 <HW_PKA_ReadResult>
  }

  /* Read the output point Y as the second half of the result */
  if ( p_y )
 800b09a:	683b      	ldr	r3, [r7, #0]
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d004      	beq.n	800b0aa <HW_PKA_P256_ReadEccScalarMul+0x2a>
  {
    HW_PKA_ReadResult( PKA_ECC_SCALAR_MUL_OUT_RESULT_Y, 8, p_y );
 800b0a0:	683a      	ldr	r2, [r7, #0]
 800b0a2:	2108      	movs	r1, #8
 800b0a4:	2074      	movs	r0, #116	@ 0x74
 800b0a6:	f7ff fbff 	bl	800a8a8 <HW_PKA_ReadResult>
  }
}
 800b0aa:	bf00      	nop
 800b0ac:	3708      	adds	r7, #8
 800b0ae:	46bd      	mov	sp, r7
 800b0b0:	bd80      	pop	{r7, pc}
	...

0800b0b4 <LL_PWR_EnableUltraLowPowerMode>:
{
 800b0b4:	b480      	push	{r7}
 800b0b6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_ULPMEN);
 800b0b8:	4b05      	ldr	r3, [pc, #20]	@ (800b0d0 <LL_PWR_EnableUltraLowPowerMode+0x1c>)
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	4a04      	ldr	r2, [pc, #16]	@ (800b0d0 <LL_PWR_EnableUltraLowPowerMode+0x1c>)
 800b0be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b0c2:	6013      	str	r3, [r2, #0]
}
 800b0c4:	bf00      	nop
 800b0c6:	46bd      	mov	sp, r7
 800b0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0cc:	4770      	bx	lr
 800b0ce:	bf00      	nop
 800b0d0:	46020800 	.word	0x46020800

0800b0d4 <LL_PWR_IsActiveFlag_SB>:
  * @brief  Indicate whether the system was in standby mode or not.
  * @rmtoll SR            SBF             LL_PWR_IsActiveFlag_SB
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_SB(void)
{
 800b0d4:	b480      	push	{r7}
 800b0d6:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR, PWR_SR_SBF) == (PWR_SR_SBF)) ? 1UL : 0UL);
 800b0d8:	4b06      	ldr	r3, [pc, #24]	@ (800b0f4 <LL_PWR_IsActiveFlag_SB+0x20>)
 800b0da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b0dc:	f003 0304 	and.w	r3, r3, #4
 800b0e0:	2b04      	cmp	r3, #4
 800b0e2:	d101      	bne.n	800b0e8 <LL_PWR_IsActiveFlag_SB+0x14>
 800b0e4:	2301      	movs	r3, #1
 800b0e6:	e000      	b.n	800b0ea <LL_PWR_IsActiveFlag_SB+0x16>
 800b0e8:	2300      	movs	r3, #0
}
 800b0ea:	4618      	mov	r0, r3
 800b0ec:	46bd      	mov	sp, r7
 800b0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0f2:	4770      	bx	lr
 800b0f4:	46020800 	.word	0x46020800

0800b0f8 <is_boot_from_standby>:

  /* USER CODE END PWR_ExitSleepMode */
}

uint32_t is_boot_from_standby(void)
{
 800b0f8:	b580      	push	{r7, lr}
 800b0fa:	b082      	sub	sp, #8
 800b0fc:	af00      	add	r7, sp, #0
#if (CFG_DEBUGGER_LEVEL > 1)
  LL_DBGMCU_DisableDBGStopMode();
  LL_DBGMCU_DisableDBGStandbyMode();
#endif /* CFG_DEBUGGER_LEVEL */

  __HAL_RCC_PWR_CLK_ENABLE();
 800b0fe:	4b18      	ldr	r3, [pc, #96]	@ (800b160 <is_boot_from_standby+0x68>)
 800b100:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b104:	4a16      	ldr	r2, [pc, #88]	@ (800b160 <is_boot_from_standby+0x68>)
 800b106:	f043 0304 	orr.w	r3, r3, #4
 800b10a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800b10e:	4b14      	ldr	r3, [pc, #80]	@ (800b160 <is_boot_from_standby+0x68>)
 800b110:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b114:	f003 0304 	and.w	r3, r3, #4
 800b118:	607b      	str	r3, [r7, #4]
 800b11a:	687b      	ldr	r3, [r7, #4]

  LL_PWR_EnableUltraLowPowerMode();
 800b11c:	f7ff ffca 	bl	800b0b4 <LL_PWR_EnableUltraLowPowerMode>
  __HAL_FLASH_SLEEP_POWERDOWN_ENABLE();
 800b120:	4b10      	ldr	r3, [pc, #64]	@ (800b164 <is_boot_from_standby+0x6c>)
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	4a0f      	ldr	r2, [pc, #60]	@ (800b164 <is_boot_from_standby+0x6c>)
 800b126:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800b12a:	6013      	str	r3, [r2, #0]

  /* Ensure this is a return from Standby, and not a reset */
  if( (LL_PWR_IsActiveFlag_SB() == 1UL ) &&
 800b12c:	f7ff ffd2 	bl	800b0d4 <LL_PWR_IsActiveFlag_SB>
 800b130:	4603      	mov	r3, r0
 800b132:	2b01      	cmp	r3, #1
 800b134:	d10a      	bne.n	800b14c <is_boot_from_standby+0x54>
      (READ_REG(RCC->CSR) == 0U)
 800b136:	4b0a      	ldr	r3, [pc, #40]	@ (800b160 <is_boot_from_standby+0x68>)
 800b138:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
  if( (LL_PWR_IsActiveFlag_SB() == 1UL ) &&
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d105      	bne.n	800b14c <is_boot_from_standby+0x54>
  __ASM volatile ("cpsid i" : : : "memory");
 800b140:	b672      	cpsid	i
}
 800b142:	bf00      	nop
    )
  {
    /* When exit from standby, disable IRQ so that restore and PWR_ExitOffMode are in critical section */
    __disable_irq( );

    boot_after_standby = 1;
 800b144:	4b08      	ldr	r3, [pc, #32]	@ (800b168 <is_boot_from_standby+0x70>)
 800b146:	2201      	movs	r2, #1
 800b148:	601a      	str	r2, [r3, #0]
 800b14a:	e002      	b.n	800b152 <is_boot_from_standby+0x5a>
  }
  else
  {
    boot_after_standby = 0;
 800b14c:	4b06      	ldr	r3, [pc, #24]	@ (800b168 <is_boot_from_standby+0x70>)
 800b14e:	2200      	movs	r2, #0
 800b150:	601a      	str	r2, [r3, #0]
  }

  return boot_after_standby;
 800b152:	4b05      	ldr	r3, [pc, #20]	@ (800b168 <is_boot_from_standby+0x70>)
 800b154:	681b      	ldr	r3, [r3, #0]
}
 800b156:	4618      	mov	r0, r3
 800b158:	3708      	adds	r7, #8
 800b15a:	46bd      	mov	sp, r7
 800b15c:	bd80      	pop	{r7, pc}
 800b15e:	bf00      	nop
 800b160:	46020c00 	.word	0x46020c00
 800b164:	40022000 	.word	0x40022000
 800b168:	200069f8 	.word	0x200069f8

0800b16c <enter_standby_notification>:

__weak void enter_standby_notification(void)
{
 800b16c:	b480      	push	{r7}
 800b16e:	af00      	add	r7, sp, #0
  /* User code here */
}
 800b170:	bf00      	nop
 800b172:	46bd      	mov	sp, r7
 800b174:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b178:	4770      	bx	lr

0800b17a <exit_standby_notification>:

__weak void exit_standby_notification(void)
{
 800b17a:	b480      	push	{r7}
 800b17c:	af00      	add	r7, sp, #0
  /* User code here */
}
 800b17e:	bf00      	nop
 800b180:	46bd      	mov	sp, r7
 800b182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b186:	4770      	bx	lr

0800b188 <LL_RTC_TIME_GetSubSecond>:
  * @param  RTCx RTC Instance
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(const RTC_TypeDef *RTCx)
{
 800b188:	b480      	push	{r7}
 800b18a:	b083      	sub	sp, #12
 800b18c:	af00      	add	r7, sp, #0
 800b18e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	689b      	ldr	r3, [r3, #8]
}
 800b194:	4618      	mov	r0, r3
 800b196:	370c      	adds	r7, #12
 800b198:	46bd      	mov	sp, r7
 800b19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b19e:	4770      	bx	lr

0800b1a0 <TIMER_IF_Init>:
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

UTIL_TIMER_Status_t TIMER_IF_Init(void)
{
 800b1a0:	b580      	push	{r7, lr}
 800b1a2:	b082      	sub	sp, #8
 800b1a4:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 800b1a6:	2300      	movs	r3, #0
 800b1a8:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN TIMER_IF_Init_1 */

  /* USER CODE END TIMER_IF_Init_1 */

  if (RTC_Initialized == false)
 800b1aa:	4b10      	ldr	r3, [pc, #64]	@ (800b1ec <TIMER_IF_Init+0x4c>)
 800b1ac:	781b      	ldrb	r3, [r3, #0]
 800b1ae:	f083 0301 	eor.w	r3, r3, #1
 800b1b2:	b2db      	uxtb	r3, r3
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d013      	beq.n	800b1e0 <TIMER_IF_Init+0x40>
  {
    /* Init RTC */
    MX_RTC_Init();
 800b1b8:	f7f5 fdc8 	bl	8000d4c <MX_RTC_Init>

    /* Stop Timer */
    TIMER_IF_StopTimer();
 800b1bc:	f000 f852 	bl	800b264 <TIMER_IF_StopTimer>

    /* DeActivate the Alarm A enabled by MX during MX_RTC_Init() */
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 800b1c0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800b1c4:	480a      	ldr	r0, [pc, #40]	@ (800b1f0 <TIMER_IF_Init+0x50>)
 800b1c6:	f7fa fe7b 	bl	8005ec0 <HAL_RTC_DeactivateAlarm>

    /* Enable Direct Read of the calendar registers (not through Shadow) */
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 800b1ca:	4809      	ldr	r0, [pc, #36]	@ (800b1f0 <TIMER_IF_Init+0x50>)
 800b1cc:	f7fa ff86 	bl	80060dc <HAL_RTCEx_EnableBypassShadow>

    /* Initialise MSB ticks */
    TIMER_IF_BkUp_Write_MSBticks(0);
 800b1d0:	2000      	movs	r0, #0
 800b1d2:	f000 f8f9 	bl	800b3c8 <TIMER_IF_BkUp_Write_MSBticks>

    TIMER_IF_SetTimerContext();
 800b1d6:	f000 f85b 	bl	800b290 <TIMER_IF_SetTimerContext>

    RTC_Initialized = true;
 800b1da:	4b04      	ldr	r3, [pc, #16]	@ (800b1ec <TIMER_IF_Init+0x4c>)
 800b1dc:	2201      	movs	r2, #1
 800b1de:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN TIMER_IF_Init_2 */

  /* USER CODE END TIMER_IF_Init_2 */

  return ret;
 800b1e0:	79fb      	ldrb	r3, [r7, #7]

  /* USER CODE BEGIN TIMER_IF_Init_3 */

  /* USER CODE END TIMER_IF_Init_3 */
}
 800b1e2:	4618      	mov	r0, r3
 800b1e4:	3708      	adds	r7, #8
 800b1e6:	46bd      	mov	sp, r7
 800b1e8:	bd80      	pop	{r7, pc}
 800b1ea:	bf00      	nop
 800b1ec:	200069fc 	.word	0x200069fc
 800b1f0:	200015f8 	.word	0x200015f8

0800b1f4 <TIMER_IF_StartTimer>:

UTIL_TIMER_Status_t TIMER_IF_StartTimer(uint32_t timeout)
{
 800b1f4:	b580      	push	{r7, lr}
 800b1f6:	b090      	sub	sp, #64	@ 0x40
 800b1f8:	af00      	add	r7, sp, #0
 800b1fa:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 800b1fc:	2300      	movs	r3, #0
 800b1fe:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

  /* USER CODE BEGIN TIMER_IF_StartTimer_1 */

  /* USER CODE END TIMER_IF_StartTimer_1 */

  RTC_AlarmTypeDef sAlarm = {0};
 800b202:	f107 030c 	add.w	r3, r7, #12
 800b206:	2230      	movs	r2, #48	@ 0x30
 800b208:	2100      	movs	r1, #0
 800b20a:	4618      	mov	r0, r3
 800b20c:	f024 f8d0 	bl	802f3b0 <memset>

  /* Stop timer if one is already started */
  TIMER_IF_StopTimer();
 800b210:	f000 f828 	bl	800b264 <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 800b214:	4b11      	ldr	r3, [pc, #68]	@ (800b25c <TIMER_IF_StartTimer+0x68>)
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	687a      	ldr	r2, [r7, #4]
 800b21a:	4413      	add	r3, r2
 800b21c:	607b      	str	r3, [r7, #4]

  TIMER_IF_DBG_PRINTF("Start timer: time=%d, alarm=%d\n\r",  GetTimerTicks(), timeout);

  /* Starts timer */
  sAlarm.BinaryAutoClr        = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 800b21e:	2300      	movs	r3, #0
 800b220:	62bb      	str	r3, [r7, #40]	@ 0x28
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	43db      	mvns	r3, r3
 800b226:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask            = RTC_ALARMMASK_NONE;
 800b228:	2300      	movs	r3, #0
 800b22a:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmSubSecondMask   = RTC_ALARMSUBSECONDBINMASK_NONE;
 800b22c:	f04f 537c 	mov.w	r3, #1056964608	@ 0x3f000000
 800b230:	627b      	str	r3, [r7, #36]	@ 0x24
  sAlarm.Alarm                = RTC_ALARM_A;
 800b232:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b236:	63bb      	str	r3, [r7, #56]	@ 0x38

  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800b238:	f107 030c 	add.w	r3, r7, #12
 800b23c:	2201      	movs	r2, #1
 800b23e:	4619      	mov	r1, r3
 800b240:	4807      	ldr	r0, [pc, #28]	@ (800b260 <TIMER_IF_StartTimer+0x6c>)
 800b242:	f7fa fd3d 	bl	8005cc0 <HAL_RTC_SetAlarm_IT>
 800b246:	4603      	mov	r3, r0
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d001      	beq.n	800b250 <TIMER_IF_StartTimer+0x5c>
  {
    /* Initialization Error */
    Error_Handler();
 800b24c:	f7f5 ff40 	bl	80010d0 <Error_Handler>

  /* USER CODE BEGIN TIMER_IF_StartTimer_2 */

  /* USER CODE END TIMER_IF_StartTimer_2 */

  return ret;
 800b250:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f

  /* USER CODE BEGIN TIMER_IF_StartTimer_3 */

  /* USER CODE END TIMER_IF_StartTimer_3 */
}
 800b254:	4618      	mov	r0, r3
 800b256:	3740      	adds	r7, #64	@ 0x40
 800b258:	46bd      	mov	sp, r7
 800b25a:	bd80      	pop	{r7, pc}
 800b25c:	20006a00 	.word	0x20006a00
 800b260:	200015f8 	.word	0x200015f8

0800b264 <TIMER_IF_StopTimer>:

UTIL_TIMER_Status_t TIMER_IF_StopTimer(void)
{
 800b264:	b580      	push	{r7, lr}
 800b266:	b082      	sub	sp, #8
 800b268:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 800b26a:	2300      	movs	r3, #0
 800b26c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_StopTimer_1 */

  /* USER CODE END TIMER_IF_StopTimer_1 */

  /* Clear RTC Alarm Flag */
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 800b26e:	4b06      	ldr	r3, [pc, #24]	@ (800b288 <TIMER_IF_StopTimer+0x24>)
 800b270:	2201      	movs	r2, #1
 800b272:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Disable the Alarm A interrupt */
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 800b274:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800b278:	4804      	ldr	r0, [pc, #16]	@ (800b28c <TIMER_IF_StopTimer+0x28>)
 800b27a:	f7fa fe21 	bl	8005ec0 <HAL_RTC_DeactivateAlarm>

  /* USER CODE BEGIN TIMER_IF_StopTimer_2 */

  /* USER CODE END TIMER_IF_StopTimer_2 */

  return ret;
 800b27e:	79fb      	ldrb	r3, [r7, #7]

  /* USER CODE BEGIN TIMER_IF_StopTimer_3 */

  /* USER CODE END TIMER_IF_StopTimer_3 */
}
 800b280:	4618      	mov	r0, r3
 800b282:	3708      	adds	r7, #8
 800b284:	46bd      	mov	sp, r7
 800b286:	bd80      	pop	{r7, pc}
 800b288:	46007800 	.word	0x46007800
 800b28c:	200015f8 	.word	0x200015f8

0800b290 <TIMER_IF_SetTimerContext>:

uint32_t TIMER_IF_SetTimerContext(void)
{
 800b290:	b580      	push	{r7, lr}
 800b292:	af00      	add	r7, sp, #0
  /* Store time context */
  RtcTimerContext = GetTimerTicks();
 800b294:	f000 f8a8 	bl	800b3e8 <GetTimerTicks>
 800b298:	4603      	mov	r3, r0
 800b29a:	4a03      	ldr	r2, [pc, #12]	@ (800b2a8 <TIMER_IF_SetTimerContext+0x18>)
 800b29c:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIMER_IF_SetTimerContext_1 */

  TIMER_IF_DBG_PRINTF("TIMER_IF_SetTimerContext=%d\n\r", RtcTimerContext);

  /* Return time context */
  return RtcTimerContext;
 800b29e:	4b02      	ldr	r3, [pc, #8]	@ (800b2a8 <TIMER_IF_SetTimerContext+0x18>)
 800b2a0:	681b      	ldr	r3, [r3, #0]

  /* USER CODE BEGIN TIMER_IF_SetTimerContext_2 */

  /* USER CODE END TIMER_IF_SetTimerContext_2 */
}
 800b2a2:	4618      	mov	r0, r3
 800b2a4:	bd80      	pop	{r7, pc}
 800b2a6:	bf00      	nop
 800b2a8:	20006a00 	.word	0x20006a00

0800b2ac <TIMER_IF_GetTimerContext>:

uint32_t TIMER_IF_GetTimerContext(void)
{
 800b2ac:	b480      	push	{r7}
 800b2ae:	af00      	add	r7, sp, #0
  /* USER CODE END TIMER_IF_GetTimerContext_1 */

  TIMER_IF_DBG_PRINTF("TIMER_IF_GetTimerContext=%d\n\r", RtcTimerContext);

  /* Return time context */
  return RtcTimerContext;
 800b2b0:	4b03      	ldr	r3, [pc, #12]	@ (800b2c0 <TIMER_IF_GetTimerContext+0x14>)
 800b2b2:	681b      	ldr	r3, [r3, #0]

  /* USER CODE BEGIN TIMER_IF_GetTimerContext_2 */

  /* USER CODE END TIMER_IF_GetTimerContext_2 */
}
 800b2b4:	4618      	mov	r0, r3
 800b2b6:	46bd      	mov	sp, r7
 800b2b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2bc:	4770      	bx	lr
 800b2be:	bf00      	nop
 800b2c0:	20006a00 	.word	0x20006a00

0800b2c4 <TIMER_IF_GetTimerElapsedTime>:

uint32_t TIMER_IF_GetTimerElapsedTime(void)
{
 800b2c4:	b580      	push	{r7, lr}
 800b2c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime_1 */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime_1 */

  return ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 800b2c8:	f000 f88e 	bl	800b3e8 <GetTimerTicks>
 800b2cc:	4602      	mov	r2, r0
 800b2ce:	4b02      	ldr	r3, [pc, #8]	@ (800b2d8 <TIMER_IF_GetTimerElapsedTime+0x14>)
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	1ad3      	subs	r3, r2, r3

  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime_2 */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime_2 */
}
 800b2d4:	4618      	mov	r0, r3
 800b2d6:	bd80      	pop	{r7, pc}
 800b2d8:	20006a00 	.word	0x20006a00

0800b2dc <TIMER_IF_GetTimerValue>:

uint32_t TIMER_IF_GetTimerValue(void)
{
 800b2dc:	b580      	push	{r7, lr}
 800b2de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_GetTimerValue_1 */

  /* USER CODE END TIMER_IF_GetTimerValue_1 */

  if (RTC_Initialized == true)
 800b2e0:	4b05      	ldr	r3, [pc, #20]	@ (800b2f8 <TIMER_IF_GetTimerValue+0x1c>)
 800b2e2:	781b      	ldrb	r3, [r3, #0]
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d003      	beq.n	800b2f0 <TIMER_IF_GetTimerValue+0x14>
  {
    return GetTimerTicks();
 800b2e8:	f000 f87e 	bl	800b3e8 <GetTimerTicks>
 800b2ec:	4603      	mov	r3, r0
 800b2ee:	e000      	b.n	800b2f2 <TIMER_IF_GetTimerValue+0x16>
  }
  else
  {
    return 0;
 800b2f0:	2300      	movs	r3, #0
  }

  /* USER CODE BEGIN TIMER_IF_GetTimerValue_2 */

  /* USER CODE END TIMER_IF_GetTimerValue_2 */
}
 800b2f2:	4618      	mov	r0, r3
 800b2f4:	bd80      	pop	{r7, pc}
 800b2f6:	bf00      	nop
 800b2f8:	200069fc 	.word	0x200069fc

0800b2fc <TIMER_IF_GetMinimumTimeout>:

uint32_t TIMER_IF_GetMinimumTimeout(void)
{
 800b2fc:	b480      	push	{r7}
 800b2fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout_1 */

  /* USER CODE END TIMER_IF_GetMinimumTimeout_1 */

  return (MIN_ALARM_DELAY);
 800b300:	2303      	movs	r3, #3

  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout_2 */

  /* USER CODE END TIMER_IF_GetMinimumTimeout_2 */
}
 800b302:	4618      	mov	r0, r3
 800b304:	46bd      	mov	sp, r7
 800b306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b30a:	4770      	bx	lr

0800b30c <TIMER_IF_Convert_ms2Tick>:

uint32_t TIMER_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 800b30c:	b5b0      	push	{r4, r5, r7, lr}
 800b30e:	b082      	sub	sp, #8
 800b310:	af00      	add	r7, sp, #0
 800b312:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick_1 */

  /* USER CODE END TIMER_IF_Convert_ms2Tick_1 */

  return ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 800b314:	6879      	ldr	r1, [r7, #4]
 800b316:	2000      	movs	r0, #0
 800b318:	460a      	mov	r2, r1
 800b31a:	4603      	mov	r3, r0
 800b31c:	0d95      	lsrs	r5, r2, #22
 800b31e:	0294      	lsls	r4, r2, #10
 800b320:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b324:	f04f 0300 	mov.w	r3, #0
 800b328:	4620      	mov	r0, r4
 800b32a:	4629      	mov	r1, r5
 800b32c:	f7f4 ff8e 	bl	800024c <__aeabi_uldivmod>
 800b330:	4602      	mov	r2, r0
 800b332:	460b      	mov	r3, r1
 800b334:	4613      	mov	r3, r2

  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick_2 */

  /* USER CODE END TIMER_IF_Convert_ms2Tick_2 */
}
 800b336:	4618      	mov	r0, r3
 800b338:	3708      	adds	r7, #8
 800b33a:	46bd      	mov	sp, r7
 800b33c:	bdb0      	pop	{r4, r5, r7, pc}

0800b33e <TIMER_IF_Convert_Tick2ms>:

uint32_t TIMER_IF_Convert_Tick2ms(uint32_t tick)
{
 800b33e:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800b342:	b083      	sub	sp, #12
 800b344:	af00      	add	r7, sp, #0
 800b346:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms_1 */

  /* USER CODE END TIMER_IF_Convert_Tick2ms_1 */

  return ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 800b348:	6879      	ldr	r1, [r7, #4]
 800b34a:	2000      	movs	r0, #0
 800b34c:	460c      	mov	r4, r1
 800b34e:	4605      	mov	r5, r0
 800b350:	4620      	mov	r0, r4
 800b352:	4629      	mov	r1, r5
 800b354:	f04f 0a00 	mov.w	sl, #0
 800b358:	f04f 0b00 	mov.w	fp, #0
 800b35c:	ea4f 1b41 	mov.w	fp, r1, lsl #5
 800b360:	ea4b 6bd0 	orr.w	fp, fp, r0, lsr #27
 800b364:	ea4f 1a40 	mov.w	sl, r0, lsl #5
 800b368:	4650      	mov	r0, sl
 800b36a:	4659      	mov	r1, fp
 800b36c:	1b02      	subs	r2, r0, r4
 800b36e:	eb61 0305 	sbc.w	r3, r1, r5
 800b372:	f04f 0000 	mov.w	r0, #0
 800b376:	f04f 0100 	mov.w	r1, #0
 800b37a:	0099      	lsls	r1, r3, #2
 800b37c:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 800b380:	0090      	lsls	r0, r2, #2
 800b382:	4602      	mov	r2, r0
 800b384:	460b      	mov	r3, r1
 800b386:	eb12 0804 	adds.w	r8, r2, r4
 800b38a:	eb43 0905 	adc.w	r9, r3, r5
 800b38e:	f04f 0200 	mov.w	r2, #0
 800b392:	f04f 0300 	mov.w	r3, #0
 800b396:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b39a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b39e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b3a2:	4690      	mov	r8, r2
 800b3a4:	4699      	mov	r9, r3
 800b3a6:	4640      	mov	r0, r8
 800b3a8:	4649      	mov	r1, r9
 800b3aa:	f04f 0200 	mov.w	r2, #0
 800b3ae:	f04f 0300 	mov.w	r3, #0
 800b3b2:	0a82      	lsrs	r2, r0, #10
 800b3b4:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 800b3b8:	0a8b      	lsrs	r3, r1, #10
 800b3ba:	4613      	mov	r3, r2

  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms_2 */

  /* USER CODE END TIMER_IF_Convert_Tick2ms_2 */
}
 800b3bc:	4618      	mov	r0, r3
 800b3be:	370c      	adds	r7, #12
 800b3c0:	46bd      	mov	sp, r7
 800b3c2:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800b3c6:	4770      	bx	lr

0800b3c8 <TIMER_IF_BkUp_Write_MSBticks>:

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds_2 */
}

static void TIMER_IF_BkUp_Write_MSBticks(uint32_t MSBticks)
{
 800b3c8:	b580      	push	{r7, lr}
 800b3ca:	b082      	sub	sp, #8
 800b3cc:	af00      	add	r7, sp, #0
 800b3ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks_1 */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks_1 */

  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 800b3d0:	687a      	ldr	r2, [r7, #4]
 800b3d2:	2102      	movs	r1, #2
 800b3d4:	4803      	ldr	r0, [pc, #12]	@ (800b3e4 <TIMER_IF_BkUp_Write_MSBticks+0x1c>)
 800b3d6:	f7fa feab 	bl	8006130 <HAL_RTCEx_BKUPWrite>

  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks_2 */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks_2 */
}
 800b3da:	bf00      	nop
 800b3dc:	3708      	adds	r7, #8
 800b3de:	46bd      	mov	sp, r7
 800b3e0:	bd80      	pop	{r7, pc}
 800b3e2:	bf00      	nop
 800b3e4:	200015f8 	.word	0x200015f8

0800b3e8 <GetTimerTicks>:

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks_2 */
}

static inline uint32_t GetTimerTicks(void)
{
 800b3e8:	b580      	push	{r7, lr}
 800b3ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GetTimerTicks_1 */

  /* USER CODE END GetTimerTicks_1 */

  return (UINT32_MAX - LL_RTC_TIME_GetSubSecond(RTC));
 800b3ec:	4803      	ldr	r0, [pc, #12]	@ (800b3fc <GetTimerTicks+0x14>)
 800b3ee:	f7ff fecb 	bl	800b188 <LL_RTC_TIME_GetSubSecond>
 800b3f2:	4603      	mov	r3, r0
 800b3f4:	43db      	mvns	r3, r3

  /* USER CODE BEGIN GetTimerTicks_2 */

  /* USER CODE END GetTimerTicks_2 */
}
 800b3f6:	4618      	mov	r0, r3
 800b3f8:	bd80      	pop	{r7, pc}
 800b3fa:	bf00      	nop
 800b3fc:	46007800 	.word	0x46007800

0800b400 <FD_SetStatus>:
  * @param  Flags_bm: Bit mask identifying the caller (1 bit per user)
  * @param  Status:   Action requested (enable or disable flash access)
  * @retval None
  */
void FD_SetStatus(FD_Flash_ctrl_bm_t Flags_bm, FD_FLASH_Status_t Status)
{
 800b400:	b480      	push	{r7}
 800b402:	b087      	sub	sp, #28
 800b404:	af00      	add	r7, sp, #0
 800b406:	6078      	str	r0, [r7, #4]
 800b408:	460b      	mov	r3, r1
 800b40a:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800b40c:	f3ef 8310 	mrs	r3, PRIMASK
 800b410:	613b      	str	r3, [r7, #16]
  return(result);
 800b412:	693b      	ldr	r3, [r7, #16]
  UTILS_ENTER_CRITICAL_SECTION();
 800b414:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b416:	b672      	cpsid	i
}
 800b418:	bf00      	nop

  switch (Status)
 800b41a:	78fb      	ldrb	r3, [r7, #3]
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d00a      	beq.n	800b436 <FD_SetStatus+0x36>
 800b420:	2b01      	cmp	r3, #1
 800b422:	d113      	bne.n	800b44c <FD_SetStatus+0x4c>
  {
    case LL_FLASH_DISABLE:
    {
      FD_Flash_Control_status |= (1u << Flags_bm);
 800b424:	2201      	movs	r2, #1
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	409a      	lsls	r2, r3
 800b42a:	4b0f      	ldr	r3, [pc, #60]	@ (800b468 <FD_SetStatus+0x68>)
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	4313      	orrs	r3, r2
 800b430:	4a0d      	ldr	r2, [pc, #52]	@ (800b468 <FD_SetStatus+0x68>)
 800b432:	6013      	str	r3, [r2, #0]
      break;
 800b434:	e00b      	b.n	800b44e <FD_SetStatus+0x4e>
    }
    case LL_FLASH_ENABLE:
    {
      FD_Flash_Control_status &= ~(1u << Flags_bm);
 800b436:	2201      	movs	r2, #1
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	fa02 f303 	lsl.w	r3, r2, r3
 800b43e:	43da      	mvns	r2, r3
 800b440:	4b09      	ldr	r3, [pc, #36]	@ (800b468 <FD_SetStatus+0x68>)
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	4013      	ands	r3, r2
 800b446:	4a08      	ldr	r2, [pc, #32]	@ (800b468 <FD_SetStatus+0x68>)
 800b448:	6013      	str	r3, [r2, #0]
      break;
 800b44a:	e000      	b.n	800b44e <FD_SetStatus+0x4e>
    }
    default :
    {
      break;
 800b44c:	bf00      	nop
 800b44e:	697b      	ldr	r3, [r7, #20]
 800b450:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	f383 8810 	msr	PRIMASK, r3
}
 800b458:	bf00      	nop
    }
  }

  UTILS_EXIT_CRITICAL_SECTION();
}
 800b45a:	bf00      	nop
 800b45c:	371c      	adds	r7, #28
 800b45e:	46bd      	mov	sp, r7
 800b460:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b464:	4770      	bx	lr
 800b466:	bf00      	nop
 800b468:	20006a04 	.word	0x20006a04

0800b46c <FD_WriteData>:
  * @param  Dest: Address where to write in Flash (128-bit aligned)
  * @param  Payload: Address of data to be written in Flash (32-bit aligned)
  * @retval FD_FlashOp_Status_t: Success or failure of Flash write operation
  */
FD_FlashOp_Status_t FD_WriteData(uint32_t Dest, uint32_t Payload)
{
 800b46c:	b580      	push	{r7, lr}
 800b46e:	b084      	sub	sp, #16
 800b470:	af00      	add	r7, sp, #0
 800b472:	6078      	str	r0, [r7, #4]
 800b474:	6039      	str	r1, [r7, #0]
  FD_FlashOp_Status_t status = FD_FLASHOP_FAILURE;
 800b476:	2301      	movs	r3, #1
 800b478:	73fb      	strb	r3, [r7, #15]

  /* Check if RFTS OR Application allow flash access */
  if ((FD_Flash_Control_status & (1u << FD_FLASHACCESS_RFTS)) &&
 800b47a:	4b12      	ldr	r3, [pc, #72]	@ (800b4c4 <FD_WriteData+0x58>)
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	f003 0302 	and.w	r3, r3, #2
 800b482:	2b00      	cmp	r3, #0
 800b484:	d007      	beq.n	800b496 <FD_WriteData+0x2a>
      (FD_Flash_Control_status & (1u << FD_FLASHACCESS_RFTS_BYPASS)))
 800b486:	4b0f      	ldr	r3, [pc, #60]	@ (800b4c4 <FD_WriteData+0x58>)
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	f003 0304 	and.w	r3, r3, #4
  if ((FD_Flash_Control_status & (1u << FD_FLASHACCESS_RFTS)) &&
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d001      	beq.n	800b496 <FD_WriteData+0x2a>
  { /* Access not allowed */
    return status;
 800b492:	7bfb      	ldrb	r3, [r7, #15]
 800b494:	e011      	b.n	800b4ba <FD_WriteData+0x4e>
  }

  /* Wait for system to allow flash access */
  while (FD_Flash_Control_status & (1u << FD_FLASHACCESS_SYSTEM));
 800b496:	bf00      	nop
 800b498:	4b0a      	ldr	r3, [pc, #40]	@ (800b4c4 <FD_WriteData+0x58>)
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	f003 0301 	and.w	r3, r3, #1
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d1f9      	bne.n	800b498 <FD_WriteData+0x2c>

  if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_QUADWORD, Dest, Payload) == HAL_OK)
 800b4a4:	683a      	ldr	r2, [r7, #0]
 800b4a6:	6879      	ldr	r1, [r7, #4]
 800b4a8:	2001      	movs	r0, #1
 800b4aa:	f7f8 fb83 	bl	8003bb4 <HAL_FLASH_Program>
 800b4ae:	4603      	mov	r3, r0
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d101      	bne.n	800b4b8 <FD_WriteData+0x4c>
  {
    status = FD_FLASHOP_SUCCESS;
 800b4b4:	2300      	movs	r3, #0
 800b4b6:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 800b4b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4ba:	4618      	mov	r0, r3
 800b4bc:	3710      	adds	r7, #16
 800b4be:	46bd      	mov	sp, r7
 800b4c0:	bd80      	pop	{r7, pc}
 800b4c2:	bf00      	nop
 800b4c4:	20006a04 	.word	0x20006a04

0800b4c8 <FD_EraseSectors>:
  * @brief  Erase one sector of Flash
  * @param  Sect: Identifier of the sector to erase
  * @retval FD_FlashOp_Status_t: Success or failure of Flash erase operation
  */
FD_FlashOp_Status_t FD_EraseSectors(uint32_t Sect)
{
 800b4c8:	b580      	push	{r7, lr}
 800b4ca:	b088      	sub	sp, #32
 800b4cc:	af00      	add	r7, sp, #0
 800b4ce:	6078      	str	r0, [r7, #4]
  FD_FlashOp_Status_t status = FD_FLASHOP_FAILURE;
 800b4d0:	2301      	movs	r3, #1
 800b4d2:	77fb      	strb	r3, [r7, #31]
  uint32_t page_error;
  FLASH_EraseInitTypeDef p_erase_init;

  /* Check if LL allows flash access */
  if ((FD_Flash_Control_status & (1u << FD_FLASHACCESS_RFTS)) &&
 800b4d4:	4b16      	ldr	r3, [pc, #88]	@ (800b530 <FD_EraseSectors+0x68>)
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	f003 0302 	and.w	r3, r3, #2
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d007      	beq.n	800b4f0 <FD_EraseSectors+0x28>
      (FD_Flash_Control_status & (1u << FD_FLASHACCESS_RFTS_BYPASS)))
 800b4e0:	4b13      	ldr	r3, [pc, #76]	@ (800b530 <FD_EraseSectors+0x68>)
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	f003 0304 	and.w	r3, r3, #4
  if ((FD_Flash_Control_status & (1u << FD_FLASHACCESS_RFTS)) &&
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d001      	beq.n	800b4f0 <FD_EraseSectors+0x28>
  { /* Access not allowed */
    return status;
 800b4ec:	7ffb      	ldrb	r3, [r7, #31]
 800b4ee:	e01a      	b.n	800b526 <FD_EraseSectors+0x5e>
  }

  /* Wait for system to allow flash access */
  while (FD_Flash_Control_status & (1u << FD_FLASHACCESS_SYSTEM));
 800b4f0:	bf00      	nop
 800b4f2:	4b0f      	ldr	r3, [pc, #60]	@ (800b530 <FD_EraseSectors+0x68>)
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	f003 0301 	and.w	r3, r3, #1
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d1f9      	bne.n	800b4f2 <FD_EraseSectors+0x2a>

  p_erase_init.TypeErase = FLASH_TYPEERASE_PAGES;
 800b4fe:	2302      	movs	r3, #2
 800b500:	60fb      	str	r3, [r7, #12]
  p_erase_init.Page = Sect;
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	613b      	str	r3, [r7, #16]
  p_erase_init.NbPages = 1;
 800b506:	2301      	movs	r3, #1
 800b508:	617b      	str	r3, [r7, #20]

  if (HAL_FLASHEx_Erase(&p_erase_init, &page_error) == HAL_OK)
 800b50a:	f107 0218 	add.w	r2, r7, #24
 800b50e:	f107 030c 	add.w	r3, r7, #12
 800b512:	4611      	mov	r1, r2
 800b514:	4618      	mov	r0, r3
 800b516:	f7f8 fc93 	bl	8003e40 <HAL_FLASHEx_Erase>
 800b51a:	4603      	mov	r3, r0
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d101      	bne.n	800b524 <FD_EraseSectors+0x5c>
  {
    status = FD_FLASHOP_SUCCESS;
 800b520:	2300      	movs	r3, #0
 800b522:	77fb      	strb	r3, [r7, #31]
  }

  return status;
 800b524:	7ffb      	ldrb	r3, [r7, #31]
}
 800b526:	4618      	mov	r0, r3
 800b528:	3720      	adds	r7, #32
 800b52a:	46bd      	mov	sp, r7
 800b52c:	bd80      	pop	{r7, pc}
 800b52e:	bf00      	nop
 800b530:	20006a04 	.word	0x20006a04

0800b534 <FM_Write>:
                  The size is a multiple of 32bits (size = 1 means 32bits)
  * @param  CallbackNode: Pointer to the callback node for storage in list
  * @retval FM_Cmd_Status_t: Status of the Flash Manager module
  */
FM_Cmd_Status_t FM_Write(uint32_t *Src, uint32_t *Dest, int32_t Size, FM_CallbackNode_t *CallbackNode)
{
 800b534:	b580      	push	{r7, lr}
 800b536:	b086      	sub	sp, #24
 800b538:	af00      	add	r7, sp, #0
 800b53a:	60f8      	str	r0, [r7, #12]
 800b53c:	60b9      	str	r1, [r7, #8]
 800b53e:	607a      	str	r2, [r7, #4]
 800b540:	603b      	str	r3, [r7, #0]
  FM_Cmd_Status_t status;

  if (((uint32_t)Dest < FLASH_BASE) || ((uint32_t)Dest > (FLASH_BASE + FLASH_BANK_SIZE))
 800b542:	68bb      	ldr	r3, [r7, #8]
 800b544:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b548:	d331      	bcc.n	800b5ae <FM_Write+0x7a>
 800b54a:	4b37      	ldr	r3, [pc, #220]	@ (800b628 <FM_Write+0xf4>)
 800b54c:	881b      	ldrh	r3, [r3, #0]
 800b54e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b552:	4293      	cmp	r3, r2
 800b554:	d00c      	beq.n	800b570 <FM_Write+0x3c>
 800b556:	4b34      	ldr	r3, [pc, #208]	@ (800b628 <FM_Write+0xf4>)
 800b558:	881b      	ldrh	r3, [r3, #0]
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d005      	beq.n	800b56a <FM_Write+0x36>
 800b55e:	4b32      	ldr	r3, [pc, #200]	@ (800b628 <FM_Write+0xf4>)
 800b560:	881b      	ldrh	r3, [r3, #0]
 800b562:	029b      	lsls	r3, r3, #10
 800b564:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 800b568:	e004      	b.n	800b574 <FM_Write+0x40>
 800b56a:	f04f 6301 	mov.w	r3, #135266304	@ 0x8100000
 800b56e:	e001      	b.n	800b574 <FM_Write+0x40>
 800b570:	f04f 6301 	mov.w	r3, #135266304	@ 0x8100000
 800b574:	68ba      	ldr	r2, [r7, #8]
 800b576:	4293      	cmp	r3, r2
 800b578:	d319      	bcc.n	800b5ae <FM_Write+0x7a>
                                    || (((uint32_t)Dest + Size) > (FLASH_BASE + FLASH_BANK_SIZE)))
 800b57a:	68ba      	ldr	r2, [r7, #8]
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	441a      	add	r2, r3
 800b580:	4b29      	ldr	r3, [pc, #164]	@ (800b628 <FM_Write+0xf4>)
 800b582:	881b      	ldrh	r3, [r3, #0]
 800b584:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800b588:	428b      	cmp	r3, r1
 800b58a:	d00c      	beq.n	800b5a6 <FM_Write+0x72>
 800b58c:	4b26      	ldr	r3, [pc, #152]	@ (800b628 <FM_Write+0xf4>)
 800b58e:	881b      	ldrh	r3, [r3, #0]
 800b590:	2b00      	cmp	r3, #0
 800b592:	d005      	beq.n	800b5a0 <FM_Write+0x6c>
 800b594:	4b24      	ldr	r3, [pc, #144]	@ (800b628 <FM_Write+0xf4>)
 800b596:	881b      	ldrh	r3, [r3, #0]
 800b598:	029b      	lsls	r3, r3, #10
 800b59a:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 800b59e:	e004      	b.n	800b5aa <FM_Write+0x76>
 800b5a0:	f04f 6301 	mov.w	r3, #135266304	@ 0x8100000
 800b5a4:	e001      	b.n	800b5aa <FM_Write+0x76>
 800b5a6:	f04f 6301 	mov.w	r3, #135266304	@ 0x8100000
 800b5aa:	4293      	cmp	r3, r2
 800b5ac:	d206      	bcs.n	800b5bc <FM_Write+0x88>
  {
    LOG_ERROR_SYSTEM("\r\nFM_Write - Destination address not part of the flash");
 800b5ae:	4a1f      	ldr	r2, [pc, #124]	@ (800b62c <FM_Write+0xf8>)
 800b5b0:	2101      	movs	r1, #1
 800b5b2:	2001      	movs	r0, #1
 800b5b4:	f7fe fed2 	bl	800a35c <Log_Module_Print>

    /* Destination address not part of the flash */
    return FM_ERROR;
 800b5b8:	2302      	movs	r3, #2
 800b5ba:	e030      	b.n	800b61e <FM_Write+0xea>
  }

  if (((uint32_t) Src & ALIGNMENT_32) || ((uint32_t) Dest & ALIGNMENT_128))
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	f003 0303 	and.w	r3, r3, #3
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d104      	bne.n	800b5d0 <FM_Write+0x9c>
 800b5c6:	68bb      	ldr	r3, [r7, #8]
 800b5c8:	f003 030f 	and.w	r3, r3, #15
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d006      	beq.n	800b5de <FM_Write+0xaa>
  {
    LOG_ERROR_SYSTEM("\r\nFM_Write - Source or destination address not properly aligned");
 800b5d0:	4a17      	ldr	r2, [pc, #92]	@ (800b630 <FM_Write+0xfc>)
 800b5d2:	2101      	movs	r1, #1
 800b5d4:	2001      	movs	r0, #1
 800b5d6:	f7fe fec1 	bl	800a35c <Log_Module_Print>

    /* Source or destination address not properly aligned */
    return FM_ERROR;
 800b5da:	2302      	movs	r3, #2
 800b5dc:	e01f      	b.n	800b61e <FM_Write+0xea>
  }

  status = FM_CheckFlashManagerState(CallbackNode);
 800b5de:	6838      	ldr	r0, [r7, #0]
 800b5e0:	f000 fa1c 	bl	800ba1c <FM_CheckFlashManagerState>
 800b5e4:	4603      	mov	r3, r0
 800b5e6:	75fb      	strb	r3, [r7, #23]

  if (status == FM_OK)
 800b5e8:	7dfb      	ldrb	r3, [r7, #23]
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d110      	bne.n	800b610 <FM_Write+0xdc>
  { /* Flash manager is available */

    /* Save Write parameters */
    fm_flashop_parameters.writeSrc = Src;
 800b5ee:	4a11      	ldr	r2, [pc, #68]	@ (800b634 <FM_Write+0x100>)
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	6013      	str	r3, [r2, #0]
    fm_flashop_parameters.writeDest = Dest;
 800b5f4:	4a0f      	ldr	r2, [pc, #60]	@ (800b634 <FM_Write+0x100>)
 800b5f6:	68bb      	ldr	r3, [r7, #8]
 800b5f8:	6053      	str	r3, [r2, #4]
    fm_flashop_parameters.writeSize = Size;
 800b5fa:	4a0e      	ldr	r2, [pc, #56]	@ (800b634 <FM_Write+0x100>)
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	6093      	str	r3, [r2, #8]

    fm_flashop = FM_WRITE_OP;
 800b600:	4b0d      	ldr	r3, [pc, #52]	@ (800b638 <FM_Write+0x104>)
 800b602:	2200      	movs	r2, #0
 800b604:	701a      	strb	r2, [r3, #0]

    FM_CurrentBackGroundState = FM_BKGND_NOWINDOW_FLASHOP;
 800b606:	4b0d      	ldr	r3, [pc, #52]	@ (800b63c <FM_Write+0x108>)
 800b608:	2200      	movs	r2, #0
 800b60a:	701a      	strb	r2, [r3, #0]

    /* Window request to be executed in background */
    FM_ProcessRequest();
 800b60c:	f7f5 f91e 	bl	800084c <FM_ProcessRequest>
  }

  LOG_INFO_SYSTEM("\r\nFM_Write - Returned value : %d", status);
 800b610:	7dfb      	ldrb	r3, [r7, #23]
 800b612:	4a0b      	ldr	r2, [pc, #44]	@ (800b640 <FM_Write+0x10c>)
 800b614:	2101      	movs	r1, #1
 800b616:	2000      	movs	r0, #0
 800b618:	f7fe fea0 	bl	800a35c <Log_Module_Print>

  return status;
 800b61c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b61e:	4618      	mov	r0, r3
 800b620:	3718      	adds	r7, #24
 800b622:	46bd      	mov	sp, r7
 800b624:	bd80      	pop	{r7, pc}
 800b626:	bf00      	nop
 800b628:	0bf907a0 	.word	0x0bf907a0
 800b62c:	08030114 	.word	0x08030114
 800b630:	0803014c 	.word	0x0803014c
 800b634:	20006a20 	.word	0x20006a20
 800b638:	20006a1c 	.word	0x20006a1c
 800b63c:	20006a34 	.word	0x20006a34
 800b640:	0803018c 	.word	0x0803018c

0800b644 <FM_Erase>:
  * @param  NbrSect: Number of sector to erase
  * @param  CallbackNode: Pointer to the callback node for storage in list
  * @retval FM_Cmd_Status_t: Status of the Flash Manager module
  */
FM_Cmd_Status_t FM_Erase(uint32_t FirstSect, uint32_t NbrSect, FM_CallbackNode_t *CallbackNode)
{
 800b644:	b580      	push	{r7, lr}
 800b646:	b086      	sub	sp, #24
 800b648:	af00      	add	r7, sp, #0
 800b64a:	60f8      	str	r0, [r7, #12]
 800b64c:	60b9      	str	r1, [r7, #8]
 800b64e:	607a      	str	r2, [r7, #4]
  FM_Cmd_Status_t status;

  if ((FirstSect > FLASH_PAGE_NB) || ((FirstSect + NbrSect) > FLASH_PAGE_NB))
 800b650:	4b2e      	ldr	r3, [pc, #184]	@ (800b70c <FM_Erase+0xc8>)
 800b652:	881b      	ldrh	r3, [r3, #0]
 800b654:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b658:	4293      	cmp	r3, r2
 800b65a:	d00a      	beq.n	800b672 <FM_Erase+0x2e>
 800b65c:	4b2b      	ldr	r3, [pc, #172]	@ (800b70c <FM_Erase+0xc8>)
 800b65e:	881b      	ldrh	r3, [r3, #0]
 800b660:	2b00      	cmp	r3, #0
 800b662:	d004      	beq.n	800b66e <FM_Erase+0x2a>
 800b664:	4b29      	ldr	r3, [pc, #164]	@ (800b70c <FM_Erase+0xc8>)
 800b666:	881b      	ldrh	r3, [r3, #0]
 800b668:	029b      	lsls	r3, r3, #10
 800b66a:	0b5b      	lsrs	r3, r3, #13
 800b66c:	e002      	b.n	800b674 <FM_Erase+0x30>
 800b66e:	2380      	movs	r3, #128	@ 0x80
 800b670:	e000      	b.n	800b674 <FM_Erase+0x30>
 800b672:	2380      	movs	r3, #128	@ 0x80
 800b674:	68fa      	ldr	r2, [r7, #12]
 800b676:	4293      	cmp	r3, r2
 800b678:	d316      	bcc.n	800b6a8 <FM_Erase+0x64>
 800b67a:	68fa      	ldr	r2, [r7, #12]
 800b67c:	68bb      	ldr	r3, [r7, #8]
 800b67e:	441a      	add	r2, r3
 800b680:	4b22      	ldr	r3, [pc, #136]	@ (800b70c <FM_Erase+0xc8>)
 800b682:	881b      	ldrh	r3, [r3, #0]
 800b684:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800b688:	428b      	cmp	r3, r1
 800b68a:	d00a      	beq.n	800b6a2 <FM_Erase+0x5e>
 800b68c:	4b1f      	ldr	r3, [pc, #124]	@ (800b70c <FM_Erase+0xc8>)
 800b68e:	881b      	ldrh	r3, [r3, #0]
 800b690:	2b00      	cmp	r3, #0
 800b692:	d004      	beq.n	800b69e <FM_Erase+0x5a>
 800b694:	4b1d      	ldr	r3, [pc, #116]	@ (800b70c <FM_Erase+0xc8>)
 800b696:	881b      	ldrh	r3, [r3, #0]
 800b698:	029b      	lsls	r3, r3, #10
 800b69a:	0b5b      	lsrs	r3, r3, #13
 800b69c:	e002      	b.n	800b6a4 <FM_Erase+0x60>
 800b69e:	2380      	movs	r3, #128	@ 0x80
 800b6a0:	e000      	b.n	800b6a4 <FM_Erase+0x60>
 800b6a2:	2380      	movs	r3, #128	@ 0x80
 800b6a4:	4293      	cmp	r3, r2
 800b6a6:	d206      	bcs.n	800b6b6 <FM_Erase+0x72>
  {
    LOG_ERROR_SYSTEM("\r\nFM_Erase - Inconsistent request");
 800b6a8:	4a19      	ldr	r2, [pc, #100]	@ (800b710 <FM_Erase+0xcc>)
 800b6aa:	2101      	movs	r1, #1
 800b6ac:	2001      	movs	r0, #1
 800b6ae:	f7fe fe55 	bl	800a35c <Log_Module_Print>

    /* Inconsistent request */
    return FM_ERROR;
 800b6b2:	2302      	movs	r3, #2
 800b6b4:	e026      	b.n	800b704 <FM_Erase+0xc0>
  }

  if (NbrSect == 0)
 800b6b6:	68bb      	ldr	r3, [r7, #8]
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d106      	bne.n	800b6ca <FM_Erase+0x86>
  {
    LOG_ERROR_SYSTEM("\r\nFM_Erase - Inconsistent request");
 800b6bc:	4a14      	ldr	r2, [pc, #80]	@ (800b710 <FM_Erase+0xcc>)
 800b6be:	2101      	movs	r1, #1
 800b6c0:	2001      	movs	r0, #1
 800b6c2:	f7fe fe4b 	bl	800a35c <Log_Module_Print>

    /* Inconsistent request */
    return FM_ERROR;
 800b6c6:	2302      	movs	r3, #2
 800b6c8:	e01c      	b.n	800b704 <FM_Erase+0xc0>
  }

  status = FM_CheckFlashManagerState(CallbackNode);
 800b6ca:	6878      	ldr	r0, [r7, #4]
 800b6cc:	f000 f9a6 	bl	800ba1c <FM_CheckFlashManagerState>
 800b6d0:	4603      	mov	r3, r0
 800b6d2:	75fb      	strb	r3, [r7, #23]

  if (status == FM_OK)
 800b6d4:	7dfb      	ldrb	r3, [r7, #23]
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d10d      	bne.n	800b6f6 <FM_Erase+0xb2>
  { /* Flash manager is available */

    /* Save Erase parameters */
    fm_flashop_parameters.eraseFirstSect = FirstSect;
 800b6da:	4a0e      	ldr	r2, [pc, #56]	@ (800b714 <FM_Erase+0xd0>)
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	60d3      	str	r3, [r2, #12]
    fm_flashop_parameters.eraseNbrSect = NbrSect;
 800b6e0:	4a0c      	ldr	r2, [pc, #48]	@ (800b714 <FM_Erase+0xd0>)
 800b6e2:	68bb      	ldr	r3, [r7, #8]
 800b6e4:	6113      	str	r3, [r2, #16]

    fm_flashop = FM_ERASE_OP;
 800b6e6:	4b0c      	ldr	r3, [pc, #48]	@ (800b718 <FM_Erase+0xd4>)
 800b6e8:	2201      	movs	r2, #1
 800b6ea:	701a      	strb	r2, [r3, #0]

    FM_CurrentBackGroundState = FM_BKGND_NOWINDOW_FLASHOP;
 800b6ec:	4b0b      	ldr	r3, [pc, #44]	@ (800b71c <FM_Erase+0xd8>)
 800b6ee:	2200      	movs	r2, #0
 800b6f0:	701a      	strb	r2, [r3, #0]

    /* Window request to be executed in background */
    FM_ProcessRequest();
 800b6f2:	f7f5 f8ab 	bl	800084c <FM_ProcessRequest>
  }

  LOG_INFO_SYSTEM("\r\nFM_Erase - Returned value : %d", status);
 800b6f6:	7dfb      	ldrb	r3, [r7, #23]
 800b6f8:	4a09      	ldr	r2, [pc, #36]	@ (800b720 <FM_Erase+0xdc>)
 800b6fa:	2101      	movs	r1, #1
 800b6fc:	2000      	movs	r0, #0
 800b6fe:	f7fe fe2d 	bl	800a35c <Log_Module_Print>

  return status;
 800b702:	7dfb      	ldrb	r3, [r7, #23]
}
 800b704:	4618      	mov	r0, r3
 800b706:	3718      	adds	r7, #24
 800b708:	46bd      	mov	sp, r7
 800b70a:	bd80      	pop	{r7, pc}
 800b70c:	0bf907a0 	.word	0x0bf907a0
 800b710:	080301b0 	.word	0x080301b0
 800b714:	20006a20 	.word	0x20006a20
 800b718:	20006a1c 	.word	0x20006a1c
 800b71c:	20006a34 	.word	0x20006a34
 800b720:	080301d4 	.word	0x080301d4

0800b724 <FM_BackgroundProcess>:
  * @brief  Execute Flash Manager background tasks
  * @param  None
  * @retval None
  */
void FM_BackgroundProcess (void)
{
 800b724:	b580      	push	{r7, lr}
 800b726:	b086      	sub	sp, #24
 800b728:	af00      	add	r7, sp, #0
  static uint32_t duration;
  bool flashop_complete = false;
 800b72a:	2300      	movs	r3, #0
 800b72c:	75fb      	strb	r3, [r7, #23]
  FD_FlashOp_Status_t fdReturnValue = FD_FLASHOP_SUCCESS;
 800b72e:	2300      	movs	r3, #0
 800b730:	75bb      	strb	r3, [r7, #22]
  FM_CallbackNode_t *pCbNode = NULL;
 800b732:	2300      	movs	r3, #0
 800b734:	607b      	str	r3, [r7, #4]

  switch (FM_CurrentBackGroundState)
 800b736:	4b9c      	ldr	r3, [pc, #624]	@ (800b9a8 <FM_BackgroundProcess+0x284>)
 800b738:	781b      	ldrb	r3, [r3, #0]
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d002      	beq.n	800b744 <FM_BackgroundProcess+0x20>
 800b73e:	2b01      	cmp	r3, #1
 800b740:	d07a      	beq.n	800b838 <FM_BackgroundProcess+0x114>
    }

    default:
    {
      /* Nothing to do here */
      break;
 800b742:	e0f3      	b.n	800b92c <FM_BackgroundProcess+0x208>
      LOG_INFO_SYSTEM("\r\nFM_BackgroundProcess - Case FM_BKGND_NOWINDOW_FLASHOP");
 800b744:	4a99      	ldr	r2, [pc, #612]	@ (800b9ac <FM_BackgroundProcess+0x288>)
 800b746:	2101      	movs	r1, #1
 800b748:	2000      	movs	r0, #0
 800b74a:	f7fe fe07 	bl	800a35c <Log_Module_Print>
      if (fm_flashop == FM_WRITE_OP)
 800b74e:	4b98      	ldr	r3, [pc, #608]	@ (800b9b0 <FM_BackgroundProcess+0x28c>)
 800b750:	781b      	ldrb	r3, [r3, #0]
 800b752:	2b00      	cmp	r3, #0
 800b754:	d13d      	bne.n	800b7d2 <FM_BackgroundProcess+0xae>
        LOG_INFO_SYSTEM("\r\nFM_BackgroundProcess - Case FM_BKGND_NOWINDOW_FLASHOP - Write operation");
 800b756:	4a97      	ldr	r2, [pc, #604]	@ (800b9b4 <FM_BackgroundProcess+0x290>)
 800b758:	2101      	movs	r1, #1
 800b75a:	2000      	movs	r0, #0
 800b75c:	f7fe fdfe 	bl	800a35c <Log_Module_Print>
        duration = TIME_WINDOW_WRITE_REQUEST;
 800b760:	4b95      	ldr	r3, [pc, #596]	@ (800b9b8 <FM_BackgroundProcess+0x294>)
 800b762:	f240 424c 	movw	r2, #1100	@ 0x44c
 800b766:	601a      	str	r2, [r3, #0]
        FM_CurrentBackGroundState = FM_BKGND_WINDOWED_FLASHOP;
 800b768:	4b8f      	ldr	r3, [pc, #572]	@ (800b9a8 <FM_BackgroundProcess+0x284>)
 800b76a:	2201      	movs	r2, #1
 800b76c:	701a      	strb	r2, [r3, #0]
        HAL_FLASH_Unlock();
 800b76e:	f7f8 fa6b 	bl	8003c48 <HAL_FLASH_Unlock>
        while((fm_flashop_parameters.writeSize > 0) &&
 800b772:	e01d      	b.n	800b7b0 <FM_BackgroundProcess+0x8c>
          fdReturnValue = FD_WriteData((uint32_t) fm_flashop_parameters.writeDest,
 800b774:	4b91      	ldr	r3, [pc, #580]	@ (800b9bc <FM_BackgroundProcess+0x298>)
 800b776:	685b      	ldr	r3, [r3, #4]
 800b778:	461a      	mov	r2, r3
                                       (uint32_t) fm_flashop_parameters.writeSrc);
 800b77a:	4b90      	ldr	r3, [pc, #576]	@ (800b9bc <FM_BackgroundProcess+0x298>)
 800b77c:	681b      	ldr	r3, [r3, #0]
          fdReturnValue = FD_WriteData((uint32_t) fm_flashop_parameters.writeDest,
 800b77e:	4619      	mov	r1, r3
 800b780:	4610      	mov	r0, r2
 800b782:	f7ff fe73 	bl	800b46c <FD_WriteData>
 800b786:	4603      	mov	r3, r0
 800b788:	75bb      	strb	r3, [r7, #22]
          if (fdReturnValue == FD_FLASHOP_SUCCESS)
 800b78a:	7dbb      	ldrb	r3, [r7, #22]
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d10f      	bne.n	800b7b0 <FM_BackgroundProcess+0x8c>
            fm_flashop_parameters.writeDest += FLASH_WRITE_BLOCK_SIZE;
 800b790:	4b8a      	ldr	r3, [pc, #552]	@ (800b9bc <FM_BackgroundProcess+0x298>)
 800b792:	685b      	ldr	r3, [r3, #4]
 800b794:	3310      	adds	r3, #16
 800b796:	4a89      	ldr	r2, [pc, #548]	@ (800b9bc <FM_BackgroundProcess+0x298>)
 800b798:	6053      	str	r3, [r2, #4]
            fm_flashop_parameters.writeSrc += FLASH_WRITE_BLOCK_SIZE;
 800b79a:	4b88      	ldr	r3, [pc, #544]	@ (800b9bc <FM_BackgroundProcess+0x298>)
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	3310      	adds	r3, #16
 800b7a0:	4a86      	ldr	r2, [pc, #536]	@ (800b9bc <FM_BackgroundProcess+0x298>)
 800b7a2:	6013      	str	r3, [r2, #0]
            fm_flashop_parameters.writeSize -= FLASH_WRITE_BLOCK_SIZE;
 800b7a4:	4b85      	ldr	r3, [pc, #532]	@ (800b9bc <FM_BackgroundProcess+0x298>)
 800b7a6:	689b      	ldr	r3, [r3, #8]
 800b7a8:	3b04      	subs	r3, #4
 800b7aa:	461a      	mov	r2, r3
 800b7ac:	4b83      	ldr	r3, [pc, #524]	@ (800b9bc <FM_BackgroundProcess+0x298>)
 800b7ae:	609a      	str	r2, [r3, #8]
        while((fm_flashop_parameters.writeSize > 0) &&
 800b7b0:	4b82      	ldr	r3, [pc, #520]	@ (800b9bc <FM_BackgroundProcess+0x298>)
 800b7b2:	689b      	ldr	r3, [r3, #8]
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	dd02      	ble.n	800b7be <FM_BackgroundProcess+0x9a>
 800b7b8:	7dbb      	ldrb	r3, [r7, #22]
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d0da      	beq.n	800b774 <FM_BackgroundProcess+0x50>
        HAL_FLASH_Lock();
 800b7be:	f7f8 fa65 	bl	8003c8c <HAL_FLASH_Lock>
        if (fm_flashop_parameters.writeSize <= 0)
 800b7c2:	4b7e      	ldr	r3, [pc, #504]	@ (800b9bc <FM_BackgroundProcess+0x298>)
 800b7c4:	689b      	ldr	r3, [r3, #8]
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	f300 80af 	bgt.w	800b92a <FM_BackgroundProcess+0x206>
          flashop_complete = true;
 800b7cc:	2301      	movs	r3, #1
 800b7ce:	75fb      	strb	r3, [r7, #23]
      break;
 800b7d0:	e0ab      	b.n	800b92a <FM_BackgroundProcess+0x206>
        LOG_INFO_SYSTEM("\r\nFM_BackgroundProcess - Case FM_BKGND_NOWINDOW_FLASHOP - Erase operation");
 800b7d2:	4a7b      	ldr	r2, [pc, #492]	@ (800b9c0 <FM_BackgroundProcess+0x29c>)
 800b7d4:	2101      	movs	r1, #1
 800b7d6:	2000      	movs	r0, #0
 800b7d8:	f7fe fdc0 	bl	800a35c <Log_Module_Print>
        duration = TIME_WINDOW_ERASE_REQUEST;
 800b7dc:	4b76      	ldr	r3, [pc, #472]	@ (800b9b8 <FM_BackgroundProcess+0x294>)
 800b7de:	f241 0204 	movw	r2, #4100	@ 0x1004
 800b7e2:	601a      	str	r2, [r3, #0]
        FM_CurrentBackGroundState = FM_BKGND_WINDOWED_FLASHOP;
 800b7e4:	4b70      	ldr	r3, [pc, #448]	@ (800b9a8 <FM_BackgroundProcess+0x284>)
 800b7e6:	2201      	movs	r2, #1
 800b7e8:	701a      	strb	r2, [r3, #0]
        HAL_FLASH_Unlock();
 800b7ea:	f7f8 fa2d 	bl	8003c48 <HAL_FLASH_Unlock>
        while((fm_flashop_parameters.eraseNbrSect > 0) &&
 800b7ee:	e013      	b.n	800b818 <FM_BackgroundProcess+0xf4>
          fdReturnValue = FD_EraseSectors(fm_flashop_parameters.eraseFirstSect);
 800b7f0:	4b72      	ldr	r3, [pc, #456]	@ (800b9bc <FM_BackgroundProcess+0x298>)
 800b7f2:	68db      	ldr	r3, [r3, #12]
 800b7f4:	4618      	mov	r0, r3
 800b7f6:	f7ff fe67 	bl	800b4c8 <FD_EraseSectors>
 800b7fa:	4603      	mov	r3, r0
 800b7fc:	75bb      	strb	r3, [r7, #22]
          if (fdReturnValue == FD_FLASHOP_SUCCESS)
 800b7fe:	7dbb      	ldrb	r3, [r7, #22]
 800b800:	2b00      	cmp	r3, #0
 800b802:	d109      	bne.n	800b818 <FM_BackgroundProcess+0xf4>
            fm_flashop_parameters.eraseNbrSect--;
 800b804:	4b6d      	ldr	r3, [pc, #436]	@ (800b9bc <FM_BackgroundProcess+0x298>)
 800b806:	691b      	ldr	r3, [r3, #16]
 800b808:	3b01      	subs	r3, #1
 800b80a:	4a6c      	ldr	r2, [pc, #432]	@ (800b9bc <FM_BackgroundProcess+0x298>)
 800b80c:	6113      	str	r3, [r2, #16]
            fm_flashop_parameters.eraseFirstSect++;
 800b80e:	4b6b      	ldr	r3, [pc, #428]	@ (800b9bc <FM_BackgroundProcess+0x298>)
 800b810:	68db      	ldr	r3, [r3, #12]
 800b812:	3301      	adds	r3, #1
 800b814:	4a69      	ldr	r2, [pc, #420]	@ (800b9bc <FM_BackgroundProcess+0x298>)
 800b816:	60d3      	str	r3, [r2, #12]
        while((fm_flashop_parameters.eraseNbrSect > 0) &&
 800b818:	4b68      	ldr	r3, [pc, #416]	@ (800b9bc <FM_BackgroundProcess+0x298>)
 800b81a:	691b      	ldr	r3, [r3, #16]
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d002      	beq.n	800b826 <FM_BackgroundProcess+0x102>
 800b820:	7dbb      	ldrb	r3, [r7, #22]
 800b822:	2b00      	cmp	r3, #0
 800b824:	d0e4      	beq.n	800b7f0 <FM_BackgroundProcess+0xcc>
        HAL_FLASH_Lock();
 800b826:	f7f8 fa31 	bl	8003c8c <HAL_FLASH_Lock>
        if (fm_flashop_parameters.eraseNbrSect == 0)
 800b82a:	4b64      	ldr	r3, [pc, #400]	@ (800b9bc <FM_BackgroundProcess+0x298>)
 800b82c:	691b      	ldr	r3, [r3, #16]
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d17b      	bne.n	800b92a <FM_BackgroundProcess+0x206>
          flashop_complete = true;
 800b832:	2301      	movs	r3, #1
 800b834:	75fb      	strb	r3, [r7, #23]
      break;
 800b836:	e078      	b.n	800b92a <FM_BackgroundProcess+0x206>
      LOG_INFO_SYSTEM("\r\nFM_BackgroundProcess - Case FM_BKGND_WINDOWED_FLASHOP");
 800b838:	4a62      	ldr	r2, [pc, #392]	@ (800b9c4 <FM_BackgroundProcess+0x2a0>)
 800b83a:	2101      	movs	r1, #1
 800b83c:	2000      	movs	r0, #0
 800b83e:	f7fe fd8d 	bl	800a35c <Log_Module_Print>
      if (fm_window_granted == false)
 800b842:	4b61      	ldr	r3, [pc, #388]	@ (800b9c8 <FM_BackgroundProcess+0x2a4>)
 800b844:	781b      	ldrb	r3, [r3, #0]
 800b846:	f083 0301 	eor.w	r3, r3, #1
 800b84a:	b2db      	uxtb	r3, r3
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d00b      	beq.n	800b868 <FM_BackgroundProcess+0x144>
        LOG_INFO_SYSTEM("\r\nFM_BackgroundProcess - Case FM_BKGND_WINDOWED_FLASHOP - No time window granted yet, request one");
 800b850:	4a5e      	ldr	r2, [pc, #376]	@ (800b9cc <FM_BackgroundProcess+0x2a8>)
 800b852:	2101      	movs	r1, #1
 800b854:	2000      	movs	r0, #0
 800b856:	f7fe fd81 	bl	800a35c <Log_Module_Print>
        RFTS_ReqWindow(duration, &FM_WindowAllowed_Callback);
 800b85a:	4b57      	ldr	r3, [pc, #348]	@ (800b9b8 <FM_BackgroundProcess+0x294>)
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	495c      	ldr	r1, [pc, #368]	@ (800b9d0 <FM_BackgroundProcess+0x2ac>)
 800b860:	4618      	mov	r0, r3
 800b862:	f000 f983 	bl	800bb6c <RFTS_ReqWindow>
      break;
 800b866:	e061      	b.n	800b92c <FM_BackgroundProcess+0x208>
        LOG_INFO_SYSTEM("\r\nFM_BackgroundProcess - Case FM_BKGND_WINDOWED_FLASHOP - Time window granted");
 800b868:	4a5a      	ldr	r2, [pc, #360]	@ (800b9d4 <FM_BackgroundProcess+0x2b0>)
 800b86a:	2101      	movs	r1, #1
 800b86c:	2000      	movs	r0, #0
 800b86e:	f7fe fd75 	bl	800a35c <Log_Module_Print>
        if (fm_flashop == FM_WRITE_OP)
 800b872:	4b4f      	ldr	r3, [pc, #316]	@ (800b9b0 <FM_BackgroundProcess+0x28c>)
 800b874:	781b      	ldrb	r3, [r3, #0]
 800b876:	2b00      	cmp	r3, #0
 800b878:	d130      	bne.n	800b8dc <FM_BackgroundProcess+0x1b8>
          LOG_INFO_SYSTEM("\r\nFM_BackgroundProcess - Case FM_BKGND_WINDOWED_FLASHOP - Write operation");
 800b87a:	4a57      	ldr	r2, [pc, #348]	@ (800b9d8 <FM_BackgroundProcess+0x2b4>)
 800b87c:	2101      	movs	r1, #1
 800b87e:	2000      	movs	r0, #0
 800b880:	f7fe fd6c 	bl	800a35c <Log_Module_Print>
          HAL_FLASH_Unlock();
 800b884:	f7f8 f9e0 	bl	8003c48 <HAL_FLASH_Unlock>
          while((fm_flashop_parameters.writeSize > 0) &&
 800b888:	e00f      	b.n	800b8aa <FM_BackgroundProcess+0x186>
              fm_flashop_parameters.writeDest += FLASH_WRITE_BLOCK_SIZE;
 800b88a:	4b4c      	ldr	r3, [pc, #304]	@ (800b9bc <FM_BackgroundProcess+0x298>)
 800b88c:	685b      	ldr	r3, [r3, #4]
 800b88e:	3310      	adds	r3, #16
 800b890:	4a4a      	ldr	r2, [pc, #296]	@ (800b9bc <FM_BackgroundProcess+0x298>)
 800b892:	6053      	str	r3, [r2, #4]
              fm_flashop_parameters.writeSrc += FLASH_WRITE_BLOCK_SIZE;
 800b894:	4b49      	ldr	r3, [pc, #292]	@ (800b9bc <FM_BackgroundProcess+0x298>)
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	3310      	adds	r3, #16
 800b89a:	4a48      	ldr	r2, [pc, #288]	@ (800b9bc <FM_BackgroundProcess+0x298>)
 800b89c:	6013      	str	r3, [r2, #0]
              fm_flashop_parameters.writeSize -= FLASH_WRITE_BLOCK_SIZE;
 800b89e:	4b47      	ldr	r3, [pc, #284]	@ (800b9bc <FM_BackgroundProcess+0x298>)
 800b8a0:	689b      	ldr	r3, [r3, #8]
 800b8a2:	3b04      	subs	r3, #4
 800b8a4:	461a      	mov	r2, r3
 800b8a6:	4b45      	ldr	r3, [pc, #276]	@ (800b9bc <FM_BackgroundProcess+0x298>)
 800b8a8:	609a      	str	r2, [r3, #8]
          while((fm_flashop_parameters.writeSize > 0) &&
 800b8aa:	4b44      	ldr	r3, [pc, #272]	@ (800b9bc <FM_BackgroundProcess+0x298>)
 800b8ac:	689b      	ldr	r3, [r3, #8]
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	dd0b      	ble.n	800b8ca <FM_BackgroundProcess+0x1a6>
                (FD_WriteData((uint32_t) fm_flashop_parameters.writeDest,
 800b8b2:	4b42      	ldr	r3, [pc, #264]	@ (800b9bc <FM_BackgroundProcess+0x298>)
 800b8b4:	685b      	ldr	r3, [r3, #4]
 800b8b6:	461a      	mov	r2, r3
                              (uint32_t) fm_flashop_parameters.writeSrc) == FD_FLASHOP_SUCCESS))
 800b8b8:	4b40      	ldr	r3, [pc, #256]	@ (800b9bc <FM_BackgroundProcess+0x298>)
 800b8ba:	681b      	ldr	r3, [r3, #0]
                (FD_WriteData((uint32_t) fm_flashop_parameters.writeDest,
 800b8bc:	4619      	mov	r1, r3
 800b8be:	4610      	mov	r0, r2
 800b8c0:	f7ff fdd4 	bl	800b46c <FD_WriteData>
 800b8c4:	4603      	mov	r3, r0
          while((fm_flashop_parameters.writeSize > 0) &&
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d0df      	beq.n	800b88a <FM_BackgroundProcess+0x166>
          if (fm_flashop_parameters.writeSize <= 0)
 800b8ca:	4b3c      	ldr	r3, [pc, #240]	@ (800b9bc <FM_BackgroundProcess+0x298>)
 800b8cc:	689b      	ldr	r3, [r3, #8]
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	dc01      	bgt.n	800b8d6 <FM_BackgroundProcess+0x1b2>
            flashop_complete = true;
 800b8d2:	2301      	movs	r3, #1
 800b8d4:	75fb      	strb	r3, [r7, #23]
      HAL_FLASH_Lock();
 800b8d6:	f7f8 f9d9 	bl	8003c8c <HAL_FLASH_Lock>
 800b8da:	e020      	b.n	800b91e <FM_BackgroundProcess+0x1fa>
      LOG_INFO_SYSTEM("\r\nFM_BackgroundProcess - Case FM_BKGND_WINDOWED_FLASHOP - Erase operation");
 800b8dc:	4a3f      	ldr	r2, [pc, #252]	@ (800b9dc <FM_BackgroundProcess+0x2b8>)
 800b8de:	2101      	movs	r1, #1
 800b8e0:	2000      	movs	r0, #0
 800b8e2:	f7fe fd3b 	bl	800a35c <Log_Module_Print>
      HAL_FLASH_Unlock();
 800b8e6:	f7f8 f9af 	bl	8003c48 <HAL_FLASH_Unlock>
      if (FD_EraseSectors(fm_flashop_parameters.eraseFirstSect) == FD_FLASHOP_SUCCESS)
 800b8ea:	4b34      	ldr	r3, [pc, #208]	@ (800b9bc <FM_BackgroundProcess+0x298>)
 800b8ec:	68db      	ldr	r3, [r3, #12]
 800b8ee:	4618      	mov	r0, r3
 800b8f0:	f7ff fdea 	bl	800b4c8 <FD_EraseSectors>
 800b8f4:	4603      	mov	r3, r0
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d109      	bne.n	800b90e <FM_BackgroundProcess+0x1ea>
        fm_flashop_parameters.eraseNbrSect--;
 800b8fa:	4b30      	ldr	r3, [pc, #192]	@ (800b9bc <FM_BackgroundProcess+0x298>)
 800b8fc:	691b      	ldr	r3, [r3, #16]
 800b8fe:	3b01      	subs	r3, #1
 800b900:	4a2e      	ldr	r2, [pc, #184]	@ (800b9bc <FM_BackgroundProcess+0x298>)
 800b902:	6113      	str	r3, [r2, #16]
        fm_flashop_parameters.eraseFirstSect++;
 800b904:	4b2d      	ldr	r3, [pc, #180]	@ (800b9bc <FM_BackgroundProcess+0x298>)
 800b906:	68db      	ldr	r3, [r3, #12]
 800b908:	3301      	adds	r3, #1
 800b90a:	4a2c      	ldr	r2, [pc, #176]	@ (800b9bc <FM_BackgroundProcess+0x298>)
 800b90c:	60d3      	str	r3, [r2, #12]
      if (fm_flashop_parameters.eraseNbrSect == 0)
 800b90e:	4b2b      	ldr	r3, [pc, #172]	@ (800b9bc <FM_BackgroundProcess+0x298>)
 800b910:	691b      	ldr	r3, [r3, #16]
 800b912:	2b00      	cmp	r3, #0
 800b914:	d101      	bne.n	800b91a <FM_BackgroundProcess+0x1f6>
        flashop_complete = true;
 800b916:	2301      	movs	r3, #1
 800b918:	75fb      	strb	r3, [r7, #23]
      HAL_FLASH_Lock();
 800b91a:	f7f8 f9b7 	bl	8003c8c <HAL_FLASH_Lock>
        RFTS_RelWindow();
 800b91e:	f000 f9b7 	bl	800bc90 <RFTS_RelWindow>
        fm_window_granted = false;
 800b922:	4b29      	ldr	r3, [pc, #164]	@ (800b9c8 <FM_BackgroundProcess+0x2a4>)
 800b924:	2200      	movs	r2, #0
 800b926:	701a      	strb	r2, [r3, #0]
      break;
 800b928:	e000      	b.n	800b92c <FM_BackgroundProcess+0x208>
      break;
 800b92a:	bf00      	nop
    }
  }

  if (flashop_complete == true)
 800b92c:	7dfb      	ldrb	r3, [r7, #23]
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d05e      	beq.n	800b9f0 <FM_BackgroundProcess+0x2cc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800b932:	f3ef 8310 	mrs	r3, PRIMASK
 800b936:	60bb      	str	r3, [r7, #8]
  return(result);
 800b938:	68bb      	ldr	r3, [r7, #8]
  {
    UTILS_ENTER_CRITICAL_SECTION();
 800b93a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800b93c:	b672      	cpsid	i
}
 800b93e:	bf00      	nop

    /* Release semaphore on flash */
    busy_flash_sem = false;
 800b940:	4b27      	ldr	r3, [pc, #156]	@ (800b9e0 <FM_BackgroundProcess+0x2bc>)
 800b942:	2200      	movs	r2, #0
 800b944:	701a      	strb	r2, [r3, #0]

    /* Set Flash Manager busy */
    flash_manager_busy = false;
 800b946:	4b27      	ldr	r3, [pc, #156]	@ (800b9e4 <FM_BackgroundProcess+0x2c0>)
 800b948:	2200      	movs	r2, #0
 800b94a:	701a      	strb	r2, [r3, #0]
 800b94c:	693b      	ldr	r3, [r7, #16]
 800b94e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	f383 8810 	msr	PRIMASK, r3
}
 800b956:	bf00      	nop

    UTILS_EXIT_CRITICAL_SECTION();

    /* Invoke the running callback if present */
    if (fm_running_cb != NULL)
 800b958:	4b23      	ldr	r3, [pc, #140]	@ (800b9e8 <FM_BackgroundProcess+0x2c4>)
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d00d      	beq.n	800b97c <FM_BackgroundProcess+0x258>
    {
      fm_running_cb(FM_OPERATION_COMPLETE);
 800b960:	4b21      	ldr	r3, [pc, #132]	@ (800b9e8 <FM_BackgroundProcess+0x2c4>)
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	2000      	movs	r0, #0
 800b966:	4798      	blx	r3
    }

    /* notify pending requesters */
    while((LST_is_empty (&fm_cb_pending_list) == false) &&
 800b968:	e008      	b.n	800b97c <FM_BackgroundProcess+0x258>
          (busy_flash_sem == false) && (flash_manager_busy == false))
    {
      LST_remove_head (&fm_cb_pending_list, (tListNode**)&pCbNode);
 800b96a:	1d3b      	adds	r3, r7, #4
 800b96c:	4619      	mov	r1, r3
 800b96e:	481f      	ldr	r0, [pc, #124]	@ (800b9ec <FM_BackgroundProcess+0x2c8>)
 800b970:	f004 fc1b 	bl	80101aa <LST_remove_head>
      pCbNode->Callback(FM_OPERATION_AVAILABLE);
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	689b      	ldr	r3, [r3, #8]
 800b978:	2001      	movs	r0, #1
 800b97a:	4798      	blx	r3
    while((LST_is_empty (&fm_cb_pending_list) == false) &&
 800b97c:	481b      	ldr	r0, [pc, #108]	@ (800b9ec <FM_BackgroundProcess+0x2c8>)
 800b97e:	f004 fb85 	bl	801008c <LST_is_empty>
 800b982:	4603      	mov	r3, r0
          (busy_flash_sem == false) && (flash_manager_busy == false))
 800b984:	2b00      	cmp	r3, #0
 800b986:	d13e      	bne.n	800ba06 <FM_BackgroundProcess+0x2e2>
 800b988:	4b15      	ldr	r3, [pc, #84]	@ (800b9e0 <FM_BackgroundProcess+0x2bc>)
 800b98a:	781b      	ldrb	r3, [r3, #0]
 800b98c:	f083 0301 	eor.w	r3, r3, #1
 800b990:	b2db      	uxtb	r3, r3
    while((LST_is_empty (&fm_cb_pending_list) == false) &&
 800b992:	2b00      	cmp	r3, #0
 800b994:	d037      	beq.n	800ba06 <FM_BackgroundProcess+0x2e2>
          (busy_flash_sem == false) && (flash_manager_busy == false))
 800b996:	4b13      	ldr	r3, [pc, #76]	@ (800b9e4 <FM_BackgroundProcess+0x2c0>)
 800b998:	781b      	ldrb	r3, [r3, #0]
 800b99a:	f083 0301 	eor.w	r3, r3, #1
 800b99e:	b2db      	uxtb	r3, r3
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d1e2      	bne.n	800b96a <FM_BackgroundProcess+0x246>
    LOG_INFO_SYSTEM("\r\nFM_BackgroundProcess - Flash operation not complete yet, request a new time window");

    /* Request a new time window */
    RFTS_ReqWindow(duration, &FM_WindowAllowed_Callback);
  }
}
 800b9a4:	e02f      	b.n	800ba06 <FM_BackgroundProcess+0x2e2>
 800b9a6:	bf00      	nop
 800b9a8:	20006a34 	.word	0x20006a34
 800b9ac:	080301f8 	.word	0x080301f8
 800b9b0:	20006a1c 	.word	0x20006a1c
 800b9b4:	08030230 	.word	0x08030230
 800b9b8:	20006a38 	.word	0x20006a38
 800b9bc:	20006a20 	.word	0x20006a20
 800b9c0:	0803027c 	.word	0x0803027c
 800b9c4:	080302c8 	.word	0x080302c8
 800b9c8:	20006a0a 	.word	0x20006a0a
 800b9cc:	08030300 	.word	0x08030300
 800b9d0:	0800bb49 	.word	0x0800bb49
 800b9d4:	08030364 	.word	0x08030364
 800b9d8:	080303b4 	.word	0x080303b4
 800b9dc:	08030400 	.word	0x08030400
 800b9e0:	20006a08 	.word	0x20006a08
 800b9e4:	20006a09 	.word	0x20006a09
 800b9e8:	20006a18 	.word	0x20006a18
 800b9ec:	20006a0c 	.word	0x20006a0c
    LOG_INFO_SYSTEM("\r\nFM_BackgroundProcess - Flash operation not complete yet, request a new time window");
 800b9f0:	4a07      	ldr	r2, [pc, #28]	@ (800ba10 <FM_BackgroundProcess+0x2ec>)
 800b9f2:	2101      	movs	r1, #1
 800b9f4:	2000      	movs	r0, #0
 800b9f6:	f7fe fcb1 	bl	800a35c <Log_Module_Print>
    RFTS_ReqWindow(duration, &FM_WindowAllowed_Callback);
 800b9fa:	4b06      	ldr	r3, [pc, #24]	@ (800ba14 <FM_BackgroundProcess+0x2f0>)
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	4906      	ldr	r1, [pc, #24]	@ (800ba18 <FM_BackgroundProcess+0x2f4>)
 800ba00:	4618      	mov	r0, r3
 800ba02:	f000 f8b3 	bl	800bb6c <RFTS_ReqWindow>
}
 800ba06:	bf00      	nop
 800ba08:	3718      	adds	r7, #24
 800ba0a:	46bd      	mov	sp, r7
 800ba0c:	bd80      	pop	{r7, pc}
 800ba0e:	bf00      	nop
 800ba10:	0803044c 	.word	0x0803044c
 800ba14:	20006a38 	.word	0x20006a38
 800ba18:	0800bb49 	.word	0x0800bb49

0800ba1c <FM_CheckFlashManagerState>:
  * @brief  Check if the Flash Manager is busy or available
  * @param  CallbackNode: Pointer to the callback node for storage in list
  * @retval FM_Cmd_Status_t: Status of the Flash Manager module
  */
static FM_Cmd_Status_t FM_CheckFlashManagerState(FM_CallbackNode_t *CallbackNode)
{
 800ba1c:	b580      	push	{r7, lr}
 800ba1e:	b08c      	sub	sp, #48	@ 0x30
 800ba20:	af00      	add	r7, sp, #0
 800ba22:	6078      	str	r0, [r7, #4]
  bool fm_process_cmd = false;
 800ba24:	2300      	movs	r3, #0
 800ba26:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  FM_Cmd_Status_t status = FM_ERROR;
 800ba2a:	2302      	movs	r3, #2
 800ba2c:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800ba30:	f3ef 8310 	mrs	r3, PRIMASK
 800ba34:	61fb      	str	r3, [r7, #28]
  return(result);
 800ba36:	69fb      	ldr	r3, [r7, #28]

  /* Check if semaphore on flash is available */
  UTILS_ENTER_CRITICAL_SECTION();
 800ba38:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("cpsid i" : : : "memory");
 800ba3a:	b672      	cpsid	i
}
 800ba3c:	bf00      	nop

  /* Initialize pending list if not done */
  if (fm_cb_pending_list_init == false)
 800ba3e:	4b3d      	ldr	r3, [pc, #244]	@ (800bb34 <FM_CheckFlashManagerState+0x118>)
 800ba40:	781b      	ldrb	r3, [r3, #0]
 800ba42:	f083 0301 	eor.w	r3, r3, #1
 800ba46:	b2db      	uxtb	r3, r3
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d005      	beq.n	800ba58 <FM_CheckFlashManagerState+0x3c>
  {
    LST_init_head(&fm_cb_pending_list);
 800ba4c:	483a      	ldr	r0, [pc, #232]	@ (800bb38 <FM_CheckFlashManagerState+0x11c>)
 800ba4e:	f004 fb0d 	bl	801006c <LST_init_head>
    fm_cb_pending_list_init = true;
 800ba52:	4b38      	ldr	r3, [pc, #224]	@ (800bb34 <FM_CheckFlashManagerState+0x118>)
 800ba54:	2201      	movs	r2, #1
 800ba56:	701a      	strb	r2, [r3, #0]
  }
  /* Check if semaphore on flash is available */
  if (busy_flash_sem == false)
 800ba58:	4b38      	ldr	r3, [pc, #224]	@ (800bb3c <FM_CheckFlashManagerState+0x120>)
 800ba5a:	781b      	ldrb	r3, [r3, #0]
 800ba5c:	f083 0301 	eor.w	r3, r3, #1
 800ba60:	b2db      	uxtb	r3, r3
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d014      	beq.n	800ba90 <FM_CheckFlashManagerState+0x74>
  { /* Check if Flash Manager is already busy */
    if (flash_manager_busy == false)
 800ba66:	4b36      	ldr	r3, [pc, #216]	@ (800bb40 <FM_CheckFlashManagerState+0x124>)
 800ba68:	781b      	ldrb	r3, [r3, #0]
 800ba6a:	f083 0301 	eor.w	r3, r3, #1
 800ba6e:	b2db      	uxtb	r3, r3
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d009      	beq.n	800ba88 <FM_CheckFlashManagerState+0x6c>
    {
      busy_flash_sem = true; /* Get semaphore on flash */
 800ba74:	4b31      	ldr	r3, [pc, #196]	@ (800bb3c <FM_CheckFlashManagerState+0x120>)
 800ba76:	2201      	movs	r2, #1
 800ba78:	701a      	strb	r2, [r3, #0]
      flash_manager_busy = true; /* Set Flash Manager busy */
 800ba7a:	4b31      	ldr	r3, [pc, #196]	@ (800bb40 <FM_CheckFlashManagerState+0x124>)
 800ba7c:	2201      	movs	r2, #1
 800ba7e:	701a      	strb	r2, [r3, #0]
      fm_process_cmd = true;
 800ba80:	2301      	movs	r3, #1
 800ba82:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800ba86:	e006      	b.n	800ba96 <FM_CheckFlashManagerState+0x7a>
    }
    else
    {
      fm_process_cmd = false;
 800ba88:	2300      	movs	r3, #0
 800ba8a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800ba8e:	e002      	b.n	800ba96 <FM_CheckFlashManagerState+0x7a>
    }
  }
  else
  {
    fm_process_cmd = false;
 800ba90:	2300      	movs	r3, #0
 800ba92:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800ba96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba98:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ba9a:	69bb      	ldr	r3, [r7, #24]
 800ba9c:	f383 8810 	msr	PRIMASK, r3
}
 800baa0:	bf00      	nop
  }
  UTILS_EXIT_CRITICAL_SECTION();

  if (fm_process_cmd == false)
 800baa2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800baa6:	f083 0301 	eor.w	r3, r3, #1
 800baaa:	b2db      	uxtb	r3, r3
 800baac:	2b00      	cmp	r3, #0
 800baae:	d00f      	beq.n	800bad0 <FM_CheckFlashManagerState+0xb4>
  { /* Flash manager busy */

    /* Append callback to the pending list */
    if ((CallbackNode != NULL) && (CallbackNode->Callback != NULL))
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d008      	beq.n	800bac8 <FM_CheckFlashManagerState+0xac>
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	689b      	ldr	r3, [r3, #8]
 800baba:	2b00      	cmp	r3, #0
 800babc:	d004      	beq.n	800bac8 <FM_CheckFlashManagerState+0xac>
    {
      LST_insert_tail(&fm_cb_pending_list, &(CallbackNode->NodeList));
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	4619      	mov	r1, r3
 800bac2:	481d      	ldr	r0, [pc, #116]	@ (800bb38 <FM_CheckFlashManagerState+0x11c>)
 800bac4:	f004 fb2a 	bl	801011c <LST_insert_tail>
    }

    status = FM_BUSY;
 800bac8:	2301      	movs	r3, #1
 800baca:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 800bace:	e02b      	b.n	800bb28 <FM_CheckFlashManagerState+0x10c>
  }
  else
  { /* Flash manager is available */

    if ((CallbackNode != NULL) && (CallbackNode->Callback != NULL))
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d015      	beq.n	800bb02 <FM_CheckFlashManagerState+0xe6>
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	689b      	ldr	r3, [r3, #8]
 800bada:	2b00      	cmp	r3, #0
 800badc:	d011      	beq.n	800bb02 <FM_CheckFlashManagerState+0xe6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800bade:	f3ef 8310 	mrs	r3, PRIMASK
 800bae2:	613b      	str	r3, [r7, #16]
  return(result);
 800bae4:	693b      	ldr	r3, [r7, #16]
    {
      UTILS_ENTER_CRITICAL_SECTION();
 800bae6:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 800bae8:	b672      	cpsid	i
}
 800baea:	bf00      	nop

      fm_running_cb = CallbackNode->Callback;
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	689b      	ldr	r3, [r3, #8]
 800baf0:	4a14      	ldr	r2, [pc, #80]	@ (800bb44 <FM_CheckFlashManagerState+0x128>)
 800baf2:	6013      	str	r3, [r2, #0]
 800baf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800baf6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800baf8:	697b      	ldr	r3, [r7, #20]
 800bafa:	f383 8810 	msr	PRIMASK, r3
}
 800bafe:	bf00      	nop
    {
 800bb00:	e00f      	b.n	800bb22 <FM_CheckFlashManagerState+0x106>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800bb02:	f3ef 8310 	mrs	r3, PRIMASK
 800bb06:	60bb      	str	r3, [r7, #8]
  return(result);
 800bb08:	68bb      	ldr	r3, [r7, #8]

      UTILS_EXIT_CRITICAL_SECTION();
    }
    else
    {
      UTILS_ENTER_CRITICAL_SECTION();
 800bb0a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800bb0c:	b672      	cpsid	i
}
 800bb0e:	bf00      	nop

      fm_running_cb = NULL;
 800bb10:	4b0c      	ldr	r3, [pc, #48]	@ (800bb44 <FM_CheckFlashManagerState+0x128>)
 800bb12:	2200      	movs	r2, #0
 800bb14:	601a      	str	r2, [r3, #0]
 800bb16:	6a3b      	ldr	r3, [r7, #32]
 800bb18:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	f383 8810 	msr	PRIMASK, r3
}
 800bb20:	bf00      	nop

      UTILS_EXIT_CRITICAL_SECTION();
    }

    status = FM_OK;
 800bb22:	2300      	movs	r3, #0
 800bb24:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  }
  return status;
 800bb28:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
}
 800bb2c:	4618      	mov	r0, r3
 800bb2e:	3730      	adds	r7, #48	@ 0x30
 800bb30:	46bd      	mov	sp, r7
 800bb32:	bd80      	pop	{r7, pc}
 800bb34:	20006a14 	.word	0x20006a14
 800bb38:	20006a0c 	.word	0x20006a0c
 800bb3c:	20006a08 	.word	0x20006a08
 800bb40:	20006a09 	.word	0x20006a09
 800bb44:	20006a18 	.word	0x20006a18

0800bb48 <FM_WindowAllowed_Callback>:
  * @brief  Callback called by RF Timing Synchro module when a time window is available
  * @param  None
  * @retval None
  */
static void FM_WindowAllowed_Callback(void)
{
 800bb48:	b580      	push	{r7, lr}
 800bb4a:	af00      	add	r7, sp, #0
  fm_window_granted = true;
 800bb4c:	4b05      	ldr	r3, [pc, #20]	@ (800bb64 <FM_WindowAllowed_Callback+0x1c>)
 800bb4e:	2201      	movs	r2, #1
 800bb50:	701a      	strb	r2, [r3, #0]

  LOG_INFO_SYSTEM("\r\nFM_WindowAllowed_Callback");
 800bb52:	4a05      	ldr	r2, [pc, #20]	@ (800bb68 <FM_WindowAllowed_Callback+0x20>)
 800bb54:	2101      	movs	r1, #1
 800bb56:	2000      	movs	r0, #0
 800bb58:	f7fe fc00 	bl	800a35c <Log_Module_Print>

  /* Flash operation to be executed in background */
  FM_ProcessRequest();
 800bb5c:	f7f4 fe76 	bl	800084c <FM_ProcessRequest>
}
 800bb60:	bf00      	nop
 800bb62:	bd80      	pop	{r7, pc}
 800bb64:	20006a0a 	.word	0x20006a0a
 800bb68:	080304a4 	.word	0x080304a4

0800bb6c <RFTS_ReqWindow>:
  * @param  duration: Duration in us of the time window requested
  * @param  Callback: Callback to be called when time window is allocated
  * @retval RFTS_Cmd_Status_t: Success or failure of the window request
  */
RFTS_Cmd_Status_t RFTS_ReqWindow(uint32_t Duration, void (*Callback)(void))
{
 800bb6c:	b580      	push	{r7, lr}
 800bb6e:	b09a      	sub	sp, #104	@ 0x68
 800bb70:	af02      	add	r7, sp, #8
 800bb72:	6078      	str	r0, [r7, #4]
 800bb74:	6039      	str	r1, [r7, #0]
#if (DISABLE_RFTS_EXT_EVNT_HNDLR == 0u)
  extrnl_evnt_st_t extrnl_evnt_config;
  bool req_pending = false;
 800bb76:	2300      	movs	r3, #0
 800bb78:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

  if (Callback == NULL)
 800bb7c:	683b      	ldr	r3, [r7, #0]
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d101      	bne.n	800bb86 <RFTS_ReqWindow+0x1a>
  { /* Prevent use of uninitialized callback */
    return RFTS_WINDOW_REQ_FAILED;
 800bb82:	2301      	movs	r3, #1
 800bb84:	e071      	b.n	800bc6a <RFTS_ReqWindow+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800bb86:	f3ef 8310 	mrs	r3, PRIMASK
 800bb8a:	653b      	str	r3, [r7, #80]	@ 0x50
  return(result);
 800bb8c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
  }

  /* Check no request is already pending */
  UTILS_ENTER_CRITICAL_SECTION();
 800bb8e:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("cpsid i" : : : "memory");
 800bb90:	b672      	cpsid	i
}
 800bb92:	bf00      	nop
  if (rfts_window_req_pending == true)
 800bb94:	4b37      	ldr	r3, [pc, #220]	@ (800bc74 <RFTS_ReqWindow+0x108>)
 800bb96:	781b      	ldrb	r3, [r3, #0]
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d003      	beq.n	800bba4 <RFTS_ReqWindow+0x38>
  {
    req_pending = true;
 800bb9c:	2301      	movs	r3, #1
 800bb9e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800bba2:	e002      	b.n	800bbaa <RFTS_ReqWindow+0x3e>
  }
  else
  {
    rfts_window_req_pending = true;
 800bba4:	4b33      	ldr	r3, [pc, #204]	@ (800bc74 <RFTS_ReqWindow+0x108>)
 800bba6:	2201      	movs	r2, #1
 800bba8:	701a      	strb	r2, [r3, #0]
 800bbaa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bbac:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bbae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bbb0:	f383 8810 	msr	PRIMASK, r3
}
 800bbb4:	bf00      	nop
  }
  UTILS_EXIT_CRITICAL_SECTION();
  if (req_pending == true)
 800bbb6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d001      	beq.n	800bbc2 <RFTS_ReqWindow+0x56>
  { /* A window request is already pending */
    return RFTS_WINDOW_REQ_FAILED;
 800bbbe:	2301      	movs	r3, #1
 800bbc0:	e053      	b.n	800bc6a <RFTS_ReqWindow+0xfe>
  }

  /* Register requester's callback */
  req_callback = Callback;
 800bbc2:	4a2d      	ldr	r2, [pc, #180]	@ (800bc78 <RFTS_ReqWindow+0x10c>)
 800bbc4:	683b      	ldr	r3, [r7, #0]
 800bbc6:	6013      	str	r3, [r2, #0]

  /* Submit request to Firmware Link Layer */
  extrnl_evnt_config.deadline = 0;
 800bbc8:	f04f 0200 	mov.w	r2, #0
 800bbcc:	f04f 0300 	mov.w	r3, #0
 800bbd0:	e9c7 2302 	strd	r2, r3, [r7, #8]
  extrnl_evnt_config.strt_min = 0;
 800bbd4:	f04f 0200 	mov.w	r2, #0
 800bbd8:	f04f 0300 	mov.w	r3, #0
 800bbdc:	e9c7 2304 	strd	r2, r3, [r7, #16]
  extrnl_evnt_config.strt_max = 0;
 800bbe0:	f04f 0200 	mov.w	r2, #0
 800bbe4:	f04f 0300 	mov.w	r3, #0
 800bbe8:	e9c7 2306 	strd	r2, r3, [r7, #24]
  extrnl_evnt_config.durn_min = Duration;
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	623b      	str	r3, [r7, #32]
  extrnl_evnt_config.durn_max = 0;
 800bbf0:	2300      	movs	r3, #0
 800bbf2:	627b      	str	r3, [r7, #36]	@ 0x24
  extrnl_evnt_config.prdc_intrvl = 0;
 800bbf4:	2300      	movs	r3, #0
 800bbf6:	62bb      	str	r3, [r7, #40]	@ 0x28
  extrnl_evnt_config.priority = PRIORITY_DEFAULT;
 800bbf8:	2300      	movs	r3, #0
 800bbfa:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  extrnl_evnt_config.blocked = STATE_NOT_BLOCKED;
 800bbfe:	2305      	movs	r3, #5
 800bc00:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  extrnl_evnt_config.ptr_priv = NULL;
 800bc04:	2300      	movs	r3, #0
 800bc06:	633b      	str	r3, [r7, #48]	@ 0x30
  extrnl_evnt_config.evnt_strtd_cbk = &event_started_callback;
 800bc08:	4b1c      	ldr	r3, [pc, #112]	@ (800bc7c <RFTS_ReqWindow+0x110>)
 800bc0a:	637b      	str	r3, [r7, #52]	@ 0x34
  extrnl_evnt_config.evnt_blckd_cbk = NULL;
 800bc0c:	2300      	movs	r3, #0
 800bc0e:	63bb      	str	r3, [r7, #56]	@ 0x38
  extrnl_evnt_config.evnt_abortd_cbk = NULL;
 800bc10:	2300      	movs	r3, #0
 800bc12:	63fb      	str	r3, [r7, #60]	@ 0x3c

  UTIL_TIMER_Create(&rfts_timer,
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	4a1a      	ldr	r2, [pc, #104]	@ (800bc80 <RFTS_ReqWindow+0x114>)
 800bc18:	fba2 2303 	umull	r2, r3, r2, r3
 800bc1c:	0999      	lsrs	r1, r3, #6
 800bc1e:	2300      	movs	r3, #0
 800bc20:	9300      	str	r3, [sp, #0]
 800bc22:	4b18      	ldr	r3, [pc, #96]	@ (800bc84 <RFTS_ReqWindow+0x118>)
 800bc24:	2200      	movs	r2, #0
 800bc26:	4818      	ldr	r0, [pc, #96]	@ (800bc88 <RFTS_ReqWindow+0x11c>)
 800bc28:	f004 fee4 	bl	80109f4 <UTIL_TIMER_Create>
                    (Duration/1000),
                    UTIL_TIMER_ONESHOT,
                    &RFTS_Timeout_Callback,
                    NULL);

  ext_event_handler = evnt_schdlr_rgstr_gnrc_evnt(&extrnl_evnt_config);
 800bc2c:	f107 0308 	add.w	r3, r7, #8
 800bc30:	4618      	mov	r0, r3
 800bc32:	f007 f884 	bl	8012d3e <evnt_schdlr_rgstr_gnrc_evnt>
 800bc36:	4603      	mov	r3, r0
 800bc38:	4a14      	ldr	r2, [pc, #80]	@ (800bc8c <RFTS_ReqWindow+0x120>)
 800bc3a:	6013      	str	r3, [r2, #0]
  if (ext_event_handler == NULL)
 800bc3c:	4b13      	ldr	r3, [pc, #76]	@ (800bc8c <RFTS_ReqWindow+0x120>)
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d111      	bne.n	800bc68 <RFTS_ReqWindow+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800bc44:	f3ef 8310 	mrs	r3, PRIMASK
 800bc48:	647b      	str	r3, [r7, #68]	@ 0x44
  return(result);
 800bc4a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
  {
    UTILS_ENTER_CRITICAL_SECTION();
 800bc4c:	657b      	str	r3, [r7, #84]	@ 0x54
  __ASM volatile ("cpsid i" : : : "memory");
 800bc4e:	b672      	cpsid	i
}
 800bc50:	bf00      	nop
    rfts_window_req_pending = false;
 800bc52:	4b08      	ldr	r3, [pc, #32]	@ (800bc74 <RFTS_ReqWindow+0x108>)
 800bc54:	2200      	movs	r2, #0
 800bc56:	701a      	strb	r2, [r3, #0]
 800bc58:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bc5a:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bc5c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bc5e:	f383 8810 	msr	PRIMASK, r3
}
 800bc62:	bf00      	nop
    UTILS_EXIT_CRITICAL_SECTION();

    return RFTS_WINDOW_REQ_FAILED;
 800bc64:	2301      	movs	r3, #1
 800bc66:	e000      	b.n	800bc6a <RFTS_ReqWindow+0xfe>
  }
#endif /* (DISABLE_RFTS_EXT_EVNT_HNDLR == 0u) */

  return RFTS_CMD_OK;
 800bc68:	2300      	movs	r3, #0
}
 800bc6a:	4618      	mov	r0, r3
 800bc6c:	3760      	adds	r7, #96	@ 0x60
 800bc6e:	46bd      	mov	sp, r7
 800bc70:	bd80      	pop	{r7, pc}
 800bc72:	bf00      	nop
 800bc74:	20006a40 	.word	0x20006a40
 800bc78:	20006a3c 	.word	0x20006a3c
 800bc7c:	0800bd55 	.word	0x0800bd55
 800bc80:	10624dd3 	.word	0x10624dd3
 800bc84:	0800bd19 	.word	0x0800bd19
 800bc88:	20006a44 	.word	0x20006a44
 800bc8c:	20006a5c 	.word	0x20006a5c

0800bc90 <RFTS_RelWindow>:
  * @brief  Execute necessary tasks to allow the time window to be released
  * @param  None
  * @retval RFTS_Cmd_Status_t: Success or error in the window release procedure
  */
RFTS_Cmd_Status_t RFTS_RelWindow(void)
{
 800bc90:	b580      	push	{r7, lr}
 800bc92:	b084      	sub	sp, #16
 800bc94:	af00      	add	r7, sp, #0
#if (DISABLE_RFTS_EXT_EVNT_HNDLR == 0u)
  RFTS_Cmd_Status_t status;

  /* Stop RFTS module window overrun control timer */
  UTIL_TIMER_Stop(&rfts_timer);
 800bc96:	4814      	ldr	r0, [pc, #80]	@ (800bce8 <RFTS_RelWindow+0x58>)
 800bc98:	f004 ff50 	bl	8010b3c <UTIL_TIMER_Stop>

  /* Inform Firmware Link Layer that time window can be released */
  if (evnt_schdlr_gnrc_evnt_cmplt(ext_event_handler) == 0)
 800bc9c:	4b13      	ldr	r3, [pc, #76]	@ (800bcec <RFTS_RelWindow+0x5c>)
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	4618      	mov	r0, r3
 800bca2:	f007 f8b0 	bl	8012e06 <evnt_schdlr_gnrc_evnt_cmplt>
 800bca6:	4603      	mov	r3, r0
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d102      	bne.n	800bcb2 <RFTS_RelWindow+0x22>
  {
    status = RFTS_CMD_OK;
 800bcac:	2300      	movs	r3, #0
 800bcae:	73fb      	strb	r3, [r7, #15]
 800bcb0:	e001      	b.n	800bcb6 <RFTS_RelWindow+0x26>
  }
  else
  {
    status = RFTS_WINDOW_REL_ERROR;
 800bcb2:	2302      	movs	r3, #2
 800bcb4:	73fb      	strb	r3, [r7, #15]
  }

  /* Forbid flash operation */
  FD_SetStatus(FD_FLASHACCESS_RFTS, LL_FLASH_DISABLE);
 800bcb6:	2101      	movs	r1, #1
 800bcb8:	2001      	movs	r0, #1
 800bcba:	f7ff fba1 	bl	800b400 <FD_SetStatus>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800bcbe:	f3ef 8310 	mrs	r3, PRIMASK
 800bcc2:	603b      	str	r3, [r7, #0]
  return(result);
 800bcc4:	683b      	ldr	r3, [r7, #0]

  UTILS_ENTER_CRITICAL_SECTION();
 800bcc6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("cpsid i" : : : "memory");
 800bcc8:	b672      	cpsid	i
}
 800bcca:	bf00      	nop
  rfts_window_req_pending = false;
 800bccc:	4b08      	ldr	r3, [pc, #32]	@ (800bcf0 <RFTS_RelWindow+0x60>)
 800bcce:	2200      	movs	r2, #0
 800bcd0:	701a      	strb	r2, [r3, #0]
 800bcd2:	68bb      	ldr	r3, [r7, #8]
 800bcd4:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	f383 8810 	msr	PRIMASK, r3
}
 800bcdc:	bf00      	nop
  UTILS_EXIT_CRITICAL_SECTION();

  return status;
 800bcde:	7bfb      	ldrb	r3, [r7, #15]
#else
  return RFTS_CMD_OK;
#endif /* (DISABLE_RFTS_EXT_EVNT_HNDLR == 0u) */
}
 800bce0:	4618      	mov	r0, r3
 800bce2:	3710      	adds	r7, #16
 800bce4:	46bd      	mov	sp, r7
 800bce6:	bd80      	pop	{r7, pc}
 800bce8:	20006a44 	.word	0x20006a44
 800bcec:	20006a5c 	.word	0x20006a5c
 800bcf0:	20006a40 	.word	0x20006a40

0800bcf4 <RFTS_WindowAllowed_Callback>:
  * @note   This callback is supposed to be called under interrupt
  * @param  None
  * @retval None
  */
static void RFTS_WindowAllowed_Callback(void)
{
 800bcf4:	b580      	push	{r7, lr}
 800bcf6:	af00      	add	r7, sp, #0
  /* Allow flash operation */
  FD_SetStatus(FD_FLASHACCESS_RFTS, LL_FLASH_ENABLE);
 800bcf8:	2100      	movs	r1, #0
 800bcfa:	2001      	movs	r0, #1
 800bcfc:	f7ff fb80 	bl	800b400 <FD_SetStatus>

  /* Start timer preventing window overrun */
  UTIL_TIMER_Start(&rfts_timer);
 800bd00:	4803      	ldr	r0, [pc, #12]	@ (800bd10 <RFTS_WindowAllowed_Callback+0x1c>)
 800bd02:	f004 fead 	bl	8010a60 <UTIL_TIMER_Start>

  /* Call back requester to inform time window is available */
  req_callback();
 800bd06:	4b03      	ldr	r3, [pc, #12]	@ (800bd14 <RFTS_WindowAllowed_Callback+0x20>)
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	4798      	blx	r3
}
 800bd0c:	bf00      	nop
 800bd0e:	bd80      	pop	{r7, pc}
 800bd10:	20006a44 	.word	0x20006a44
 800bd14:	20006a3c 	.word	0x20006a3c

0800bd18 <RFTS_Timeout_Callback>:
  * @note   This callback is supposed to be called under interrupt
  * @param  None
  * @retval None
  */
static void RFTS_Timeout_Callback(void* Argument)
{
 800bd18:	b580      	push	{r7, lr}
 800bd1a:	b086      	sub	sp, #24
 800bd1c:	af00      	add	r7, sp, #0
 800bd1e:	6078      	str	r0, [r7, #4]
  /* Forbid flash operation */
  FD_SetStatus(FD_FLASHACCESS_RFTS, LL_FLASH_DISABLE);
 800bd20:	2101      	movs	r1, #1
 800bd22:	2001      	movs	r0, #1
 800bd24:	f7ff fb6c 	bl	800b400 <FD_SetStatus>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800bd28:	f3ef 8310 	mrs	r3, PRIMASK
 800bd2c:	60fb      	str	r3, [r7, #12]
  return(result);
 800bd2e:	68fb      	ldr	r3, [r7, #12]

  UTILS_ENTER_CRITICAL_SECTION();
 800bd30:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800bd32:	b672      	cpsid	i
}
 800bd34:	bf00      	nop
  rfts_window_req_pending = false;
 800bd36:	4b06      	ldr	r3, [pc, #24]	@ (800bd50 <RFTS_Timeout_Callback+0x38>)
 800bd38:	2200      	movs	r2, #0
 800bd3a:	701a      	strb	r2, [r3, #0]
 800bd3c:	697b      	ldr	r3, [r7, #20]
 800bd3e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bd40:	693b      	ldr	r3, [r7, #16]
 800bd42:	f383 8810 	msr	PRIMASK, r3
}
 800bd46:	bf00      	nop
  UTILS_EXIT_CRITICAL_SECTION();
}
 800bd48:	bf00      	nop
 800bd4a:	3718      	adds	r7, #24
 800bd4c:	46bd      	mov	sp, r7
 800bd4e:	bd80      	pop	{r7, pc}
 800bd50:	20006a40 	.word	0x20006a40

0800bd54 <event_started_callback>:

static uint32_t event_started_callback(ext_evnt_hndl_t evnt_hndl, uint32_t slot_durn, void* priv_data_ptr)
{
 800bd54:	b580      	push	{r7, lr}
 800bd56:	b084      	sub	sp, #16
 800bd58:	af00      	add	r7, sp, #0
 800bd5a:	60f8      	str	r0, [r7, #12]
 800bd5c:	60b9      	str	r1, [r7, #8]
 800bd5e:	607a      	str	r2, [r7, #4]
  RFTS_WindowAllowed_Callback();
 800bd60:	f7ff ffc8 	bl	800bcf4 <RFTS_WindowAllowed_Callback>
  return 0;
 800bd64:	2300      	movs	r3, #0
}
 800bd66:	4618      	mov	r0, r3
 800bd68:	3710      	adds	r7, #16
 800bd6a:	46bd      	mov	sp, r7
 800bd6c:	bd80      	pop	{r7, pc}
	...

0800bd70 <SNVMA_Init>:
 */
static inline void InvokeBufferCallback (const uint8_t NvmId, const SNVMA_Callback_Status_t CallbackStatus);

/* Functions Definition ------------------------------------------------------*/
SNVMA_Cmd_Status_t SNVMA_Init (const uint32_t * p_NvmStartAddress)
{
 800bd70:	b590      	push	{r4, r7, lr}
 800bd72:	b08f      	sub	sp, #60	@ 0x3c
 800bd74:	af00      	add	r7, sp, #0
 800bd76:	6078      	str	r0, [r7, #4]
  SNVMA_Cmd_Status_t error = SNVMA_ERROR_NOK;
 800bd78:	2301      	movs	r3, #1
 800bd7a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

  uint16_t bankNbr = 0x00;
 800bd7e:	2300      	movs	r3, #0
 800bd80:	86bb      	strh	r3, [r7, #52]	@ 0x34
  uint16_t bankConfIdx = 0x00;
 800bd82:	2300      	movs	r3, #0
 800bd84:	867b      	strh	r3, [r7, #50]	@ 0x32
  uint32_t bankPrint = 0x00;
 800bd86:	2300      	movs	r3, #0
 800bd88:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t nvmOffset = 0x00;
 800bd8a:	2300      	movs	r3, #0
 800bd8c:	623b      	str	r3, [r7, #32]
  uint32_t addressOffset = 0x00;
 800bd8e:	2300      	movs	r3, #0
 800bd90:	62bb      	str	r3, [r7, #40]	@ 0x28

  CRCCTRL_Cmd_Status_t crcCtrlStatus = CRCCTRL_UNKNOWN;
 800bd92:	2308      	movs	r3, #8
 800bd94:	77fb      	strb	r3, [r7, #31]

  SNVMA_BankElt_t * p_currentRestoreBank = NULL;
 800bd96:	2300      	movs	r3, #0
 800bd98:	61bb      	str	r3, [r7, #24]

  /* Check if not already initialized */
  if (SNVMA_ModuleInit == TRUE)
 800bd9a:	4b99      	ldr	r3, [pc, #612]	@ (800c000 <SNVMA_Init+0x290>)
 800bd9c:	781b      	ldrb	r3, [r3, #0]
 800bd9e:	2b01      	cmp	r3, #1
 800bda0:	d103      	bne.n	800bdaa <SNVMA_Init+0x3a>
  {
    error = SNVMA_ERROR_ALREADY_INIT;
 800bda2:	2303      	movs	r3, #3
 800bda4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800bda8:	e218      	b.n	800c1dc <SNVMA_Init+0x46c>
  }
  /* Check NVM Null pointer */
  else if (p_NvmStartAddress == NULL)
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d103      	bne.n	800bdb8 <SNVMA_Init+0x48>
  {
    error = SNVMA_ERROR_NVM_NULL;
 800bdb0:	2306      	movs	r3, #6
 800bdb2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800bdb6:	e211      	b.n	800c1dc <SNVMA_Init+0x46c>
  }
  /* Check 128bits alignment */
  else if (((uint32_t)p_NvmStartAddress & SNVMA_MASK_ALIGNMENT_128) != 0x00000000)
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	f003 030f 	and.w	r3, r3, #15
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d003      	beq.n	800bdca <SNVMA_Init+0x5a>
  {
    error = SNVMA_ERROR_NVM_NOT_ALIGNED;
 800bdc2:	2307      	movs	r3, #7
 800bdc4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800bdc8:	e208      	b.n	800c1dc <SNVMA_Init+0x46c>
  }
  /* Check that configuration will not overlap flash */
  else if ((SNVMA_NUMBER_OF_SECTOR_NEEDED > FLASH_PAGE_NB) ||
 800bdca:	4b8e      	ldr	r3, [pc, #568]	@ (800c004 <SNVMA_Init+0x294>)
 800bdcc:	881b      	ldrh	r3, [r3, #0]
 800bdce:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800bdd2:	4293      	cmp	r3, r2
 800bdd4:	d009      	beq.n	800bdea <SNVMA_Init+0x7a>
 800bdd6:	4b8b      	ldr	r3, [pc, #556]	@ (800c004 <SNVMA_Init+0x294>)
 800bdd8:	881b      	ldrh	r3, [r3, #0]
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d005      	beq.n	800bdea <SNVMA_Init+0x7a>
 800bdde:	4b89      	ldr	r3, [pc, #548]	@ (800c004 <SNVMA_Init+0x294>)
 800bde0:	881b      	ldrh	r3, [r3, #0]
 800bde2:	029b      	lsls	r3, r3, #10
 800bde4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800bde8:	d319      	bcc.n	800be1e <SNVMA_Init+0xae>
           ((uint32_t)p_NvmStartAddress + (SNVMA_NUMBER_OF_SECTOR_NEEDED * FLASH_PAGE_SIZE) >
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	f503 4280 	add.w	r2, r3, #16384	@ 0x4000
            (FLASH_BASE_NS + FLASH_SIZE)))
 800bdf0:	4b84      	ldr	r3, [pc, #528]	@ (800c004 <SNVMA_Init+0x294>)
 800bdf2:	881b      	ldrh	r3, [r3, #0]
 800bdf4:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800bdf8:	428b      	cmp	r3, r1
 800bdfa:	d00c      	beq.n	800be16 <SNVMA_Init+0xa6>
 800bdfc:	4b81      	ldr	r3, [pc, #516]	@ (800c004 <SNVMA_Init+0x294>)
 800bdfe:	881b      	ldrh	r3, [r3, #0]
 800be00:	2b00      	cmp	r3, #0
 800be02:	d005      	beq.n	800be10 <SNVMA_Init+0xa0>
 800be04:	4b7f      	ldr	r3, [pc, #508]	@ (800c004 <SNVMA_Init+0x294>)
 800be06:	881b      	ldrh	r3, [r3, #0]
 800be08:	029b      	lsls	r3, r3, #10
 800be0a:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 800be0e:	e004      	b.n	800be1a <SNVMA_Init+0xaa>
 800be10:	f04f 6301 	mov.w	r3, #135266304	@ 0x8100000
 800be14:	e001      	b.n	800be1a <SNVMA_Init+0xaa>
 800be16:	f04f 6301 	mov.w	r3, #135266304	@ 0x8100000
  else if ((SNVMA_NUMBER_OF_SECTOR_NEEDED > FLASH_PAGE_NB) ||
 800be1a:	4293      	cmp	r3, r2
 800be1c:	d203      	bcs.n	800be26 <SNVMA_Init+0xb6>
  {
    error = SNVMA_ERROR_NVM_OVERLAP_FLASH;
 800be1e:	2308      	movs	r3, #8
 800be20:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800be24:	e1da      	b.n	800c1dc <SNVMA_Init+0x46c>
  }
  else
  {
    /* Init the crc handle */
    crcCtrlStatus = CRCCTRL_RegisterHandle(&SNVMA_Handle);
 800be26:	4878      	ldr	r0, [pc, #480]	@ (800c008 <SNVMA_Init+0x298>)
 800be28:	f003 fa88 	bl	800f33c <CRCCTRL_RegisterHandle>
 800be2c:	4603      	mov	r3, r0
 800be2e:	77fb      	strb	r3, [r7, #31]

    if ((CRCCTRL_OK != crcCtrlStatus) &&
 800be30:	7ffb      	ldrb	r3, [r7, #31]
 800be32:	2b00      	cmp	r3, #0
 800be34:	d006      	beq.n	800be44 <SNVMA_Init+0xd4>
 800be36:	7ffb      	ldrb	r3, [r7, #31]
 800be38:	2b03      	cmp	r3, #3
 800be3a:	d003      	beq.n	800be44 <SNVMA_Init+0xd4>
        (CRCCTRL_HANDLE_ALREADY_REGISTERED != crcCtrlStatus))
    {
      error = SNVMA_ERROR_CRC_INIT;
 800be3c:	230c      	movs	r3, #12
 800be3e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800be42:	e1cb      	b.n	800c1dc <SNVMA_Init+0x46c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800be44:	f3ef 8310 	mrs	r3, PRIMASK
 800be48:	613b      	str	r3, [r7, #16]
  return(result);
 800be4a:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      /* Enter critical section */
      UTILS_ENTER_CRITICAL_SECTION();
 800be4c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800be4e:	b672      	cpsid	i
}
 800be50:	bf00      	nop

      /* Prepare flash manager callback */
      SNVMA_FlashCallback.Callback = SNVMA_FlashManagerCallback;
 800be52:	4b6e      	ldr	r3, [pc, #440]	@ (800c00c <SNVMA_Init+0x29c>)
 800be54:	4a6e      	ldr	r2, [pc, #440]	@ (800c010 <SNVMA_Init+0x2a0>)
 800be56:	609a      	str	r2, [r3, #8]

      /* Compute nvm implantation offset */
      nvmOffset = (uint32_t)p_NvmStartAddress - FLASH_BASE_NS;
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	f103 4378 	add.w	r3, r3, #4160749568	@ 0xf8000000
 800be5e:	623b      	str	r3, [r7, #32]

      /* Ensure all variable are initialized: Banks */
      memset ((void *)SNVMA_BankConfiguration,
 800be60:	2228      	movs	r2, #40	@ 0x28
 800be62:	2100      	movs	r1, #0
 800be64:	486b      	ldr	r0, [pc, #428]	@ (800c014 <SNVMA_Init+0x2a4>)
 800be66:	f023 faa3 	bl	802f3b0 <memset>
              0x00,
              (sizeof(SNVMA_BankElt_t) * SNVMA_NUMBER_OF_BANKS));

      /* For each NVM */
      for (uint8_t nvmIdx = 0x00;
 800be6a:	2300      	movs	r3, #0
 800be6c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800be70:	e19b      	b.n	800c1aa <SNVMA_Init+0x43a>
           (nvmIdx < SNVMA_NVM_NUMBER) && (error == SNVMA_ERROR_NOK);
           nvmIdx++)
      {
        /* Updates levels for bank numbers and bank foot print */
        bankNbr += SNVMA_NvmConfiguration[nvmIdx].BankNumber;
 800be72:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800be76:	4a68      	ldr	r2, [pc, #416]	@ (800c018 <SNVMA_Init+0x2a8>)
 800be78:	019b      	lsls	r3, r3, #6
 800be7a:	4413      	add	r3, r2
 800be7c:	781b      	ldrb	r3, [r3, #0]
 800be7e:	461a      	mov	r2, r3
 800be80:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800be82:	4413      	add	r3, r2
 800be84:	86bb      	strh	r3, [r7, #52]	@ 0x34
        bankPrint += (SNVMA_NvmConfiguration[nvmIdx].BankSize * SNVMA_NvmConfiguration[nvmIdx].BankNumber);
 800be86:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800be8a:	4a63      	ldr	r2, [pc, #396]	@ (800c018 <SNVMA_Init+0x2a8>)
 800be8c:	019b      	lsls	r3, r3, #6
 800be8e:	4413      	add	r3, r2
 800be90:	3301      	adds	r3, #1
 800be92:	781b      	ldrb	r3, [r3, #0]
 800be94:	4619      	mov	r1, r3
 800be96:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800be9a:	4a5f      	ldr	r2, [pc, #380]	@ (800c018 <SNVMA_Init+0x2a8>)
 800be9c:	019b      	lsls	r3, r3, #6
 800be9e:	4413      	add	r3, r2
 800bea0:	781b      	ldrb	r3, [r3, #0]
 800bea2:	fb01 f303 	mul.w	r3, r1, r3
 800bea6:	461a      	mov	r2, r3
 800bea8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800beaa:	4413      	add	r3, r2
 800beac:	62fb      	str	r3, [r7, #44]	@ 0x2c

        /* Check the Bank configuration, Is number of banks ok ? */
        if ((SNVMA_NvmConfiguration[nvmIdx].BankNumber < SNVMA_MIN_NUMBER_BANK) ||
 800beae:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800beb2:	4a59      	ldr	r2, [pc, #356]	@ (800c018 <SNVMA_Init+0x2a8>)
 800beb4:	019b      	lsls	r3, r3, #6
 800beb6:	4413      	add	r3, r2
 800beb8:	781b      	ldrb	r3, [r3, #0]
 800beba:	2b01      	cmp	r3, #1
 800bebc:	d902      	bls.n	800bec4 <SNVMA_Init+0x154>
 800bebe:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800bec0:	2b02      	cmp	r3, #2
 800bec2:	d903      	bls.n	800becc <SNVMA_Init+0x15c>
            (bankNbr > SNVMA_NUMBER_OF_BANKS))
        {
          error = SNVMA_ERROR_BANK_NUMBER;
 800bec4:	230d      	movs	r3, #13
 800bec6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800beca:	e169      	b.n	800c1a0 <SNVMA_Init+0x430>
        }
        /* Is bank size ok ? */
        else if ((SNVMA_NvmConfiguration[nvmIdx].BankSize == 0x00) ||
 800becc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bed0:	4a51      	ldr	r2, [pc, #324]	@ (800c018 <SNVMA_Init+0x2a8>)
 800bed2:	019b      	lsls	r3, r3, #6
 800bed4:	4413      	add	r3, r2
 800bed6:	3301      	adds	r3, #1
 800bed8:	781b      	ldrb	r3, [r3, #0]
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d002      	beq.n	800bee4 <SNVMA_Init+0x174>
 800bede:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bee0:	2b02      	cmp	r3, #2
 800bee2:	d903      	bls.n	800beec <SNVMA_Init+0x17c>
                 (bankPrint > SNVMA_NUMBER_OF_SECTOR_NEEDED))
        {
          error = SNVMA_ERROR_BANK_SIZE;
 800bee4:	230e      	movs	r3, #14
 800bee6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800beea:	e159      	b.n	800c1a0 <SNVMA_Init+0x430>
        }
        else
        {
          p_currentRestoreBank = NULL;
 800beec:	2300      	movs	r3, #0
 800beee:	61bb      	str	r3, [r7, #24]

          /* Get the first bank element of our NVM - Will be used as the bank list of the NVM */
          SNVMA_NvmConfiguration[nvmIdx].p_BankList = &SNVMA_BankConfiguration[bankConfIdx];
 800bef0:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 800bef2:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 800bef6:	4613      	mov	r3, r2
 800bef8:	009b      	lsls	r3, r3, #2
 800befa:	4413      	add	r3, r2
 800befc:	009b      	lsls	r3, r3, #2
 800befe:	4a45      	ldr	r2, [pc, #276]	@ (800c014 <SNVMA_Init+0x2a4>)
 800bf00:	441a      	add	r2, r3
 800bf02:	4845      	ldr	r0, [pc, #276]	@ (800c018 <SNVMA_Init+0x2a8>)
 800bf04:	018b      	lsls	r3, r1, #6
 800bf06:	4403      	add	r3, r0
 800bf08:	3304      	adds	r3, #4
 800bf0a:	601a      	str	r2, [r3, #0]

          /* For each bank ... */
          for (uint8_t bankIdx = 0x00;
 800bf0c:	2300      	movs	r3, #0
 800bf0e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800bf12:	e13a      	b.n	800c18a <SNVMA_Init+0x41a>
              bankIdx < SNVMA_NvmConfiguration[nvmIdx].BankNumber;
              bankIdx++)
          {
            /* ... compute bank addresses */
            SNVMA_BankConfiguration[bankConfIdx].p_StartAddr = (uint32_t *)((uint32_t)p_NvmStartAddress + addressOffset);
 800bf14:	687a      	ldr	r2, [r7, #4]
 800bf16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf18:	4413      	add	r3, r2
 800bf1a:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 800bf1c:	4618      	mov	r0, r3
 800bf1e:	493d      	ldr	r1, [pc, #244]	@ (800c014 <SNVMA_Init+0x2a4>)
 800bf20:	4613      	mov	r3, r2
 800bf22:	009b      	lsls	r3, r3, #2
 800bf24:	4413      	add	r3, r2
 800bf26:	009b      	lsls	r3, r3, #2
 800bf28:	440b      	add	r3, r1
 800bf2a:	6018      	str	r0, [r3, #0]

            /* Shall this bank be the one in use */
            if (IsHeaderOk (SNVMA_BankConfiguration[bankConfIdx].p_StartAddr,
 800bf2c:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 800bf2e:	4939      	ldr	r1, [pc, #228]	@ (800c014 <SNVMA_Init+0x2a4>)
 800bf30:	4613      	mov	r3, r2
 800bf32:	009b      	lsls	r3, r3, #2
 800bf34:	4413      	add	r3, r2
 800bf36:	009b      	lsls	r3, r3, #2
 800bf38:	440b      	add	r3, r1
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800bf40:	4611      	mov	r1, r2
 800bf42:	4618      	mov	r0, r3
 800bf44:	f001 fd1e 	bl	800d984 <IsHeaderOk>
 800bf48:	4603      	mov	r3, r0
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d118      	bne.n	800bf80 <SNVMA_Init+0x210>
                            nvmIdx) == FALSE)
            {
              /* Erase the bank */
              while (EraseSector (((nvmOffset + addressOffset) / FLASH_PAGE_SIZE),
 800bf4e:	bf00      	nop
 800bf50:	6a3a      	ldr	r2, [r7, #32]
 800bf52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf54:	4413      	add	r3, r2
 800bf56:	0b5a      	lsrs	r2, r3, #13
                                  SNVMA_NvmConfiguration[nvmIdx].BankSize) == FALSE);
 800bf58:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bf5c:	492e      	ldr	r1, [pc, #184]	@ (800c018 <SNVMA_Init+0x2a8>)
 800bf5e:	019b      	lsls	r3, r3, #6
 800bf60:	440b      	add	r3, r1
 800bf62:	3301      	adds	r3, #1
 800bf64:	781b      	ldrb	r3, [r3, #0]
              while (EraseSector (((nvmOffset + addressOffset) / FLASH_PAGE_SIZE),
 800bf66:	4619      	mov	r1, r3
 800bf68:	4610      	mov	r0, r2
 800bf6a:	f001 fef5 	bl	800dd58 <EraseSector>
 800bf6e:	4603      	mov	r3, r0
                                  SNVMA_NvmConfiguration[nvmIdx].BankSize) == FALSE);
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d0ed      	beq.n	800bf50 <SNVMA_Init+0x1e0>

              LOG_ERROR_SYSTEM("\r\nSNVMA_Init - Corrupted banks erases [IsHeaderOk]");
 800bf74:	4a29      	ldr	r2, [pc, #164]	@ (800c01c <SNVMA_Init+0x2ac>)
 800bf76:	2101      	movs	r1, #1
 800bf78:	2001      	movs	r0, #1
 800bf7a:	f7fe f9ef 	bl	800a35c <Log_Module_Print>
 800bf7e:	e09e      	b.n	800c0be <SNVMA_Init+0x34e>
            }
            /* Check if CRC OK */
            else if (IsCrcOk (SNVMA_BankConfiguration[bankConfIdx].p_StartAddr) == FALSE)
 800bf80:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 800bf82:	4924      	ldr	r1, [pc, #144]	@ (800c014 <SNVMA_Init+0x2a4>)
 800bf84:	4613      	mov	r3, r2
 800bf86:	009b      	lsls	r3, r3, #2
 800bf88:	4413      	add	r3, r2
 800bf8a:	009b      	lsls	r3, r3, #2
 800bf8c:	440b      	add	r3, r1
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	4618      	mov	r0, r3
 800bf92:	f001 fd91 	bl	800dab8 <IsCrcOk>
 800bf96:	4603      	mov	r3, r0
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d118      	bne.n	800bfce <SNVMA_Init+0x25e>
            {
              /* Erase the bank */
              while (EraseSector (((nvmOffset + addressOffset) / FLASH_PAGE_SIZE),
 800bf9c:	bf00      	nop
 800bf9e:	6a3a      	ldr	r2, [r7, #32]
 800bfa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bfa2:	4413      	add	r3, r2
 800bfa4:	0b5a      	lsrs	r2, r3, #13
                                  SNVMA_NvmConfiguration[nvmIdx].BankSize) == FALSE);
 800bfa6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bfaa:	491b      	ldr	r1, [pc, #108]	@ (800c018 <SNVMA_Init+0x2a8>)
 800bfac:	019b      	lsls	r3, r3, #6
 800bfae:	440b      	add	r3, r1
 800bfb0:	3301      	adds	r3, #1
 800bfb2:	781b      	ldrb	r3, [r3, #0]
              while (EraseSector (((nvmOffset + addressOffset) / FLASH_PAGE_SIZE),
 800bfb4:	4619      	mov	r1, r3
 800bfb6:	4610      	mov	r0, r2
 800bfb8:	f001 fece 	bl	800dd58 <EraseSector>
 800bfbc:	4603      	mov	r3, r0
                                  SNVMA_NvmConfiguration[nvmIdx].BankSize) == FALSE);
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d0ed      	beq.n	800bf9e <SNVMA_Init+0x22e>

              LOG_ERROR_SYSTEM("\r\nSNVMA_Init - Corrupted banks erases [IsCrcOk]");
 800bfc2:	4a17      	ldr	r2, [pc, #92]	@ (800c020 <SNVMA_Init+0x2b0>)
 800bfc4:	2101      	movs	r1, #1
 800bfc6:	2001      	movs	r0, #1
 800bfc8:	f7fe f9c8 	bl	800a35c <Log_Module_Print>
 800bfcc:	e077      	b.n	800c0be <SNVMA_Init+0x34e>
            }
            /* Valid bank */
            else
            {
              /* Compute buffer addresses in the bank */
              if (SNVMA_NvmConfiguration[nvmIdx].p_BankForRestore == NULL)
 800bfce:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bfd2:	4a11      	ldr	r2, [pc, #68]	@ (800c018 <SNVMA_Init+0x2a8>)
 800bfd4:	019b      	lsls	r3, r3, #6
 800bfd6:	4413      	add	r3, r2
 800bfd8:	330c      	adds	r3, #12
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d121      	bne.n	800c024 <SNVMA_Init+0x2b4>
              {
                SNVMA_NvmConfiguration[nvmIdx].p_BankForRestore = &SNVMA_BankConfiguration[bankConfIdx];
 800bfe0:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 800bfe2:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 800bfe6:	4613      	mov	r3, r2
 800bfe8:	009b      	lsls	r3, r3, #2
 800bfea:	4413      	add	r3, r2
 800bfec:	009b      	lsls	r3, r3, #2
 800bfee:	4a09      	ldr	r2, [pc, #36]	@ (800c014 <SNVMA_Init+0x2a4>)
 800bff0:	441a      	add	r2, r3
 800bff2:	4809      	ldr	r0, [pc, #36]	@ (800c018 <SNVMA_Init+0x2a8>)
 800bff4:	018b      	lsls	r3, r1, #6
 800bff6:	4403      	add	r3, r0
 800bff8:	330c      	adds	r3, #12
 800bffa:	601a      	str	r2, [r3, #0]
 800bffc:	e05f      	b.n	800c0be <SNVMA_Init+0x34e>
 800bffe:	bf00      	nop
 800c000:	20006a60 	.word	0x20006a60
 800c004:	0bf907a0 	.word	0x0bf907a0
 800c008:	20000040 	.word	0x20000040
 800c00c:	20006a80 	.word	0x20006a80
 800c010:	0800c94d 	.word	0x0800c94d
 800c014:	20006a90 	.word	0x20006a90
 800c018:	20000068 	.word	0x20000068
 800c01c:	080304c0 	.word	0x080304c0
 800c020:	080304f4 	.word	0x080304f4
              }
              else
              {
                /* Get the current bank in use for this NVM */
                p_currentRestoreBank = SNVMA_NvmConfiguration[nvmIdx].p_BankForRestore;
 800c024:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c028:	4a6f      	ldr	r2, [pc, #444]	@ (800c1e8 <SNVMA_Init+0x478>)
 800c02a:	019b      	lsls	r3, r3, #6
 800c02c:	4413      	add	r3, r2
 800c02e:	330c      	adds	r3, #12
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	61bb      	str	r3, [r7, #24]

                /* Already have a valid bank in use, determine which bank is the newest */
                SNVMA_NvmConfiguration[nvmIdx].p_BankForRestore = GetNewestBank (p_currentRestoreBank,
                                                                                &SNVMA_BankConfiguration[bankConfIdx]);
 800c034:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
                SNVMA_NvmConfiguration[nvmIdx].p_BankForRestore = GetNewestBank (p_currentRestoreBank,
 800c036:	4613      	mov	r3, r2
 800c038:	009b      	lsls	r3, r3, #2
 800c03a:	4413      	add	r3, r2
 800c03c:	009b      	lsls	r3, r3, #2
 800c03e:	4a6b      	ldr	r2, [pc, #428]	@ (800c1ec <SNVMA_Init+0x47c>)
 800c040:	4413      	add	r3, r2
 800c042:	f897 4027 	ldrb.w	r4, [r7, #39]	@ 0x27
 800c046:	4619      	mov	r1, r3
 800c048:	69b8      	ldr	r0, [r7, #24]
 800c04a:	f001 fe61 	bl	800dd10 <GetNewestBank>
 800c04e:	4602      	mov	r2, r0
 800c050:	4965      	ldr	r1, [pc, #404]	@ (800c1e8 <SNVMA_Init+0x478>)
 800c052:	01a3      	lsls	r3, r4, #6
 800c054:	440b      	add	r3, r1
 800c056:	330c      	adds	r3, #12
 800c058:	601a      	str	r2, [r3, #0]

                if (SNVMA_NvmConfiguration[nvmIdx].p_BankForRestore == p_currentRestoreBank)
 800c05a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c05e:	4a62      	ldr	r2, [pc, #392]	@ (800c1e8 <SNVMA_Init+0x478>)
 800c060:	019b      	lsls	r3, r3, #6
 800c062:	4413      	add	r3, r2
 800c064:	330c      	adds	r3, #12
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	69ba      	ldr	r2, [r7, #24]
 800c06a:	429a      	cmp	r2, r3
 800c06c:	d113      	bne.n	800c096 <SNVMA_Init+0x326>
                {
                  /* Erase &SNVMA_BankConfiguration[bankConfIdx] */
                  while (EraseSector (((nvmOffset + addressOffset) / FLASH_PAGE_SIZE),
 800c06e:	bf00      	nop
 800c070:	6a3a      	ldr	r2, [r7, #32]
 800c072:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c074:	4413      	add	r3, r2
 800c076:	0b5a      	lsrs	r2, r3, #13
                                      SNVMA_NvmConfiguration[nvmIdx].BankSize) == FALSE);
 800c078:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c07c:	495a      	ldr	r1, [pc, #360]	@ (800c1e8 <SNVMA_Init+0x478>)
 800c07e:	019b      	lsls	r3, r3, #6
 800c080:	440b      	add	r3, r1
 800c082:	3301      	adds	r3, #1
 800c084:	781b      	ldrb	r3, [r3, #0]
                  while (EraseSector (((nvmOffset + addressOffset) / FLASH_PAGE_SIZE),
 800c086:	4619      	mov	r1, r3
 800c088:	4610      	mov	r0, r2
 800c08a:	f001 fe65 	bl	800dd58 <EraseSector>
 800c08e:	4603      	mov	r3, r0
                                      SNVMA_NvmConfiguration[nvmIdx].BankSize) == FALSE);
 800c090:	2b00      	cmp	r3, #0
 800c092:	d0ed      	beq.n	800c070 <SNVMA_Init+0x300>
 800c094:	e013      	b.n	800c0be <SNVMA_Init+0x34e>
                }
                else
                {
                  /* Erase p_currentRestoreBank */
                  while (EraseSector ((((uint32_t)p_currentRestoreBank->p_StartAddr - FLASH_BASE_NS) / FLASH_PAGE_SIZE),
 800c096:	bf00      	nop
 800c098:	69bb      	ldr	r3, [r7, #24]
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	f103 4378 	add.w	r3, r3, #4160749568	@ 0xf8000000
 800c0a0:	0b5a      	lsrs	r2, r3, #13
                                      SNVMA_NvmConfiguration[nvmIdx].BankSize) == FALSE);
 800c0a2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c0a6:	4950      	ldr	r1, [pc, #320]	@ (800c1e8 <SNVMA_Init+0x478>)
 800c0a8:	019b      	lsls	r3, r3, #6
 800c0aa:	440b      	add	r3, r1
 800c0ac:	3301      	adds	r3, #1
 800c0ae:	781b      	ldrb	r3, [r3, #0]
                  while (EraseSector ((((uint32_t)p_currentRestoreBank->p_StartAddr - FLASH_BASE_NS) / FLASH_PAGE_SIZE),
 800c0b0:	4619      	mov	r1, r3
 800c0b2:	4610      	mov	r0, r2
 800c0b4:	f001 fe50 	bl	800dd58 <EraseSector>
 800c0b8:	4603      	mov	r3, r0
                                      SNVMA_NvmConfiguration[nvmIdx].BankSize) == FALSE);
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d0ec      	beq.n	800c098 <SNVMA_Init+0x328>
                }
              }
            }

            /* Determine the next write bank, is there any bank for restore ? */
            if (SNVMA_NvmConfiguration[nvmIdx].p_BankForRestore == NULL)
 800c0be:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c0c2:	4a49      	ldr	r2, [pc, #292]	@ (800c1e8 <SNVMA_Init+0x478>)
 800c0c4:	019b      	lsls	r3, r3, #6
 800c0c6:	4413      	add	r3, r2
 800c0c8:	330c      	adds	r3, #12
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d10e      	bne.n	800c0ee <SNVMA_Init+0x37e>
            {
              /* The bank for write will be the first of list */
              SNVMA_NvmConfiguration[nvmIdx].p_BankForWrite = &SNVMA_NvmConfiguration[nvmIdx].p_BankList[0];
 800c0d0:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800c0d4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c0d8:	4943      	ldr	r1, [pc, #268]	@ (800c1e8 <SNVMA_Init+0x478>)
 800c0da:	0192      	lsls	r2, r2, #6
 800c0dc:	440a      	add	r2, r1
 800c0de:	3204      	adds	r2, #4
 800c0e0:	6812      	ldr	r2, [r2, #0]
 800c0e2:	4941      	ldr	r1, [pc, #260]	@ (800c1e8 <SNVMA_Init+0x478>)
 800c0e4:	019b      	lsls	r3, r3, #6
 800c0e6:	440b      	add	r3, r1
 800c0e8:	3308      	adds	r3, #8
 800c0ea:	601a      	str	r2, [r3, #0]
 800c0ec:	e03a      	b.n	800c164 <SNVMA_Init+0x3f4>
            }
            /* Is the bank to restore the last one in the bank list */
            else if (SNVMA_NvmConfiguration[nvmIdx].p_BankForRestore ==
 800c0ee:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c0f2:	4a3d      	ldr	r2, [pc, #244]	@ (800c1e8 <SNVMA_Init+0x478>)
 800c0f4:	019b      	lsls	r3, r3, #6
 800c0f6:	4413      	add	r3, r2
 800c0f8:	330c      	adds	r3, #12
 800c0fa:	681a      	ldr	r2, [r3, #0]
                    &SNVMA_NvmConfiguration[nvmIdx].p_BankList[SNVMA_NvmConfiguration[nvmIdx].BankNumber - 1])
 800c0fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c100:	4939      	ldr	r1, [pc, #228]	@ (800c1e8 <SNVMA_Init+0x478>)
 800c102:	019b      	lsls	r3, r3, #6
 800c104:	440b      	add	r3, r1
 800c106:	3304      	adds	r3, #4
 800c108:	6819      	ldr	r1, [r3, #0]
 800c10a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c10e:	4836      	ldr	r0, [pc, #216]	@ (800c1e8 <SNVMA_Init+0x478>)
 800c110:	019b      	lsls	r3, r3, #6
 800c112:	4403      	add	r3, r0
 800c114:	781b      	ldrb	r3, [r3, #0]
 800c116:	4618      	mov	r0, r3
 800c118:	4603      	mov	r3, r0
 800c11a:	009b      	lsls	r3, r3, #2
 800c11c:	4403      	add	r3, r0
 800c11e:	009b      	lsls	r3, r3, #2
 800c120:	3b14      	subs	r3, #20
 800c122:	440b      	add	r3, r1
            else if (SNVMA_NvmConfiguration[nvmIdx].p_BankForRestore ==
 800c124:	429a      	cmp	r2, r3
 800c126:	d10e      	bne.n	800c146 <SNVMA_Init+0x3d6>
            {
              /* The bank for write will be the first of list */
              SNVMA_NvmConfiguration[nvmIdx].p_BankForWrite = &SNVMA_NvmConfiguration[nvmIdx].p_BankList[0];
 800c128:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800c12c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c130:	492d      	ldr	r1, [pc, #180]	@ (800c1e8 <SNVMA_Init+0x478>)
 800c132:	0192      	lsls	r2, r2, #6
 800c134:	440a      	add	r2, r1
 800c136:	3204      	adds	r2, #4
 800c138:	6812      	ldr	r2, [r2, #0]
 800c13a:	492b      	ldr	r1, [pc, #172]	@ (800c1e8 <SNVMA_Init+0x478>)
 800c13c:	019b      	lsls	r3, r3, #6
 800c13e:	440b      	add	r3, r1
 800c140:	3308      	adds	r3, #8
 800c142:	601a      	str	r2, [r3, #0]
 800c144:	e00e      	b.n	800c164 <SNVMA_Init+0x3f4>
            }
            else
            {
              /* The bank for write will be the one after the restore list */
              SNVMA_NvmConfiguration[nvmIdx].p_BankForWrite = SNVMA_NvmConfiguration[nvmIdx].p_BankForRestore + 1;
 800c146:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c14a:	4a27      	ldr	r2, [pc, #156]	@ (800c1e8 <SNVMA_Init+0x478>)
 800c14c:	019b      	lsls	r3, r3, #6
 800c14e:	4413      	add	r3, r2
 800c150:	330c      	adds	r3, #12
 800c152:	681a      	ldr	r2, [r3, #0]
 800c154:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c158:	3214      	adds	r2, #20
 800c15a:	4923      	ldr	r1, [pc, #140]	@ (800c1e8 <SNVMA_Init+0x478>)
 800c15c:	019b      	lsls	r3, r3, #6
 800c15e:	440b      	add	r3, r1
 800c160:	3308      	adds	r3, #8
 800c162:	601a      	str	r2, [r3, #0]
            }

            /* Add the bank size to the address offset */
            addressOffset = addressOffset + ((SNVMA_NvmConfiguration[nvmIdx].BankSize * FLASH_PAGE_SIZE));
 800c164:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c168:	4a1f      	ldr	r2, [pc, #124]	@ (800c1e8 <SNVMA_Init+0x478>)
 800c16a:	019b      	lsls	r3, r3, #6
 800c16c:	4413      	add	r3, r2
 800c16e:	3301      	adds	r3, #1
 800c170:	781b      	ldrb	r3, [r3, #0]
 800c172:	035b      	lsls	r3, r3, #13
 800c174:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c176:	4413      	add	r3, r2
 800c178:	62bb      	str	r3, [r7, #40]	@ 0x28

            /* Update bank conf index */
            bankConfIdx++;
 800c17a:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800c17c:	3301      	adds	r3, #1
 800c17e:	867b      	strh	r3, [r7, #50]	@ 0x32
              bankIdx++)
 800c180:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800c184:	3301      	adds	r3, #1
 800c186:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
              bankIdx < SNVMA_NvmConfiguration[nvmIdx].BankNumber;
 800c18a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c18e:	4a16      	ldr	r2, [pc, #88]	@ (800c1e8 <SNVMA_Init+0x478>)
 800c190:	019b      	lsls	r3, r3, #6
 800c192:	4413      	add	r3, r2
 800c194:	781b      	ldrb	r3, [r3, #0]
 800c196:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800c19a:	429a      	cmp	r2, r3
 800c19c:	f4ff aeba 	bcc.w	800bf14 <SNVMA_Init+0x1a4>
           nvmIdx++)
 800c1a0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c1a4:	3301      	adds	r3, #1
 800c1a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
           (nvmIdx < SNVMA_NVM_NUMBER) && (error == SNVMA_ERROR_NOK);
 800c1aa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d104      	bne.n	800c1bc <SNVMA_Init+0x44c>
 800c1b2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c1b6:	2b01      	cmp	r3, #1
 800c1b8:	f43f ae5b 	beq.w	800be72 <SNVMA_Init+0x102>
          }
        }
      }

      if (error == SNVMA_ERROR_NOK)
 800c1bc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c1c0:	2b01      	cmp	r3, #1
 800c1c2:	d105      	bne.n	800c1d0 <SNVMA_Init+0x460>
      {
        /* Init is over, all OK */
        SNVMA_ModuleInit = TRUE;
 800c1c4:	4b0a      	ldr	r3, [pc, #40]	@ (800c1f0 <SNVMA_Init+0x480>)
 800c1c6:	2201      	movs	r2, #1
 800c1c8:	701a      	strb	r2, [r3, #0]

        error = SNVMA_ERROR_OK;
 800c1ca:	2300      	movs	r3, #0
 800c1cc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800c1d0:	697b      	ldr	r3, [r7, #20]
 800c1d2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	f383 8810 	msr	PRIMASK, r3
}
 800c1da:	bf00      	nop
      /* Leave critical section */
      UTILS_EXIT_CRITICAL_SECTION ();
    }
  }

  return error;
 800c1dc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 800c1e0:	4618      	mov	r0, r3
 800c1e2:	373c      	adds	r7, #60	@ 0x3c
 800c1e4:	46bd      	mov	sp, r7
 800c1e6:	bd90      	pop	{r4, r7, pc}
 800c1e8:	20000068 	.word	0x20000068
 800c1ec:	20006a90 	.word	0x20006a90
 800c1f0:	20006a60 	.word	0x20006a60

0800c1f4 <SNVMA_Register>:

SNVMA_Cmd_Status_t SNVMA_Register (const SNVMA_BufferId_t BufferId,
                                   const uint32_t * p_BufferAddress,
                                   const uint32_t BufferSize)
{
 800c1f4:	b580      	push	{r7, lr}
 800c1f6:	b08c      	sub	sp, #48	@ 0x30
 800c1f8:	af00      	add	r7, sp, #0
 800c1fa:	4603      	mov	r3, r0
 800c1fc:	60b9      	str	r1, [r7, #8]
 800c1fe:	607a      	str	r2, [r7, #4]
 800c200:	73fb      	strb	r3, [r7, #15]
  SNVMA_Cmd_Status_t error = SNVMA_ERROR_NOK;
 800c202:	2301      	movs	r3, #1
 800c204:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  uint8_t idxBuf = 0x00;
 800c208:	2300      	movs	r3, #0
 800c20a:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  uint8_t nvmId = (uint8_t)(BufferId / SNVMA_MAX_NUMBER_BUFFER);
 800c20e:	7bfb      	ldrb	r3, [r7, #15]
 800c210:	089b      	lsrs	r3, r3, #2
 800c212:	f887 3020 	strb.w	r3, [r7, #32]

  uint32_t offSet = sizeof (SNVMA_BankHeader_t);
 800c216:	2310      	movs	r3, #16
 800c218:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t neededSpace = SNVMA_ALIGN_128 ((BufferSize * sizeof (uint32_t)));
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	009b      	lsls	r3, r3, #2
 800c21e:	330f      	adds	r3, #15
 800c220:	f023 030f 	bic.w	r3, r3, #15
 800c224:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check if Module is initialized */
  if (SNVMA_ModuleInit == FALSE)
 800c226:	4b8a      	ldr	r3, [pc, #552]	@ (800c450 <SNVMA_Register+0x25c>)
 800c228:	781b      	ldrb	r3, [r3, #0]
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d103      	bne.n	800c236 <SNVMA_Register+0x42>
  {
    error = SNVMA_ERROR_NOT_INIT;
 800c22e:	2302      	movs	r3, #2
 800c230:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800c234:	e0fe      	b.n	800c434 <SNVMA_Register+0x240>
  }
  /* Check if there is no command pending */
  else if (SNVMA_CommandPending == TRUE)
 800c236:	4b87      	ldr	r3, [pc, #540]	@ (800c454 <SNVMA_Register+0x260>)
 800c238:	781b      	ldrb	r3, [r3, #0]
 800c23a:	2b01      	cmp	r3, #1
 800c23c:	d103      	bne.n	800c246 <SNVMA_Register+0x52>
  {
    error = SNVMA_ERROR_CMD_PENDING;
 800c23e:	2304      	movs	r3, #4
 800c240:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800c244:	e0f6      	b.n	800c434 <SNVMA_Register+0x240>
  }
  /* Check if buffer ID is in the configuration range */
  else if (BufferId >= SNVMA_BufferId_Max)
 800c246:	7bfb      	ldrb	r3, [r7, #15]
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d003      	beq.n	800c254 <SNVMA_Register+0x60>
  {
    error = SNVMA_ERROR_BUFFERID_NOT_KNOWN;
 800c24c:	230f      	movs	r3, #15
 800c24e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800c252:	e0ef      	b.n	800c434 <SNVMA_Register+0x240>
  }
  /* Check for NULL buffer pointer */
  else if (p_BufferAddress == NULL)
 800c254:	68bb      	ldr	r3, [r7, #8]
 800c256:	2b00      	cmp	r3, #0
 800c258:	d103      	bne.n	800c262 <SNVMA_Register+0x6e>
  {
    error = SNVMA_ERROR_BUFFER_NULL;
 800c25a:	2311      	movs	r3, #17
 800c25c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800c260:	e0e8      	b.n	800c434 <SNVMA_Register+0x240>
  }
  /* Check buffer alignment - Shall be 32bits */
  else if (((uint32_t)p_BufferAddress & SNVMA_MASK_ALIGNMENT_32) != 0x00000000u)
 800c262:	68bb      	ldr	r3, [r7, #8]
 800c264:	f003 0303 	and.w	r3, r3, #3
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d003      	beq.n	800c274 <SNVMA_Register+0x80>
  {
    error = SNVMA_ERROR_BUFFER_NOT_ALIGNED;
 800c26c:	2312      	movs	r3, #18
 800c26e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800c272:	e0df      	b.n	800c434 <SNVMA_Register+0x240>
  }
  /* Check buffer size */
  else if (BufferSize == 0x00)
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	2b00      	cmp	r3, #0
 800c278:	d103      	bne.n	800c282 <SNVMA_Register+0x8e>
  {
    error = SNVMA_ERROR_BUFFER_SIZE;
 800c27a:	2313      	movs	r3, #19
 800c27c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800c280:	e0d8      	b.n	800c434 <SNVMA_Register+0x240>
  }
  /* Check if registration is still possible */
  else if ((SNVMA_NvmConfiguration[nvmId].a_Buffers[0].p_Addr != NULL) &&
 800c282:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c286:	4a74      	ldr	r2, [pc, #464]	@ (800c458 <SNVMA_Register+0x264>)
 800c288:	019b      	lsls	r3, r3, #6
 800c28a:	4413      	add	r3, r2
 800c28c:	3320      	adds	r3, #32
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	2b00      	cmp	r3, #0
 800c292:	d01e      	beq.n	800c2d2 <SNVMA_Register+0xde>
           (SNVMA_NvmConfiguration[nvmId].a_Buffers[1].p_Addr != NULL) &&
 800c294:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c298:	4a6f      	ldr	r2, [pc, #444]	@ (800c458 <SNVMA_Register+0x264>)
 800c29a:	019b      	lsls	r3, r3, #6
 800c29c:	4413      	add	r3, r2
 800c29e:	3328      	adds	r3, #40	@ 0x28
 800c2a0:	681b      	ldr	r3, [r3, #0]
  else if ((SNVMA_NvmConfiguration[nvmId].a_Buffers[0].p_Addr != NULL) &&
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d015      	beq.n	800c2d2 <SNVMA_Register+0xde>
           (SNVMA_NvmConfiguration[nvmId].a_Buffers[2].p_Addr != NULL) &&
 800c2a6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c2aa:	4a6b      	ldr	r2, [pc, #428]	@ (800c458 <SNVMA_Register+0x264>)
 800c2ac:	019b      	lsls	r3, r3, #6
 800c2ae:	4413      	add	r3, r2
 800c2b0:	3330      	adds	r3, #48	@ 0x30
 800c2b2:	681b      	ldr	r3, [r3, #0]
           (SNVMA_NvmConfiguration[nvmId].a_Buffers[1].p_Addr != NULL) &&
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d00c      	beq.n	800c2d2 <SNVMA_Register+0xde>
           (SNVMA_NvmConfiguration[nvmId].a_Buffers[3].p_Addr != NULL))
 800c2b8:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c2bc:	4a66      	ldr	r2, [pc, #408]	@ (800c458 <SNVMA_Register+0x264>)
 800c2be:	019b      	lsls	r3, r3, #6
 800c2c0:	4413      	add	r3, r2
 800c2c2:	3338      	adds	r3, #56	@ 0x38
 800c2c4:	681b      	ldr	r3, [r3, #0]
           (SNVMA_NvmConfiguration[nvmId].a_Buffers[2].p_Addr != NULL) &&
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d003      	beq.n	800c2d2 <SNVMA_Register+0xde>
  {
    error = SNVMA_ERROR_NVM_BUFFER_FULL;
 800c2ca:	2309      	movs	r3, #9
 800c2cc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800c2d0:	e0b0      	b.n	800c434 <SNVMA_Register+0x240>
  }
  else
  {
    /* Check if registration will overflow the bank */
    for (uint8_t cnt = 0x00;
 800c2d2:	2300      	movs	r3, #0
 800c2d4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800c2d8:	e032      	b.n	800c340 <SNVMA_Register+0x14c>
         (cnt < SNVMA_MAX_NUMBER_BUFFER) && (error == SNVMA_ERROR_NOK);
         cnt++)
    {
      /* Compute occupied space */
      if (SNVMA_NvmConfiguration[nvmId].a_Buffers[cnt].p_Addr != NULL)
 800c2da:	f897 2020 	ldrb.w	r2, [r7, #32]
 800c2de:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800c2e2:	495d      	ldr	r1, [pc, #372]	@ (800c458 <SNVMA_Register+0x264>)
 800c2e4:	00d2      	lsls	r2, r2, #3
 800c2e6:	4413      	add	r3, r2
 800c2e8:	3304      	adds	r3, #4
 800c2ea:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d021      	beq.n	800c336 <SNVMA_Register+0x142>
      {
        neededSpace = neededSpace + SNVMA_ALIGN_128 ((SNVMA_NvmConfiguration[nvmId].a_Buffers[cnt].Size *
 800c2f2:	f897 2020 	ldrb.w	r2, [r7, #32]
 800c2f6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800c2fa:	4957      	ldr	r1, [pc, #348]	@ (800c458 <SNVMA_Register+0x264>)
 800c2fc:	00d2      	lsls	r2, r2, #3
 800c2fe:	4413      	add	r3, r2
 800c300:	3304      	adds	r3, #4
 800c302:	00db      	lsls	r3, r3, #3
 800c304:	440b      	add	r3, r1
 800c306:	685b      	ldr	r3, [r3, #4]
 800c308:	009b      	lsls	r3, r3, #2
 800c30a:	330f      	adds	r3, #15
 800c30c:	f023 030f 	bic.w	r3, r3, #15
 800c310:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c312:	4413      	add	r3, r2
 800c314:	627b      	str	r3, [r7, #36]	@ 0x24
                                                      sizeof (uint32_t)));

        if (((neededSpace + offSet)) > (SNVMA_NvmConfiguration[nvmId].BankSize * FLASH_PAGE_SIZE))
 800c316:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c318:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c31a:	441a      	add	r2, r3
 800c31c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c320:	494d      	ldr	r1, [pc, #308]	@ (800c458 <SNVMA_Register+0x264>)
 800c322:	019b      	lsls	r3, r3, #6
 800c324:	440b      	add	r3, r1
 800c326:	3301      	adds	r3, #1
 800c328:	781b      	ldrb	r3, [r3, #0]
 800c32a:	035b      	lsls	r3, r3, #13
 800c32c:	429a      	cmp	r2, r3
 800c32e:	d902      	bls.n	800c336 <SNVMA_Register+0x142>
        {
          error = SNVMA_ERROR_BUFFER_SIZE;
 800c330:	2313      	movs	r3, #19
 800c332:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
         cnt++)
 800c336:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800c33a:	3301      	adds	r3, #1
 800c33c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
         (cnt < SNVMA_MAX_NUMBER_BUFFER) && (error == SNVMA_ERROR_NOK);
 800c340:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800c344:	2b03      	cmp	r3, #3
 800c346:	d803      	bhi.n	800c350 <SNVMA_Register+0x15c>
 800c348:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c34c:	2b01      	cmp	r3, #1
 800c34e:	d0c4      	beq.n	800c2da <SNVMA_Register+0xe6>
        }
      }
    }

    if (error == SNVMA_ERROR_NOK)
 800c350:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c354:	2b01      	cmp	r3, #1
 800c356:	d16d      	bne.n	800c434 <SNVMA_Register+0x240>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800c358:	f3ef 8310 	mrs	r3, PRIMASK
 800c35c:	61bb      	str	r3, [r7, #24]
  return(result);
 800c35e:	69bb      	ldr	r3, [r7, #24]
    {
      /* Enter critical section */
      UTILS_ENTER_CRITICAL_SECTION();
 800c360:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800c362:	b672      	cpsid	i
}
 800c364:	bf00      	nop

      /* Compute the index in the buffer array */
      idxBuf = BufferId % SNVMA_MAX_NUMBER_BUFFER;
 800c366:	7bfb      	ldrb	r3, [r7, #15]
 800c368:	f003 0303 	and.w	r3, r3, #3
 800c36c:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

      /* Register the buffer */
      SNVMA_NvmConfiguration[nvmId].a_Buffers[idxBuf].p_Addr = (uint32_t *)p_BufferAddress;
 800c370:	f897 2020 	ldrb.w	r2, [r7, #32]
 800c374:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800c378:	4937      	ldr	r1, [pc, #220]	@ (800c458 <SNVMA_Register+0x264>)
 800c37a:	00d2      	lsls	r2, r2, #3
 800c37c:	4413      	add	r3, r2
 800c37e:	3304      	adds	r3, #4
 800c380:	68ba      	ldr	r2, [r7, #8]
 800c382:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
      SNVMA_NvmConfiguration[nvmId].a_Buffers[idxBuf].Size = BufferSize;
 800c386:	f897 2020 	ldrb.w	r2, [r7, #32]
 800c38a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800c38e:	4932      	ldr	r1, [pc, #200]	@ (800c458 <SNVMA_Register+0x264>)
 800c390:	00d2      	lsls	r2, r2, #3
 800c392:	4413      	add	r3, r2
 800c394:	3304      	adds	r3, #4
 800c396:	00db      	lsls	r3, r3, #3
 800c398:	440b      	add	r3, r1
 800c39a:	687a      	ldr	r2, [r7, #4]
 800c39c:	605a      	str	r2, [r3, #4]

      /* Update buffer write addr for the whole bank */
      for (uint8_t cnt = 0x00;
 800c39e:	2300      	movs	r3, #0
 800c3a0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800c3a4:	e039      	b.n	800c41a <SNVMA_Register+0x226>
           cnt < SNVMA_MAX_NUMBER_BUFFER;
           cnt++)
      {
        if (SNVMA_NvmConfiguration[nvmId].a_Buffers[cnt].p_Addr != NULL)
 800c3a6:	f897 2020 	ldrb.w	r2, [r7, #32]
 800c3aa:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800c3ae:	492a      	ldr	r1, [pc, #168]	@ (800c458 <SNVMA_Register+0x264>)
 800c3b0:	00d2      	lsls	r2, r2, #3
 800c3b2:	4413      	add	r3, r2
 800c3b4:	3304      	adds	r3, #4
 800c3b6:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d028      	beq.n	800c410 <SNVMA_Register+0x21c>
        {
          /* Compute buffer address in bank - It shall be align 128bits */
          SNVMA_NvmConfiguration[nvmId].p_BankForWrite->ap_BufferAddr[cnt] =
            (uint32_t *)(((uint32_t)SNVMA_NvmConfiguration[nvmId].p_BankForWrite->p_StartAddr) + offSet);
 800c3be:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c3c2:	4a25      	ldr	r2, [pc, #148]	@ (800c458 <SNVMA_Register+0x264>)
 800c3c4:	019b      	lsls	r3, r3, #6
 800c3c6:	4413      	add	r3, r2
 800c3c8:	3308      	adds	r3, #8
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	461a      	mov	r2, r3
 800c3d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3d2:	18d1      	adds	r1, r2, r3
          SNVMA_NvmConfiguration[nvmId].p_BankForWrite->ap_BufferAddr[cnt] =
 800c3d4:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c3d8:	4a1f      	ldr	r2, [pc, #124]	@ (800c458 <SNVMA_Register+0x264>)
 800c3da:	019b      	lsls	r3, r3, #6
 800c3dc:	4413      	add	r3, r2
 800c3de:	3308      	adds	r3, #8
 800c3e0:	681a      	ldr	r2, [r3, #0]
 800c3e2:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800c3e6:	009b      	lsls	r3, r3, #2
 800c3e8:	4413      	add	r3, r2
 800c3ea:	6059      	str	r1, [r3, #4]

          /* Update offset value */
          offSet = offSet + SNVMA_ALIGN_128 ((SNVMA_NvmConfiguration[nvmId].a_Buffers[cnt].Size *
 800c3ec:	f897 2020 	ldrb.w	r2, [r7, #32]
 800c3f0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800c3f4:	4918      	ldr	r1, [pc, #96]	@ (800c458 <SNVMA_Register+0x264>)
 800c3f6:	00d2      	lsls	r2, r2, #3
 800c3f8:	4413      	add	r3, r2
 800c3fa:	3304      	adds	r3, #4
 800c3fc:	00db      	lsls	r3, r3, #3
 800c3fe:	440b      	add	r3, r1
 800c400:	685b      	ldr	r3, [r3, #4]
 800c402:	009b      	lsls	r3, r3, #2
 800c404:	330f      	adds	r3, #15
 800c406:	f023 030f 	bic.w	r3, r3, #15
 800c40a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c40c:	4413      	add	r3, r2
 800c40e:	62bb      	str	r3, [r7, #40]	@ 0x28
           cnt++)
 800c410:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800c414:	3301      	adds	r3, #1
 800c416:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
           cnt < SNVMA_MAX_NUMBER_BUFFER;
 800c41a:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800c41e:	2b03      	cmp	r3, #3
 800c420:	d9c1      	bls.n	800c3a6 <SNVMA_Register+0x1b2>
 800c422:	69fb      	ldr	r3, [r7, #28]
 800c424:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c426:	697b      	ldr	r3, [r7, #20]
 800c428:	f383 8810 	msr	PRIMASK, r3
}
 800c42c:	bf00      	nop
      }

      /* Leave critical section */
      UTILS_EXIT_CRITICAL_SECTION ();

      error = SNVMA_ERROR_OK;
 800c42e:	2300      	movs	r3, #0
 800c430:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }
  }

  LOG_ERROR_SYSTEM("\r\nSNVMA_Register returned %d", (uint8_t)error);
 800c434:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c438:	4a08      	ldr	r2, [pc, #32]	@ (800c45c <SNVMA_Register+0x268>)
 800c43a:	2101      	movs	r1, #1
 800c43c:	2001      	movs	r0, #1
 800c43e:	f7fd ff8d 	bl	800a35c <Log_Module_Print>

  return error;
 800c442:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800c446:	4618      	mov	r0, r3
 800c448:	3730      	adds	r7, #48	@ 0x30
 800c44a:	46bd      	mov	sp, r7
 800c44c:	bd80      	pop	{r7, pc}
 800c44e:	bf00      	nop
 800c450:	20006a60 	.word	0x20006a60
 800c454:	20006a61 	.word	0x20006a61
 800c458:	20000068 	.word	0x20000068
 800c45c:	08030524 	.word	0x08030524

0800c460 <SNVMA_Restore>:

SNVMA_Cmd_Status_t SNVMA_Restore (const SNVMA_BufferId_t BufferId)
{
 800c460:	b580      	push	{r7, lr}
 800c462:	b08a      	sub	sp, #40	@ 0x28
 800c464:	af00      	add	r7, sp, #0
 800c466:	4603      	mov	r3, r0
 800c468:	71fb      	strb	r3, [r7, #7]
  SNVMA_Cmd_Status_t error = SNVMA_ERROR_NOK;
 800c46a:	2301      	movs	r3, #1
 800c46c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  uint8_t nvmId =  (uint8_t)(BufferId / SNVMA_MAX_NUMBER_BUFFER);
 800c470:	79fb      	ldrb	r3, [r7, #7]
 800c472:	089b      	lsrs	r3, r3, #2
 800c474:	77fb      	strb	r3, [r7, #31]
  uint8_t idxBuf = (uint8_t)(BufferId % SNVMA_MAX_NUMBER_BUFFER);
 800c476:	79fb      	ldrb	r3, [r7, #7]
 800c478:	f003 0303 	and.w	r3, r3, #3
 800c47c:	77bb      	strb	r3, [r7, #30]

  uint32_t * p_bufferFlashAddr = NULL;
 800c47e:	2300      	movs	r3, #0
 800c480:	61bb      	str	r3, [r7, #24]
  uint32_t paddingOffset = 0x00;
 800c482:	2300      	movs	r3, #0
 800c484:	623b      	str	r3, [r7, #32]

  SNVMA_BankHeader_t * p_bankHeader = NULL;
 800c486:	2300      	movs	r3, #0
 800c488:	617b      	str	r3, [r7, #20]

  /* Check if initialized */
  if (SNVMA_ModuleInit == FALSE)
 800c48a:	4b97      	ldr	r3, [pc, #604]	@ (800c6e8 <SNVMA_Restore+0x288>)
 800c48c:	781b      	ldrb	r3, [r3, #0]
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d103      	bne.n	800c49a <SNVMA_Restore+0x3a>
  {
    error = SNVMA_ERROR_NOT_INIT;
 800c492:	2302      	movs	r3, #2
 800c494:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800c498:	e119      	b.n	800c6ce <SNVMA_Restore+0x26e>
  }
  /* Check if there is no command pending */
  else if (SNVMA_CommandPending == TRUE)
 800c49a:	4b94      	ldr	r3, [pc, #592]	@ (800c6ec <SNVMA_Restore+0x28c>)
 800c49c:	781b      	ldrb	r3, [r3, #0]
 800c49e:	2b01      	cmp	r3, #1
 800c4a0:	d103      	bne.n	800c4aa <SNVMA_Restore+0x4a>
  {
    error = SNVMA_ERROR_CMD_PENDING;
 800c4a2:	2304      	movs	r3, #4
 800c4a4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800c4a8:	e111      	b.n	800c6ce <SNVMA_Restore+0x26e>
  }
  /* Check buffer id */
  else if (BufferId >= SNVMA_BufferId_Max)
 800c4aa:	79fb      	ldrb	r3, [r7, #7]
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d003      	beq.n	800c4b8 <SNVMA_Restore+0x58>
  {
    error = SNVMA_ERROR_BUFFERID_NOT_KNOWN;
 800c4b0:	230f      	movs	r3, #15
 800c4b2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800c4b6:	e10a      	b.n	800c6ce <SNVMA_Restore+0x26e>
  }
  /* Check if buffer is registered */
  else if (SNVMA_NvmConfiguration[nvmId].a_Buffers[idxBuf].p_Addr == NULL)
 800c4b8:	7ffa      	ldrb	r2, [r7, #31]
 800c4ba:	7fbb      	ldrb	r3, [r7, #30]
 800c4bc:	498c      	ldr	r1, [pc, #560]	@ (800c6f0 <SNVMA_Restore+0x290>)
 800c4be:	00d2      	lsls	r2, r2, #3
 800c4c0:	4413      	add	r3, r2
 800c4c2:	3304      	adds	r3, #4
 800c4c4:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d103      	bne.n	800c4d4 <SNVMA_Restore+0x74>
  {
    error = SNVMA_ERROR_BUFFERID_NOT_REGISTERED;
 800c4cc:	2310      	movs	r3, #16
 800c4ce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800c4d2:	e0fc      	b.n	800c6ce <SNVMA_Restore+0x26e>
  }
  /* Check if there is a bank in use - To restore from */
  else if (SNVMA_NvmConfiguration[nvmId].p_BankForRestore == NULL)
 800c4d4:	7ffb      	ldrb	r3, [r7, #31]
 800c4d6:	4a86      	ldr	r2, [pc, #536]	@ (800c6f0 <SNVMA_Restore+0x290>)
 800c4d8:	019b      	lsls	r3, r3, #6
 800c4da:	4413      	add	r3, r2
 800c4dc:	330c      	adds	r3, #12
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d103      	bne.n	800c4ec <SNVMA_Restore+0x8c>
  {
    error = SNVMA_ERROR_NVM_BANK_EMPTY;
 800c4e4:	230a      	movs	r3, #10
 800c4e6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800c4ea:	e0f0      	b.n	800c6ce <SNVMA_Restore+0x26e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800c4ec:	f3ef 8310 	mrs	r3, PRIMASK
 800c4f0:	60fb      	str	r3, [r7, #12]
  return(result);
 800c4f2:	68fb      	ldr	r3, [r7, #12]
  }
  else
  {
    /* Enter critical section */
    UTILS_ENTER_CRITICAL_SECTION();
 800c4f4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800c4f6:	b672      	cpsid	i
}
 800c4f8:	bf00      	nop

    /* Set that a command is pending */
    SNVMA_CommandPending = TRUE;
 800c4fa:	4b7c      	ldr	r3, [pc, #496]	@ (800c6ec <SNVMA_Restore+0x28c>)
 800c4fc:	2201      	movs	r2, #1
 800c4fe:	701a      	strb	r2, [r3, #0]

    /* Check bank integrity - Header plausibility */
    if (IsHeaderOk (SNVMA_NvmConfiguration[nvmId].p_BankForRestore->p_StartAddr,
 800c500:	7ffb      	ldrb	r3, [r7, #31]
 800c502:	4a7b      	ldr	r2, [pc, #492]	@ (800c6f0 <SNVMA_Restore+0x290>)
 800c504:	019b      	lsls	r3, r3, #6
 800c506:	4413      	add	r3, r2
 800c508:	330c      	adds	r3, #12
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	7ffa      	ldrb	r2, [r7, #31]
 800c510:	4611      	mov	r1, r2
 800c512:	4618      	mov	r0, r3
 800c514:	f001 fa36 	bl	800d984 <IsHeaderOk>
 800c518:	4603      	mov	r3, r0
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d103      	bne.n	800c526 <SNVMA_Restore+0xc6>
                    nvmId) == FALSE)
    {
      error = SNVMA_ERROR_NVM_BANK_CORRUPTED;
 800c51e:	230b      	movs	r3, #11
 800c520:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800c524:	e0ca      	b.n	800c6bc <SNVMA_Restore+0x25c>
    }
    /* Check bank integrity - CRC value */
    else if (IsCrcOk (SNVMA_NvmConfiguration[nvmId].p_BankForRestore->p_StartAddr) == FALSE)
 800c526:	7ffb      	ldrb	r3, [r7, #31]
 800c528:	4a71      	ldr	r2, [pc, #452]	@ (800c6f0 <SNVMA_Restore+0x290>)
 800c52a:	019b      	lsls	r3, r3, #6
 800c52c:	4413      	add	r3, r2
 800c52e:	330c      	adds	r3, #12
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	4618      	mov	r0, r3
 800c536:	f001 fabf 	bl	800dab8 <IsCrcOk>
 800c53a:	4603      	mov	r3, r0
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d103      	bne.n	800c548 <SNVMA_Restore+0xe8>
    {
      error = SNVMA_ERROR_NVM_BANK_CORRUPTED;
 800c540:	230b      	movs	r3, #11
 800c542:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800c546:	e0b9      	b.n	800c6bc <SNVMA_Restore+0x25c>
    }
    else
    {
      /* Get the bank header */
      p_bankHeader = (SNVMA_BankHeader_t *)SNVMA_NvmConfiguration[nvmId].p_BankForRestore->p_StartAddr;
 800c548:	7ffb      	ldrb	r3, [r7, #31]
 800c54a:	4a69      	ldr	r2, [pc, #420]	@ (800c6f0 <SNVMA_Restore+0x290>)
 800c54c:	019b      	lsls	r3, r3, #6
 800c54e:	4413      	add	r3, r2
 800c550:	330c      	adds	r3, #12
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	617b      	str	r3, [r7, #20]

      /* Compute the address of the buffer in flash */
      if ((BufferId == p_bankHeader->BufferId1) &&
 800c558:	697b      	ldr	r3, [r7, #20]
 800c55a:	791b      	ldrb	r3, [r3, #4]
 800c55c:	79fa      	ldrb	r2, [r7, #7]
 800c55e:	429a      	cmp	r2, r3
 800c560:	d111      	bne.n	800c586 <SNVMA_Restore+0x126>
          (SNVMA_NvmConfiguration[nvmId].a_Buffers[idxBuf].Size == p_bankHeader->SizeId1))
 800c562:	7ffa      	ldrb	r2, [r7, #31]
 800c564:	7fbb      	ldrb	r3, [r7, #30]
 800c566:	4962      	ldr	r1, [pc, #392]	@ (800c6f0 <SNVMA_Restore+0x290>)
 800c568:	00d2      	lsls	r2, r2, #3
 800c56a:	4413      	add	r3, r2
 800c56c:	3304      	adds	r3, #4
 800c56e:	00db      	lsls	r3, r3, #3
 800c570:	440b      	add	r3, r1
 800c572:	685b      	ldr	r3, [r3, #4]
 800c574:	697a      	ldr	r2, [r7, #20]
 800c576:	f8b2 2005 	ldrh.w	r2, [r2, #5]
 800c57a:	b292      	uxth	r2, r2
      if ((BufferId == p_bankHeader->BufferId1) &&
 800c57c:	4293      	cmp	r3, r2
 800c57e:	d102      	bne.n	800c586 <SNVMA_Restore+0x126>
      {
        paddingOffset = sizeof (SNVMA_BankHeader_t);
 800c580:	2310      	movs	r3, #16
 800c582:	623b      	str	r3, [r7, #32]
 800c584:	e072      	b.n	800c66c <SNVMA_Restore+0x20c>
      }
      else if ((BufferId == p_bankHeader->BufferId2) &&
 800c586:	697b      	ldr	r3, [r7, #20]
 800c588:	79db      	ldrb	r3, [r3, #7]
 800c58a:	79fa      	ldrb	r2, [r7, #7]
 800c58c:	429a      	cmp	r2, r3
 800c58e:	d117      	bne.n	800c5c0 <SNVMA_Restore+0x160>
               (SNVMA_NvmConfiguration[nvmId].a_Buffers[idxBuf].Size == p_bankHeader->SizeId2))
 800c590:	7ffa      	ldrb	r2, [r7, #31]
 800c592:	7fbb      	ldrb	r3, [r7, #30]
 800c594:	4956      	ldr	r1, [pc, #344]	@ (800c6f0 <SNVMA_Restore+0x290>)
 800c596:	00d2      	lsls	r2, r2, #3
 800c598:	4413      	add	r3, r2
 800c59a:	3304      	adds	r3, #4
 800c59c:	00db      	lsls	r3, r3, #3
 800c59e:	440b      	add	r3, r1
 800c5a0:	685b      	ldr	r3, [r3, #4]
 800c5a2:	697a      	ldr	r2, [r7, #20]
 800c5a4:	8912      	ldrh	r2, [r2, #8]
      else if ((BufferId == p_bankHeader->BufferId2) &&
 800c5a6:	4293      	cmp	r3, r2
 800c5a8:	d10a      	bne.n	800c5c0 <SNVMA_Restore+0x160>
      {
        paddingOffset = sizeof (SNVMA_BankHeader_t) +
                        SNVMA_ALIGN_128((p_bankHeader->SizeId1 * sizeof (uint32_t)));
 800c5aa:	697b      	ldr	r3, [r7, #20]
 800c5ac:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800c5b0:	b29b      	uxth	r3, r3
 800c5b2:	009b      	lsls	r3, r3, #2
 800c5b4:	330f      	adds	r3, #15
 800c5b6:	f023 030f 	bic.w	r3, r3, #15
        paddingOffset = sizeof (SNVMA_BankHeader_t) +
 800c5ba:	3310      	adds	r3, #16
 800c5bc:	623b      	str	r3, [r7, #32]
 800c5be:	e055      	b.n	800c66c <SNVMA_Restore+0x20c>

      }
      else if ((BufferId == p_bankHeader->BufferId3) &&
 800c5c0:	697b      	ldr	r3, [r7, #20]
 800c5c2:	7a9b      	ldrb	r3, [r3, #10]
 800c5c4:	79fa      	ldrb	r2, [r7, #7]
 800c5c6:	429a      	cmp	r2, r3
 800c5c8:	d120      	bne.n	800c60c <SNVMA_Restore+0x1ac>
               (SNVMA_NvmConfiguration[nvmId].a_Buffers[idxBuf].Size == p_bankHeader->SizeId3))
 800c5ca:	7ffa      	ldrb	r2, [r7, #31]
 800c5cc:	7fbb      	ldrb	r3, [r7, #30]
 800c5ce:	4948      	ldr	r1, [pc, #288]	@ (800c6f0 <SNVMA_Restore+0x290>)
 800c5d0:	00d2      	lsls	r2, r2, #3
 800c5d2:	4413      	add	r3, r2
 800c5d4:	3304      	adds	r3, #4
 800c5d6:	00db      	lsls	r3, r3, #3
 800c5d8:	440b      	add	r3, r1
 800c5da:	685b      	ldr	r3, [r3, #4]
 800c5dc:	697a      	ldr	r2, [r7, #20]
 800c5de:	f8b2 200b 	ldrh.w	r2, [r2, #11]
 800c5e2:	b292      	uxth	r2, r2
      else if ((BufferId == p_bankHeader->BufferId3) &&
 800c5e4:	4293      	cmp	r3, r2
 800c5e6:	d111      	bne.n	800c60c <SNVMA_Restore+0x1ac>
      {
        paddingOffset = sizeof (SNVMA_BankHeader_t) +
                        SNVMA_ALIGN_128((p_bankHeader->SizeId1 * sizeof (uint32_t))) +
 800c5e8:	697b      	ldr	r3, [r7, #20]
 800c5ea:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800c5ee:	b29b      	uxth	r3, r3
 800c5f0:	009b      	lsls	r3, r3, #2
 800c5f2:	330f      	adds	r3, #15
 800c5f4:	f023 020f 	bic.w	r2, r3, #15
                        SNVMA_ALIGN_128((p_bankHeader->SizeId2 * sizeof (uint32_t)));
 800c5f8:	697b      	ldr	r3, [r7, #20]
 800c5fa:	891b      	ldrh	r3, [r3, #8]
 800c5fc:	009b      	lsls	r3, r3, #2
 800c5fe:	330f      	adds	r3, #15
 800c600:	f023 030f 	bic.w	r3, r3, #15
                        SNVMA_ALIGN_128((p_bankHeader->SizeId1 * sizeof (uint32_t))) +
 800c604:	4413      	add	r3, r2
        paddingOffset = sizeof (SNVMA_BankHeader_t) +
 800c606:	3310      	adds	r3, #16
 800c608:	623b      	str	r3, [r7, #32]
 800c60a:	e02f      	b.n	800c66c <SNVMA_Restore+0x20c>
      }
      else if ((BufferId == p_bankHeader->BufferId4) &&
 800c60c:	697b      	ldr	r3, [r7, #20]
 800c60e:	7b5b      	ldrb	r3, [r3, #13]
 800c610:	79fa      	ldrb	r2, [r7, #7]
 800c612:	429a      	cmp	r2, r3
 800c614:	d127      	bne.n	800c666 <SNVMA_Restore+0x206>
               (SNVMA_NvmConfiguration[nvmId].a_Buffers[idxBuf].Size == p_bankHeader->SizeId4))
 800c616:	7ffa      	ldrb	r2, [r7, #31]
 800c618:	7fbb      	ldrb	r3, [r7, #30]
 800c61a:	4935      	ldr	r1, [pc, #212]	@ (800c6f0 <SNVMA_Restore+0x290>)
 800c61c:	00d2      	lsls	r2, r2, #3
 800c61e:	4413      	add	r3, r2
 800c620:	3304      	adds	r3, #4
 800c622:	00db      	lsls	r3, r3, #3
 800c624:	440b      	add	r3, r1
 800c626:	685b      	ldr	r3, [r3, #4]
 800c628:	697a      	ldr	r2, [r7, #20]
 800c62a:	89d2      	ldrh	r2, [r2, #14]
      else if ((BufferId == p_bankHeader->BufferId4) &&
 800c62c:	4293      	cmp	r3, r2
 800c62e:	d11a      	bne.n	800c666 <SNVMA_Restore+0x206>
      {
        paddingOffset = sizeof (SNVMA_BankHeader_t) +
                        SNVMA_ALIGN_128((p_bankHeader->SizeId1 * sizeof (uint32_t))) +
 800c630:	697b      	ldr	r3, [r7, #20]
 800c632:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800c636:	b29b      	uxth	r3, r3
 800c638:	009b      	lsls	r3, r3, #2
 800c63a:	330f      	adds	r3, #15
 800c63c:	f023 020f 	bic.w	r2, r3, #15
                        SNVMA_ALIGN_128((p_bankHeader->SizeId2 * sizeof (uint32_t))) +
 800c640:	697b      	ldr	r3, [r7, #20]
 800c642:	891b      	ldrh	r3, [r3, #8]
 800c644:	009b      	lsls	r3, r3, #2
 800c646:	330f      	adds	r3, #15
 800c648:	f023 030f 	bic.w	r3, r3, #15
                        SNVMA_ALIGN_128((p_bankHeader->SizeId1 * sizeof (uint32_t))) +
 800c64c:	441a      	add	r2, r3
                        SNVMA_ALIGN_128((p_bankHeader->SizeId3 * sizeof (uint32_t)));
 800c64e:	697b      	ldr	r3, [r7, #20]
 800c650:	f8b3 300b 	ldrh.w	r3, [r3, #11]
 800c654:	b29b      	uxth	r3, r3
 800c656:	009b      	lsls	r3, r3, #2
 800c658:	330f      	adds	r3, #15
 800c65a:	f023 030f 	bic.w	r3, r3, #15
                        SNVMA_ALIGN_128((p_bankHeader->SizeId2 * sizeof (uint32_t))) +
 800c65e:	4413      	add	r3, r2
        paddingOffset = sizeof (SNVMA_BankHeader_t) +
 800c660:	3310      	adds	r3, #16
 800c662:	623b      	str	r3, [r7, #32]
 800c664:	e002      	b.n	800c66c <SNVMA_Restore+0x20c>
      }
      else
      {
        /* Buffer config in header is not the same as the one requested/registered */
        error = SNVMA_ERROR_BUFFER_CONFIG_MISSMATCH;
 800c666:	2314      	movs	r3, #20
 800c668:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }

      /* All OK, proceed to restore */
      if (error == SNVMA_ERROR_NOK)
 800c66c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c670:	2b01      	cmp	r3, #1
 800c672:	d123      	bne.n	800c6bc <SNVMA_Restore+0x25c>
      {
        p_bufferFlashAddr = (uint32_t *)((uint32_t)SNVMA_NvmConfiguration[nvmId].p_BankForRestore->p_StartAddr +
 800c674:	7ffb      	ldrb	r3, [r7, #31]
 800c676:	4a1e      	ldr	r2, [pc, #120]	@ (800c6f0 <SNVMA_Restore+0x290>)
 800c678:	019b      	lsls	r3, r3, #6
 800c67a:	4413      	add	r3, r2
 800c67c:	330c      	adds	r3, #12
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	461a      	mov	r2, r3
 800c684:	6a3b      	ldr	r3, [r7, #32]
 800c686:	4413      	add	r3, r2
 800c688:	61bb      	str	r3, [r7, #24]
                                         paddingOffset);

        /* Restore the data in RAM */
        memcpy ((void *)SNVMA_NvmConfiguration[nvmId].a_Buffers[idxBuf].p_Addr,
 800c68a:	7ffa      	ldrb	r2, [r7, #31]
 800c68c:	7fbb      	ldrb	r3, [r7, #30]
 800c68e:	4918      	ldr	r1, [pc, #96]	@ (800c6f0 <SNVMA_Restore+0x290>)
 800c690:	00d2      	lsls	r2, r2, #3
 800c692:	4413      	add	r3, r2
 800c694:	3304      	adds	r3, #4
 800c696:	f851 0033 	ldr.w	r0, [r1, r3, lsl #3]
                (void *)p_bufferFlashAddr,
                (SNVMA_NvmConfiguration[nvmId].a_Buffers[idxBuf].Size * sizeof (uint32_t)));
 800c69a:	7ffa      	ldrb	r2, [r7, #31]
 800c69c:	7fbb      	ldrb	r3, [r7, #30]
 800c69e:	4914      	ldr	r1, [pc, #80]	@ (800c6f0 <SNVMA_Restore+0x290>)
 800c6a0:	00d2      	lsls	r2, r2, #3
 800c6a2:	4413      	add	r3, r2
 800c6a4:	3304      	adds	r3, #4
 800c6a6:	00db      	lsls	r3, r3, #3
 800c6a8:	440b      	add	r3, r1
 800c6aa:	685b      	ldr	r3, [r3, #4]
 800c6ac:	009b      	lsls	r3, r3, #2
        memcpy ((void *)SNVMA_NvmConfiguration[nvmId].a_Buffers[idxBuf].p_Addr,
 800c6ae:	461a      	mov	r2, r3
 800c6b0:	69b9      	ldr	r1, [r7, #24]
 800c6b2:	f022 feb4 	bl	802f41e <memcpy>

        error = SNVMA_ERROR_OK;
 800c6b6:	2300      	movs	r3, #0
 800c6b8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
    }

    /* Release the pending flag */
    SNVMA_CommandPending = FALSE;
 800c6bc:	4b0b      	ldr	r3, [pc, #44]	@ (800c6ec <SNVMA_Restore+0x28c>)
 800c6be:	2200      	movs	r2, #0
 800c6c0:	701a      	strb	r2, [r3, #0]
 800c6c2:	693b      	ldr	r3, [r7, #16]
 800c6c4:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c6c6:	68bb      	ldr	r3, [r7, #8]
 800c6c8:	f383 8810 	msr	PRIMASK, r3
}
 800c6cc:	bf00      	nop

    /* Leave critical section */
    UTILS_EXIT_CRITICAL_SECTION ();
  }

  LOG_ERROR_SYSTEM("\r\nSNVMA_Restore returned %d", (uint8_t)error);
 800c6ce:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c6d2:	4a08      	ldr	r2, [pc, #32]	@ (800c6f4 <SNVMA_Restore+0x294>)
 800c6d4:	2101      	movs	r1, #1
 800c6d6:	2001      	movs	r0, #1
 800c6d8:	f7fd fe40 	bl	800a35c <Log_Module_Print>

  return error;
 800c6dc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800c6e0:	4618      	mov	r0, r3
 800c6e2:	3728      	adds	r7, #40	@ 0x28
 800c6e4:	46bd      	mov	sp, r7
 800c6e6:	bd80      	pop	{r7, pc}
 800c6e8:	20006a60 	.word	0x20006a60
 800c6ec:	20006a61 	.word	0x20006a61
 800c6f0:	20000068 	.word	0x20000068
 800c6f4:	08030544 	.word	0x08030544

0800c6f8 <SNVMA_Write>:

SNVMA_Cmd_Status_t SNVMA_Write (const SNVMA_BufferId_t BufferId,
                                void (* Callback) (SNVMA_Callback_Status_t))
{
 800c6f8:	b580      	push	{r7, lr}
 800c6fa:	b090      	sub	sp, #64	@ 0x40
 800c6fc:	af00      	add	r7, sp, #0
 800c6fe:	4603      	mov	r3, r0
 800c700:	6039      	str	r1, [r7, #0]
 800c702:	71fb      	strb	r3, [r7, #7]
  SNVMA_Cmd_Status_t error = SNVMA_ERROR_NOK;
 800c704:	2301      	movs	r3, #1
 800c706:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

  uint8_t nvmId =  (uint8_t)(BufferId / SNVMA_MAX_NUMBER_BUFFER);
 800c70a:	79fb      	ldrb	r3, [r7, #7]
 800c70c:	089b      	lsrs	r3, r3, #2
 800c70e:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  uint8_t idxBuf = (uint8_t)(BufferId % SNVMA_MAX_NUMBER_BUFFER);
 800c712:	79fb      	ldrb	r3, [r7, #7]
 800c714:	f003 0303 	and.w	r3, r3, #3
 800c718:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c

  /* Check if initialized */
  if (SNVMA_ModuleInit == FALSE)
 800c71c:	4b83      	ldr	r3, [pc, #524]	@ (800c92c <SNVMA_Write+0x234>)
 800c71e:	781b      	ldrb	r3, [r3, #0]
 800c720:	2b00      	cmp	r3, #0
 800c722:	d103      	bne.n	800c72c <SNVMA_Write+0x34>
  {
    error = SNVMA_ERROR_NOT_INIT;
 800c724:	2302      	movs	r3, #2
 800c726:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800c72a:	e0f8      	b.n	800c91e <SNVMA_Write+0x226>
  }
  /* Check buffer id */
  else if (BufferId >= SNVMA_BufferId_Max)
 800c72c:	79fb      	ldrb	r3, [r7, #7]
 800c72e:	2b00      	cmp	r3, #0
 800c730:	d003      	beq.n	800c73a <SNVMA_Write+0x42>
  {
    error = SNVMA_ERROR_BUFFERID_NOT_KNOWN;
 800c732:	230f      	movs	r3, #15
 800c734:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800c738:	e0f1      	b.n	800c91e <SNVMA_Write+0x226>
  }
  /* Check if buffer is registered */
  else if (SNVMA_NvmConfiguration[nvmId].a_Buffers[idxBuf].p_Addr == NULL)
 800c73a:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 800c73e:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 800c742:	497b      	ldr	r1, [pc, #492]	@ (800c930 <SNVMA_Write+0x238>)
 800c744:	00d2      	lsls	r2, r2, #3
 800c746:	4413      	add	r3, r2
 800c748:	3304      	adds	r3, #4
 800c74a:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d103      	bne.n	800c75a <SNVMA_Write+0x62>
  {
    error = SNVMA_ERROR_BUFFERID_NOT_REGISTERED;
 800c752:	2310      	movs	r3, #16
 800c754:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800c758:	e0e1      	b.n	800c91e <SNVMA_Write+0x226>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800c75a:	f3ef 8310 	mrs	r3, PRIMASK
 800c75e:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800c760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  }
  else
  {
    /* Enter critical section */
    UTILS_ENTER_CRITICAL_SECTION();
 800c762:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("cpsid i" : : : "memory");
 800c764:	b672      	cpsid	i
}
 800c766:	bf00      	nop

    /* Set the impacted NVM */
    SNVMA_IdBitmask |= (1u << nvmId);
 800c768:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 800c76c:	2201      	movs	r2, #1
 800c76e:	409a      	lsls	r2, r3
 800c770:	4b70      	ldr	r3, [pc, #448]	@ (800c934 <SNVMA_Write+0x23c>)
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	4313      	orrs	r3, r2
 800c776:	4a6f      	ldr	r2, [pc, #444]	@ (800c934 <SNVMA_Write+0x23c>)
 800c778:	6013      	str	r3, [r2, #0]

    LOG_INFO_SYSTEM("\r\nSNVMA_Write - Impacted NVM : %d", SNVMA_IdBitmask);
 800c77a:	4b6e      	ldr	r3, [pc, #440]	@ (800c934 <SNVMA_Write+0x23c>)
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	4a6e      	ldr	r2, [pc, #440]	@ (800c938 <SNVMA_Write+0x240>)
 800c780:	2101      	movs	r1, #1
 800c782:	2000      	movs	r0, #0
 800c784:	f7fd fdea 	bl	800a35c <Log_Module_Print>

    /* Store the pending buffer ... */
    SNVMA_NvmConfiguration[nvmId].PendingBufferWriteOp |= (1u << idxBuf);
 800c788:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 800c78c:	4a68      	ldr	r2, [pc, #416]	@ (800c930 <SNVMA_Write+0x238>)
 800c78e:	019b      	lsls	r3, r3, #6
 800c790:	4413      	add	r3, r2
 800c792:	3302      	adds	r3, #2
 800c794:	7819      	ldrb	r1, [r3, #0]
 800c796:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 800c79a:	2201      	movs	r2, #1
 800c79c:	fa02 f303 	lsl.w	r3, r2, r3
 800c7a0:	b2da      	uxtb	r2, r3
 800c7a2:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 800c7a6:	430a      	orrs	r2, r1
 800c7a8:	b2d1      	uxtb	r1, r2
 800c7aa:	4a61      	ldr	r2, [pc, #388]	@ (800c930 <SNVMA_Write+0x238>)
 800c7ac:	019b      	lsls	r3, r3, #6
 800c7ae:	4413      	add	r3, r2
 800c7b0:	3302      	adds	r3, #2
 800c7b2:	460a      	mov	r2, r1
 800c7b4:	701a      	strb	r2, [r3, #0]

    LOG_INFO_SYSTEM("\r\nSNVMA_Write - Pending buffer : %d", (uint8_t)(1u << idxBuf));
 800c7b6:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 800c7ba:	2201      	movs	r2, #1
 800c7bc:	fa02 f303 	lsl.w	r3, r2, r3
 800c7c0:	b2db      	uxtb	r3, r3
 800c7c2:	4a5e      	ldr	r2, [pc, #376]	@ (800c93c <SNVMA_Write+0x244>)
 800c7c4:	2101      	movs	r1, #1
 800c7c6:	2000      	movs	r0, #0
 800c7c8:	f7fd fdc8 	bl	800a35c <Log_Module_Print>

    /* ... and the callback - Can be NULL */
    SNVMA_NvmConfiguration[nvmId].a_Callback[idxBuf] = Callback;
 800c7cc:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 800c7d0:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 800c7d4:	4956      	ldr	r1, [pc, #344]	@ (800c930 <SNVMA_Write+0x238>)
 800c7d6:	0112      	lsls	r2, r2, #4
 800c7d8:	4413      	add	r3, r2
 800c7da:	3304      	adds	r3, #4
 800c7dc:	683a      	ldr	r2, [r7, #0]
 800c7de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800c7e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c7e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c7e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c7e8:	f383 8810 	msr	PRIMASK, r3
}
 800c7ec:	bf00      	nop

    /* Leave critical section */
    UTILS_EXIT_CRITICAL_SECTION ();

    /* Check if there is only one operation on going */
    if (SNVMA_CommandPending == FALSE)
 800c7ee:	4b54      	ldr	r3, [pc, #336]	@ (800c940 <SNVMA_Write+0x248>)
 800c7f0:	781b      	ldrb	r3, [r3, #0]
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	f040 8090 	bne.w	800c918 <SNVMA_Write+0x220>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800c7f8:	f3ef 8310 	mrs	r3, PRIMASK
 800c7fc:	61fb      	str	r3, [r7, #28]
  return(result);
 800c7fe:	69fb      	ldr	r3, [r7, #28]
    {
      /* Enter critical section */
      UTILS_ENTER_CRITICAL_SECTION();
 800c800:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("cpsid i" : : : "memory");
 800c802:	b672      	cpsid	i
}
 800c804:	bf00      	nop

      /* Set that a command is pending */
      SNVMA_CommandPending = TRUE;
 800c806:	4b4e      	ldr	r3, [pc, #312]	@ (800c940 <SNVMA_Write+0x248>)
 800c808:	2201      	movs	r2, #1
 800c80a:	701a      	strb	r2, [r3, #0]
 800c80c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c80e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c810:	6a3b      	ldr	r3, [r7, #32]
 800c812:	f383 8810 	msr	PRIMASK, r3
}
 800c816:	bf00      	nop

      /* Leave critical section */
      UTILS_EXIT_CRITICAL_SECTION ();

      /* Check flash write status */
      if (StartFlashWrite (nvmId) == FM_ERROR)
 800c818:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 800c81c:	4618      	mov	r0, r3
 800c81e:	f001 facb 	bl	800ddb8 <StartFlashWrite>
 800c822:	4603      	mov	r3, r0
 800c824:	2b02      	cmp	r3, #2
 800c826:	d13e      	bne.n	800c8a6 <SNVMA_Write+0x1ae>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800c828:	f3ef 8310 	mrs	r3, PRIMASK
 800c82c:	61bb      	str	r3, [r7, #24]
  return(result);
 800c82e:	69bb      	ldr	r3, [r7, #24]
      {
        /* Enter critical section */
        UTILS_ENTER_CRITICAL_SECTION();
 800c830:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("cpsid i" : : : "memory");
 800c832:	b672      	cpsid	i
}
 800c834:	bf00      	nop

        /* Reset command pending flag */
        SNVMA_CommandPending = FALSE;
 800c836:	4b42      	ldr	r3, [pc, #264]	@ (800c940 <SNVMA_Write+0x248>)
 800c838:	2200      	movs	r2, #0
 800c83a:	701a      	strb	r2, [r3, #0]

        /* Clean flags */
        SNVMA_IdBitmask &= ~(1u << nvmId);
 800c83c:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 800c840:	2201      	movs	r2, #1
 800c842:	fa02 f303 	lsl.w	r3, r2, r3
 800c846:	43da      	mvns	r2, r3
 800c848:	4b3a      	ldr	r3, [pc, #232]	@ (800c934 <SNVMA_Write+0x23c>)
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	4013      	ands	r3, r2
 800c84e:	4a39      	ldr	r2, [pc, #228]	@ (800c934 <SNVMA_Write+0x23c>)
 800c850:	6013      	str	r3, [r2, #0]
        SNVMA_NvmConfiguration[nvmId].PendingBufferWriteOp = 0u;
 800c852:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 800c856:	4a36      	ldr	r2, [pc, #216]	@ (800c930 <SNVMA_Write+0x238>)
 800c858:	019b      	lsls	r3, r3, #6
 800c85a:	4413      	add	r3, r2
 800c85c:	3302      	adds	r3, #2
 800c85e:	2200      	movs	r2, #0
 800c860:	701a      	strb	r2, [r3, #0]

        for (uint8_t cnt = 0x00;
 800c862:	2300      	movs	r3, #0
 800c864:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 800c868:	e00f      	b.n	800c88a <SNVMA_Write+0x192>
             cnt < SNVMA_MAX_NUMBER_BUFFER;
             cnt++)
        {
          SNVMA_NvmConfiguration[nvmId].a_Callback[cnt] = NULL;
 800c86a:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 800c86e:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800c872:	492f      	ldr	r1, [pc, #188]	@ (800c930 <SNVMA_Write+0x238>)
 800c874:	0112      	lsls	r2, r2, #4
 800c876:	4413      	add	r3, r2
 800c878:	3304      	adds	r3, #4
 800c87a:	2200      	movs	r2, #0
 800c87c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
             cnt++)
 800c880:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800c884:	3301      	adds	r3, #1
 800c886:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
             cnt < SNVMA_MAX_NUMBER_BUFFER;
 800c88a:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800c88e:	2b03      	cmp	r3, #3
 800c890:	d9eb      	bls.n	800c86a <SNVMA_Write+0x172>
 800c892:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c894:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c896:	697b      	ldr	r3, [r7, #20]
 800c898:	f383 8810 	msr	PRIMASK, r3
}
 800c89c:	bf00      	nop
        }

        /* Leave critical section */
        UTILS_EXIT_CRITICAL_SECTION ();

        error = SNVMA_ERROR_FLASH_ERROR;
 800c89e:	2315      	movs	r3, #21
 800c8a0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800c8a4:	e03b      	b.n	800c91e <SNVMA_Write+0x226>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800c8a6:	f3ef 8310 	mrs	r3, PRIMASK
 800c8aa:	60fb      	str	r3, [r7, #12]
  return(result);
 800c8ac:	68fb      	ldr	r3, [r7, #12]
      }
      else
      {
        /* Enter critical section */
        UTILS_ENTER_CRITICAL_SECTION();
 800c8ae:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("cpsid i" : : : "memory");
 800c8b0:	b672      	cpsid	i
}
 800c8b2:	bf00      	nop

        /* Flash op started */
        SNVMA_FlashInfo.NvmId = nvmId;
 800c8b4:	4a23      	ldr	r2, [pc, #140]	@ (800c944 <SNVMA_Write+0x24c>)
 800c8b6:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 800c8ba:	7013      	strb	r3, [r2, #0]
        SNVMA_FlashInfo.BufferId = idxBuf;
 800c8bc:	4a21      	ldr	r2, [pc, #132]	@ (800c944 <SNVMA_Write+0x24c>)
 800c8be:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 800c8c2:	7053      	strb	r3, [r2, #1]
        SNVMA_FlashInfo.FlashOpState = SNVMA_HEADER_WRITE;
 800c8c4:	4b1f      	ldr	r3, [pc, #124]	@ (800c944 <SNVMA_Write+0x24c>)
 800c8c6:	2200      	movs	r2, #0
 800c8c8:	709a      	strb	r2, [r3, #2]

        /* Set request active */
        SNVMA_NvmConfiguration[nvmId].PendingBufferWriteOp =
          (SNVMA_NvmConfiguration[nvmId].PendingBufferWriteOp << SNVMA_MAX_NUMBER_BUFFER) & 0xF0u;
 800c8ca:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 800c8ce:	4a18      	ldr	r2, [pc, #96]	@ (800c930 <SNVMA_Write+0x238>)
 800c8d0:	019b      	lsls	r3, r3, #6
 800c8d2:	4413      	add	r3, r2
 800c8d4:	3302      	adds	r3, #2
 800c8d6:	781a      	ldrb	r2, [r3, #0]
        SNVMA_NvmConfiguration[nvmId].PendingBufferWriteOp =
 800c8d8:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
          (SNVMA_NvmConfiguration[nvmId].PendingBufferWriteOp << SNVMA_MAX_NUMBER_BUFFER) & 0xF0u;
 800c8dc:	0112      	lsls	r2, r2, #4
 800c8de:	b2d1      	uxtb	r1, r2
        SNVMA_NvmConfiguration[nvmId].PendingBufferWriteOp =
 800c8e0:	4a13      	ldr	r2, [pc, #76]	@ (800c930 <SNVMA_Write+0x238>)
 800c8e2:	019b      	lsls	r3, r3, #6
 800c8e4:	4413      	add	r3, r2
 800c8e6:	3302      	adds	r3, #2
 800c8e8:	460a      	mov	r2, r1
 800c8ea:	701a      	strb	r2, [r3, #0]
 800c8ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8ee:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c8f0:	693b      	ldr	r3, [r7, #16]
 800c8f2:	f383 8810 	msr	PRIMASK, r3
}
 800c8f6:	bf00      	nop

        /* Leave critical section */
        UTILS_EXIT_CRITICAL_SECTION ();

        LOG_INFO_SYSTEM("\r\nSNVMA_Write - Flash operation started (Header write request) : %d", (uint8_t)SNVMA_NvmConfiguration[nvmId].PendingBufferWriteOp);
 800c8f8:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 800c8fc:	4a0c      	ldr	r2, [pc, #48]	@ (800c930 <SNVMA_Write+0x238>)
 800c8fe:	019b      	lsls	r3, r3, #6
 800c900:	4413      	add	r3, r2
 800c902:	3302      	adds	r3, #2
 800c904:	781b      	ldrb	r3, [r3, #0]
 800c906:	4a10      	ldr	r2, [pc, #64]	@ (800c948 <SNVMA_Write+0x250>)
 800c908:	2101      	movs	r1, #1
 800c90a:	2000      	movs	r0, #0
 800c90c:	f7fd fd26 	bl	800a35c <Log_Module_Print>

        error = SNVMA_ERROR_OK;
 800c910:	2300      	movs	r3, #0
 800c912:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800c916:	e002      	b.n	800c91e <SNVMA_Write+0x226>
      }
    }
    else
    {
      /* Request information are registered, it will dealt later on */
      error = SNVMA_ERROR_OK;
 800c918:	2300      	movs	r3, #0
 800c91a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    }
  }

  return error;
 800c91e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 800c922:	4618      	mov	r0, r3
 800c924:	3740      	adds	r7, #64	@ 0x40
 800c926:	46bd      	mov	sp, r7
 800c928:	bd80      	pop	{r7, pc}
 800c92a:	bf00      	nop
 800c92c:	20006a60 	.word	0x20006a60
 800c930:	20000068 	.word	0x20000068
 800c934:	20006a64 	.word	0x20006a64
 800c938:	08030560 	.word	0x08030560
 800c93c:	08030584 	.word	0x08030584
 800c940:	20006a61 	.word	0x20006a61
 800c944:	20006a8c 	.word	0x20006a8c
 800c948:	080305a8 	.word	0x080305a8

0800c94c <SNVMA_FlashManagerCallback>:

/* Callback Definition ------------------------------------------------------*/
void SNVMA_FlashManagerCallback(FM_FlashOp_Status_t Status)
{
 800c94c:	b5b0      	push	{r4, r5, r7, lr}
 800c94e:	b0d8      	sub	sp, #352	@ 0x160
 800c950:	af00      	add	r7, sp, #0
 800c952:	4602      	mov	r2, r0
 800c954:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800c958:	f2a3 1359 	subw	r3, r3, #345	@ 0x159
 800c95c:	701a      	strb	r2, [r3, #0]
  FM_Cmd_Status_t flashFunRet = FM_ERROR;
 800c95e:	2302      	movs	r3, #2
 800c960:	f887 3159 	strb.w	r3, [r7, #345]	@ 0x159
  static uint8_t buffCnt = 0x00;

  static SNVMA_BankElt_t * tmpBank = NULL;

  /* Check Flash operation state */
  switch (SNVMA_FlashInfo.FlashOpState)
 800c964:	4bae      	ldr	r3, [pc, #696]	@ (800cc20 <SNVMA_FlashManagerCallback+0x2d4>)
 800c966:	789b      	ldrb	r3, [r3, #2]
 800c968:	2b03      	cmp	r3, #3
 800c96a:	f200 87f0 	bhi.w	800d94e <SNVMA_FlashManagerCallback+0x1002>
 800c96e:	a201      	add	r2, pc, #4	@ (adr r2, 800c974 <SNVMA_FlashManagerCallback+0x28>)
 800c970:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c974:	0800c985 	.word	0x0800c985
 800c978:	0800cbdd 	.word	0x0800cbdd
 800c97c:	0800d351 	.word	0x0800d351
 800c980:	0800d6c5 	.word	0x0800d6c5
  {
    case SNVMA_HEADER_WRITE:
    {
      LOG_INFO_SYSTEM("\r\nSNVMA_FlashManagerCallback - Flash operation state : SNVMA_HEADER_WRITE");
 800c984:	4aa7      	ldr	r2, [pc, #668]	@ (800cc24 <SNVMA_FlashManagerCallback+0x2d8>)
 800c986:	2101      	movs	r1, #1
 800c988:	2000      	movs	r0, #0
 800c98a:	f7fd fce7 	bl	800a35c <Log_Module_Print>

      /* Check flash operation status */
      if (Status == FM_OPERATION_COMPLETE)
 800c98e:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800c992:	f2a3 1359 	subw	r3, r3, #345	@ 0x159
 800c996:	781b      	ldrb	r3, [r3, #0]
 800c998:	2b00      	cmp	r3, #0
 800c99a:	f040 80dc 	bne.w	800cb56 <SNVMA_FlashManagerCallback+0x20a>
      {
        /* Check that header has been written correctly */
        if (IsSameContent ((uint32_t *)&SNVMA_WriteBankHeader,
                           (uint32_t *)SNVMA_NvmConfiguration[SNVMA_FlashInfo.NvmId].p_BankForWrite->p_StartAddr,
 800c99e:	4ba0      	ldr	r3, [pc, #640]	@ (800cc20 <SNVMA_FlashManagerCallback+0x2d4>)
 800c9a0:	781b      	ldrb	r3, [r3, #0]
 800c9a2:	4aa1      	ldr	r2, [pc, #644]	@ (800cc28 <SNVMA_FlashManagerCallback+0x2dc>)
 800c9a4:	019b      	lsls	r3, r3, #6
 800c9a6:	4413      	add	r3, r2
 800c9a8:	3308      	adds	r3, #8
 800c9aa:	681b      	ldr	r3, [r3, #0]
        if (IsSameContent ((uint32_t *)&SNVMA_WriteBankHeader,
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	2204      	movs	r2, #4
 800c9b0:	4619      	mov	r1, r3
 800c9b2:	489e      	ldr	r0, [pc, #632]	@ (800cc2c <SNVMA_FlashManagerCallback+0x2e0>)
 800c9b4:	f001 f982 	bl	800dcbc <IsSameContent>
 800c9b8:	4603      	mov	r3, r0
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	d15a      	bne.n	800ca74 <SNVMA_FlashManagerCallback+0x128>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800c9be:	f3ef 8310 	mrs	r3, PRIMASK
 800c9c2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  return(result);
 800c9c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
                           (sizeof (SNVMA_BankHeader_t) / sizeof (uint32_t))) == FALSE)
        {
          /* Enter critical section */
          UTILS_ENTER_CRITICAL_SECTION();
 800c9ca:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
  __ASM volatile ("cpsid i" : : : "memory");
 800c9ce:	b672      	cpsid	i
}
 800c9d0:	bf00      	nop

          /* Reschedule the header write operation but first erase the bank */
          SNVMA_FlashInfo.FlashOpState = SNVMA_RETRY_WRITE;
 800c9d2:	4b93      	ldr	r3, [pc, #588]	@ (800cc20 <SNVMA_FlashManagerCallback+0x2d4>)
 800c9d4:	2203      	movs	r2, #3
 800c9d6:	709a      	strb	r2, [r3, #2]
 800c9d8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800c9dc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c9e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c9e4:	f383 8810 	msr	PRIMASK, r3
}
 800c9e8:	bf00      	nop

          /* Leave critical section */
          UTILS_EXIT_CRITICAL_SECTION ();

          flashFunRet = FM_Erase ((((uint32_t)
                                    SNVMA_NvmConfiguration[SNVMA_FlashInfo.NvmId].
 800c9ea:	4b8d      	ldr	r3, [pc, #564]	@ (800cc20 <SNVMA_FlashManagerCallback+0x2d4>)
 800c9ec:	781b      	ldrb	r3, [r3, #0]
 800c9ee:	4a8e      	ldr	r2, [pc, #568]	@ (800cc28 <SNVMA_FlashManagerCallback+0x2dc>)
 800c9f0:	019b      	lsls	r3, r3, #6
 800c9f2:	4413      	add	r3, r2
 800c9f4:	3308      	adds	r3, #8
 800c9f6:	681b      	ldr	r3, [r3, #0]
                                      p_BankForWrite->p_StartAddr - FLASH_BASE_NS) / FLASH_PAGE_SIZE),
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	f103 4378 	add.w	r3, r3, #4160749568	@ 0xf8000000
          flashFunRet = FM_Erase ((((uint32_t)
 800c9fe:	0b58      	lsrs	r0, r3, #13
                                    SNVMA_NvmConfiguration[SNVMA_FlashInfo.NvmId].BankSize,
 800ca00:	4b87      	ldr	r3, [pc, #540]	@ (800cc20 <SNVMA_FlashManagerCallback+0x2d4>)
 800ca02:	781b      	ldrb	r3, [r3, #0]
 800ca04:	4a88      	ldr	r2, [pc, #544]	@ (800cc28 <SNVMA_FlashManagerCallback+0x2dc>)
 800ca06:	019b      	lsls	r3, r3, #6
 800ca08:	4413      	add	r3, r2
 800ca0a:	3301      	adds	r3, #1
 800ca0c:	781b      	ldrb	r3, [r3, #0]
          flashFunRet = FM_Erase ((((uint32_t)
 800ca0e:	4a88      	ldr	r2, [pc, #544]	@ (800cc30 <SNVMA_FlashManagerCallback+0x2e4>)
 800ca10:	4619      	mov	r1, r3
 800ca12:	f7fe fe17 	bl	800b644 <FM_Erase>
 800ca16:	4603      	mov	r3, r0
 800ca18:	f887 3159 	strb.w	r3, [r7, #345]	@ 0x159
                                    &SNVMA_FlashCallback);

          /* Check flash operation */
          if (flashFunRet == FM_ERROR)
 800ca1c:	f897 3159 	ldrb.w	r3, [r7, #345]	@ 0x159
 800ca20:	2b02      	cmp	r3, #2
 800ca22:	f040 8796 	bne.w	800d952 <SNVMA_FlashManagerCallback+0x1006>
          {
            /* Notify buffers callbacks */
            InvokeBufferCallback (SNVMA_FlashInfo.NvmId, SNVMA_OPERATION_FAILED);
 800ca26:	4b7e      	ldr	r3, [pc, #504]	@ (800cc20 <SNVMA_FlashManagerCallback+0x2d4>)
 800ca28:	781b      	ldrb	r3, [r3, #0]
 800ca2a:	2101      	movs	r1, #1
 800ca2c:	4618      	mov	r0, r3
 800ca2e:	f001 fab9 	bl	800dfa4 <InvokeBufferCallback>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800ca32:	f3ef 8310 	mrs	r3, PRIMASK
 800ca36:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  return(result);
 800ca3a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8

            /* Enter critical section */
            UTILS_ENTER_CRITICAL_SECTION();
 800ca3e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
  __ASM volatile ("cpsid i" : : : "memory");
 800ca42:	b672      	cpsid	i
}
 800ca44:	bf00      	nop

            /* Clear the NVM bitmask */
            SNVMA_IdBitmask &= ~(1u << SNVMA_FlashInfo.NvmId);
 800ca46:	4b76      	ldr	r3, [pc, #472]	@ (800cc20 <SNVMA_FlashManagerCallback+0x2d4>)
 800ca48:	781b      	ldrb	r3, [r3, #0]
 800ca4a:	461a      	mov	r2, r3
 800ca4c:	2301      	movs	r3, #1
 800ca4e:	4093      	lsls	r3, r2
 800ca50:	43da      	mvns	r2, r3
 800ca52:	4b78      	ldr	r3, [pc, #480]	@ (800cc34 <SNVMA_FlashManagerCallback+0x2e8>)
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	4013      	ands	r3, r2
 800ca58:	4a76      	ldr	r2, [pc, #472]	@ (800cc34 <SNVMA_FlashManagerCallback+0x2e8>)
 800ca5a:	6013      	str	r3, [r2, #0]

            /* Reset command pending flag */
            SNVMA_CommandPending = FALSE;
 800ca5c:	4b76      	ldr	r3, [pc, #472]	@ (800cc38 <SNVMA_FlashManagerCallback+0x2ec>)
 800ca5e:	2200      	movs	r2, #0
 800ca60:	701a      	strb	r2, [r3, #0]
 800ca62:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800ca66:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ca6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ca6e:	f383 8810 	msr	PRIMASK, r3
}
 800ca72:	e0b1      	b.n	800cbd8 <SNVMA_FlashManagerCallback+0x28c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800ca74:	f3ef 8310 	mrs	r3, PRIMASK
 800ca78:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  return(result);
 800ca7c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
          }
        }
        else
        {
          /* Enter critical section */
          UTILS_ENTER_CRITICAL_SECTION();
 800ca80:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
  __ASM volatile ("cpsid i" : : : "memory");
 800ca84:	b672      	cpsid	i
}
 800ca86:	bf00      	nop

          /* Header has been properly written, update operation information */
          SNVMA_FlashInfo.FlashOpState = SNVMA_BUFFER_WRITE;
 800ca88:	4b65      	ldr	r3, [pc, #404]	@ (800cc20 <SNVMA_FlashManagerCallback+0x2d4>)
 800ca8a:	2201      	movs	r2, #1
 800ca8c:	709a      	strb	r2, [r3, #2]

          /* Reset the buffer write counter */
          buffCnt = 0x00;
 800ca8e:	4b6b      	ldr	r3, [pc, #428]	@ (800cc3c <SNVMA_FlashManagerCallback+0x2f0>)
 800ca90:	2200      	movs	r2, #0
 800ca92:	701a      	strb	r2, [r3, #0]
 800ca94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ca98:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ca9c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800caa0:	f383 8810 	msr	PRIMASK, r3
}
 800caa4:	bf00      	nop
          /* Leave critical section */
          UTILS_EXIT_CRITICAL_SECTION ();

          /* Execute the first buffer write */
          flashFunRet = FM_Write (
            SNVMA_NvmConfiguration[SNVMA_FlashInfo.NvmId].a_Buffers[SNVMA_FlashInfo.BufferId].p_Addr,
 800caa6:	4b5e      	ldr	r3, [pc, #376]	@ (800cc20 <SNVMA_FlashManagerCallback+0x2d4>)
 800caa8:	781b      	ldrb	r3, [r3, #0]
 800caaa:	4618      	mov	r0, r3
 800caac:	4b5c      	ldr	r3, [pc, #368]	@ (800cc20 <SNVMA_FlashManagerCallback+0x2d4>)
 800caae:	785b      	ldrb	r3, [r3, #1]
 800cab0:	4619      	mov	r1, r3
          flashFunRet = FM_Write (
 800cab2:	4a5d      	ldr	r2, [pc, #372]	@ (800cc28 <SNVMA_FlashManagerCallback+0x2dc>)
 800cab4:	00c3      	lsls	r3, r0, #3
 800cab6:	440b      	add	r3, r1
 800cab8:	3304      	adds	r3, #4
 800caba:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
            SNVMA_NvmConfiguration[SNVMA_FlashInfo.NvmId].p_BankForWrite->ap_BufferAddr[SNVMA_FlashInfo.BufferId],
 800cabe:	4b58      	ldr	r3, [pc, #352]	@ (800cc20 <SNVMA_FlashManagerCallback+0x2d4>)
 800cac0:	781b      	ldrb	r3, [r3, #0]
 800cac2:	4a59      	ldr	r2, [pc, #356]	@ (800cc28 <SNVMA_FlashManagerCallback+0x2dc>)
 800cac4:	019b      	lsls	r3, r3, #6
 800cac6:	4413      	add	r3, r2
 800cac8:	3308      	adds	r3, #8
 800caca:	681a      	ldr	r2, [r3, #0]
 800cacc:	4b54      	ldr	r3, [pc, #336]	@ (800cc20 <SNVMA_FlashManagerCallback+0x2d4>)
 800cace:	785b      	ldrb	r3, [r3, #1]
          flashFunRet = FM_Write (
 800cad0:	009b      	lsls	r3, r3, #2
 800cad2:	4413      	add	r3, r2
 800cad4:	6859      	ldr	r1, [r3, #4]
            SNVMA_NvmConfiguration[SNVMA_FlashInfo.NvmId].a_Buffers[SNVMA_FlashInfo.BufferId].Size,
 800cad6:	4b52      	ldr	r3, [pc, #328]	@ (800cc20 <SNVMA_FlashManagerCallback+0x2d4>)
 800cad8:	781b      	ldrb	r3, [r3, #0]
 800cada:	461d      	mov	r5, r3
 800cadc:	4b50      	ldr	r3, [pc, #320]	@ (800cc20 <SNVMA_FlashManagerCallback+0x2d4>)
 800cade:	785b      	ldrb	r3, [r3, #1]
 800cae0:	461c      	mov	r4, r3
 800cae2:	4a51      	ldr	r2, [pc, #324]	@ (800cc28 <SNVMA_FlashManagerCallback+0x2dc>)
 800cae4:	00eb      	lsls	r3, r5, #3
 800cae6:	4423      	add	r3, r4
 800cae8:	3304      	adds	r3, #4
 800caea:	00db      	lsls	r3, r3, #3
 800caec:	4413      	add	r3, r2
 800caee:	685b      	ldr	r3, [r3, #4]
          flashFunRet = FM_Write (
 800caf0:	461a      	mov	r2, r3
 800caf2:	4b4f      	ldr	r3, [pc, #316]	@ (800cc30 <SNVMA_FlashManagerCallback+0x2e4>)
 800caf4:	f7fe fd1e 	bl	800b534 <FM_Write>
 800caf8:	4603      	mov	r3, r0
 800cafa:	f887 3159 	strb.w	r3, [r7, #345]	@ 0x159
            &SNVMA_FlashCallback);

          /* Check flash operation */
          if (flashFunRet == FM_ERROR)
 800cafe:	f897 3159 	ldrb.w	r3, [r7, #345]	@ 0x159
 800cb02:	2b02      	cmp	r3, #2
 800cb04:	f040 8725 	bne.w	800d952 <SNVMA_FlashManagerCallback+0x1006>
          {
            /* Notify buffers callbacks */
            InvokeBufferCallback (SNVMA_FlashInfo.NvmId, SNVMA_OPERATION_FAILED);
 800cb08:	4b45      	ldr	r3, [pc, #276]	@ (800cc20 <SNVMA_FlashManagerCallback+0x2d4>)
 800cb0a:	781b      	ldrb	r3, [r3, #0]
 800cb0c:	2101      	movs	r1, #1
 800cb0e:	4618      	mov	r0, r3
 800cb10:	f001 fa48 	bl	800dfa4 <InvokeBufferCallback>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800cb14:	f3ef 8310 	mrs	r3, PRIMASK
 800cb18:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  return(result);
 800cb1c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8

            /* Enter critical section */
            UTILS_ENTER_CRITICAL_SECTION();
 800cb20:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  __ASM volatile ("cpsid i" : : : "memory");
 800cb24:	b672      	cpsid	i
}
 800cb26:	bf00      	nop

            /* Clear the NVM bitmask */
            SNVMA_IdBitmask &= ~(1u << SNVMA_FlashInfo.NvmId);
 800cb28:	4b3d      	ldr	r3, [pc, #244]	@ (800cc20 <SNVMA_FlashManagerCallback+0x2d4>)
 800cb2a:	781b      	ldrb	r3, [r3, #0]
 800cb2c:	461a      	mov	r2, r3
 800cb2e:	2301      	movs	r3, #1
 800cb30:	4093      	lsls	r3, r2
 800cb32:	43da      	mvns	r2, r3
 800cb34:	4b3f      	ldr	r3, [pc, #252]	@ (800cc34 <SNVMA_FlashManagerCallback+0x2e8>)
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	4013      	ands	r3, r2
 800cb3a:	4a3e      	ldr	r2, [pc, #248]	@ (800cc34 <SNVMA_FlashManagerCallback+0x2e8>)
 800cb3c:	6013      	str	r3, [r2, #0]

            /* Reset command pending flag */
            SNVMA_CommandPending = FALSE;
 800cb3e:	4b3e      	ldr	r3, [pc, #248]	@ (800cc38 <SNVMA_FlashManagerCallback+0x2ec>)
 800cb40:	2200      	movs	r2, #0
 800cb42:	701a      	strb	r2, [r3, #0]
 800cb44:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800cb48:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cb4c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800cb50:	f383 8810 	msr	PRIMASK, r3
}
 800cb54:	e040      	b.n	800cbd8 <SNVMA_FlashManagerCallback+0x28c>
        }
      }
      /* Status == FM_OPERATION_AVAILABLE */
      else
      {
        LOG_INFO_SYSTEM("\r\nSNVMA_FlashManagerCallback - Flash operation state : SNVMA_RETRY_WRITE - Retry write operation");
 800cb56:	4a3a      	ldr	r2, [pc, #232]	@ (800cc40 <SNVMA_FlashManagerCallback+0x2f4>)
 800cb58:	2101      	movs	r1, #1
 800cb5a:	2000      	movs	r0, #0
 800cb5c:	f7fd fbfe 	bl	800a35c <Log_Module_Print>

        /* Retry write operation of the header */
        flashFunRet = FM_Write ((uint32_t *)&SNVMA_WriteBankHeader,
                                SNVMA_NvmConfiguration[SNVMA_FlashInfo.NvmId].p_BankForWrite->p_StartAddr,
 800cb60:	4b2f      	ldr	r3, [pc, #188]	@ (800cc20 <SNVMA_FlashManagerCallback+0x2d4>)
 800cb62:	781b      	ldrb	r3, [r3, #0]
 800cb64:	4a30      	ldr	r2, [pc, #192]	@ (800cc28 <SNVMA_FlashManagerCallback+0x2dc>)
 800cb66:	019b      	lsls	r3, r3, #6
 800cb68:	4413      	add	r3, r2
 800cb6a:	3308      	adds	r3, #8
 800cb6c:	681b      	ldr	r3, [r3, #0]
        flashFunRet = FM_Write ((uint32_t *)&SNVMA_WriteBankHeader,
 800cb6e:	6819      	ldr	r1, [r3, #0]
 800cb70:	4b2f      	ldr	r3, [pc, #188]	@ (800cc30 <SNVMA_FlashManagerCallback+0x2e4>)
 800cb72:	2204      	movs	r2, #4
 800cb74:	482d      	ldr	r0, [pc, #180]	@ (800cc2c <SNVMA_FlashManagerCallback+0x2e0>)
 800cb76:	f7fe fcdd 	bl	800b534 <FM_Write>
 800cb7a:	4603      	mov	r3, r0
 800cb7c:	f887 3159 	strb.w	r3, [r7, #345]	@ 0x159
                                (sizeof (SNVMA_BankHeader_t) / sizeof (uint32_t)),
                                &SNVMA_FlashCallback);

        /* Check flash operation */
        if (flashFunRet == FM_ERROR)
 800cb80:	f897 3159 	ldrb.w	r3, [r7, #345]	@ 0x159
 800cb84:	2b02      	cmp	r3, #2
 800cb86:	f040 86e4 	bne.w	800d952 <SNVMA_FlashManagerCallback+0x1006>
        {
          /* Notify buffers callbacks */
          InvokeBufferCallback (SNVMA_FlashInfo.NvmId, SNVMA_OPERATION_FAILED);
 800cb8a:	4b25      	ldr	r3, [pc, #148]	@ (800cc20 <SNVMA_FlashManagerCallback+0x2d4>)
 800cb8c:	781b      	ldrb	r3, [r3, #0]
 800cb8e:	2101      	movs	r1, #1
 800cb90:	4618      	mov	r0, r3
 800cb92:	f001 fa07 	bl	800dfa4 <InvokeBufferCallback>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800cb96:	f3ef 8310 	mrs	r3, PRIMASK
 800cb9a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  return(result);
 800cb9e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0

          /* Enter critical section */
          UTILS_ENTER_CRITICAL_SECTION();
 800cba2:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  __ASM volatile ("cpsid i" : : : "memory");
 800cba6:	b672      	cpsid	i
}
 800cba8:	bf00      	nop

          /* Clear the NVM bitmask */
          SNVMA_IdBitmask &= ~(1u << SNVMA_FlashInfo.NvmId);
 800cbaa:	4b1d      	ldr	r3, [pc, #116]	@ (800cc20 <SNVMA_FlashManagerCallback+0x2d4>)
 800cbac:	781b      	ldrb	r3, [r3, #0]
 800cbae:	461a      	mov	r2, r3
 800cbb0:	2301      	movs	r3, #1
 800cbb2:	4093      	lsls	r3, r2
 800cbb4:	43da      	mvns	r2, r3
 800cbb6:	4b1f      	ldr	r3, [pc, #124]	@ (800cc34 <SNVMA_FlashManagerCallback+0x2e8>)
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	4013      	ands	r3, r2
 800cbbc:	4a1d      	ldr	r2, [pc, #116]	@ (800cc34 <SNVMA_FlashManagerCallback+0x2e8>)
 800cbbe:	6013      	str	r3, [r2, #0]

          /* Reset command pending flag */
          SNVMA_CommandPending = FALSE;
 800cbc0:	4b1d      	ldr	r3, [pc, #116]	@ (800cc38 <SNVMA_FlashManagerCallback+0x2ec>)
 800cbc2:	2200      	movs	r2, #0
 800cbc4:	701a      	strb	r2, [r3, #0]
 800cbc6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800cbca:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cbce:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800cbd2:	f383 8810 	msr	PRIMASK, r3
}
 800cbd6:	bf00      	nop
          /* Leave critical section */
          UTILS_EXIT_CRITICAL_SECTION ();
        }
      }

      break;
 800cbd8:	f000 bebb 	b.w	800d952 <SNVMA_FlashManagerCallback+0x1006>
    }

    case SNVMA_BUFFER_WRITE:
    {
      LOG_INFO_SYSTEM("\r\nSNVMA_FlashManagerCallback - Flash operation state : SNVMA_BUFFER_WRITE");
 800cbdc:	4a19      	ldr	r2, [pc, #100]	@ (800cc44 <SNVMA_FlashManagerCallback+0x2f8>)
 800cbde:	2101      	movs	r1, #1
 800cbe0:	2000      	movs	r0, #0
 800cbe2:	f7fd fbbb 	bl	800a35c <Log_Module_Print>

      /* Check flash operation status */
      if (Status == FM_OPERATION_COMPLETE)
 800cbe6:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800cbea:	f2a3 1359 	subw	r3, r3, #345	@ 0x159
 800cbee:	781b      	ldrb	r3, [r3, #0]
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	f040 8343 	bne.w	800d27c <SNVMA_FlashManagerCallback+0x930>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800cbf6:	f3ef 8310 	mrs	r3, PRIMASK
 800cbfa:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  return(result);
 800cbfe:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
      {
        /* Enter critical section */
        UTILS_ENTER_CRITICAL_SECTION();
 800cc02:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  __ASM volatile ("cpsid i" : : : "memory");
 800cc06:	b672      	cpsid	i
}
 800cc08:	bf00      	nop

        /* Update buffer Id */
        do
        {
          /* Search for the buffer to write - Not null */
          if (SNVMA_FlashInfo.BufferId < (SNVMA_MAX_NUMBER_BUFFER - 1))
 800cc0a:	4b05      	ldr	r3, [pc, #20]	@ (800cc20 <SNVMA_FlashManagerCallback+0x2d4>)
 800cc0c:	785b      	ldrb	r3, [r3, #1]
 800cc0e:	2b02      	cmp	r3, #2
 800cc10:	d81a      	bhi.n	800cc48 <SNVMA_FlashManagerCallback+0x2fc>
          {
            SNVMA_FlashInfo.BufferId++;
 800cc12:	4b03      	ldr	r3, [pc, #12]	@ (800cc20 <SNVMA_FlashManagerCallback+0x2d4>)
 800cc14:	785b      	ldrb	r3, [r3, #1]
 800cc16:	3301      	adds	r3, #1
 800cc18:	b2da      	uxtb	r2, r3
 800cc1a:	4b01      	ldr	r3, [pc, #4]	@ (800cc20 <SNVMA_FlashManagerCallback+0x2d4>)
 800cc1c:	705a      	strb	r2, [r3, #1]
 800cc1e:	e016      	b.n	800cc4e <SNVMA_FlashManagerCallback+0x302>
 800cc20:	20006a8c 	.word	0x20006a8c
 800cc24:	080305ec 	.word	0x080305ec
 800cc28:	20000068 	.word	0x20000068
 800cc2c:	20006a70 	.word	0x20006a70
 800cc30:	20006a80 	.word	0x20006a80
 800cc34:	20006a64 	.word	0x20006a64
 800cc38:	20006a61 	.word	0x20006a61
 800cc3c:	20006ab8 	.word	0x20006ab8
 800cc40:	08030638 	.word	0x08030638
 800cc44:	0803069c 	.word	0x0803069c
          }
          else
          {
            SNVMA_FlashInfo.BufferId = 0x00;
 800cc48:	4ba5      	ldr	r3, [pc, #660]	@ (800cee0 <SNVMA_FlashManagerCallback+0x594>)
 800cc4a:	2200      	movs	r2, #0
 800cc4c:	705a      	strb	r2, [r3, #1]
          }

          buffCnt++;
 800cc4e:	4ba5      	ldr	r3, [pc, #660]	@ (800cee4 <SNVMA_FlashManagerCallback+0x598>)
 800cc50:	781b      	ldrb	r3, [r3, #0]
 800cc52:	3301      	adds	r3, #1
 800cc54:	b2da      	uxtb	r2, r3
 800cc56:	4ba3      	ldr	r3, [pc, #652]	@ (800cee4 <SNVMA_FlashManagerCallback+0x598>)
 800cc58:	701a      	strb	r2, [r3, #0]
        } while ((SNVMA_NvmConfiguration[SNVMA_FlashInfo.NvmId].a_Buffers[SNVMA_FlashInfo.BufferId].p_Addr == NULL) &&
 800cc5a:	4ba1      	ldr	r3, [pc, #644]	@ (800cee0 <SNVMA_FlashManagerCallback+0x594>)
 800cc5c:	781b      	ldrb	r3, [r3, #0]
 800cc5e:	4618      	mov	r0, r3
 800cc60:	4b9f      	ldr	r3, [pc, #636]	@ (800cee0 <SNVMA_FlashManagerCallback+0x594>)
 800cc62:	785b      	ldrb	r3, [r3, #1]
 800cc64:	4619      	mov	r1, r3
 800cc66:	4aa0      	ldr	r2, [pc, #640]	@ (800cee8 <SNVMA_FlashManagerCallback+0x59c>)
 800cc68:	00c3      	lsls	r3, r0, #3
 800cc6a:	440b      	add	r3, r1
 800cc6c:	3304      	adds	r3, #4
 800cc6e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d103      	bne.n	800cc7e <SNVMA_FlashManagerCallback+0x332>
                 (buffCnt < SNVMA_MAX_NUMBER_BUFFER));
 800cc76:	4b9b      	ldr	r3, [pc, #620]	@ (800cee4 <SNVMA_FlashManagerCallback+0x598>)
 800cc78:	781b      	ldrb	r3, [r3, #0]
        } while ((SNVMA_NvmConfiguration[SNVMA_FlashInfo.NvmId].a_Buffers[SNVMA_FlashInfo.BufferId].p_Addr == NULL) &&
 800cc7a:	2b03      	cmp	r3, #3
 800cc7c:	d9c5      	bls.n	800cc0a <SNVMA_FlashManagerCallback+0x2be>
 800cc7e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800cc82:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cc86:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800cc8a:	f383 8810 	msr	PRIMASK, r3
}
 800cc8e:	bf00      	nop

        /* Leave critical section */
        UTILS_EXIT_CRITICAL_SECTION ();

        /* Check if there is still some buffer to write */
        if (buffCnt < SNVMA_MAX_NUMBER_BUFFER)
 800cc90:	4b94      	ldr	r3, [pc, #592]	@ (800cee4 <SNVMA_FlashManagerCallback+0x598>)
 800cc92:	781b      	ldrb	r3, [r3, #0]
 800cc94:	2b03      	cmp	r3, #3
 800cc96:	d857      	bhi.n	800cd48 <SNVMA_FlashManagerCallback+0x3fc>
        {
          flashFunRet = FM_Write (
            SNVMA_NvmConfiguration[SNVMA_FlashInfo.NvmId].a_Buffers[SNVMA_FlashInfo.BufferId].p_Addr,
 800cc98:	4b91      	ldr	r3, [pc, #580]	@ (800cee0 <SNVMA_FlashManagerCallback+0x594>)
 800cc9a:	781b      	ldrb	r3, [r3, #0]
 800cc9c:	4618      	mov	r0, r3
 800cc9e:	4b90      	ldr	r3, [pc, #576]	@ (800cee0 <SNVMA_FlashManagerCallback+0x594>)
 800cca0:	785b      	ldrb	r3, [r3, #1]
 800cca2:	4619      	mov	r1, r3
          flashFunRet = FM_Write (
 800cca4:	4a90      	ldr	r2, [pc, #576]	@ (800cee8 <SNVMA_FlashManagerCallback+0x59c>)
 800cca6:	00c3      	lsls	r3, r0, #3
 800cca8:	440b      	add	r3, r1
 800ccaa:	3304      	adds	r3, #4
 800ccac:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
            SNVMA_NvmConfiguration[SNVMA_FlashInfo.NvmId].p_BankForWrite->ap_BufferAddr[SNVMA_FlashInfo.BufferId],
 800ccb0:	4b8b      	ldr	r3, [pc, #556]	@ (800cee0 <SNVMA_FlashManagerCallback+0x594>)
 800ccb2:	781b      	ldrb	r3, [r3, #0]
 800ccb4:	4a8c      	ldr	r2, [pc, #560]	@ (800cee8 <SNVMA_FlashManagerCallback+0x59c>)
 800ccb6:	019b      	lsls	r3, r3, #6
 800ccb8:	4413      	add	r3, r2
 800ccba:	3308      	adds	r3, #8
 800ccbc:	681a      	ldr	r2, [r3, #0]
 800ccbe:	4b88      	ldr	r3, [pc, #544]	@ (800cee0 <SNVMA_FlashManagerCallback+0x594>)
 800ccc0:	785b      	ldrb	r3, [r3, #1]
          flashFunRet = FM_Write (
 800ccc2:	009b      	lsls	r3, r3, #2
 800ccc4:	4413      	add	r3, r2
 800ccc6:	6859      	ldr	r1, [r3, #4]
            SNVMA_NvmConfiguration[SNVMA_FlashInfo.NvmId].a_Buffers[SNVMA_FlashInfo.BufferId].Size,
 800ccc8:	4b85      	ldr	r3, [pc, #532]	@ (800cee0 <SNVMA_FlashManagerCallback+0x594>)
 800ccca:	781b      	ldrb	r3, [r3, #0]
 800cccc:	461d      	mov	r5, r3
 800ccce:	4b84      	ldr	r3, [pc, #528]	@ (800cee0 <SNVMA_FlashManagerCallback+0x594>)
 800ccd0:	785b      	ldrb	r3, [r3, #1]
 800ccd2:	461c      	mov	r4, r3
 800ccd4:	4a84      	ldr	r2, [pc, #528]	@ (800cee8 <SNVMA_FlashManagerCallback+0x59c>)
 800ccd6:	00eb      	lsls	r3, r5, #3
 800ccd8:	4423      	add	r3, r4
 800ccda:	3304      	adds	r3, #4
 800ccdc:	00db      	lsls	r3, r3, #3
 800ccde:	4413      	add	r3, r2
 800cce0:	685b      	ldr	r3, [r3, #4]
          flashFunRet = FM_Write (
 800cce2:	461a      	mov	r2, r3
 800cce4:	4b81      	ldr	r3, [pc, #516]	@ (800ceec <SNVMA_FlashManagerCallback+0x5a0>)
 800cce6:	f7fe fc25 	bl	800b534 <FM_Write>
 800ccea:	4603      	mov	r3, r0
 800ccec:	f887 3159 	strb.w	r3, [r7, #345]	@ 0x159
            &SNVMA_FlashCallback);

          /* Check flash operation */
          if (flashFunRet == FM_ERROR)
 800ccf0:	f897 3159 	ldrb.w	r3, [r7, #345]	@ 0x159
 800ccf4:	2b02      	cmp	r3, #2
 800ccf6:	f040 862e 	bne.w	800d956 <SNVMA_FlashManagerCallback+0x100a>
          {
            /* Notify buffers callbacks */
            InvokeBufferCallback (SNVMA_FlashInfo.NvmId, SNVMA_OPERATION_FAILED);
 800ccfa:	4b79      	ldr	r3, [pc, #484]	@ (800cee0 <SNVMA_FlashManagerCallback+0x594>)
 800ccfc:	781b      	ldrb	r3, [r3, #0]
 800ccfe:	2101      	movs	r1, #1
 800cd00:	4618      	mov	r0, r3
 800cd02:	f001 f94f 	bl	800dfa4 <InvokeBufferCallback>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800cd06:	f3ef 8310 	mrs	r3, PRIMASK
 800cd0a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  return(result);
 800cd0e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0

            /* Enter critical section */
            UTILS_ENTER_CRITICAL_SECTION();
 800cd12:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
  __ASM volatile ("cpsid i" : : : "memory");
 800cd16:	b672      	cpsid	i
}
 800cd18:	bf00      	nop

            /* Clear the NVM bitmask */
            SNVMA_IdBitmask &= ~(1u << SNVMA_FlashInfo.NvmId);
 800cd1a:	4b71      	ldr	r3, [pc, #452]	@ (800cee0 <SNVMA_FlashManagerCallback+0x594>)
 800cd1c:	781b      	ldrb	r3, [r3, #0]
 800cd1e:	461a      	mov	r2, r3
 800cd20:	2301      	movs	r3, #1
 800cd22:	4093      	lsls	r3, r2
 800cd24:	43da      	mvns	r2, r3
 800cd26:	4b72      	ldr	r3, [pc, #456]	@ (800cef0 <SNVMA_FlashManagerCallback+0x5a4>)
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	4013      	ands	r3, r2
 800cd2c:	4a70      	ldr	r2, [pc, #448]	@ (800cef0 <SNVMA_FlashManagerCallback+0x5a4>)
 800cd2e:	6013      	str	r3, [r2, #0]

            /* Reset command pending flag */
            SNVMA_CommandPending = FALSE;
 800cd30:	4b70      	ldr	r3, [pc, #448]	@ (800cef4 <SNVMA_FlashManagerCallback+0x5a8>)
 800cd32:	2200      	movs	r2, #0
 800cd34:	701a      	strb	r2, [r3, #0]
 800cd36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800cd3a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cd3e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800cd42:	f383 8810 	msr	PRIMASK, r3
}
 800cd46:	e302      	b.n	800d34e <SNVMA_FlashManagerCallback+0xa02>
        }
        /* Buffer write is over */
        else
        {
          /* Check the integrity of the whole write operation */
          if (IsCrcOk (SNVMA_NvmConfiguration[SNVMA_FlashInfo.NvmId].p_BankForWrite->p_StartAddr) == FALSE)
 800cd48:	4b65      	ldr	r3, [pc, #404]	@ (800cee0 <SNVMA_FlashManagerCallback+0x594>)
 800cd4a:	781b      	ldrb	r3, [r3, #0]
 800cd4c:	4a66      	ldr	r2, [pc, #408]	@ (800cee8 <SNVMA_FlashManagerCallback+0x59c>)
 800cd4e:	019b      	lsls	r3, r3, #6
 800cd50:	4413      	add	r3, r2
 800cd52:	3308      	adds	r3, #8
 800cd54:	681b      	ldr	r3, [r3, #0]
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	4618      	mov	r0, r3
 800cd5a:	f000 fead 	bl	800dab8 <IsCrcOk>
 800cd5e:	4603      	mov	r3, r0
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	d15a      	bne.n	800ce1a <SNVMA_FlashManagerCallback+0x4ce>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800cd64:	f3ef 8310 	mrs	r3, PRIMASK
 800cd68:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return(result);
 800cd6c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
          {
            /* Enter critical section */
            UTILS_ENTER_CRITICAL_SECTION();
 800cd70:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
  __ASM volatile ("cpsid i" : : : "memory");
 800cd74:	b672      	cpsid	i
}
 800cd76:	bf00      	nop

            /* Reschedule the whole write operation but first erase the bank */
            SNVMA_FlashInfo.FlashOpState = SNVMA_RETRY_WRITE;
 800cd78:	4b59      	ldr	r3, [pc, #356]	@ (800cee0 <SNVMA_FlashManagerCallback+0x594>)
 800cd7a:	2203      	movs	r2, #3
 800cd7c:	709a      	strb	r2, [r3, #2]
 800cd7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cd82:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cd86:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cd8a:	f383 8810 	msr	PRIMASK, r3
}
 800cd8e:	bf00      	nop

            /* Leave critical section */
            UTILS_EXIT_CRITICAL_SECTION ();

            flashFunRet = FM_Erase ((((uint32_t)
                                      SNVMA_NvmConfiguration[SNVMA_FlashInfo.NvmId].p_BankForWrite->p_StartAddr -
 800cd90:	4b53      	ldr	r3, [pc, #332]	@ (800cee0 <SNVMA_FlashManagerCallback+0x594>)
 800cd92:	781b      	ldrb	r3, [r3, #0]
 800cd94:	4a54      	ldr	r2, [pc, #336]	@ (800cee8 <SNVMA_FlashManagerCallback+0x59c>)
 800cd96:	019b      	lsls	r3, r3, #6
 800cd98:	4413      	add	r3, r2
 800cd9a:	3308      	adds	r3, #8
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	f103 4378 	add.w	r3, r3, #4160749568	@ 0xf8000000
            flashFunRet = FM_Erase ((((uint32_t)
 800cda4:	0b58      	lsrs	r0, r3, #13
                                        FLASH_BASE_NS) / FLASH_PAGE_SIZE),
                                      SNVMA_NvmConfiguration[SNVMA_FlashInfo.NvmId].BankSize,
 800cda6:	4b4e      	ldr	r3, [pc, #312]	@ (800cee0 <SNVMA_FlashManagerCallback+0x594>)
 800cda8:	781b      	ldrb	r3, [r3, #0]
 800cdaa:	4a4f      	ldr	r2, [pc, #316]	@ (800cee8 <SNVMA_FlashManagerCallback+0x59c>)
 800cdac:	019b      	lsls	r3, r3, #6
 800cdae:	4413      	add	r3, r2
 800cdb0:	3301      	adds	r3, #1
 800cdb2:	781b      	ldrb	r3, [r3, #0]
            flashFunRet = FM_Erase ((((uint32_t)
 800cdb4:	4a4d      	ldr	r2, [pc, #308]	@ (800ceec <SNVMA_FlashManagerCallback+0x5a0>)
 800cdb6:	4619      	mov	r1, r3
 800cdb8:	f7fe fc44 	bl	800b644 <FM_Erase>
 800cdbc:	4603      	mov	r3, r0
 800cdbe:	f887 3159 	strb.w	r3, [r7, #345]	@ 0x159
                                      &SNVMA_FlashCallback);

            /* Check flash operation */
            if (flashFunRet == FM_ERROR)
 800cdc2:	f897 3159 	ldrb.w	r3, [r7, #345]	@ 0x159
 800cdc6:	2b02      	cmp	r3, #2
 800cdc8:	f040 85c5 	bne.w	800d956 <SNVMA_FlashManagerCallback+0x100a>
            {
              /* Notify buffers callbacks */
              InvokeBufferCallback (SNVMA_FlashInfo.NvmId, SNVMA_OPERATION_FAILED);
 800cdcc:	4b44      	ldr	r3, [pc, #272]	@ (800cee0 <SNVMA_FlashManagerCallback+0x594>)
 800cdce:	781b      	ldrb	r3, [r3, #0]
 800cdd0:	2101      	movs	r1, #1
 800cdd2:	4618      	mov	r0, r3
 800cdd4:	f001 f8e6 	bl	800dfa4 <InvokeBufferCallback>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800cdd8:	f3ef 8310 	mrs	r3, PRIMASK
 800cddc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return(result);
 800cde0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0

              /* Enter critical section */
              UTILS_ENTER_CRITICAL_SECTION();
 800cde4:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
  __ASM volatile ("cpsid i" : : : "memory");
 800cde8:	b672      	cpsid	i
}
 800cdea:	bf00      	nop

              /* Clear the NVM bitmask */
              SNVMA_IdBitmask &= ~(1u << SNVMA_FlashInfo.NvmId);
 800cdec:	4b3c      	ldr	r3, [pc, #240]	@ (800cee0 <SNVMA_FlashManagerCallback+0x594>)
 800cdee:	781b      	ldrb	r3, [r3, #0]
 800cdf0:	461a      	mov	r2, r3
 800cdf2:	2301      	movs	r3, #1
 800cdf4:	4093      	lsls	r3, r2
 800cdf6:	43da      	mvns	r2, r3
 800cdf8:	4b3d      	ldr	r3, [pc, #244]	@ (800cef0 <SNVMA_FlashManagerCallback+0x5a4>)
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	4013      	ands	r3, r2
 800cdfe:	4a3c      	ldr	r2, [pc, #240]	@ (800cef0 <SNVMA_FlashManagerCallback+0x5a4>)
 800ce00:	6013      	str	r3, [r2, #0]

              /* Reset command pending flag */
              SNVMA_CommandPending = FALSE;
 800ce02:	4b3c      	ldr	r3, [pc, #240]	@ (800cef4 <SNVMA_FlashManagerCallback+0x5a8>)
 800ce04:	2200      	movs	r2, #0
 800ce06:	701a      	strb	r2, [r3, #0]
 800ce08:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800ce0c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ce10:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800ce14:	f383 8810 	msr	PRIMASK, r3
}
 800ce18:	e299      	b.n	800d34e <SNVMA_FlashManagerCallback+0xa02>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800ce1a:	f3ef 8310 	mrs	r3, PRIMASK
 800ce1e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return(result);
 800ce22:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
            }
          }
          else
          {
            /* Enter critical section */
            UTILS_ENTER_CRITICAL_SECTION();
 800ce26:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  __ASM volatile ("cpsid i" : : : "memory");
 800ce2a:	b672      	cpsid	i
}
 800ce2c:	bf00      	nop

            /* Pursue with a bank swap */
            tmpBank = SNVMA_NvmConfiguration[SNVMA_FlashInfo.NvmId].p_BankForRestore;
 800ce2e:	4b2c      	ldr	r3, [pc, #176]	@ (800cee0 <SNVMA_FlashManagerCallback+0x594>)
 800ce30:	781b      	ldrb	r3, [r3, #0]
 800ce32:	4a2d      	ldr	r2, [pc, #180]	@ (800cee8 <SNVMA_FlashManagerCallback+0x59c>)
 800ce34:	019b      	lsls	r3, r3, #6
 800ce36:	4413      	add	r3, r2
 800ce38:	330c      	adds	r3, #12
 800ce3a:	681b      	ldr	r3, [r3, #0]
 800ce3c:	4a2e      	ldr	r2, [pc, #184]	@ (800cef8 <SNVMA_FlashManagerCallback+0x5ac>)
 800ce3e:	6013      	str	r3, [r2, #0]

            /* Make the restore bank pointing the new valid bank */
            SNVMA_NvmConfiguration[SNVMA_FlashInfo.NvmId].p_BankForRestore =
              SNVMA_NvmConfiguration[SNVMA_FlashInfo.NvmId].p_BankForWrite;
 800ce40:	4b27      	ldr	r3, [pc, #156]	@ (800cee0 <SNVMA_FlashManagerCallback+0x594>)
 800ce42:	781b      	ldrb	r3, [r3, #0]
 800ce44:	4619      	mov	r1, r3
            SNVMA_NvmConfiguration[SNVMA_FlashInfo.NvmId].p_BankForRestore =
 800ce46:	4b26      	ldr	r3, [pc, #152]	@ (800cee0 <SNVMA_FlashManagerCallback+0x594>)
 800ce48:	781b      	ldrb	r3, [r3, #0]
 800ce4a:	4618      	mov	r0, r3
              SNVMA_NvmConfiguration[SNVMA_FlashInfo.NvmId].p_BankForWrite;
 800ce4c:	4a26      	ldr	r2, [pc, #152]	@ (800cee8 <SNVMA_FlashManagerCallback+0x59c>)
 800ce4e:	018b      	lsls	r3, r1, #6
 800ce50:	4413      	add	r3, r2
 800ce52:	3308      	adds	r3, #8
 800ce54:	681a      	ldr	r2, [r3, #0]
            SNVMA_NvmConfiguration[SNVMA_FlashInfo.NvmId].p_BankForRestore =
 800ce56:	4924      	ldr	r1, [pc, #144]	@ (800cee8 <SNVMA_FlashManagerCallback+0x59c>)
 800ce58:	0183      	lsls	r3, r0, #6
 800ce5a:	440b      	add	r3, r1
 800ce5c:	330c      	adds	r3, #12
 800ce5e:	601a      	str	r2, [r3, #0]

            /* Check if it is the last bank element of the list */
            if (SNVMA_NvmConfiguration[SNVMA_FlashInfo.NvmId].p_BankForWrite ==
 800ce60:	4b1f      	ldr	r3, [pc, #124]	@ (800cee0 <SNVMA_FlashManagerCallback+0x594>)
 800ce62:	781b      	ldrb	r3, [r3, #0]
 800ce64:	4a20      	ldr	r2, [pc, #128]	@ (800cee8 <SNVMA_FlashManagerCallback+0x59c>)
 800ce66:	019b      	lsls	r3, r3, #6
 800ce68:	4413      	add	r3, r2
 800ce6a:	3308      	adds	r3, #8
 800ce6c:	681a      	ldr	r2, [r3, #0]
                &SNVMA_NvmConfiguration[SNVMA_FlashInfo.NvmId].
 800ce6e:	4b1c      	ldr	r3, [pc, #112]	@ (800cee0 <SNVMA_FlashManagerCallback+0x594>)
 800ce70:	781b      	ldrb	r3, [r3, #0]
 800ce72:	491d      	ldr	r1, [pc, #116]	@ (800cee8 <SNVMA_FlashManagerCallback+0x59c>)
 800ce74:	019b      	lsls	r3, r3, #6
 800ce76:	440b      	add	r3, r1
 800ce78:	3304      	adds	r3, #4
 800ce7a:	6819      	ldr	r1, [r3, #0]
                  p_BankList[(SNVMA_NvmConfiguration[SNVMA_FlashInfo.NvmId].BankNumber - 1)])
 800ce7c:	4b18      	ldr	r3, [pc, #96]	@ (800cee0 <SNVMA_FlashManagerCallback+0x594>)
 800ce7e:	781b      	ldrb	r3, [r3, #0]
 800ce80:	4819      	ldr	r0, [pc, #100]	@ (800cee8 <SNVMA_FlashManagerCallback+0x59c>)
 800ce82:	019b      	lsls	r3, r3, #6
 800ce84:	4403      	add	r3, r0
 800ce86:	781b      	ldrb	r3, [r3, #0]
 800ce88:	4618      	mov	r0, r3
 800ce8a:	4603      	mov	r3, r0
 800ce8c:	009b      	lsls	r3, r3, #2
 800ce8e:	4403      	add	r3, r0
 800ce90:	009b      	lsls	r3, r3, #2
 800ce92:	3b14      	subs	r3, #20
                &SNVMA_NvmConfiguration[SNVMA_FlashInfo.NvmId].
 800ce94:	440b      	add	r3, r1
            if (SNVMA_NvmConfiguration[SNVMA_FlashInfo.NvmId].p_BankForWrite ==
 800ce96:	429a      	cmp	r2, r3
 800ce98:	d110      	bne.n	800cebc <SNVMA_FlashManagerCallback+0x570>
            {
              SNVMA_NvmConfiguration[SNVMA_FlashInfo.NvmId].p_BankForWrite =
                &SNVMA_NvmConfiguration[SNVMA_FlashInfo.NvmId].p_BankList[0x00];
 800ce9a:	4b11      	ldr	r3, [pc, #68]	@ (800cee0 <SNVMA_FlashManagerCallback+0x594>)
 800ce9c:	781b      	ldrb	r3, [r3, #0]
 800ce9e:	4619      	mov	r1, r3
              SNVMA_NvmConfiguration[SNVMA_FlashInfo.NvmId].p_BankForWrite =
 800cea0:	4b0f      	ldr	r3, [pc, #60]	@ (800cee0 <SNVMA_FlashManagerCallback+0x594>)
 800cea2:	781b      	ldrb	r3, [r3, #0]
 800cea4:	4618      	mov	r0, r3
                &SNVMA_NvmConfiguration[SNVMA_FlashInfo.NvmId].p_BankList[0x00];
 800cea6:	4a10      	ldr	r2, [pc, #64]	@ (800cee8 <SNVMA_FlashManagerCallback+0x59c>)
 800cea8:	018b      	lsls	r3, r1, #6
 800ceaa:	4413      	add	r3, r2
 800ceac:	3304      	adds	r3, #4
 800ceae:	681a      	ldr	r2, [r3, #0]
              SNVMA_NvmConfiguration[SNVMA_FlashInfo.NvmId].p_BankForWrite =
 800ceb0:	490d      	ldr	r1, [pc, #52]	@ (800cee8 <SNVMA_FlashManagerCallback+0x59c>)
 800ceb2:	0183      	lsls	r3, r0, #6
 800ceb4:	440b      	add	r3, r1
 800ceb6:	3308      	adds	r3, #8
 800ceb8:	601a      	str	r2, [r3, #0]
 800ceba:	e00c      	b.n	800ced6 <SNVMA_FlashManagerCallback+0x58a>
            }
            else
            {
              SNVMA_NvmConfiguration[SNVMA_FlashInfo.NvmId].p_BankForWrite++;
 800cebc:	4b08      	ldr	r3, [pc, #32]	@ (800cee0 <SNVMA_FlashManagerCallback+0x594>)
 800cebe:	781b      	ldrb	r3, [r3, #0]
 800cec0:	4909      	ldr	r1, [pc, #36]	@ (800cee8 <SNVMA_FlashManagerCallback+0x59c>)
 800cec2:	019a      	lsls	r2, r3, #6
 800cec4:	440a      	add	r2, r1
 800cec6:	3208      	adds	r2, #8
 800cec8:	6812      	ldr	r2, [r2, #0]
 800ceca:	3214      	adds	r2, #20
 800cecc:	4906      	ldr	r1, [pc, #24]	@ (800cee8 <SNVMA_FlashManagerCallback+0x59c>)
 800cece:	019b      	lsls	r3, r3, #6
 800ced0:	440b      	add	r3, r1
 800ced2:	3308      	adds	r3, #8
 800ced4:	601a      	str	r2, [r3, #0]
            }

            /* Update buffer addresses from old write bank */
            for (uint8_t cnt = 0x00;
 800ced6:	2300      	movs	r3, #0
 800ced8:	f887 315f 	strb.w	r3, [r7, #351]	@ 0x15f
 800cedc:	e04c      	b.n	800cf78 <SNVMA_FlashManagerCallback+0x62c>
 800cede:	bf00      	nop
 800cee0:	20006a8c 	.word	0x20006a8c
 800cee4:	20006ab8 	.word	0x20006ab8
 800cee8:	20000068 	.word	0x20000068
 800ceec:	20006a80 	.word	0x20006a80
 800cef0:	20006a64 	.word	0x20006a64
 800cef4:	20006a61 	.word	0x20006a61
 800cef8:	20006abc 	.word	0x20006abc
                 cnt < SNVMA_MAX_NUMBER_BUFFER;
                 cnt++)
            {
              if (SNVMA_NvmConfiguration[SNVMA_FlashInfo.NvmId].p_BankForRestore->ap_BufferAddr[cnt] != NULL)
 800cefc:	4bac      	ldr	r3, [pc, #688]	@ (800d1b0 <SNVMA_FlashManagerCallback+0x864>)
 800cefe:	781b      	ldrb	r3, [r3, #0]
 800cf00:	4aac      	ldr	r2, [pc, #688]	@ (800d1b4 <SNVMA_FlashManagerCallback+0x868>)
 800cf02:	019b      	lsls	r3, r3, #6
 800cf04:	4413      	add	r3, r2
 800cf06:	330c      	adds	r3, #12
 800cf08:	681a      	ldr	r2, [r3, #0]
 800cf0a:	f897 315f 	ldrb.w	r3, [r7, #351]	@ 0x15f
 800cf0e:	009b      	lsls	r3, r3, #2
 800cf10:	4413      	add	r3, r2
 800cf12:	685b      	ldr	r3, [r3, #4]
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d02a      	beq.n	800cf6e <SNVMA_FlashManagerCallback+0x622>
              {
                SNVMA_NvmConfiguration[SNVMA_FlashInfo.NvmId].p_BankForWrite->ap_BufferAddr[cnt] =
                  SNVMA_NvmConfiguration[SNVMA_FlashInfo.NvmId].p_BankForRestore->ap_BufferAddr[cnt] -
                  SNVMA_NvmConfiguration[SNVMA_FlashInfo.NvmId].p_BankForRestore->p_StartAddr +
                  SNVMA_NvmConfiguration[SNVMA_FlashInfo.NvmId].p_BankForWrite->p_StartAddr;
 800cf18:	4ba5      	ldr	r3, [pc, #660]	@ (800d1b0 <SNVMA_FlashManagerCallback+0x864>)
 800cf1a:	781b      	ldrb	r3, [r3, #0]
 800cf1c:	4aa5      	ldr	r2, [pc, #660]	@ (800d1b4 <SNVMA_FlashManagerCallback+0x868>)
 800cf1e:	019b      	lsls	r3, r3, #6
 800cf20:	4413      	add	r3, r2
 800cf22:	3308      	adds	r3, #8
 800cf24:	681b      	ldr	r3, [r3, #0]
 800cf26:	681a      	ldr	r2, [r3, #0]
                  SNVMA_NvmConfiguration[SNVMA_FlashInfo.NvmId].p_BankForRestore->ap_BufferAddr[cnt] -
 800cf28:	4ba1      	ldr	r3, [pc, #644]	@ (800d1b0 <SNVMA_FlashManagerCallback+0x864>)
 800cf2a:	781b      	ldrb	r3, [r3, #0]
 800cf2c:	49a1      	ldr	r1, [pc, #644]	@ (800d1b4 <SNVMA_FlashManagerCallback+0x868>)
 800cf2e:	019b      	lsls	r3, r3, #6
 800cf30:	440b      	add	r3, r1
 800cf32:	330c      	adds	r3, #12
 800cf34:	6819      	ldr	r1, [r3, #0]
 800cf36:	f897 315f 	ldrb.w	r3, [r7, #351]	@ 0x15f
 800cf3a:	009b      	lsls	r3, r3, #2
 800cf3c:	440b      	add	r3, r1
 800cf3e:	6859      	ldr	r1, [r3, #4]
                  SNVMA_NvmConfiguration[SNVMA_FlashInfo.NvmId].p_BankForRestore->p_StartAddr +
 800cf40:	4b9b      	ldr	r3, [pc, #620]	@ (800d1b0 <SNVMA_FlashManagerCallback+0x864>)
 800cf42:	781b      	ldrb	r3, [r3, #0]
 800cf44:	489b      	ldr	r0, [pc, #620]	@ (800d1b4 <SNVMA_FlashManagerCallback+0x868>)
 800cf46:	019b      	lsls	r3, r3, #6
 800cf48:	4403      	add	r3, r0
 800cf4a:	330c      	adds	r3, #12
 800cf4c:	681b      	ldr	r3, [r3, #0]
 800cf4e:	681b      	ldr	r3, [r3, #0]
                  SNVMA_NvmConfiguration[SNVMA_FlashInfo.NvmId].p_BankForRestore->ap_BufferAddr[cnt] -
 800cf50:	1acb      	subs	r3, r1, r3
                  SNVMA_NvmConfiguration[SNVMA_FlashInfo.NvmId].p_BankForRestore->p_StartAddr +
 800cf52:	4618      	mov	r0, r3
                SNVMA_NvmConfiguration[SNVMA_FlashInfo.NvmId].p_BankForWrite->ap_BufferAddr[cnt] =
 800cf54:	4b96      	ldr	r3, [pc, #600]	@ (800d1b0 <SNVMA_FlashManagerCallback+0x864>)
 800cf56:	781b      	ldrb	r3, [r3, #0]
 800cf58:	4996      	ldr	r1, [pc, #600]	@ (800d1b4 <SNVMA_FlashManagerCallback+0x868>)
 800cf5a:	019b      	lsls	r3, r3, #6
 800cf5c:	440b      	add	r3, r1
 800cf5e:	3308      	adds	r3, #8
 800cf60:	6819      	ldr	r1, [r3, #0]
 800cf62:	f897 315f 	ldrb.w	r3, [r7, #351]	@ 0x15f
                  SNVMA_NvmConfiguration[SNVMA_FlashInfo.NvmId].p_BankForRestore->p_StartAddr +
 800cf66:	4402      	add	r2, r0
                SNVMA_NvmConfiguration[SNVMA_FlashInfo.NvmId].p_BankForWrite->ap_BufferAddr[cnt] =
 800cf68:	009b      	lsls	r3, r3, #2
 800cf6a:	440b      	add	r3, r1
 800cf6c:	605a      	str	r2, [r3, #4]
                 cnt++)
 800cf6e:	f897 315f 	ldrb.w	r3, [r7, #351]	@ 0x15f
 800cf72:	3301      	adds	r3, #1
 800cf74:	f887 315f 	strb.w	r3, [r7, #351]	@ 0x15f
                 cnt < SNVMA_MAX_NUMBER_BUFFER;
 800cf78:	f897 315f 	ldrb.w	r3, [r7, #351]	@ 0x15f
 800cf7c:	2b03      	cmp	r3, #3
 800cf7e:	d9bd      	bls.n	800cefc <SNVMA_FlashManagerCallback+0x5b0>
 800cf80:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800cf84:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cf88:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800cf8c:	f383 8810 	msr	PRIMASK, r3
}
 800cf90:	bf00      	nop

            /* Leave critical section */
            UTILS_EXIT_CRITICAL_SECTION ();

            /* Erase the old restore bank */
            if (tmpBank != NULL)
 800cf92:	4b89      	ldr	r3, [pc, #548]	@ (800d1b8 <SNVMA_FlashManagerCallback+0x86c>)
 800cf94:	681b      	ldr	r3, [r3, #0]
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	d055      	beq.n	800d046 <SNVMA_FlashManagerCallback+0x6fa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800cf9a:	f3ef 8310 	mrs	r3, PRIMASK
 800cf9e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return(result);
 800cfa2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
            {
              /* Enter critical section */
              UTILS_ENTER_CRITICAL_SECTION();
 800cfa6:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  __ASM volatile ("cpsid i" : : : "memory");
 800cfaa:	b672      	cpsid	i
}
 800cfac:	bf00      	nop

              /* Update flash operation information */
              SNVMA_FlashInfo.FlashOpState = SNVMA_ERASE_BANK;
 800cfae:	4b80      	ldr	r3, [pc, #512]	@ (800d1b0 <SNVMA_FlashManagerCallback+0x864>)
 800cfb0:	2202      	movs	r2, #2
 800cfb2:	709a      	strb	r2, [r3, #2]
 800cfb4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800cfb8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cfbc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800cfc0:	f383 8810 	msr	PRIMASK, r3
}
 800cfc4:	bf00      	nop

              /* Leave critical section */
              UTILS_EXIT_CRITICAL_SECTION ();

              flashFunRet = FM_Erase ((((uint32_t)tmpBank->p_StartAddr - FLASH_BASE_NS) / FLASH_PAGE_SIZE),
 800cfc6:	4b7c      	ldr	r3, [pc, #496]	@ (800d1b8 <SNVMA_FlashManagerCallback+0x86c>)
 800cfc8:	681b      	ldr	r3, [r3, #0]
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	f103 4378 	add.w	r3, r3, #4160749568	@ 0xf8000000
 800cfd0:	0b58      	lsrs	r0, r3, #13
                                                  SNVMA_NvmConfiguration[SNVMA_FlashInfo.NvmId].BankSize,
 800cfd2:	4b77      	ldr	r3, [pc, #476]	@ (800d1b0 <SNVMA_FlashManagerCallback+0x864>)
 800cfd4:	781b      	ldrb	r3, [r3, #0]
 800cfd6:	4a77      	ldr	r2, [pc, #476]	@ (800d1b4 <SNVMA_FlashManagerCallback+0x868>)
 800cfd8:	019b      	lsls	r3, r3, #6
 800cfda:	4413      	add	r3, r2
 800cfdc:	3301      	adds	r3, #1
 800cfde:	781b      	ldrb	r3, [r3, #0]
              flashFunRet = FM_Erase ((((uint32_t)tmpBank->p_StartAddr - FLASH_BASE_NS) / FLASH_PAGE_SIZE),
 800cfe0:	4a76      	ldr	r2, [pc, #472]	@ (800d1bc <SNVMA_FlashManagerCallback+0x870>)
 800cfe2:	4619      	mov	r1, r3
 800cfe4:	f7fe fb2e 	bl	800b644 <FM_Erase>
 800cfe8:	4603      	mov	r3, r0
 800cfea:	f887 3159 	strb.w	r3, [r7, #345]	@ 0x159
                                                  &SNVMA_FlashCallback);

              /* Check flash operation */
              if (flashFunRet == FM_ERROR)
 800cfee:	f897 3159 	ldrb.w	r3, [r7, #345]	@ 0x159
 800cff2:	2b02      	cmp	r3, #2
 800cff4:	f040 84af 	bne.w	800d956 <SNVMA_FlashManagerCallback+0x100a>
              {
                /* Notify buffers callbacks */
                InvokeBufferCallback (SNVMA_FlashInfo.NvmId, SNVMA_OPERATION_FAILED);
 800cff8:	4b6d      	ldr	r3, [pc, #436]	@ (800d1b0 <SNVMA_FlashManagerCallback+0x864>)
 800cffa:	781b      	ldrb	r3, [r3, #0]
 800cffc:	2101      	movs	r1, #1
 800cffe:	4618      	mov	r0, r3
 800d000:	f000 ffd0 	bl	800dfa4 <InvokeBufferCallback>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800d004:	f3ef 8310 	mrs	r3, PRIMASK
 800d008:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return(result);
 800d00c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88

                /* Enter critical section */
                UTILS_ENTER_CRITICAL_SECTION();
 800d010:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
  __ASM volatile ("cpsid i" : : : "memory");
 800d014:	b672      	cpsid	i
}
 800d016:	bf00      	nop

                /* Clear the NVM bitmask */
                SNVMA_IdBitmask &= ~(1u << SNVMA_FlashInfo.NvmId);
 800d018:	4b65      	ldr	r3, [pc, #404]	@ (800d1b0 <SNVMA_FlashManagerCallback+0x864>)
 800d01a:	781b      	ldrb	r3, [r3, #0]
 800d01c:	461a      	mov	r2, r3
 800d01e:	2301      	movs	r3, #1
 800d020:	4093      	lsls	r3, r2
 800d022:	43da      	mvns	r2, r3
 800d024:	4b66      	ldr	r3, [pc, #408]	@ (800d1c0 <SNVMA_FlashManagerCallback+0x874>)
 800d026:	681b      	ldr	r3, [r3, #0]
 800d028:	4013      	ands	r3, r2
 800d02a:	4a65      	ldr	r2, [pc, #404]	@ (800d1c0 <SNVMA_FlashManagerCallback+0x874>)
 800d02c:	6013      	str	r3, [r2, #0]

                /* Reset command pending flag */
                SNVMA_CommandPending = FALSE;
 800d02e:	4b65      	ldr	r3, [pc, #404]	@ (800d1c4 <SNVMA_FlashManagerCallback+0x878>)
 800d030:	2200      	movs	r2, #0
 800d032:	701a      	strb	r2, [r3, #0]
 800d034:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800d038:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d03c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d040:	f383 8810 	msr	PRIMASK, r3
}
 800d044:	e183      	b.n	800d34e <SNVMA_FlashManagerCallback+0xa02>
              }
            }
            else
            {
              /* Notify buffers callbacks */
              InvokeBufferCallback (SNVMA_FlashInfo.NvmId, SNVMA_OPERATION_COMPLETE);
 800d046:	4b5a      	ldr	r3, [pc, #360]	@ (800d1b0 <SNVMA_FlashManagerCallback+0x864>)
 800d048:	781b      	ldrb	r3, [r3, #0]
 800d04a:	2100      	movs	r1, #0
 800d04c:	4618      	mov	r0, r3
 800d04e:	f000 ffa9 	bl	800dfa4 <InvokeBufferCallback>

              /* Is there any new request ? */
              if (SNVMA_NvmConfiguration[SNVMA_FlashInfo.NvmId].PendingBufferWriteOp == 0x00)
 800d052:	4b57      	ldr	r3, [pc, #348]	@ (800d1b0 <SNVMA_FlashManagerCallback+0x864>)
 800d054:	781b      	ldrb	r3, [r3, #0]
 800d056:	4a57      	ldr	r2, [pc, #348]	@ (800d1b4 <SNVMA_FlashManagerCallback+0x868>)
 800d058:	019b      	lsls	r3, r3, #6
 800d05a:	4413      	add	r3, r2
 800d05c:	3302      	adds	r3, #2
 800d05e:	781b      	ldrb	r3, [r3, #0]
 800d060:	2b00      	cmp	r3, #0
 800d062:	d11d      	bne.n	800d0a0 <SNVMA_FlashManagerCallback+0x754>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800d064:	f3ef 8310 	mrs	r3, PRIMASK
 800d068:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  return(result);
 800d06c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
              {
                /* Enter critical section */
                UTILS_ENTER_CRITICAL_SECTION();
 800d070:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  __ASM volatile ("cpsid i" : : : "memory");
 800d074:	b672      	cpsid	i
}
 800d076:	bf00      	nop

                /* No more action on this NVM, clear the NVM bitmask */
                SNVMA_IdBitmask &= ~(1u << SNVMA_FlashInfo.NvmId);
 800d078:	4b4d      	ldr	r3, [pc, #308]	@ (800d1b0 <SNVMA_FlashManagerCallback+0x864>)
 800d07a:	781b      	ldrb	r3, [r3, #0]
 800d07c:	461a      	mov	r2, r3
 800d07e:	2301      	movs	r3, #1
 800d080:	4093      	lsls	r3, r2
 800d082:	43da      	mvns	r2, r3
 800d084:	4b4e      	ldr	r3, [pc, #312]	@ (800d1c0 <SNVMA_FlashManagerCallback+0x874>)
 800d086:	681b      	ldr	r3, [r3, #0]
 800d088:	4013      	ands	r3, r2
 800d08a:	4a4d      	ldr	r2, [pc, #308]	@ (800d1c0 <SNVMA_FlashManagerCallback+0x874>)
 800d08c:	6013      	str	r3, [r2, #0]
 800d08e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800d092:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d096:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800d09a:	f383 8810 	msr	PRIMASK, r3
}
 800d09e:	bf00      	nop
                /* Leave critical section */
                UTILS_EXIT_CRITICAL_SECTION ();
              }

              /* Check whether there is another pending requests */
              if (SNVMA_IdBitmask != 0x00000000)
 800d0a0:	4b47      	ldr	r3, [pc, #284]	@ (800d1c0 <SNVMA_FlashManagerCallback+0x874>)
 800d0a2:	681b      	ldr	r3, [r3, #0]
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	f000 80cf 	beq.w	800d248 <SNVMA_FlashManagerCallback+0x8fc>
              {
                /* Determine which NVM is impacted */
                for (uint8_t cnt = 0x00;
 800d0aa:	2300      	movs	r3, #0
 800d0ac:	f887 315e 	strb.w	r3, [r7, #350]	@ 0x15e
 800d0b0:	e046      	b.n	800d140 <SNVMA_FlashManagerCallback+0x7f4>
                     cnt < SNVMA_MAX_NUMBER_NVM;
                     cnt++)
                {
                  if ((SNVMA_IdBitmask & (1u << cnt)) != 0x00)
 800d0b2:	f897 315e 	ldrb.w	r3, [r7, #350]	@ 0x15e
 800d0b6:	2201      	movs	r2, #1
 800d0b8:	409a      	lsls	r2, r3
 800d0ba:	4b41      	ldr	r3, [pc, #260]	@ (800d1c0 <SNVMA_FlashManagerCallback+0x874>)
 800d0bc:	681b      	ldr	r3, [r3, #0]
 800d0be:	4013      	ands	r3, r2
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d038      	beq.n	800d136 <SNVMA_FlashManagerCallback+0x7ea>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800d0c4:	f3ef 8310 	mrs	r3, PRIMASK
 800d0c8:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return(result);
 800d0ca:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
                  {
                    /* Enter critical section */
                    UTILS_ENTER_CRITICAL_SECTION();
 800d0cc:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  __ASM volatile ("cpsid i" : : : "memory");
 800d0d0:	b672      	cpsid	i
}
 800d0d2:	bf00      	nop

                    /* Update flash information */
                    SNVMA_FlashInfo.NvmId = cnt;
 800d0d4:	4a36      	ldr	r2, [pc, #216]	@ (800d1b0 <SNVMA_FlashManagerCallback+0x864>)
 800d0d6:	f897 315e 	ldrb.w	r3, [r7, #350]	@ 0x15e
 800d0da:	7013      	strb	r3, [r2, #0]
                    SNVMA_FlashInfo.FlashOpState = SNVMA_HEADER_WRITE;
 800d0dc:	4b34      	ldr	r3, [pc, #208]	@ (800d1b0 <SNVMA_FlashManagerCallback+0x864>)
 800d0de:	2200      	movs	r2, #0
 800d0e0:	709a      	strb	r2, [r3, #2]

                    /* Determine which buffer is impacted */
                    for (uint8_t idx = 0x00;
 800d0e2:	2300      	movs	r3, #0
 800d0e4:	f887 315d 	strb.w	r3, [r7, #349]	@ 0x15d
 800d0e8:	e019      	b.n	800d11e <SNVMA_FlashManagerCallback+0x7d2>
                        idx < SNVMA_MAX_NUMBER_BUFFER;
                        idx++)
                    {
                      if ((SNVMA_NvmConfiguration[SNVMA_FlashInfo.NvmId].PendingBufferWriteOp & (1u << idx)) != 0x00)
 800d0ea:	4b31      	ldr	r3, [pc, #196]	@ (800d1b0 <SNVMA_FlashManagerCallback+0x864>)
 800d0ec:	781b      	ldrb	r3, [r3, #0]
 800d0ee:	4a31      	ldr	r2, [pc, #196]	@ (800d1b4 <SNVMA_FlashManagerCallback+0x868>)
 800d0f0:	019b      	lsls	r3, r3, #6
 800d0f2:	4413      	add	r3, r2
 800d0f4:	3302      	adds	r3, #2
 800d0f6:	781b      	ldrb	r3, [r3, #0]
 800d0f8:	461a      	mov	r2, r3
 800d0fa:	f897 315d 	ldrb.w	r3, [r7, #349]	@ 0x15d
 800d0fe:	fa22 f303 	lsr.w	r3, r2, r3
 800d102:	f003 0301 	and.w	r3, r3, #1
 800d106:	2b00      	cmp	r3, #0
 800d108:	d004      	beq.n	800d114 <SNVMA_FlashManagerCallback+0x7c8>
                      {
                        SNVMA_FlashInfo.BufferId = idx;
 800d10a:	4a29      	ldr	r2, [pc, #164]	@ (800d1b0 <SNVMA_FlashManagerCallback+0x864>)
 800d10c:	f897 315d 	ldrb.w	r3, [r7, #349]	@ 0x15d
 800d110:	7053      	strb	r3, [r2, #1]

                        break;
 800d112:	e008      	b.n	800d126 <SNVMA_FlashManagerCallback+0x7da>
                        idx++)
 800d114:	f897 315d 	ldrb.w	r3, [r7, #349]	@ 0x15d
 800d118:	3301      	adds	r3, #1
 800d11a:	f887 315d 	strb.w	r3, [r7, #349]	@ 0x15d
                        idx < SNVMA_MAX_NUMBER_BUFFER;
 800d11e:	f897 315d 	ldrb.w	r3, [r7, #349]	@ 0x15d
 800d122:	2b03      	cmp	r3, #3
 800d124:	d9e1      	bls.n	800d0ea <SNVMA_FlashManagerCallback+0x79e>
 800d126:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800d12a:	67bb      	str	r3, [r7, #120]	@ 0x78
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d12c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d12e:	f383 8810 	msr	PRIMASK, r3
}
 800d132:	bf00      	nop
                    }

                    /* Leave critical section */
                    UTILS_EXIT_CRITICAL_SECTION ();

                    break;
 800d134:	e008      	b.n	800d148 <SNVMA_FlashManagerCallback+0x7fc>
                     cnt++)
 800d136:	f897 315e 	ldrb.w	r3, [r7, #350]	@ 0x15e
 800d13a:	3301      	adds	r3, #1
 800d13c:	f887 315e 	strb.w	r3, [r7, #350]	@ 0x15e
                     cnt < SNVMA_MAX_NUMBER_NVM;
 800d140:	f897 315e 	ldrb.w	r3, [r7, #350]	@ 0x15e
 800d144:	2b1f      	cmp	r3, #31
 800d146:	d9b4      	bls.n	800d0b2 <SNVMA_FlashManagerCallback+0x766>
                  }
                }

                LOG_INFO_SYSTEM("\r\nSNVMA_FlashManagerCallback - Flash operation state : SNVMA_BUFFER_WRITE - Start the pending write operation");
 800d148:	4a1f      	ldr	r2, [pc, #124]	@ (800d1c8 <SNVMA_FlashManagerCallback+0x87c>)
 800d14a:	2101      	movs	r1, #1
 800d14c:	2000      	movs	r0, #0
 800d14e:	f7fd f905 	bl	800a35c <Log_Module_Print>

                /* Start the pending write operation */
                flashFunRet = StartFlashWrite (SNVMA_FlashInfo.NvmId);
 800d152:	4b17      	ldr	r3, [pc, #92]	@ (800d1b0 <SNVMA_FlashManagerCallback+0x864>)
 800d154:	781b      	ldrb	r3, [r3, #0]
 800d156:	4618      	mov	r0, r3
 800d158:	f000 fe2e 	bl	800ddb8 <StartFlashWrite>
 800d15c:	4603      	mov	r3, r0
 800d15e:	f887 3159 	strb.w	r3, [r7, #345]	@ 0x159

                /* Check flash operation */
                if (flashFunRet == FM_ERROR)
 800d162:	f897 3159 	ldrb.w	r3, [r7, #345]	@ 0x159
 800d166:	2b02      	cmp	r3, #2
 800d168:	d130      	bne.n	800d1cc <SNVMA_FlashManagerCallback+0x880>
                {
                  /* Notify buffers callbacks */
                  InvokeBufferCallback (SNVMA_FlashInfo.NvmId, SNVMA_OPERATION_FAILED);
 800d16a:	4b11      	ldr	r3, [pc, #68]	@ (800d1b0 <SNVMA_FlashManagerCallback+0x864>)
 800d16c:	781b      	ldrb	r3, [r3, #0]
 800d16e:	2101      	movs	r1, #1
 800d170:	4618      	mov	r0, r3
 800d172:	f000 ff17 	bl	800dfa4 <InvokeBufferCallback>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800d176:	f3ef 8310 	mrs	r3, PRIMASK
 800d17a:	673b      	str	r3, [r7, #112]	@ 0x70
  return(result);
 800d17c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70

                  /* Enter critical section */
                  UTILS_ENTER_CRITICAL_SECTION();
 800d17e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  __ASM volatile ("cpsid i" : : : "memory");
 800d182:	b672      	cpsid	i
}
 800d184:	bf00      	nop

                  /* Clear the NVM bitmask */
                  SNVMA_IdBitmask &= ~(1u << SNVMA_FlashInfo.NvmId);
 800d186:	4b0a      	ldr	r3, [pc, #40]	@ (800d1b0 <SNVMA_FlashManagerCallback+0x864>)
 800d188:	781b      	ldrb	r3, [r3, #0]
 800d18a:	461a      	mov	r2, r3
 800d18c:	2301      	movs	r3, #1
 800d18e:	4093      	lsls	r3, r2
 800d190:	43da      	mvns	r2, r3
 800d192:	4b0b      	ldr	r3, [pc, #44]	@ (800d1c0 <SNVMA_FlashManagerCallback+0x874>)
 800d194:	681b      	ldr	r3, [r3, #0]
 800d196:	4013      	ands	r3, r2
 800d198:	4a09      	ldr	r2, [pc, #36]	@ (800d1c0 <SNVMA_FlashManagerCallback+0x874>)
 800d19a:	6013      	str	r3, [r2, #0]

                  /* Reset command pending flag */
                  SNVMA_CommandPending = FALSE;
 800d19c:	4b09      	ldr	r3, [pc, #36]	@ (800d1c4 <SNVMA_FlashManagerCallback+0x878>)
 800d19e:	2200      	movs	r2, #0
 800d1a0:	701a      	strb	r2, [r3, #0]
 800d1a2:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800d1a6:	677b      	str	r3, [r7, #116]	@ 0x74
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d1a8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d1aa:	f383 8810 	msr	PRIMASK, r3
}
 800d1ae:	e0ce      	b.n	800d34e <SNVMA_FlashManagerCallback+0xa02>
 800d1b0:	20006a8c 	.word	0x20006a8c
 800d1b4:	20000068 	.word	0x20000068
 800d1b8:	20006abc 	.word	0x20006abc
 800d1bc:	20006a80 	.word	0x20006a80
 800d1c0:	20006a64 	.word	0x20006a64
 800d1c4:	20006a61 	.word	0x20006a61
 800d1c8:	080306e8 	.word	0x080306e8
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800d1cc:	f3ef 8310 	mrs	r3, PRIMASK
 800d1d0:	66bb      	str	r3, [r7, #104]	@ 0x68
  return(result);
 800d1d2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
                  UTILS_EXIT_CRITICAL_SECTION ();
                }
                else
                {
                  /* Enter critical section */
                  UTILS_ENTER_CRITICAL_SECTION();
 800d1d4:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
  __ASM volatile ("cpsid i" : : : "memory");
 800d1d8:	b672      	cpsid	i
}
 800d1da:	bf00      	nop

                  /* Set requests active */
                  SNVMA_NvmConfiguration[SNVMA_FlashInfo.NvmId].PendingBufferWriteOp |=
 800d1dc:	4bad      	ldr	r3, [pc, #692]	@ (800d494 <SNVMA_FlashManagerCallback+0xb48>)
 800d1de:	781b      	ldrb	r3, [r3, #0]
 800d1e0:	4aad      	ldr	r2, [pc, #692]	@ (800d498 <SNVMA_FlashManagerCallback+0xb4c>)
 800d1e2:	019b      	lsls	r3, r3, #6
 800d1e4:	4413      	add	r3, r2
 800d1e6:	3302      	adds	r3, #2
 800d1e8:	781b      	ldrb	r3, [r3, #0]
 800d1ea:	b25a      	sxtb	r2, r3
                    (SNVMA_NvmConfiguration[SNVMA_FlashInfo.NvmId].PendingBufferWriteOp << SNVMA_MAX_NUMBER_BUFFER);
 800d1ec:	4ba9      	ldr	r3, [pc, #676]	@ (800d494 <SNVMA_FlashManagerCallback+0xb48>)
 800d1ee:	781b      	ldrb	r3, [r3, #0]
 800d1f0:	49a9      	ldr	r1, [pc, #676]	@ (800d498 <SNVMA_FlashManagerCallback+0xb4c>)
 800d1f2:	019b      	lsls	r3, r3, #6
 800d1f4:	440b      	add	r3, r1
 800d1f6:	3302      	adds	r3, #2
 800d1f8:	781b      	ldrb	r3, [r3, #0]
 800d1fa:	011b      	lsls	r3, r3, #4
                  SNVMA_NvmConfiguration[SNVMA_FlashInfo.NvmId].PendingBufferWriteOp |=
 800d1fc:	b25b      	sxtb	r3, r3
 800d1fe:	4313      	orrs	r3, r2
 800d200:	b25a      	sxtb	r2, r3
 800d202:	4ba4      	ldr	r3, [pc, #656]	@ (800d494 <SNVMA_FlashManagerCallback+0xb48>)
 800d204:	781b      	ldrb	r3, [r3, #0]
 800d206:	b2d1      	uxtb	r1, r2
 800d208:	4aa3      	ldr	r2, [pc, #652]	@ (800d498 <SNVMA_FlashManagerCallback+0xb4c>)
 800d20a:	019b      	lsls	r3, r3, #6
 800d20c:	4413      	add	r3, r2
 800d20e:	3302      	adds	r3, #2
 800d210:	460a      	mov	r2, r1
 800d212:	701a      	strb	r2, [r3, #0]

                  /* Erase pendings requests */
                  SNVMA_NvmConfiguration[SNVMA_FlashInfo.NvmId].PendingBufferWriteOp &= 0xF0;
 800d214:	4b9f      	ldr	r3, [pc, #636]	@ (800d494 <SNVMA_FlashManagerCallback+0xb48>)
 800d216:	781b      	ldrb	r3, [r3, #0]
 800d218:	4a9f      	ldr	r2, [pc, #636]	@ (800d498 <SNVMA_FlashManagerCallback+0xb4c>)
 800d21a:	019b      	lsls	r3, r3, #6
 800d21c:	4413      	add	r3, r2
 800d21e:	3302      	adds	r3, #2
 800d220:	781b      	ldrb	r3, [r3, #0]
 800d222:	4a9c      	ldr	r2, [pc, #624]	@ (800d494 <SNVMA_FlashManagerCallback+0xb48>)
 800d224:	7812      	ldrb	r2, [r2, #0]
 800d226:	4610      	mov	r0, r2
 800d228:	f023 030f 	bic.w	r3, r3, #15
 800d22c:	b2d9      	uxtb	r1, r3
 800d22e:	4a9a      	ldr	r2, [pc, #616]	@ (800d498 <SNVMA_FlashManagerCallback+0xb4c>)
 800d230:	0183      	lsls	r3, r0, #6
 800d232:	4413      	add	r3, r2
 800d234:	3302      	adds	r3, #2
 800d236:	460a      	mov	r2, r1
 800d238:	701a      	strb	r2, [r3, #0]
 800d23a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d23e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d240:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d242:	f383 8810 	msr	PRIMASK, r3
}
 800d246:	e082      	b.n	800d34e <SNVMA_FlashManagerCallback+0xa02>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800d248:	f3ef 8210 	mrs	r2, PRIMASK
 800d24c:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800d250:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800d254:	601a      	str	r2, [r3, #0]
  return(result);
 800d256:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800d25a:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800d25e:	681b      	ldr	r3, [r3, #0]
              }
              /* No more stuff to do */
              else
              {
                /* Enter critical section */
                UTILS_ENTER_CRITICAL_SECTION();
 800d260:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  __ASM volatile ("cpsid i" : : : "memory");
 800d264:	b672      	cpsid	i
}
 800d266:	bf00      	nop

                /* Reset command pending flag */
                SNVMA_CommandPending = FALSE;
 800d268:	4b8c      	ldr	r3, [pc, #560]	@ (800d49c <SNVMA_FlashManagerCallback+0xb50>)
 800d26a:	2200      	movs	r2, #0
 800d26c:	701a      	strb	r2, [r3, #0]
 800d26e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800d272:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d274:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d276:	f383 8810 	msr	PRIMASK, r3
}
 800d27a:	e068      	b.n	800d34e <SNVMA_FlashManagerCallback+0xa02>
        }
      }
      /* Status == FM_OPERATION_AVAILABLE */
      else
      {
        LOG_INFO_SYSTEM("\r\nSNVMA_FlashManagerCallback - Flash operation state : SNVMA_BUFFER_WRITE - Retry write operation");
 800d27c:	4a88      	ldr	r2, [pc, #544]	@ (800d4a0 <SNVMA_FlashManagerCallback+0xb54>)
 800d27e:	2101      	movs	r1, #1
 800d280:	2000      	movs	r0, #0
 800d282:	f7fd f86b 	bl	800a35c <Log_Module_Print>

        /* Retry the buffer write */
        flashFunRet = FM_Write (
          SNVMA_NvmConfiguration[SNVMA_FlashInfo.NvmId].a_Buffers[SNVMA_FlashInfo.BufferId].p_Addr,
 800d286:	4b83      	ldr	r3, [pc, #524]	@ (800d494 <SNVMA_FlashManagerCallback+0xb48>)
 800d288:	781b      	ldrb	r3, [r3, #0]
 800d28a:	4618      	mov	r0, r3
 800d28c:	4b81      	ldr	r3, [pc, #516]	@ (800d494 <SNVMA_FlashManagerCallback+0xb48>)
 800d28e:	785b      	ldrb	r3, [r3, #1]
 800d290:	4619      	mov	r1, r3
        flashFunRet = FM_Write (
 800d292:	4a81      	ldr	r2, [pc, #516]	@ (800d498 <SNVMA_FlashManagerCallback+0xb4c>)
 800d294:	00c3      	lsls	r3, r0, #3
 800d296:	440b      	add	r3, r1
 800d298:	3304      	adds	r3, #4
 800d29a:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
          SNVMA_NvmConfiguration[SNVMA_FlashInfo.NvmId].p_BankForWrite->ap_BufferAddr[SNVMA_FlashInfo.BufferId],
 800d29e:	4b7d      	ldr	r3, [pc, #500]	@ (800d494 <SNVMA_FlashManagerCallback+0xb48>)
 800d2a0:	781b      	ldrb	r3, [r3, #0]
 800d2a2:	4a7d      	ldr	r2, [pc, #500]	@ (800d498 <SNVMA_FlashManagerCallback+0xb4c>)
 800d2a4:	019b      	lsls	r3, r3, #6
 800d2a6:	4413      	add	r3, r2
 800d2a8:	3308      	adds	r3, #8
 800d2aa:	681a      	ldr	r2, [r3, #0]
 800d2ac:	4b79      	ldr	r3, [pc, #484]	@ (800d494 <SNVMA_FlashManagerCallback+0xb48>)
 800d2ae:	785b      	ldrb	r3, [r3, #1]
        flashFunRet = FM_Write (
 800d2b0:	009b      	lsls	r3, r3, #2
 800d2b2:	4413      	add	r3, r2
 800d2b4:	6859      	ldr	r1, [r3, #4]
          SNVMA_NvmConfiguration[SNVMA_FlashInfo.NvmId].a_Buffers[SNVMA_FlashInfo.BufferId].Size,
 800d2b6:	4b77      	ldr	r3, [pc, #476]	@ (800d494 <SNVMA_FlashManagerCallback+0xb48>)
 800d2b8:	781b      	ldrb	r3, [r3, #0]
 800d2ba:	461d      	mov	r5, r3
 800d2bc:	4b75      	ldr	r3, [pc, #468]	@ (800d494 <SNVMA_FlashManagerCallback+0xb48>)
 800d2be:	785b      	ldrb	r3, [r3, #1]
 800d2c0:	461c      	mov	r4, r3
 800d2c2:	4a75      	ldr	r2, [pc, #468]	@ (800d498 <SNVMA_FlashManagerCallback+0xb4c>)
 800d2c4:	00eb      	lsls	r3, r5, #3
 800d2c6:	4423      	add	r3, r4
 800d2c8:	3304      	adds	r3, #4
 800d2ca:	00db      	lsls	r3, r3, #3
 800d2cc:	4413      	add	r3, r2
 800d2ce:	685b      	ldr	r3, [r3, #4]
        flashFunRet = FM_Write (
 800d2d0:	461a      	mov	r2, r3
 800d2d2:	4b74      	ldr	r3, [pc, #464]	@ (800d4a4 <SNVMA_FlashManagerCallback+0xb58>)
 800d2d4:	f7fe f92e 	bl	800b534 <FM_Write>
 800d2d8:	4603      	mov	r3, r0
 800d2da:	f887 3159 	strb.w	r3, [r7, #345]	@ 0x159
          &SNVMA_FlashCallback);

        /* Check flash operation */
        if (flashFunRet == FM_ERROR)
 800d2de:	f897 3159 	ldrb.w	r3, [r7, #345]	@ 0x159
 800d2e2:	2b02      	cmp	r3, #2
 800d2e4:	f040 8337 	bne.w	800d956 <SNVMA_FlashManagerCallback+0x100a>
        {
          /* Notify buffers callbacks */
          InvokeBufferCallback (SNVMA_FlashInfo.NvmId, SNVMA_OPERATION_FAILED);
 800d2e8:	4b6a      	ldr	r3, [pc, #424]	@ (800d494 <SNVMA_FlashManagerCallback+0xb48>)
 800d2ea:	781b      	ldrb	r3, [r3, #0]
 800d2ec:	2101      	movs	r1, #1
 800d2ee:	4618      	mov	r0, r3
 800d2f0:	f000 fe58 	bl	800dfa4 <InvokeBufferCallback>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800d2f4:	f3ef 8210 	mrs	r2, PRIMASK
 800d2f8:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800d2fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d300:	601a      	str	r2, [r3, #0]
  return(result);
 800d302:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800d306:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d30a:	681b      	ldr	r3, [r3, #0]

          /* Enter critical section */
          UTILS_ENTER_CRITICAL_SECTION();
 800d30c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  __ASM volatile ("cpsid i" : : : "memory");
 800d310:	b672      	cpsid	i
}
 800d312:	bf00      	nop

          /* Clear the NVM bitmask */
          SNVMA_IdBitmask &= ~(1u << SNVMA_FlashInfo.NvmId);
 800d314:	4b5f      	ldr	r3, [pc, #380]	@ (800d494 <SNVMA_FlashManagerCallback+0xb48>)
 800d316:	781b      	ldrb	r3, [r3, #0]
 800d318:	461a      	mov	r2, r3
 800d31a:	2301      	movs	r3, #1
 800d31c:	4093      	lsls	r3, r2
 800d31e:	43da      	mvns	r2, r3
 800d320:	4b61      	ldr	r3, [pc, #388]	@ (800d4a8 <SNVMA_FlashManagerCallback+0xb5c>)
 800d322:	681b      	ldr	r3, [r3, #0]
 800d324:	4013      	ands	r3, r2
 800d326:	4a60      	ldr	r2, [pc, #384]	@ (800d4a8 <SNVMA_FlashManagerCallback+0xb5c>)
 800d328:	6013      	str	r3, [r2, #0]

          /* Reset command pending flag */
          SNVMA_CommandPending = FALSE;
 800d32a:	4b5c      	ldr	r3, [pc, #368]	@ (800d49c <SNVMA_FlashManagerCallback+0xb50>)
 800d32c:	2200      	movs	r2, #0
 800d32e:	701a      	strb	r2, [r3, #0]
 800d330:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800d334:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d338:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 800d33c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d33e:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800d342:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d346:	681b      	ldr	r3, [r3, #0]
 800d348:	f383 8810 	msr	PRIMASK, r3
}
 800d34c:	bf00      	nop

          /* Leave critical section */
          UTILS_EXIT_CRITICAL_SECTION ();
        }
      }
      break;
 800d34e:	e302      	b.n	800d956 <SNVMA_FlashManagerCallback+0x100a>
    }

    case SNVMA_ERASE_BANK:
    {
      LOG_INFO_SYSTEM("\r\nSNVMA_FlashManagerCallback - Flash operation state : SNVMA_ERASE_BANK");
 800d350:	4a56      	ldr	r2, [pc, #344]	@ (800d4ac <SNVMA_FlashManagerCallback+0xb60>)
 800d352:	2101      	movs	r1, #1
 800d354:	2000      	movs	r0, #0
 800d356:	f7fd f801 	bl	800a35c <Log_Module_Print>

      /* Check flash operation status */
      if (Status == FM_OPERATION_COMPLETE)
 800d35a:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800d35e:	f2a3 1359 	subw	r3, r3, #345	@ 0x159
 800d362:	781b      	ldrb	r3, [r3, #0]
 800d364:	2b00      	cmp	r3, #0
 800d366:	f040 8160 	bne.w	800d62a <SNVMA_FlashManagerCallback+0xcde>
      {
        /* Notify buffers callbacks */
        InvokeBufferCallback (SNVMA_FlashInfo.NvmId, SNVMA_OPERATION_COMPLETE);
 800d36a:	4b4a      	ldr	r3, [pc, #296]	@ (800d494 <SNVMA_FlashManagerCallback+0xb48>)
 800d36c:	781b      	ldrb	r3, [r3, #0]
 800d36e:	2100      	movs	r1, #0
 800d370:	4618      	mov	r0, r3
 800d372:	f000 fe17 	bl	800dfa4 <InvokeBufferCallback>

        /* Is there any new request ? */
        if (SNVMA_NvmConfiguration[SNVMA_FlashInfo.NvmId].PendingBufferWriteOp == 0x00)
 800d376:	4b47      	ldr	r3, [pc, #284]	@ (800d494 <SNVMA_FlashManagerCallback+0xb48>)
 800d378:	781b      	ldrb	r3, [r3, #0]
 800d37a:	4a47      	ldr	r2, [pc, #284]	@ (800d498 <SNVMA_FlashManagerCallback+0xb4c>)
 800d37c:	019b      	lsls	r3, r3, #6
 800d37e:	4413      	add	r3, r2
 800d380:	3302      	adds	r3, #2
 800d382:	781b      	ldrb	r3, [r3, #0]
 800d384:	2b00      	cmp	r3, #0
 800d386:	d129      	bne.n	800d3dc <SNVMA_FlashManagerCallback+0xa90>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800d388:	f3ef 8210 	mrs	r2, PRIMASK
 800d38c:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800d390:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800d394:	601a      	str	r2, [r3, #0]
  return(result);
 800d396:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800d39a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800d39e:	681b      	ldr	r3, [r3, #0]
        {
          /* Enter critical section */
          UTILS_ENTER_CRITICAL_SECTION();
 800d3a0:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
  __ASM volatile ("cpsid i" : : : "memory");
 800d3a4:	b672      	cpsid	i
}
 800d3a6:	bf00      	nop

          /* No more action on this NVM, clear the NVM bitmask */
          SNVMA_IdBitmask &= ~(1u << SNVMA_FlashInfo.NvmId);
 800d3a8:	4b3a      	ldr	r3, [pc, #232]	@ (800d494 <SNVMA_FlashManagerCallback+0xb48>)
 800d3aa:	781b      	ldrb	r3, [r3, #0]
 800d3ac:	461a      	mov	r2, r3
 800d3ae:	2301      	movs	r3, #1
 800d3b0:	4093      	lsls	r3, r2
 800d3b2:	43da      	mvns	r2, r3
 800d3b4:	4b3c      	ldr	r3, [pc, #240]	@ (800d4a8 <SNVMA_FlashManagerCallback+0xb5c>)
 800d3b6:	681b      	ldr	r3, [r3, #0]
 800d3b8:	4013      	ands	r3, r2
 800d3ba:	4a3b      	ldr	r2, [pc, #236]	@ (800d4a8 <SNVMA_FlashManagerCallback+0xb5c>)
 800d3bc:	6013      	str	r3, [r2, #0]
 800d3be:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800d3c2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800d3c6:	f8d7 2140 	ldr.w	r2, [r7, #320]	@ 0x140
 800d3ca:	601a      	str	r2, [r3, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d3cc:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800d3d0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800d3d4:	681b      	ldr	r3, [r3, #0]
 800d3d6:	f383 8810 	msr	PRIMASK, r3
}
 800d3da:	bf00      	nop
          /* Leave critical section */
          UTILS_EXIT_CRITICAL_SECTION ();
        }

        /* Check whether there is another pending requests */
        if (SNVMA_IdBitmask != 0x00000000)
 800d3dc:	4b32      	ldr	r3, [pc, #200]	@ (800d4a8 <SNVMA_FlashManagerCallback+0xb5c>)
 800d3de:	681b      	ldr	r3, [r3, #0]
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	f000 8100 	beq.w	800d5e6 <SNVMA_FlashManagerCallback+0xc9a>
        {
          /* Determine which NVM is impacted */
          for (uint8_t cnt = 0x00;
 800d3e6:	2300      	movs	r3, #0
 800d3e8:	f887 315c 	strb.w	r3, [r7, #348]	@ 0x15c
 800d3ec:	e065      	b.n	800d4ba <SNVMA_FlashManagerCallback+0xb6e>
                cnt < SNVMA_MAX_NUMBER_NVM;
                cnt++)
          {
            if ((SNVMA_IdBitmask & (1u << cnt)) != 0x00)
 800d3ee:	f897 315c 	ldrb.w	r3, [r7, #348]	@ 0x15c
 800d3f2:	2201      	movs	r2, #1
 800d3f4:	409a      	lsls	r2, r3
 800d3f6:	4b2c      	ldr	r3, [pc, #176]	@ (800d4a8 <SNVMA_FlashManagerCallback+0xb5c>)
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	4013      	ands	r3, r2
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d057      	beq.n	800d4b0 <SNVMA_FlashManagerCallback+0xb64>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800d400:	f3ef 8210 	mrs	r2, PRIMASK
 800d404:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800d408:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800d40c:	601a      	str	r2, [r3, #0]
  return(result);
 800d40e:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800d412:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800d416:	681b      	ldr	r3, [r3, #0]
            {
              /* Enter critical section */
              UTILS_ENTER_CRITICAL_SECTION();
 800d418:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  __ASM volatile ("cpsid i" : : : "memory");
 800d41c:	b672      	cpsid	i
}
 800d41e:	bf00      	nop

              /* Update flash information */
              SNVMA_FlashInfo.NvmId = cnt;
 800d420:	4a1c      	ldr	r2, [pc, #112]	@ (800d494 <SNVMA_FlashManagerCallback+0xb48>)
 800d422:	f897 315c 	ldrb.w	r3, [r7, #348]	@ 0x15c
 800d426:	7013      	strb	r3, [r2, #0]
              SNVMA_FlashInfo.FlashOpState = SNVMA_HEADER_WRITE;
 800d428:	4b1a      	ldr	r3, [pc, #104]	@ (800d494 <SNVMA_FlashManagerCallback+0xb48>)
 800d42a:	2200      	movs	r2, #0
 800d42c:	709a      	strb	r2, [r3, #2]

              /* Determine which buffer is impacted */
              for (uint8_t idx = 0x00;
 800d42e:	2300      	movs	r3, #0
 800d430:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
 800d434:	e019      	b.n	800d46a <SNVMA_FlashManagerCallback+0xb1e>
                   idx < SNVMA_MAX_NUMBER_BUFFER;
                   idx++)
              {
                if ((SNVMA_NvmConfiguration[SNVMA_FlashInfo.NvmId].PendingBufferWriteOp & (1u << idx)) != 0x00)
 800d436:	4b17      	ldr	r3, [pc, #92]	@ (800d494 <SNVMA_FlashManagerCallback+0xb48>)
 800d438:	781b      	ldrb	r3, [r3, #0]
 800d43a:	4a17      	ldr	r2, [pc, #92]	@ (800d498 <SNVMA_FlashManagerCallback+0xb4c>)
 800d43c:	019b      	lsls	r3, r3, #6
 800d43e:	4413      	add	r3, r2
 800d440:	3302      	adds	r3, #2
 800d442:	781b      	ldrb	r3, [r3, #0]
 800d444:	461a      	mov	r2, r3
 800d446:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800d44a:	fa22 f303 	lsr.w	r3, r2, r3
 800d44e:	f003 0301 	and.w	r3, r3, #1
 800d452:	2b00      	cmp	r3, #0
 800d454:	d004      	beq.n	800d460 <SNVMA_FlashManagerCallback+0xb14>
                {
                  SNVMA_FlashInfo.BufferId = idx;
 800d456:	4a0f      	ldr	r2, [pc, #60]	@ (800d494 <SNVMA_FlashManagerCallback+0xb48>)
 800d458:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800d45c:	7053      	strb	r3, [r2, #1]

                  break;
 800d45e:	e008      	b.n	800d472 <SNVMA_FlashManagerCallback+0xb26>
                   idx++)
 800d460:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800d464:	3301      	adds	r3, #1
 800d466:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
                   idx < SNVMA_MAX_NUMBER_BUFFER;
 800d46a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800d46e:	2b03      	cmp	r3, #3
 800d470:	d9e1      	bls.n	800d436 <SNVMA_FlashManagerCallback+0xaea>
 800d472:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800d476:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800d47a:	f8d7 2138 	ldr.w	r2, [r7, #312]	@ 0x138
 800d47e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d480:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800d484:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800d488:	681b      	ldr	r3, [r3, #0]
 800d48a:	f383 8810 	msr	PRIMASK, r3
}
 800d48e:	bf00      	nop
              }

              /* Leave critical section */
              UTILS_EXIT_CRITICAL_SECTION ();

              break;
 800d490:	e017      	b.n	800d4c2 <SNVMA_FlashManagerCallback+0xb76>
 800d492:	bf00      	nop
 800d494:	20006a8c 	.word	0x20006a8c
 800d498:	20000068 	.word	0x20000068
 800d49c:	20006a61 	.word	0x20006a61
 800d4a0:	08030758 	.word	0x08030758
 800d4a4:	20006a80 	.word	0x20006a80
 800d4a8:	20006a64 	.word	0x20006a64
 800d4ac:	080307bc 	.word	0x080307bc
                cnt++)
 800d4b0:	f897 315c 	ldrb.w	r3, [r7, #348]	@ 0x15c
 800d4b4:	3301      	adds	r3, #1
 800d4b6:	f887 315c 	strb.w	r3, [r7, #348]	@ 0x15c
                cnt < SNVMA_MAX_NUMBER_NVM;
 800d4ba:	f897 315c 	ldrb.w	r3, [r7, #348]	@ 0x15c
 800d4be:	2b1f      	cmp	r3, #31
 800d4c0:	d995      	bls.n	800d3ee <SNVMA_FlashManagerCallback+0xaa2>
            }
          }

          LOG_INFO_SYSTEM("\r\nSNVMA_FlashManagerCallback - Flash operation state : SNVMA_ERASE_BANK - Start the pending write operation");
 800d4c2:	4a9d      	ldr	r2, [pc, #628]	@ (800d738 <SNVMA_FlashManagerCallback+0xdec>)
 800d4c4:	2101      	movs	r1, #1
 800d4c6:	2000      	movs	r0, #0
 800d4c8:	f7fc ff48 	bl	800a35c <Log_Module_Print>

          /* Start the pending write operation */
          flashFunRet = StartFlashWrite (SNVMA_FlashInfo.NvmId);
 800d4cc:	4b9b      	ldr	r3, [pc, #620]	@ (800d73c <SNVMA_FlashManagerCallback+0xdf0>)
 800d4ce:	781b      	ldrb	r3, [r3, #0]
 800d4d0:	4618      	mov	r0, r3
 800d4d2:	f000 fc71 	bl	800ddb8 <StartFlashWrite>
 800d4d6:	4603      	mov	r3, r0
 800d4d8:	f887 3159 	strb.w	r3, [r7, #345]	@ 0x159

          /* Check flash operation */
          if (flashFunRet == FM_ERROR)
 800d4dc:	f897 3159 	ldrb.w	r3, [r7, #345]	@ 0x159
 800d4e0:	2b02      	cmp	r3, #2
 800d4e2:	d132      	bne.n	800d54a <SNVMA_FlashManagerCallback+0xbfe>
          {
            /* Notify buffers callbacks */
            InvokeBufferCallback (SNVMA_FlashInfo.NvmId, SNVMA_OPERATION_FAILED);
 800d4e4:	4b95      	ldr	r3, [pc, #596]	@ (800d73c <SNVMA_FlashManagerCallback+0xdf0>)
 800d4e6:	781b      	ldrb	r3, [r3, #0]
 800d4e8:	2101      	movs	r1, #1
 800d4ea:	4618      	mov	r0, r3
 800d4ec:	f000 fd5a 	bl	800dfa4 <InvokeBufferCallback>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800d4f0:	f3ef 8210 	mrs	r2, PRIMASK
 800d4f4:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800d4f8:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800d4fc:	601a      	str	r2, [r3, #0]
  return(result);
 800d4fe:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800d502:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800d506:	681b      	ldr	r3, [r3, #0]

            /* Enter critical section */
            UTILS_ENTER_CRITICAL_SECTION();
 800d508:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  __ASM volatile ("cpsid i" : : : "memory");
 800d50c:	b672      	cpsid	i
}
 800d50e:	bf00      	nop

            /* Clear the NVM bitmask */
            SNVMA_IdBitmask &= ~(1u << SNVMA_FlashInfo.NvmId);
 800d510:	4b8a      	ldr	r3, [pc, #552]	@ (800d73c <SNVMA_FlashManagerCallback+0xdf0>)
 800d512:	781b      	ldrb	r3, [r3, #0]
 800d514:	461a      	mov	r2, r3
 800d516:	2301      	movs	r3, #1
 800d518:	4093      	lsls	r3, r2
 800d51a:	43da      	mvns	r2, r3
 800d51c:	4b88      	ldr	r3, [pc, #544]	@ (800d740 <SNVMA_FlashManagerCallback+0xdf4>)
 800d51e:	681b      	ldr	r3, [r3, #0]
 800d520:	4013      	ands	r3, r2
 800d522:	4a87      	ldr	r2, [pc, #540]	@ (800d740 <SNVMA_FlashManagerCallback+0xdf4>)
 800d524:	6013      	str	r3, [r2, #0]

            /* Reset command pending flag */
            SNVMA_CommandPending = FALSE;
 800d526:	4b87      	ldr	r3, [pc, #540]	@ (800d744 <SNVMA_FlashManagerCallback+0xdf8>)
 800d528:	2200      	movs	r2, #0
 800d52a:	701a      	strb	r2, [r3, #0]
 800d52c:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800d530:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800d534:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 800d538:	601a      	str	r2, [r3, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d53a:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800d53e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	f383 8810 	msr	PRIMASK, r3
}
 800d548:	e0bb      	b.n	800d6c2 <SNVMA_FlashManagerCallback+0xd76>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800d54a:	f3ef 8210 	mrs	r2, PRIMASK
 800d54e:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800d552:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800d556:	601a      	str	r2, [r3, #0]
  return(result);
 800d558:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800d55c:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800d560:	681b      	ldr	r3, [r3, #0]
            UTILS_EXIT_CRITICAL_SECTION ();
          }
          else
          {
            /* Enter critical section */
            UTILS_ENTER_CRITICAL_SECTION();
 800d562:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  __ASM volatile ("cpsid i" : : : "memory");
 800d566:	b672      	cpsid	i
}
 800d568:	bf00      	nop

            /* Set requests active */
            SNVMA_NvmConfiguration[SNVMA_FlashInfo.NvmId].PendingBufferWriteOp |=
 800d56a:	4b74      	ldr	r3, [pc, #464]	@ (800d73c <SNVMA_FlashManagerCallback+0xdf0>)
 800d56c:	781b      	ldrb	r3, [r3, #0]
 800d56e:	4a76      	ldr	r2, [pc, #472]	@ (800d748 <SNVMA_FlashManagerCallback+0xdfc>)
 800d570:	019b      	lsls	r3, r3, #6
 800d572:	4413      	add	r3, r2
 800d574:	3302      	adds	r3, #2
 800d576:	781b      	ldrb	r3, [r3, #0]
 800d578:	b25a      	sxtb	r2, r3
              (SNVMA_NvmConfiguration[SNVMA_FlashInfo.NvmId].PendingBufferWriteOp << SNVMA_MAX_NUMBER_BUFFER);
 800d57a:	4b70      	ldr	r3, [pc, #448]	@ (800d73c <SNVMA_FlashManagerCallback+0xdf0>)
 800d57c:	781b      	ldrb	r3, [r3, #0]
 800d57e:	4972      	ldr	r1, [pc, #456]	@ (800d748 <SNVMA_FlashManagerCallback+0xdfc>)
 800d580:	019b      	lsls	r3, r3, #6
 800d582:	440b      	add	r3, r1
 800d584:	3302      	adds	r3, #2
 800d586:	781b      	ldrb	r3, [r3, #0]
 800d588:	011b      	lsls	r3, r3, #4
            SNVMA_NvmConfiguration[SNVMA_FlashInfo.NvmId].PendingBufferWriteOp |=
 800d58a:	b25b      	sxtb	r3, r3
 800d58c:	4313      	orrs	r3, r2
 800d58e:	b25a      	sxtb	r2, r3
 800d590:	4b6a      	ldr	r3, [pc, #424]	@ (800d73c <SNVMA_FlashManagerCallback+0xdf0>)
 800d592:	781b      	ldrb	r3, [r3, #0]
 800d594:	b2d1      	uxtb	r1, r2
 800d596:	4a6c      	ldr	r2, [pc, #432]	@ (800d748 <SNVMA_FlashManagerCallback+0xdfc>)
 800d598:	019b      	lsls	r3, r3, #6
 800d59a:	4413      	add	r3, r2
 800d59c:	3302      	adds	r3, #2
 800d59e:	460a      	mov	r2, r1
 800d5a0:	701a      	strb	r2, [r3, #0]

            /* Erase pendings requests */
            SNVMA_NvmConfiguration[SNVMA_FlashInfo.NvmId].PendingBufferWriteOp &= 0xF0;
 800d5a2:	4b66      	ldr	r3, [pc, #408]	@ (800d73c <SNVMA_FlashManagerCallback+0xdf0>)
 800d5a4:	781b      	ldrb	r3, [r3, #0]
 800d5a6:	4a68      	ldr	r2, [pc, #416]	@ (800d748 <SNVMA_FlashManagerCallback+0xdfc>)
 800d5a8:	019b      	lsls	r3, r3, #6
 800d5aa:	4413      	add	r3, r2
 800d5ac:	3302      	adds	r3, #2
 800d5ae:	781b      	ldrb	r3, [r3, #0]
 800d5b0:	4a62      	ldr	r2, [pc, #392]	@ (800d73c <SNVMA_FlashManagerCallback+0xdf0>)
 800d5b2:	7812      	ldrb	r2, [r2, #0]
 800d5b4:	4610      	mov	r0, r2
 800d5b6:	f023 030f 	bic.w	r3, r3, #15
 800d5ba:	b2d9      	uxtb	r1, r3
 800d5bc:	4a62      	ldr	r2, [pc, #392]	@ (800d748 <SNVMA_FlashManagerCallback+0xdfc>)
 800d5be:	0183      	lsls	r3, r0, #6
 800d5c0:	4413      	add	r3, r2
 800d5c2:	3302      	adds	r3, #2
 800d5c4:	460a      	mov	r2, r1
 800d5c6:	701a      	strb	r2, [r3, #0]
 800d5c8:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800d5cc:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800d5d0:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 800d5d4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d5d6:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800d5da:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	f383 8810 	msr	PRIMASK, r3
}
 800d5e4:	e06d      	b.n	800d6c2 <SNVMA_FlashManagerCallback+0xd76>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800d5e6:	f3ef 8210 	mrs	r2, PRIMASK
 800d5ea:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800d5ee:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800d5f2:	601a      	str	r2, [r3, #0]
  return(result);
 800d5f4:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800d5f8:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800d5fc:	681b      	ldr	r3, [r3, #0]
        }
        /* No more stuff to do */
        else
        {
          /* Enter critical section */
          UTILS_ENTER_CRITICAL_SECTION();
 800d5fe:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
  __ASM volatile ("cpsid i" : : : "memory");
 800d602:	b672      	cpsid	i
}
 800d604:	bf00      	nop

          /* Reset command pending flag */
          SNVMA_CommandPending = FALSE;
 800d606:	4b4f      	ldr	r3, [pc, #316]	@ (800d744 <SNVMA_FlashManagerCallback+0xdf8>)
 800d608:	2200      	movs	r2, #0
 800d60a:	701a      	strb	r2, [r3, #0]
 800d60c:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800d610:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800d614:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 800d618:	601a      	str	r2, [r3, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d61a:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800d61e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800d622:	681b      	ldr	r3, [r3, #0]
 800d624:	f383 8810 	msr	PRIMASK, r3
}
 800d628:	e04b      	b.n	800d6c2 <SNVMA_FlashManagerCallback+0xd76>
        }
      }
      /* Status == FM_OPERATION_AVAILABLE */
      else
      {
        flashFunRet = FM_Erase ((((uint32_t)tmpBank->p_StartAddr - FLASH_PAGE_SIZE) / FLASH_PAGE_SIZE),
 800d62a:	4b48      	ldr	r3, [pc, #288]	@ (800d74c <SNVMA_FlashManagerCallback+0xe00>)
 800d62c:	681b      	ldr	r3, [r3, #0]
 800d62e:	681b      	ldr	r3, [r3, #0]
 800d630:	f5a3 5300 	sub.w	r3, r3, #8192	@ 0x2000
 800d634:	0b58      	lsrs	r0, r3, #13
                                            SNVMA_NvmConfiguration[SNVMA_FlashInfo.NvmId].BankSize,
 800d636:	4b41      	ldr	r3, [pc, #260]	@ (800d73c <SNVMA_FlashManagerCallback+0xdf0>)
 800d638:	781b      	ldrb	r3, [r3, #0]
 800d63a:	4a43      	ldr	r2, [pc, #268]	@ (800d748 <SNVMA_FlashManagerCallback+0xdfc>)
 800d63c:	019b      	lsls	r3, r3, #6
 800d63e:	4413      	add	r3, r2
 800d640:	3301      	adds	r3, #1
 800d642:	781b      	ldrb	r3, [r3, #0]
        flashFunRet = FM_Erase ((((uint32_t)tmpBank->p_StartAddr - FLASH_PAGE_SIZE) / FLASH_PAGE_SIZE),
 800d644:	4a42      	ldr	r2, [pc, #264]	@ (800d750 <SNVMA_FlashManagerCallback+0xe04>)
 800d646:	4619      	mov	r1, r3
 800d648:	f7fd fffc 	bl	800b644 <FM_Erase>
 800d64c:	4603      	mov	r3, r0
 800d64e:	f887 3159 	strb.w	r3, [r7, #345]	@ 0x159
                                            &SNVMA_FlashCallback);

        /* Check flash operation */
        if (flashFunRet == FM_ERROR)
 800d652:	f897 3159 	ldrb.w	r3, [r7, #345]	@ 0x159
 800d656:	2b02      	cmp	r3, #2
 800d658:	f040 817f 	bne.w	800d95a <SNVMA_FlashManagerCallback+0x100e>
        {
          /* Notify buffers callbacks */
          InvokeBufferCallback (SNVMA_FlashInfo.NvmId, SNVMA_OPERATION_FAILED);
 800d65c:	4b37      	ldr	r3, [pc, #220]	@ (800d73c <SNVMA_FlashManagerCallback+0xdf0>)
 800d65e:	781b      	ldrb	r3, [r3, #0]
 800d660:	2101      	movs	r1, #1
 800d662:	4618      	mov	r0, r3
 800d664:	f000 fc9e 	bl	800dfa4 <InvokeBufferCallback>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800d668:	f3ef 8210 	mrs	r2, PRIMASK
 800d66c:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800d670:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800d674:	601a      	str	r2, [r3, #0]
  return(result);
 800d676:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800d67a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800d67e:	681b      	ldr	r3, [r3, #0]

          /* Enter critical section */
          UTILS_ENTER_CRITICAL_SECTION();
 800d680:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
  __ASM volatile ("cpsid i" : : : "memory");
 800d684:	b672      	cpsid	i
}
 800d686:	bf00      	nop

          /* Clear the NVM bitmask */
          SNVMA_IdBitmask &= ~(1u << SNVMA_FlashInfo.NvmId);
 800d688:	4b2c      	ldr	r3, [pc, #176]	@ (800d73c <SNVMA_FlashManagerCallback+0xdf0>)
 800d68a:	781b      	ldrb	r3, [r3, #0]
 800d68c:	461a      	mov	r2, r3
 800d68e:	2301      	movs	r3, #1
 800d690:	4093      	lsls	r3, r2
 800d692:	43da      	mvns	r2, r3
 800d694:	4b2a      	ldr	r3, [pc, #168]	@ (800d740 <SNVMA_FlashManagerCallback+0xdf4>)
 800d696:	681b      	ldr	r3, [r3, #0]
 800d698:	4013      	ands	r3, r2
 800d69a:	4a29      	ldr	r2, [pc, #164]	@ (800d740 <SNVMA_FlashManagerCallback+0xdf4>)
 800d69c:	6013      	str	r3, [r2, #0]

         /* Reset command pending flag */
          SNVMA_CommandPending = FALSE;
 800d69e:	4b29      	ldr	r3, [pc, #164]	@ (800d744 <SNVMA_FlashManagerCallback+0xdf8>)
 800d6a0:	2200      	movs	r2, #0
 800d6a2:	701a      	strb	r2, [r3, #0]
 800d6a4:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800d6a8:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800d6ac:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 800d6b0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d6b2:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800d6b6:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800d6ba:	681b      	ldr	r3, [r3, #0]
 800d6bc:	f383 8810 	msr	PRIMASK, r3
}
 800d6c0:	bf00      	nop
          /* Leave critical section */
          UTILS_EXIT_CRITICAL_SECTION ();
        }
      }

      break;
 800d6c2:	e14a      	b.n	800d95a <SNVMA_FlashManagerCallback+0x100e>
    }

    case SNVMA_RETRY_WRITE:
    {
      LOG_INFO_SYSTEM("\r\nSNVMA_FlashManagerCallback - Flash operation state : SNVMA_RETRY_WRITE");
 800d6c4:	4a23      	ldr	r2, [pc, #140]	@ (800d754 <SNVMA_FlashManagerCallback+0xe08>)
 800d6c6:	2101      	movs	r1, #1
 800d6c8:	2000      	movs	r0, #0
 800d6ca:	f7fc fe47 	bl	800a35c <Log_Module_Print>

      /* Check flash operation status */
      if (Status == FM_OPERATION_COMPLETE)
 800d6ce:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800d6d2:	f2a3 1359 	subw	r3, r3, #345	@ 0x159
 800d6d6:	781b      	ldrb	r3, [r3, #0]
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	f040 80e2 	bne.w	800d8a2 <SNVMA_FlashManagerCallback+0xf56>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800d6de:	f3ef 8210 	mrs	r2, PRIMASK
 800d6e2:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800d6e6:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800d6ea:	601a      	str	r2, [r3, #0]
  return(result);
 800d6ec:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800d6f0:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800d6f4:	681b      	ldr	r3, [r3, #0]
      {
        /* Enter critical section */
        UTILS_ENTER_CRITICAL_SECTION();
 800d6f6:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
  __ASM volatile ("cpsid i" : : : "memory");
 800d6fa:	b672      	cpsid	i
}
 800d6fc:	bf00      	nop

        /* Erase OK, restart the write from the start */
        SNVMA_FlashInfo.FlashOpState = SNVMA_HEADER_WRITE;
 800d6fe:	4b0f      	ldr	r3, [pc, #60]	@ (800d73c <SNVMA_FlashManagerCallback+0xdf0>)
 800d700:	2200      	movs	r2, #0
 800d702:	709a      	strb	r2, [r3, #2]

        /* Determine which buffer is impacted */
        for (uint8_t idx = 0x00;
 800d704:	2300      	movs	r3, #0
 800d706:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
 800d70a:	e02a      	b.n	800d762 <SNVMA_FlashManagerCallback+0xe16>
              idx < SNVMA_MAX_NUMBER_BUFFER;
              idx++)
        {
          if ((SNVMA_NvmConfiguration[SNVMA_FlashInfo.NvmId].PendingBufferWriteOp & (1u << idx)) != 0x00)
 800d70c:	4b0b      	ldr	r3, [pc, #44]	@ (800d73c <SNVMA_FlashManagerCallback+0xdf0>)
 800d70e:	781b      	ldrb	r3, [r3, #0]
 800d710:	4a0d      	ldr	r2, [pc, #52]	@ (800d748 <SNVMA_FlashManagerCallback+0xdfc>)
 800d712:	019b      	lsls	r3, r3, #6
 800d714:	4413      	add	r3, r2
 800d716:	3302      	adds	r3, #2
 800d718:	781b      	ldrb	r3, [r3, #0]
 800d71a:	461a      	mov	r2, r3
 800d71c:	f897 315a 	ldrb.w	r3, [r7, #346]	@ 0x15a
 800d720:	fa22 f303 	lsr.w	r3, r2, r3
 800d724:	f003 0301 	and.w	r3, r3, #1
 800d728:	2b00      	cmp	r3, #0
 800d72a:	d015      	beq.n	800d758 <SNVMA_FlashManagerCallback+0xe0c>
          {

            SNVMA_FlashInfo.BufferId = idx;
 800d72c:	4a03      	ldr	r2, [pc, #12]	@ (800d73c <SNVMA_FlashManagerCallback+0xdf0>)
 800d72e:	f897 315a 	ldrb.w	r3, [r7, #346]	@ 0x15a
 800d732:	7053      	strb	r3, [r2, #1]

            break;
 800d734:	e019      	b.n	800d76a <SNVMA_FlashManagerCallback+0xe1e>
 800d736:	bf00      	nop
 800d738:	08030804 	.word	0x08030804
 800d73c:	20006a8c 	.word	0x20006a8c
 800d740:	20006a64 	.word	0x20006a64
 800d744:	20006a61 	.word	0x20006a61
 800d748:	20000068 	.word	0x20000068
 800d74c:	20006abc 	.word	0x20006abc
 800d750:	20006a80 	.word	0x20006a80
 800d754:	08030870 	.word	0x08030870
              idx++)
 800d758:	f897 315a 	ldrb.w	r3, [r7, #346]	@ 0x15a
 800d75c:	3301      	adds	r3, #1
 800d75e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
              idx < SNVMA_MAX_NUMBER_BUFFER;
 800d762:	f897 315a 	ldrb.w	r3, [r7, #346]	@ 0x15a
 800d766:	2b03      	cmp	r3, #3
 800d768:	d9d0      	bls.n	800d70c <SNVMA_FlashManagerCallback+0xdc0>
 800d76a:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800d76e:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800d772:	f8d7 2150 	ldr.w	r2, [r7, #336]	@ 0x150
 800d776:	601a      	str	r2, [r3, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d778:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800d77c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800d780:	681b      	ldr	r3, [r3, #0]
 800d782:	f383 8810 	msr	PRIMASK, r3
}
 800d786:	bf00      	nop

        /* Leave critical section */
        UTILS_EXIT_CRITICAL_SECTION ();

        /* Retry write operation of the header */
        flashFunRet = StartFlashWrite (SNVMA_FlashInfo.NvmId);
 800d788:	4b78      	ldr	r3, [pc, #480]	@ (800d96c <SNVMA_FlashManagerCallback+0x1020>)
 800d78a:	781b      	ldrb	r3, [r3, #0]
 800d78c:	4618      	mov	r0, r3
 800d78e:	f000 fb13 	bl	800ddb8 <StartFlashWrite>
 800d792:	4603      	mov	r3, r0
 800d794:	f887 3159 	strb.w	r3, [r7, #345]	@ 0x159

        /* Check flash operation */
        if (flashFunRet == FM_ERROR)
 800d798:	f897 3159 	ldrb.w	r3, [r7, #345]	@ 0x159
 800d79c:	2b02      	cmp	r3, #2
 800d79e:	d132      	bne.n	800d806 <SNVMA_FlashManagerCallback+0xeba>
        {
          /* Notify buffers callbacks */
          InvokeBufferCallback (SNVMA_FlashInfo.NvmId, SNVMA_OPERATION_FAILED);
 800d7a0:	4b72      	ldr	r3, [pc, #456]	@ (800d96c <SNVMA_FlashManagerCallback+0x1020>)
 800d7a2:	781b      	ldrb	r3, [r3, #0]
 800d7a4:	2101      	movs	r1, #1
 800d7a6:	4618      	mov	r0, r3
 800d7a8:	f000 fbfc 	bl	800dfa4 <InvokeBufferCallback>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800d7ac:	f3ef 8210 	mrs	r2, PRIMASK
 800d7b0:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800d7b4:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800d7b8:	601a      	str	r2, [r3, #0]
  return(result);
 800d7ba:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800d7be:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800d7c2:	681b      	ldr	r3, [r3, #0]

          /* Enter critical section */
          UTILS_ENTER_CRITICAL_SECTION();
 800d7c4:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
  __ASM volatile ("cpsid i" : : : "memory");
 800d7c8:	b672      	cpsid	i
}
 800d7ca:	bf00      	nop

          /* Clear the NVM bitmask */
          SNVMA_IdBitmask &= ~(1u << SNVMA_FlashInfo.NvmId);
 800d7cc:	4b67      	ldr	r3, [pc, #412]	@ (800d96c <SNVMA_FlashManagerCallback+0x1020>)
 800d7ce:	781b      	ldrb	r3, [r3, #0]
 800d7d0:	461a      	mov	r2, r3
 800d7d2:	2301      	movs	r3, #1
 800d7d4:	4093      	lsls	r3, r2
 800d7d6:	43da      	mvns	r2, r3
 800d7d8:	4b65      	ldr	r3, [pc, #404]	@ (800d970 <SNVMA_FlashManagerCallback+0x1024>)
 800d7da:	681b      	ldr	r3, [r3, #0]
 800d7dc:	4013      	ands	r3, r2
 800d7de:	4a64      	ldr	r2, [pc, #400]	@ (800d970 <SNVMA_FlashManagerCallback+0x1024>)
 800d7e0:	6013      	str	r3, [r2, #0]

          /* Reset command pending flag */
          SNVMA_CommandPending = FALSE;
 800d7e2:	4b64      	ldr	r3, [pc, #400]	@ (800d974 <SNVMA_FlashManagerCallback+0x1028>)
 800d7e4:	2200      	movs	r2, #0
 800d7e6:	701a      	strb	r2, [r3, #0]
 800d7e8:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800d7ec:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800d7f0:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800d7f4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d7f6:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800d7fa:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800d7fe:	681b      	ldr	r3, [r3, #0]
 800d800:	f383 8810 	msr	PRIMASK, r3
}
 800d804:	e0a2      	b.n	800d94c <SNVMA_FlashManagerCallback+0x1000>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800d806:	f3ef 8210 	mrs	r2, PRIMASK
 800d80a:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800d80e:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800d812:	601a      	str	r2, [r3, #0]
  return(result);
 800d814:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800d818:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800d81c:	681b      	ldr	r3, [r3, #0]
          UTILS_EXIT_CRITICAL_SECTION ();
        }
        else
        {
          /* Enter critical section */
          UTILS_ENTER_CRITICAL_SECTION();
 800d81e:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
  __ASM volatile ("cpsid i" : : : "memory");
 800d822:	b672      	cpsid	i
}
 800d824:	bf00      	nop

          /* Set requests active */
          SNVMA_NvmConfiguration[SNVMA_FlashInfo.NvmId].PendingBufferWriteOp |=
 800d826:	4b51      	ldr	r3, [pc, #324]	@ (800d96c <SNVMA_FlashManagerCallback+0x1020>)
 800d828:	781b      	ldrb	r3, [r3, #0]
 800d82a:	4a53      	ldr	r2, [pc, #332]	@ (800d978 <SNVMA_FlashManagerCallback+0x102c>)
 800d82c:	019b      	lsls	r3, r3, #6
 800d82e:	4413      	add	r3, r2
 800d830:	3302      	adds	r3, #2
 800d832:	781b      	ldrb	r3, [r3, #0]
 800d834:	b25a      	sxtb	r2, r3
            (SNVMA_NvmConfiguration[SNVMA_FlashInfo.NvmId].PendingBufferWriteOp << SNVMA_MAX_NUMBER_BUFFER);
 800d836:	4b4d      	ldr	r3, [pc, #308]	@ (800d96c <SNVMA_FlashManagerCallback+0x1020>)
 800d838:	781b      	ldrb	r3, [r3, #0]
 800d83a:	494f      	ldr	r1, [pc, #316]	@ (800d978 <SNVMA_FlashManagerCallback+0x102c>)
 800d83c:	019b      	lsls	r3, r3, #6
 800d83e:	440b      	add	r3, r1
 800d840:	3302      	adds	r3, #2
 800d842:	781b      	ldrb	r3, [r3, #0]
 800d844:	011b      	lsls	r3, r3, #4
          SNVMA_NvmConfiguration[SNVMA_FlashInfo.NvmId].PendingBufferWriteOp |=
 800d846:	b25b      	sxtb	r3, r3
 800d848:	4313      	orrs	r3, r2
 800d84a:	b25a      	sxtb	r2, r3
 800d84c:	4b47      	ldr	r3, [pc, #284]	@ (800d96c <SNVMA_FlashManagerCallback+0x1020>)
 800d84e:	781b      	ldrb	r3, [r3, #0]
 800d850:	b2d1      	uxtb	r1, r2
 800d852:	4a49      	ldr	r2, [pc, #292]	@ (800d978 <SNVMA_FlashManagerCallback+0x102c>)
 800d854:	019b      	lsls	r3, r3, #6
 800d856:	4413      	add	r3, r2
 800d858:	3302      	adds	r3, #2
 800d85a:	460a      	mov	r2, r1
 800d85c:	701a      	strb	r2, [r3, #0]

          /* Erase pendings requests */
          SNVMA_NvmConfiguration[SNVMA_FlashInfo.NvmId].PendingBufferWriteOp &= 0xF0;
 800d85e:	4b43      	ldr	r3, [pc, #268]	@ (800d96c <SNVMA_FlashManagerCallback+0x1020>)
 800d860:	781b      	ldrb	r3, [r3, #0]
 800d862:	4a45      	ldr	r2, [pc, #276]	@ (800d978 <SNVMA_FlashManagerCallback+0x102c>)
 800d864:	019b      	lsls	r3, r3, #6
 800d866:	4413      	add	r3, r2
 800d868:	3302      	adds	r3, #2
 800d86a:	781b      	ldrb	r3, [r3, #0]
 800d86c:	4a3f      	ldr	r2, [pc, #252]	@ (800d96c <SNVMA_FlashManagerCallback+0x1020>)
 800d86e:	7812      	ldrb	r2, [r2, #0]
 800d870:	4610      	mov	r0, r2
 800d872:	f023 030f 	bic.w	r3, r3, #15
 800d876:	b2d9      	uxtb	r1, r3
 800d878:	4a3f      	ldr	r2, [pc, #252]	@ (800d978 <SNVMA_FlashManagerCallback+0x102c>)
 800d87a:	0183      	lsls	r3, r0, #6
 800d87c:	4413      	add	r3, r2
 800d87e:	3302      	adds	r3, #2
 800d880:	460a      	mov	r2, r1
 800d882:	701a      	strb	r2, [r3, #0]
 800d884:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800d888:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800d88c:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 800d890:	601a      	str	r2, [r3, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d892:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800d896:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800d89a:	681b      	ldr	r3, [r3, #0]
 800d89c:	f383 8810 	msr	PRIMASK, r3
}
 800d8a0:	e054      	b.n	800d94c <SNVMA_FlashManagerCallback+0x1000>
        }
      }
      /* Status == FM_OPERATION_AVAILABLE */
      else
      {
        LOG_INFO_SYSTEM("\r\nSNVMA_FlashManagerCallback - Flash operation state : SNVMA_RETRY_WRITE - Retry erase operation");
 800d8a2:	4a36      	ldr	r2, [pc, #216]	@ (800d97c <SNVMA_FlashManagerCallback+0x1030>)
 800d8a4:	2101      	movs	r1, #1
 800d8a6:	2000      	movs	r0, #0
 800d8a8:	f7fc fd58 	bl	800a35c <Log_Module_Print>

        /* Retry erase operation */
        flashFunRet = FM_Erase ((((uint32_t)SNVMA_NvmConfiguration[SNVMA_FlashInfo.NvmId].p_BankForWrite->p_StartAddr -
 800d8ac:	4b2f      	ldr	r3, [pc, #188]	@ (800d96c <SNVMA_FlashManagerCallback+0x1020>)
 800d8ae:	781b      	ldrb	r3, [r3, #0]
 800d8b0:	4a31      	ldr	r2, [pc, #196]	@ (800d978 <SNVMA_FlashManagerCallback+0x102c>)
 800d8b2:	019b      	lsls	r3, r3, #6
 800d8b4:	4413      	add	r3, r2
 800d8b6:	3308      	adds	r3, #8
 800d8b8:	681b      	ldr	r3, [r3, #0]
 800d8ba:	681b      	ldr	r3, [r3, #0]
 800d8bc:	f5a3 5300 	sub.w	r3, r3, #8192	@ 0x2000
 800d8c0:	0b58      	lsrs	r0, r3, #13
                                            FLASH_PAGE_SIZE) / FLASH_PAGE_SIZE),
                                            SNVMA_NvmConfiguration[SNVMA_FlashInfo.NvmId].BankSize,
 800d8c2:	4b2a      	ldr	r3, [pc, #168]	@ (800d96c <SNVMA_FlashManagerCallback+0x1020>)
 800d8c4:	781b      	ldrb	r3, [r3, #0]
 800d8c6:	4a2c      	ldr	r2, [pc, #176]	@ (800d978 <SNVMA_FlashManagerCallback+0x102c>)
 800d8c8:	019b      	lsls	r3, r3, #6
 800d8ca:	4413      	add	r3, r2
 800d8cc:	3301      	adds	r3, #1
 800d8ce:	781b      	ldrb	r3, [r3, #0]
        flashFunRet = FM_Erase ((((uint32_t)SNVMA_NvmConfiguration[SNVMA_FlashInfo.NvmId].p_BankForWrite->p_StartAddr -
 800d8d0:	4a2b      	ldr	r2, [pc, #172]	@ (800d980 <SNVMA_FlashManagerCallback+0x1034>)
 800d8d2:	4619      	mov	r1, r3
 800d8d4:	f7fd feb6 	bl	800b644 <FM_Erase>
 800d8d8:	4603      	mov	r3, r0
 800d8da:	f887 3159 	strb.w	r3, [r7, #345]	@ 0x159
                                            &SNVMA_FlashCallback);

        /* Check flash operation */
        if (flashFunRet == FM_ERROR)
 800d8de:	f897 3159 	ldrb.w	r3, [r7, #345]	@ 0x159
 800d8e2:	2b02      	cmp	r3, #2
 800d8e4:	d13b      	bne.n	800d95e <SNVMA_FlashManagerCallback+0x1012>
        {
          /* Notify buffers callbacks */
          InvokeBufferCallback (SNVMA_FlashInfo.NvmId, SNVMA_OPERATION_FAILED);
 800d8e6:	4b21      	ldr	r3, [pc, #132]	@ (800d96c <SNVMA_FlashManagerCallback+0x1020>)
 800d8e8:	781b      	ldrb	r3, [r3, #0]
 800d8ea:	2101      	movs	r1, #1
 800d8ec:	4618      	mov	r0, r3
 800d8ee:	f000 fb59 	bl	800dfa4 <InvokeBufferCallback>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800d8f2:	f3ef 8210 	mrs	r2, PRIMASK
 800d8f6:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800d8fa:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 800d8fe:	601a      	str	r2, [r3, #0]
  return(result);
 800d900:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800d904:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 800d908:	681b      	ldr	r3, [r3, #0]

          /* Enter critical section */
          UTILS_ENTER_CRITICAL_SECTION();
 800d90a:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
  __ASM volatile ("cpsid i" : : : "memory");
 800d90e:	b672      	cpsid	i
}
 800d910:	bf00      	nop

          /* Clear the NVM bitmask */
          SNVMA_IdBitmask &= ~(1u << SNVMA_FlashInfo.NvmId);
 800d912:	4b16      	ldr	r3, [pc, #88]	@ (800d96c <SNVMA_FlashManagerCallback+0x1020>)
 800d914:	781b      	ldrb	r3, [r3, #0]
 800d916:	461a      	mov	r2, r3
 800d918:	2301      	movs	r3, #1
 800d91a:	4093      	lsls	r3, r2
 800d91c:	43da      	mvns	r2, r3
 800d91e:	4b14      	ldr	r3, [pc, #80]	@ (800d970 <SNVMA_FlashManagerCallback+0x1024>)
 800d920:	681b      	ldr	r3, [r3, #0]
 800d922:	4013      	ands	r3, r2
 800d924:	4a12      	ldr	r2, [pc, #72]	@ (800d970 <SNVMA_FlashManagerCallback+0x1024>)
 800d926:	6013      	str	r3, [r2, #0]

          /* Reset command pending flag */
          SNVMA_CommandPending = FALSE;
 800d928:	4b12      	ldr	r3, [pc, #72]	@ (800d974 <SNVMA_FlashManagerCallback+0x1028>)
 800d92a:	2200      	movs	r2, #0
 800d92c:	701a      	strb	r2, [r3, #0]
 800d92e:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800d932:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800d936:	f8d7 2154 	ldr.w	r2, [r7, #340]	@ 0x154
 800d93a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d93c:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800d940:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800d944:	681b      	ldr	r3, [r3, #0]
 800d946:	f383 8810 	msr	PRIMASK, r3
}
 800d94a:	bf00      	nop
          /* Leave critical section */
          UTILS_EXIT_CRITICAL_SECTION ();
        }
      }

      break;
 800d94c:	e007      	b.n	800d95e <SNVMA_FlashManagerCallback+0x1012>
    }

    default:
    {
      /* Do nothing */
      break;
 800d94e:	bf00      	nop
 800d950:	e006      	b.n	800d960 <SNVMA_FlashManagerCallback+0x1014>
      break;
 800d952:	bf00      	nop
 800d954:	e004      	b.n	800d960 <SNVMA_FlashManagerCallback+0x1014>
      break;
 800d956:	bf00      	nop
 800d958:	e002      	b.n	800d960 <SNVMA_FlashManagerCallback+0x1014>
      break;
 800d95a:	bf00      	nop
 800d95c:	e000      	b.n	800d960 <SNVMA_FlashManagerCallback+0x1014>
      break;
 800d95e:	bf00      	nop
    }
  }
}
 800d960:	bf00      	nop
 800d962:	f507 77b0 	add.w	r7, r7, #352	@ 0x160
 800d966:	46bd      	mov	sp, r7
 800d968:	bdb0      	pop	{r4, r5, r7, pc}
 800d96a:	bf00      	nop
 800d96c:	20006a8c 	.word	0x20006a8c
 800d970:	20006a64 	.word	0x20006a64
 800d974:	20006a61 	.word	0x20006a61
 800d978:	20000068 	.word	0x20000068
 800d97c:	080308bc 	.word	0x080308bc
 800d980:	20006a80 	.word	0x20006a80

0800d984 <IsHeaderOk>:

/* Private functions Definition ------------------------------------------------------*/

uint8_t IsHeaderOk (const uint32_t * const p_BankStartAddress, const uint8_t NvmId)
{
 800d984:	b480      	push	{r7}
 800d986:	b085      	sub	sp, #20
 800d988:	af00      	add	r7, sp, #0
 800d98a:	6078      	str	r0, [r7, #4]
 800d98c:	460b      	mov	r3, r1
 800d98e:	70fb      	strb	r3, [r7, #3]
  uint8_t error = FALSE;
 800d990:	2300      	movs	r3, #0
 800d992:	73fb      	strb	r3, [r7, #15]

  /* Check all the struct members to verify if the header could be any good */
  /* First, check if it is not erased */
  if ((((SNVMA_BankHeader_t *)p_BankStartAddress)->Empty == (uint8_t)SNVMA_ERASED_CONTENT) &&
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	781b      	ldrb	r3, [r3, #0]
 800d998:	2bff      	cmp	r3, #255	@ 0xff
 800d99a:	d138      	bne.n	800da0e <IsHeaderOk+0x8a>
      (((SNVMA_BankHeader_t *)p_BankStartAddress)->Counter == (uint8_t)SNVMA_ERASED_CONTENT) &&
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	785b      	ldrb	r3, [r3, #1]
  if ((((SNVMA_BankHeader_t *)p_BankStartAddress)->Empty == (uint8_t)SNVMA_ERASED_CONTENT) &&
 800d9a0:	2bff      	cmp	r3, #255	@ 0xff
 800d9a2:	d134      	bne.n	800da0e <IsHeaderOk+0x8a>
      (((SNVMA_BankHeader_t *)p_BankStartAddress)->Crc == SNVMA_ERASED_CONTENT) &&
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	885b      	ldrh	r3, [r3, #2]
      (((SNVMA_BankHeader_t *)p_BankStartAddress)->Counter == (uint8_t)SNVMA_ERASED_CONTENT) &&
 800d9a8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d9ac:	4293      	cmp	r3, r2
 800d9ae:	d12e      	bne.n	800da0e <IsHeaderOk+0x8a>
      (((SNVMA_BankHeader_t *)p_BankStartAddress)->BufferId1 == (uint8_t)SNVMA_ERASED_CONTENT) &&
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	791b      	ldrb	r3, [r3, #4]
      (((SNVMA_BankHeader_t *)p_BankStartAddress)->Crc == SNVMA_ERASED_CONTENT) &&
 800d9b4:	2bff      	cmp	r3, #255	@ 0xff
 800d9b6:	d12a      	bne.n	800da0e <IsHeaderOk+0x8a>
      (((SNVMA_BankHeader_t *)p_BankStartAddress)->SizeId1 == SNVMA_ERASED_CONTENT) &&
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800d9be:	b29b      	uxth	r3, r3
      (((SNVMA_BankHeader_t *)p_BankStartAddress)->BufferId1 == (uint8_t)SNVMA_ERASED_CONTENT) &&
 800d9c0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d9c4:	4293      	cmp	r3, r2
 800d9c6:	d122      	bne.n	800da0e <IsHeaderOk+0x8a>
      (((SNVMA_BankHeader_t *)p_BankStartAddress)->BufferId2 == (uint8_t)SNVMA_ERASED_CONTENT) &&
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	79db      	ldrb	r3, [r3, #7]
      (((SNVMA_BankHeader_t *)p_BankStartAddress)->SizeId1 == SNVMA_ERASED_CONTENT) &&
 800d9cc:	2bff      	cmp	r3, #255	@ 0xff
 800d9ce:	d11e      	bne.n	800da0e <IsHeaderOk+0x8a>
      (((SNVMA_BankHeader_t *)p_BankStartAddress)->SizeId2 == SNVMA_ERASED_CONTENT) &&
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	891b      	ldrh	r3, [r3, #8]
      (((SNVMA_BankHeader_t *)p_BankStartAddress)->BufferId2 == (uint8_t)SNVMA_ERASED_CONTENT) &&
 800d9d4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d9d8:	4293      	cmp	r3, r2
 800d9da:	d118      	bne.n	800da0e <IsHeaderOk+0x8a>
      (((SNVMA_BankHeader_t *)p_BankStartAddress)->BufferId3 == (uint8_t)SNVMA_ERASED_CONTENT) &&
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	7a9b      	ldrb	r3, [r3, #10]
      (((SNVMA_BankHeader_t *)p_BankStartAddress)->SizeId2 == SNVMA_ERASED_CONTENT) &&
 800d9e0:	2bff      	cmp	r3, #255	@ 0xff
 800d9e2:	d114      	bne.n	800da0e <IsHeaderOk+0x8a>
      (((SNVMA_BankHeader_t *)p_BankStartAddress)->SizeId3 == SNVMA_ERASED_CONTENT) &&
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	f8b3 300b 	ldrh.w	r3, [r3, #11]
 800d9ea:	b29b      	uxth	r3, r3
      (((SNVMA_BankHeader_t *)p_BankStartAddress)->BufferId3 == (uint8_t)SNVMA_ERASED_CONTENT) &&
 800d9ec:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d9f0:	4293      	cmp	r3, r2
 800d9f2:	d10c      	bne.n	800da0e <IsHeaderOk+0x8a>
      (((SNVMA_BankHeader_t *)p_BankStartAddress)->BufferId4 == (uint8_t)SNVMA_ERASED_CONTENT) &&
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	7b5b      	ldrb	r3, [r3, #13]
      (((SNVMA_BankHeader_t *)p_BankStartAddress)->SizeId3 == SNVMA_ERASED_CONTENT) &&
 800d9f8:	2bff      	cmp	r3, #255	@ 0xff
 800d9fa:	d108      	bne.n	800da0e <IsHeaderOk+0x8a>
      (((SNVMA_BankHeader_t *)p_BankStartAddress)->SizeId4 == SNVMA_ERASED_CONTENT))
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	89db      	ldrh	r3, [r3, #14]
      (((SNVMA_BankHeader_t *)p_BankStartAddress)->BufferId4 == (uint8_t)SNVMA_ERASED_CONTENT) &&
 800da00:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800da04:	4293      	cmp	r3, r2
 800da06:	d102      	bne.n	800da0e <IsHeaderOk+0x8a>
  {
    error = FALSE;
 800da08:	2300      	movs	r3, #0
 800da0a:	73fb      	strb	r3, [r7, #15]
 800da0c:	e04a      	b.n	800daa4 <IsHeaderOk+0x120>
  }
  /* Check that written sizes does not overlap the bank */
  else if ((((SNVMA_BankHeader_t *)p_BankStartAddress)->SizeId1 +
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800da14:	b29b      	uxth	r3, r3
 800da16:	461a      	mov	r2, r3
            ((SNVMA_BankHeader_t *)p_BankStartAddress)->SizeId2 +
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	891b      	ldrh	r3, [r3, #8]
  else if ((((SNVMA_BankHeader_t *)p_BankStartAddress)->SizeId1 +
 800da1c:	4413      	add	r3, r2
            ((SNVMA_BankHeader_t *)p_BankStartAddress)->SizeId3 +
 800da1e:	687a      	ldr	r2, [r7, #4]
 800da20:	f8b2 200b 	ldrh.w	r2, [r2, #11]
 800da24:	b292      	uxth	r2, r2
            ((SNVMA_BankHeader_t *)p_BankStartAddress)->SizeId2 +
 800da26:	4413      	add	r3, r2
            ((SNVMA_BankHeader_t *)p_BankStartAddress)->SizeId4) >
 800da28:	687a      	ldr	r2, [r7, #4]
 800da2a:	89d2      	ldrh	r2, [r2, #14]
            ((SNVMA_BankHeader_t *)p_BankStartAddress)->SizeId3 +
 800da2c:	4413      	add	r3, r2
 800da2e:	4619      	mov	r1, r3
           ((SNVMA_NvmConfiguration[NvmId].BankSize * FLASH_PAGE_SIZE) / sizeof (uint32_t)))
 800da30:	78fb      	ldrb	r3, [r7, #3]
 800da32:	4a20      	ldr	r2, [pc, #128]	@ (800dab4 <IsHeaderOk+0x130>)
 800da34:	019b      	lsls	r3, r3, #6
 800da36:	4413      	add	r3, r2
 800da38:	3301      	adds	r3, #1
 800da3a:	781b      	ldrb	r3, [r3, #0]
 800da3c:	035b      	lsls	r3, r3, #13
 800da3e:	089b      	lsrs	r3, r3, #2
  else if ((((SNVMA_BankHeader_t *)p_BankStartAddress)->SizeId1 +
 800da40:	4299      	cmp	r1, r3
 800da42:	d902      	bls.n	800da4a <IsHeaderOk+0xc6>
  {
    error = FALSE;
 800da44:	2300      	movs	r3, #0
 800da46:	73fb      	strb	r3, [r7, #15]
 800da48:	e02c      	b.n	800daa4 <IsHeaderOk+0x120>
  }
  /* Now check IDs range */
  else if (((SNVMA_BankHeader_t *)p_BankStartAddress)->BufferId1 != (NvmId * SNVMA_MAX_NUMBER_BUFFER))
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	791b      	ldrb	r3, [r3, #4]
 800da4e:	461a      	mov	r2, r3
 800da50:	78fb      	ldrb	r3, [r7, #3]
 800da52:	009b      	lsls	r3, r3, #2
 800da54:	429a      	cmp	r2, r3
 800da56:	d002      	beq.n	800da5e <IsHeaderOk+0xda>
  {
    error = FALSE;
 800da58:	2300      	movs	r3, #0
 800da5a:	73fb      	strb	r3, [r7, #15]
 800da5c:	e022      	b.n	800daa4 <IsHeaderOk+0x120>
  }
  else if (((SNVMA_BankHeader_t *)p_BankStartAddress)->BufferId2 != ((NvmId * SNVMA_MAX_NUMBER_BUFFER) + 1))
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	79db      	ldrb	r3, [r3, #7]
 800da62:	461a      	mov	r2, r3
 800da64:	78fb      	ldrb	r3, [r7, #3]
 800da66:	009b      	lsls	r3, r3, #2
 800da68:	3301      	adds	r3, #1
 800da6a:	429a      	cmp	r2, r3
 800da6c:	d002      	beq.n	800da74 <IsHeaderOk+0xf0>
  {
    error = FALSE;
 800da6e:	2300      	movs	r3, #0
 800da70:	73fb      	strb	r3, [r7, #15]
 800da72:	e017      	b.n	800daa4 <IsHeaderOk+0x120>
  }
  else if (((SNVMA_BankHeader_t *)p_BankStartAddress)->BufferId3 != ((NvmId * SNVMA_MAX_NUMBER_BUFFER) + 2))
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	7a9b      	ldrb	r3, [r3, #10]
 800da78:	461a      	mov	r2, r3
 800da7a:	78fb      	ldrb	r3, [r7, #3]
 800da7c:	009b      	lsls	r3, r3, #2
 800da7e:	3302      	adds	r3, #2
 800da80:	429a      	cmp	r2, r3
 800da82:	d002      	beq.n	800da8a <IsHeaderOk+0x106>
  {
    error = FALSE;
 800da84:	2300      	movs	r3, #0
 800da86:	73fb      	strb	r3, [r7, #15]
 800da88:	e00c      	b.n	800daa4 <IsHeaderOk+0x120>
  }
  else if (((SNVMA_BankHeader_t *)p_BankStartAddress)->BufferId4 != ((NvmId * SNVMA_MAX_NUMBER_BUFFER) + 3))
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	7b5b      	ldrb	r3, [r3, #13]
 800da8e:	461a      	mov	r2, r3
 800da90:	78fb      	ldrb	r3, [r7, #3]
 800da92:	009b      	lsls	r3, r3, #2
 800da94:	3303      	adds	r3, #3
 800da96:	429a      	cmp	r2, r3
 800da98:	d002      	beq.n	800daa0 <IsHeaderOk+0x11c>
  {
    error = FALSE;
 800da9a:	2300      	movs	r3, #0
 800da9c:	73fb      	strb	r3, [r7, #15]
 800da9e:	e001      	b.n	800daa4 <IsHeaderOk+0x120>
  }
  else
  {
    /* Header can be good */
    error = TRUE;
 800daa0:	2301      	movs	r3, #1
 800daa2:	73fb      	strb	r3, [r7, #15]
  }

  return error;
 800daa4:	7bfb      	ldrb	r3, [r7, #15]
}
 800daa6:	4618      	mov	r0, r3
 800daa8:	3714      	adds	r7, #20
 800daaa:	46bd      	mov	sp, r7
 800daac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dab0:	4770      	bx	lr
 800dab2:	bf00      	nop
 800dab4:	20000068 	.word	0x20000068

0800dab8 <IsCrcOk>:

uint8_t IsCrcOk (const uint32_t * const p_BankStartAddress)
{
 800dab8:	b580      	push	{r7, lr}
 800daba:	b088      	sub	sp, #32
 800dabc:	af00      	add	r7, sp, #0
 800dabe:	6078      	str	r0, [r7, #4]
  uint8_t error = FALSE;
 800dac0:	2300      	movs	r3, #0
 800dac2:	77fb      	strb	r3, [r7, #31]

  uint32_t crcComputedValue = 0x00;
 800dac4:	2300      	movs	r3, #0
 800dac6:	60bb      	str	r3, [r7, #8]
  uint32_t * payloadAddr = (uint32_t *)((uint32_t)(p_BankStartAddress) + sizeof (SNVMA_BankHeader_t));
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	3310      	adds	r3, #16
 800dacc:	613b      	str	r3, [r7, #16]
  uint32_t offSet = 0x00;
 800dace:	2300      	movs	r3, #0
 800dad0:	61bb      	str	r3, [r7, #24]
  uint32_t cnt = 0x00;
 800dad2:	2300      	movs	r3, #0
 800dad4:	617b      	str	r3, [r7, #20]
  CRCCTRL_Cmd_Status_t eReturn;

  LOG_INFO_SYSTEM("\r\nStart of CRC computation");
 800dad6:	4a76      	ldr	r2, [pc, #472]	@ (800dcb0 <IsCrcOk+0x1f8>)
 800dad8:	2101      	movs	r1, #1
 800dada:	2000      	movs	r0, #0
 800dadc:	f7fc fc3e 	bl	800a35c <Log_Module_Print>

  /* Compute CRC for every buffer */
  while (cnt < SNVMA_MAX_NUMBER_BUFFER)
 800dae0:	e0cf      	b.n	800dc82 <IsCrcOk+0x1ca>
  {
    switch (cnt)
 800dae2:	697b      	ldr	r3, [r7, #20]
 800dae4:	2b03      	cmp	r3, #3
 800dae6:	f200 80c3 	bhi.w	800dc70 <IsCrcOk+0x1b8>
 800daea:	a201      	add	r2, pc, #4	@ (adr r2, 800daf0 <IsCrcOk+0x38>)
 800daec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800daf0:	0800db01 	.word	0x0800db01
 800daf4:	0800db5d 	.word	0x0800db5d
 800daf8:	0800dbb5 	.word	0x0800dbb5
 800dafc:	0800dc19 	.word	0x0800dc19
    {
      case 0:
      {
        if (0x00 != ((SNVMA_BankHeader_t *)p_BankStartAddress)->SizeId1)
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800db06:	b29b      	uxth	r3, r3
 800db08:	2b00      	cmp	r3, #0
 800db0a:	d023      	beq.n	800db54 <IsCrcOk+0x9c>
        {
          eReturn = CRCCTRL_Calculate (&SNVMA_Handle,
                                       payloadAddr,
                                       ((SNVMA_BankHeader_t *)p_BankStartAddress)->SizeId1,
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800db12:	b29b      	uxth	r3, r3
          eReturn = CRCCTRL_Calculate (&SNVMA_Handle,
 800db14:	461a      	mov	r2, r3
 800db16:	f107 0308 	add.w	r3, r7, #8
 800db1a:	6939      	ldr	r1, [r7, #16]
 800db1c:	4865      	ldr	r0, [pc, #404]	@ (800dcb4 <IsCrcOk+0x1fc>)
 800db1e:	f001 fc41 	bl	800f3a4 <CRCCTRL_Calculate>
 800db22:	4603      	mov	r3, r0
 800db24:	73fb      	strb	r3, [r7, #15]
                                       &crcComputedValue);

          if (CRCCTRL_OK == eReturn)
 800db26:	7bfb      	ldrb	r3, [r7, #15]
 800db28:	2b00      	cmp	r3, #0
 800db2a:	d10c      	bne.n	800db46 <IsCrcOk+0x8e>
          {
            offSet = SNVMA_ALIGN_128(((SNVMA_BankHeader_t *)p_BankStartAddress)->SizeId1 * sizeof (uint32_t));
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800db32:	b29b      	uxth	r3, r3
 800db34:	009b      	lsls	r3, r3, #2
 800db36:	330f      	adds	r3, #15
 800db38:	f023 030f 	bic.w	r3, r3, #15
 800db3c:	61bb      	str	r3, [r7, #24]

            cnt++;
 800db3e:	697b      	ldr	r3, [r7, #20]
 800db40:	3301      	adds	r3, #1
 800db42:	617b      	str	r3, [r7, #20]
        }
        else
        {
          cnt++;
        }
        break;
 800db44:	e096      	b.n	800dc74 <IsCrcOk+0x1bc>
          else if (CRCCTRL_BUSY == eReturn)
 800db46:	7bfb      	ldrb	r3, [r7, #15]
 800db48:	2b02      	cmp	r3, #2
 800db4a:	f000 8093 	beq.w	800dc74 <IsCrcOk+0x1bc>
            Error_Handler();
 800db4e:	f7f3 fabf 	bl	80010d0 <Error_Handler>
        break;
 800db52:	e08f      	b.n	800dc74 <IsCrcOk+0x1bc>
          cnt++;
 800db54:	697b      	ldr	r3, [r7, #20]
 800db56:	3301      	adds	r3, #1
 800db58:	617b      	str	r3, [r7, #20]
        break;
 800db5a:	e08b      	b.n	800dc74 <IsCrcOk+0x1bc>
      }

      case 1:
      {
        if (0x00 != ((SNVMA_BankHeader_t *)p_BankStartAddress)->SizeId2)
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	891b      	ldrh	r3, [r3, #8]
 800db60:	2b00      	cmp	r3, #0
 800db62:	d023      	beq.n	800dbac <IsCrcOk+0xf4>
        {
          eReturn = CRCCTRL_Accumulate (&SNVMA_Handle,
                                        (uint32_t *)((uint32_t)payloadAddr + offSet),
 800db64:	693a      	ldr	r2, [r7, #16]
 800db66:	69bb      	ldr	r3, [r7, #24]
 800db68:	4413      	add	r3, r2
          eReturn = CRCCTRL_Accumulate (&SNVMA_Handle,
 800db6a:	4619      	mov	r1, r3
                                        ((SNVMA_BankHeader_t *)p_BankStartAddress)->SizeId2,
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	891b      	ldrh	r3, [r3, #8]
          eReturn = CRCCTRL_Accumulate (&SNVMA_Handle,
 800db70:	461a      	mov	r2, r3
 800db72:	f107 0308 	add.w	r3, r7, #8
 800db76:	484f      	ldr	r0, [pc, #316]	@ (800dcb4 <IsCrcOk+0x1fc>)
 800db78:	f001 fc70 	bl	800f45c <CRCCTRL_Accumulate>
 800db7c:	4603      	mov	r3, r0
 800db7e:	73fb      	strb	r3, [r7, #15]
                                        &crcComputedValue);

          if (CRCCTRL_OK == eReturn)
 800db80:	7bfb      	ldrb	r3, [r7, #15]
 800db82:	2b00      	cmp	r3, #0
 800db84:	d10c      	bne.n	800dba0 <IsCrcOk+0xe8>
          {
            offSet += SNVMA_ALIGN_128(((SNVMA_BankHeader_t *)p_BankStartAddress)->SizeId2 * sizeof (uint32_t));
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	891b      	ldrh	r3, [r3, #8]
 800db8a:	009b      	lsls	r3, r3, #2
 800db8c:	330f      	adds	r3, #15
 800db8e:	f023 030f 	bic.w	r3, r3, #15
 800db92:	69ba      	ldr	r2, [r7, #24]
 800db94:	4413      	add	r3, r2
 800db96:	61bb      	str	r3, [r7, #24]

            cnt++;
 800db98:	697b      	ldr	r3, [r7, #20]
 800db9a:	3301      	adds	r3, #1
 800db9c:	617b      	str	r3, [r7, #20]
        }
        else
        {
          cnt++;
        }
        break;
 800db9e:	e06b      	b.n	800dc78 <IsCrcOk+0x1c0>
          else if (CRCCTRL_BUSY == eReturn)
 800dba0:	7bfb      	ldrb	r3, [r7, #15]
 800dba2:	2b02      	cmp	r3, #2
 800dba4:	d068      	beq.n	800dc78 <IsCrcOk+0x1c0>
            Error_Handler();
 800dba6:	f7f3 fa93 	bl	80010d0 <Error_Handler>
        break;
 800dbaa:	e065      	b.n	800dc78 <IsCrcOk+0x1c0>
          cnt++;
 800dbac:	697b      	ldr	r3, [r7, #20]
 800dbae:	3301      	adds	r3, #1
 800dbb0:	617b      	str	r3, [r7, #20]
        break;
 800dbb2:	e061      	b.n	800dc78 <IsCrcOk+0x1c0>
      }

      case 2:
      {
        if (0x00 != ((SNVMA_BankHeader_t *)p_BankStartAddress)->SizeId3)
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	f8b3 300b 	ldrh.w	r3, [r3, #11]
 800dbba:	b29b      	uxth	r3, r3
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	d027      	beq.n	800dc10 <IsCrcOk+0x158>
        {
          eReturn = CRCCTRL_Accumulate (&SNVMA_Handle,
                                        (uint32_t *)((uint32_t)payloadAddr + offSet),
 800dbc0:	693a      	ldr	r2, [r7, #16]
 800dbc2:	69bb      	ldr	r3, [r7, #24]
 800dbc4:	4413      	add	r3, r2
          eReturn = CRCCTRL_Accumulate (&SNVMA_Handle,
 800dbc6:	4619      	mov	r1, r3
                                        ((SNVMA_BankHeader_t *)p_BankStartAddress)->SizeId3,
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	f8b3 300b 	ldrh.w	r3, [r3, #11]
 800dbce:	b29b      	uxth	r3, r3
          eReturn = CRCCTRL_Accumulate (&SNVMA_Handle,
 800dbd0:	461a      	mov	r2, r3
 800dbd2:	f107 0308 	add.w	r3, r7, #8
 800dbd6:	4837      	ldr	r0, [pc, #220]	@ (800dcb4 <IsCrcOk+0x1fc>)
 800dbd8:	f001 fc40 	bl	800f45c <CRCCTRL_Accumulate>
 800dbdc:	4603      	mov	r3, r0
 800dbde:	73fb      	strb	r3, [r7, #15]
                                        &crcComputedValue);

          if (CRCCTRL_OK == eReturn)
 800dbe0:	7bfb      	ldrb	r3, [r7, #15]
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	d10e      	bne.n	800dc04 <IsCrcOk+0x14c>
          {
            offSet += SNVMA_ALIGN_128(((SNVMA_BankHeader_t *)p_BankStartAddress)->SizeId3 * sizeof (uint32_t));
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	f8b3 300b 	ldrh.w	r3, [r3, #11]
 800dbec:	b29b      	uxth	r3, r3
 800dbee:	009b      	lsls	r3, r3, #2
 800dbf0:	330f      	adds	r3, #15
 800dbf2:	f023 030f 	bic.w	r3, r3, #15
 800dbf6:	69ba      	ldr	r2, [r7, #24]
 800dbf8:	4413      	add	r3, r2
 800dbfa:	61bb      	str	r3, [r7, #24]

            cnt++;
 800dbfc:	697b      	ldr	r3, [r7, #20]
 800dbfe:	3301      	adds	r3, #1
 800dc00:	617b      	str	r3, [r7, #20]
        }
        else
        {
          cnt++;
        }
        break;
 800dc02:	e03b      	b.n	800dc7c <IsCrcOk+0x1c4>
          else if (CRCCTRL_BUSY == eReturn)
 800dc04:	7bfb      	ldrb	r3, [r7, #15]
 800dc06:	2b02      	cmp	r3, #2
 800dc08:	d038      	beq.n	800dc7c <IsCrcOk+0x1c4>
            Error_Handler();
 800dc0a:	f7f3 fa61 	bl	80010d0 <Error_Handler>
        break;
 800dc0e:	e035      	b.n	800dc7c <IsCrcOk+0x1c4>
          cnt++;
 800dc10:	697b      	ldr	r3, [r7, #20]
 800dc12:	3301      	adds	r3, #1
 800dc14:	617b      	str	r3, [r7, #20]
        break;
 800dc16:	e031      	b.n	800dc7c <IsCrcOk+0x1c4>
      }

      case 3:
      {
        if (0x00 != ((SNVMA_BankHeader_t *)p_BankStartAddress)->SizeId4)
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	89db      	ldrh	r3, [r3, #14]
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	d023      	beq.n	800dc68 <IsCrcOk+0x1b0>
        {
          eReturn = CRCCTRL_Accumulate (&SNVMA_Handle,
                                        (uint32_t *)((uint32_t)payloadAddr + offSet),
 800dc20:	693a      	ldr	r2, [r7, #16]
 800dc22:	69bb      	ldr	r3, [r7, #24]
 800dc24:	4413      	add	r3, r2
          eReturn = CRCCTRL_Accumulate (&SNVMA_Handle,
 800dc26:	4619      	mov	r1, r3
                                        ((SNVMA_BankHeader_t *)p_BankStartAddress)->SizeId4,
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	89db      	ldrh	r3, [r3, #14]
          eReturn = CRCCTRL_Accumulate (&SNVMA_Handle,
 800dc2c:	461a      	mov	r2, r3
 800dc2e:	f107 0308 	add.w	r3, r7, #8
 800dc32:	4820      	ldr	r0, [pc, #128]	@ (800dcb4 <IsCrcOk+0x1fc>)
 800dc34:	f001 fc12 	bl	800f45c <CRCCTRL_Accumulate>
 800dc38:	4603      	mov	r3, r0
 800dc3a:	73fb      	strb	r3, [r7, #15]
                                        &crcComputedValue);

          if (CRCCTRL_OK == eReturn)
 800dc3c:	7bfb      	ldrb	r3, [r7, #15]
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	d10c      	bne.n	800dc5c <IsCrcOk+0x1a4>
          {
            offSet += SNVMA_ALIGN_128(((SNVMA_BankHeader_t *)p_BankStartAddress)->SizeId4 * sizeof (uint32_t));
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	89db      	ldrh	r3, [r3, #14]
 800dc46:	009b      	lsls	r3, r3, #2
 800dc48:	330f      	adds	r3, #15
 800dc4a:	f023 030f 	bic.w	r3, r3, #15
 800dc4e:	69ba      	ldr	r2, [r7, #24]
 800dc50:	4413      	add	r3, r2
 800dc52:	61bb      	str	r3, [r7, #24]

            cnt++;
 800dc54:	697b      	ldr	r3, [r7, #20]
 800dc56:	3301      	adds	r3, #1
 800dc58:	617b      	str	r3, [r7, #20]
        }
        else
        {
          cnt++;
        }
        break;
 800dc5a:	e011      	b.n	800dc80 <IsCrcOk+0x1c8>
          else if (CRCCTRL_BUSY == eReturn)
 800dc5c:	7bfb      	ldrb	r3, [r7, #15]
 800dc5e:	2b02      	cmp	r3, #2
 800dc60:	d00e      	beq.n	800dc80 <IsCrcOk+0x1c8>
            Error_Handler();
 800dc62:	f7f3 fa35 	bl	80010d0 <Error_Handler>
        break;
 800dc66:	e00b      	b.n	800dc80 <IsCrcOk+0x1c8>
          cnt++;
 800dc68:	697b      	ldr	r3, [r7, #20]
 800dc6a:	3301      	adds	r3, #1
 800dc6c:	617b      	str	r3, [r7, #20]
        break;
 800dc6e:	e007      	b.n	800dc80 <IsCrcOk+0x1c8>
      }

      default:
      {
        /* Should never be reached */
        break;
 800dc70:	bf00      	nop
 800dc72:	e006      	b.n	800dc82 <IsCrcOk+0x1ca>
        break;
 800dc74:	bf00      	nop
 800dc76:	e004      	b.n	800dc82 <IsCrcOk+0x1ca>
        break;
 800dc78:	bf00      	nop
 800dc7a:	e002      	b.n	800dc82 <IsCrcOk+0x1ca>
        break;
 800dc7c:	bf00      	nop
 800dc7e:	e000      	b.n	800dc82 <IsCrcOk+0x1ca>
        break;
 800dc80:	bf00      	nop
  while (cnt < SNVMA_MAX_NUMBER_BUFFER)
 800dc82:	697b      	ldr	r3, [r7, #20]
 800dc84:	2b03      	cmp	r3, #3
 800dc86:	f67f af2c 	bls.w	800dae2 <IsCrcOk+0x2a>
      }
    }
  }

  /* Compare the CRC values */
  if (crcComputedValue == ((SNVMA_BankHeader_t *)p_BankStartAddress)->Crc)
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	885b      	ldrh	r3, [r3, #2]
 800dc8e:	461a      	mov	r2, r3
 800dc90:	68bb      	ldr	r3, [r7, #8]
 800dc92:	429a      	cmp	r2, r3
 800dc94:	d101      	bne.n	800dc9a <IsCrcOk+0x1e2>
  {
    error = TRUE;
 800dc96:	2301      	movs	r3, #1
 800dc98:	77fb      	strb	r3, [r7, #31]
  }

  LOG_INFO_SYSTEM("\r\nEnd of CRC computation, value : %d", crcComputedValue);
 800dc9a:	68bb      	ldr	r3, [r7, #8]
 800dc9c:	4a06      	ldr	r2, [pc, #24]	@ (800dcb8 <IsCrcOk+0x200>)
 800dc9e:	2101      	movs	r1, #1
 800dca0:	2000      	movs	r0, #0
 800dca2:	f7fc fb5b 	bl	800a35c <Log_Module_Print>

  return error;
 800dca6:	7ffb      	ldrb	r3, [r7, #31]
}
 800dca8:	4618      	mov	r0, r3
 800dcaa:	3720      	adds	r7, #32
 800dcac:	46bd      	mov	sp, r7
 800dcae:	bd80      	pop	{r7, pc}
 800dcb0:	08030920 	.word	0x08030920
 800dcb4:	20000040 	.word	0x20000040
 800dcb8:	0803093c 	.word	0x0803093c

0800dcbc <IsSameContent>:

uint8_t IsSameContent (uint32_t * p_Source, uint32_t * p_Destination, uint32_t Size)
{
 800dcbc:	b480      	push	{r7}
 800dcbe:	b087      	sub	sp, #28
 800dcc0:	af00      	add	r7, sp, #0
 800dcc2:	60f8      	str	r0, [r7, #12]
 800dcc4:	60b9      	str	r1, [r7, #8]
 800dcc6:	607a      	str	r2, [r7, #4]
  uint8_t error = TRUE;
 800dcc8:	2301      	movs	r3, #1
 800dcca:	75fb      	strb	r3, [r7, #23]

  /* Compare both contents */
  for (uint32_t cnt = 0x00;
 800dccc:	2300      	movs	r3, #0
 800dcce:	613b      	str	r3, [r7, #16]
 800dcd0:	e010      	b.n	800dcf4 <IsSameContent+0x38>
       (cnt < Size) && (error == TRUE);
       cnt++)
  {
    if (p_Source[cnt] != p_Destination[cnt])
 800dcd2:	693b      	ldr	r3, [r7, #16]
 800dcd4:	009b      	lsls	r3, r3, #2
 800dcd6:	68fa      	ldr	r2, [r7, #12]
 800dcd8:	4413      	add	r3, r2
 800dcda:	681a      	ldr	r2, [r3, #0]
 800dcdc:	693b      	ldr	r3, [r7, #16]
 800dcde:	009b      	lsls	r3, r3, #2
 800dce0:	68b9      	ldr	r1, [r7, #8]
 800dce2:	440b      	add	r3, r1
 800dce4:	681b      	ldr	r3, [r3, #0]
 800dce6:	429a      	cmp	r2, r3
 800dce8:	d001      	beq.n	800dcee <IsSameContent+0x32>
    {
      error = FALSE;
 800dcea:	2300      	movs	r3, #0
 800dcec:	75fb      	strb	r3, [r7, #23]
       cnt++)
 800dcee:	693b      	ldr	r3, [r7, #16]
 800dcf0:	3301      	adds	r3, #1
 800dcf2:	613b      	str	r3, [r7, #16]
       (cnt < Size) && (error == TRUE);
 800dcf4:	693a      	ldr	r2, [r7, #16]
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	429a      	cmp	r2, r3
 800dcfa:	d202      	bcs.n	800dd02 <IsSameContent+0x46>
 800dcfc:	7dfb      	ldrb	r3, [r7, #23]
 800dcfe:	2b01      	cmp	r3, #1
 800dd00:	d0e7      	beq.n	800dcd2 <IsSameContent+0x16>
    }
  }

  return error;
 800dd02:	7dfb      	ldrb	r3, [r7, #23]
}
 800dd04:	4618      	mov	r0, r3
 800dd06:	371c      	adds	r7, #28
 800dd08:	46bd      	mov	sp, r7
 800dd0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd0e:	4770      	bx	lr

0800dd10 <GetNewestBank>:

SNVMA_BankElt_t * GetNewestBank (SNVMA_BankElt_t * p_FirstBank,
                                 SNVMA_BankElt_t * p_SecondBank)
{
 800dd10:	b480      	push	{r7}
 800dd12:	b087      	sub	sp, #28
 800dd14:	af00      	add	r7, sp, #0
 800dd16:	6078      	str	r0, [r7, #4]
 800dd18:	6039      	str	r1, [r7, #0]
  SNVMA_BankElt_t * error = p_FirstBank;
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	617b      	str	r3, [r7, #20]

  SNVMA_BankHeader_t * p_FirstBankHeader = (SNVMA_BankHeader_t *)p_FirstBank->p_StartAddr;
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	681b      	ldr	r3, [r3, #0]
 800dd22:	613b      	str	r3, [r7, #16]
  SNVMA_BankHeader_t * p_SecondBankHeader = (SNVMA_BankHeader_t *)p_SecondBank->p_StartAddr;
 800dd24:	683b      	ldr	r3, [r7, #0]
 800dd26:	681b      	ldr	r3, [r3, #0]
 800dd28:	60fb      	str	r3, [r7, #12]

  /* Check which has the greatest counter value */
  if (p_FirstBankHeader->Counter <
 800dd2a:	693b      	ldr	r3, [r7, #16]
 800dd2c:	785a      	ldrb	r2, [r3, #1]
      p_SecondBankHeader->Counter)
 800dd2e:	68fb      	ldr	r3, [r7, #12]
 800dd30:	785b      	ldrb	r3, [r3, #1]
  if (p_FirstBankHeader->Counter <
 800dd32:	429a      	cmp	r2, r3
 800dd34:	d209      	bcs.n	800dd4a <GetNewestBank+0x3a>
  {
    if ((p_SecondBankHeader->Counter -
 800dd36:	68fb      	ldr	r3, [r7, #12]
 800dd38:	785b      	ldrb	r3, [r3, #1]
 800dd3a:	461a      	mov	r2, r3
         p_FirstBankHeader->Counter) != 0xFF)
 800dd3c:	693b      	ldr	r3, [r7, #16]
 800dd3e:	785b      	ldrb	r3, [r3, #1]
    if ((p_SecondBankHeader->Counter -
 800dd40:	1ad3      	subs	r3, r2, r3
 800dd42:	2bff      	cmp	r3, #255	@ 0xff
 800dd44:	d001      	beq.n	800dd4a <GetNewestBank+0x3a>
    {
      error = p_SecondBank;
 800dd46:	683b      	ldr	r3, [r7, #0]
 800dd48:	617b      	str	r3, [r7, #20]
    }
  }

  return error;
 800dd4a:	697b      	ldr	r3, [r7, #20]
}
 800dd4c:	4618      	mov	r0, r3
 800dd4e:	371c      	adds	r7, #28
 800dd50:	46bd      	mov	sp, r7
 800dd52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd56:	4770      	bx	lr

0800dd58 <EraseSector>:

uint8_t EraseSector (const uint32_t SectorId, const uint32_t SectorNumber)
{
 800dd58:	b580      	push	{r7, lr}
 800dd5a:	b088      	sub	sp, #32
 800dd5c:	af00      	add	r7, sp, #0
 800dd5e:	6078      	str	r0, [r7, #4]
 800dd60:	6039      	str	r1, [r7, #0]
  uint8_t error = FALSE;
 800dd62:	2300      	movs	r3, #0
 800dd64:	77fb      	strb	r3, [r7, #31]

  uint32_t pageError = 0x00;
 800dd66:	2300      	movs	r3, #0
 800dd68:	61bb      	str	r3, [r7, #24]

  FLASH_EraseInitTypeDef eraseInit =
 800dd6a:	2302      	movs	r3, #2
 800dd6c:	60fb      	str	r3, [r7, #12]
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	613b      	str	r3, [r7, #16]
 800dd72:	683b      	ldr	r3, [r7, #0]
 800dd74:	617b      	str	r3, [r7, #20]
    .TypeErase = FLASH_TYPEERASE_PAGES,
    .Page = SectorId,
    .NbPages = SectorNumber,
  };

  HAL_FLASH_Unlock();
 800dd76:	f7f5 ff67 	bl	8003c48 <HAL_FLASH_Unlock>

  if (HAL_FLASHEx_Erase(&eraseInit, &pageError) != HAL_OK)
 800dd7a:	f107 0218 	add.w	r2, r7, #24
 800dd7e:	f107 030c 	add.w	r3, r7, #12
 800dd82:	4611      	mov	r1, r2
 800dd84:	4618      	mov	r0, r3
 800dd86:	f7f6 f85b 	bl	8003e40 <HAL_FLASHEx_Erase>
 800dd8a:	4603      	mov	r3, r0
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	d002      	beq.n	800dd96 <EraseSector+0x3e>
  {
    error = FALSE;
 800dd90:	2300      	movs	r3, #0
 800dd92:	77fb      	strb	r3, [r7, #31]
 800dd94:	e008      	b.n	800dda8 <EraseSector+0x50>
  }
  else if (pageError != 0xFFFFFFFFu)
 800dd96:	69bb      	ldr	r3, [r7, #24]
 800dd98:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800dd9c:	d002      	beq.n	800dda4 <EraseSector+0x4c>
  {
    error = FALSE;
 800dd9e:	2300      	movs	r3, #0
 800dda0:	77fb      	strb	r3, [r7, #31]
 800dda2:	e001      	b.n	800dda8 <EraseSector+0x50>
  }
  else
  {
    error = TRUE;
 800dda4:	2301      	movs	r3, #1
 800dda6:	77fb      	strb	r3, [r7, #31]
  }

  HAL_FLASH_Lock();
 800dda8:	f7f5 ff70 	bl	8003c8c <HAL_FLASH_Lock>

  return error;
 800ddac:	7ffb      	ldrb	r3, [r7, #31]
}
 800ddae:	4618      	mov	r0, r3
 800ddb0:	3720      	adds	r7, #32
 800ddb2:	46bd      	mov	sp, r7
 800ddb4:	bd80      	pop	{r7, pc}
	...

0800ddb8 <StartFlashWrite>:

FM_Cmd_Status_t StartFlashWrite (const uint8_t NvmId)
{
 800ddb8:	b580      	push	{r7, lr}
 800ddba:	b08a      	sub	sp, #40	@ 0x28
 800ddbc:	af00      	add	r7, sp, #0
 800ddbe:	4603      	mov	r3, r0
 800ddc0:	71fb      	strb	r3, [r7, #7]
  FM_Cmd_Status_t error = FM_ERROR;
 800ddc2:	2302      	movs	r3, #2
 800ddc4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  uint32_t crcValue = 0x00;
 800ddc8:	2300      	movs	r3, #0
 800ddca:	60fb      	str	r3, [r7, #12]
  uint32_t cnt = 0x00;
 800ddcc:	2300      	movs	r3, #0
 800ddce:	627b      	str	r3, [r7, #36]	@ 0x24
  CRCCTRL_Cmd_Status_t eReturn;

  /* Reset value of SNVMA_BankHeader */
  memset ((void *)&SNVMA_WriteBankHeader,
 800ddd0:	2210      	movs	r2, #16
 800ddd2:	2100      	movs	r1, #0
 800ddd4:	486f      	ldr	r0, [pc, #444]	@ (800df94 <StartFlashWrite+0x1dc>)
 800ddd6:	f021 faeb 	bl	802f3b0 <memset>
          0x00,
          sizeof (SNVMA_BankHeader_t));

  /* Compute CRC for every buffer */
  while (cnt < SNVMA_MAX_NUMBER_BUFFER)
 800ddda:	e05d      	b.n	800de98 <StartFlashWrite+0xe0>
  {
    if (SNVMA_NvmConfiguration[NvmId].a_Buffers[cnt].p_Addr != NULL)
 800dddc:	79fb      	ldrb	r3, [r7, #7]
 800ddde:	496e      	ldr	r1, [pc, #440]	@ (800df98 <StartFlashWrite+0x1e0>)
 800dde0:	00da      	lsls	r2, r3, #3
 800dde2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dde4:	4413      	add	r3, r2
 800dde6:	3304      	adds	r3, #4
 800dde8:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	d04c      	beq.n	800de8a <StartFlashWrite+0xd2>
    {
      /* First crc computation */
      if (crcValue == 0x00)
 800ddf0:	68fb      	ldr	r3, [r7, #12]
 800ddf2:	2b00      	cmp	r3, #0
 800ddf4:	d124      	bne.n	800de40 <StartFlashWrite+0x88>
      {
        eReturn = CRCCTRL_Calculate (&SNVMA_Handle,
 800ddf6:	79fb      	ldrb	r3, [r7, #7]
 800ddf8:	4967      	ldr	r1, [pc, #412]	@ (800df98 <StartFlashWrite+0x1e0>)
 800ddfa:	00da      	lsls	r2, r3, #3
 800ddfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ddfe:	4413      	add	r3, r2
 800de00:	3304      	adds	r3, #4
 800de02:	f851 1033 	ldr.w	r1, [r1, r3, lsl #3]
 800de06:	79fb      	ldrb	r3, [r7, #7]
 800de08:	4863      	ldr	r0, [pc, #396]	@ (800df98 <StartFlashWrite+0x1e0>)
 800de0a:	00da      	lsls	r2, r3, #3
 800de0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de0e:	4413      	add	r3, r2
 800de10:	3304      	adds	r3, #4
 800de12:	00db      	lsls	r3, r3, #3
 800de14:	4403      	add	r3, r0
 800de16:	685a      	ldr	r2, [r3, #4]
 800de18:	f107 030c 	add.w	r3, r7, #12
 800de1c:	485f      	ldr	r0, [pc, #380]	@ (800df9c <StartFlashWrite+0x1e4>)
 800de1e:	f001 fac1 	bl	800f3a4 <CRCCTRL_Calculate>
 800de22:	4603      	mov	r3, r0
 800de24:	76fb      	strb	r3, [r7, #27]
                                      SNVMA_NvmConfiguration[NvmId].a_Buffers[cnt].p_Addr,
                                      SNVMA_NvmConfiguration[NvmId].a_Buffers[cnt].Size,
                                      &crcValue);

        if (CRCCTRL_OK == eReturn)
 800de26:	7efb      	ldrb	r3, [r7, #27]
 800de28:	2b00      	cmp	r3, #0
 800de2a:	d103      	bne.n	800de34 <StartFlashWrite+0x7c>
        {
          cnt++;
 800de2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de2e:	3301      	adds	r3, #1
 800de30:	627b      	str	r3, [r7, #36]	@ 0x24
 800de32:	e031      	b.n	800de98 <StartFlashWrite+0xe0>
        }
        else if (CRCCTRL_BUSY == eReturn)
 800de34:	7efb      	ldrb	r3, [r7, #27]
 800de36:	2b02      	cmp	r3, #2
 800de38:	d02b      	beq.n	800de92 <StartFlashWrite+0xda>
        {
          continue;
        }
        else
        {
          Error_Handler();
 800de3a:	f7f3 f949 	bl	80010d0 <Error_Handler>
 800de3e:	e02b      	b.n	800de98 <StartFlashWrite+0xe0>
        }
      }
      else
      {
        eReturn = CRCCTRL_Accumulate (&SNVMA_Handle,
 800de40:	79fb      	ldrb	r3, [r7, #7]
 800de42:	4955      	ldr	r1, [pc, #340]	@ (800df98 <StartFlashWrite+0x1e0>)
 800de44:	00da      	lsls	r2, r3, #3
 800de46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de48:	4413      	add	r3, r2
 800de4a:	3304      	adds	r3, #4
 800de4c:	f851 1033 	ldr.w	r1, [r1, r3, lsl #3]
 800de50:	79fb      	ldrb	r3, [r7, #7]
 800de52:	4851      	ldr	r0, [pc, #324]	@ (800df98 <StartFlashWrite+0x1e0>)
 800de54:	00da      	lsls	r2, r3, #3
 800de56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de58:	4413      	add	r3, r2
 800de5a:	3304      	adds	r3, #4
 800de5c:	00db      	lsls	r3, r3, #3
 800de5e:	4403      	add	r3, r0
 800de60:	685a      	ldr	r2, [r3, #4]
 800de62:	f107 030c 	add.w	r3, r7, #12
 800de66:	484d      	ldr	r0, [pc, #308]	@ (800df9c <StartFlashWrite+0x1e4>)
 800de68:	f001 faf8 	bl	800f45c <CRCCTRL_Accumulate>
 800de6c:	4603      	mov	r3, r0
 800de6e:	76fb      	strb	r3, [r7, #27]
                                      SNVMA_NvmConfiguration[NvmId].a_Buffers[cnt].p_Addr,
                                      SNVMA_NvmConfiguration[NvmId].a_Buffers[cnt].Size,
                                      &crcValue);

        if (CRCCTRL_OK == eReturn)
 800de70:	7efb      	ldrb	r3, [r7, #27]
 800de72:	2b00      	cmp	r3, #0
 800de74:	d103      	bne.n	800de7e <StartFlashWrite+0xc6>
        {
          cnt++;
 800de76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de78:	3301      	adds	r3, #1
 800de7a:	627b      	str	r3, [r7, #36]	@ 0x24
 800de7c:	e00c      	b.n	800de98 <StartFlashWrite+0xe0>
        }
        else if (CRCCTRL_BUSY == eReturn)
 800de7e:	7efb      	ldrb	r3, [r7, #27]
 800de80:	2b02      	cmp	r3, #2
 800de82:	d008      	beq.n	800de96 <StartFlashWrite+0xde>
        {
          continue;
        }
        else
        {
          Error_Handler();
 800de84:	f7f3 f924 	bl	80010d0 <Error_Handler>
 800de88:	e006      	b.n	800de98 <StartFlashWrite+0xe0>
      }
    }
    else
    {
      /* Keep going */
      cnt++;
 800de8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de8c:	3301      	adds	r3, #1
 800de8e:	627b      	str	r3, [r7, #36]	@ 0x24
 800de90:	e002      	b.n	800de98 <StartFlashWrite+0xe0>
          continue;
 800de92:	bf00      	nop
 800de94:	e000      	b.n	800de98 <StartFlashWrite+0xe0>
          continue;
 800de96:	bf00      	nop
  while (cnt < SNVMA_MAX_NUMBER_BUFFER)
 800de98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de9a:	2b03      	cmp	r3, #3
 800de9c:	d99e      	bls.n	800dddc <StartFlashWrite+0x24>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800de9e:	f3ef 8310 	mrs	r3, PRIMASK
 800dea2:	617b      	str	r3, [r7, #20]
  return(result);
 800dea4:	697b      	ldr	r3, [r7, #20]
  }

  /* -- Build the header -- */

  /* Enter critical section */
  UTILS_ENTER_CRITICAL_SECTION();
 800dea6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800dea8:	b672      	cpsid	i
}
 800deaa:	bf00      	nop

  /* Check if there is an old bank to pursue counter value */
  if (SNVMA_NvmConfiguration[NvmId].p_BankForRestore != NULL)
 800deac:	79fb      	ldrb	r3, [r7, #7]
 800deae:	4a3a      	ldr	r2, [pc, #232]	@ (800df98 <StartFlashWrite+0x1e0>)
 800deb0:	019b      	lsls	r3, r3, #6
 800deb2:	4413      	add	r3, r2
 800deb4:	330c      	adds	r3, #12
 800deb6:	681b      	ldr	r3, [r3, #0]
 800deb8:	2b00      	cmp	r3, #0
 800deba:	d00b      	beq.n	800ded4 <StartFlashWrite+0x11c>
  {
    SNVMA_WriteBankHeader.Counter = (((SNVMA_BankHeader_t *)
                                      (SNVMA_NvmConfiguration[NvmId].p_BankForRestore->p_StartAddr))->Counter) + 1;
 800debc:	79fb      	ldrb	r3, [r7, #7]
 800debe:	4a36      	ldr	r2, [pc, #216]	@ (800df98 <StartFlashWrite+0x1e0>)
 800dec0:	019b      	lsls	r3, r3, #6
 800dec2:	4413      	add	r3, r2
 800dec4:	330c      	adds	r3, #12
 800dec6:	681b      	ldr	r3, [r3, #0]
 800dec8:	681b      	ldr	r3, [r3, #0]
 800deca:	785b      	ldrb	r3, [r3, #1]
 800decc:	3301      	adds	r3, #1
 800dece:	b2da      	uxtb	r2, r3
    SNVMA_WriteBankHeader.Counter = (((SNVMA_BankHeader_t *)
 800ded0:	4b30      	ldr	r3, [pc, #192]	@ (800df94 <StartFlashWrite+0x1dc>)
 800ded2:	705a      	strb	r2, [r3, #1]
  }

  /* Update CRC value */
  SNVMA_WriteBankHeader.Crc = (uint16_t)(crcValue & 0x0000FFFF);
 800ded4:	68fb      	ldr	r3, [r7, #12]
 800ded6:	b29a      	uxth	r2, r3
 800ded8:	4b2e      	ldr	r3, [pc, #184]	@ (800df94 <StartFlashWrite+0x1dc>)
 800deda:	805a      	strh	r2, [r3, #2]

  /* Update buffers info */
  SNVMA_WriteBankHeader.BufferId1 = (NvmId * SNVMA_MAX_NUMBER_BUFFER);
 800dedc:	79fb      	ldrb	r3, [r7, #7]
 800dede:	009b      	lsls	r3, r3, #2
 800dee0:	b2da      	uxtb	r2, r3
 800dee2:	4b2c      	ldr	r3, [pc, #176]	@ (800df94 <StartFlashWrite+0x1dc>)
 800dee4:	711a      	strb	r2, [r3, #4]
  SNVMA_WriteBankHeader.SizeId1 = SNVMA_NvmConfiguration[NvmId].a_Buffers[0x00].Size;
 800dee6:	79fb      	ldrb	r3, [r7, #7]
 800dee8:	4a2b      	ldr	r2, [pc, #172]	@ (800df98 <StartFlashWrite+0x1e0>)
 800deea:	019b      	lsls	r3, r3, #6
 800deec:	4413      	add	r3, r2
 800deee:	3324      	adds	r3, #36	@ 0x24
 800def0:	681b      	ldr	r3, [r3, #0]
 800def2:	b29a      	uxth	r2, r3
 800def4:	4b27      	ldr	r3, [pc, #156]	@ (800df94 <StartFlashWrite+0x1dc>)
 800def6:	f8a3 2005 	strh.w	r2, [r3, #5]
  SNVMA_WriteBankHeader.BufferId2 = (NvmId * SNVMA_MAX_NUMBER_BUFFER) + 1u;
 800defa:	79fb      	ldrb	r3, [r7, #7]
 800defc:	009b      	lsls	r3, r3, #2
 800defe:	b2db      	uxtb	r3, r3
 800df00:	3301      	adds	r3, #1
 800df02:	b2da      	uxtb	r2, r3
 800df04:	4b23      	ldr	r3, [pc, #140]	@ (800df94 <StartFlashWrite+0x1dc>)
 800df06:	71da      	strb	r2, [r3, #7]
  SNVMA_WriteBankHeader.SizeId2 = SNVMA_NvmConfiguration[NvmId].a_Buffers[0x01].Size;
 800df08:	79fb      	ldrb	r3, [r7, #7]
 800df0a:	4a23      	ldr	r2, [pc, #140]	@ (800df98 <StartFlashWrite+0x1e0>)
 800df0c:	019b      	lsls	r3, r3, #6
 800df0e:	4413      	add	r3, r2
 800df10:	332c      	adds	r3, #44	@ 0x2c
 800df12:	681b      	ldr	r3, [r3, #0]
 800df14:	b29a      	uxth	r2, r3
 800df16:	4b1f      	ldr	r3, [pc, #124]	@ (800df94 <StartFlashWrite+0x1dc>)
 800df18:	811a      	strh	r2, [r3, #8]
  SNVMA_WriteBankHeader.BufferId3 = (NvmId * SNVMA_MAX_NUMBER_BUFFER) + 2u;
 800df1a:	79fb      	ldrb	r3, [r7, #7]
 800df1c:	009b      	lsls	r3, r3, #2
 800df1e:	b2db      	uxtb	r3, r3
 800df20:	3302      	adds	r3, #2
 800df22:	b2da      	uxtb	r2, r3
 800df24:	4b1b      	ldr	r3, [pc, #108]	@ (800df94 <StartFlashWrite+0x1dc>)
 800df26:	729a      	strb	r2, [r3, #10]
  SNVMA_WriteBankHeader.SizeId3 = SNVMA_NvmConfiguration[NvmId].a_Buffers[0x02].Size;
 800df28:	79fb      	ldrb	r3, [r7, #7]
 800df2a:	4a1b      	ldr	r2, [pc, #108]	@ (800df98 <StartFlashWrite+0x1e0>)
 800df2c:	019b      	lsls	r3, r3, #6
 800df2e:	4413      	add	r3, r2
 800df30:	3334      	adds	r3, #52	@ 0x34
 800df32:	681b      	ldr	r3, [r3, #0]
 800df34:	b29a      	uxth	r2, r3
 800df36:	4b17      	ldr	r3, [pc, #92]	@ (800df94 <StartFlashWrite+0x1dc>)
 800df38:	f8a3 200b 	strh.w	r2, [r3, #11]
  SNVMA_WriteBankHeader.BufferId4 = (NvmId * SNVMA_MAX_NUMBER_BUFFER) + 3u;
 800df3c:	79fb      	ldrb	r3, [r7, #7]
 800df3e:	009b      	lsls	r3, r3, #2
 800df40:	b2db      	uxtb	r3, r3
 800df42:	3303      	adds	r3, #3
 800df44:	b2da      	uxtb	r2, r3
 800df46:	4b13      	ldr	r3, [pc, #76]	@ (800df94 <StartFlashWrite+0x1dc>)
 800df48:	735a      	strb	r2, [r3, #13]
  SNVMA_WriteBankHeader.SizeId4 = SNVMA_NvmConfiguration[NvmId].a_Buffers[0x03].Size;
 800df4a:	79fb      	ldrb	r3, [r7, #7]
 800df4c:	4a12      	ldr	r2, [pc, #72]	@ (800df98 <StartFlashWrite+0x1e0>)
 800df4e:	019b      	lsls	r3, r3, #6
 800df50:	4413      	add	r3, r2
 800df52:	333c      	adds	r3, #60	@ 0x3c
 800df54:	681b      	ldr	r3, [r3, #0]
 800df56:	b29a      	uxth	r2, r3
 800df58:	4b0e      	ldr	r3, [pc, #56]	@ (800df94 <StartFlashWrite+0x1dc>)
 800df5a:	81da      	strh	r2, [r3, #14]
 800df5c:	69fb      	ldr	r3, [r7, #28]
 800df5e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800df60:	693b      	ldr	r3, [r7, #16]
 800df62:	f383 8810 	msr	PRIMASK, r3
}
 800df66:	bf00      	nop
  /* Leave critical section */
  UTILS_EXIT_CRITICAL_SECTION ();

  /* Write the header */
  error = FM_Write ((uint32_t *)&SNVMA_WriteBankHeader,
                                SNVMA_NvmConfiguration[NvmId].p_BankForWrite->p_StartAddr,
 800df68:	79fb      	ldrb	r3, [r7, #7]
 800df6a:	4a0b      	ldr	r2, [pc, #44]	@ (800df98 <StartFlashWrite+0x1e0>)
 800df6c:	019b      	lsls	r3, r3, #6
 800df6e:	4413      	add	r3, r2
 800df70:	3308      	adds	r3, #8
 800df72:	681b      	ldr	r3, [r3, #0]
  error = FM_Write ((uint32_t *)&SNVMA_WriteBankHeader,
 800df74:	6819      	ldr	r1, [r3, #0]
 800df76:	4b0a      	ldr	r3, [pc, #40]	@ (800dfa0 <StartFlashWrite+0x1e8>)
 800df78:	2204      	movs	r2, #4
 800df7a:	4806      	ldr	r0, [pc, #24]	@ (800df94 <StartFlashWrite+0x1dc>)
 800df7c:	f7fd fada 	bl	800b534 <FM_Write>
 800df80:	4603      	mov	r3, r0
 800df82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
                                (sizeof (SNVMA_BankHeader_t) / sizeof (uint32_t)),
                                &SNVMA_FlashCallback);

  return error;
 800df86:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 800df8a:	4618      	mov	r0, r3
 800df8c:	3728      	adds	r7, #40	@ 0x28
 800df8e:	46bd      	mov	sp, r7
 800df90:	bd80      	pop	{r7, pc}
 800df92:	bf00      	nop
 800df94:	20006a70 	.word	0x20006a70
 800df98:	20000068 	.word	0x20000068
 800df9c:	20000040 	.word	0x20000040
 800dfa0:	20006a80 	.word	0x20006a80

0800dfa4 <InvokeBufferCallback>:

void InvokeBufferCallback (const uint8_t NvmId, const SNVMA_Callback_Status_t CallbackStatus)
{
 800dfa4:	b580      	push	{r7, lr}
 800dfa6:	b08a      	sub	sp, #40	@ 0x28
 800dfa8:	af00      	add	r7, sp, #0
 800dfaa:	4603      	mov	r3, r0
 800dfac:	460a      	mov	r2, r1
 800dfae:	71fb      	strb	r3, [r7, #7]
 800dfb0:	4613      	mov	r3, r2
 800dfb2:	71bb      	strb	r3, [r7, #6]
  uint8_t pendingShift = 0x00;
 800dfb4:	2300      	movs	r3, #0
 800dfb6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t tmpMask = 0x00;
 800dfba:	2300      	movs	r3, #0
 800dfbc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  for (pendingShift = 0x00;
 800dfc0:	2300      	movs	r3, #0
 800dfc2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800dfc6:	e080      	b.n	800e0ca <InvokeBufferCallback+0x126>
       ((SNVMA_NvmConfiguration[NvmId].PendingBufferWriteOp != 0x00) &&
        (pendingShift < SNVMA_MAX_NUMBER_BUFFER));
       pendingShift++)
  {
    tmpMask = SNVMA_NvmConfiguration[NvmId].PendingBufferWriteOp &
 800dfc8:	79fb      	ldrb	r3, [r7, #7]
 800dfca:	4a48      	ldr	r2, [pc, #288]	@ (800e0ec <InvokeBufferCallback+0x148>)
 800dfcc:	019b      	lsls	r3, r3, #6
 800dfce:	4413      	add	r3, r2
 800dfd0:	3302      	adds	r3, #2
 800dfd2:	781a      	ldrb	r2, [r3, #0]
              (1u << (pendingShift + SNVMA_MAX_NUMBER_BUFFER));
 800dfd4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800dfd8:	3304      	adds	r3, #4
 800dfda:	2101      	movs	r1, #1
 800dfdc:	fa01 f303 	lsl.w	r3, r1, r3
    tmpMask = SNVMA_NvmConfiguration[NvmId].PendingBufferWriteOp &
 800dfe0:	b2db      	uxtb	r3, r3
 800dfe2:	4013      	ands	r3, r2
 800dfe4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

    /* Is there an active write request ? */
    if (tmpMask != 0x00)
 800dfe8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800dfec:	2b00      	cmp	r3, #0
 800dfee:	d067      	beq.n	800e0c0 <InvokeBufferCallback+0x11c>
    {
      /* Has a new request come ? */
      if ((SNVMA_NvmConfiguration[NvmId].PendingBufferWriteOp & (1u << pendingShift)) == 0x00)
 800dff0:	79fb      	ldrb	r3, [r7, #7]
 800dff2:	4a3e      	ldr	r2, [pc, #248]	@ (800e0ec <InvokeBufferCallback+0x148>)
 800dff4:	019b      	lsls	r3, r3, #6
 800dff6:	4413      	add	r3, r2
 800dff8:	3302      	adds	r3, #2
 800dffa:	781b      	ldrb	r3, [r3, #0]
 800dffc:	461a      	mov	r2, r3
 800dffe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e002:	fa22 f303 	lsr.w	r3, r2, r3
 800e006:	f003 0301 	and.w	r3, r3, #1
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d158      	bne.n	800e0c0 <InvokeBufferCallback+0x11c>
      {
        if (SNVMA_NvmConfiguration[NvmId].a_Callback[pendingShift] != NULL)
 800e00e:	79fa      	ldrb	r2, [r7, #7]
 800e010:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e014:	4935      	ldr	r1, [pc, #212]	@ (800e0ec <InvokeBufferCallback+0x148>)
 800e016:	0112      	lsls	r2, r2, #4
 800e018:	4413      	add	r3, r2
 800e01a:	3304      	adds	r3, #4
 800e01c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800e020:	2b00      	cmp	r3, #0
 800e022:	d028      	beq.n	800e076 <InvokeBufferCallback+0xd2>
        {
          /* Invoke callback */
          SNVMA_NvmConfiguration[NvmId].a_Callback[pendingShift] (CallbackStatus);
 800e024:	79fa      	ldrb	r2, [r7, #7]
 800e026:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e02a:	4930      	ldr	r1, [pc, #192]	@ (800e0ec <InvokeBufferCallback+0x148>)
 800e02c:	0112      	lsls	r2, r2, #4
 800e02e:	4413      	add	r3, r2
 800e030:	3304      	adds	r3, #4
 800e032:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800e036:	79ba      	ldrb	r2, [r7, #6]
 800e038:	4610      	mov	r0, r2
 800e03a:	4798      	blx	r3

          LOG_INFO_SYSTEM("\r\nSNVMA - InvokeBufferCallback for NVM ID : %d\n", NvmId);
 800e03c:	79fb      	ldrb	r3, [r7, #7]
 800e03e:	4a2c      	ldr	r2, [pc, #176]	@ (800e0f0 <InvokeBufferCallback+0x14c>)
 800e040:	2101      	movs	r1, #1
 800e042:	2000      	movs	r0, #0
 800e044:	f7fc f98a 	bl	800a35c <Log_Module_Print>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800e048:	f3ef 8310 	mrs	r3, PRIMASK
 800e04c:	617b      	str	r3, [r7, #20]
  return(result);
 800e04e:	697b      	ldr	r3, [r7, #20]

          /* Enter critical section */
          UTILS_ENTER_CRITICAL_SECTION();
 800e050:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800e052:	b672      	cpsid	i
}
 800e054:	bf00      	nop

          /* Clear callback list */
          SNVMA_NvmConfiguration[NvmId].a_Callback[pendingShift] = NULL;
 800e056:	79fa      	ldrb	r2, [r7, #7]
 800e058:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e05c:	4923      	ldr	r1, [pc, #140]	@ (800e0ec <InvokeBufferCallback+0x148>)
 800e05e:	0112      	lsls	r2, r2, #4
 800e060:	4413      	add	r3, r2
 800e062:	3304      	adds	r3, #4
 800e064:	2200      	movs	r2, #0
 800e066:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800e06a:	6a3b      	ldr	r3, [r7, #32]
 800e06c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e06e:	69bb      	ldr	r3, [r7, #24]
 800e070:	f383 8810 	msr	PRIMASK, r3
}
 800e074:	bf00      	nop
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800e076:	f3ef 8310 	mrs	r3, PRIMASK
 800e07a:	60fb      	str	r3, [r7, #12]
  return(result);
 800e07c:	68fb      	ldr	r3, [r7, #12]
          /* Leave critical section */
          UTILS_EXIT_CRITICAL_SECTION ();
        }

        /* Enter critical section */
        UTILS_ENTER_CRITICAL_SECTION();
 800e07e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800e080:	b672      	cpsid	i
}
 800e082:	bf00      	nop

        /* Remove this pending buffer from the active list */
        SNVMA_NvmConfiguration[NvmId].PendingBufferWriteOp &= ~(1u << (pendingShift + SNVMA_MAX_NUMBER_BUFFER));
 800e084:	79fb      	ldrb	r3, [r7, #7]
 800e086:	4a19      	ldr	r2, [pc, #100]	@ (800e0ec <InvokeBufferCallback+0x148>)
 800e088:	019b      	lsls	r3, r3, #6
 800e08a:	4413      	add	r3, r2
 800e08c:	3302      	adds	r3, #2
 800e08e:	7819      	ldrb	r1, [r3, #0]
 800e090:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e094:	3304      	adds	r3, #4
 800e096:	2201      	movs	r2, #1
 800e098:	fa02 f303 	lsl.w	r3, r2, r3
 800e09c:	b2db      	uxtb	r3, r3
 800e09e:	43db      	mvns	r3, r3
 800e0a0:	b2da      	uxtb	r2, r3
 800e0a2:	79fb      	ldrb	r3, [r7, #7]
 800e0a4:	400a      	ands	r2, r1
 800e0a6:	b2d1      	uxtb	r1, r2
 800e0a8:	4a10      	ldr	r2, [pc, #64]	@ (800e0ec <InvokeBufferCallback+0x148>)
 800e0aa:	019b      	lsls	r3, r3, #6
 800e0ac:	4413      	add	r3, r2
 800e0ae:	3302      	adds	r3, #2
 800e0b0:	460a      	mov	r2, r1
 800e0b2:	701a      	strb	r2, [r3, #0]
 800e0b4:	69fb      	ldr	r3, [r7, #28]
 800e0b6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e0b8:	693b      	ldr	r3, [r7, #16]
 800e0ba:	f383 8810 	msr	PRIMASK, r3
}
 800e0be:	bf00      	nop
       pendingShift++)
 800e0c0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e0c4:	3301      	adds	r3, #1
 800e0c6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
       ((SNVMA_NvmConfiguration[NvmId].PendingBufferWriteOp != 0x00) &&
 800e0ca:	79fb      	ldrb	r3, [r7, #7]
 800e0cc:	4a07      	ldr	r2, [pc, #28]	@ (800e0ec <InvokeBufferCallback+0x148>)
 800e0ce:	019b      	lsls	r3, r3, #6
 800e0d0:	4413      	add	r3, r2
 800e0d2:	3302      	adds	r3, #2
 800e0d4:	781b      	ldrb	r3, [r3, #0]
 800e0d6:	2b00      	cmp	r3, #0
 800e0d8:	d004      	beq.n	800e0e4 <InvokeBufferCallback+0x140>
 800e0da:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e0de:	2b03      	cmp	r3, #3
 800e0e0:	f67f af72 	bls.w	800dfc8 <InvokeBufferCallback+0x24>
      {
        /* Do not notify, a retry shall be planned */
      }
    }
  }
}
 800e0e4:	bf00      	nop
 800e0e6:	3728      	adds	r7, #40	@ 0x28
 800e0e8:	46bd      	mov	sp, r7
 800e0ea:	bd80      	pop	{r7, pc}
 800e0ec:	20000068 	.word	0x20000068
 800e0f0:	08030964 	.word	0x08030964

0800e0f4 <AMM_Init>:
static inline AMM_VirtualMemoryCallbackFunction_t * popActive (void);

/* Functions Definition ------------------------------------------------------*/

AMM_Function_Error_t AMM_Init (const AMM_InitParameters_t * const p_InitParams)
{
 800e0f4:	b580      	push	{r7, lr}
 800e0f6:	b086      	sub	sp, #24
 800e0f8:	af00      	add	r7, sp, #0
 800e0fa:	6078      	str	r0, [r7, #4]
  AMM_Function_Error_t error = AMM_ERROR_NOK;
 800e0fc:	2301      	movs	r3, #1
 800e0fe:	75fb      	strb	r3, [r7, #23]

  uint32_t neededPoolSize = 0x00;
 800e100:	2300      	movs	r3, #0
 800e102:	613b      	str	r3, [r7, #16]

  /* Check if not already initialized */
  if (AmmInitialized == INITIALIZED)
 800e104:	4b99      	ldr	r3, [pc, #612]	@ (800e36c <AMM_Init+0x278>)
 800e106:	781b      	ldrb	r3, [r3, #0]
 800e108:	2b01      	cmp	r3, #1
 800e10a:	d102      	bne.n	800e112 <AMM_Init+0x1e>
  {
    error = AMM_ERROR_ALREADY_INIT;
 800e10c:	230c      	movs	r3, #12
 800e10e:	75fb      	strb	r3, [r7, #23]
 800e110:	e127      	b.n	800e362 <AMM_Init+0x26e>
  }
  /* Check parameter null pointer */
  else if (p_InitParams == NULL)
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	2b00      	cmp	r3, #0
 800e116:	d102      	bne.n	800e11e <AMM_Init+0x2a>
  {
    error = AMM_ERROR_BAD_POINTER;
 800e118:	2302      	movs	r3, #2
 800e11a:	75fb      	strb	r3, [r7, #23]
 800e11c:	e121      	b.n	800e362 <AMM_Init+0x26e>
  }
  /* Check Pool address null pointer */
  else if (p_InitParams->p_PoolAddr == NULL)
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	681b      	ldr	r3, [r3, #0]
 800e122:	2b00      	cmp	r3, #0
 800e124:	d102      	bne.n	800e12c <AMM_Init+0x38>
  {
    error = AMM_ERROR_BAD_POOL_CONFIG;
 800e126:	2303      	movs	r3, #3
 800e128:	75fb      	strb	r3, [r7, #23]
 800e12a:	e11a      	b.n	800e362 <AMM_Init+0x26e>
  }
  /* Check if Pool address is 32bits aligned */
  else if ((MASK_ALIGNED_32BITS & (uint32_t)p_InitParams->p_PoolAddr) != 0)
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	681b      	ldr	r3, [r3, #0]
 800e130:	f003 0303 	and.w	r3, r3, #3
 800e134:	2b00      	cmp	r3, #0
 800e136:	d002      	beq.n	800e13e <AMM_Init+0x4a>
  {
    error = AMM_ERROR_BAD_POOL_CONFIG;
 800e138:	2303      	movs	r3, #3
 800e13a:	75fb      	strb	r3, [r7, #23]
 800e13c:	e111      	b.n	800e362 <AMM_Init+0x26e>
  }
  /* Check Pool size shall be non zero */
  else if (p_InitParams->PoolSize == 0)
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	685b      	ldr	r3, [r3, #4]
 800e142:	2b00      	cmp	r3, #0
 800e144:	d102      	bne.n	800e14c <AMM_Init+0x58>
  {
    error = AMM_ERROR_BAD_POOL_CONFIG;
 800e146:	2303      	movs	r3, #3
 800e148:	75fb      	strb	r3, [r7, #23]
 800e14a:	e10a      	b.n	800e362 <AMM_Init+0x26e>
  }
  /* Check that Virtual memories can not be declared without a proper configuration list */
  else if ((p_InitParams->VirtualMemoryNumber != 0x00) &&
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	689b      	ldr	r3, [r3, #8]
 800e150:	2b00      	cmp	r3, #0
 800e152:	d006      	beq.n	800e162 <AMM_Init+0x6e>
           (p_InitParams->p_VirtualMemoryConfigList == NULL))
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	68db      	ldr	r3, [r3, #12]
  else if ((p_InitParams->VirtualMemoryNumber != 0x00) &&
 800e158:	2b00      	cmp	r3, #0
 800e15a:	d102      	bne.n	800e162 <AMM_Init+0x6e>
  {
      error = AMM_ERROR_BAD_VIRTUAL_CONFIG;
 800e15c:	2304      	movs	r3, #4
 800e15e:	75fb      	strb	r3, [r7, #23]
 800e160:	e0ff      	b.n	800e362 <AMM_Init+0x26e>
  }
  else
  {
    neededPoolSize = p_InitParams->VirtualMemoryNumber * AMM_VIRTUAL_INFO_ELEMENT_SIZE;
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	689a      	ldr	r2, [r3, #8]
 800e166:	4613      	mov	r3, r2
 800e168:	005b      	lsls	r3, r3, #1
 800e16a:	4413      	add	r3, r2
 800e16c:	613b      	str	r3, [r7, #16]

    /* Check the parameters relative to virtual memories */
    for (uint32_t memIdx = 0x00;
 800e16e:	2300      	movs	r3, #0
 800e170:	60fb      	str	r3, [r7, #12]
 800e172:	e028      	b.n	800e1c6 <AMM_Init+0xd2>
         (memIdx < p_InitParams->VirtualMemoryNumber) && (error == AMM_ERROR_NOK);
         memIdx++)
    {
      /* Add the amount of needed space for this virtual memory */
      neededPoolSize = neededPoolSize + p_InitParams->p_VirtualMemoryConfigList[memIdx].BufferSize;
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	68da      	ldr	r2, [r3, #12]
 800e178:	68fb      	ldr	r3, [r7, #12]
 800e17a:	00db      	lsls	r3, r3, #3
 800e17c:	4413      	add	r3, r2
 800e17e:	685b      	ldr	r3, [r3, #4]
 800e180:	693a      	ldr	r2, [r7, #16]
 800e182:	4413      	add	r3, r2
 800e184:	613b      	str	r3, [r7, #16]

      /* Check the virtual memory ID. Shall not be zero */
      if (p_InitParams->p_VirtualMemoryConfigList[memIdx].Id == 0)
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	68da      	ldr	r2, [r3, #12]
 800e18a:	68fb      	ldr	r3, [r7, #12]
 800e18c:	00db      	lsls	r3, r3, #3
 800e18e:	4413      	add	r3, r2
 800e190:	781b      	ldrb	r3, [r3, #0]
 800e192:	2b00      	cmp	r3, #0
 800e194:	d102      	bne.n	800e19c <AMM_Init+0xa8>
      {
        error = AMM_ERROR_BAD_VIRTUAL_CONFIG;
 800e196:	2304      	movs	r3, #4
 800e198:	75fb      	strb	r3, [r7, #23]
 800e19a:	e011      	b.n	800e1c0 <AMM_Init+0xcc>
      }
      /* Check if size is not zero */
      else if (p_InitParams->p_VirtualMemoryConfigList[memIdx].BufferSize == 0)
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	68da      	ldr	r2, [r3, #12]
 800e1a0:	68fb      	ldr	r3, [r7, #12]
 800e1a2:	00db      	lsls	r3, r3, #3
 800e1a4:	4413      	add	r3, r2
 800e1a6:	685b      	ldr	r3, [r3, #4]
 800e1a8:	2b00      	cmp	r3, #0
 800e1aa:	d102      	bne.n	800e1b2 <AMM_Init+0xbe>
      {
        error = AMM_ERROR_BAD_VIRTUAL_CONFIG;
 800e1ac:	2304      	movs	r3, #4
 800e1ae:	75fb      	strb	r3, [r7, #23]
 800e1b0:	e006      	b.n	800e1c0 <AMM_Init+0xcc>
      }
      /* Check if amount of needed memory has overlapped current pool size */
      else if (p_InitParams->PoolSize < neededPoolSize)
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	685b      	ldr	r3, [r3, #4]
 800e1b6:	693a      	ldr	r2, [r7, #16]
 800e1b8:	429a      	cmp	r2, r3
 800e1ba:	d901      	bls.n	800e1c0 <AMM_Init+0xcc>
      {
        error = AMM_ERROR_BAD_VIRTUAL_CONFIG;
 800e1bc:	2304      	movs	r3, #4
 800e1be:	75fb      	strb	r3, [r7, #23]
         memIdx++)
 800e1c0:	68fb      	ldr	r3, [r7, #12]
 800e1c2:	3301      	adds	r3, #1
 800e1c4:	60fb      	str	r3, [r7, #12]
         (memIdx < p_InitParams->VirtualMemoryNumber) && (error == AMM_ERROR_NOK);
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	689b      	ldr	r3, [r3, #8]
 800e1ca:	68fa      	ldr	r2, [r7, #12]
 800e1cc:	429a      	cmp	r2, r3
 800e1ce:	d202      	bcs.n	800e1d6 <AMM_Init+0xe2>
 800e1d0:	7dfb      	ldrb	r3, [r7, #23]
 800e1d2:	2b01      	cmp	r3, #1
 800e1d4:	d0ce      	beq.n	800e174 <AMM_Init+0x80>
        /* Do nothing, all ok yet */
      }
    }

    /* Check if parameters are still ok */
    if (error == AMM_ERROR_NOK)
 800e1d6:	7dfb      	ldrb	r3, [r7, #23]
 800e1d8:	2b01      	cmp	r3, #1
 800e1da:	f040 80c2 	bne.w	800e362 <AMM_Init+0x26e>
    {
      /* Init all private variables: Pool relative */
      p_AmmPoolAddress = NULL;
 800e1de:	4b64      	ldr	r3, [pc, #400]	@ (800e370 <AMM_Init+0x27c>)
 800e1e0:	2200      	movs	r2, #0
 800e1e2:	601a      	str	r2, [r3, #0]
      AmmPoolSize = 0x00;
 800e1e4:	4b63      	ldr	r3, [pc, #396]	@ (800e374 <AMM_Init+0x280>)
 800e1e6:	2200      	movs	r2, #0
 800e1e8:	601a      	str	r2, [r3, #0]
      AmmOccupiedSharedPoolSize = 0x00;
 800e1ea:	4b63      	ldr	r3, [pc, #396]	@ (800e378 <AMM_Init+0x284>)
 800e1ec:	2200      	movs	r2, #0
 800e1ee:	601a      	str	r2, [r3, #0]
      AmmRequiredVirtualMemorySize = 0x00;
 800e1f0:	4b62      	ldr	r3, [pc, #392]	@ (800e37c <AMM_Init+0x288>)
 800e1f2:	2200      	movs	r2, #0
 800e1f4:	601a      	str	r2, [r3, #0]

      /* Init all private variables: Virtual Memory relative */
      AmmVirtualMemoryNumber = 0x00;
 800e1f6:	4b62      	ldr	r3, [pc, #392]	@ (800e380 <AMM_Init+0x28c>)
 800e1f8:	2200      	movs	r2, #0
 800e1fa:	601a      	str	r2, [r3, #0]
      p_AmmVirtualMemoryList = NULL;
 800e1fc:	4b61      	ldr	r3, [pc, #388]	@ (800e384 <AMM_Init+0x290>)
 800e1fe:	2200      	movs	r2, #0
 800e200:	601a      	str	r2, [r3, #0]

      /* Init all private variables: BMM relative */
      AmmBmmFunctionsHandler.Init = NULL;
 800e202:	4b61      	ldr	r3, [pc, #388]	@ (800e388 <AMM_Init+0x294>)
 800e204:	2200      	movs	r2, #0
 800e206:	601a      	str	r2, [r3, #0]
      AmmBmmFunctionsHandler.Allocate = NULL;
 800e208:	4b5f      	ldr	r3, [pc, #380]	@ (800e388 <AMM_Init+0x294>)
 800e20a:	2200      	movs	r2, #0
 800e20c:	605a      	str	r2, [r3, #4]
      AmmBmmFunctionsHandler.Free = NULL;
 800e20e:	4b5e      	ldr	r3, [pc, #376]	@ (800e388 <AMM_Init+0x294>)
 800e210:	2200      	movs	r2, #0
 800e212:	609a      	str	r2, [r3, #8]

      /* Init all private variables: Callbacks relative */
      AmmPendingCallback.next = NULL;
 800e214:	4b5d      	ldr	r3, [pc, #372]	@ (800e38c <AMM_Init+0x298>)
 800e216:	2200      	movs	r2, #0
 800e218:	601a      	str	r2, [r3, #0]
      AmmPendingCallback.prev = NULL;
 800e21a:	4b5c      	ldr	r3, [pc, #368]	@ (800e38c <AMM_Init+0x298>)
 800e21c:	2200      	movs	r2, #0
 800e21e:	605a      	str	r2, [r3, #4]
      AmmActiveCallback.next = NULL;
 800e220:	4b5b      	ldr	r3, [pc, #364]	@ (800e390 <AMM_Init+0x29c>)
 800e222:	2200      	movs	r2, #0
 800e224:	601a      	str	r2, [r3, #0]
      AmmActiveCallback.prev = NULL;
 800e226:	4b5a      	ldr	r3, [pc, #360]	@ (800e390 <AMM_Init+0x29c>)
 800e228:	2200      	movs	r2, #0
 800e22a:	605a      	str	r2, [r3, #4]

      /* First get the Basic Memory Manager functions back */
      AMM_RegisterBasicMemoryManager (&AmmBmmFunctionsHandler);
 800e22c:	4856      	ldr	r0, [pc, #344]	@ (800e388 <AMM_Init+0x294>)
 800e22e:	f7f2 faeb 	bl	8000808 <AMM_RegisterBasicMemoryManager>

      if ((AmmBmmFunctionsHandler.Init == NULL)
 800e232:	4b55      	ldr	r3, [pc, #340]	@ (800e388 <AMM_Init+0x294>)
 800e234:	681b      	ldr	r3, [r3, #0]
 800e236:	2b00      	cmp	r3, #0
 800e238:	d007      	beq.n	800e24a <AMM_Init+0x156>
       || (AmmBmmFunctionsHandler.Allocate == NULL)
 800e23a:	4b53      	ldr	r3, [pc, #332]	@ (800e388 <AMM_Init+0x294>)
 800e23c:	685b      	ldr	r3, [r3, #4]
 800e23e:	2b00      	cmp	r3, #0
 800e240:	d003      	beq.n	800e24a <AMM_Init+0x156>
       || (AmmBmmFunctionsHandler.Free == NULL))
 800e242:	4b51      	ldr	r3, [pc, #324]	@ (800e388 <AMM_Init+0x294>)
 800e244:	689b      	ldr	r3, [r3, #8]
 800e246:	2b00      	cmp	r3, #0
 800e248:	d102      	bne.n	800e250 <AMM_Init+0x15c>
      {
        error = AMM_ERROR_BAD_BMM_REGISTRATION;
 800e24a:	2305      	movs	r3, #5
 800e24c:	75fb      	strb	r3, [r7, #23]
 800e24e:	e088      	b.n	800e362 <AMM_Init+0x26e>
      }
      else
      {
        /* Store the pool info */
        p_AmmPoolAddress = p_InitParams->p_PoolAddr;
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	681b      	ldr	r3, [r3, #0]
 800e254:	4a46      	ldr	r2, [pc, #280]	@ (800e370 <AMM_Init+0x27c>)
 800e256:	6013      	str	r3, [r2, #0]
        AmmPoolSize = p_InitParams->PoolSize;
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	685b      	ldr	r3, [r3, #4]
 800e25c:	4a45      	ldr	r2, [pc, #276]	@ (800e374 <AMM_Init+0x280>)
 800e25e:	6013      	str	r3, [r2, #0]

        /* First init the Basic Memory Manager */
        AmmBmmFunctionsHandler.Init (p_AmmPoolAddress,
 800e260:	4b49      	ldr	r3, [pc, #292]	@ (800e388 <AMM_Init+0x294>)
 800e262:	681b      	ldr	r3, [r3, #0]
 800e264:	4a42      	ldr	r2, [pc, #264]	@ (800e370 <AMM_Init+0x27c>)
 800e266:	6812      	ldr	r2, [r2, #0]
 800e268:	4942      	ldr	r1, [pc, #264]	@ (800e374 <AMM_Init+0x280>)
 800e26a:	6809      	ldr	r1, [r1, #0]
 800e26c:	4610      	mov	r0, r2
 800e26e:	4798      	blx	r3
                                     AmmPoolSize);

        /* Allocate memory for the virtual memories info */
        p_AmmVirtualMemoryList = (VirtualMemoryInfo_t *)
                                  (AmmBmmFunctionsHandler. Allocate (AMM_VIRTUAL_INFO_ELEMENT_SIZE
 800e270:	4b45      	ldr	r3, [pc, #276]	@ (800e388 <AMM_Init+0x294>)
 800e272:	6859      	ldr	r1, [r3, #4]
                                                                    * p_InitParams->VirtualMemoryNumber));
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	689a      	ldr	r2, [r3, #8]
                                  (AmmBmmFunctionsHandler. Allocate (AMM_VIRTUAL_INFO_ELEMENT_SIZE
 800e278:	4613      	mov	r3, r2
 800e27a:	005b      	lsls	r3, r3, #1
 800e27c:	4413      	add	r3, r2
 800e27e:	4618      	mov	r0, r3
 800e280:	4788      	blx	r1
 800e282:	4603      	mov	r3, r0
        p_AmmVirtualMemoryList = (VirtualMemoryInfo_t *)
 800e284:	4a3f      	ldr	r2, [pc, #252]	@ (800e384 <AMM_Init+0x290>)
 800e286:	6013      	str	r3, [r2, #0]

        /* Check if allocation is OK*/
        if ((p_AmmVirtualMemoryList == NULL) && (p_InitParams->VirtualMemoryNumber > 0))
 800e288:	4b3e      	ldr	r3, [pc, #248]	@ (800e384 <AMM_Init+0x290>)
 800e28a:	681b      	ldr	r3, [r3, #0]
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	d106      	bne.n	800e29e <AMM_Init+0x1aa>
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	689b      	ldr	r3, [r3, #8]
 800e294:	2b00      	cmp	r3, #0
 800e296:	d002      	beq.n	800e29e <AMM_Init+0x1aa>
        {
          error = AMM_ERROR_BAD_BMM_ALLOCATION;
 800e298:	2306      	movs	r3, #6
 800e29a:	75fb      	strb	r3, [r7, #23]
 800e29c:	e061      	b.n	800e362 <AMM_Init+0x26e>
        {
          /* Init Critical section */
          UTIL_SEQ_INIT_CRITICAL_SECTION ();

          /* Init both pending and active list */
          LST_init_head (&AmmPendingCallback);
 800e29e:	483b      	ldr	r0, [pc, #236]	@ (800e38c <AMM_Init+0x298>)
 800e2a0:	f001 fee4 	bl	801006c <LST_init_head>
          LST_init_head (&AmmActiveCallback);
 800e2a4:	483a      	ldr	r0, [pc, #232]	@ (800e390 <AMM_Init+0x29c>)
 800e2a6:	f001 fee1 	bl	801006c <LST_init_head>

          /* Keep going on init, fulfill the virtual memories info */
          AmmVirtualMemoryNumber = p_InitParams->VirtualMemoryNumber;
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	689b      	ldr	r3, [r3, #8]
 800e2ae:	4a34      	ldr	r2, [pc, #208]	@ (800e380 <AMM_Init+0x28c>)
 800e2b0:	6013      	str	r3, [r2, #0]

          /* Actualize actual shared pool occupied size */
          AmmOccupiedSharedPoolSize = AmmOccupiedSharedPoolSize + (AMM_VIRTUAL_INFO_ELEMENT_SIZE
                                                                   * AmmVirtualMemoryNumber);
 800e2b2:	4b33      	ldr	r3, [pc, #204]	@ (800e380 <AMM_Init+0x28c>)
 800e2b4:	681a      	ldr	r2, [r3, #0]
 800e2b6:	4613      	mov	r3, r2
 800e2b8:	005b      	lsls	r3, r3, #1
 800e2ba:	441a      	add	r2, r3
          AmmOccupiedSharedPoolSize = AmmOccupiedSharedPoolSize + (AMM_VIRTUAL_INFO_ELEMENT_SIZE
 800e2bc:	4b2e      	ldr	r3, [pc, #184]	@ (800e378 <AMM_Init+0x284>)
 800e2be:	681b      	ldr	r3, [r3, #0]
 800e2c0:	4413      	add	r3, r2
 800e2c2:	4a2d      	ldr	r2, [pc, #180]	@ (800e378 <AMM_Init+0x284>)
 800e2c4:	6013      	str	r3, [r2, #0]

          for (uint32_t memIdx = 0x00;
 800e2c6:	2300      	movs	r3, #0
 800e2c8:	60bb      	str	r3, [r7, #8]
 800e2ca:	e040      	b.n	800e34e <AMM_Init+0x25a>
               memIdx < AmmVirtualMemoryNumber;
               memIdx++)
          {
            p_AmmVirtualMemoryList[memIdx].Id = p_InitParams->p_VirtualMemoryConfigList[memIdx].Id;
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	68da      	ldr	r2, [r3, #12]
 800e2d0:	68bb      	ldr	r3, [r7, #8]
 800e2d2:	00db      	lsls	r3, r3, #3
 800e2d4:	18d1      	adds	r1, r2, r3
 800e2d6:	4b2b      	ldr	r3, [pc, #172]	@ (800e384 <AMM_Init+0x290>)
 800e2d8:	6818      	ldr	r0, [r3, #0]
 800e2da:	68ba      	ldr	r2, [r7, #8]
 800e2dc:	4613      	mov	r3, r2
 800e2de:	005b      	lsls	r3, r3, #1
 800e2e0:	4413      	add	r3, r2
 800e2e2:	009b      	lsls	r3, r3, #2
 800e2e4:	4403      	add	r3, r0
 800e2e6:	780a      	ldrb	r2, [r1, #0]
 800e2e8:	701a      	strb	r2, [r3, #0]
            p_AmmVirtualMemoryList[memIdx].RequiredSize = p_InitParams->p_VirtualMemoryConfigList[memIdx].BufferSize;
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	68da      	ldr	r2, [r3, #12]
 800e2ee:	68bb      	ldr	r3, [r7, #8]
 800e2f0:	00db      	lsls	r3, r3, #3
 800e2f2:	18d1      	adds	r1, r2, r3
 800e2f4:	4b23      	ldr	r3, [pc, #140]	@ (800e384 <AMM_Init+0x290>)
 800e2f6:	6818      	ldr	r0, [r3, #0]
 800e2f8:	68ba      	ldr	r2, [r7, #8]
 800e2fa:	4613      	mov	r3, r2
 800e2fc:	005b      	lsls	r3, r3, #1
 800e2fe:	4413      	add	r3, r2
 800e300:	009b      	lsls	r3, r3, #2
 800e302:	4403      	add	r3, r0
 800e304:	684a      	ldr	r2, [r1, #4]
 800e306:	f8c3 2001 	str.w	r2, [r3, #1]
            p_AmmVirtualMemoryList[memIdx].OccupiedSize = 0x00;
 800e30a:	4b1e      	ldr	r3, [pc, #120]	@ (800e384 <AMM_Init+0x290>)
 800e30c:	6819      	ldr	r1, [r3, #0]
 800e30e:	68ba      	ldr	r2, [r7, #8]
 800e310:	4613      	mov	r3, r2
 800e312:	005b      	lsls	r3, r3, #1
 800e314:	4413      	add	r3, r2
 800e316:	009b      	lsls	r3, r3, #2
 800e318:	440b      	add	r3, r1
 800e31a:	2200      	movs	r2, #0
 800e31c:	715a      	strb	r2, [r3, #5]
 800e31e:	2200      	movs	r2, #0
 800e320:	719a      	strb	r2, [r3, #6]
 800e322:	2200      	movs	r2, #0
 800e324:	71da      	strb	r2, [r3, #7]
 800e326:	2200      	movs	r2, #0
 800e328:	721a      	strb	r2, [r3, #8]

            AmmRequiredVirtualMemorySize = AmmRequiredVirtualMemorySize + p_AmmVirtualMemoryList[memIdx].RequiredSize;
 800e32a:	4b16      	ldr	r3, [pc, #88]	@ (800e384 <AMM_Init+0x290>)
 800e32c:	6819      	ldr	r1, [r3, #0]
 800e32e:	68ba      	ldr	r2, [r7, #8]
 800e330:	4613      	mov	r3, r2
 800e332:	005b      	lsls	r3, r3, #1
 800e334:	4413      	add	r3, r2
 800e336:	009b      	lsls	r3, r3, #2
 800e338:	440b      	add	r3, r1
 800e33a:	f8d3 2001 	ldr.w	r2, [r3, #1]
 800e33e:	4b0f      	ldr	r3, [pc, #60]	@ (800e37c <AMM_Init+0x288>)
 800e340:	681b      	ldr	r3, [r3, #0]
 800e342:	4413      	add	r3, r2
 800e344:	4a0d      	ldr	r2, [pc, #52]	@ (800e37c <AMM_Init+0x288>)
 800e346:	6013      	str	r3, [r2, #0]
               memIdx++)
 800e348:	68bb      	ldr	r3, [r7, #8]
 800e34a:	3301      	adds	r3, #1
 800e34c:	60bb      	str	r3, [r7, #8]
               memIdx < AmmVirtualMemoryNumber;
 800e34e:	4b0c      	ldr	r3, [pc, #48]	@ (800e380 <AMM_Init+0x28c>)
 800e350:	681b      	ldr	r3, [r3, #0]
 800e352:	68ba      	ldr	r2, [r7, #8]
 800e354:	429a      	cmp	r2, r3
 800e356:	d3b9      	bcc.n	800e2cc <AMM_Init+0x1d8>
          }

          /* Set init flag */
          AmmInitialized = INITIALIZED;
 800e358:	4b04      	ldr	r3, [pc, #16]	@ (800e36c <AMM_Init+0x278>)
 800e35a:	2201      	movs	r2, #1
 800e35c:	701a      	strb	r2, [r3, #0]

          /* All info are stored and AMM is initialized */
          error = AMM_ERROR_OK;
 800e35e:	2300      	movs	r3, #0
 800e360:	75fb      	strb	r3, [r7, #23]
        }
      }
    }
  }

  return error;
 800e362:	7dfb      	ldrb	r3, [r7, #23]
}
 800e364:	4618      	mov	r0, r3
 800e366:	3718      	adds	r7, #24
 800e368:	46bd      	mov	sp, r7
 800e36a:	bd80      	pop	{r7, pc}
 800e36c:	20006ac0 	.word	0x20006ac0
 800e370:	20006ac4 	.word	0x20006ac4
 800e374:	20006ac8 	.word	0x20006ac8
 800e378:	20006acc 	.word	0x20006acc
 800e37c:	20006ad0 	.word	0x20006ad0
 800e380:	20006ad4 	.word	0x20006ad4
 800e384:	20006ad8 	.word	0x20006ad8
 800e388:	20006adc 	.word	0x20006adc
 800e38c:	20006ae8 	.word	0x20006ae8
 800e390:	20006af0 	.word	0x20006af0

0800e394 <AMM_Alloc>:

AMM_Function_Error_t AMM_Alloc (const uint8_t VirtualMemoryId,
                                const uint32_t BufferSize,
                                uint32_t ** pp_AllocBuffer,
                                AMM_VirtualMemoryCallbackFunction_t * const p_CallBackFunction)
{
 800e394:	b580      	push	{r7, lr}
 800e396:	b08e      	sub	sp, #56	@ 0x38
 800e398:	af00      	add	r7, sp, #0
 800e39a:	60b9      	str	r1, [r7, #8]
 800e39c:	607a      	str	r2, [r7, #4]
 800e39e:	603b      	str	r3, [r7, #0]
 800e3a0:	4603      	mov	r3, r0
 800e3a2:	73fb      	strb	r3, [r7, #15]
  AMM_Function_Error_t error = AMM_ERROR_NOK;
 800e3a4:	2301      	movs	r3, #1
 800e3a6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

  uint32_t selfAvailable = 0x00;
 800e3aa:	2300      	movs	r3, #0
 800e3ac:	633b      	str	r3, [r7, #48]	@ 0x30

  uint32_t * p_TmpAllocAddr = NULL;
 800e3ae:	2300      	movs	r3, #0
 800e3b0:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (AmmInitialized == NOT_INITIALIZED)
 800e3b2:	4b90      	ldr	r3, [pc, #576]	@ (800e5f4 <AMM_Alloc+0x260>)
 800e3b4:	781b      	ldrb	r3, [r3, #0]
 800e3b6:	2b00      	cmp	r3, #0
 800e3b8:	d103      	bne.n	800e3c2 <AMM_Alloc+0x2e>
  {
    error = AMM_ERROR_NOT_INIT;
 800e3ba:	230d      	movs	r3, #13
 800e3bc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800e3c0:	e112      	b.n	800e5e8 <AMM_Alloc+0x254>
  }
  /* Check if buffer size is not zero */
  else if (BufferSize == 0)
 800e3c2:	68bb      	ldr	r3, [r7, #8]
 800e3c4:	2b00      	cmp	r3, #0
 800e3c6:	d103      	bne.n	800e3d0 <AMM_Alloc+0x3c>
  {
    error = AMM_ERROR_BAD_ALLOCATION_SIZE;
 800e3c8:	230a      	movs	r3, #10
 800e3ca:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800e3ce:	e10b      	b.n	800e5e8 <AMM_Alloc+0x254>
  }
  /* Check if no virtual ID requested */
  else if (VirtualMemoryId == AMM_NO_VIRTUAL_ID)
 800e3d0:	7bfb      	ldrb	r3, [r7, #15]
 800e3d2:	2b00      	cmp	r3, #0
 800e3d4:	d145      	bne.n	800e462 <AMM_Alloc+0xce>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800e3d6:	f3ef 8310 	mrs	r3, PRIMASK
 800e3da:	61fb      	str	r3, [r7, #28]
  return(result);
 800e3dc:	69fb      	ldr	r3, [r7, #28]
  {
    /* Enter critical section */
    UTIL_SEQ_ENTER_CRITICAL_SECTION ();
 800e3de:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800e3e0:	b672      	cpsid	i
}
 800e3e2:	bf00      	nop

    /* Check for enough space in the shared pool */
    if (BufferSize < (AmmPoolSize - AmmOccupiedSharedPoolSize - AmmRequiredVirtualMemorySize))
 800e3e4:	4b84      	ldr	r3, [pc, #528]	@ (800e5f8 <AMM_Alloc+0x264>)
 800e3e6:	681a      	ldr	r2, [r3, #0]
 800e3e8:	4b84      	ldr	r3, [pc, #528]	@ (800e5fc <AMM_Alloc+0x268>)
 800e3ea:	681b      	ldr	r3, [r3, #0]
 800e3ec:	1ad2      	subs	r2, r2, r3
 800e3ee:	4b84      	ldr	r3, [pc, #528]	@ (800e600 <AMM_Alloc+0x26c>)
 800e3f0:	681b      	ldr	r3, [r3, #0]
 800e3f2:	1ad3      	subs	r3, r2, r3
 800e3f4:	68ba      	ldr	r2, [r7, #8]
 800e3f6:	429a      	cmp	r2, r3
 800e3f8:	d227      	bcs.n	800e44a <AMM_Alloc+0xb6>
    {
      /* Try Allocation. Do not forget the header */
      p_TmpAllocAddr = AmmBmmFunctionsHandler.Allocate (BufferSize + VIRTUAL_MEMORY_HEADER_SIZE);
 800e3fa:	4b82      	ldr	r3, [pc, #520]	@ (800e604 <AMM_Alloc+0x270>)
 800e3fc:	685b      	ldr	r3, [r3, #4]
 800e3fe:	68ba      	ldr	r2, [r7, #8]
 800e400:	3201      	adds	r2, #1
 800e402:	4610      	mov	r0, r2
 800e404:	4798      	blx	r3
 800e406:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Check if allocation is OK */
      if (p_TmpAllocAddr != NULL)
 800e408:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	d016      	beq.n	800e43c <AMM_Alloc+0xa8>
      {
        /* Fulfill the header */
        *p_TmpAllocAddr = (uint32_t)(((uint32_t)VirtualMemoryId << VIRTUAL_MEMORY_HEADER_ID_POS)
 800e40e:	7bfb      	ldrb	r3, [r7, #15]
 800e410:	061a      	lsls	r2, r3, #24
                                        & VIRTUAL_MEMORY_HEADER_ID_MASK)
                                      | ((BufferSize << VIRTUAL_MEMORY_HEADER_BUFFER_SIZE_POS)
                                        & VIRTUAL_MEMORY_HEADER_BUFFER_SIZE_MASK);
 800e412:	68bb      	ldr	r3, [r7, #8]
 800e414:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
                                      | ((BufferSize << VIRTUAL_MEMORY_HEADER_BUFFER_SIZE_POS)
 800e418:	431a      	orrs	r2, r3
        *p_TmpAllocAddr = (uint32_t)(((uint32_t)VirtualMemoryId << VIRTUAL_MEMORY_HEADER_ID_POS)
 800e41a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e41c:	601a      	str	r2, [r3, #0]

        /* Provide the right address to user, ie without the header */
        *pp_AllocBuffer = (uint32_t *)(p_TmpAllocAddr + VIRTUAL_MEMORY_HEADER_SIZE);
 800e41e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e420:	1d1a      	adds	r2, r3, #4
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	601a      	str	r2, [r3, #0]

        /* Actualize the current memory occupation of the shared space */
        AmmOccupiedSharedPoolSize = AmmOccupiedSharedPoolSize + BufferSize + VIRTUAL_MEMORY_HEADER_SIZE;
 800e426:	4b75      	ldr	r3, [pc, #468]	@ (800e5fc <AMM_Alloc+0x268>)
 800e428:	681a      	ldr	r2, [r3, #0]
 800e42a:	68bb      	ldr	r3, [r7, #8]
 800e42c:	4413      	add	r3, r2
 800e42e:	3301      	adds	r3, #1
 800e430:	4a72      	ldr	r2, [pc, #456]	@ (800e5fc <AMM_Alloc+0x268>)
 800e432:	6013      	str	r3, [r2, #0]

        error = AMM_ERROR_OK;
 800e434:	2300      	movs	r3, #0
 800e436:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800e43a:	e00c      	b.n	800e456 <AMM_Alloc+0xc2>
      }
      else
      {
        /* Register the callback for a future retry */
        pushPending (p_CallBackFunction);
 800e43c:	6838      	ldr	r0, [r7, #0]
 800e43e:	f000 f9f5 	bl	800e82c <pushPending>

        error = AMM_ERROR_ALLOCATION_FAILED;
 800e442:	230b      	movs	r3, #11
 800e444:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800e448:	e005      	b.n	800e456 <AMM_Alloc+0xc2>
      }
    }
    else
    {
      /* Register the callback for a future retry */
      pushPending (p_CallBackFunction);
 800e44a:	6838      	ldr	r0, [r7, #0]
 800e44c:	f000 f9ee 	bl	800e82c <pushPending>

      error = AMM_ERROR_BAD_ALLOCATION_SIZE;
 800e450:	230a      	movs	r3, #10
 800e452:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800e456:	6a3b      	ldr	r3, [r7, #32]
 800e458:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e45a:	69bb      	ldr	r3, [r7, #24]
 800e45c:	f383 8810 	msr	PRIMASK, r3
}
 800e460:	e0c2      	b.n	800e5e8 <AMM_Alloc+0x254>
    UTIL_SEQ_EXIT_CRITICAL_SECTION ();
  }
  /* A specific ID is requested */
  else
  {
    error = AMM_ERROR_UNKNOWN_ID;
 800e462:	2309      	movs	r3, #9
 800e464:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800e468:	f3ef 8310 	mrs	r3, PRIMASK
 800e46c:	617b      	str	r3, [r7, #20]
  return(result);
 800e46e:	697b      	ldr	r3, [r7, #20]

    /* Enter critical section */
    UTIL_SEQ_ENTER_CRITICAL_SECTION ();
 800e470:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 800e472:	b672      	cpsid	i
}
 800e474:	bf00      	nop

    /* Check virtual memory info */
    for (uint32_t memIdx = 0x00;
 800e476:	2300      	movs	r3, #0
 800e478:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e47a:	e0a5      	b.n	800e5c8 <AMM_Alloc+0x234>
         (memIdx < AmmVirtualMemoryNumber) && (error == AMM_ERROR_UNKNOWN_ID);
         memIdx++)
    {
      /* Check if ID is known */
      if (VirtualMemoryId == p_AmmVirtualMemoryList[memIdx].Id)
 800e47c:	4b62      	ldr	r3, [pc, #392]	@ (800e608 <AMM_Alloc+0x274>)
 800e47e:	6819      	ldr	r1, [r3, #0]
 800e480:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e482:	4613      	mov	r3, r2
 800e484:	005b      	lsls	r3, r3, #1
 800e486:	4413      	add	r3, r2
 800e488:	009b      	lsls	r3, r3, #2
 800e48a:	440b      	add	r3, r1
 800e48c:	781b      	ldrb	r3, [r3, #0]
 800e48e:	7bfa      	ldrb	r2, [r7, #15]
 800e490:	429a      	cmp	r2, r3
 800e492:	f040 8096 	bne.w	800e5c2 <AMM_Alloc+0x22e>
      {
        /* Check if all the reserved memory has been consumed */
        if (p_AmmVirtualMemoryList[memIdx].OccupiedSize < p_AmmVirtualMemoryList[memIdx].RequiredSize)
 800e496:	4b5c      	ldr	r3, [pc, #368]	@ (800e608 <AMM_Alloc+0x274>)
 800e498:	6819      	ldr	r1, [r3, #0]
 800e49a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e49c:	4613      	mov	r3, r2
 800e49e:	005b      	lsls	r3, r3, #1
 800e4a0:	4413      	add	r3, r2
 800e4a2:	009b      	lsls	r3, r3, #2
 800e4a4:	440b      	add	r3, r1
 800e4a6:	f8d3 1005 	ldr.w	r1, [r3, #5]
 800e4aa:	4b57      	ldr	r3, [pc, #348]	@ (800e608 <AMM_Alloc+0x274>)
 800e4ac:	6818      	ldr	r0, [r3, #0]
 800e4ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e4b0:	4613      	mov	r3, r2
 800e4b2:	005b      	lsls	r3, r3, #1
 800e4b4:	4413      	add	r3, r2
 800e4b6:	009b      	lsls	r3, r3, #2
 800e4b8:	4403      	add	r3, r0
 800e4ba:	f8d3 3001 	ldr.w	r3, [r3, #1]
 800e4be:	4299      	cmp	r1, r3
 800e4c0:	d215      	bcs.n	800e4ee <AMM_Alloc+0x15a>
        {
          /* Compute what is remaining */
          selfAvailable = p_AmmVirtualMemoryList[memIdx].RequiredSize
 800e4c2:	4b51      	ldr	r3, [pc, #324]	@ (800e608 <AMM_Alloc+0x274>)
 800e4c4:	6819      	ldr	r1, [r3, #0]
 800e4c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e4c8:	4613      	mov	r3, r2
 800e4ca:	005b      	lsls	r3, r3, #1
 800e4cc:	4413      	add	r3, r2
 800e4ce:	009b      	lsls	r3, r3, #2
 800e4d0:	440b      	add	r3, r1
 800e4d2:	f8d3 1001 	ldr.w	r1, [r3, #1]
                          - p_AmmVirtualMemoryList[memIdx].OccupiedSize;
 800e4d6:	4b4c      	ldr	r3, [pc, #304]	@ (800e608 <AMM_Alloc+0x274>)
 800e4d8:	6818      	ldr	r0, [r3, #0]
 800e4da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e4dc:	4613      	mov	r3, r2
 800e4de:	005b      	lsls	r3, r3, #1
 800e4e0:	4413      	add	r3, r2
 800e4e2:	009b      	lsls	r3, r3, #2
 800e4e4:	4403      	add	r3, r0
 800e4e6:	f8d3 3005 	ldr.w	r3, [r3, #5]
          selfAvailable = p_AmmVirtualMemoryList[memIdx].RequiredSize
 800e4ea:	1acb      	subs	r3, r1, r3
 800e4ec:	633b      	str	r3, [r7, #48]	@ 0x30
        }

        /* Check if there is enough space in the shared pool plus in our virtual memory pool */
        if (BufferSize < (AmmPoolSize - AmmOccupiedSharedPoolSize - AmmRequiredVirtualMemorySize + selfAvailable))
 800e4ee:	4b42      	ldr	r3, [pc, #264]	@ (800e5f8 <AMM_Alloc+0x264>)
 800e4f0:	681a      	ldr	r2, [r3, #0]
 800e4f2:	4b42      	ldr	r3, [pc, #264]	@ (800e5fc <AMM_Alloc+0x268>)
 800e4f4:	681b      	ldr	r3, [r3, #0]
 800e4f6:	1ad2      	subs	r2, r2, r3
 800e4f8:	4b41      	ldr	r3, [pc, #260]	@ (800e600 <AMM_Alloc+0x26c>)
 800e4fa:	681b      	ldr	r3, [r3, #0]
 800e4fc:	1ad2      	subs	r2, r2, r3
 800e4fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e500:	4413      	add	r3, r2
 800e502:	68ba      	ldr	r2, [r7, #8]
 800e504:	429a      	cmp	r2, r3
 800e506:	d256      	bcs.n	800e5b6 <AMM_Alloc+0x222>
        {
          /* Try Allocation. Do not forget the header */
          p_TmpAllocAddr = AmmBmmFunctionsHandler.Allocate ((BufferSize + VIRTUAL_MEMORY_HEADER_SIZE));
 800e508:	4b3e      	ldr	r3, [pc, #248]	@ (800e604 <AMM_Alloc+0x270>)
 800e50a:	685b      	ldr	r3, [r3, #4]
 800e50c:	68ba      	ldr	r2, [r7, #8]
 800e50e:	3201      	adds	r2, #1
 800e510:	4610      	mov	r0, r2
 800e512:	4798      	blx	r3
 800e514:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Check if allocation is OK */
          if (p_TmpAllocAddr != NULL)
 800e516:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e518:	2b00      	cmp	r3, #0
 800e51a:	d045      	beq.n	800e5a8 <AMM_Alloc+0x214>
          {
            /* Fulfill the header */
            *p_TmpAllocAddr = (uint32_t)(((uint32_t)VirtualMemoryId << VIRTUAL_MEMORY_HEADER_ID_POS)
 800e51c:	7bfb      	ldrb	r3, [r7, #15]
 800e51e:	061a      	lsls	r2, r3, #24
                                        & VIRTUAL_MEMORY_HEADER_ID_MASK)
                                      | ((BufferSize << VIRTUAL_MEMORY_HEADER_BUFFER_SIZE_POS)
                                        & VIRTUAL_MEMORY_HEADER_BUFFER_SIZE_MASK);
 800e520:	68bb      	ldr	r3, [r7, #8]
 800e522:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
                                      | ((BufferSize << VIRTUAL_MEMORY_HEADER_BUFFER_SIZE_POS)
 800e526:	431a      	orrs	r2, r3
            *p_TmpAllocAddr = (uint32_t)(((uint32_t)VirtualMemoryId << VIRTUAL_MEMORY_HEADER_ID_POS)
 800e528:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e52a:	601a      	str	r2, [r3, #0]

            /* Provide the right address to user, ie without the header */
            *pp_AllocBuffer = (uint32_t *)(p_TmpAllocAddr + VIRTUAL_MEMORY_HEADER_SIZE);
 800e52c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e52e:	1d1a      	adds	r2, r3, #4
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	601a      	str	r2, [r3, #0]

            /* Actualize our current memory occupation */
            p_AmmVirtualMemoryList[memIdx].OccupiedSize = p_AmmVirtualMemoryList[memIdx].OccupiedSize
 800e534:	4b34      	ldr	r3, [pc, #208]	@ (800e608 <AMM_Alloc+0x274>)
 800e536:	6819      	ldr	r1, [r3, #0]
 800e538:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e53a:	4613      	mov	r3, r2
 800e53c:	005b      	lsls	r3, r3, #1
 800e53e:	4413      	add	r3, r2
 800e540:	009b      	lsls	r3, r3, #2
 800e542:	440b      	add	r3, r1
 800e544:	f8d3 2005 	ldr.w	r2, [r3, #5]
                                                          + BufferSize
 800e548:	68bb      	ldr	r3, [r7, #8]
 800e54a:	18d1      	adds	r1, r2, r3
            p_AmmVirtualMemoryList[memIdx].OccupiedSize = p_AmmVirtualMemoryList[memIdx].OccupiedSize
 800e54c:	4b2e      	ldr	r3, [pc, #184]	@ (800e608 <AMM_Alloc+0x274>)
 800e54e:	6818      	ldr	r0, [r3, #0]
 800e550:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e552:	4613      	mov	r3, r2
 800e554:	005b      	lsls	r3, r3, #1
 800e556:	4413      	add	r3, r2
 800e558:	009b      	lsls	r3, r3, #2
 800e55a:	4403      	add	r3, r0
                                                          + VIRTUAL_MEMORY_HEADER_SIZE;
 800e55c:	1c4a      	adds	r2, r1, #1
            p_AmmVirtualMemoryList[memIdx].OccupiedSize = p_AmmVirtualMemoryList[memIdx].OccupiedSize
 800e55e:	f8c3 2005 	str.w	r2, [r3, #5]

            /* Check for overlapping the reserved memory */
            if (p_AmmVirtualMemoryList[memIdx].RequiredSize < p_AmmVirtualMemoryList[memIdx].OccupiedSize)
 800e562:	4b29      	ldr	r3, [pc, #164]	@ (800e608 <AMM_Alloc+0x274>)
 800e564:	6819      	ldr	r1, [r3, #0]
 800e566:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e568:	4613      	mov	r3, r2
 800e56a:	005b      	lsls	r3, r3, #1
 800e56c:	4413      	add	r3, r2
 800e56e:	009b      	lsls	r3, r3, #2
 800e570:	440b      	add	r3, r1
 800e572:	f8d3 1001 	ldr.w	r1, [r3, #1]
 800e576:	4b24      	ldr	r3, [pc, #144]	@ (800e608 <AMM_Alloc+0x274>)
 800e578:	6818      	ldr	r0, [r3, #0]
 800e57a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e57c:	4613      	mov	r3, r2
 800e57e:	005b      	lsls	r3, r3, #1
 800e580:	4413      	add	r3, r2
 800e582:	009b      	lsls	r3, r3, #2
 800e584:	4403      	add	r3, r0
 800e586:	f8d3 3005 	ldr.w	r3, [r3, #5]
 800e58a:	4299      	cmp	r1, r3
 800e58c:	d208      	bcs.n	800e5a0 <AMM_Alloc+0x20c>
            {
              /* Actualize the shared memory occupation */
              AmmOccupiedSharedPoolSize = AmmOccupiedSharedPoolSize
                                          + BufferSize - selfAvailable
 800e58e:	4b1b      	ldr	r3, [pc, #108]	@ (800e5fc <AMM_Alloc+0x268>)
 800e590:	681a      	ldr	r2, [r3, #0]
 800e592:	68bb      	ldr	r3, [r7, #8]
 800e594:	441a      	add	r2, r3
 800e596:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e598:	1ad3      	subs	r3, r2, r3
                                          + VIRTUAL_MEMORY_HEADER_SIZE;
 800e59a:	3301      	adds	r3, #1
              AmmOccupiedSharedPoolSize = AmmOccupiedSharedPoolSize
 800e59c:	4a17      	ldr	r2, [pc, #92]	@ (800e5fc <AMM_Alloc+0x268>)
 800e59e:	6013      	str	r3, [r2, #0]
            }

            error = AMM_ERROR_OK;
 800e5a0:	2300      	movs	r3, #0
 800e5a2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800e5a6:	e00c      	b.n	800e5c2 <AMM_Alloc+0x22e>
          }
          else
          {
            /* Register the callback for a future retry */
            pushPending (p_CallBackFunction);
 800e5a8:	6838      	ldr	r0, [r7, #0]
 800e5aa:	f000 f93f 	bl	800e82c <pushPending>

            error = AMM_ERROR_ALLOCATION_FAILED;
 800e5ae:	230b      	movs	r3, #11
 800e5b0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800e5b4:	e005      	b.n	800e5c2 <AMM_Alloc+0x22e>
          }
        }
        else
        {
          /* Register the callback for a future retry */
          pushPending (p_CallBackFunction);
 800e5b6:	6838      	ldr	r0, [r7, #0]
 800e5b8:	f000 f938 	bl	800e82c <pushPending>

          error = AMM_ERROR_BAD_ALLOCATION_SIZE;
 800e5bc:	230a      	movs	r3, #10
 800e5be:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
         memIdx++)
 800e5c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e5c4:	3301      	adds	r3, #1
 800e5c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
         (memIdx < AmmVirtualMemoryNumber) && (error == AMM_ERROR_UNKNOWN_ID);
 800e5c8:	4b10      	ldr	r3, [pc, #64]	@ (800e60c <AMM_Alloc+0x278>)
 800e5ca:	681b      	ldr	r3, [r3, #0]
 800e5cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e5ce:	429a      	cmp	r2, r3
 800e5d0:	d204      	bcs.n	800e5dc <AMM_Alloc+0x248>
 800e5d2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800e5d6:	2b09      	cmp	r3, #9
 800e5d8:	f43f af50 	beq.w	800e47c <AMM_Alloc+0xe8>
 800e5dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e5de:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e5e0:	693b      	ldr	r3, [r7, #16]
 800e5e2:	f383 8810 	msr	PRIMASK, r3
}
 800e5e6:	bf00      	nop

    /* Exit critical section */
    UTIL_SEQ_EXIT_CRITICAL_SECTION ();
  }

  return error;
 800e5e8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 800e5ec:	4618      	mov	r0, r3
 800e5ee:	3738      	adds	r7, #56	@ 0x38
 800e5f0:	46bd      	mov	sp, r7
 800e5f2:	bd80      	pop	{r7, pc}
 800e5f4:	20006ac0 	.word	0x20006ac0
 800e5f8:	20006ac8 	.word	0x20006ac8
 800e5fc:	20006acc 	.word	0x20006acc
 800e600:	20006ad0 	.word	0x20006ad0
 800e604:	20006adc 	.word	0x20006adc
 800e608:	20006ad8 	.word	0x20006ad8
 800e60c:	20006ad4 	.word	0x20006ad4

0800e610 <AMM_Free>:

AMM_Function_Error_t AMM_Free (uint32_t * const p_BufferAddr)
{
 800e610:	b580      	push	{r7, lr}
 800e612:	b08c      	sub	sp, #48	@ 0x30
 800e614:	af00      	add	r7, sp, #0
 800e616:	6078      	str	r0, [r7, #4]
  AMM_Function_Error_t error = AMM_ERROR_NOK;
 800e618:	2301      	movs	r3, #1
 800e61a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  uint8_t virtualId = 0x00;
 800e61e:	2300      	movs	r3, #0
 800e620:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int32_t occupiedOverRequired = 0x00;
 800e624:	2300      	movs	r3, #0
 800e626:	623b      	str	r3, [r7, #32]
  uint32_t allocatedSize = 0x00;
 800e628:	2300      	movs	r3, #0
 800e62a:	61fb      	str	r3, [r7, #28]

  uint32_t * p_TmpAllocAddr = NULL;
 800e62c:	2300      	movs	r3, #0
 800e62e:	61bb      	str	r3, [r7, #24]

  if (AmmInitialized == NOT_INITIALIZED)
 800e630:	4b6c      	ldr	r3, [pc, #432]	@ (800e7e4 <AMM_Free+0x1d4>)
 800e632:	781b      	ldrb	r3, [r3, #0]
 800e634:	2b00      	cmp	r3, #0
 800e636:	d103      	bne.n	800e640 <AMM_Free+0x30>
  {
    error = AMM_ERROR_NOT_INIT;
 800e638:	230d      	movs	r3, #13
 800e63a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800e63e:	e0ca      	b.n	800e7d6 <AMM_Free+0x1c6>
  }
  else if (p_BufferAddr == NULL)
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	2b00      	cmp	r3, #0
 800e644:	d103      	bne.n	800e64e <AMM_Free+0x3e>
  {
    error = AMM_ERROR_BAD_POINTER;
 800e646:	2302      	movs	r3, #2
 800e648:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800e64c:	e0c3      	b.n	800e7d6 <AMM_Free+0x1c6>
  }
  else if ((MASK_ALIGNED_32BITS & (uint32_t)p_BufferAddr) != 0)
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	f003 0303 	and.w	r3, r3, #3
 800e654:	2b00      	cmp	r3, #0
 800e656:	d003      	beq.n	800e660 <AMM_Free+0x50>
  {
    error = AMM_ERROR_NOT_ALIGNED;
 800e658:	2307      	movs	r3, #7
 800e65a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800e65e:	e0ba      	b.n	800e7d6 <AMM_Free+0x1c6>
  }
  /* Check if address is managed by this AMM */
  else if ((p_BufferAddr > (p_AmmPoolAddress + AmmPoolSize))
 800e660:	4b61      	ldr	r3, [pc, #388]	@ (800e7e8 <AMM_Free+0x1d8>)
 800e662:	681a      	ldr	r2, [r3, #0]
 800e664:	4b61      	ldr	r3, [pc, #388]	@ (800e7ec <AMM_Free+0x1dc>)
 800e666:	681b      	ldr	r3, [r3, #0]
 800e668:	009b      	lsls	r3, r3, #2
 800e66a:	4413      	add	r3, r2
 800e66c:	687a      	ldr	r2, [r7, #4]
 800e66e:	429a      	cmp	r2, r3
 800e670:	d804      	bhi.n	800e67c <AMM_Free+0x6c>
           || (p_BufferAddr < p_AmmPoolAddress))
 800e672:	4b5d      	ldr	r3, [pc, #372]	@ (800e7e8 <AMM_Free+0x1d8>)
 800e674:	681b      	ldr	r3, [r3, #0]
 800e676:	687a      	ldr	r2, [r7, #4]
 800e678:	429a      	cmp	r2, r3
 800e67a:	d203      	bcs.n	800e684 <AMM_Free+0x74>
  {
    error = AMM_ERROR_OUT_OF_RANGE;
 800e67c:	2308      	movs	r3, #8
 800e67e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800e682:	e0a8      	b.n	800e7d6 <AMM_Free+0x1c6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800e684:	f3ef 8310 	mrs	r3, PRIMASK
 800e688:	613b      	str	r3, [r7, #16]
  return(result);
 800e68a:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    /* Enter critical section */
    UTIL_SEQ_ENTER_CRITICAL_SECTION ();
 800e68c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800e68e:	b672      	cpsid	i
}
 800e690:	bf00      	nop

    /* First correct the address by adding the header */
    p_TmpAllocAddr = (uint32_t *)(p_BufferAddr - VIRTUAL_MEMORY_HEADER_SIZE);
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	3b04      	subs	r3, #4
 800e696:	61bb      	str	r3, [r7, #24]

    /* Get the virtual memory information */
    virtualId = (*p_TmpAllocAddr & VIRTUAL_MEMORY_HEADER_ID_MASK) >> VIRTUAL_MEMORY_HEADER_ID_POS;
 800e698:	69bb      	ldr	r3, [r7, #24]
 800e69a:	681b      	ldr	r3, [r3, #0]
 800e69c:	0e1b      	lsrs	r3, r3, #24
 800e69e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    allocatedSize = (*p_TmpAllocAddr & VIRTUAL_MEMORY_HEADER_BUFFER_SIZE_MASK) >> VIRTUAL_MEMORY_HEADER_BUFFER_SIZE_POS;
 800e6a2:	69bb      	ldr	r3, [r7, #24]
 800e6a4:	681b      	ldr	r3, [r3, #0]
 800e6a6:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800e6aa:	61fb      	str	r3, [r7, #28]

    /* Add header size to allocated size */
    allocatedSize = allocatedSize + VIRTUAL_MEMORY_HEADER_SIZE;
 800e6ac:	69fb      	ldr	r3, [r7, #28]
 800e6ae:	3301      	adds	r3, #1
 800e6b0:	61fb      	str	r3, [r7, #28]

    /* Free the allocated memory */
    AmmBmmFunctionsHandler.Free(p_TmpAllocAddr);
 800e6b2:	4b4f      	ldr	r3, [pc, #316]	@ (800e7f0 <AMM_Free+0x1e0>)
 800e6b4:	689b      	ldr	r3, [r3, #8]
 800e6b6:	69b8      	ldr	r0, [r7, #24]
 800e6b8:	4798      	blx	r3

    /* Update the occupation counters depending on the ID */
    if (virtualId == AMM_NO_VIRTUAL_ID)
 800e6ba:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e6be:	2b00      	cmp	r3, #0
 800e6c0:	d109      	bne.n	800e6d6 <AMM_Free+0xc6>
    {
      /* Update the occupation size */
      AmmOccupiedSharedPoolSize = AmmOccupiedSharedPoolSize - allocatedSize;
 800e6c2:	4b4c      	ldr	r3, [pc, #304]	@ (800e7f4 <AMM_Free+0x1e4>)
 800e6c4:	681a      	ldr	r2, [r3, #0]
 800e6c6:	69fb      	ldr	r3, [r7, #28]
 800e6c8:	1ad3      	subs	r3, r2, r3
 800e6ca:	4a4a      	ldr	r2, [pc, #296]	@ (800e7f4 <AMM_Free+0x1e4>)
 800e6cc:	6013      	str	r3, [r2, #0]

      error = AMM_ERROR_OK;
 800e6ce:	2300      	movs	r3, #0
 800e6d0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800e6d4:	e075      	b.n	800e7c2 <AMM_Free+0x1b2>
    }
    else
    {
      error = AMM_ERROR_UNKNOWN_ID;
 800e6d6:	2309      	movs	r3, #9
 800e6d8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

      for (uint32_t memIdx = 0x00;
 800e6dc:	2300      	movs	r3, #0
 800e6de:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e6e0:	e066      	b.n	800e7b0 <AMM_Free+0x1a0>
           (memIdx < AmmVirtualMemoryNumber) && (error == AMM_ERROR_UNKNOWN_ID);
           memIdx++)
      {
        /* Check if it is the right ID */
        if (virtualId == p_AmmVirtualMemoryList[memIdx].Id)
 800e6e2:	4b45      	ldr	r3, [pc, #276]	@ (800e7f8 <AMM_Free+0x1e8>)
 800e6e4:	6819      	ldr	r1, [r3, #0]
 800e6e6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e6e8:	4613      	mov	r3, r2
 800e6ea:	005b      	lsls	r3, r3, #1
 800e6ec:	4413      	add	r3, r2
 800e6ee:	009b      	lsls	r3, r3, #2
 800e6f0:	440b      	add	r3, r1
 800e6f2:	781b      	ldrb	r3, [r3, #0]
 800e6f4:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800e6f8:	429a      	cmp	r2, r3
 800e6fa:	d156      	bne.n	800e7aa <AMM_Free+0x19a>
        {
          occupiedOverRequired = (p_AmmVirtualMemoryList[memIdx].OccupiedSize - p_AmmVirtualMemoryList[memIdx].RequiredSize);
 800e6fc:	4b3e      	ldr	r3, [pc, #248]	@ (800e7f8 <AMM_Free+0x1e8>)
 800e6fe:	6819      	ldr	r1, [r3, #0]
 800e700:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e702:	4613      	mov	r3, r2
 800e704:	005b      	lsls	r3, r3, #1
 800e706:	4413      	add	r3, r2
 800e708:	009b      	lsls	r3, r3, #2
 800e70a:	440b      	add	r3, r1
 800e70c:	f8d3 1005 	ldr.w	r1, [r3, #5]
 800e710:	4b39      	ldr	r3, [pc, #228]	@ (800e7f8 <AMM_Free+0x1e8>)
 800e712:	6818      	ldr	r0, [r3, #0]
 800e714:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e716:	4613      	mov	r3, r2
 800e718:	005b      	lsls	r3, r3, #1
 800e71a:	4413      	add	r3, r2
 800e71c:	009b      	lsls	r3, r3, #2
 800e71e:	4403      	add	r3, r0
 800e720:	f8d3 3001 	ldr.w	r3, [r3, #1]
 800e724:	1acb      	subs	r3, r1, r3
 800e726:	623b      	str	r3, [r7, #32]

          /* Check whether the occupied size has overlaped the required or not */
          if (occupiedOverRequired > 0x00)
 800e728:	6a3b      	ldr	r3, [r7, #32]
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	dd24      	ble.n	800e778 <AMM_Free+0x168>
          {
            /* Check if reserved memory is overlapped */
            if (allocatedSize > occupiedOverRequired)
 800e72e:	6a3b      	ldr	r3, [r7, #32]
 800e730:	69fa      	ldr	r2, [r7, #28]
 800e732:	429a      	cmp	r2, r3
 800e734:	d91a      	bls.n	800e76c <AMM_Free+0x15c>
            {
              /* Update the occupation size */
              AmmOccupiedSharedPoolSize = AmmOccupiedSharedPoolSize
                                          - (p_AmmVirtualMemoryList[memIdx].OccupiedSize
                                          - p_AmmVirtualMemoryList[memIdx].RequiredSize);
 800e736:	4b30      	ldr	r3, [pc, #192]	@ (800e7f8 <AMM_Free+0x1e8>)
 800e738:	6819      	ldr	r1, [r3, #0]
 800e73a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e73c:	4613      	mov	r3, r2
 800e73e:	005b      	lsls	r3, r3, #1
 800e740:	4413      	add	r3, r2
 800e742:	009b      	lsls	r3, r3, #2
 800e744:	440b      	add	r3, r1
 800e746:	f8d3 1001 	ldr.w	r1, [r3, #1]
                                          - (p_AmmVirtualMemoryList[memIdx].OccupiedSize
 800e74a:	4b2b      	ldr	r3, [pc, #172]	@ (800e7f8 <AMM_Free+0x1e8>)
 800e74c:	6818      	ldr	r0, [r3, #0]
 800e74e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e750:	4613      	mov	r3, r2
 800e752:	005b      	lsls	r3, r3, #1
 800e754:	4413      	add	r3, r2
 800e756:	009b      	lsls	r3, r3, #2
 800e758:	4403      	add	r3, r0
 800e75a:	f8d3 3005 	ldr.w	r3, [r3, #5]
 800e75e:	1aca      	subs	r2, r1, r3
 800e760:	4b24      	ldr	r3, [pc, #144]	@ (800e7f4 <AMM_Free+0x1e4>)
 800e762:	681b      	ldr	r3, [r3, #0]
 800e764:	4413      	add	r3, r2
              AmmOccupiedSharedPoolSize = AmmOccupiedSharedPoolSize
 800e766:	4a23      	ldr	r2, [pc, #140]	@ (800e7f4 <AMM_Free+0x1e4>)
 800e768:	6013      	str	r3, [r2, #0]
 800e76a:	e005      	b.n	800e778 <AMM_Free+0x168>
            }
            else
            {
              AmmOccupiedSharedPoolSize = AmmOccupiedSharedPoolSize - allocatedSize;
 800e76c:	4b21      	ldr	r3, [pc, #132]	@ (800e7f4 <AMM_Free+0x1e4>)
 800e76e:	681a      	ldr	r2, [r3, #0]
 800e770:	69fb      	ldr	r3, [r7, #28]
 800e772:	1ad3      	subs	r3, r2, r3
 800e774:	4a1f      	ldr	r2, [pc, #124]	@ (800e7f4 <AMM_Free+0x1e4>)
 800e776:	6013      	str	r3, [r2, #0]
            }
          }

          /* Update the occupation size */
          p_AmmVirtualMemoryList[memIdx].OccupiedSize = p_AmmVirtualMemoryList[memIdx].OccupiedSize
 800e778:	4b1f      	ldr	r3, [pc, #124]	@ (800e7f8 <AMM_Free+0x1e8>)
 800e77a:	6819      	ldr	r1, [r3, #0]
 800e77c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e77e:	4613      	mov	r3, r2
 800e780:	005b      	lsls	r3, r3, #1
 800e782:	4413      	add	r3, r2
 800e784:	009b      	lsls	r3, r3, #2
 800e786:	440b      	add	r3, r1
 800e788:	f8d3 1005 	ldr.w	r1, [r3, #5]
 800e78c:	4b1a      	ldr	r3, [pc, #104]	@ (800e7f8 <AMM_Free+0x1e8>)
 800e78e:	6818      	ldr	r0, [r3, #0]
 800e790:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e792:	4613      	mov	r3, r2
 800e794:	005b      	lsls	r3, r3, #1
 800e796:	4413      	add	r3, r2
 800e798:	009b      	lsls	r3, r3, #2
 800e79a:	4403      	add	r3, r0
                                                        - allocatedSize;
 800e79c:	69fa      	ldr	r2, [r7, #28]
 800e79e:	1a8a      	subs	r2, r1, r2
          p_AmmVirtualMemoryList[memIdx].OccupiedSize = p_AmmVirtualMemoryList[memIdx].OccupiedSize
 800e7a0:	f8c3 2005 	str.w	r2, [r3, #5]

          error = AMM_ERROR_OK;
 800e7a4:	2300      	movs	r3, #0
 800e7a6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
           memIdx++)
 800e7aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e7ac:	3301      	adds	r3, #1
 800e7ae:	62bb      	str	r3, [r7, #40]	@ 0x28
           (memIdx < AmmVirtualMemoryNumber) && (error == AMM_ERROR_UNKNOWN_ID);
 800e7b0:	4b12      	ldr	r3, [pc, #72]	@ (800e7fc <AMM_Free+0x1ec>)
 800e7b2:	681b      	ldr	r3, [r3, #0]
 800e7b4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e7b6:	429a      	cmp	r2, r3
 800e7b8:	d203      	bcs.n	800e7c2 <AMM_Free+0x1b2>
 800e7ba:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e7be:	2b09      	cmp	r3, #9
 800e7c0:	d08f      	beq.n	800e6e2 <AMM_Free+0xd2>
        }
      }
    }

    /* Pop pending callbacks and add them to the active fifo */
    passPendingToActive ();
 800e7c2:	f000 f845 	bl	800e850 <passPendingToActive>
 800e7c6:	697b      	ldr	r3, [r7, #20]
 800e7c8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e7ca:	68fb      	ldr	r3, [r7, #12]
 800e7cc:	f383 8810 	msr	PRIMASK, r3
}
 800e7d0:	bf00      	nop

    /* Exit critical section */
    UTIL_SEQ_EXIT_CRITICAL_SECTION ();

    /* Ask the user task to proceed to a background process call */
    AMM_ProcessRequest();
 800e7d2:	f7f2 f833 	bl	800083c <AMM_ProcessRequest>
  }

  return error;
 800e7d6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800e7da:	4618      	mov	r0, r3
 800e7dc:	3730      	adds	r7, #48	@ 0x30
 800e7de:	46bd      	mov	sp, r7
 800e7e0:	bd80      	pop	{r7, pc}
 800e7e2:	bf00      	nop
 800e7e4:	20006ac0 	.word	0x20006ac0
 800e7e8:	20006ac4 	.word	0x20006ac4
 800e7ec:	20006ac8 	.word	0x20006ac8
 800e7f0:	20006adc 	.word	0x20006adc
 800e7f4:	20006acc 	.word	0x20006acc
 800e7f8:	20006ad8 	.word	0x20006ad8
 800e7fc:	20006ad4 	.word	0x20006ad4

0800e800 <AMM_BackgroundProcess>:

void AMM_BackgroundProcess (void)
{
 800e800:	b580      	push	{r7, lr}
 800e802:	b082      	sub	sp, #8
 800e804:	af00      	add	r7, sp, #0
  AMM_VirtualMemoryCallbackFunction_t * p_tmpCallback = NULL;
 800e806:	2300      	movs	r3, #0
 800e808:	607b      	str	r3, [r7, #4]

  do
  {
    /* Pop an active callback request */
    p_tmpCallback = popActive();
 800e80a:	f000 f841 	bl	800e890 <popActive>
 800e80e:	6078      	str	r0, [r7, #4]

    if (p_tmpCallback != NULL)
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	2b00      	cmp	r3, #0
 800e814:	d002      	beq.n	800e81c <AMM_BackgroundProcess+0x1c>
    {
      /* Invoke the callback for an alloc retry */
      p_tmpCallback->Callback();
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	689b      	ldr	r3, [r3, #8]
 800e81a:	4798      	blx	r3
    }
  }while (p_tmpCallback != NULL);
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	2b00      	cmp	r3, #0
 800e820:	d1f3      	bne.n	800e80a <AMM_BackgroundProcess+0xa>
}
 800e822:	bf00      	nop
 800e824:	bf00      	nop
 800e826:	3708      	adds	r7, #8
 800e828:	46bd      	mov	sp, r7
 800e82a:	bd80      	pop	{r7, pc}

0800e82c <pushPending>:

/* Private Functions Definition ------------------------------------------------------*/

void pushPending (AMM_VirtualMemoryCallbackFunction_t * const p_CallbackElt)
{
 800e82c:	b580      	push	{r7, lr}
 800e82e:	b082      	sub	sp, #8
 800e830:	af00      	add	r7, sp, #0
 800e832:	6078      	str	r0, [r7, #4]
  if (p_CallbackElt != NULL)
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	2b00      	cmp	r3, #0
 800e838:	d003      	beq.n	800e842 <pushPending+0x16>
  {
    /* Add the new callback */
    LST_insert_tail (&AmmPendingCallback, (tListNode *)p_CallbackElt);
 800e83a:	6879      	ldr	r1, [r7, #4]
 800e83c:	4803      	ldr	r0, [pc, #12]	@ (800e84c <pushPending+0x20>)
 800e83e:	f001 fc6d 	bl	801011c <LST_insert_tail>
  }
}
 800e842:	bf00      	nop
 800e844:	3708      	adds	r7, #8
 800e846:	46bd      	mov	sp, r7
 800e848:	bd80      	pop	{r7, pc}
 800e84a:	bf00      	nop
 800e84c:	20006ae8 	.word	0x20006ae8

0800e850 <passPendingToActive>:

void passPendingToActive (void)
{
 800e850:	b580      	push	{r7, lr}
 800e852:	b082      	sub	sp, #8
 800e854:	af00      	add	r7, sp, #0
  AMM_VirtualMemoryCallbackFunction_t * p_TmpElt = NULL;
 800e856:	2300      	movs	r3, #0
 800e858:	607b      	str	r3, [r7, #4]

  while (LST_is_empty (&AmmPendingCallback) == FALSE)
 800e85a:	e009      	b.n	800e870 <passPendingToActive+0x20>
  {
    /* Remove the head element */
    LST_remove_head (&AmmPendingCallback, (tListNode**)&p_TmpElt);
 800e85c:	1d3b      	adds	r3, r7, #4
 800e85e:	4619      	mov	r1, r3
 800e860:	4809      	ldr	r0, [pc, #36]	@ (800e888 <passPendingToActive+0x38>)
 800e862:	f001 fca2 	bl	80101aa <LST_remove_head>
    /* Add at the bottom */
    LST_insert_tail (&AmmActiveCallback, (tListNode *)p_TmpElt);
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	4619      	mov	r1, r3
 800e86a:	4808      	ldr	r0, [pc, #32]	@ (800e88c <passPendingToActive+0x3c>)
 800e86c:	f001 fc56 	bl	801011c <LST_insert_tail>
  while (LST_is_empty (&AmmPendingCallback) == FALSE)
 800e870:	4805      	ldr	r0, [pc, #20]	@ (800e888 <passPendingToActive+0x38>)
 800e872:	f001 fc0b 	bl	801008c <LST_is_empty>
 800e876:	4603      	mov	r3, r0
 800e878:	2b00      	cmp	r3, #0
 800e87a:	d0ef      	beq.n	800e85c <passPendingToActive+0xc>
  }
}
 800e87c:	bf00      	nop
 800e87e:	bf00      	nop
 800e880:	3708      	adds	r7, #8
 800e882:	46bd      	mov	sp, r7
 800e884:	bd80      	pop	{r7, pc}
 800e886:	bf00      	nop
 800e888:	20006ae8 	.word	0x20006ae8
 800e88c:	20006af0 	.word	0x20006af0

0800e890 <popActive>:

AMM_VirtualMemoryCallbackFunction_t * popActive (void)
{
 800e890:	b580      	push	{r7, lr}
 800e892:	b082      	sub	sp, #8
 800e894:	af00      	add	r7, sp, #0
  AMM_VirtualMemoryCallbackFunction_t * p_error = NULL;
 800e896:	2300      	movs	r3, #0
 800e898:	607b      	str	r3, [r7, #4]

  if (LST_is_empty (&AmmActiveCallback) == FALSE)
 800e89a:	4808      	ldr	r0, [pc, #32]	@ (800e8bc <popActive+0x2c>)
 800e89c:	f001 fbf6 	bl	801008c <LST_is_empty>
 800e8a0:	4603      	mov	r3, r0
 800e8a2:	2b00      	cmp	r3, #0
 800e8a4:	d104      	bne.n	800e8b0 <popActive+0x20>
  {
    /* Remove last element */
    LST_remove_head (&AmmActiveCallback, (tListNode**)&p_error);
 800e8a6:	1d3b      	adds	r3, r7, #4
 800e8a8:	4619      	mov	r1, r3
 800e8aa:	4804      	ldr	r0, [pc, #16]	@ (800e8bc <popActive+0x2c>)
 800e8ac:	f001 fc7d 	bl	80101aa <LST_remove_head>
  }

  return p_error;
 800e8b0:	687b      	ldr	r3, [r7, #4]
}
 800e8b2:	4618      	mov	r0, r3
 800e8b4:	3708      	adds	r7, #8
 800e8b6:	46bd      	mov	sp, r7
 800e8b8:	bd80      	pop	{r7, pc}
 800e8ba:	bf00      	nop
 800e8bc:	20006af0 	.word	0x20006af0

0800e8c0 <UTIL_MM_GetBuffer>:
#if (KEEP_ORIGINAL_CODE_FROM_FREERTOS == 0)
void * UTIL_MM_GetBuffer( size_t xWantedSize )
#else
void * pvPortMalloc( size_t xWantedSize )
#endif
{
 800e8c0:	b580      	push	{r7, lr}
 800e8c2:	b086      	sub	sp, #24
 800e8c4:	af00      	add	r7, sp, #0
 800e8c6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 800e8c8:	2300      	movs	r3, #0
 800e8ca:	60fb      	str	r3, [r7, #12]

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e8cc:	4b3e      	ldr	r3, [pc, #248]	@ (800e9c8 <UTIL_MM_GetBuffer+0x108>)
 800e8ce:	681a      	ldr	r2, [r3, #0]
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	4013      	ands	r3, r2
 800e8d4:	2b00      	cmp	r3, #0
 800e8d6:	d172      	bne.n	800e9be <UTIL_MM_GetBuffer+0xfe>
        {
            /* The wanted size is increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( xWantedSize > 0 )
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	2b00      	cmp	r3, #0
 800e8dc:	d00d      	beq.n	800e8fa <UTIL_MM_GetBuffer+0x3a>
            {
                xWantedSize += xHeapStructSize;
 800e8de:	2208      	movs	r2, #8
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	4413      	add	r3, r2
 800e8e4:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned to the required number
                 * of bytes. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	f003 0307 	and.w	r3, r3, #7
 800e8ec:	2b00      	cmp	r3, #0
 800e8ee:	d004      	beq.n	800e8fa <UTIL_MM_GetBuffer+0x3a>
                {
                    /* Byte alignment required. */
                    xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	f023 0307 	bic.w	r3, r3, #7
 800e8f6:	3308      	adds	r3, #8
 800e8f8:	607b      	str	r3, [r7, #4]
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	2b00      	cmp	r3, #0
 800e8fe:	d05e      	beq.n	800e9be <UTIL_MM_GetBuffer+0xfe>
 800e900:	4b32      	ldr	r3, [pc, #200]	@ (800e9cc <UTIL_MM_GetBuffer+0x10c>)
 800e902:	681b      	ldr	r3, [r3, #0]
 800e904:	687a      	ldr	r2, [r7, #4]
 800e906:	429a      	cmp	r2, r3
 800e908:	d859      	bhi.n	800e9be <UTIL_MM_GetBuffer+0xfe>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one	of adequate size is found. */
                pxPreviousBlock = &xStart;
 800e90a:	4b31      	ldr	r3, [pc, #196]	@ (800e9d0 <UTIL_MM_GetBuffer+0x110>)
 800e90c:	613b      	str	r3, [r7, #16]
                pxBlock = xStart.pxNextFreeBlock;
 800e90e:	4b30      	ldr	r3, [pc, #192]	@ (800e9d0 <UTIL_MM_GetBuffer+0x110>)
 800e910:	681b      	ldr	r3, [r3, #0]
 800e912:	617b      	str	r3, [r7, #20]

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e914:	e004      	b.n	800e920 <UTIL_MM_GetBuffer+0x60>
                {
                    pxPreviousBlock = pxBlock;
 800e916:	697b      	ldr	r3, [r7, #20]
 800e918:	613b      	str	r3, [r7, #16]
                    pxBlock = pxBlock->pxNextFreeBlock;
 800e91a:	697b      	ldr	r3, [r7, #20]
 800e91c:	681b      	ldr	r3, [r3, #0]
 800e91e:	617b      	str	r3, [r7, #20]
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e920:	697b      	ldr	r3, [r7, #20]
 800e922:	685b      	ldr	r3, [r3, #4]
 800e924:	687a      	ldr	r2, [r7, #4]
 800e926:	429a      	cmp	r2, r3
 800e928:	d903      	bls.n	800e932 <UTIL_MM_GetBuffer+0x72>
 800e92a:	697b      	ldr	r3, [r7, #20]
 800e92c:	681b      	ldr	r3, [r3, #0]
 800e92e:	2b00      	cmp	r3, #0
 800e930:	d1f1      	bne.n	800e916 <UTIL_MM_GetBuffer+0x56>
                }

                /* If the end marker was reached then a block of adequate size
                 * was	not found. */
                if( pxBlock != pxEnd )
 800e932:	4b28      	ldr	r3, [pc, #160]	@ (800e9d4 <UTIL_MM_GetBuffer+0x114>)
 800e934:	681b      	ldr	r3, [r3, #0]
 800e936:	697a      	ldr	r2, [r7, #20]
 800e938:	429a      	cmp	r2, r3
 800e93a:	d040      	beq.n	800e9be <UTIL_MM_GetBuffer+0xfe>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e93c:	693b      	ldr	r3, [r7, #16]
 800e93e:	681b      	ldr	r3, [r3, #0]
 800e940:	2208      	movs	r2, #8
 800e942:	4413      	add	r3, r2
 800e944:	60fb      	str	r3, [r7, #12]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e946:	697b      	ldr	r3, [r7, #20]
 800e948:	681a      	ldr	r2, [r3, #0]
 800e94a:	693b      	ldr	r3, [r7, #16]
 800e94c:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e94e:	697b      	ldr	r3, [r7, #20]
 800e950:	685a      	ldr	r2, [r3, #4]
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	1ad2      	subs	r2, r2, r3
 800e956:	2308      	movs	r3, #8
 800e958:	005b      	lsls	r3, r3, #1
 800e95a:	429a      	cmp	r2, r3
 800e95c:	d90f      	bls.n	800e97e <UTIL_MM_GetBuffer+0xbe>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e95e:	697a      	ldr	r2, [r7, #20]
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	4413      	add	r3, r2
 800e964:	60bb      	str	r3, [r7, #8]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e966:	697b      	ldr	r3, [r7, #20]
 800e968:	685a      	ldr	r2, [r3, #4]
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	1ad2      	subs	r2, r2, r3
 800e96e:	68bb      	ldr	r3, [r7, #8]
 800e970:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 800e972:	697b      	ldr	r3, [r7, #20]
 800e974:	687a      	ldr	r2, [r7, #4]
 800e976:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e978:	68b8      	ldr	r0, [r7, #8]
 800e97a:	f000 f8cf 	bl	800eb1c <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e97e:	4b13      	ldr	r3, [pc, #76]	@ (800e9cc <UTIL_MM_GetBuffer+0x10c>)
 800e980:	681a      	ldr	r2, [r3, #0]
 800e982:	697b      	ldr	r3, [r7, #20]
 800e984:	685b      	ldr	r3, [r3, #4]
 800e986:	1ad3      	subs	r3, r2, r3
 800e988:	4a10      	ldr	r2, [pc, #64]	@ (800e9cc <UTIL_MM_GetBuffer+0x10c>)
 800e98a:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e98c:	4b0f      	ldr	r3, [pc, #60]	@ (800e9cc <UTIL_MM_GetBuffer+0x10c>)
 800e98e:	681a      	ldr	r2, [r3, #0]
 800e990:	4b11      	ldr	r3, [pc, #68]	@ (800e9d8 <UTIL_MM_GetBuffer+0x118>)
 800e992:	681b      	ldr	r3, [r3, #0]
 800e994:	429a      	cmp	r2, r3
 800e996:	d203      	bcs.n	800e9a0 <UTIL_MM_GetBuffer+0xe0>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e998:	4b0c      	ldr	r3, [pc, #48]	@ (800e9cc <UTIL_MM_GetBuffer+0x10c>)
 800e99a:	681b      	ldr	r3, [r3, #0]
 800e99c:	4a0e      	ldr	r2, [pc, #56]	@ (800e9d8 <UTIL_MM_GetBuffer+0x118>)
 800e99e:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e9a0:	697b      	ldr	r3, [r7, #20]
 800e9a2:	685a      	ldr	r2, [r3, #4]
 800e9a4:	4b08      	ldr	r3, [pc, #32]	@ (800e9c8 <UTIL_MM_GetBuffer+0x108>)
 800e9a6:	681b      	ldr	r3, [r3, #0]
 800e9a8:	431a      	orrs	r2, r3
 800e9aa:	697b      	ldr	r3, [r7, #20]
 800e9ac:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 800e9ae:	697b      	ldr	r3, [r7, #20]
 800e9b0:	2200      	movs	r2, #0
 800e9b2:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800e9b4:	4b09      	ldr	r3, [pc, #36]	@ (800e9dc <UTIL_MM_GetBuffer+0x11c>)
 800e9b6:	681b      	ldr	r3, [r3, #0]
 800e9b8:	3301      	adds	r3, #1
 800e9ba:	4a08      	ldr	r2, [pc, #32]	@ (800e9dc <UTIL_MM_GetBuffer+0x11c>)
 800e9bc:	6013      	str	r3, [r2, #0]
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
 800e9be:	68fb      	ldr	r3, [r7, #12]
}
 800e9c0:	4618      	mov	r0, r3
 800e9c2:	3718      	adds	r7, #24
 800e9c4:	46bd      	mov	sp, r7
 800e9c6:	bd80      	pop	{r7, pc}
 800e9c8:	20006b14 	.word	0x20006b14
 800e9cc:	20006b04 	.word	0x20006b04
 800e9d0:	20006af8 	.word	0x20006af8
 800e9d4:	20006b00 	.word	0x20006b00
 800e9d8:	20006b08 	.word	0x20006b08
 800e9dc:	20006b0c 	.word	0x20006b0c

0800e9e0 <UTIL_MM_ReleaseBuffer>:
#if (KEEP_ORIGINAL_CODE_FROM_FREERTOS == 0)
void UTIL_MM_ReleaseBuffer( void * pv )
#else
void vPortFree( void * pv )
#endif
{
 800e9e0:	b580      	push	{r7, lr}
 800e9e2:	b084      	sub	sp, #16
 800e9e4:	af00      	add	r7, sp, #0
 800e9e6:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	60fb      	str	r3, [r7, #12]
    BlockLink_t * pxLink;

    if( pv != NULL )
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	2b00      	cmp	r3, #0
 800e9f0:	d028      	beq.n	800ea44 <UTIL_MM_ReleaseBuffer+0x64>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800e9f2:	2308      	movs	r3, #8
 800e9f4:	425b      	negs	r3, r3
 800e9f6:	68fa      	ldr	r2, [r7, #12]
 800e9f8:	4413      	add	r3, r2
 800e9fa:	60fb      	str	r3, [r7, #12]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 800e9fc:	68fb      	ldr	r3, [r7, #12]
 800e9fe:	60bb      	str	r3, [r7, #8]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ea00:	68bb      	ldr	r3, [r7, #8]
 800ea02:	685a      	ldr	r2, [r3, #4]
 800ea04:	4b11      	ldr	r3, [pc, #68]	@ (800ea4c <UTIL_MM_ReleaseBuffer+0x6c>)
 800ea06:	681b      	ldr	r3, [r3, #0]
 800ea08:	4013      	ands	r3, r2
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	d01a      	beq.n	800ea44 <UTIL_MM_ReleaseBuffer+0x64>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800ea0e:	68bb      	ldr	r3, [r7, #8]
 800ea10:	681b      	ldr	r3, [r3, #0]
 800ea12:	2b00      	cmp	r3, #0
 800ea14:	d116      	bne.n	800ea44 <UTIL_MM_ReleaseBuffer+0x64>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ea16:	68bb      	ldr	r3, [r7, #8]
 800ea18:	685a      	ldr	r2, [r3, #4]
 800ea1a:	4b0c      	ldr	r3, [pc, #48]	@ (800ea4c <UTIL_MM_ReleaseBuffer+0x6c>)
 800ea1c:	681b      	ldr	r3, [r3, #0]
 800ea1e:	43db      	mvns	r3, r3
 800ea20:	401a      	ands	r2, r3
 800ea22:	68bb      	ldr	r3, [r7, #8]
 800ea24:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 800ea26:	68bb      	ldr	r3, [r7, #8]
 800ea28:	685a      	ldr	r2, [r3, #4]
 800ea2a:	4b09      	ldr	r3, [pc, #36]	@ (800ea50 <UTIL_MM_ReleaseBuffer+0x70>)
 800ea2c:	681b      	ldr	r3, [r3, #0]
 800ea2e:	4413      	add	r3, r2
 800ea30:	4a07      	ldr	r2, [pc, #28]	@ (800ea50 <UTIL_MM_ReleaseBuffer+0x70>)
 800ea32:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ea34:	68b8      	ldr	r0, [r7, #8]
 800ea36:	f000 f871 	bl	800eb1c <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800ea3a:	4b06      	ldr	r3, [pc, #24]	@ (800ea54 <UTIL_MM_ReleaseBuffer+0x74>)
 800ea3c:	681b      	ldr	r3, [r3, #0]
 800ea3e:	3301      	adds	r3, #1
 800ea40:	4a04      	ldr	r2, [pc, #16]	@ (800ea54 <UTIL_MM_ReleaseBuffer+0x74>)
 800ea42:	6013      	str	r3, [r2, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800ea44:	bf00      	nop
 800ea46:	3710      	adds	r7, #16
 800ea48:	46bd      	mov	sp, r7
 800ea4a:	bd80      	pop	{r7, pc}
 800ea4c:	20006b14 	.word	0x20006b14
 800ea50:	20006b04 	.word	0x20006b04
 800ea54:	20006b10 	.word	0x20006b10

0800ea58 <UTIL_MM_Init>:
/*-----------------------------------------------------------*/
static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
#else
void UTIL_MM_Init(uint8_t *p_pool, uint32_t pool_size)
#endif
{
 800ea58:	b480      	push	{r7}
 800ea5a:	b087      	sub	sp, #28
 800ea5c:	af00      	add	r7, sp, #0
 800ea5e:	6078      	str	r0, [r7, #4]
 800ea60:	6039      	str	r1, [r7, #0]
    size_t uxAddress;
#if (KEEP_ORIGINAL_CODE_FROM_FREERTOS != 0)
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
#else
    size_t xTotalHeapSize;
    xTotalHeapSize = pool_size;
 800ea62:	683b      	ldr	r3, [r7, #0]
 800ea64:	613b      	str	r3, [r7, #16]
#endif

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) p_pool;
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	617b      	str	r3, [r7, #20]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ea6a:	697b      	ldr	r3, [r7, #20]
 800ea6c:	f003 0307 	and.w	r3, r3, #7
 800ea70:	2b00      	cmp	r3, #0
 800ea72:	d00c      	beq.n	800ea8e <UTIL_MM_Init+0x36>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ea74:	697b      	ldr	r3, [r7, #20]
 800ea76:	3307      	adds	r3, #7
 800ea78:	617b      	str	r3, [r7, #20]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ea7a:	697b      	ldr	r3, [r7, #20]
 800ea7c:	f023 0307 	bic.w	r3, r3, #7
 800ea80:	617b      	str	r3, [r7, #20]
        xTotalHeapSize -= uxAddress - ( size_t ) p_pool;
 800ea82:	687a      	ldr	r2, [r7, #4]
 800ea84:	697b      	ldr	r3, [r7, #20]
 800ea86:	1ad3      	subs	r3, r2, r3
 800ea88:	693a      	ldr	r2, [r7, #16]
 800ea8a:	4413      	add	r3, r2
 800ea8c:	613b      	str	r3, [r7, #16]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ea8e:	697b      	ldr	r3, [r7, #20]
 800ea90:	60fb      	str	r3, [r7, #12]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ea92:	4a1d      	ldr	r2, [pc, #116]	@ (800eb08 <UTIL_MM_Init+0xb0>)
 800ea94:	68fb      	ldr	r3, [r7, #12]
 800ea96:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800ea98:	4b1b      	ldr	r3, [pc, #108]	@ (800eb08 <UTIL_MM_Init+0xb0>)
 800ea9a:	2200      	movs	r2, #0
 800ea9c:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ea9e:	68fb      	ldr	r3, [r7, #12]
 800eaa0:	693a      	ldr	r2, [r7, #16]
 800eaa2:	4413      	add	r3, r2
 800eaa4:	617b      	str	r3, [r7, #20]
    uxAddress -= xHeapStructSize;
 800eaa6:	2208      	movs	r2, #8
 800eaa8:	697b      	ldr	r3, [r7, #20]
 800eaaa:	1a9b      	subs	r3, r3, r2
 800eaac:	617b      	str	r3, [r7, #20]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800eaae:	697b      	ldr	r3, [r7, #20]
 800eab0:	f023 0307 	bic.w	r3, r3, #7
 800eab4:	617b      	str	r3, [r7, #20]
    pxEnd = ( void * ) uxAddress;
 800eab6:	697b      	ldr	r3, [r7, #20]
 800eab8:	4a14      	ldr	r2, [pc, #80]	@ (800eb0c <UTIL_MM_Init+0xb4>)
 800eaba:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800eabc:	4b13      	ldr	r3, [pc, #76]	@ (800eb0c <UTIL_MM_Init+0xb4>)
 800eabe:	681b      	ldr	r3, [r3, #0]
 800eac0:	2200      	movs	r2, #0
 800eac2:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800eac4:	4b11      	ldr	r3, [pc, #68]	@ (800eb0c <UTIL_MM_Init+0xb4>)
 800eac6:	681b      	ldr	r3, [r3, #0]
 800eac8:	2200      	movs	r2, #0
 800eaca:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800eacc:	68fb      	ldr	r3, [r7, #12]
 800eace:	60bb      	str	r3, [r7, #8]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ead0:	68bb      	ldr	r3, [r7, #8]
 800ead2:	697a      	ldr	r2, [r7, #20]
 800ead4:	1ad2      	subs	r2, r2, r3
 800ead6:	68bb      	ldr	r3, [r7, #8]
 800ead8:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800eada:	4b0c      	ldr	r3, [pc, #48]	@ (800eb0c <UTIL_MM_Init+0xb4>)
 800eadc:	681a      	ldr	r2, [r3, #0]
 800eade:	68bb      	ldr	r3, [r7, #8]
 800eae0:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800eae2:	68bb      	ldr	r3, [r7, #8]
 800eae4:	685b      	ldr	r3, [r3, #4]
 800eae6:	4a0a      	ldr	r2, [pc, #40]	@ (800eb10 <UTIL_MM_Init+0xb8>)
 800eae8:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800eaea:	68bb      	ldr	r3, [r7, #8]
 800eaec:	685b      	ldr	r3, [r3, #4]
 800eaee:	4a09      	ldr	r2, [pc, #36]	@ (800eb14 <UTIL_MM_Init+0xbc>)
 800eaf0:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800eaf2:	4b09      	ldr	r3, [pc, #36]	@ (800eb18 <UTIL_MM_Init+0xc0>)
 800eaf4:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800eaf8:	601a      	str	r2, [r3, #0]
}
 800eafa:	bf00      	nop
 800eafc:	371c      	adds	r7, #28
 800eafe:	46bd      	mov	sp, r7
 800eb00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb04:	4770      	bx	lr
 800eb06:	bf00      	nop
 800eb08:	20006af8 	.word	0x20006af8
 800eb0c:	20006b00 	.word	0x20006b00
 800eb10:	20006b08 	.word	0x20006b08
 800eb14:	20006b04 	.word	0x20006b04
 800eb18:	20006b14 	.word	0x20006b14

0800eb1c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 800eb1c:	b480      	push	{r7}
 800eb1e:	b085      	sub	sp, #20
 800eb20:	af00      	add	r7, sp, #0
 800eb22:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800eb24:	4b28      	ldr	r3, [pc, #160]	@ (800ebc8 <prvInsertBlockIntoFreeList+0xac>)
 800eb26:	60fb      	str	r3, [r7, #12]
 800eb28:	e002      	b.n	800eb30 <prvInsertBlockIntoFreeList+0x14>
 800eb2a:	68fb      	ldr	r3, [r7, #12]
 800eb2c:	681b      	ldr	r3, [r3, #0]
 800eb2e:	60fb      	str	r3, [r7, #12]
 800eb30:	68fb      	ldr	r3, [r7, #12]
 800eb32:	681b      	ldr	r3, [r3, #0]
 800eb34:	687a      	ldr	r2, [r7, #4]
 800eb36:	429a      	cmp	r2, r3
 800eb38:	d8f7      	bhi.n	800eb2a <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800eb3a:	68fb      	ldr	r3, [r7, #12]
 800eb3c:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800eb3e:	68fb      	ldr	r3, [r7, #12]
 800eb40:	685b      	ldr	r3, [r3, #4]
 800eb42:	68ba      	ldr	r2, [r7, #8]
 800eb44:	4413      	add	r3, r2
 800eb46:	687a      	ldr	r2, [r7, #4]
 800eb48:	429a      	cmp	r2, r3
 800eb4a:	d108      	bne.n	800eb5e <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800eb4c:	68fb      	ldr	r3, [r7, #12]
 800eb4e:	685a      	ldr	r2, [r3, #4]
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	685b      	ldr	r3, [r3, #4]
 800eb54:	441a      	add	r2, r3
 800eb56:	68fb      	ldr	r3, [r7, #12]
 800eb58:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800eb5a:	68fb      	ldr	r3, [r7, #12]
 800eb5c:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	685b      	ldr	r3, [r3, #4]
 800eb66:	68ba      	ldr	r2, [r7, #8]
 800eb68:	441a      	add	r2, r3
 800eb6a:	68fb      	ldr	r3, [r7, #12]
 800eb6c:	681b      	ldr	r3, [r3, #0]
 800eb6e:	429a      	cmp	r2, r3
 800eb70:	d118      	bne.n	800eba4 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800eb72:	68fb      	ldr	r3, [r7, #12]
 800eb74:	681a      	ldr	r2, [r3, #0]
 800eb76:	4b15      	ldr	r3, [pc, #84]	@ (800ebcc <prvInsertBlockIntoFreeList+0xb0>)
 800eb78:	681b      	ldr	r3, [r3, #0]
 800eb7a:	429a      	cmp	r2, r3
 800eb7c:	d00d      	beq.n	800eb9a <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	685a      	ldr	r2, [r3, #4]
 800eb82:	68fb      	ldr	r3, [r7, #12]
 800eb84:	681b      	ldr	r3, [r3, #0]
 800eb86:	685b      	ldr	r3, [r3, #4]
 800eb88:	441a      	add	r2, r3
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800eb8e:	68fb      	ldr	r3, [r7, #12]
 800eb90:	681b      	ldr	r3, [r3, #0]
 800eb92:	681a      	ldr	r2, [r3, #0]
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	601a      	str	r2, [r3, #0]
 800eb98:	e008      	b.n	800ebac <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800eb9a:	4b0c      	ldr	r3, [pc, #48]	@ (800ebcc <prvInsertBlockIntoFreeList+0xb0>)
 800eb9c:	681a      	ldr	r2, [r3, #0]
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	601a      	str	r2, [r3, #0]
 800eba2:	e003      	b.n	800ebac <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800eba4:	68fb      	ldr	r3, [r7, #12]
 800eba6:	681a      	ldr	r2, [r3, #0]
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 800ebac:	68fa      	ldr	r2, [r7, #12]
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	429a      	cmp	r2, r3
 800ebb2:	d002      	beq.n	800ebba <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ebb4:	68fb      	ldr	r3, [r7, #12]
 800ebb6:	687a      	ldr	r2, [r7, #4]
 800ebb8:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800ebba:	bf00      	nop
 800ebbc:	3714      	adds	r7, #20
 800ebbe:	46bd      	mov	sp, r7
 800ebc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebc4:	4770      	bx	lr
 800ebc6:	bf00      	nop
 800ebc8:	20006af8 	.word	0x20006af8
 800ebcc:	20006b00 	.word	0x20006b00

0800ebd0 <NVM_Init>:
               uint16_t size,
               uint16_t max_size )
#else
void NVM_Init( uint32_t* buffer )
#endif
{
 800ebd0:	b480      	push	{r7}
 800ebd2:	b083      	sub	sp, #12
 800ebd4:	af00      	add	r7, sp, #0
 800ebd6:	6078      	str	r0, [r7, #4]
 800ebd8:	460b      	mov	r3, r1
 800ebda:	807b      	strh	r3, [r7, #2]
 800ebdc:	4613      	mov	r3, r2
 800ebde:	803b      	strh	r3, [r7, #0]
  /* Save buffer info */
  NVM_buffer = (uint32_t*)buffer;
 800ebe0:	4a0e      	ldr	r2, [pc, #56]	@ (800ec1c <NVM_Init+0x4c>)
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	6013      	str	r3, [r2, #0]
#if CFG_NVM_ALIGN != 0
  NVM_size = size;
 800ebe6:	4a0e      	ldr	r2, [pc, #56]	@ (800ec20 <NVM_Init+0x50>)
 800ebe8:	887b      	ldrh	r3, [r7, #2]
 800ebea:	8013      	strh	r3, [r2, #0]
  NVM_max_size = 2*max_size;
 800ebec:	883b      	ldrh	r3, [r7, #0]
 800ebee:	005b      	lsls	r3, r3, #1
 800ebf0:	b29a      	uxth	r2, r3
 800ebf2:	4b0c      	ldr	r3, [pc, #48]	@ (800ec24 <NVM_Init+0x54>)
 800ebf4:	801a      	strh	r2, [r3, #0]
  NVM_buffer[2*size] = 0;
 800ebf6:	4b09      	ldr	r3, [pc, #36]	@ (800ec1c <NVM_Init+0x4c>)
 800ebf8:	681a      	ldr	r2, [r3, #0]
 800ebfa:	887b      	ldrh	r3, [r7, #2]
 800ebfc:	00db      	lsls	r3, r3, #3
 800ebfe:	4413      	add	r3, r2
 800ec00:	2200      	movs	r2, #0
 800ec02:	601a      	str	r2, [r3, #0]
#else
  NVM_max_size = CFG_NVM_MAX_SIZE;
#endif

  /* Initialize warning trigger level */
  NVM_trig_level = NVM_max_size - 1;
 800ec04:	4b07      	ldr	r3, [pc, #28]	@ (800ec24 <NVM_Init+0x54>)
 800ec06:	881b      	ldrh	r3, [r3, #0]
 800ec08:	3b01      	subs	r3, #1
 800ec0a:	461a      	mov	r2, r3
 800ec0c:	4b06      	ldr	r3, [pc, #24]	@ (800ec28 <NVM_Init+0x58>)
 800ec0e:	601a      	str	r2, [r3, #0]
}
 800ec10:	bf00      	nop
 800ec12:	370c      	adds	r7, #12
 800ec14:	46bd      	mov	sp, r7
 800ec16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec1a:	4770      	bx	lr
 800ec1c:	20006b18 	.word	0x20006b18
 800ec20:	20006b24 	.word	0x20006b24
 800ec24:	20006b26 	.word	0x20006b26
 800ec28:	20006b20 	.word	0x20006b20

0800ec2c <NVM_Add>:
int NVM_Add( uint8_t type,
             const uint8_t* data,
             uint16_t size,
             const uint8_t* extra_data,
             uint16_t extra_size )
{
 800ec2c:	b580      	push	{r7, lr}
 800ec2e:	b08c      	sub	sp, #48	@ 0x30
 800ec30:	af00      	add	r7, sp, #0
 800ec32:	60b9      	str	r1, [r7, #8]
 800ec34:	607b      	str	r3, [r7, #4]
 800ec36:	4603      	mov	r3, r0
 800ec38:	73fb      	strb	r3, [r7, #15]
 800ec3a:	4613      	mov	r3, r2
 800ec3c:	81bb      	strh	r3, [r7, #12]
  uint32_t *ptr, next, left, total_size, offset, *start_ptr, removed;

  if ( data && size )
 800ec3e:	68bb      	ldr	r3, [r7, #8]
 800ec40:	2b00      	cmp	r3, #0
 800ec42:	f000 80eb 	beq.w	800ee1c <NVM_Add+0x1f0>
 800ec46:	89bb      	ldrh	r3, [r7, #12]
 800ec48:	2b00      	cmp	r3, #0
 800ec4a:	f000 80e7 	beq.w	800ee1c <NVM_Add+0x1f0>
  {
    total_size = size + extra_size;
 800ec4e:	89ba      	ldrh	r2, [r7, #12]
 800ec50:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800ec52:	4413      	add	r3, r2
 800ec54:	623b      	str	r3, [r7, #32]
    offset = 1 + NVM_OFFSET(total_size);
 800ec56:	6a3b      	ldr	r3, [r7, #32]
 800ec58:	330b      	adds	r3, #11
 800ec5a:	08db      	lsrs	r3, r3, #3
 800ec5c:	005b      	lsls	r3, r3, #1
 800ec5e:	3301      	adds	r3, #1
 800ec60:	61fb      	str	r3, [r7, #28]

    while ( 1 )
    {
      /* Search the end of data in the buffer */
      ptr = NVM_buffer;
 800ec62:	4b71      	ldr	r3, [pc, #452]	@ (800ee28 <NVM_Add+0x1fc>)
 800ec64:	681b      	ldr	r3, [r3, #0]
 800ec66:	62fb      	str	r3, [r7, #44]	@ 0x2c
      left = NVM_max_size;
 800ec68:	4b70      	ldr	r3, [pc, #448]	@ (800ee2c <NVM_Add+0x200>)
 800ec6a:	881b      	ldrh	r3, [r3, #0]
 800ec6c:	62bb      	str	r3, [r7, #40]	@ 0x28
      removed = 0;
 800ec6e:	2300      	movs	r3, #0
 800ec70:	627b      	str	r3, [r7, #36]	@ 0x24
      while ( !NVM_BLANK(ptr) )
 800ec72:	e01f      	b.n	800ecb4 <NVM_Add+0x88>
      {
        next = NVM_OFFSET(NVM_SIZE(ptr));
 800ec74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec76:	681b      	ldr	r3, [r3, #0]
 800ec78:	b29b      	uxth	r3, r3
 800ec7a:	330b      	adds	r3, #11
 800ec7c:	08db      	lsrs	r3, r3, #3
 800ec7e:	005b      	lsls	r3, r3, #1
 800ec80:	61bb      	str	r3, [r7, #24]

        if  ( next >= left )
 800ec82:	69ba      	ldr	r2, [r7, #24]
 800ec84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec86:	429a      	cmp	r2, r3
 800ec88:	d302      	bcc.n	800ec90 <NVM_Add+0x64>
        {
          /* Return if we exceed buffer size (memory corruption case) */
          return NVM_ERROR;
 800ec8a:	f06f 0304 	mvn.w	r3, #4
 800ec8e:	e0c6      	b.n	800ee1e <NVM_Add+0x1f2>
        }

        if ( !NVM_VALID(ptr) )
 800ec90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec92:	681b      	ldr	r3, [r3, #0]
 800ec94:	0e1b      	lsrs	r3, r3, #24
 800ec96:	2b00      	cmp	r3, #0
 800ec98:	d103      	bne.n	800eca2 <NVM_Add+0x76>
          removed += next;
 800ec9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ec9c:	69bb      	ldr	r3, [r7, #24]
 800ec9e:	4413      	add	r3, r2
 800eca0:	627b      	str	r3, [r7, #36]	@ 0x24

        ptr += next;
 800eca2:	69bb      	ldr	r3, [r7, #24]
 800eca4:	009b      	lsls	r3, r3, #2
 800eca6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800eca8:	4413      	add	r3, r2
 800ecaa:	62fb      	str	r3, [r7, #44]	@ 0x2c
        left -= next;
 800ecac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ecae:	69bb      	ldr	r3, [r7, #24]
 800ecb0:	1ad3      	subs	r3, r2, r3
 800ecb2:	62bb      	str	r3, [r7, #40]	@ 0x28
      while ( !NVM_BLANK(ptr) )
 800ecb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ecb6:	681b      	ldr	r3, [r3, #0]
 800ecb8:	2b00      	cmp	r3, #0
 800ecba:	d1db      	bne.n	800ec74 <NVM_Add+0x48>
      }

      /* Test if there is enough room for the new record */
      if ( offset <= left )
 800ecbc:	69fa      	ldr	r2, [r7, #28]
 800ecbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ecc0:	429a      	cmp	r2, r3
 800ecc2:	d953      	bls.n	800ed6c <NVM_Add+0x140>
      {
        break;
      }

      if ( removed == 0 )
 800ecc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ecc6:	2b00      	cmp	r3, #0
 800ecc8:	d102      	bne.n	800ecd0 <NVM_Add+0xa4>
      {
        /* Return if there is no more room in NVM */
        return NVM_FULL;
 800ecca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ecce:	e0a6      	b.n	800ee1e <NVM_Add+0x1f2>
      }

      /* Search for an invalid record */
      ptr = NVM_buffer;
 800ecd0:	4b55      	ldr	r3, [pc, #340]	@ (800ee28 <NVM_Add+0x1fc>)
 800ecd2:	681b      	ldr	r3, [r3, #0]
 800ecd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      left = NVM_max_size;
 800ecd6:	4b55      	ldr	r3, [pc, #340]	@ (800ee2c <NVM_Add+0x200>)
 800ecd8:	881b      	ldrh	r3, [r3, #0]
 800ecda:	62bb      	str	r3, [r7, #40]	@ 0x28
      while ( (!NVM_BLANK(ptr)) && NVM_VALID(ptr) )
 800ecdc:	e00f      	b.n	800ecfe <NVM_Add+0xd2>
      {
        next = NVM_OFFSET(NVM_SIZE(ptr));
 800ecde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ece0:	681b      	ldr	r3, [r3, #0]
 800ece2:	b29b      	uxth	r3, r3
 800ece4:	330b      	adds	r3, #11
 800ece6:	08db      	lsrs	r3, r3, #3
 800ece8:	005b      	lsls	r3, r3, #1
 800ecea:	61bb      	str	r3, [r7, #24]
        ptr += next;
 800ecec:	69bb      	ldr	r3, [r7, #24]
 800ecee:	009b      	lsls	r3, r3, #2
 800ecf0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ecf2:	4413      	add	r3, r2
 800ecf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        left -= next;
 800ecf6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ecf8:	69bb      	ldr	r3, [r7, #24]
 800ecfa:	1ad3      	subs	r3, r2, r3
 800ecfc:	62bb      	str	r3, [r7, #40]	@ 0x28
      while ( (!NVM_BLANK(ptr)) && NVM_VALID(ptr) )
 800ecfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed00:	681b      	ldr	r3, [r3, #0]
 800ed02:	2b00      	cmp	r3, #0
 800ed04:	d004      	beq.n	800ed10 <NVM_Add+0xe4>
 800ed06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed08:	681b      	ldr	r3, [r3, #0]
 800ed0a:	0e1b      	lsrs	r3, r3, #24
 800ed0c:	2b00      	cmp	r3, #0
 800ed0e:	d1e6      	bne.n	800ecde <NVM_Add+0xb2>
      }

      if ( NVM_BLANK(ptr) )
 800ed10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed12:	681b      	ldr	r3, [r3, #0]
 800ed14:	2b00      	cmp	r3, #0
 800ed16:	d102      	bne.n	800ed1e <NVM_Add+0xf2>
      {
        /* Return if we have reached the end of the buffer */
        return NVM_FULL;
 800ed18:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ed1c:	e07f      	b.n	800ee1e <NVM_Add+0x1f2>
      }

      /* Move records to get room */
      next = NVM_OFFSET(NVM_SIZE(ptr));
 800ed1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed20:	681b      	ldr	r3, [r3, #0]
 800ed22:	b29b      	uxth	r3, r3
 800ed24:	330b      	adds	r3, #11
 800ed26:	08db      	lsrs	r3, r3, #3
 800ed28:	005b      	lsls	r3, r3, #1
 800ed2a:	61bb      	str	r3, [r7, #24]
      memmove( ptr, ptr + next, 4*(left - next) );
 800ed2c:	69bb      	ldr	r3, [r7, #24]
 800ed2e:	009b      	lsls	r3, r3, #2
 800ed30:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ed32:	18d1      	adds	r1, r2, r3
 800ed34:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ed36:	69bb      	ldr	r3, [r7, #24]
 800ed38:	1ad3      	subs	r3, r2, r3
 800ed3a:	009b      	lsls	r3, r3, #2
 800ed3c:	461a      	mov	r2, r3
 800ed3e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ed40:	f020 fb1c 	bl	802f37c <memmove>
      removed -= next;
 800ed44:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ed46:	69bb      	ldr	r3, [r7, #24]
 800ed48:	1ad3      	subs	r3, r2, r3
 800ed4a:	627b      	str	r3, [r7, #36]	@ 0x24

#if CFG_NVM_ALIGN != 0
      NVM_size -= next/2;
 800ed4c:	4b38      	ldr	r3, [pc, #224]	@ (800ee30 <NVM_Add+0x204>)
 800ed4e:	881a      	ldrh	r2, [r3, #0]
 800ed50:	69bb      	ldr	r3, [r7, #24]
 800ed52:	085b      	lsrs	r3, r3, #1
 800ed54:	b29b      	uxth	r3, r3
 800ed56:	1ad3      	subs	r3, r2, r3
 800ed58:	b29a      	uxth	r2, r3
 800ed5a:	4b35      	ldr	r3, [pc, #212]	@ (800ee30 <NVM_Add+0x204>)
 800ed5c:	801a      	strh	r2, [r3, #0]
      NVMCB_Store( ptr, NVM_size );
 800ed5e:	4b34      	ldr	r3, [pc, #208]	@ (800ee30 <NVM_Add+0x204>)
 800ed60:	881b      	ldrh	r3, [r3, #0]
 800ed62:	4619      	mov	r1, r3
 800ed64:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ed66:	f7fa f981 	bl	800906c <NVMCB_Store>
      ptr = NVM_buffer;
 800ed6a:	e77a      	b.n	800ec62 <NVM_Add+0x36>
        break;
 800ed6c:	bf00      	nop
      NVMCB_Store( ptr, left - next );
#endif
    }

    /* Write the record */
    *ptr = 0x01000000UL | (((uint32_t)type) << 16) | total_size;
 800ed6e:	7bfb      	ldrb	r3, [r7, #15]
 800ed70:	041a      	lsls	r2, r3, #16
 800ed72:	6a3b      	ldr	r3, [r7, #32]
 800ed74:	4313      	orrs	r3, r2
 800ed76:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 800ed7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed7c:	601a      	str	r2, [r3, #0]
    start_ptr = ptr;
 800ed7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed80:	617b      	str	r3, [r7, #20]

    memcpy( ptr + 1, data, size );
 800ed82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed84:	3304      	adds	r3, #4
 800ed86:	89ba      	ldrh	r2, [r7, #12]
 800ed88:	68b9      	ldr	r1, [r7, #8]
 800ed8a:	4618      	mov	r0, r3
 800ed8c:	f020 fb47 	bl	802f41e <memcpy>

    if ( extra_data )
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	2b00      	cmp	r3, #0
 800ed94:	d008      	beq.n	800eda8 <NVM_Add+0x17c>
    {
      memcpy( ((uint8_t*)(ptr + 1)) + size, extra_data, extra_size );
 800ed96:	89bb      	ldrh	r3, [r7, #12]
 800ed98:	3304      	adds	r3, #4
 800ed9a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ed9c:	4413      	add	r3, r2
 800ed9e:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 800eda0:	6879      	ldr	r1, [r7, #4]
 800eda2:	4618      	mov	r0, r3
 800eda4:	f020 fb3b 	bl	802f41e <memcpy>
    }

    /* Set next record as blank */
    ptr += NVM_OFFSET(NVM_SIZE(ptr));
 800eda8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800edaa:	681b      	ldr	r3, [r3, #0]
 800edac:	b29b      	uxth	r3, r3
 800edae:	330b      	adds	r3, #11
 800edb0:	f023 0307 	bic.w	r3, r3, #7
 800edb4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800edb6:	4413      	add	r3, r2
 800edb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *ptr = 0;
 800edba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800edbc:	2200      	movs	r2, #0
 800edbe:	601a      	str	r2, [r3, #0]
#if CFG_NVM_ALIGN != 0
    NVM_size = (ptr - NVM_buffer) / 2;
 800edc0:	4b19      	ldr	r3, [pc, #100]	@ (800ee28 <NVM_Add+0x1fc>)
 800edc2:	681b      	ldr	r3, [r3, #0]
 800edc4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800edc6:	1ad3      	subs	r3, r2, r3
 800edc8:	109b      	asrs	r3, r3, #2
 800edca:	0fda      	lsrs	r2, r3, #31
 800edcc:	4413      	add	r3, r2
 800edce:	105b      	asrs	r3, r3, #1
 800edd0:	b29a      	uxth	r2, r3
 800edd2:	4b17      	ldr	r3, [pc, #92]	@ (800ee30 <NVM_Add+0x204>)
 800edd4:	801a      	strh	r2, [r3, #0]
    NVMCB_Store( start_ptr, NVM_size );
 800edd6:	4b16      	ldr	r3, [pc, #88]	@ (800ee30 <NVM_Add+0x204>)
 800edd8:	881b      	ldrh	r3, [r3, #0]
 800edda:	4619      	mov	r1, r3
 800eddc:	6978      	ldr	r0, [r7, #20]
 800edde:	f7fa f945 	bl	800906c <NVMCB_Store>
#else
    NVMCB_Store( start_ptr, ptr + 1 - start_ptr );
#endif

    /* Update trigger level */
    NVM_trig_level = MIN(NVM_trig_level, NVM_max_size + 1 - offset);
 800ede2:	4b12      	ldr	r3, [pc, #72]	@ (800ee2c <NVM_Add+0x200>)
 800ede4:	881b      	ldrh	r3, [r3, #0]
 800ede6:	461a      	mov	r2, r3
 800ede8:	69fb      	ldr	r3, [r7, #28]
 800edea:	1ad3      	subs	r3, r2, r3
 800edec:	1c5a      	adds	r2, r3, #1
 800edee:	4b11      	ldr	r3, [pc, #68]	@ (800ee34 <NVM_Add+0x208>)
 800edf0:	681b      	ldr	r3, [r3, #0]
 800edf2:	4293      	cmp	r3, r2
 800edf4:	bf28      	it	cs
 800edf6:	4613      	movcs	r3, r2
 800edf8:	4a0e      	ldr	r2, [pc, #56]	@ (800ee34 <NVM_Add+0x208>)
 800edfa:	6013      	str	r3, [r2, #0]

    /* Check amount of NVM used */
    if ( (ptr + 1 - NVM_buffer - removed) > NVM_trig_level )
 800edfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800edfe:	1d1a      	adds	r2, r3, #4
 800ee00:	4b09      	ldr	r3, [pc, #36]	@ (800ee28 <NVM_Add+0x1fc>)
 800ee02:	681b      	ldr	r3, [r3, #0]
 800ee04:	1ad3      	subs	r3, r2, r3
 800ee06:	109b      	asrs	r3, r3, #2
 800ee08:	461a      	mov	r2, r3
 800ee0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee0c:	1ad2      	subs	r2, r2, r3
 800ee0e:	4b09      	ldr	r3, [pc, #36]	@ (800ee34 <NVM_Add+0x208>)
 800ee10:	681b      	ldr	r3, [r3, #0]
 800ee12:	429a      	cmp	r2, r3
 800ee14:	d902      	bls.n	800ee1c <NVM_Add+0x1f0>
    {
      /* Return warning to indicate that NVM is near to be full */
      return NVM_WARN;
 800ee16:	f06f 0303 	mvn.w	r3, #3
 800ee1a:	e000      	b.n	800ee1e <NVM_Add+0x1f2>
    }
  }

  return NVM_OK;
 800ee1c:	2300      	movs	r3, #0
}
 800ee1e:	4618      	mov	r0, r3
 800ee20:	3730      	adds	r7, #48	@ 0x30
 800ee22:	46bd      	mov	sp, r7
 800ee24:	bd80      	pop	{r7, pc}
 800ee26:	bf00      	nop
 800ee28:	20006b18 	.word	0x20006b18
 800ee2c:	20006b26 	.word	0x20006b26
 800ee30:	20006b24 	.word	0x20006b24
 800ee34:	20006b20 	.word	0x20006b20

0800ee38 <NVM_Get>:
int NVM_Get( uint8_t mode,
             uint8_t type,
             uint16_t offset,
             uint8_t* data,
             uint16_t size )
{
 800ee38:	b580      	push	{r7, lr}
 800ee3a:	b086      	sub	sp, #24
 800ee3c:	af00      	add	r7, sp, #0
 800ee3e:	603b      	str	r3, [r7, #0]
 800ee40:	4603      	mov	r3, r0
 800ee42:	71fb      	strb	r3, [r7, #7]
 800ee44:	460b      	mov	r3, r1
 800ee46:	71bb      	strb	r3, [r7, #6]
 800ee48:	4613      	mov	r3, r2
 800ee4a:	80bb      	strh	r3, [r7, #4]
  uint32_t *ptr, next;
  int remain_size, copy_size;

  /* Point at buffer start */
  ptr = NVM_buffer;
 800ee4c:	4b52      	ldr	r3, [pc, #328]	@ (800ef98 <NVM_Get+0x160>)
 800ee4e:	681b      	ldr	r3, [r3, #0]
 800ee50:	617b      	str	r3, [r7, #20]

  if ( mode == NVM_FIRST )
 800ee52:	79fb      	ldrb	r3, [r7, #7]
 800ee54:	2b00      	cmp	r3, #0
 800ee56:	d103      	bne.n	800ee60 <NVM_Get+0x28>
  {
    NVM_offset = 0;
 800ee58:	4b50      	ldr	r3, [pc, #320]	@ (800ef9c <NVM_Get+0x164>)
 800ee5a:	2200      	movs	r2, #0
 800ee5c:	601a      	str	r2, [r3, #0]
 800ee5e:	e013      	b.n	800ee88 <NVM_Get+0x50>
  }
  else
  {
    /* Check current offset */
    if  ( NVM_offset >= NVM_max_size - 1 )
 800ee60:	4b4f      	ldr	r3, [pc, #316]	@ (800efa0 <NVM_Get+0x168>)
 800ee62:	881b      	ldrh	r3, [r3, #0]
 800ee64:	3b01      	subs	r3, #1
 800ee66:	461a      	mov	r2, r3
 800ee68:	4b4c      	ldr	r3, [pc, #304]	@ (800ef9c <NVM_Get+0x164>)
 800ee6a:	681b      	ldr	r3, [r3, #0]
 800ee6c:	429a      	cmp	r2, r3
 800ee6e:	d805      	bhi.n	800ee7c <NVM_Get+0x44>
    {
      NVM_offset = 0;
 800ee70:	4b4a      	ldr	r3, [pc, #296]	@ (800ef9c <NVM_Get+0x164>)
 800ee72:	2200      	movs	r2, #0
 800ee74:	601a      	str	r2, [r3, #0]
      return NVM_EOF;
 800ee76:	f06f 0302 	mvn.w	r3, #2
 800ee7a:	e089      	b.n	800ef90 <NVM_Get+0x158>
    }

    /* Point on the current record */
    ptr += NVM_offset;
 800ee7c:	4b47      	ldr	r3, [pc, #284]	@ (800ef9c <NVM_Get+0x164>)
 800ee7e:	681b      	ldr	r3, [r3, #0]
 800ee80:	009b      	lsls	r3, r3, #2
 800ee82:	697a      	ldr	r2, [r7, #20]
 800ee84:	4413      	add	r3, r2
 800ee86:	617b      	str	r3, [r7, #20]
  }

  if ( mode != NVM_CURRENT )
 800ee88:	79fb      	ldrb	r3, [r7, #7]
 800ee8a:	2b02      	cmp	r3, #2
 800ee8c:	d04a      	beq.n	800ef24 <NVM_Get+0xec>
  {
    if ( mode == NVM_NEXT )
 800ee8e:	79fb      	ldrb	r3, [r7, #7]
 800ee90:	2b01      	cmp	r3, #1
 800ee92:	d137      	bne.n	800ef04 <NVM_Get+0xcc>
    {
      /* Point on the next record */
      next = NVM_OFFSET(NVM_SIZE(ptr));
 800ee94:	697b      	ldr	r3, [r7, #20]
 800ee96:	681b      	ldr	r3, [r3, #0]
 800ee98:	b29b      	uxth	r3, r3
 800ee9a:	330b      	adds	r3, #11
 800ee9c:	08db      	lsrs	r3, r3, #3
 800ee9e:	005b      	lsls	r3, r3, #1
 800eea0:	60fb      	str	r3, [r7, #12]
      ptr += next;
 800eea2:	68fb      	ldr	r3, [r7, #12]
 800eea4:	009b      	lsls	r3, r3, #2
 800eea6:	697a      	ldr	r2, [r7, #20]
 800eea8:	4413      	add	r3, r2
 800eeaa:	617b      	str	r3, [r7, #20]
      NVM_offset += next;
 800eeac:	4b3b      	ldr	r3, [pc, #236]	@ (800ef9c <NVM_Get+0x164>)
 800eeae:	681a      	ldr	r2, [r3, #0]
 800eeb0:	68fb      	ldr	r3, [r7, #12]
 800eeb2:	4413      	add	r3, r2
 800eeb4:	4a39      	ldr	r2, [pc, #228]	@ (800ef9c <NVM_Get+0x164>)
 800eeb6:	6013      	str	r3, [r2, #0]

      if  ( NVM_offset >= NVM_max_size )
 800eeb8:	4b39      	ldr	r3, [pc, #228]	@ (800efa0 <NVM_Get+0x168>)
 800eeba:	881b      	ldrh	r3, [r3, #0]
 800eebc:	461a      	mov	r2, r3
 800eebe:	4b37      	ldr	r3, [pc, #220]	@ (800ef9c <NVM_Get+0x164>)
 800eec0:	681b      	ldr	r3, [r3, #0]
 800eec2:	429a      	cmp	r2, r3
 800eec4:	d81e      	bhi.n	800ef04 <NVM_Get+0xcc>
      {
        /* Return if we exceed buffer size (memory corruption case) */
        return NVM_ERROR;
 800eec6:	f06f 0304 	mvn.w	r3, #4
 800eeca:	e061      	b.n	800ef90 <NVM_Get+0x158>

    /* Search the first next record with matching type */
    while ( !(NVM_BLANK(ptr) || (NVM_VALID(ptr) && (NVM_TYPE(ptr) == type))) )
    {
      /* Point on the next record */
      next = NVM_OFFSET(NVM_SIZE(ptr));
 800eecc:	697b      	ldr	r3, [r7, #20]
 800eece:	681b      	ldr	r3, [r3, #0]
 800eed0:	b29b      	uxth	r3, r3
 800eed2:	330b      	adds	r3, #11
 800eed4:	08db      	lsrs	r3, r3, #3
 800eed6:	005b      	lsls	r3, r3, #1
 800eed8:	60fb      	str	r3, [r7, #12]
      ptr += next;
 800eeda:	68fb      	ldr	r3, [r7, #12]
 800eedc:	009b      	lsls	r3, r3, #2
 800eede:	697a      	ldr	r2, [r7, #20]
 800eee0:	4413      	add	r3, r2
 800eee2:	617b      	str	r3, [r7, #20]
      NVM_offset += next;
 800eee4:	4b2d      	ldr	r3, [pc, #180]	@ (800ef9c <NVM_Get+0x164>)
 800eee6:	681a      	ldr	r2, [r3, #0]
 800eee8:	68fb      	ldr	r3, [r7, #12]
 800eeea:	4413      	add	r3, r2
 800eeec:	4a2b      	ldr	r2, [pc, #172]	@ (800ef9c <NVM_Get+0x164>)
 800eeee:	6013      	str	r3, [r2, #0]

      if  ( NVM_offset >= NVM_max_size )
 800eef0:	4b2b      	ldr	r3, [pc, #172]	@ (800efa0 <NVM_Get+0x168>)
 800eef2:	881b      	ldrh	r3, [r3, #0]
 800eef4:	461a      	mov	r2, r3
 800eef6:	4b29      	ldr	r3, [pc, #164]	@ (800ef9c <NVM_Get+0x164>)
 800eef8:	681b      	ldr	r3, [r3, #0]
 800eefa:	429a      	cmp	r2, r3
 800eefc:	d802      	bhi.n	800ef04 <NVM_Get+0xcc>
      {
        /* Return if we exceed buffer size (memory corruption case) */
       return NVM_ERROR;
 800eefe:	f06f 0304 	mvn.w	r3, #4
 800ef02:	e045      	b.n	800ef90 <NVM_Get+0x158>
    while ( !(NVM_BLANK(ptr) || (NVM_VALID(ptr) && (NVM_TYPE(ptr) == type))) )
 800ef04:	697b      	ldr	r3, [r7, #20]
 800ef06:	681b      	ldr	r3, [r3, #0]
 800ef08:	2b00      	cmp	r3, #0
 800ef0a:	d00b      	beq.n	800ef24 <NVM_Get+0xec>
 800ef0c:	697b      	ldr	r3, [r7, #20]
 800ef0e:	681b      	ldr	r3, [r3, #0]
 800ef10:	0e1b      	lsrs	r3, r3, #24
 800ef12:	2b00      	cmp	r3, #0
 800ef14:	d0da      	beq.n	800eecc <NVM_Get+0x94>
 800ef16:	697b      	ldr	r3, [r7, #20]
 800ef18:	681b      	ldr	r3, [r3, #0]
 800ef1a:	0c1b      	lsrs	r3, r3, #16
 800ef1c:	b2da      	uxtb	r2, r3
 800ef1e:	79bb      	ldrb	r3, [r7, #6]
 800ef20:	429a      	cmp	r2, r3
 800ef22:	d1d3      	bne.n	800eecc <NVM_Get+0x94>
      }
    }
  }

  if ( NVM_BLANK(ptr) )
 800ef24:	697b      	ldr	r3, [r7, #20]
 800ef26:	681b      	ldr	r3, [r3, #0]
 800ef28:	2b00      	cmp	r3, #0
 800ef2a:	d102      	bne.n	800ef32 <NVM_Get+0xfa>
  {
    /* Return if we have reached the end of data in the buffer */
    return NVM_EOF;
 800ef2c:	f06f 0302 	mvn.w	r3, #2
 800ef30:	e02e      	b.n	800ef90 <NVM_Get+0x158>
  }

  if ( !(NVM_VALID(ptr) && (NVM_TYPE(ptr) == type)) )
 800ef32:	697b      	ldr	r3, [r7, #20]
 800ef34:	681b      	ldr	r3, [r3, #0]
 800ef36:	0e1b      	lsrs	r3, r3, #24
 800ef38:	2b00      	cmp	r3, #0
 800ef3a:	d006      	beq.n	800ef4a <NVM_Get+0x112>
 800ef3c:	697b      	ldr	r3, [r7, #20]
 800ef3e:	681b      	ldr	r3, [r3, #0]
 800ef40:	0c1b      	lsrs	r3, r3, #16
 800ef42:	b2da      	uxtb	r2, r3
 800ef44:	79bb      	ldrb	r3, [r7, #6]
 800ef46:	429a      	cmp	r2, r3
 800ef48:	d002      	beq.n	800ef50 <NVM_Get+0x118>
  {
    /* Return if the record is not valid (memory corruption case) */
    return NVM_ERROR;
 800ef4a:	f06f 0304 	mvn.w	r3, #4
 800ef4e:	e01f      	b.n	800ef90 <NVM_Get+0x158>
  }

  /* Compute the record remaining size (after the offset) */
  remain_size = (int)NVM_SIZE(ptr) - (int)offset;
 800ef50:	697b      	ldr	r3, [r7, #20]
 800ef52:	681b      	ldr	r3, [r3, #0]
 800ef54:	b29a      	uxth	r2, r3
 800ef56:	88bb      	ldrh	r3, [r7, #4]
 800ef58:	1ad3      	subs	r3, r2, r3
 800ef5a:	60bb      	str	r3, [r7, #8]

  /* Compute the number of bytes to copy */
  copy_size = 0;
 800ef5c:	2300      	movs	r3, #0
 800ef5e:	613b      	str	r3, [r7, #16]

  if ( remain_size > 0 )
 800ef60:	68bb      	ldr	r3, [r7, #8]
 800ef62:	2b00      	cmp	r3, #0
 800ef64:	dd13      	ble.n	800ef8e <NVM_Get+0x156>
  {
    copy_size = (int)size;
 800ef66:	8c3b      	ldrh	r3, [r7, #32]
 800ef68:	613b      	str	r3, [r7, #16]

    if ( remain_size < copy_size )
 800ef6a:	68ba      	ldr	r2, [r7, #8]
 800ef6c:	693b      	ldr	r3, [r7, #16]
 800ef6e:	429a      	cmp	r2, r3
 800ef70:	da01      	bge.n	800ef76 <NVM_Get+0x13e>
    {
      copy_size = remain_size;
 800ef72:	68bb      	ldr	r3, [r7, #8]
 800ef74:	613b      	str	r3, [r7, #16]
    }

    /* Retrieve the record data */
    if ( data )
 800ef76:	683b      	ldr	r3, [r7, #0]
 800ef78:	2b00      	cmp	r3, #0
 800ef7a:	d008      	beq.n	800ef8e <NVM_Get+0x156>
    {
      memcpy( data, ((uint8_t*)ptr) + 4 + offset, copy_size );
 800ef7c:	88bb      	ldrh	r3, [r7, #4]
 800ef7e:	3304      	adds	r3, #4
 800ef80:	697a      	ldr	r2, [r7, #20]
 800ef82:	4413      	add	r3, r2
 800ef84:	693a      	ldr	r2, [r7, #16]
 800ef86:	4619      	mov	r1, r3
 800ef88:	6838      	ldr	r0, [r7, #0]
 800ef8a:	f020 fa48 	bl	802f41e <memcpy>
    }
  }

  /* Return the number of bytes copied */
  return copy_size;
 800ef8e:	693b      	ldr	r3, [r7, #16]
}
 800ef90:	4618      	mov	r0, r3
 800ef92:	3718      	adds	r7, #24
 800ef94:	46bd      	mov	sp, r7
 800ef96:	bd80      	pop	{r7, pc}
 800ef98:	20006b18 	.word	0x20006b18
 800ef9c:	20006b1c 	.word	0x20006b1c
 800efa0:	20006b26 	.word	0x20006b26

0800efa4 <NVM_Compare>:
/*****************************************************************************/

int NVM_Compare( uint16_t offset,
                 const uint8_t* data,
                 uint16_t size )
{
 800efa4:	b580      	push	{r7, lr}
 800efa6:	b084      	sub	sp, #16
 800efa8:	af00      	add	r7, sp, #0
 800efaa:	4603      	mov	r3, r0
 800efac:	6039      	str	r1, [r7, #0]
 800efae:	80fb      	strh	r3, [r7, #6]
 800efb0:	4613      	mov	r3, r2
 800efb2:	80bb      	strh	r3, [r7, #4]
  uint32_t *ptr;
  int remain_size;

  /* Point on the current record */
  ptr = NVM_buffer + NVM_offset;
 800efb4:	4b19      	ldr	r3, [pc, #100]	@ (800f01c <NVM_Compare+0x78>)
 800efb6:	681a      	ldr	r2, [r3, #0]
 800efb8:	4b19      	ldr	r3, [pc, #100]	@ (800f020 <NVM_Compare+0x7c>)
 800efba:	681b      	ldr	r3, [r3, #0]
 800efbc:	009b      	lsls	r3, r3, #2
 800efbe:	4413      	add	r3, r2
 800efc0:	60fb      	str	r3, [r7, #12]

  /* Check current position in the database */
  if  ( (NVM_offset >= NVM_max_size - 1) || NVM_BLANK(ptr) )
 800efc2:	4b18      	ldr	r3, [pc, #96]	@ (800f024 <NVM_Compare+0x80>)
 800efc4:	881b      	ldrh	r3, [r3, #0]
 800efc6:	3b01      	subs	r3, #1
 800efc8:	461a      	mov	r2, r3
 800efca:	4b15      	ldr	r3, [pc, #84]	@ (800f020 <NVM_Compare+0x7c>)
 800efcc:	681b      	ldr	r3, [r3, #0]
 800efce:	429a      	cmp	r2, r3
 800efd0:	d903      	bls.n	800efda <NVM_Compare+0x36>
 800efd2:	68fb      	ldr	r3, [r7, #12]
 800efd4:	681b      	ldr	r3, [r3, #0]
 800efd6:	2b00      	cmp	r3, #0
 800efd8:	d102      	bne.n	800efe0 <NVM_Compare+0x3c>
  {
    /* Return if we have reached the end of data in the buffer */
    return NVM_EOF;
 800efda:	f06f 0302 	mvn.w	r3, #2
 800efde:	e018      	b.n	800f012 <NVM_Compare+0x6e>
  }

  /* Compute the record remaining size (after the offset) */
  remain_size = NVM_SIZE(ptr) - (int)offset;
 800efe0:	68fb      	ldr	r3, [r7, #12]
 800efe2:	681b      	ldr	r3, [r3, #0]
 800efe4:	b29a      	uxth	r2, r3
 800efe6:	88fb      	ldrh	r3, [r7, #6]
 800efe8:	1ad3      	subs	r3, r2, r3
 800efea:	60bb      	str	r3, [r7, #8]

  if ( (size > remain_size) ||
 800efec:	88bb      	ldrh	r3, [r7, #4]
 800efee:	68ba      	ldr	r2, [r7, #8]
 800eff0:	429a      	cmp	r2, r3
 800eff2:	db0b      	blt.n	800f00c <NVM_Compare+0x68>
       (memcmp( data, ((uint8_t*)ptr) + 4 + offset, size ) != 0) )
 800eff4:	88fb      	ldrh	r3, [r7, #6]
 800eff6:	3304      	adds	r3, #4
 800eff8:	68fa      	ldr	r2, [r7, #12]
 800effa:	4413      	add	r3, r2
 800effc:	88ba      	ldrh	r2, [r7, #4]
 800effe:	4619      	mov	r1, r3
 800f000:	6838      	ldr	r0, [r7, #0]
 800f002:	f020 f9ab 	bl	802f35c <memcmp>
 800f006:	4603      	mov	r3, r0
  if ( (size > remain_size) ||
 800f008:	2b00      	cmp	r3, #0
 800f00a:	d001      	beq.n	800f010 <NVM_Compare+0x6c>
  {
    return (int)size;
 800f00c:	88bb      	ldrh	r3, [r7, #4]
 800f00e:	e000      	b.n	800f012 <NVM_Compare+0x6e>
  }

  return NVM_OK;
 800f010:	2300      	movs	r3, #0
}
 800f012:	4618      	mov	r0, r3
 800f014:	3710      	adds	r7, #16
 800f016:	46bd      	mov	sp, r7
 800f018:	bd80      	pop	{r7, pc}
 800f01a:	bf00      	nop
 800f01c:	20006b18 	.word	0x20006b18
 800f020:	20006b1c 	.word	0x20006b1c
 800f024:	20006b26 	.word	0x20006b26

0800f028 <NVM_Discard>:

/*****************************************************************************/

void NVM_Discard( uint8_t mode )
{
 800f028:	b580      	push	{r7, lr}
 800f02a:	b086      	sub	sp, #24
 800f02c:	af00      	add	r7, sp, #0
 800f02e:	4603      	mov	r3, r0
 800f030:	71fb      	strb	r3, [r7, #7]
  uint32_t *ptr, *ptr_next, next, size;

  ptr = NVM_buffer;
 800f032:	4b3a      	ldr	r3, [pc, #232]	@ (800f11c <NVM_Discard+0xf4>)
 800f034:	681b      	ldr	r3, [r3, #0]
 800f036:	617b      	str	r3, [r7, #20]

  if ( mode == NVM_CURRENT )
 800f038:	79fb      	ldrb	r3, [r7, #7]
 800f03a:	2b02      	cmp	r3, #2
 800f03c:	d15a      	bne.n	800f0f4 <NVM_Discard+0xcc>
  {
    /* Check current offset */
    if  ( NVM_offset >= NVM_max_size - 1 )
 800f03e:	4b38      	ldr	r3, [pc, #224]	@ (800f120 <NVM_Discard+0xf8>)
 800f040:	881b      	ldrh	r3, [r3, #0]
 800f042:	3b01      	subs	r3, #1
 800f044:	461a      	mov	r2, r3
 800f046:	4b37      	ldr	r3, [pc, #220]	@ (800f124 <NVM_Discard+0xfc>)
 800f048:	681b      	ldr	r3, [r3, #0]
 800f04a:	429a      	cmp	r2, r3
 800f04c:	d803      	bhi.n	800f056 <NVM_Discard+0x2e>
    {
      NVM_offset = 0;
 800f04e:	4b35      	ldr	r3, [pc, #212]	@ (800f124 <NVM_Discard+0xfc>)
 800f050:	2200      	movs	r2, #0
 800f052:	601a      	str	r2, [r3, #0]
      return;
 800f054:	e05f      	b.n	800f116 <NVM_Discard+0xee>
    }

    /* Point on the current record */
    ptr += NVM_offset;
 800f056:	4b33      	ldr	r3, [pc, #204]	@ (800f124 <NVM_Discard+0xfc>)
 800f058:	681b      	ldr	r3, [r3, #0]
 800f05a:	009b      	lsls	r3, r3, #2
 800f05c:	697a      	ldr	r2, [r7, #20]
 800f05e:	4413      	add	r3, r2
 800f060:	617b      	str	r3, [r7, #20]

    if ( !NVM_BLANK(ptr) )
 800f062:	697b      	ldr	r3, [r7, #20]
 800f064:	681b      	ldr	r3, [r3, #0]
 800f066:	2b00      	cmp	r3, #0
 800f068:	d04d      	beq.n	800f106 <NVM_Discard+0xde>
    {
      /* Point on the next record */
      next = NVM_OFFSET(NVM_SIZE(ptr));
 800f06a:	697b      	ldr	r3, [r7, #20]
 800f06c:	681b      	ldr	r3, [r3, #0]
 800f06e:	b29b      	uxth	r3, r3
 800f070:	330b      	adds	r3, #11
 800f072:	08db      	lsrs	r3, r3, #3
 800f074:	005b      	lsls	r3, r3, #1
 800f076:	60fb      	str	r3, [r7, #12]
      ptr_next = ptr + next;
 800f078:	68fb      	ldr	r3, [r7, #12]
 800f07a:	009b      	lsls	r3, r3, #2
 800f07c:	697a      	ldr	r2, [r7, #20]
 800f07e:	4413      	add	r3, r2
 800f080:	60bb      	str	r3, [r7, #8]

      if  ( (NVM_offset + next) >= NVM_max_size )
 800f082:	4b28      	ldr	r3, [pc, #160]	@ (800f124 <NVM_Discard+0xfc>)
 800f084:	681a      	ldr	r2, [r3, #0]
 800f086:	68fb      	ldr	r3, [r7, #12]
 800f088:	4413      	add	r3, r2
 800f08a:	4a25      	ldr	r2, [pc, #148]	@ (800f120 <NVM_Discard+0xf8>)
 800f08c:	8812      	ldrh	r2, [r2, #0]
 800f08e:	4293      	cmp	r3, r2
 800f090:	d240      	bcs.n	800f114 <NVM_Discard+0xec>
      {
        /* Return if we exceed buffer size (memory corruption case) */
        return;
      }

      if ( NVM_BLANK(ptr_next) )
 800f092:	68bb      	ldr	r3, [r7, #8]
 800f094:	681b      	ldr	r3, [r3, #0]
 800f096:	2b00      	cmp	r3, #0
 800f098:	d10e      	bne.n	800f0b8 <NVM_Discard+0x90>
      {
        /* Set current record as blank if next record is blank. */
        *ptr = 0;
 800f09a:	697b      	ldr	r3, [r7, #20]
 800f09c:	2200      	movs	r2, #0
 800f09e:	601a      	str	r2, [r3, #0]

#if CFG_NVM_ALIGN != 0
        NVM_size = (ptr - NVM_buffer) / 2;
 800f0a0:	4b1e      	ldr	r3, [pc, #120]	@ (800f11c <NVM_Discard+0xf4>)
 800f0a2:	681b      	ldr	r3, [r3, #0]
 800f0a4:	697a      	ldr	r2, [r7, #20]
 800f0a6:	1ad3      	subs	r3, r2, r3
 800f0a8:	109b      	asrs	r3, r3, #2
 800f0aa:	0fda      	lsrs	r2, r3, #31
 800f0ac:	4413      	add	r3, r2
 800f0ae:	105b      	asrs	r3, r3, #1
 800f0b0:	b29a      	uxth	r2, r3
 800f0b2:	4b1d      	ldr	r3, [pc, #116]	@ (800f128 <NVM_Discard+0x100>)
 800f0b4:	801a      	strh	r2, [r3, #0]
 800f0b6:	e026      	b.n	800f106 <NVM_Discard+0xde>
#endif
      }
      else
      {
        size = NVM_SIZE(ptr);
 800f0b8:	697b      	ldr	r3, [r7, #20]
 800f0ba:	681b      	ldr	r3, [r3, #0]
 800f0bc:	b29b      	uxth	r3, r3
 800f0be:	613b      	str	r3, [r7, #16]

        if ( !NVM_VALID(ptr_next) )
 800f0c0:	68bb      	ldr	r3, [r7, #8]
 800f0c2:	681b      	ldr	r3, [r3, #0]
 800f0c4:	0e1b      	lsrs	r3, r3, #24
 800f0c6:	2b00      	cmp	r3, #0
 800f0c8:	d110      	bne.n	800f0ec <NVM_Discard+0xc4>
        {
          next += NVM_OFFSET(NVM_SIZE(ptr_next));
 800f0ca:	68bb      	ldr	r3, [r7, #8]
 800f0cc:	681b      	ldr	r3, [r3, #0]
 800f0ce:	b29b      	uxth	r3, r3
 800f0d0:	330b      	adds	r3, #11
 800f0d2:	08db      	lsrs	r3, r3, #3
 800f0d4:	005b      	lsls	r3, r3, #1
 800f0d6:	68fa      	ldr	r2, [r7, #12]
 800f0d8:	4413      	add	r3, r2
 800f0da:	60fb      	str	r3, [r7, #12]

          if ( next <= 0x4000UL )
 800f0dc:	68fb      	ldr	r3, [r7, #12]
 800f0de:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800f0e2:	d803      	bhi.n	800f0ec <NVM_Discard+0xc4>
          {
            /* Update size of current record if next record is invalid. */
            size = (next - 1) * 4;
 800f0e4:	68fb      	ldr	r3, [r7, #12]
 800f0e6:	3b01      	subs	r3, #1
 800f0e8:	009b      	lsls	r3, r3, #2
 800f0ea:	613b      	str	r3, [r7, #16]
          }
        }

        /* Invalidate the current record */
        *ptr = size;
 800f0ec:	697b      	ldr	r3, [r7, #20]
 800f0ee:	693a      	ldr	r2, [r7, #16]
 800f0f0:	601a      	str	r2, [r3, #0]
 800f0f2:	e008      	b.n	800f106 <NVM_Discard+0xde>
      }
    }
  }
  else if ( mode == NVM_ALL )
 800f0f4:	79fb      	ldrb	r3, [r7, #7]
 800f0f6:	2b03      	cmp	r3, #3
 800f0f8:	d105      	bne.n	800f106 <NVM_Discard+0xde>
  {
    /* Set initial record as blank */
    *ptr = 0;
 800f0fa:	697b      	ldr	r3, [r7, #20]
 800f0fc:	2200      	movs	r2, #0
 800f0fe:	601a      	str	r2, [r3, #0]

#if CFG_NVM_ALIGN != 0
    NVM_size = 0;
 800f100:	4b09      	ldr	r3, [pc, #36]	@ (800f128 <NVM_Discard+0x100>)
 800f102:	2200      	movs	r2, #0
 800f104:	801a      	strh	r2, [r3, #0]
#endif
  }

#if CFG_NVM_ALIGN != 0
  NVMCB_Store( ptr, NVM_size );
 800f106:	4b08      	ldr	r3, [pc, #32]	@ (800f128 <NVM_Discard+0x100>)
 800f108:	881b      	ldrh	r3, [r3, #0]
 800f10a:	4619      	mov	r1, r3
 800f10c:	6978      	ldr	r0, [r7, #20]
 800f10e:	f7f9 ffad 	bl	800906c <NVMCB_Store>
 800f112:	e000      	b.n	800f116 <NVM_Discard+0xee>
        return;
 800f114:	bf00      	nop
#else
  NVMCB_Store( ptr, 1 );
#endif
}
 800f116:	3718      	adds	r7, #24
 800f118:	46bd      	mov	sp, r7
 800f11a:	bd80      	pop	{r7, pc}
 800f11c:	20006b18 	.word	0x20006b18
 800f120:	20006b26 	.word	0x20006b26
 800f124:	20006b1c 	.word	0x20006b1c
 800f128:	20006b24 	.word	0x20006b24

0800f12c <SYSTEM_DEBUG_SIGNAL_SET>:
/***********************/
/** System debug APIs **/
/***********************/

void SYSTEM_DEBUG_SIGNAL_SET(system_debug_signal_t signal)
{
 800f12c:	b480      	push	{r7}
 800f12e:	b083      	sub	sp, #12
 800f130:	af00      	add	r7, sp, #0
 800f132:	4603      	mov	r3, r0
 800f134:	71fb      	strb	r3, [r7, #7]
#if(CFG_RT_DEBUG_GPIO_MODULE == 1)
  GENERIC_DEBUG_GPIO_SET(signal, system_debug_table);
#endif /* CFG_RT_DEBUG_GPIO_MODULE */
}
 800f136:	bf00      	nop
 800f138:	370c      	adds	r7, #12
 800f13a:	46bd      	mov	sp, r7
 800f13c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f140:	4770      	bx	lr

0800f142 <SYSTEM_DEBUG_SIGNAL_RESET>:

void SYSTEM_DEBUG_SIGNAL_RESET(system_debug_signal_t signal)
{
 800f142:	b480      	push	{r7}
 800f144:	b083      	sub	sp, #12
 800f146:	af00      	add	r7, sp, #0
 800f148:	4603      	mov	r3, r0
 800f14a:	71fb      	strb	r3, [r7, #7]
#if(CFG_RT_DEBUG_GPIO_MODULE == 1)
  GENERIC_DEBUG_GPIO_RESET(signal, system_debug_table);
#endif /* CFG_RT_DEBUG_GPIO_MODULE */
}
 800f14c:	bf00      	nop
 800f14e:	370c      	adds	r7, #12
 800f150:	46bd      	mov	sp, r7
 800f152:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f156:	4770      	bx	lr

0800f158 <LINKLAYER_DEBUG_SIGNAL_SET>:
/** Link Layer debug APIs **/
/***************************/

/* Link Layer debug API definition */
void LINKLAYER_DEBUG_SIGNAL_SET(linklayer_debug_signal_t signal)
{
 800f158:	b480      	push	{r7}
 800f15a:	b083      	sub	sp, #12
 800f15c:	af00      	add	r7, sp, #0
 800f15e:	4603      	mov	r3, r0
 800f160:	71fb      	strb	r3, [r7, #7]
#if(CFG_RT_DEBUG_GPIO_MODULE == 1)
  GENERIC_DEBUG_GPIO_SET(signal, linklayer_debug_table);
#endif /* CFG_RT_DEBUG_GPIO_MODULE */
}
 800f162:	bf00      	nop
 800f164:	370c      	adds	r7, #12
 800f166:	46bd      	mov	sp, r7
 800f168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f16c:	4770      	bx	lr

0800f16e <LINKLAYER_DEBUG_SIGNAL_RESET>:

void LINKLAYER_DEBUG_SIGNAL_RESET(linklayer_debug_signal_t signal)
{
 800f16e:	b480      	push	{r7}
 800f170:	b083      	sub	sp, #12
 800f172:	af00      	add	r7, sp, #0
 800f174:	4603      	mov	r3, r0
 800f176:	71fb      	strb	r3, [r7, #7]
#if(CFG_RT_DEBUG_GPIO_MODULE == 1)
   GENERIC_DEBUG_GPIO_RESET(signal, linklayer_debug_table);
#endif /* CFG_RT_DEBUG_GPIO_MODULE */
}
 800f178:	bf00      	nop
 800f17a:	370c      	adds	r7, #12
 800f17c:	46bd      	mov	sp, r7
 800f17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f182:	4770      	bx	lr

0800f184 <LINKLAYER_DEBUG_SIGNAL_TOGGLE>:

void LINKLAYER_DEBUG_SIGNAL_TOGGLE(linklayer_debug_signal_t signal)
{
 800f184:	b480      	push	{r7}
 800f186:	b083      	sub	sp, #12
 800f188:	af00      	add	r7, sp, #0
 800f18a:	4603      	mov	r3, r0
 800f18c:	71fb      	strb	r3, [r7, #7]
#if(CFG_RT_DEBUG_GPIO_MODULE == 1)
  GENERIC_DEBUG_GPIO_TOGGLE(signal, linklayer_debug_table);
#endif /* CFG_RT_DEBUG_GPIO_MODULE */
}
 800f18e:	bf00      	nop
 800f190:	370c      	adds	r7, #12
 800f192:	46bd      	mov	sp, r7
 800f194:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f198:	4770      	bx	lr
	...

0800f19c <BLE_TIMER_Init>:
void BLE_TIMER_Background(void);
static void BLE_TIMER_Callback(void* arg);
static BLE_TIMER_t* BLE_TIMER_GetFromList(tListNode * listHead, uint16_t id);

void BLE_TIMER_Init(void)
{
 800f19c:	b580      	push	{r7, lr}
 800f19e:	af00      	add	r7, sp, #0
  /* This function initializes the timer Queue */
  LST_init_head(&BLE_TIMER_List);
 800f1a0:	4805      	ldr	r0, [pc, #20]	@ (800f1b8 <BLE_TIMER_Init+0x1c>)
 800f1a2:	f000 ff63 	bl	801006c <LST_init_head>

  /* Register Timer background task */
  UTIL_SEQ_RegTask(1U << CFG_TASK_BLE_TIMER_BCKGND, UTIL_SEQ_RFU, BLE_TIMER_Background);
 800f1a6:	4a05      	ldr	r2, [pc, #20]	@ (800f1bc <BLE_TIMER_Init+0x20>)
 800f1a8:	2100      	movs	r1, #0
 800f1aa:	2080      	movs	r0, #128	@ 0x80
 800f1ac:	f001 fb6c 	bl	8010888 <UTIL_SEQ_RegTask>

  /* Initialize the Timer Server */
  UTIL_TIMER_Init();
 800f1b0:	f001 fc10 	bl	80109d4 <UTIL_TIMER_Init>
}
 800f1b4:	bf00      	nop
 800f1b6:	bd80      	pop	{r7, pc}
 800f1b8:	20006b28 	.word	0x20006b28
 800f1bc:	0800f2a5 	.word	0x0800f2a5

0800f1c0 <BLE_TIMER_Start>:

uint8_t BLE_TIMER_Start(uint16_t id, uint32_t timeout)
{
 800f1c0:	b580      	push	{r7, lr}
 800f1c2:	b086      	sub	sp, #24
 800f1c4:	af02      	add	r7, sp, #8
 800f1c6:	4603      	mov	r3, r0
 800f1c8:	6039      	str	r1, [r7, #0]
 800f1ca:	80fb      	strh	r3, [r7, #6]
  /* If the timer's id already exists, stop it */
  BLE_TIMER_Stop(id);
 800f1cc:	88fb      	ldrh	r3, [r7, #6]
 800f1ce:	4618      	mov	r0, r3
 800f1d0:	f000 f848 	bl	800f264 <BLE_TIMER_Stop>

  /* Create a new timer instance and add it to the list */
  BLE_TIMER_t *timer = NULL;
 800f1d4:	2300      	movs	r3, #0
 800f1d6:	60fb      	str	r3, [r7, #12]

  if(AMM_ERROR_OK != AMM_Alloc (CFG_AMM_VIRTUAL_STACK_BLE,
 800f1d8:	f107 020c 	add.w	r2, r7, #12
 800f1dc:	2300      	movs	r3, #0
 800f1de:	2109      	movs	r1, #9
 800f1e0:	2001      	movs	r0, #1
 800f1e2:	f7ff f8d7 	bl	800e394 <AMM_Alloc>
 800f1e6:	4603      	mov	r3, r0
 800f1e8:	2b00      	cmp	r3, #0
 800f1ea:	d001      	beq.n	800f1f0 <BLE_TIMER_Start+0x30>
                                DIVC(sizeof(BLE_TIMER_t), sizeof(uint32_t)),
                                (uint32_t **)&timer,
                                NULL))
  {
    return BLE_STATUS_INSUFFICIENT_RESOURCES;
 800f1ec:	2364      	movs	r3, #100	@ 0x64
 800f1ee:	e031      	b.n	800f254 <BLE_TIMER_Start+0x94>
  }

  timer->id = id;
 800f1f0:	68fb      	ldr	r3, [r7, #12]
 800f1f2:	88fa      	ldrh	r2, [r7, #6]
 800f1f4:	811a      	strh	r2, [r3, #8]
  LST_insert_tail(&BLE_TIMER_List, (tListNode *)timer);
 800f1f6:	68fb      	ldr	r3, [r7, #12]
 800f1f8:	4619      	mov	r1, r3
 800f1fa:	4818      	ldr	r0, [pc, #96]	@ (800f25c <BLE_TIMER_Start+0x9c>)
 800f1fc:	f000 ff8e 	bl	801011c <LST_insert_tail>

  if(UTIL_TIMER_Create(&timer->timerObject, timeout, UTIL_TIMER_ONESHOT, &BLE_TIMER_Callback, timer) != UTIL_TIMER_OK)
 800f200:	68fb      	ldr	r3, [r7, #12]
 800f202:	f103 000c 	add.w	r0, r3, #12
 800f206:	68fb      	ldr	r3, [r7, #12]
 800f208:	9300      	str	r3, [sp, #0]
 800f20a:	4b15      	ldr	r3, [pc, #84]	@ (800f260 <BLE_TIMER_Start+0xa0>)
 800f20c:	2200      	movs	r2, #0
 800f20e:	6839      	ldr	r1, [r7, #0]
 800f210:	f001 fbf0 	bl	80109f4 <UTIL_TIMER_Create>
 800f214:	4603      	mov	r3, r0
 800f216:	2b00      	cmp	r3, #0
 800f218:	d009      	beq.n	800f22e <BLE_TIMER_Start+0x6e>
  {
    LST_remove_node ((tListNode *)timer);
 800f21a:	68fb      	ldr	r3, [r7, #12]
 800f21c:	4618      	mov	r0, r3
 800f21e:	f000 ffa3 	bl	8010168 <LST_remove_node>
    (void)AMM_Free((uint32_t *)timer);
 800f222:	68fb      	ldr	r3, [r7, #12]
 800f224:	4618      	mov	r0, r3
 800f226:	f7ff f9f3 	bl	800e610 <AMM_Free>
    return BLE_STATUS_FAILED;
 800f22a:	2391      	movs	r3, #145	@ 0x91
 800f22c:	e012      	b.n	800f254 <BLE_TIMER_Start+0x94>
  }

  if(UTIL_TIMER_Start(&timer->timerObject) != UTIL_TIMER_OK)
 800f22e:	68fb      	ldr	r3, [r7, #12]
 800f230:	330c      	adds	r3, #12
 800f232:	4618      	mov	r0, r3
 800f234:	f001 fc14 	bl	8010a60 <UTIL_TIMER_Start>
 800f238:	4603      	mov	r3, r0
 800f23a:	2b00      	cmp	r3, #0
 800f23c:	d009      	beq.n	800f252 <BLE_TIMER_Start+0x92>
  {
    LST_remove_node ((tListNode *)timer);
 800f23e:	68fb      	ldr	r3, [r7, #12]
 800f240:	4618      	mov	r0, r3
 800f242:	f000 ff91 	bl	8010168 <LST_remove_node>
    (void)AMM_Free((uint32_t *)timer);
 800f246:	68fb      	ldr	r3, [r7, #12]
 800f248:	4618      	mov	r0, r3
 800f24a:	f7ff f9e1 	bl	800e610 <AMM_Free>
    return BLE_STATUS_FAILED;
 800f24e:	2391      	movs	r3, #145	@ 0x91
 800f250:	e000      	b.n	800f254 <BLE_TIMER_Start+0x94>
  }

  return BLE_STATUS_SUCCESS;
 800f252:	2300      	movs	r3, #0
}
 800f254:	4618      	mov	r0, r3
 800f256:	3710      	adds	r7, #16
 800f258:	46bd      	mov	sp, r7
 800f25a:	bd80      	pop	{r7, pc}
 800f25c:	20006b28 	.word	0x20006b28
 800f260:	0800f2d5 	.word	0x0800f2d5

0800f264 <BLE_TIMER_Stop>:

void BLE_TIMER_Stop(uint16_t id){
 800f264:	b580      	push	{r7, lr}
 800f266:	b084      	sub	sp, #16
 800f268:	af00      	add	r7, sp, #0
 800f26a:	4603      	mov	r3, r0
 800f26c:	80fb      	strh	r3, [r7, #6]
  /* Search for the id in the timers list */
  BLE_TIMER_t* timer = BLE_TIMER_GetFromList(&BLE_TIMER_List, id);
 800f26e:	88fb      	ldrh	r3, [r7, #6]
 800f270:	4619      	mov	r1, r3
 800f272:	480b      	ldr	r0, [pc, #44]	@ (800f2a0 <BLE_TIMER_Stop+0x3c>)
 800f274:	f000 f840 	bl	800f2f8 <BLE_TIMER_GetFromList>
 800f278:	60f8      	str	r0, [r7, #12]

  /* If the timer's id exists, stop it */
  if(NULL != timer)
 800f27a:	68fb      	ldr	r3, [r7, #12]
 800f27c:	2b00      	cmp	r3, #0
 800f27e:	d00a      	beq.n	800f296 <BLE_TIMER_Stop+0x32>
  {
    UTIL_TIMER_Stop(&timer->timerObject);
 800f280:	68fb      	ldr	r3, [r7, #12]
 800f282:	330c      	adds	r3, #12
 800f284:	4618      	mov	r0, r3
 800f286:	f001 fc59 	bl	8010b3c <UTIL_TIMER_Stop>
    LST_remove_node((tListNode *)timer);
 800f28a:	68f8      	ldr	r0, [r7, #12]
 800f28c:	f000 ff6c 	bl	8010168 <LST_remove_node>

    (void)AMM_Free((uint32_t *)timer);
 800f290:	68f8      	ldr	r0, [r7, #12]
 800f292:	f7ff f9bd 	bl	800e610 <AMM_Free>
  }
}
 800f296:	bf00      	nop
 800f298:	3710      	adds	r7, #16
 800f29a:	46bd      	mov	sp, r7
 800f29c:	bd80      	pop	{r7, pc}
 800f29e:	bf00      	nop
 800f2a0:	20006b28 	.word	0x20006b28

0800f2a4 <BLE_TIMER_Background>:

void BLE_TIMER_Background(void)
{
 800f2a4:	b580      	push	{r7, lr}
 800f2a6:	af00      	add	r7, sp, #0
  BLEPLATCB_TimerExpiry( (uint16_t)BLE_TIMER_timer->id);
 800f2a8:	4b09      	ldr	r3, [pc, #36]	@ (800f2d0 <BLE_TIMER_Background+0x2c>)
 800f2aa:	681b      	ldr	r3, [r3, #0]
 800f2ac:	891b      	ldrh	r3, [r3, #8]
 800f2ae:	4618      	mov	r0, r3
 800f2b0:	f017 ffaa 	bl	8027208 <BLEPLATCB_TimerExpiry>
  HostStack_Process( );
 800f2b4:	f7fa fd01 	bl	8009cba <HostStack_Process>

  /* Delete the BLE_TIMER_timer from the list */
  LST_remove_node((tListNode *)BLE_TIMER_timer);
 800f2b8:	4b05      	ldr	r3, [pc, #20]	@ (800f2d0 <BLE_TIMER_Background+0x2c>)
 800f2ba:	681b      	ldr	r3, [r3, #0]
 800f2bc:	4618      	mov	r0, r3
 800f2be:	f000 ff53 	bl	8010168 <LST_remove_node>

  (void)AMM_Free((uint32_t *)BLE_TIMER_timer);
 800f2c2:	4b03      	ldr	r3, [pc, #12]	@ (800f2d0 <BLE_TIMER_Background+0x2c>)
 800f2c4:	681b      	ldr	r3, [r3, #0]
 800f2c6:	4618      	mov	r0, r3
 800f2c8:	f7ff f9a2 	bl	800e610 <AMM_Free>
}
 800f2cc:	bf00      	nop
 800f2ce:	bd80      	pop	{r7, pc}
 800f2d0:	20006b30 	.word	0x20006b30

0800f2d4 <BLE_TIMER_Callback>:

static void BLE_TIMER_Callback(void* arg)
{
 800f2d4:	b580      	push	{r7, lr}
 800f2d6:	b082      	sub	sp, #8
 800f2d8:	af00      	add	r7, sp, #0
 800f2da:	6078      	str	r0, [r7, #4]
  BLE_TIMER_timer = (BLE_TIMER_t*)arg;
 800f2dc:	4a05      	ldr	r2, [pc, #20]	@ (800f2f4 <BLE_TIMER_Callback+0x20>)
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	6013      	str	r3, [r2, #0]

  UTIL_SEQ_SetTask( 1U << CFG_TASK_BLE_TIMER_BCKGND, CFG_SEQ_PRIO_0);
 800f2e2:	2100      	movs	r1, #0
 800f2e4:	2080      	movs	r0, #128	@ 0x80
 800f2e6:	f001 faf1 	bl	80108cc <UTIL_SEQ_SetTask>
}
 800f2ea:	bf00      	nop
 800f2ec:	3708      	adds	r7, #8
 800f2ee:	46bd      	mov	sp, r7
 800f2f0:	bd80      	pop	{r7, pc}
 800f2f2:	bf00      	nop
 800f2f4:	20006b30 	.word	0x20006b30

0800f2f8 <BLE_TIMER_GetFromList>:

static BLE_TIMER_t* BLE_TIMER_GetFromList(tListNode * listHead, uint16_t id)
{
 800f2f8:	b580      	push	{r7, lr}
 800f2fa:	b084      	sub	sp, #16
 800f2fc:	af00      	add	r7, sp, #0
 800f2fe:	6078      	str	r0, [r7, #4]
 800f300:	460b      	mov	r3, r1
 800f302:	807b      	strh	r3, [r7, #2]
  BLE_TIMER_t* currentNode = (BLE_TIMER_t*)listHead->next;
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	681b      	ldr	r3, [r3, #0]
 800f308:	60fb      	str	r3, [r7, #12]
  while((tListNode *)currentNode != listHead)
 800f30a:	e00d      	b.n	800f328 <BLE_TIMER_GetFromList+0x30>
  {
    if(currentNode->id == id)
 800f30c:	68fb      	ldr	r3, [r7, #12]
 800f30e:	891b      	ldrh	r3, [r3, #8]
 800f310:	887a      	ldrh	r2, [r7, #2]
 800f312:	429a      	cmp	r2, r3
 800f314:	d101      	bne.n	800f31a <BLE_TIMER_GetFromList+0x22>
    {
      return currentNode;
 800f316:	68fb      	ldr	r3, [r7, #12]
 800f318:	e00b      	b.n	800f332 <BLE_TIMER_GetFromList+0x3a>
    }
    LST_get_next_node((tListNode *)currentNode, (tListNode **)&currentNode);
 800f31a:	68fb      	ldr	r3, [r7, #12]
 800f31c:	f107 020c 	add.w	r2, r7, #12
 800f320:	4611      	mov	r1, r2
 800f322:	4618      	mov	r0, r3
 800f324:	f000 ff60 	bl	80101e8 <LST_get_next_node>
  while((tListNode *)currentNode != listHead)
 800f328:	68fb      	ldr	r3, [r7, #12]
 800f32a:	687a      	ldr	r2, [r7, #4]
 800f32c:	429a      	cmp	r2, r3
 800f32e:	d1ed      	bne.n	800f30c <BLE_TIMER_GetFromList+0x14>
  }
  return NULL;
 800f330:	2300      	movs	r3, #0
}
 800f332:	4618      	mov	r0, r3
 800f334:	3710      	adds	r7, #16
 800f336:	46bd      	mov	sp, r7
 800f338:	bd80      	pop	{r7, pc}
	...

0800f33c <CRCCTRL_RegisterHandle>:

  return error;
}

__WEAK CRCCTRL_Cmd_Status_t CRCCTRL_RegisterHandle (CRCCTRL_Handle_t * const p_Handle)
{
 800f33c:	b580      	push	{r7, lr}
 800f33e:	b084      	sub	sp, #16
 800f340:	af00      	add	r7, sp, #0
 800f342:	6078      	str	r0, [r7, #4]
  CRCCTRL_Cmd_Status_t error = CRCCTRL_UNKNOWN;
 800f344:	2308      	movs	r3, #8
 800f346:	73fb      	strb	r3, [r7, #15]

  if (NULL == p_Handle)
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	2b00      	cmp	r3, #0
 800f34c:	d102      	bne.n	800f354 <CRCCTRL_RegisterHandle+0x18>
  {
    error = CRCCTRL_ERROR_NULL_POINTER;
 800f34e:	2306      	movs	r3, #6
 800f350:	73fb      	strb	r3, [r7, #15]
 800f352:	e01f      	b.n	800f394 <CRCCTRL_RegisterHandle+0x58>
  }
  else if (HANDLE_REG == p_Handle->State)
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	7a1b      	ldrb	r3, [r3, #8]
 800f358:	2b01      	cmp	r3, #1
 800f35a:	d102      	bne.n	800f362 <CRCCTRL_RegisterHandle+0x26>
  {
    error = CRCCTRL_HANDLE_ALREADY_REGISTERED;
 800f35c:	2303      	movs	r3, #3
 800f35e:	73fb      	strb	r3, [r7, #15]
 800f360:	e018      	b.n	800f394 <CRCCTRL_RegisterHandle+0x58>
  }
  else
  {
    /* Try to take the CRC mutex */
    error = CRCCTRL_MutexTake ();
 800f362:	f000 f939 	bl	800f5d8 <CRCCTRL_MutexTake>
 800f366:	4603      	mov	r3, r0
 800f368:	73fb      	strb	r3, [r7, #15]

    if (CRCCTRL_OK == error)
 800f36a:	7bfb      	ldrb	r3, [r7, #15]
 800f36c:	2b00      	cmp	r3, #0
 800f36e:	d111      	bne.n	800f394 <CRCCTRL_RegisterHandle+0x58>
    {
      /* Update the maximum registered handle */
      MaxRegisteredId = MaxRegisteredId + 1u;
 800f370:	4b0b      	ldr	r3, [pc, #44]	@ (800f3a0 <CRCCTRL_RegisterHandle+0x64>)
 800f372:	681b      	ldr	r3, [r3, #0]
 800f374:	3301      	adds	r3, #1
 800f376:	4a0a      	ldr	r2, [pc, #40]	@ (800f3a0 <CRCCTRL_RegisterHandle+0x64>)
 800f378:	6013      	str	r3, [r2, #0]
      /* Update the handle UUID */
      p_Handle->Uid = MaxRegisteredId;
 800f37a:	4b09      	ldr	r3, [pc, #36]	@ (800f3a0 <CRCCTRL_RegisterHandle+0x64>)
 800f37c:	681a      	ldr	r2, [r3, #0]
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	601a      	str	r2, [r3, #0]
      /* Init the previous value */
      p_Handle->PreviousComputedValue = p_Handle->Configuration.InitValue;
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	699a      	ldr	r2, [r3, #24]
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	605a      	str	r2, [r3, #4]
      /* Set handle as initialized */
      p_Handle->State = HANDLE_REG;
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	2201      	movs	r2, #1
 800f38e:	721a      	strb	r2, [r3, #8]

      /* Release the mutex */
      CRCCTRL_MutexRelease ();
 800f390:	f000 f92a 	bl	800f5e8 <CRCCTRL_MutexRelease>
    }
  }

  return error;
 800f394:	7bfb      	ldrb	r3, [r7, #15]
}
 800f396:	4618      	mov	r0, r3
 800f398:	3710      	adds	r7, #16
 800f39a:	46bd      	mov	sp, r7
 800f39c:	bd80      	pop	{r7, pc}
 800f39e:	bf00      	nop
 800f3a0:	20006b38 	.word	0x20006b38

0800f3a4 <CRCCTRL_Calculate>:

__WEAK CRCCTRL_Cmd_Status_t CRCCTRL_Calculate (CRCCTRL_Handle_t * const p_Handle,
                                               uint32_t a_Payload[],
                                               const uint32_t PayloadSize,
                                               uint32_t * const p_ConmputedValue)
{
 800f3a4:	b580      	push	{r7, lr}
 800f3a6:	b086      	sub	sp, #24
 800f3a8:	af00      	add	r7, sp, #0
 800f3aa:	60f8      	str	r0, [r7, #12]
 800f3ac:	60b9      	str	r1, [r7, #8]
 800f3ae:	607a      	str	r2, [r7, #4]
 800f3b0:	603b      	str	r3, [r7, #0]
  CRCCTRL_Cmd_Status_t error = CRCCTRL_UNKNOWN;
 800f3b2:	2308      	movs	r3, #8
 800f3b4:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef eReturn = HAL_OK;
 800f3b6:	2300      	movs	r3, #0
 800f3b8:	75bb      	strb	r3, [r7, #22]

  /* Null pointer for handle or payload */
  if ((NULL == p_Handle) || (NULL == a_Payload) || (NULL == p_ConmputedValue))
 800f3ba:	68fb      	ldr	r3, [r7, #12]
 800f3bc:	2b00      	cmp	r3, #0
 800f3be:	d005      	beq.n	800f3cc <CRCCTRL_Calculate+0x28>
 800f3c0:	68bb      	ldr	r3, [r7, #8]
 800f3c2:	2b00      	cmp	r3, #0
 800f3c4:	d002      	beq.n	800f3cc <CRCCTRL_Calculate+0x28>
 800f3c6:	683b      	ldr	r3, [r7, #0]
 800f3c8:	2b00      	cmp	r3, #0
 800f3ca:	d102      	bne.n	800f3d2 <CRCCTRL_Calculate+0x2e>
  {
    error = CRCCTRL_ERROR_NULL_POINTER;
 800f3cc:	2306      	movs	r3, #6
 800f3ce:	75fb      	strb	r3, [r7, #23]
 800f3d0:	e039      	b.n	800f446 <CRCCTRL_Calculate+0xa2>
  }
  /* Handle not init */
  else if (HANDLE_NOT_REG == p_Handle->State)
 800f3d2:	68fb      	ldr	r3, [r7, #12]
 800f3d4:	7a1b      	ldrb	r3, [r3, #8]
 800f3d6:	2b00      	cmp	r3, #0
 800f3d8:	d102      	bne.n	800f3e0 <CRCCTRL_Calculate+0x3c>
  {
    error = CRCCTRL_HANDLE_NOT_REGISTERED;
 800f3da:	2304      	movs	r3, #4
 800f3dc:	75fb      	strb	r3, [r7, #23]
 800f3de:	e032      	b.n	800f446 <CRCCTRL_Calculate+0xa2>
  }
  /* Handle not in the range */
  else if ((MaxRegisteredId < p_Handle->Uid) ||
 800f3e0:	68fb      	ldr	r3, [r7, #12]
 800f3e2:	681a      	ldr	r2, [r3, #0]
 800f3e4:	4b1a      	ldr	r3, [pc, #104]	@ (800f450 <CRCCTRL_Calculate+0xac>)
 800f3e6:	681b      	ldr	r3, [r3, #0]
 800f3e8:	429a      	cmp	r2, r3
 800f3ea:	d803      	bhi.n	800f3f4 <CRCCTRL_Calculate+0x50>
           (CRCCTRL_NO_CONFIG >= p_Handle->Uid))
 800f3ec:	68fb      	ldr	r3, [r7, #12]
 800f3ee:	681b      	ldr	r3, [r3, #0]
  else if ((MaxRegisteredId < p_Handle->Uid) ||
 800f3f0:	2b00      	cmp	r3, #0
 800f3f2:	d102      	bne.n	800f3fa <CRCCTRL_Calculate+0x56>
  {
    error = CRCCTRL_HANDLE_NOT_VALID;
 800f3f4:	2305      	movs	r3, #5
 800f3f6:	75fb      	strb	r3, [r7, #23]
 800f3f8:	e025      	b.n	800f446 <CRCCTRL_Calculate+0xa2>
  }
  else
  {
    /* Try to take the CRC mutex */
    error = CRCCTRL_MutexTake ();
 800f3fa:	f000 f8ed 	bl	800f5d8 <CRCCTRL_MutexTake>
 800f3fe:	4603      	mov	r3, r0
 800f400:	75fb      	strb	r3, [r7, #23]

    if (CRCCTRL_OK == error)
 800f402:	7dfb      	ldrb	r3, [r7, #23]
 800f404:	2b00      	cmp	r3, #0
 800f406:	d11e      	bne.n	800f446 <CRCCTRL_Calculate+0xa2>
    {
      /* Is the current config IS NOT the same as the one requested ? */
      if (CurrentConfig != p_Handle->Uid)
 800f408:	68fb      	ldr	r3, [r7, #12]
 800f40a:	681a      	ldr	r2, [r3, #0]
 800f40c:	4b11      	ldr	r3, [pc, #68]	@ (800f454 <CRCCTRL_Calculate+0xb0>)
 800f40e:	681b      	ldr	r3, [r3, #0]
 800f410:	429a      	cmp	r2, r3
 800f412:	d004      	beq.n	800f41e <CRCCTRL_Calculate+0x7a>
      {
        /* Configure the CRC before use */
        eReturn = CrcConfigure (p_Handle);
 800f414:	68f8      	ldr	r0, [r7, #12]
 800f416:	f000 f88b 	bl	800f530 <CrcConfigure>
 800f41a:	4603      	mov	r3, r0
 800f41c:	75bb      	strb	r3, [r7, #22]
      }

      if (eReturn == HAL_OK)
 800f41e:	7dbb      	ldrb	r3, [r7, #22]
 800f420:	2b00      	cmp	r3, #0
 800f422:	d10c      	bne.n	800f43e <CRCCTRL_Calculate+0x9a>
      {
        *p_ConmputedValue = HAL_CRC_Calculate (&CRCHandle, a_Payload, PayloadSize);
 800f424:	687a      	ldr	r2, [r7, #4]
 800f426:	68b9      	ldr	r1, [r7, #8]
 800f428:	480b      	ldr	r0, [pc, #44]	@ (800f458 <CRCCTRL_Calculate+0xb4>)
 800f42a:	f7f3 fdf7 	bl	800301c <HAL_CRC_Calculate>
 800f42e:	4602      	mov	r2, r0
 800f430:	683b      	ldr	r3, [r7, #0]
 800f432:	601a      	str	r2, [r3, #0]

        /* Update the handle with the computed value */
        p_Handle->PreviousComputedValue = *p_ConmputedValue;
 800f434:	683b      	ldr	r3, [r7, #0]
 800f436:	681a      	ldr	r2, [r3, #0]
 800f438:	68fb      	ldr	r3, [r7, #12]
 800f43a:	605a      	str	r2, [r3, #4]
 800f43c:	e001      	b.n	800f442 <CRCCTRL_Calculate+0x9e>
      }
      else
      {
        error = CRCCTRL_ERROR_CONFIG;
 800f43e:	2307      	movs	r3, #7
 800f440:	75fb      	strb	r3, [r7, #23]
      }

      /* Release the mutex */
      CRCCTRL_MutexRelease ();
 800f442:	f000 f8d1 	bl	800f5e8 <CRCCTRL_MutexRelease>
    }
  }

  return error;
 800f446:	7dfb      	ldrb	r3, [r7, #23]
}
 800f448:	4618      	mov	r0, r3
 800f44a:	3718      	adds	r7, #24
 800f44c:	46bd      	mov	sp, r7
 800f44e:	bd80      	pop	{r7, pc}
 800f450:	20006b38 	.word	0x20006b38
 800f454:	20006b34 	.word	0x20006b34
 800f458:	200000a8 	.word	0x200000a8

0800f45c <CRCCTRL_Accumulate>:

__WEAK CRCCTRL_Cmd_Status_t CRCCTRL_Accumulate (CRCCTRL_Handle_t * const p_Handle,
                                                uint32_t a_Payload[],
                                                const uint32_t PayloadSize,
                                                uint32_t * const p_ConmputedValue)
{
 800f45c:	b580      	push	{r7, lr}
 800f45e:	b086      	sub	sp, #24
 800f460:	af00      	add	r7, sp, #0
 800f462:	60f8      	str	r0, [r7, #12]
 800f464:	60b9      	str	r1, [r7, #8]
 800f466:	607a      	str	r2, [r7, #4]
 800f468:	603b      	str	r3, [r7, #0]
  CRCCTRL_Cmd_Status_t error = CRCCTRL_UNKNOWN;
 800f46a:	2308      	movs	r3, #8
 800f46c:	75fb      	strb	r3, [r7, #23]

  /* Null pointer for handle or payload */
  if ((NULL == p_Handle) || (NULL == a_Payload) || (NULL == p_ConmputedValue))
 800f46e:	68fb      	ldr	r3, [r7, #12]
 800f470:	2b00      	cmp	r3, #0
 800f472:	d005      	beq.n	800f480 <CRCCTRL_Accumulate+0x24>
 800f474:	68bb      	ldr	r3, [r7, #8]
 800f476:	2b00      	cmp	r3, #0
 800f478:	d002      	beq.n	800f480 <CRCCTRL_Accumulate+0x24>
 800f47a:	683b      	ldr	r3, [r7, #0]
 800f47c:	2b00      	cmp	r3, #0
 800f47e:	d102      	bne.n	800f486 <CRCCTRL_Accumulate+0x2a>
  {
    error = CRCCTRL_ERROR_NULL_POINTER;
 800f480:	2306      	movs	r3, #6
 800f482:	75fb      	strb	r3, [r7, #23]
 800f484:	e049      	b.n	800f51a <CRCCTRL_Accumulate+0xbe>
  }
  /* Handle not init */
  else if (HANDLE_NOT_REG == p_Handle->State)
 800f486:	68fb      	ldr	r3, [r7, #12]
 800f488:	7a1b      	ldrb	r3, [r3, #8]
 800f48a:	2b00      	cmp	r3, #0
 800f48c:	d102      	bne.n	800f494 <CRCCTRL_Accumulate+0x38>
  {
    error = CRCCTRL_HANDLE_NOT_REGISTERED;
 800f48e:	2304      	movs	r3, #4
 800f490:	75fb      	strb	r3, [r7, #23]
 800f492:	e042      	b.n	800f51a <CRCCTRL_Accumulate+0xbe>
  }
  /* Handle not in the range */
  else if ((MaxRegisteredId < p_Handle->Uid) ||
 800f494:	68fb      	ldr	r3, [r7, #12]
 800f496:	681a      	ldr	r2, [r3, #0]
 800f498:	4b22      	ldr	r3, [pc, #136]	@ (800f524 <CRCCTRL_Accumulate+0xc8>)
 800f49a:	681b      	ldr	r3, [r3, #0]
 800f49c:	429a      	cmp	r2, r3
 800f49e:	d803      	bhi.n	800f4a8 <CRCCTRL_Accumulate+0x4c>
           (CRCCTRL_NO_CONFIG >= p_Handle->Uid))
 800f4a0:	68fb      	ldr	r3, [r7, #12]
 800f4a2:	681b      	ldr	r3, [r3, #0]
  else if ((MaxRegisteredId < p_Handle->Uid) ||
 800f4a4:	2b00      	cmp	r3, #0
 800f4a6:	d102      	bne.n	800f4ae <CRCCTRL_Accumulate+0x52>
  {
    error = CRCCTRL_HANDLE_NOT_VALID;
 800f4a8:	2305      	movs	r3, #5
 800f4aa:	75fb      	strb	r3, [r7, #23]
 800f4ac:	e035      	b.n	800f51a <CRCCTRL_Accumulate+0xbe>
  }
  else
  {
    /* Try to take the CRC mutex */
    error = CRCCTRL_MutexTake ();
 800f4ae:	f000 f893 	bl	800f5d8 <CRCCTRL_MutexTake>
 800f4b2:	4603      	mov	r3, r0
 800f4b4:	75fb      	strb	r3, [r7, #23]

    if (CRCCTRL_OK == error)
 800f4b6:	7dfb      	ldrb	r3, [r7, #23]
 800f4b8:	2b00      	cmp	r3, #0
 800f4ba:	d12e      	bne.n	800f51a <CRCCTRL_Accumulate+0xbe>
    {
      /* Check if the config has to change */
      if (CurrentConfig == p_Handle->Uid)
 800f4bc:	68fb      	ldr	r3, [r7, #12]
 800f4be:	681a      	ldr	r2, [r3, #0]
 800f4c0:	4b19      	ldr	r3, [pc, #100]	@ (800f528 <CRCCTRL_Accumulate+0xcc>)
 800f4c2:	681b      	ldr	r3, [r3, #0]
 800f4c4:	429a      	cmp	r2, r3
 800f4c6:	d10c      	bne.n	800f4e2 <CRCCTRL_Accumulate+0x86>
      {
        *p_ConmputedValue = HAL_CRC_Accumulate (&CRCHandle,
 800f4c8:	687a      	ldr	r2, [r7, #4]
 800f4ca:	68b9      	ldr	r1, [r7, #8]
 800f4cc:	4817      	ldr	r0, [pc, #92]	@ (800f52c <CRCCTRL_Accumulate+0xd0>)
 800f4ce:	f7f3 fd61 	bl	8002f94 <HAL_CRC_Accumulate>
 800f4d2:	4602      	mov	r2, r0
 800f4d4:	683b      	ldr	r3, [r7, #0]
 800f4d6:	601a      	str	r2, [r3, #0]
                                                a_Payload,
                                                PayloadSize);

        /* Update the handle with the computed value */
        p_Handle->PreviousComputedValue = *p_ConmputedValue;
 800f4d8:	683b      	ldr	r3, [r7, #0]
 800f4da:	681a      	ldr	r2, [r3, #0]
 800f4dc:	68fb      	ldr	r3, [r7, #12]
 800f4de:	605a      	str	r2, [r3, #4]
 800f4e0:	e019      	b.n	800f516 <CRCCTRL_Accumulate+0xba>
      }
      /* Configure the CRC before use */
      else if (HAL_OK == CrcConfigure (p_Handle))
 800f4e2:	68f8      	ldr	r0, [r7, #12]
 800f4e4:	f000 f824 	bl	800f530 <CrcConfigure>
 800f4e8:	4603      	mov	r3, r0
 800f4ea:	2b00      	cmp	r3, #0
 800f4ec:	d111      	bne.n	800f512 <CRCCTRL_Accumulate+0xb6>
      {
        /* Before starting the accumulation, the init register shall be written with the previous value */
        CRCHandle.Instance->INIT = p_Handle->PreviousComputedValue;
 800f4ee:	4b0f      	ldr	r3, [pc, #60]	@ (800f52c <CRCCTRL_Accumulate+0xd0>)
 800f4f0:	681b      	ldr	r3, [r3, #0]
 800f4f2:	68fa      	ldr	r2, [r7, #12]
 800f4f4:	6852      	ldr	r2, [r2, #4]
 800f4f6:	611a      	str	r2, [r3, #16]

        *p_ConmputedValue = HAL_CRC_Calculate (&CRCHandle,
 800f4f8:	687a      	ldr	r2, [r7, #4]
 800f4fa:	68b9      	ldr	r1, [r7, #8]
 800f4fc:	480b      	ldr	r0, [pc, #44]	@ (800f52c <CRCCTRL_Accumulate+0xd0>)
 800f4fe:	f7f3 fd8d 	bl	800301c <HAL_CRC_Calculate>
 800f502:	4602      	mov	r2, r0
 800f504:	683b      	ldr	r3, [r7, #0]
 800f506:	601a      	str	r2, [r3, #0]
                                               a_Payload,
                                               PayloadSize);

        /* Update the handle with the computed value */
        p_Handle->PreviousComputedValue = *p_ConmputedValue;
 800f508:	683b      	ldr	r3, [r7, #0]
 800f50a:	681a      	ldr	r2, [r3, #0]
 800f50c:	68fb      	ldr	r3, [r7, #12]
 800f50e:	605a      	str	r2, [r3, #4]
 800f510:	e001      	b.n	800f516 <CRCCTRL_Accumulate+0xba>
      }
      else
      {
        error = CRCCTRL_ERROR_CONFIG;
 800f512:	2307      	movs	r3, #7
 800f514:	75fb      	strb	r3, [r7, #23]
      }

      /* Release the mutex */
      CRCCTRL_MutexRelease ();
 800f516:	f000 f867 	bl	800f5e8 <CRCCTRL_MutexRelease>
    }
  }

  return error;
 800f51a:	7dfb      	ldrb	r3, [r7, #23]
}
 800f51c:	4618      	mov	r0, r3
 800f51e:	3718      	adds	r7, #24
 800f520:	46bd      	mov	sp, r7
 800f522:	bd80      	pop	{r7, pc}
 800f524:	20006b38 	.word	0x20006b38
 800f528:	20006b34 	.word	0x20006b34
 800f52c:	200000a8 	.word	0x200000a8

0800f530 <CrcConfigure>:

/* Private function Definition -----------------------------------------------*/
HAL_StatusTypeDef CrcConfigure (CRCCTRL_Handle_t * const p_Handle)
{
 800f530:	b580      	push	{r7, lr}
 800f532:	b084      	sub	sp, #16
 800f534:	af00      	add	r7, sp, #0
 800f536:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef error = HAL_OK;
 800f538:	2300      	movs	r3, #0
 800f53a:	73fb      	strb	r3, [r7, #15]

  /* No need to DeInit if the CRC if it is not yet initialized */
  if (HAL_CRC_STATE_RESET != CRCHandle.State)
 800f53c:	4b23      	ldr	r3, [pc, #140]	@ (800f5cc <CrcConfigure+0x9c>)
 800f53e:	7f5b      	ldrb	r3, [r3, #29]
 800f540:	b2db      	uxtb	r3, r3
 800f542:	2b00      	cmp	r3, #0
 800f544:	d004      	beq.n	800f550 <CrcConfigure+0x20>
  {
    /* DeInit the CRC module */
    error = HAL_CRC_DeInit(&CRCHandle);
 800f546:	4821      	ldr	r0, [pc, #132]	@ (800f5cc <CrcConfigure+0x9c>)
 800f548:	f7f3 fcf4 	bl	8002f34 <HAL_CRC_DeInit>
 800f54c:	4603      	mov	r3, r0
 800f54e:	73fb      	strb	r3, [r7, #15]
  }

  /* All OK ? */
  if (HAL_OK == error)
 800f550:	7bfb      	ldrb	r3, [r7, #15]
 800f552:	2b00      	cmp	r3, #0
 800f554:	d134      	bne.n	800f5c0 <CrcConfigure+0x90>
  {
    /* Fulfill the configuration part */
    CRCHandle.Init.CRCLength = p_Handle->Configuration.CRCLength;
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	695b      	ldr	r3, [r3, #20]
 800f55a:	4a1c      	ldr	r2, [pc, #112]	@ (800f5cc <CrcConfigure+0x9c>)
 800f55c:	60d3      	str	r3, [r2, #12]
    CRCHandle.Init.DefaultInitValueUse = p_Handle->Configuration.DefaultInitValueUse;
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	7b5a      	ldrb	r2, [r3, #13]
 800f562:	4b1a      	ldr	r3, [pc, #104]	@ (800f5cc <CrcConfigure+0x9c>)
 800f564:	715a      	strb	r2, [r3, #5]
    CRCHandle.Init.DefaultPolynomialUse = p_Handle->Configuration.DefaultPolynomialUse;
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	7b1a      	ldrb	r2, [r3, #12]
 800f56a:	4b18      	ldr	r3, [pc, #96]	@ (800f5cc <CrcConfigure+0x9c>)
 800f56c:	711a      	strb	r2, [r3, #4]
    CRCHandle.Init.GeneratingPolynomial = p_Handle->Configuration.GeneratingPolynomial;
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	691b      	ldr	r3, [r3, #16]
 800f572:	4a16      	ldr	r2, [pc, #88]	@ (800f5cc <CrcConfigure+0x9c>)
 800f574:	6093      	str	r3, [r2, #8]
    CRCHandle.Init.InitValue = p_Handle->Configuration.InitValue;
 800f576:	687b      	ldr	r3, [r7, #4]
 800f578:	699b      	ldr	r3, [r3, #24]
 800f57a:	4a14      	ldr	r2, [pc, #80]	@ (800f5cc <CrcConfigure+0x9c>)
 800f57c:	6113      	str	r3, [r2, #16]
    CRCHandle.Init.InputDataInversionMode = p_Handle->Configuration.InputDataInversionMode;
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	69db      	ldr	r3, [r3, #28]
 800f582:	4a12      	ldr	r2, [pc, #72]	@ (800f5cc <CrcConfigure+0x9c>)
 800f584:	6153      	str	r3, [r2, #20]
    CRCHandle.Init.OutputDataInversionMode = p_Handle->Configuration.OutputDataInversionMode;
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	6a1b      	ldr	r3, [r3, #32]
 800f58a:	4a10      	ldr	r2, [pc, #64]	@ (800f5cc <CrcConfigure+0x9c>)
 800f58c:	6193      	str	r3, [r2, #24]
    CRCHandle.InputDataFormat = p_Handle->Configuration.InputDataFormat;
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f592:	4a0e      	ldr	r2, [pc, #56]	@ (800f5cc <CrcConfigure+0x9c>)
 800f594:	6213      	str	r3, [r2, #32]

    /* Apply the requested CRC configuration */
    error = HAL_CRC_Init(&CRCHandle);
 800f596:	480d      	ldr	r0, [pc, #52]	@ (800f5cc <CrcConfigure+0x9c>)
 800f598:	f7f3 fc68 	bl	8002e6c <HAL_CRC_Init>
 800f59c:	4603      	mov	r3, r0
 800f59e:	73fb      	strb	r3, [r7, #15]

    if (HAL_OK == error)
 800f5a0:	7bfb      	ldrb	r3, [r7, #15]
 800f5a2:	2b00      	cmp	r3, #0
 800f5a4:	d104      	bne.n	800f5b0 <CrcConfigure+0x80>
    {
      /* Update the current configuration */
      CurrentConfig = p_Handle->Uid;
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	681b      	ldr	r3, [r3, #0]
 800f5aa:	4a09      	ldr	r2, [pc, #36]	@ (800f5d0 <CrcConfigure+0xa0>)
 800f5ac:	6013      	str	r3, [r2, #0]
 800f5ae:	e007      	b.n	800f5c0 <CrcConfigure+0x90>
    }
    else
    {
      /* There must be an issue with configuration, clean the configuration */
      memset ((void *)(&CRCHandle.Init),
 800f5b0:	2218      	movs	r2, #24
 800f5b2:	2100      	movs	r1, #0
 800f5b4:	4807      	ldr	r0, [pc, #28]	@ (800f5d4 <CrcConfigure+0xa4>)
 800f5b6:	f01f fefb 	bl	802f3b0 <memset>
              0x00,
              sizeof (CRC_InitTypeDef));

      CRCHandle.InputDataFormat = 0x00u;
 800f5ba:	4b04      	ldr	r3, [pc, #16]	@ (800f5cc <CrcConfigure+0x9c>)
 800f5bc:	2200      	movs	r2, #0
 800f5be:	621a      	str	r2, [r3, #32]
    }
  }

  return error;
 800f5c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800f5c2:	4618      	mov	r0, r3
 800f5c4:	3710      	adds	r7, #16
 800f5c6:	46bd      	mov	sp, r7
 800f5c8:	bd80      	pop	{r7, pc}
 800f5ca:	bf00      	nop
 800f5cc:	200000a8 	.word	0x200000a8
 800f5d0:	20006b34 	.word	0x20006b34
 800f5d4:	200000ac 	.word	0x200000ac

0800f5d8 <CRCCTRL_MutexTake>:

/* Weak function Definition --------------------------------------------------*/
__WEAK CRCCTRL_Cmd_Status_t CRCCTRL_MutexTake (void)
{
 800f5d8:	b480      	push	{r7}
 800f5da:	af00      	add	r7, sp, #0
  return CRCCTRL_OK;
 800f5dc:	2300      	movs	r3, #0
}
 800f5de:	4618      	mov	r0, r3
 800f5e0:	46bd      	mov	sp, r7
 800f5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5e6:	4770      	bx	lr

0800f5e8 <CRCCTRL_MutexRelease>:

__WEAK CRCCTRL_Cmd_Status_t CRCCTRL_MutexRelease (void)
{
 800f5e8:	b480      	push	{r7}
 800f5ea:	af00      	add	r7, sp, #0
  return CRCCTRL_OK;
 800f5ec:	2300      	movs	r3, #0
}
 800f5ee:	4618      	mov	r0, r3
 800f5f0:	46bd      	mov	sp, r7
 800f5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5f6:	4770      	bx	lr

0800f5f8 <OTP_Read>:
/* Private function prototypes -----------------------------------------------*/
/* Exported variables --------------------------------------------------------*/
/* Exported functions --------------------------------------------------------*/

HAL_StatusTypeDef OTP_Read(uint8_t index, OTP_Data_s** otp_ptr)
{
 800f5f8:	b480      	push	{r7}
 800f5fa:	b083      	sub	sp, #12
 800f5fc:	af00      	add	r7, sp, #0
 800f5fe:	4603      	mov	r3, r0
 800f600:	6039      	str	r1, [r7, #0]
 800f602:	71fb      	strb	r3, [r7, #7]
  *otp_ptr = (OTP_Data_s*) (FLASH_OTP_BASE + FLASH_OTP_SIZE - 16);
 800f604:	683b      	ldr	r3, [r7, #0]
 800f606:	4a11      	ldr	r2, [pc, #68]	@ (800f64c <OTP_Read+0x54>)
 800f608:	601a      	str	r2, [r3, #0]

  while ( (*otp_ptr)->index != index && (*otp_ptr) != (OTP_Data_s*) FLASH_OTP_BASE)
 800f60a:	e005      	b.n	800f618 <OTP_Read+0x20>
  {
    (*otp_ptr) -= 1;
 800f60c:	683b      	ldr	r3, [r7, #0]
 800f60e:	681b      	ldr	r3, [r3, #0]
 800f610:	f1a3 0210 	sub.w	r2, r3, #16
 800f614:	683b      	ldr	r3, [r7, #0]
 800f616:	601a      	str	r2, [r3, #0]
  while ( (*otp_ptr)->index != index && (*otp_ptr) != (OTP_Data_s*) FLASH_OTP_BASE)
 800f618:	683b      	ldr	r3, [r7, #0]
 800f61a:	681b      	ldr	r3, [r3, #0]
 800f61c:	7bdb      	ldrb	r3, [r3, #15]
 800f61e:	79fa      	ldrb	r2, [r7, #7]
 800f620:	429a      	cmp	r2, r3
 800f622:	d004      	beq.n	800f62e <OTP_Read+0x36>
 800f624:	683b      	ldr	r3, [r7, #0]
 800f626:	681b      	ldr	r3, [r3, #0]
 800f628:	4a09      	ldr	r2, [pc, #36]	@ (800f650 <OTP_Read+0x58>)
 800f62a:	4293      	cmp	r3, r2
 800f62c:	d1ee      	bne.n	800f60c <OTP_Read+0x14>
  }

  if ((*otp_ptr)->index != index)
 800f62e:	683b      	ldr	r3, [r7, #0]
 800f630:	681b      	ldr	r3, [r3, #0]
 800f632:	7bdb      	ldrb	r3, [r3, #15]
 800f634:	79fa      	ldrb	r2, [r7, #7]
 800f636:	429a      	cmp	r2, r3
 800f638:	d001      	beq.n	800f63e <OTP_Read+0x46>
  {
    return HAL_ERROR;
 800f63a:	2301      	movs	r3, #1
 800f63c:	e000      	b.n	800f640 <OTP_Read+0x48>
  }

  return HAL_OK;
 800f63e:	2300      	movs	r3, #0
}
 800f640:	4618      	mov	r0, r3
 800f642:	370c      	adds	r7, #12
 800f644:	46bd      	mov	sp, r7
 800f646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f64a:	4770      	bx	lr
 800f64c:	0bf901f0 	.word	0x0bf901f0
 800f650:	0bf90000 	.word	0x0bf90000

0800f654 <LL_RCC_HSE_Enable>:
{
 800f654:	b480      	push	{r7}
 800f656:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800f658:	4b05      	ldr	r3, [pc, #20]	@ (800f670 <LL_RCC_HSE_Enable+0x1c>)
 800f65a:	681b      	ldr	r3, [r3, #0]
 800f65c:	4a04      	ldr	r2, [pc, #16]	@ (800f670 <LL_RCC_HSE_Enable+0x1c>)
 800f65e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800f662:	6013      	str	r3, [r2, #0]
}
 800f664:	bf00      	nop
 800f666:	46bd      	mov	sp, r7
 800f668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f66c:	4770      	bx	lr
 800f66e:	bf00      	nop
 800f670:	46020c00 	.word	0x46020c00

0800f674 <LL_RCC_HSE_IsReady>:
{
 800f674:	b480      	push	{r7}
 800f676:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == RCC_CR_HSERDY) ? 1UL : 0UL);
 800f678:	4b07      	ldr	r3, [pc, #28]	@ (800f698 <LL_RCC_HSE_IsReady+0x24>)
 800f67a:	681b      	ldr	r3, [r3, #0]
 800f67c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f680:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f684:	d101      	bne.n	800f68a <LL_RCC_HSE_IsReady+0x16>
 800f686:	2301      	movs	r3, #1
 800f688:	e000      	b.n	800f68c <LL_RCC_HSE_IsReady+0x18>
 800f68a:	2300      	movs	r3, #0
}
 800f68c:	4618      	mov	r0, r3
 800f68e:	46bd      	mov	sp, r7
 800f690:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f694:	4770      	bx	lr
 800f696:	bf00      	nop
 800f698:	46020c00 	.word	0x46020c00

0800f69c <LL_RCC_HSE_EnablePrescaler>:
{
 800f69c:	b480      	push	{r7}
 800f69e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEPRE);
 800f6a0:	4b05      	ldr	r3, [pc, #20]	@ (800f6b8 <LL_RCC_HSE_EnablePrescaler+0x1c>)
 800f6a2:	681b      	ldr	r3, [r3, #0]
 800f6a4:	4a04      	ldr	r2, [pc, #16]	@ (800f6b8 <LL_RCC_HSE_EnablePrescaler+0x1c>)
 800f6a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800f6aa:	6013      	str	r3, [r2, #0]
}
 800f6ac:	bf00      	nop
 800f6ae:	46bd      	mov	sp, r7
 800f6b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6b4:	4770      	bx	lr
 800f6b6:	bf00      	nop
 800f6b8:	46020c00 	.word	0x46020c00

0800f6bc <LL_RCC_HSE_IsEnabledPrescaler>:
{
 800f6bc:	b480      	push	{r7}
 800f6be:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == RCC_CR_HSEPRE) ? 1UL : 0UL);
 800f6c0:	4b07      	ldr	r3, [pc, #28]	@ (800f6e0 <LL_RCC_HSE_IsEnabledPrescaler+0x24>)
 800f6c2:	681b      	ldr	r3, [r3, #0]
 800f6c4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800f6c8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f6cc:	d101      	bne.n	800f6d2 <LL_RCC_HSE_IsEnabledPrescaler+0x16>
 800f6ce:	2301      	movs	r3, #1
 800f6d0:	e000      	b.n	800f6d4 <LL_RCC_HSE_IsEnabledPrescaler+0x18>
 800f6d2:	2300      	movs	r3, #0
}
 800f6d4:	4618      	mov	r0, r3
 800f6d6:	46bd      	mov	sp, r7
 800f6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6dc:	4770      	bx	lr
 800f6de:	bf00      	nop
 800f6e0:	46020c00 	.word	0x46020c00

0800f6e4 <LL_RCC_HSE_DisablePrescaler>:
{
 800f6e4:	b480      	push	{r7}
 800f6e6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEPRE);
 800f6e8:	4b05      	ldr	r3, [pc, #20]	@ (800f700 <LL_RCC_HSE_DisablePrescaler+0x1c>)
 800f6ea:	681b      	ldr	r3, [r3, #0]
 800f6ec:	4a04      	ldr	r2, [pc, #16]	@ (800f700 <LL_RCC_HSE_DisablePrescaler+0x1c>)
 800f6ee:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800f6f2:	6013      	str	r3, [r2, #0]
}
 800f6f4:	bf00      	nop
 800f6f6:	46bd      	mov	sp, r7
 800f6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6fc:	4770      	bx	lr
 800f6fe:	bf00      	nop
 800f700:	46020c00 	.word	0x46020c00

0800f704 <LL_RCC_HSI_Enable>:
{
 800f704:	b480      	push	{r7}
 800f706:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800f708:	4b05      	ldr	r3, [pc, #20]	@ (800f720 <LL_RCC_HSI_Enable+0x1c>)
 800f70a:	681b      	ldr	r3, [r3, #0]
 800f70c:	4a04      	ldr	r2, [pc, #16]	@ (800f720 <LL_RCC_HSI_Enable+0x1c>)
 800f70e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800f712:	6013      	str	r3, [r2, #0]
}
 800f714:	bf00      	nop
 800f716:	46bd      	mov	sp, r7
 800f718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f71c:	4770      	bx	lr
 800f71e:	bf00      	nop
 800f720:	46020c00 	.word	0x46020c00

0800f724 <LL_RCC_HSI_Disable>:
{
 800f724:	b480      	push	{r7}
 800f726:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800f728:	4b05      	ldr	r3, [pc, #20]	@ (800f740 <LL_RCC_HSI_Disable+0x1c>)
 800f72a:	681b      	ldr	r3, [r3, #0]
 800f72c:	4a04      	ldr	r2, [pc, #16]	@ (800f740 <LL_RCC_HSI_Disable+0x1c>)
 800f72e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f732:	6013      	str	r3, [r2, #0]
}
 800f734:	bf00      	nop
 800f736:	46bd      	mov	sp, r7
 800f738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f73c:	4770      	bx	lr
 800f73e:	bf00      	nop
 800f740:	46020c00 	.word	0x46020c00

0800f744 <LL_RCC_HSI_IsReady>:
{
 800f744:	b480      	push	{r7}
 800f746:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 800f748:	4b07      	ldr	r3, [pc, #28]	@ (800f768 <LL_RCC_HSI_IsReady+0x24>)
 800f74a:	681b      	ldr	r3, [r3, #0]
 800f74c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800f750:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f754:	d101      	bne.n	800f75a <LL_RCC_HSI_IsReady+0x16>
 800f756:	2301      	movs	r3, #1
 800f758:	e000      	b.n	800f75c <LL_RCC_HSI_IsReady+0x18>
 800f75a:	2300      	movs	r3, #0
}
 800f75c:	4618      	mov	r0, r3
 800f75e:	46bd      	mov	sp, r7
 800f760:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f764:	4770      	bx	lr
 800f766:	bf00      	nop
 800f768:	46020c00 	.word	0x46020c00

0800f76c <LL_RCC_SetSysClkSource>:
{
 800f76c:	b480      	push	{r7}
 800f76e:	b083      	sub	sp, #12
 800f770:	af00      	add	r7, sp, #0
 800f772:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, Source);
 800f774:	4b06      	ldr	r3, [pc, #24]	@ (800f790 <LL_RCC_SetSysClkSource+0x24>)
 800f776:	69db      	ldr	r3, [r3, #28]
 800f778:	f023 0203 	bic.w	r2, r3, #3
 800f77c:	4904      	ldr	r1, [pc, #16]	@ (800f790 <LL_RCC_SetSysClkSource+0x24>)
 800f77e:	687b      	ldr	r3, [r7, #4]
 800f780:	4313      	orrs	r3, r2
 800f782:	61cb      	str	r3, [r1, #28]
}
 800f784:	bf00      	nop
 800f786:	370c      	adds	r7, #12
 800f788:	46bd      	mov	sp, r7
 800f78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f78e:	4770      	bx	lr
 800f790:	46020c00 	.word	0x46020c00

0800f794 <LL_RCC_GetSysClkSource>:
{
 800f794:	b480      	push	{r7}
 800f796:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR1, RCC_CFGR1_SWS));
 800f798:	4b04      	ldr	r3, [pc, #16]	@ (800f7ac <LL_RCC_GetSysClkSource+0x18>)
 800f79a:	69db      	ldr	r3, [r3, #28]
 800f79c:	f003 030c 	and.w	r3, r3, #12
}
 800f7a0:	4618      	mov	r0, r3
 800f7a2:	46bd      	mov	sp, r7
 800f7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7a8:	4770      	bx	lr
 800f7aa:	bf00      	nop
 800f7ac:	46020c00 	.word	0x46020c00

0800f7b0 <LL_RCC_SetAHB5Divider>:
{
 800f7b0:	b480      	push	{r7}
 800f7b2:	b083      	sub	sp, #12
 800f7b4:	af00      	add	r7, sp, #0
 800f7b6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR4, RCC_CFGR4_HDIV5, Divider);
 800f7b8:	4b07      	ldr	r3, [pc, #28]	@ (800f7d8 <LL_RCC_SetAHB5Divider+0x28>)
 800f7ba:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800f7be:	f023 0210 	bic.w	r2, r3, #16
 800f7c2:	4905      	ldr	r1, [pc, #20]	@ (800f7d8 <LL_RCC_SetAHB5Divider+0x28>)
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	4313      	orrs	r3, r2
 800f7c8:	f8c1 3200 	str.w	r3, [r1, #512]	@ 0x200
}
 800f7cc:	bf00      	nop
 800f7ce:	370c      	adds	r7, #12
 800f7d0:	46bd      	mov	sp, r7
 800f7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7d6:	4770      	bx	lr
 800f7d8:	46020c00 	.word	0x46020c00

0800f7dc <LL_RCC_GetAHB5Prescaler>:
{
 800f7dc:	b480      	push	{r7}
 800f7de:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR4, RCC_CFGR4_HPRE5));
 800f7e0:	4b04      	ldr	r3, [pc, #16]	@ (800f7f4 <LL_RCC_GetAHB5Prescaler+0x18>)
 800f7e2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800f7e6:	f003 0307 	and.w	r3, r3, #7
}
 800f7ea:	4618      	mov	r0, r3
 800f7ec:	46bd      	mov	sp, r7
 800f7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7f2:	4770      	bx	lr
 800f7f4:	46020c00 	.word	0x46020c00

0800f7f8 <LL_RCC_PLL1_Disable>:
{
 800f7f8:	b480      	push	{r7}
 800f7fa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLL1ON);
 800f7fc:	4b05      	ldr	r3, [pc, #20]	@ (800f814 <LL_RCC_PLL1_Disable+0x1c>)
 800f7fe:	681b      	ldr	r3, [r3, #0]
 800f800:	4a04      	ldr	r2, [pc, #16]	@ (800f814 <LL_RCC_PLL1_Disable+0x1c>)
 800f802:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800f806:	6013      	str	r3, [r2, #0]
}
 800f808:	bf00      	nop
 800f80a:	46bd      	mov	sp, r7
 800f80c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f810:	4770      	bx	lr
 800f812:	bf00      	nop
 800f814:	46020c00 	.word	0x46020c00

0800f818 <LL_RCC_PLL1_SetMainSource>:
{
 800f818:	b480      	push	{r7}
 800f81a:	b083      	sub	sp, #12
 800f81c:	af00      	add	r7, sp, #0
 800f81e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->PLL1CFGR, RCC_PLL1CFGR_PLL1SRC, PLL1Source);
 800f820:	4b06      	ldr	r3, [pc, #24]	@ (800f83c <LL_RCC_PLL1_SetMainSource+0x24>)
 800f822:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f824:	f023 0203 	bic.w	r2, r3, #3
 800f828:	4904      	ldr	r1, [pc, #16]	@ (800f83c <LL_RCC_PLL1_SetMainSource+0x24>)
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	4313      	orrs	r3, r2
 800f82e:	628b      	str	r3, [r1, #40]	@ 0x28
}
 800f830:	bf00      	nop
 800f832:	370c      	adds	r7, #12
 800f834:	46bd      	mov	sp, r7
 800f836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f83a:	4770      	bx	lr
 800f83c:	46020c00 	.word	0x46020c00

0800f840 <LL_RCC_PLL1_GetN>:
{
 800f840:	b480      	push	{r7}
 800f842:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL1DIVR, RCC_PLL1DIVR_PLL1N) >>  RCC_PLL1DIVR_PLL1N_Pos) + 1UL);
 800f844:	4b04      	ldr	r3, [pc, #16]	@ (800f858 <LL_RCC_PLL1_GetN+0x18>)
 800f846:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f848:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f84c:	3301      	adds	r3, #1
}
 800f84e:	4618      	mov	r0, r3
 800f850:	46bd      	mov	sp, r7
 800f852:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f856:	4770      	bx	lr
 800f858:	46020c00 	.word	0x46020c00

0800f85c <LL_RCC_PLL1_GetP>:
{
 800f85c:	b480      	push	{r7}
 800f85e:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL1DIVR, RCC_PLL1DIVR_PLL1P) >>  RCC_PLL1DIVR_PLL1P_Pos) + 1UL);
 800f860:	4b05      	ldr	r3, [pc, #20]	@ (800f878 <LL_RCC_PLL1_GetP+0x1c>)
 800f862:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f864:	0a5b      	lsrs	r3, r3, #9
 800f866:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f86a:	3301      	adds	r3, #1
}
 800f86c:	4618      	mov	r0, r3
 800f86e:	46bd      	mov	sp, r7
 800f870:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f874:	4770      	bx	lr
 800f876:	bf00      	nop
 800f878:	46020c00 	.word	0x46020c00

0800f87c <LL_RCC_PLL1_GetQ>:
{
 800f87c:	b480      	push	{r7}
 800f87e:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL1DIVR, RCC_PLL1DIVR_PLL1Q) >>  RCC_PLL1DIVR_PLL1Q_Pos) + 1UL);
 800f880:	4b05      	ldr	r3, [pc, #20]	@ (800f898 <LL_RCC_PLL1_GetQ+0x1c>)
 800f882:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f884:	0c1b      	lsrs	r3, r3, #16
 800f886:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f88a:	3301      	adds	r3, #1
}
 800f88c:	4618      	mov	r0, r3
 800f88e:	46bd      	mov	sp, r7
 800f890:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f894:	4770      	bx	lr
 800f896:	bf00      	nop
 800f898:	46020c00 	.word	0x46020c00

0800f89c <LL_RCC_PLL1_GetR>:
{
 800f89c:	b480      	push	{r7}
 800f89e:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL1DIVR, RCC_PLL1DIVR_PLL1R) >>  RCC_PLL1DIVR_PLL1R_Pos) + 1UL);
 800f8a0:	4b05      	ldr	r3, [pc, #20]	@ (800f8b8 <LL_RCC_PLL1_GetR+0x1c>)
 800f8a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f8a4:	0e1b      	lsrs	r3, r3, #24
 800f8a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f8aa:	3301      	adds	r3, #1
}
 800f8ac:	4618      	mov	r0, r3
 800f8ae:	46bd      	mov	sp, r7
 800f8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8b4:	4770      	bx	lr
 800f8b6:	bf00      	nop
 800f8b8:	46020c00 	.word	0x46020c00

0800f8bc <LL_RCC_PLL1_GetDivider>:
{
 800f8bc:	b480      	push	{r7}
 800f8be:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL1CFGR, RCC_PLL1CFGR_PLL1M) >>  RCC_PLL1CFGR_PLL1M_Pos) + 1UL);
 800f8c0:	4b05      	ldr	r3, [pc, #20]	@ (800f8d8 <LL_RCC_PLL1_GetDivider+0x1c>)
 800f8c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f8c4:	0a1b      	lsrs	r3, r3, #8
 800f8c6:	f003 0307 	and.w	r3, r3, #7
 800f8ca:	3301      	adds	r3, #1
}
 800f8cc:	4618      	mov	r0, r3
 800f8ce:	46bd      	mov	sp, r7
 800f8d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8d4:	4770      	bx	lr
 800f8d6:	bf00      	nop
 800f8d8:	46020c00 	.word	0x46020c00

0800f8dc <LL_RCC_PLL1_EnableDomain_PLL1R>:
{
 800f8dc:	b480      	push	{r7}
 800f8de:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLL1CFGR, RCC_PLL1CFGR_PLL1REN);
 800f8e0:	4b05      	ldr	r3, [pc, #20]	@ (800f8f8 <LL_RCC_PLL1_EnableDomain_PLL1R+0x1c>)
 800f8e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f8e4:	4a04      	ldr	r2, [pc, #16]	@ (800f8f8 <LL_RCC_PLL1_EnableDomain_PLL1R+0x1c>)
 800f8e6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800f8ea:	6293      	str	r3, [r2, #40]	@ 0x28
}
 800f8ec:	bf00      	nop
 800f8ee:	46bd      	mov	sp, r7
 800f8f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8f4:	4770      	bx	lr
 800f8f6:	bf00      	nop
 800f8f8:	46020c00 	.word	0x46020c00

0800f8fc <LL_RCC_PLL1_GetFRACN>:
{
 800f8fc:	b480      	push	{r7}
 800f8fe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >>  RCC_PLL1FRACR_PLL1FRACN_Pos);
 800f900:	4b04      	ldr	r3, [pc, #16]	@ (800f914 <LL_RCC_PLL1_GetFRACN+0x18>)
 800f902:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f904:	08db      	lsrs	r3, r3, #3
 800f906:	f3c3 030c 	ubfx	r3, r3, #0, #13
}
 800f90a:	4618      	mov	r0, r3
 800f90c:	46bd      	mov	sp, r7
 800f90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f912:	4770      	bx	lr
 800f914:	46020c00 	.word	0x46020c00

0800f918 <LL_PWR_SetRegulVoltageScaling>:
{
 800f918:	b480      	push	{r7}
 800f91a:	b083      	sub	sp, #12
 800f91c:	af00      	add	r7, sp, #0
 800f91e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->VOSR, PWR_VOSR_VOS, VoltageScaling);
 800f920:	4b06      	ldr	r3, [pc, #24]	@ (800f93c <LL_PWR_SetRegulVoltageScaling+0x24>)
 800f922:	68db      	ldr	r3, [r3, #12]
 800f924:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800f928:	4904      	ldr	r1, [pc, #16]	@ (800f93c <LL_PWR_SetRegulVoltageScaling+0x24>)
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	4313      	orrs	r3, r2
 800f92e:	60cb      	str	r3, [r1, #12]
}
 800f930:	bf00      	nop
 800f932:	370c      	adds	r7, #12
 800f934:	46bd      	mov	sp, r7
 800f936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f93a:	4770      	bx	lr
 800f93c:	46020800 	.word	0x46020800

0800f940 <LL_PWR_IsActiveFlag_VOS>:
{
 800f940:	b480      	push	{r7}
 800f942:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->VOSR, PWR_VOSR_VOSRDY) == (PWR_VOSR_VOSRDY)) ? 1UL : 0UL);
 800f944:	4b07      	ldr	r3, [pc, #28]	@ (800f964 <LL_PWR_IsActiveFlag_VOS+0x24>)
 800f946:	68db      	ldr	r3, [r3, #12]
 800f948:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800f94c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800f950:	d101      	bne.n	800f956 <LL_PWR_IsActiveFlag_VOS+0x16>
 800f952:	2301      	movs	r3, #1
 800f954:	e000      	b.n	800f958 <LL_PWR_IsActiveFlag_VOS+0x18>
 800f956:	2300      	movs	r3, #0
}
 800f958:	4618      	mov	r0, r3
 800f95a:	46bd      	mov	sp, r7
 800f95c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f960:	4770      	bx	lr
 800f962:	bf00      	nop
 800f964:	46020800 	.word	0x46020800

0800f968 <SCM_HSI_CLK_ON>:
#include "RTDebug.h"

#if (CFG_SCM_SUPPORTED == 1)

__weak void SCM_HSI_CLK_ON(void)
{
 800f968:	b580      	push	{r7, lr}
 800f96a:	af00      	add	r7, sp, #0
  LL_RCC_HSI_Enable();
 800f96c:	f7ff feca 	bl	800f704 <LL_RCC_HSI_Enable>
  while(LL_RCC_HSI_IsReady() == 0);
 800f970:	bf00      	nop
 800f972:	f7ff fee7 	bl	800f744 <LL_RCC_HSI_IsReady>
 800f976:	4603      	mov	r3, r0
 800f978:	2b00      	cmp	r3, #0
 800f97a:	d0fa      	beq.n	800f972 <SCM_HSI_CLK_ON+0xa>
}
 800f97c:	bf00      	nop
 800f97e:	bf00      	nop
 800f980:	bd80      	pop	{r7, pc}

0800f982 <SCM_HSI_CLK_OFF>:

__weak void SCM_HSI_CLK_OFF(void)
{
 800f982:	b480      	push	{r7}
 800f984:	af00      	add	r7, sp, #0

}
 800f986:	bf00      	nop
 800f988:	46bd      	mov	sp, r7
 800f98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f98e:	4770      	bx	lr

0800f990 <scm_getmaxfreq>:
static void SwitchHse32toHse16(void);
static void SwitchPlltoHse32(void);

/* Private functions ---------------------------------------------------------*/
static scm_clockconfig_t scm_getmaxfreq(void)
{
 800f990:	b480      	push	{r7}
 800f992:	b083      	sub	sp, #12
 800f994:	af00      	add	r7, sp, #0
  uint8_t idx = 0;
 800f996:	2300      	movs	r3, #0
 800f998:	71fb      	strb	r3, [r7, #7]
  scm_clockconfig_t max = NO_CLOCK_CONFIG;
 800f99a:	2300      	movs	r3, #0
 800f99c:	71bb      	strb	r3, [r7, #6]

  for(idx = 0; idx < sizeof(scm_system_clock_requests) ; idx++)
 800f99e:	2300      	movs	r3, #0
 800f9a0:	71fb      	strb	r3, [r7, #7]
 800f9a2:	e00c      	b.n	800f9be <scm_getmaxfreq+0x2e>
  {
    if(scm_system_clock_requests[idx] > max)
 800f9a4:	79fb      	ldrb	r3, [r7, #7]
 800f9a6:	4a0b      	ldr	r2, [pc, #44]	@ (800f9d4 <scm_getmaxfreq+0x44>)
 800f9a8:	5cd3      	ldrb	r3, [r2, r3]
 800f9aa:	79ba      	ldrb	r2, [r7, #6]
 800f9ac:	429a      	cmp	r2, r3
 800f9ae:	d203      	bcs.n	800f9b8 <scm_getmaxfreq+0x28>
    {
      max = scm_system_clock_requests[idx];
 800f9b0:	79fb      	ldrb	r3, [r7, #7]
 800f9b2:	4a08      	ldr	r2, [pc, #32]	@ (800f9d4 <scm_getmaxfreq+0x44>)
 800f9b4:	5cd3      	ldrb	r3, [r2, r3]
 800f9b6:	71bb      	strb	r3, [r7, #6]
  for(idx = 0; idx < sizeof(scm_system_clock_requests) ; idx++)
 800f9b8:	79fb      	ldrb	r3, [r7, #7]
 800f9ba:	3301      	adds	r3, #1
 800f9bc:	71fb      	strb	r3, [r7, #7]
 800f9be:	79fb      	ldrb	r3, [r7, #7]
 800f9c0:	2b02      	cmp	r3, #2
 800f9c2:	d9ef      	bls.n	800f9a4 <scm_getmaxfreq+0x14>
    }
  }

  return max;
 800f9c4:	79bb      	ldrb	r3, [r7, #6]
}
 800f9c6:	4618      	mov	r0, r3
 800f9c8:	370c      	adds	r7, #12
 800f9ca:	46bd      	mov	sp, r7
 800f9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9d0:	4770      	bx	lr
 800f9d2:	bf00      	nop
 800f9d4:	20006b68 	.word	0x20006b68

0800f9d8 <scm_systemclockconfig>:

static void scm_systemclockconfig(void)
{
 800f9d8:	b580      	push	{r7, lr}
 800f9da:	af00      	add	r7, sp, #0
  SYSTEM_DEBUG_SIGNAL_SET(SCM_SYSTEM_CLOCK_CONFIG);
 800f9dc:	200d      	movs	r0, #13
 800f9de:	f7ff fba5 	bl	800f12c <SYSTEM_DEBUG_SIGNAL_SET>

  switch (scm_system_clock_config.targeted_clock_freq)
 800f9e2:	4b23      	ldr	r3, [pc, #140]	@ (800fa70 <scm_systemclockconfig+0x98>)
 800f9e4:	781b      	ldrb	r3, [r3, #0]
 800f9e6:	2b03      	cmp	r3, #3
 800f9e8:	d02f      	beq.n	800fa4a <scm_systemclockconfig+0x72>
 800f9ea:	2b03      	cmp	r3, #3
 800f9ec:	dc39      	bgt.n	800fa62 <scm_systemclockconfig+0x8a>
 800f9ee:	2b01      	cmp	r3, #1
 800f9f0:	d002      	beq.n	800f9f8 <scm_systemclockconfig+0x20>
 800f9f2:	2b02      	cmp	r3, #2
 800f9f4:	d00c      	beq.n	800fa10 <scm_systemclockconfig+0x38>
      ConfigStartPll();

      break;

    default:
      break;
 800f9f6:	e034      	b.n	800fa62 <scm_systemclockconfig+0x8a>
      if(LL_RCC_GetSysClkSource() == LL_RCC_SYS_CLKSOURCE_STATUS_PLL1R)
 800f9f8:	f7ff fecc 	bl	800f794 <LL_RCC_GetSysClkSource>
 800f9fc:	4603      	mov	r3, r0
 800f9fe:	2b0c      	cmp	r3, #12
 800fa00:	d101      	bne.n	800fa06 <scm_systemclockconfig+0x2e>
        SwitchPlltoHse32();
 800fa02:	f000 f88f 	bl	800fb24 <SwitchPlltoHse32>
      SwitchHse32toHse16();
 800fa06:	f000 f87d 	bl	800fb04 <SwitchHse32toHse16>
      SystemCoreClockUpdate();
 800fa0a:	f7f1 ff91 	bl	8001930 <SystemCoreClockUpdate>
      break;
 800fa0e:	e029      	b.n	800fa64 <scm_systemclockconfig+0x8c>
      if (LL_RCC_HSE_IsEnabledPrescaler())
 800fa10:	f7ff fe54 	bl	800f6bc <LL_RCC_HSE_IsEnabledPrescaler>
 800fa14:	4603      	mov	r3, r0
 800fa16:	2b00      	cmp	r3, #0
 800fa18:	d004      	beq.n	800fa24 <scm_systemclockconfig+0x4c>
        SwitchHse16toHse32();
 800fa1a:	f000 f85c 	bl	800fad6 <SwitchHse16toHse32>
        SystemCoreClockUpdate();
 800fa1e:	f7f1 ff87 	bl	8001930 <SystemCoreClockUpdate>
      break;
 800fa22:	e01f      	b.n	800fa64 <scm_systemclockconfig+0x8c>
      else if(LL_RCC_GetSysClkSource() == LL_RCC_SYS_CLKSOURCE_STATUS_PLL1R)
 800fa24:	f7ff feb6 	bl	800f794 <LL_RCC_GetSysClkSource>
 800fa28:	4603      	mov	r3, r0
 800fa2a:	2b0c      	cmp	r3, #12
 800fa2c:	d104      	bne.n	800fa38 <scm_systemclockconfig+0x60>
        SwitchPlltoHse32();
 800fa2e:	f000 f879 	bl	800fb24 <SwitchPlltoHse32>
        SystemCoreClockUpdate();
 800fa32:	f7f1 ff7d 	bl	8001930 <SystemCoreClockUpdate>
      break;
 800fa36:	e015      	b.n	800fa64 <scm_systemclockconfig+0x8c>
        LL_RCC_PLL1_Disable();
 800fa38:	f7ff fede 	bl	800f7f8 <LL_RCC_PLL1_Disable>
        __HAL_RCC_DISABLE_IT(RCC_IT_PLL1RDY);
 800fa3c:	4b0d      	ldr	r3, [pc, #52]	@ (800fa74 <scm_systemclockconfig+0x9c>)
 800fa3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fa40:	4a0c      	ldr	r2, [pc, #48]	@ (800fa74 <scm_systemclockconfig+0x9c>)
 800fa42:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800fa46:	6513      	str	r3, [r2, #80]	@ 0x50
      break;
 800fa48:	e00c      	b.n	800fa64 <scm_systemclockconfig+0x8c>
      if (LL_RCC_HSE_IsEnabledPrescaler())
 800fa4a:	f7ff fe37 	bl	800f6bc <LL_RCC_HSE_IsEnabledPrescaler>
 800fa4e:	4603      	mov	r3, r0
 800fa50:	2b00      	cmp	r3, #0
 800fa52:	d003      	beq.n	800fa5c <scm_systemclockconfig+0x84>
        SwitchHse16toHse32();
 800fa54:	f000 f83f 	bl	800fad6 <SwitchHse16toHse32>
        SystemCoreClockUpdate();
 800fa58:	f7f1 ff6a 	bl	8001930 <SystemCoreClockUpdate>
      ConfigStartPll();
 800fa5c:	f000 f874 	bl	800fb48 <ConfigStartPll>
      break;
 800fa60:	e000      	b.n	800fa64 <scm_systemclockconfig+0x8c>
      break;
 800fa62:	bf00      	nop
  }

  SYSTEM_DEBUG_SIGNAL_RESET(SCM_SYSTEM_CLOCK_CONFIG);
 800fa64:	200d      	movs	r0, #13
 800fa66:	f7ff fb6c 	bl	800f142 <SYSTEM_DEBUG_SIGNAL_RESET>
}
 800fa6a:	bf00      	nop
 800fa6c:	bd80      	pop	{r7, pc}
 800fa6e:	bf00      	nop
 800fa70:	20006b3c 	.word	0x20006b3c
 800fa74:	46020c00 	.word	0x46020c00

0800fa78 <SwitchHsePre>:

static void SwitchHsePre(scm_hse_hsepre_t hse_pre)
{
 800fa78:	b580      	push	{r7, lr}
 800fa7a:	b082      	sub	sp, #8
 800fa7c:	af00      	add	r7, sp, #0
 800fa7e:	4603      	mov	r3, r0
 800fa80:	71fb      	strb	r3, [r7, #7]
  /* Start HSI */
  SCM_HSI_CLK_ON();
 800fa82:	f7ff ff71 	bl	800f968 <SCM_HSI_CLK_ON>

  /* Set HSI as SYSCLK */
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 800fa86:	2000      	movs	r0, #0
 800fa88:	f7ff fe70 	bl	800f76c <LL_RCC_SetSysClkSource>
  while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI);
 800fa8c:	bf00      	nop
 800fa8e:	f7ff fe81 	bl	800f794 <LL_RCC_GetSysClkSource>
 800fa92:	4603      	mov	r3, r0
 800fa94:	2b00      	cmp	r3, #0
 800fa96:	d1fa      	bne.n	800fa8e <SwitchHsePre+0x16>

  /* Enable HSEON */
  LL_RCC_HSE_Enable();
 800fa98:	f7ff fddc 	bl	800f654 <LL_RCC_HSE_Enable>
  while(LL_RCC_HSE_IsReady() == 0);
 800fa9c:	bf00      	nop
 800fa9e:	f7ff fde9 	bl	800f674 <LL_RCC_HSE_IsReady>
 800faa2:	4603      	mov	r3, r0
 800faa4:	2b00      	cmp	r3, #0
 800faa6:	d0fa      	beq.n	800fa9e <SwitchHsePre+0x26>

  /* Set/Clear HSEPRE */
  if(hse_pre == HSEPRE_DISABLE)
 800faa8:	79fb      	ldrb	r3, [r7, #7]
 800faaa:	2b00      	cmp	r3, #0
 800faac:	d102      	bne.n	800fab4 <SwitchHsePre+0x3c>
  {
    LL_RCC_HSE_DisablePrescaler();
 800faae:	f7ff fe19 	bl	800f6e4 <LL_RCC_HSE_DisablePrescaler>
 800fab2:	e001      	b.n	800fab8 <SwitchHsePre+0x40>
  }
  else
  {
    LL_RCC_HSE_EnablePrescaler();
 800fab4:	f7ff fdf2 	bl	800f69c <LL_RCC_HSE_EnablePrescaler>
  }

  /* Set HSE as SYSCLK */
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSE);
 800fab8:	2002      	movs	r0, #2
 800faba:	f7ff fe57 	bl	800f76c <LL_RCC_SetSysClkSource>
  while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSE);
 800fabe:	bf00      	nop
 800fac0:	f7ff fe68 	bl	800f794 <LL_RCC_GetSysClkSource>
 800fac4:	4603      	mov	r3, r0
 800fac6:	2b08      	cmp	r3, #8
 800fac8:	d1fa      	bne.n	800fac0 <SwitchHsePre+0x48>

  /* Disable HSI */
  SCM_HSI_CLK_OFF();
 800faca:	f7ff ff5a 	bl	800f982 <SCM_HSI_CLK_OFF>
}
 800face:	bf00      	nop
 800fad0:	3708      	adds	r7, #8
 800fad2:	46bd      	mov	sp, r7
 800fad4:	bd80      	pop	{r7, pc}

0800fad6 <SwitchHse16toHse32>:

static void SwitchHse16toHse32(void)
{
 800fad6:	b580      	push	{r7, lr}
 800fad8:	af00      	add	r7, sp, #0
    * 3. Change RAM/FLASH waitstates (no limitation in Rang1)
    * 4. AHB5 Div 1
    */

  /* first switch to VOS1 */
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 800fada:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800fade:	f7ff ff1b 	bl	800f918 <LL_PWR_SetRegulVoltageScaling>
  while (LL_PWR_IsActiveFlag_VOS() == 0);
 800fae2:	bf00      	nop
 800fae4:	f7ff ff2c 	bl	800f940 <LL_PWR_IsActiveFlag_VOS>
 800fae8:	4603      	mov	r3, r0
 800faea:	2b00      	cmp	r3, #0
 800faec:	d0fa      	beq.n	800fae4 <SwitchHse16toHse32+0xe>

  /* Switch to 32Mhz */
  SwitchHsePre(HSEPRE_DISABLE);
 800faee:	2000      	movs	r0, #0
 800faf0:	f7ff ffc2 	bl	800fa78 <SwitchHsePre>

  /* Configure flash and SRAMs */
  scm_setwaitstates(HSE32);
 800faf4:	2003      	movs	r0, #3
 800faf6:	f000 f9a5 	bl	800fe44 <scm_setwaitstates>

  /* Need to set HDIV5 */
  LL_RCC_SetAHB5Divider(LL_RCC_AHB5_DIVIDER_1); /* divided by 1 */
 800fafa:	2000      	movs	r0, #0
 800fafc:	f7ff fe58 	bl	800f7b0 <LL_RCC_SetAHB5Divider>
}
 800fb00:	bf00      	nop
 800fb02:	bd80      	pop	{r7, pc}

0800fb04 <SwitchHse32toHse16>:

static void SwitchHse32toHse16(void)
{
 800fb04:	b580      	push	{r7, lr}
 800fb06:	af00      	add	r7, sp, #0
    * 3. Disable prescaler ==> HSE16 to HSE32
    * 4. Voltage Range2
    */

  /* Divide HDIV5 by 2 */
  LL_RCC_SetAHB5Divider(LL_RCC_AHB5_DIVIDER_2);
 800fb08:	2010      	movs	r0, #16
 800fb0a:	f7ff fe51 	bl	800f7b0 <LL_RCC_SetAHB5Divider>

  /* Configure flash and SRAMs before switching to VOS2 */
  scm_setwaitstates(HSE16);
 800fb0e:	2002      	movs	r0, #2
 800fb10:	f000 f998 	bl	800fe44 <scm_setwaitstates>

  /* Switch to HSE 16 */
  SwitchHsePre(HSEPRE_ENABLE);
 800fb14:	2001      	movs	r0, #1
 800fb16:	f7ff ffaf 	bl	800fa78 <SwitchHsePre>

  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE2);
 800fb1a:	2000      	movs	r0, #0
 800fb1c:	f7ff fefc 	bl	800f918 <LL_PWR_SetRegulVoltageScaling>
}
 800fb20:	bf00      	nop
 800fb22:	bd80      	pop	{r7, pc}

0800fb24 <SwitchPlltoHse32>:

static void SwitchPlltoHse32(void)
{
 800fb24:	b580      	push	{r7, lr}
 800fb26:	af00      	add	r7, sp, #0
    * 2. Turn OFF PLL
    * 3. Change RAM/FLASH waitstates (no limitation in Rang1)
    */

  /* Switch to HSE */
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSE);
 800fb28:	2002      	movs	r0, #2
 800fb2a:	f7ff fe1f 	bl	800f76c <LL_RCC_SetSysClkSource>
  while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSE);
 800fb2e:	bf00      	nop
 800fb30:	f7ff fe30 	bl	800f794 <LL_RCC_GetSysClkSource>
 800fb34:	4603      	mov	r3, r0
 800fb36:	2b08      	cmp	r3, #8
 800fb38:	d1fa      	bne.n	800fb30 <SwitchPlltoHse32+0xc>

  /* Disable PLL */
  LL_RCC_PLL1_Disable();
 800fb3a:	f7ff fe5d 	bl	800f7f8 <LL_RCC_PLL1_Disable>

  /* Configure flash and SRAMs */
  scm_setwaitstates(HSE32);
 800fb3e:	2003      	movs	r0, #3
 800fb40:	f000 f980 	bl	800fe44 <scm_setwaitstates>
}
 800fb44:	bf00      	nop
 800fb46:	bd80      	pop	{r7, pc}

0800fb48 <ConfigStartPll>:

static void ConfigStartPll(void)
{
 800fb48:	b580      	push	{r7, lr}
 800fb4a:	af00      	add	r7, sp, #0
  /* Enable PLL1 output for SYSCLK (PLL1R) */
  LL_RCC_PLL1_EnableDomain_PLL1R();
 800fb4c:	f7ff fec6 	bl	800f8dc <LL_RCC_PLL1_EnableDomain_PLL1R>

  /* Configure and start the PLL */
  LL_RCC_PLL1_SetMainSource(LL_RCC_PLL1SOURCE_HSE);
 800fb50:	2003      	movs	r0, #3
 800fb52:	f7ff fe61 	bl	800f818 <LL_RCC_PLL1_SetMainSource>

  /* Enable PLL1 */
  __HAL_RCC_PLL1_ENABLE();
 800fb56:	4b07      	ldr	r3, [pc, #28]	@ (800fb74 <ConfigStartPll+0x2c>)
 800fb58:	681b      	ldr	r3, [r3, #0]
 800fb5a:	4a06      	ldr	r2, [pc, #24]	@ (800fb74 <ConfigStartPll+0x2c>)
 800fb5c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800fb60:	6013      	str	r3, [r2, #0]

  /* PLL1RDY interrupt raised when PLL is enabled */
  __HAL_RCC_ENABLE_IT(RCC_IT_PLL1RDY);
 800fb62:	4b04      	ldr	r3, [pc, #16]	@ (800fb74 <ConfigStartPll+0x2c>)
 800fb64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fb66:	4a03      	ldr	r2, [pc, #12]	@ (800fb74 <ConfigStartPll+0x2c>)
 800fb68:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fb6c:	6513      	str	r3, [r2, #80]	@ 0x50
}
 800fb6e:	bf00      	nop
 800fb70:	bd80      	pop	{r7, pc}
 800fb72:	bf00      	nop
 800fb74:	46020c00 	.word	0x46020c00

0800fb78 <scm_init>:
  * @brief  System Clock Manager init code
  * @param  None
  * @retval None
  */
void scm_init()
{
 800fb78:	b580      	push	{r7, lr}
 800fb7a:	b082      	sub	sp, #8
 800fb7c:	af00      	add	r7, sp, #0
   * scm_system_clock_config SHALL BE UPDATED BY READING HW CONFIG FROM HAL APIs
   * SHALL BE CALLED AFTER SystemClock_Config()
   **/

  /* Default PLL configuration => no configuration */
  memset(&(scm_system_clock_config.pll), 0, sizeof(scm_pll_config_t));
 800fb7e:	2220      	movs	r2, #32
 800fb80:	2100      	movs	r1, #0
 800fb82:	483f      	ldr	r0, [pc, #252]	@ (800fc80 <scm_init+0x108>)
 800fb84:	f01f fc14 	bl	802f3b0 <memset>

  /* Reading FLASH and SRAMs waitstates from registers */
  scm_system_clock_config.flash_ws_cfg = __HAL_FLASH_GET_LATENCY();
 800fb88:	4b3e      	ldr	r3, [pc, #248]	@ (800fc84 <scm_init+0x10c>)
 800fb8a:	681b      	ldr	r3, [r3, #0]
 800fb8c:	f003 030f 	and.w	r3, r3, #15
 800fb90:	4a3d      	ldr	r2, [pc, #244]	@ (800fc88 <scm_init+0x110>)
 800fb92:	6053      	str	r3, [r2, #4]
  scm_system_clock_config.sram_ws_cfg = HAL_RAMCFG_GetWaitState(&sram1_ns);
 800fb94:	483d      	ldr	r0, [pc, #244]	@ (800fc8c <scm_init+0x114>)
 800fb96:	f7f4 fee1 	bl	800495c <HAL_RAMCFG_GetWaitState>
 800fb9a:	4603      	mov	r3, r0
 800fb9c:	4a3a      	ldr	r2, [pc, #232]	@ (800fc88 <scm_init+0x110>)
 800fb9e:	6093      	str	r3, [r2, #8]

  /* Link Layer is not active at this stage */
  RadioState = SCM_RADIO_NOT_ACTIVE;
 800fba0:	4b3b      	ldr	r3, [pc, #236]	@ (800fc90 <scm_init+0x118>)
 800fba2:	2200      	movs	r2, #0
 800fba4:	701a      	strb	r2, [r3, #0]

  /* Enable RAMCFG clock */
  __HAL_RCC_RAMCFG_CLK_ENABLE();
 800fba6:	4b3b      	ldr	r3, [pc, #236]	@ (800fc94 <scm_init+0x11c>)
 800fba8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800fbac:	4a39      	ldr	r2, [pc, #228]	@ (800fc94 <scm_init+0x11c>)
 800fbae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800fbb2:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 800fbb6:	4b37      	ldr	r3, [pc, #220]	@ (800fc94 <scm_init+0x11c>)
 800fbb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800fbbc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800fbc0:	607b      	str	r3, [r7, #4]
 800fbc2:	687b      	ldr	r3, [r7, #4]

  /* Reading system core clock configuration from registers */

  switch(LL_RCC_GetSysClkSource())
 800fbc4:	f7ff fde6 	bl	800f794 <LL_RCC_GetSysClkSource>
 800fbc8:	4603      	mov	r3, r0
 800fbca:	2b0c      	cmp	r3, #12
 800fbcc:	d021      	beq.n	800fc12 <scm_init+0x9a>
 800fbce:	2b0c      	cmp	r3, #12
 800fbd0:	d851      	bhi.n	800fc76 <scm_init+0xfe>
 800fbd2:	2b00      	cmp	r3, #0
 800fbd4:	d002      	beq.n	800fbdc <scm_init+0x64>
 800fbd6:	2b08      	cmp	r3, #8
 800fbd8:	d00e      	beq.n	800fbf8 <scm_init+0x80>
          scm_system_clock_config.pll.pll_mode = PLL_INTEGER_MODE;
        }

      break;
  }
}
 800fbda:	e04c      	b.n	800fc76 <scm_init+0xfe>
      scm_system_clock_config.targeted_clock_freq = HSE_16MHZ;
 800fbdc:	4b2a      	ldr	r3, [pc, #168]	@ (800fc88 <scm_init+0x110>)
 800fbde:	2201      	movs	r2, #1
 800fbe0:	701a      	strb	r2, [r3, #0]
       LL_RCC_HSE_EnablePrescaler();
 800fbe2:	f7ff fd5b 	bl	800f69c <LL_RCC_HSE_EnablePrescaler>
      LL_RCC_SetAHB5Divider(LL_RCC_AHB5_DIVIDER_2); /* divided by 2 */
 800fbe6:	2010      	movs	r0, #16
 800fbe8:	f7ff fde2 	bl	800f7b0 <LL_RCC_SetAHB5Divider>
      scm_setup();
 800fbec:	f000 f854 	bl	800fc98 <scm_setup>
      LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE2);
 800fbf0:	2000      	movs	r0, #0
 800fbf2:	f7ff fe91 	bl	800f918 <LL_PWR_SetRegulVoltageScaling>
      break;
 800fbf6:	e03e      	b.n	800fc76 <scm_init+0xfe>
      if (LL_RCC_HSE_IsEnabledPrescaler())
 800fbf8:	f7ff fd60 	bl	800f6bc <LL_RCC_HSE_IsEnabledPrescaler>
 800fbfc:	4603      	mov	r3, r0
 800fbfe:	2b00      	cmp	r3, #0
 800fc00:	d003      	beq.n	800fc0a <scm_init+0x92>
        scm_system_clock_config.targeted_clock_freq = HSE_16MHZ;
 800fc02:	4b21      	ldr	r3, [pc, #132]	@ (800fc88 <scm_init+0x110>)
 800fc04:	2201      	movs	r2, #1
 800fc06:	701a      	strb	r2, [r3, #0]
      break;
 800fc08:	e035      	b.n	800fc76 <scm_init+0xfe>
        scm_system_clock_config.targeted_clock_freq = HSE_32MHZ;
 800fc0a:	4b1f      	ldr	r3, [pc, #124]	@ (800fc88 <scm_init+0x110>)
 800fc0c:	2202      	movs	r2, #2
 800fc0e:	701a      	strb	r2, [r3, #0]
      break;
 800fc10:	e031      	b.n	800fc76 <scm_init+0xfe>
        scm_system_clock_config.targeted_clock_freq = SYS_PLL;
 800fc12:	4b1d      	ldr	r3, [pc, #116]	@ (800fc88 <scm_init+0x110>)
 800fc14:	2203      	movs	r2, #3
 800fc16:	701a      	strb	r2, [r3, #0]
        scm_system_clock_config.pll.PLLM = LL_RCC_PLL1_GetDivider();
 800fc18:	f7ff fe50 	bl	800f8bc <LL_RCC_PLL1_GetDivider>
 800fc1c:	4603      	mov	r3, r0
 800fc1e:	4a1a      	ldr	r2, [pc, #104]	@ (800fc88 <scm_init+0x110>)
 800fc20:	6113      	str	r3, [r2, #16]
        scm_system_clock_config.pll.PLLN = LL_RCC_PLL1_GetN();
 800fc22:	f7ff fe0d 	bl	800f840 <LL_RCC_PLL1_GetN>
 800fc26:	4603      	mov	r3, r0
 800fc28:	4a17      	ldr	r2, [pc, #92]	@ (800fc88 <scm_init+0x110>)
 800fc2a:	6153      	str	r3, [r2, #20]
        scm_system_clock_config.pll.PLLP = LL_RCC_PLL1_GetP();
 800fc2c:	f7ff fe16 	bl	800f85c <LL_RCC_PLL1_GetP>
 800fc30:	4603      	mov	r3, r0
 800fc32:	4a15      	ldr	r2, [pc, #84]	@ (800fc88 <scm_init+0x110>)
 800fc34:	6193      	str	r3, [r2, #24]
        scm_system_clock_config.pll.PLLQ = LL_RCC_PLL1_GetQ();
 800fc36:	f7ff fe21 	bl	800f87c <LL_RCC_PLL1_GetQ>
 800fc3a:	4603      	mov	r3, r0
 800fc3c:	4a12      	ldr	r2, [pc, #72]	@ (800fc88 <scm_init+0x110>)
 800fc3e:	61d3      	str	r3, [r2, #28]
        scm_system_clock_config.pll.PLLR = LL_RCC_PLL1_GetR();
 800fc40:	f7ff fe2c 	bl	800f89c <LL_RCC_PLL1_GetR>
 800fc44:	4603      	mov	r3, r0
 800fc46:	4a10      	ldr	r2, [pc, #64]	@ (800fc88 <scm_init+0x110>)
 800fc48:	6213      	str	r3, [r2, #32]
        scm_system_clock_config.pll.PLLFractional = LL_RCC_PLL1_GetFRACN();
 800fc4a:	f7ff fe57 	bl	800f8fc <LL_RCC_PLL1_GetFRACN>
 800fc4e:	4603      	mov	r3, r0
 800fc50:	4a0d      	ldr	r2, [pc, #52]	@ (800fc88 <scm_init+0x110>)
 800fc52:	6253      	str	r3, [r2, #36]	@ 0x24
        scm_system_clock_config.pll.AHB5_PLL1_CLKDivider = LL_RCC_GetAHB5Prescaler();
 800fc54:	f7ff fdc2 	bl	800f7dc <LL_RCC_GetAHB5Prescaler>
 800fc58:	4603      	mov	r3, r0
 800fc5a:	4a0b      	ldr	r2, [pc, #44]	@ (800fc88 <scm_init+0x110>)
 800fc5c:	6293      	str	r3, [r2, #40]	@ 0x28
        if(scm_system_clock_config.pll.PLLFractional == PLL_FRACTIONAL_MODE)
 800fc5e:	4b0a      	ldr	r3, [pc, #40]	@ (800fc88 <scm_init+0x110>)
 800fc60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fc62:	2b02      	cmp	r3, #2
 800fc64:	d103      	bne.n	800fc6e <scm_init+0xf6>
          scm_system_clock_config.pll.pll_mode = PLL_FRACTIONAL_MODE;
 800fc66:	4b08      	ldr	r3, [pc, #32]	@ (800fc88 <scm_init+0x110>)
 800fc68:	2202      	movs	r2, #2
 800fc6a:	735a      	strb	r2, [r3, #13]
      break;
 800fc6c:	e002      	b.n	800fc74 <scm_init+0xfc>
          scm_system_clock_config.pll.pll_mode = PLL_INTEGER_MODE;
 800fc6e:	4b06      	ldr	r3, [pc, #24]	@ (800fc88 <scm_init+0x110>)
 800fc70:	2201      	movs	r2, #1
 800fc72:	735a      	strb	r2, [r3, #13]
      break;
 800fc74:	bf00      	nop
}
 800fc76:	bf00      	nop
 800fc78:	3708      	adds	r7, #8
 800fc7a:	46bd      	mov	sp, r7
 800fc7c:	bd80      	pop	{r7, pc}
 800fc7e:	bf00      	nop
 800fc80:	20006b48 	.word	0x20006b48
 800fc84:	40022000 	.word	0x40022000
 800fc88:	20006b3c 	.word	0x20006b3c
 800fc8c:	200000cc 	.word	0x200000cc
 800fc90:	20006b6b 	.word	0x20006b6b
 800fc94:	46020c00 	.word	0x46020c00

0800fc98 <scm_setup>:
  *         Called at startup or out of low power modes.
  * @param  None
  * @retval None
  */
void scm_setup(void)
{
 800fc98:	b580      	push	{r7, lr}
 800fc9a:	af00      	add	r7, sp, #0
  SYSTEM_DEBUG_SIGNAL_SET(SCM_SETUP);
 800fc9c:	200c      	movs	r0, #12
 800fc9e:	f7ff fa45 	bl	800f12c <SYSTEM_DEBUG_SIGNAL_SET>

  /* System clock is now on HSI 16Mhz, as it exits from stop mode */

  /* Start HSE */
  LL_RCC_HSE_Enable();
 800fca2:	f7ff fcd7 	bl	800f654 <LL_RCC_HSE_Enable>

  if ((LL_RCC_HSE_IsReady() != 0) && (RadioState == SCM_RADIO_ACTIVE))
 800fca6:	f7ff fce5 	bl	800f674 <LL_RCC_HSE_IsReady>
 800fcaa:	4603      	mov	r3, r0
 800fcac:	2b00      	cmp	r3, #0
 800fcae:	d01a      	beq.n	800fce6 <scm_setup+0x4e>
 800fcb0:	4b1c      	ldr	r3, [pc, #112]	@ (800fd24 <scm_setup+0x8c>)
 800fcb2:	781b      	ldrb	r3, [r3, #0]
 800fcb4:	2b01      	cmp	r3, #1
 800fcb6:	d116      	bne.n	800fce6 <scm_setup+0x4e>
      * The current system configuration is:
      * Range1, HDIV5 cleared, HSEPRE cleared
      */

    /* Switch System Clock on HSE32 */
    LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSE);
 800fcb8:	2002      	movs	r0, #2
 800fcba:	f7ff fd57 	bl	800f76c <LL_RCC_SetSysClkSource>

    while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSE);
 800fcbe:	bf00      	nop
 800fcc0:	f7ff fd68 	bl	800f794 <LL_RCC_GetSysClkSource>
 800fcc4:	4603      	mov	r3, r0
 800fcc6:	2b08      	cmp	r3, #8
 800fcc8:	d1fa      	bne.n	800fcc0 <scm_setup+0x28>

    scm_setwaitstates(HSE32); /* There is no limitation when in Range1 */
 800fcca:	2003      	movs	r0, #3
 800fccc:	f000 f8ba 	bl	800fe44 <scm_setwaitstates>

    /* As system switched to HSE, disable HSI */
    LL_RCC_HSI_Disable();
 800fcd0:	f7ff fd28 	bl	800f724 <LL_RCC_HSI_Disable>

    /* Check if the clock system used PLL before low power mode entry */
    if(scm_system_clock_config.targeted_clock_freq == SYS_PLL)
 800fcd4:	4b14      	ldr	r3, [pc, #80]	@ (800fd28 <scm_setup+0x90>)
 800fcd6:	781b      	ldrb	r3, [r3, #0]
 800fcd8:	2b03      	cmp	r3, #3
 800fcda:	d101      	bne.n	800fce0 <scm_setup+0x48>
    {
      /* Configure system clock to use PLL */
      ConfigStartPll();
 800fcdc:	f7ff ff34 	bl	800fb48 <ConfigStartPll>
    }

    /* Ensure time base clock coherency */
    SystemCoreClockUpdate();
 800fce0:	f7f1 fe26 	bl	8001930 <SystemCoreClockUpdate>
 800fce4:	e018      	b.n	800fd18 <scm_setup+0x80>
  }
  else
  {
    scm_setwaitstates(HSE16);
 800fce6:	2002      	movs	r0, #2
 800fce8:	f000 f8ac 	bl	800fe44 <scm_setwaitstates>

    /* Check if the system need to increase VOS range (clock frequency higher than HSE 16Mhz)*/
    if(scm_system_clock_config.targeted_clock_freq != HSE_16MHZ)
 800fcec:	4b0e      	ldr	r3, [pc, #56]	@ (800fd28 <scm_setup+0x90>)
 800fcee:	781b      	ldrb	r3, [r3, #0]
 800fcf0:	2b01      	cmp	r3, #1
 800fcf2:	d003      	beq.n	800fcfc <scm_setup+0x64>
    {
      /* Set VOS to range 1 */
      LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 800fcf4:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800fcf8:	f7ff fe0e 	bl	800f918 <LL_PWR_SetRegulVoltageScaling>
    }

    if (LL_RCC_HSE_IsReady() != 0)
 800fcfc:	f7ff fcba 	bl	800f674 <LL_RCC_HSE_IsReady>
 800fd00:	4603      	mov	r3, r0
 800fd02:	2b00      	cmp	r3, #0
 800fd04:	d002      	beq.n	800fd0c <scm_setup+0x74>
    {
      scm_hserdy_isr();
 800fd06:	f000 f949 	bl	800ff9c <scm_hserdy_isr>
 800fd0a:	e005      	b.n	800fd18 <scm_setup+0x80>
    }
    else
    {
      /* Enable HSERDY interrupt */
      __HAL_RCC_ENABLE_IT(RCC_IT_HSERDY);
 800fd0c:	4b07      	ldr	r3, [pc, #28]	@ (800fd2c <scm_setup+0x94>)
 800fd0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fd10:	4a06      	ldr	r2, [pc, #24]	@ (800fd2c <scm_setup+0x94>)
 800fd12:	f043 0310 	orr.w	r3, r3, #16
 800fd16:	6513      	str	r3, [r2, #80]	@ 0x50
    }
  }
  SYSTEM_DEBUG_SIGNAL_RESET(SCM_SETUP);
 800fd18:	200c      	movs	r0, #12
 800fd1a:	f7ff fa12 	bl	800f142 <SYSTEM_DEBUG_SIGNAL_RESET>
}
 800fd1e:	bf00      	nop
 800fd20:	bd80      	pop	{r7, pc}
 800fd22:	bf00      	nop
 800fd24:	20006b6b 	.word	0x20006b6b
 800fd28:	20006b3c 	.word	0x20006b3c
 800fd2c:	46020c00 	.word	0x46020c00

0800fd30 <scm_setsystemclock>:
  *         @arg HSE_32MHZ
  *         @arg SYS_PLL
  * @retval None
  */
void scm_setsystemclock(scm_user_id_t user_id, scm_clockconfig_t sysclockconfig)
{
 800fd30:	b580      	push	{r7, lr}
 800fd32:	b088      	sub	sp, #32
 800fd34:	af00      	add	r7, sp, #0
 800fd36:	4603      	mov	r3, r0
 800fd38:	460a      	mov	r2, r1
 800fd3a:	71fb      	strb	r3, [r7, #7]
 800fd3c:	4613      	mov	r3, r2
 800fd3e:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800fd40:	f3ef 8311 	mrs	r3, BASEPRI
 800fd44:	613b      	str	r3, [r7, #16]
  return(result);
 800fd46:	693b      	ldr	r3, [r7, #16]
  scm_clockconfig_t max_freq_requested;

  UTILS_ENTER_LIMITED_CRITICAL_SECTION(RCC_INTR_PRIO<<4);
 800fd48:	61fb      	str	r3, [r7, #28]
 800fd4a:	2310      	movs	r3, #16
 800fd4c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR basepri_max, %0" : : "r" (basePri) : "memory");
 800fd4e:	697b      	ldr	r3, [r7, #20]
 800fd50:	f383 8812 	msr	BASEPRI_MAX, r3
}
 800fd54:	bf00      	nop

  /* Register the request by updating the requested frequency for this user */
  scm_system_clock_requests[user_id] = sysclockconfig;
 800fd56:	79fb      	ldrb	r3, [r7, #7]
 800fd58:	4932      	ldr	r1, [pc, #200]	@ (800fe24 <scm_setsystemclock+0xf4>)
 800fd5a:	79ba      	ldrb	r2, [r7, #6]
 800fd5c:	54ca      	strb	r2, [r1, r3]

  /* Get the higher frequency required by the clients */
  max_freq_requested = scm_getmaxfreq();
 800fd5e:	f7ff fe17 	bl	800f990 <scm_getmaxfreq>
 800fd62:	4603      	mov	r3, r0
 800fd64:	76fb      	strb	r3, [r7, #27]

  /* Check if we need to apply another clock frequency */
  if(scm_system_clock_config.targeted_clock_freq != max_freq_requested)
 800fd66:	4b30      	ldr	r3, [pc, #192]	@ (800fe28 <scm_setsystemclock+0xf8>)
 800fd68:	781b      	ldrb	r3, [r3, #0]
 800fd6a:	7efa      	ldrb	r2, [r7, #27]
 800fd6c:	429a      	cmp	r2, r3
 800fd6e:	d048      	beq.n	800fe02 <scm_setsystemclock+0xd2>
  {
    scm_system_clock_config.targeted_clock_freq = max_freq_requested;
 800fd70:	4a2d      	ldr	r2, [pc, #180]	@ (800fe28 <scm_setsystemclock+0xf8>)
 800fd72:	7efb      	ldrb	r3, [r7, #27]
 800fd74:	7013      	strb	r3, [r2, #0]

    /* Check the current system clock source (HSI or HSE) */
    if(LL_RCC_GetSysClkSource() == LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 800fd76:	f7ff fd0d 	bl	800f794 <LL_RCC_GetSysClkSource>
 800fd7a:	4603      	mov	r3, r0
 800fd7c:	2b00      	cmp	r3, #0
 800fd7e:	d13d      	bne.n	800fdfc <scm_setsystemclock+0xcc>
    {
      /* HSI is still the system clock */

      if(scm_system_clock_config.targeted_clock_freq == HSE_16MHZ)
 800fd80:	4b29      	ldr	r3, [pc, #164]	@ (800fe28 <scm_setsystemclock+0xf8>)
 800fd82:	781b      	ldrb	r3, [r3, #0]
 800fd84:	2b01      	cmp	r3, #1
 800fd86:	d103      	bne.n	800fd90 <scm_setsystemclock+0x60>
      {
        /* The system clock target is HSE 16Mhz */

        /* Clear VOS (Range 2) */
        LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE2);
 800fd88:	2000      	movs	r0, #0
 800fd8a:	f7ff fdc5 	bl	800f918 <LL_PWR_SetRegulVoltageScaling>
 800fd8e:	e03e      	b.n	800fe0e <scm_setsystemclock+0xde>
      else
      {
        /* The system clock target is higher than HSE 16Mhz */

        /* Set VOS (Range 1) */
        LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 800fd90:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800fd94:	f7ff fdc0 	bl	800f918 <LL_PWR_SetRegulVoltageScaling>

        if(RadioState != SCM_RADIO_NOT_ACTIVE)
 800fd98:	4b24      	ldr	r3, [pc, #144]	@ (800fe2c <scm_setsystemclock+0xfc>)
 800fd9a:	781b      	ldrb	r3, [r3, #0]
 800fd9c:	2b00      	cmp	r3, #0
 800fd9e:	d036      	beq.n	800fe0e <scm_setsystemclock+0xde>
        {
            /* Disable HSERDY interrupt */
            __HAL_RCC_DISABLE_IT(RCC_IT_HSERDY);
 800fda0:	4b23      	ldr	r3, [pc, #140]	@ (800fe30 <scm_setsystemclock+0x100>)
 800fda2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fda4:	4a22      	ldr	r2, [pc, #136]	@ (800fe30 <scm_setsystemclock+0x100>)
 800fda6:	f023 0310 	bic.w	r3, r3, #16
 800fdaa:	6513      	str	r3, [r2, #80]	@ 0x50

            /* Wait until VOS has changed */
            while (LL_PWR_IsActiveFlag_VOS() == 0);
 800fdac:	bf00      	nop
 800fdae:	f7ff fdc7 	bl	800f940 <LL_PWR_IsActiveFlag_VOS>
 800fdb2:	4603      	mov	r3, r0
 800fdb4:	2b00      	cmp	r3, #0
 800fdb6:	d0fa      	beq.n	800fdae <scm_setsystemclock+0x7e>

            /* Wait until HSE is ready */
            while (LL_RCC_HSE_IsReady() == 0);
 800fdb8:	bf00      	nop
 800fdba:	f7ff fc5b 	bl	800f674 <LL_RCC_HSE_IsReady>
 800fdbe:	4603      	mov	r3, r0
 800fdc0:	2b00      	cmp	r3, #0
 800fdc2:	d0fa      	beq.n	800fdba <scm_setsystemclock+0x8a>

            LL_RCC_HSE_DisablePrescaler();
 800fdc4:	f7ff fc8e 	bl	800f6e4 <LL_RCC_HSE_DisablePrescaler>

            /* Switch to HSE */
            LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSE);
 800fdc8:	2002      	movs	r0, #2
 800fdca:	f7ff fccf 	bl	800f76c <LL_RCC_SetSysClkSource>
            while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSE);
 800fdce:	bf00      	nop
 800fdd0:	f7ff fce0 	bl	800f794 <LL_RCC_GetSysClkSource>
 800fdd4:	4603      	mov	r3, r0
 800fdd6:	2b08      	cmp	r3, #8
 800fdd8:	d1fa      	bne.n	800fdd0 <scm_setsystemclock+0xa0>

            scm_setwaitstates(HSE32); /* There is no limitation when in Range1 */
 800fdda:	2003      	movs	r0, #3
 800fddc:	f000 f832 	bl	800fe44 <scm_setwaitstates>

            LL_RCC_SetAHB5Divider(LL_RCC_AHB5_DIVIDER_1);
 800fde0:	2000      	movs	r0, #0
 800fde2:	f7ff fce5 	bl	800f7b0 <LL_RCC_SetAHB5Divider>

            LL_RCC_HSI_Disable();
 800fde6:	f7ff fc9d 	bl	800f724 <LL_RCC_HSI_Disable>

            /* Check if PLL is requested */
            if(scm_system_clock_config.targeted_clock_freq == SYS_PLL)
 800fdea:	4b0f      	ldr	r3, [pc, #60]	@ (800fe28 <scm_setsystemclock+0xf8>)
 800fdec:	781b      	ldrb	r3, [r3, #0]
 800fdee:	2b03      	cmp	r3, #3
 800fdf0:	d101      	bne.n	800fdf6 <scm_setsystemclock+0xc6>
            {
                /* Configure system clock to use PLL */
                ConfigStartPll();
 800fdf2:	f7ff fea9 	bl	800fb48 <ConfigStartPll>
            }

            /* Ensure time base clock coherency */
            SystemCoreClockUpdate();
 800fdf6:	f7f1 fd9b 	bl	8001930 <SystemCoreClockUpdate>
 800fdfa:	e008      	b.n	800fe0e <scm_setsystemclock+0xde>
    }
    else
    {
      /* HSE is already the system clock source */
      /* Configure the system clock */
      scm_systemclockconfig();
 800fdfc:	f7ff fdec 	bl	800f9d8 <scm_systemclockconfig>
 800fe00:	e005      	b.n	800fe0e <scm_setsystemclock+0xde>
    }
  }
  else if(scm_system_clock_config.targeted_clock_freq == SYS_PLL)
 800fe02:	4b09      	ldr	r3, [pc, #36]	@ (800fe28 <scm_setsystemclock+0xf8>)
 800fe04:	781b      	ldrb	r3, [r3, #0]
 800fe06:	2b03      	cmp	r3, #3
 800fe08:	d101      	bne.n	800fe0e <scm_setsystemclock+0xde>
  {
    /* PLL has requested but system clock is already on PLL */
    scm_pllready();
 800fe0a:	f000 f813 	bl	800fe34 <scm_pllready>
 800fe0e:	69fb      	ldr	r3, [r7, #28]
 800fe10:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 800fe12:	68fb      	ldr	r3, [r7, #12]
 800fe14:	f383 8811 	msr	BASEPRI, r3
}
 800fe18:	bf00      	nop
  }

  UTILS_EXIT_LIMITED_CRITICAL_SECTION();
}
 800fe1a:	bf00      	nop
 800fe1c:	3720      	adds	r7, #32
 800fe1e:	46bd      	mov	sp, r7
 800fe20:	bd80      	pop	{r7, pc}
 800fe22:	bf00      	nop
 800fe24:	20006b68 	.word	0x20006b68
 800fe28:	20006b3c 	.word	0x20006b3c
 800fe2c:	20006b6b 	.word	0x20006b6b
 800fe30:	46020c00 	.word	0x46020c00

0800fe34 <scm_pllready>:
  * @retval None
  * @note   This function is defined as weak in SCM module.
  *         Can be overridden by user.
  */
__WEAK void scm_pllready(void)
{
 800fe34:	b480      	push	{r7}
 800fe36:	af00      	add	r7, sp, #0
  /* To be override by user */
}
 800fe38:	bf00      	nop
 800fe3a:	46bd      	mov	sp, r7
 800fe3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe40:	4770      	bx	lr
	...

0800fe44 <scm_setwaitstates>:
  *         @arg HSE32
  *         @arg PLL
  * @retval None
  */
void scm_setwaitstates(const scm_ws_lp_t ws_lp_config)
{
 800fe44:	b580      	push	{r7, lr}
 800fe46:	b082      	sub	sp, #8
 800fe48:	af00      	add	r7, sp, #0
 800fe4a:	4603      	mov	r3, r0
 800fe4c:	71fb      	strb	r3, [r7, #7]
  /* Configure flash and SRAMs */
  switch (ws_lp_config) {
 800fe4e:	79fb      	ldrb	r3, [r7, #7]
 800fe50:	2b04      	cmp	r3, #4
 800fe52:	f200 8096 	bhi.w	800ff82 <scm_setwaitstates+0x13e>
 800fe56:	a201      	add	r2, pc, #4	@ (adr r2, 800fe5c <scm_setwaitstates+0x18>)
 800fe58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe5c:	0800fe71 	.word	0x0800fe71
 800fe60:	0800fea5 	.word	0x0800fea5
 800fe64:	0800fee3 	.word	0x0800fee3
 800fe68:	0800ff25 	.word	0x0800ff25
 800fe6c:	0800ff5d 	.word	0x0800ff5d
  case LP:
    __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_3);
 800fe70:	4b46      	ldr	r3, [pc, #280]	@ (800ff8c <scm_setwaitstates+0x148>)
 800fe72:	681b      	ldr	r3, [r3, #0]
 800fe74:	f023 030f 	bic.w	r3, r3, #15
 800fe78:	4a44      	ldr	r2, [pc, #272]	@ (800ff8c <scm_setwaitstates+0x148>)
 800fe7a:	f043 0303 	orr.w	r3, r3, #3
 800fe7e:	6013      	str	r3, [r2, #0]
    while(__HAL_FLASH_GET_LATENCY() != FLASH_LATENCY_3);
 800fe80:	bf00      	nop
 800fe82:	4b42      	ldr	r3, [pc, #264]	@ (800ff8c <scm_setwaitstates+0x148>)
 800fe84:	681b      	ldr	r3, [r3, #0]
 800fe86:	f003 030f 	and.w	r3, r3, #15
 800fe8a:	2b03      	cmp	r3, #3
 800fe8c:	d1f9      	bne.n	800fe82 <scm_setwaitstates+0x3e>
    HAL_RAMCFG_ConfigWaitState(&sram1_ns, RAMCFG_WAITSTATE_1);
 800fe8e:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 800fe92:	483f      	ldr	r0, [pc, #252]	@ (800ff90 <scm_setwaitstates+0x14c>)
 800fe94:	f7f4 fd42 	bl	800491c <HAL_RAMCFG_ConfigWaitState>
    HAL_RAMCFG_ConfigWaitState(&sram2_ns, RAMCFG_WAITSTATE_1);
 800fe98:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 800fe9c:	483d      	ldr	r0, [pc, #244]	@ (800ff94 <scm_setwaitstates+0x150>)
 800fe9e:	f7f4 fd3d 	bl	800491c <HAL_RAMCFG_ConfigWaitState>
    break;
 800fea2:	e06f      	b.n	800ff84 <scm_setwaitstates+0x140>

  case RUN:
    __HAL_FLASH_SET_LATENCY(scm_system_clock_config.flash_ws_cfg);
 800fea4:	4b39      	ldr	r3, [pc, #228]	@ (800ff8c <scm_setwaitstates+0x148>)
 800fea6:	681b      	ldr	r3, [r3, #0]
 800fea8:	f023 020f 	bic.w	r2, r3, #15
 800feac:	4b3a      	ldr	r3, [pc, #232]	@ (800ff98 <scm_setwaitstates+0x154>)
 800feae:	685b      	ldr	r3, [r3, #4]
 800feb0:	4936      	ldr	r1, [pc, #216]	@ (800ff8c <scm_setwaitstates+0x148>)
 800feb2:	4313      	orrs	r3, r2
 800feb4:	600b      	str	r3, [r1, #0]
    while(__HAL_FLASH_GET_LATENCY() != scm_system_clock_config.flash_ws_cfg);
 800feb6:	bf00      	nop
 800feb8:	4b34      	ldr	r3, [pc, #208]	@ (800ff8c <scm_setwaitstates+0x148>)
 800feba:	681b      	ldr	r3, [r3, #0]
 800febc:	f003 020f 	and.w	r2, r3, #15
 800fec0:	4b35      	ldr	r3, [pc, #212]	@ (800ff98 <scm_setwaitstates+0x154>)
 800fec2:	685b      	ldr	r3, [r3, #4]
 800fec4:	429a      	cmp	r2, r3
 800fec6:	d1f7      	bne.n	800feb8 <scm_setwaitstates+0x74>
    HAL_RAMCFG_ConfigWaitState(&sram1_ns, scm_system_clock_config.sram_ws_cfg);
 800fec8:	4b33      	ldr	r3, [pc, #204]	@ (800ff98 <scm_setwaitstates+0x154>)
 800feca:	689b      	ldr	r3, [r3, #8]
 800fecc:	4619      	mov	r1, r3
 800fece:	4830      	ldr	r0, [pc, #192]	@ (800ff90 <scm_setwaitstates+0x14c>)
 800fed0:	f7f4 fd24 	bl	800491c <HAL_RAMCFG_ConfigWaitState>
    HAL_RAMCFG_ConfigWaitState(&sram2_ns, scm_system_clock_config.sram_ws_cfg);
 800fed4:	4b30      	ldr	r3, [pc, #192]	@ (800ff98 <scm_setwaitstates+0x154>)
 800fed6:	689b      	ldr	r3, [r3, #8]
 800fed8:	4619      	mov	r1, r3
 800feda:	482e      	ldr	r0, [pc, #184]	@ (800ff94 <scm_setwaitstates+0x150>)
 800fedc:	f7f4 fd1e 	bl	800491c <HAL_RAMCFG_ConfigWaitState>
    break;
 800fee0:	e050      	b.n	800ff84 <scm_setwaitstates+0x140>

  case HSE16:
    __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_1);
 800fee2:	4b2a      	ldr	r3, [pc, #168]	@ (800ff8c <scm_setwaitstates+0x148>)
 800fee4:	681b      	ldr	r3, [r3, #0]
 800fee6:	f023 030f 	bic.w	r3, r3, #15
 800feea:	4a28      	ldr	r2, [pc, #160]	@ (800ff8c <scm_setwaitstates+0x148>)
 800feec:	f043 0301 	orr.w	r3, r3, #1
 800fef0:	6013      	str	r3, [r2, #0]
    while(__HAL_FLASH_GET_LATENCY() != FLASH_LATENCY_1);
 800fef2:	bf00      	nop
 800fef4:	4b25      	ldr	r3, [pc, #148]	@ (800ff8c <scm_setwaitstates+0x148>)
 800fef6:	681b      	ldr	r3, [r3, #0]
 800fef8:	f003 030f 	and.w	r3, r3, #15
 800fefc:	2b01      	cmp	r3, #1
 800fefe:	d1f9      	bne.n	800fef4 <scm_setwaitstates+0xb0>
    HAL_RAMCFG_ConfigWaitState(&sram1_ns, RAMCFG_WAITSTATE_1);
 800ff00:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 800ff04:	4822      	ldr	r0, [pc, #136]	@ (800ff90 <scm_setwaitstates+0x14c>)
 800ff06:	f7f4 fd09 	bl	800491c <HAL_RAMCFG_ConfigWaitState>
    HAL_RAMCFG_ConfigWaitState(&sram2_ns, RAMCFG_WAITSTATE_1);
 800ff0a:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 800ff0e:	4821      	ldr	r0, [pc, #132]	@ (800ff94 <scm_setwaitstates+0x150>)
 800ff10:	f7f4 fd04 	bl	800491c <HAL_RAMCFG_ConfigWaitState>

    scm_system_clock_config.flash_ws_cfg = FLASH_LATENCY_1;
 800ff14:	4b20      	ldr	r3, [pc, #128]	@ (800ff98 <scm_setwaitstates+0x154>)
 800ff16:	2201      	movs	r2, #1
 800ff18:	605a      	str	r2, [r3, #4]
    scm_system_clock_config.sram_ws_cfg = RAMCFG_WAITSTATE_1;
 800ff1a:	4b1f      	ldr	r3, [pc, #124]	@ (800ff98 <scm_setwaitstates+0x154>)
 800ff1c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800ff20:	609a      	str	r2, [r3, #8]

    break;
 800ff22:	e02f      	b.n	800ff84 <scm_setwaitstates+0x140>

  case HSE32:
    __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_0);
 800ff24:	4b19      	ldr	r3, [pc, #100]	@ (800ff8c <scm_setwaitstates+0x148>)
 800ff26:	681b      	ldr	r3, [r3, #0]
 800ff28:	4a18      	ldr	r2, [pc, #96]	@ (800ff8c <scm_setwaitstates+0x148>)
 800ff2a:	f023 030f 	bic.w	r3, r3, #15
 800ff2e:	6013      	str	r3, [r2, #0]
    while(__HAL_FLASH_GET_LATENCY() != FLASH_LATENCY_0);
 800ff30:	bf00      	nop
 800ff32:	4b16      	ldr	r3, [pc, #88]	@ (800ff8c <scm_setwaitstates+0x148>)
 800ff34:	681b      	ldr	r3, [r3, #0]
 800ff36:	f003 030f 	and.w	r3, r3, #15
 800ff3a:	2b00      	cmp	r3, #0
 800ff3c:	d1f9      	bne.n	800ff32 <scm_setwaitstates+0xee>
    HAL_RAMCFG_ConfigWaitState(&sram1_ns, RAMCFG_WAITSTATE_0);
 800ff3e:	2100      	movs	r1, #0
 800ff40:	4813      	ldr	r0, [pc, #76]	@ (800ff90 <scm_setwaitstates+0x14c>)
 800ff42:	f7f4 fceb 	bl	800491c <HAL_RAMCFG_ConfigWaitState>
    HAL_RAMCFG_ConfigWaitState(&sram2_ns, RAMCFG_WAITSTATE_0);
 800ff46:	2100      	movs	r1, #0
 800ff48:	4812      	ldr	r0, [pc, #72]	@ (800ff94 <scm_setwaitstates+0x150>)
 800ff4a:	f7f4 fce7 	bl	800491c <HAL_RAMCFG_ConfigWaitState>

    scm_system_clock_config.flash_ws_cfg = FLASH_LATENCY_0;
 800ff4e:	4b12      	ldr	r3, [pc, #72]	@ (800ff98 <scm_setwaitstates+0x154>)
 800ff50:	2200      	movs	r2, #0
 800ff52:	605a      	str	r2, [r3, #4]
    scm_system_clock_config.sram_ws_cfg = RAMCFG_WAITSTATE_0;
 800ff54:	4b10      	ldr	r3, [pc, #64]	@ (800ff98 <scm_setwaitstates+0x154>)
 800ff56:	2200      	movs	r2, #0
 800ff58:	609a      	str	r2, [r3, #8]

    break;
 800ff5a:	e013      	b.n	800ff84 <scm_setwaitstates+0x140>

  case PLL:
    /* RAM latencies are alreadey set to 0WS */
    /* Set Flash LATENCY according to PLL configuration */
    /* BELOW CONFIGURATION IS WORST CASE, SHALL BE OPTIMIZED */
    __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_3);
 800ff5c:	4b0b      	ldr	r3, [pc, #44]	@ (800ff8c <scm_setwaitstates+0x148>)
 800ff5e:	681b      	ldr	r3, [r3, #0]
 800ff60:	f023 030f 	bic.w	r3, r3, #15
 800ff64:	4a09      	ldr	r2, [pc, #36]	@ (800ff8c <scm_setwaitstates+0x148>)
 800ff66:	f043 0303 	orr.w	r3, r3, #3
 800ff6a:	6013      	str	r3, [r2, #0]
    while(__HAL_FLASH_GET_LATENCY() != FLASH_LATENCY_3);
 800ff6c:	bf00      	nop
 800ff6e:	4b07      	ldr	r3, [pc, #28]	@ (800ff8c <scm_setwaitstates+0x148>)
 800ff70:	681b      	ldr	r3, [r3, #0]
 800ff72:	f003 030f 	and.w	r3, r3, #15
 800ff76:	2b03      	cmp	r3, #3
 800ff78:	d1f9      	bne.n	800ff6e <scm_setwaitstates+0x12a>
    scm_system_clock_config.flash_ws_cfg = FLASH_LATENCY_3;
 800ff7a:	4b07      	ldr	r3, [pc, #28]	@ (800ff98 <scm_setwaitstates+0x154>)
 800ff7c:	2203      	movs	r2, #3
 800ff7e:	605a      	str	r2, [r3, #4]
    break;
 800ff80:	e000      	b.n	800ff84 <scm_setwaitstates+0x140>

  default:
    break;
 800ff82:	bf00      	nop
  }
}
 800ff84:	bf00      	nop
 800ff86:	3708      	adds	r7, #8
 800ff88:	46bd      	mov	sp, r7
 800ff8a:	bd80      	pop	{r7, pc}
 800ff8c:	40022000 	.word	0x40022000
 800ff90:	200000cc 	.word	0x200000cc
 800ff94:	200000d8 	.word	0x200000d8
 800ff98:	20006b3c 	.word	0x20006b3c

0800ff9c <scm_hserdy_isr>:
  *         Switch system clock on HSE.
  * @param  None
  * @retval None
  */
void scm_hserdy_isr(void)
{
 800ff9c:	b580      	push	{r7, lr}
 800ff9e:	af00      	add	r7, sp, #0
  SYSTEM_DEBUG_SIGNAL_SET(SCM_HSERDY_ISR);
 800ffa0:	200e      	movs	r0, #14
 800ffa2:	f7ff f8c3 	bl	800f12c <SYSTEM_DEBUG_SIGNAL_SET>

  if(LL_RCC_GetSysClkSource() == LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 800ffa6:	f7ff fbf5 	bl	800f794 <LL_RCC_GetSysClkSource>
 800ffaa:	4603      	mov	r3, r0
 800ffac:	2b00      	cmp	r3, #0
 800ffae:	d136      	bne.n	801001e <scm_hserdy_isr+0x82>
  {
    /* Wait until VOS has changed */
    while (LL_PWR_IsActiveFlag_VOS() == 0);
 800ffb0:	bf00      	nop
 800ffb2:	f7ff fcc5 	bl	800f940 <LL_PWR_IsActiveFlag_VOS>
 800ffb6:	4603      	mov	r3, r0
 800ffb8:	2b00      	cmp	r3, #0
 800ffba:	d0fa      	beq.n	800ffb2 <scm_hserdy_isr+0x16>

    if(scm_system_clock_config.targeted_clock_freq == HSE_16MHZ)
 800ffbc:	4b1a      	ldr	r3, [pc, #104]	@ (8010028 <scm_hserdy_isr+0x8c>)
 800ffbe:	781b      	ldrb	r3, [r3, #0]
 800ffc0:	2b01      	cmp	r3, #1
 800ffc2:	d10b      	bne.n	800ffdc <scm_hserdy_isr+0x40>
    {
      /**
        * The current system configuration is:
        * Range2, HDIV5 set, Wait States compliant to HSE16
        */
      LL_RCC_HSE_EnablePrescaler();
 800ffc4:	f7ff fb6a 	bl	800f69c <LL_RCC_HSE_EnablePrescaler>
      /* Switch to HSE */
      LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSE);
 800ffc8:	2002      	movs	r0, #2
 800ffca:	f7ff fbcf 	bl	800f76c <LL_RCC_SetSysClkSource>
      while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSE);
 800ffce:	bf00      	nop
 800ffd0:	f7ff fbe0 	bl	800f794 <LL_RCC_GetSysClkSource>
 800ffd4:	4603      	mov	r3, r0
 800ffd6:	2b08      	cmp	r3, #8
 800ffd8:	d1fa      	bne.n	800ffd0 <scm_hserdy_isr+0x34>
 800ffda:	e016      	b.n	801000a <scm_hserdy_isr+0x6e>
      /**
        * The current system configuration is:
        * Range1
        */

      LL_RCC_HSE_DisablePrescaler();
 800ffdc:	f7ff fb82 	bl	800f6e4 <LL_RCC_HSE_DisablePrescaler>

      /* Switch to HSE */
      LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSE);
 800ffe0:	2002      	movs	r0, #2
 800ffe2:	f7ff fbc3 	bl	800f76c <LL_RCC_SetSysClkSource>
      while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSE);
 800ffe6:	bf00      	nop
 800ffe8:	f7ff fbd4 	bl	800f794 <LL_RCC_GetSysClkSource>
 800ffec:	4603      	mov	r3, r0
 800ffee:	2b08      	cmp	r3, #8
 800fff0:	d1fa      	bne.n	800ffe8 <scm_hserdy_isr+0x4c>

      scm_setwaitstates(HSE32); /* There is no limitation when in Range1 */
 800fff2:	2003      	movs	r0, #3
 800fff4:	f7ff ff26 	bl	800fe44 <scm_setwaitstates>

      if(scm_system_clock_config.targeted_clock_freq == SYS_PLL)
 800fff8:	4b0b      	ldr	r3, [pc, #44]	@ (8010028 <scm_hserdy_isr+0x8c>)
 800fffa:	781b      	ldrb	r3, [r3, #0]
 800fffc:	2b03      	cmp	r3, #3
 800fffe:	d101      	bne.n	8010004 <scm_hserdy_isr+0x68>
      {
        /* The system clock target is based on PLL */

        /* Configure and start PLL */
        ConfigStartPll();
 8010000:	f7ff fda2 	bl	800fb48 <ConfigStartPll>
      }

      /* Set HDIV 5 */
      LL_RCC_SetAHB5Divider(LL_RCC_AHB5_DIVIDER_1); /* divided by 1 */
 8010004:	2000      	movs	r0, #0
 8010006:	f7ff fbd3 	bl	800f7b0 <LL_RCC_SetAHB5Divider>
    }

    /* As system switched to HSE, disable HSI */
    SCM_HSI_CLK_OFF();
 801000a:	f7ff fcba 	bl	800f982 <SCM_HSI_CLK_OFF>

    /* Disable HSERDY interrupt */
    __HAL_RCC_DISABLE_IT(RCC_IT_HSERDY);
 801000e:	4b07      	ldr	r3, [pc, #28]	@ (801002c <scm_hserdy_isr+0x90>)
 8010010:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010012:	4a06      	ldr	r2, [pc, #24]	@ (801002c <scm_hserdy_isr+0x90>)
 8010014:	f023 0310 	bic.w	r3, r3, #16
 8010018:	6513      	str	r3, [r2, #80]	@ 0x50

    /* Ensure time base clock coherency */
    SystemCoreClockUpdate();
 801001a:	f7f1 fc89 	bl	8001930 <SystemCoreClockUpdate>
  }

  SYSTEM_DEBUG_SIGNAL_RESET(SCM_HSERDY_ISR);
 801001e:	200e      	movs	r0, #14
 8010020:	f7ff f88f 	bl	800f142 <SYSTEM_DEBUG_SIGNAL_RESET>
}
 8010024:	bf00      	nop
 8010026:	bd80      	pop	{r7, pc}
 8010028:	20006b3c 	.word	0x20006b3c
 801002c:	46020c00 	.word	0x46020c00

08010030 <scm_notifyradiostate>:
  *         @arg SCM_RADIO_ACTIVE
  *         @arg SCM_RADIO_NOT_ACTIVE
  * @retval None
  */
void scm_notifyradiostate(const scm_radio_state_t radio_state)
{
 8010030:	b580      	push	{r7, lr}
 8010032:	b082      	sub	sp, #8
 8010034:	af00      	add	r7, sp, #0
 8010036:	4603      	mov	r3, r0
 8010038:	71fb      	strb	r3, [r7, #7]
  if(radio_state != SCM_RADIO_NOT_ACTIVE)
 801003a:	79fb      	ldrb	r3, [r7, #7]
 801003c:	2b00      	cmp	r3, #0
 801003e:	d007      	beq.n	8010050 <scm_notifyradiostate+0x20>
  {
    RadioState = SCM_RADIO_ACTIVE; /* shall be set before calling scm_setsystemclock() */
 8010040:	4b09      	ldr	r3, [pc, #36]	@ (8010068 <scm_notifyradiostate+0x38>)
 8010042:	2201      	movs	r2, #1
 8010044:	701a      	strb	r2, [r3, #0]
    scm_setsystemclock(SCM_USER_LL_FW, HSE_32MHZ); /* shall be set before calling scm_setsystemclock() */
 8010046:	2102      	movs	r1, #2
 8010048:	2001      	movs	r0, #1
 801004a:	f7ff fe71 	bl	800fd30 <scm_setsystemclock>
  else
  {
    RadioState = SCM_RADIO_NOT_ACTIVE;
    scm_setsystemclock(SCM_USER_LL_FW, HSE_16MHZ);
  }
}
 801004e:	e006      	b.n	801005e <scm_notifyradiostate+0x2e>
    RadioState = SCM_RADIO_NOT_ACTIVE;
 8010050:	4b05      	ldr	r3, [pc, #20]	@ (8010068 <scm_notifyradiostate+0x38>)
 8010052:	2200      	movs	r2, #0
 8010054:	701a      	strb	r2, [r3, #0]
    scm_setsystemclock(SCM_USER_LL_FW, HSE_16MHZ);
 8010056:	2101      	movs	r1, #1
 8010058:	2001      	movs	r0, #1
 801005a:	f7ff fe69 	bl	800fd30 <scm_setsystemclock>
}
 801005e:	bf00      	nop
 8010060:	3708      	adds	r7, #8
 8010062:	46bd      	mov	sp, r7
 8010064:	bd80      	pop	{r7, pc}
 8010066:	bf00      	nop
 8010068:	20006b6b 	.word	0x20006b6b

0801006c <LST_init_head>:

/******************************************************************************
 * Function Definitions
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 801006c:	b480      	push	{r7}
 801006e:	b083      	sub	sp, #12
 8010070:	af00      	add	r7, sp, #0
 8010072:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	687a      	ldr	r2, [r7, #4]
 8010078:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	687a      	ldr	r2, [r7, #4]
 801007e:	605a      	str	r2, [r3, #4]
}
 8010080:	bf00      	nop
 8010082:	370c      	adds	r7, #12
 8010084:	46bd      	mov	sp, r7
 8010086:	f85d 7b04 	ldr.w	r7, [sp], #4
 801008a:	4770      	bx	lr

0801008c <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 801008c:	b480      	push	{r7}
 801008e:	b087      	sub	sp, #28
 8010090:	af00      	add	r7, sp, #0
 8010092:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8010094:	f3ef 8310 	mrs	r3, PRIMASK
 8010098:	60fb      	str	r3, [r7, #12]
  return(result);
 801009a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 801009c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801009e:	b672      	cpsid	i
}
 80100a0:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 80100a2:	687b      	ldr	r3, [r7, #4]
 80100a4:	681b      	ldr	r3, [r3, #0]
 80100a6:	687a      	ldr	r2, [r7, #4]
 80100a8:	429a      	cmp	r2, r3
 80100aa:	d102      	bne.n	80100b2 <LST_is_empty+0x26>
  {
    return_value = TRUE;
 80100ac:	2301      	movs	r3, #1
 80100ae:	75fb      	strb	r3, [r7, #23]
 80100b0:	e001      	b.n	80100b6 <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 80100b2:	2300      	movs	r3, #0
 80100b4:	75fb      	strb	r3, [r7, #23]
 80100b6:	693b      	ldr	r3, [r7, #16]
 80100b8:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80100ba:	68bb      	ldr	r3, [r7, #8]
 80100bc:	f383 8810 	msr	PRIMASK, r3
}
 80100c0:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 80100c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80100c4:	4618      	mov	r0, r3
 80100c6:	371c      	adds	r7, #28
 80100c8:	46bd      	mov	sp, r7
 80100ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100ce:	4770      	bx	lr

080100d0 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 80100d0:	b480      	push	{r7}
 80100d2:	b087      	sub	sp, #28
 80100d4:	af00      	add	r7, sp, #0
 80100d6:	6078      	str	r0, [r7, #4]
 80100d8:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80100da:	f3ef 8310 	mrs	r3, PRIMASK
 80100de:	60fb      	str	r3, [r7, #12]
  return(result);
 80100e0:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80100e2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80100e4:	b672      	cpsid	i
}
 80100e6:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 80100e8:	687b      	ldr	r3, [r7, #4]
 80100ea:	681a      	ldr	r2, [r3, #0]
 80100ec:	683b      	ldr	r3, [r7, #0]
 80100ee:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 80100f0:	683b      	ldr	r3, [r7, #0]
 80100f2:	687a      	ldr	r2, [r7, #4]
 80100f4:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	683a      	ldr	r2, [r7, #0]
 80100fa:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 80100fc:	683b      	ldr	r3, [r7, #0]
 80100fe:	681b      	ldr	r3, [r3, #0]
 8010100:	683a      	ldr	r2, [r7, #0]
 8010102:	605a      	str	r2, [r3, #4]
 8010104:	697b      	ldr	r3, [r7, #20]
 8010106:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010108:	693b      	ldr	r3, [r7, #16]
 801010a:	f383 8810 	msr	PRIMASK, r3
}
 801010e:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8010110:	bf00      	nop
 8010112:	371c      	adds	r7, #28
 8010114:	46bd      	mov	sp, r7
 8010116:	f85d 7b04 	ldr.w	r7, [sp], #4
 801011a:	4770      	bx	lr

0801011c <LST_insert_tail>:

void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 801011c:	b480      	push	{r7}
 801011e:	b087      	sub	sp, #28
 8010120:	af00      	add	r7, sp, #0
 8010122:	6078      	str	r0, [r7, #4]
 8010124:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8010126:	f3ef 8310 	mrs	r3, PRIMASK
 801012a:	60fb      	str	r3, [r7, #12]
  return(result);
 801012c:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 801012e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8010130:	b672      	cpsid	i
}
 8010132:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 8010134:	683b      	ldr	r3, [r7, #0]
 8010136:	687a      	ldr	r2, [r7, #4]
 8010138:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 801013a:	687b      	ldr	r3, [r7, #4]
 801013c:	685a      	ldr	r2, [r3, #4]
 801013e:	683b      	ldr	r3, [r7, #0]
 8010140:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	683a      	ldr	r2, [r7, #0]
 8010146:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8010148:	683b      	ldr	r3, [r7, #0]
 801014a:	685b      	ldr	r3, [r3, #4]
 801014c:	683a      	ldr	r2, [r7, #0]
 801014e:	601a      	str	r2, [r3, #0]
 8010150:	697b      	ldr	r3, [r7, #20]
 8010152:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010154:	693b      	ldr	r3, [r7, #16]
 8010156:	f383 8810 	msr	PRIMASK, r3
}
 801015a:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 801015c:	bf00      	nop
 801015e:	371c      	adds	r7, #28
 8010160:	46bd      	mov	sp, r7
 8010162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010166:	4770      	bx	lr

08010168 <LST_remove_node>:

void LST_remove_node (tListNode * node)
{
 8010168:	b480      	push	{r7}
 801016a:	b087      	sub	sp, #28
 801016c:	af00      	add	r7, sp, #0
 801016e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8010170:	f3ef 8310 	mrs	r3, PRIMASK
 8010174:	60fb      	str	r3, [r7, #12]
  return(result);
 8010176:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8010178:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801017a:	b672      	cpsid	i
}
 801017c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 801017e:	687b      	ldr	r3, [r7, #4]
 8010180:	685b      	ldr	r3, [r3, #4]
 8010182:	687a      	ldr	r2, [r7, #4]
 8010184:	6812      	ldr	r2, [r2, #0]
 8010186:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8010188:	687b      	ldr	r3, [r7, #4]
 801018a:	681b      	ldr	r3, [r3, #0]
 801018c:	687a      	ldr	r2, [r7, #4]
 801018e:	6852      	ldr	r2, [r2, #4]
 8010190:	605a      	str	r2, [r3, #4]
 8010192:	697b      	ldr	r3, [r7, #20]
 8010194:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010196:	693b      	ldr	r3, [r7, #16]
 8010198:	f383 8810 	msr	PRIMASK, r3
}
 801019c:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 801019e:	bf00      	nop
 80101a0:	371c      	adds	r7, #28
 80101a2:	46bd      	mov	sp, r7
 80101a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101a8:	4770      	bx	lr

080101aa <LST_remove_head>:

void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 80101aa:	b580      	push	{r7, lr}
 80101ac:	b086      	sub	sp, #24
 80101ae:	af00      	add	r7, sp, #0
 80101b0:	6078      	str	r0, [r7, #4]
 80101b2:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80101b4:	f3ef 8310 	mrs	r3, PRIMASK
 80101b8:	60fb      	str	r3, [r7, #12]
  return(result);
 80101ba:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80101bc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80101be:	b672      	cpsid	i
}
 80101c0:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 80101c2:	687b      	ldr	r3, [r7, #4]
 80101c4:	681a      	ldr	r2, [r3, #0]
 80101c6:	683b      	ldr	r3, [r7, #0]
 80101c8:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	681b      	ldr	r3, [r3, #0]
 80101ce:	4618      	mov	r0, r3
 80101d0:	f7ff ffca 	bl	8010168 <LST_remove_node>
 80101d4:	697b      	ldr	r3, [r7, #20]
 80101d6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80101d8:	693b      	ldr	r3, [r7, #16]
 80101da:	f383 8810 	msr	PRIMASK, r3
}
 80101de:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80101e0:	bf00      	nop
 80101e2:	3718      	adds	r7, #24
 80101e4:	46bd      	mov	sp, r7
 80101e6:	bd80      	pop	{r7, pc}

080101e8 <LST_get_next_node>:

  return (size);
}

void LST_get_next_node (tListNode * ref_node, tListNode ** node)
{
 80101e8:	b480      	push	{r7}
 80101ea:	b087      	sub	sp, #28
 80101ec:	af00      	add	r7, sp, #0
 80101ee:	6078      	str	r0, [r7, #4]
 80101f0:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80101f2:	f3ef 8310 	mrs	r3, PRIMASK
 80101f6:	60fb      	str	r3, [r7, #12]
  return(result);
 80101f8:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80101fa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80101fc:	b672      	cpsid	i
}
 80101fe:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = ref_node->next;
 8010200:	687b      	ldr	r3, [r7, #4]
 8010202:	681a      	ldr	r2, [r3, #0]
 8010204:	683b      	ldr	r3, [r7, #0]
 8010206:	601a      	str	r2, [r3, #0]
 8010208:	697b      	ldr	r3, [r7, #20]
 801020a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801020c:	693b      	ldr	r3, [r7, #16]
 801020e:	f383 8810 	msr	PRIMASK, r3
}
 8010212:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8010214:	bf00      	nop
 8010216:	371c      	adds	r7, #28
 8010218:	46bd      	mov	sp, r7
 801021a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801021e:	4770      	bx	lr

08010220 <BAES_CmacKeyRoll>:
 * AES key roll for CMAC Mode
 *
 */

static void BAES_CmacKeyRoll( uint32_t* key )
{
 8010220:	b480      	push	{r7}
 8010222:	b085      	sub	sp, #20
 8010224:	af00      	add	r7, sp, #0
 8010226:	6078      	str	r0, [r7, #4]
  uint32_t carry = ((key[0] >> 31) & 1) * 0x87UL;
 8010228:	687b      	ldr	r3, [r7, #4]
 801022a:	681b      	ldr	r3, [r3, #0]
 801022c:	0fda      	lsrs	r2, r3, #31
 801022e:	4613      	mov	r3, r2
 8010230:	00db      	lsls	r3, r3, #3
 8010232:	4413      	add	r3, r2
 8010234:	011a      	lsls	r2, r3, #4
 8010236:	1ad3      	subs	r3, r2, r3
 8010238:	60fb      	str	r3, [r7, #12]
  key[0] = (key[0] << 1) | (key[1] >> 31);
 801023a:	687b      	ldr	r3, [r7, #4]
 801023c:	681b      	ldr	r3, [r3, #0]
 801023e:	005a      	lsls	r2, r3, #1
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	3304      	adds	r3, #4
 8010244:	681b      	ldr	r3, [r3, #0]
 8010246:	0fdb      	lsrs	r3, r3, #31
 8010248:	431a      	orrs	r2, r3
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	601a      	str	r2, [r3, #0]
  key[1] = (key[1] << 1) | (key[2] >> 31);
 801024e:	687b      	ldr	r3, [r7, #4]
 8010250:	3304      	adds	r3, #4
 8010252:	681b      	ldr	r3, [r3, #0]
 8010254:	0059      	lsls	r1, r3, #1
 8010256:	687b      	ldr	r3, [r7, #4]
 8010258:	3308      	adds	r3, #8
 801025a:	681b      	ldr	r3, [r3, #0]
 801025c:	0fda      	lsrs	r2, r3, #31
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	3304      	adds	r3, #4
 8010262:	430a      	orrs	r2, r1
 8010264:	601a      	str	r2, [r3, #0]
  key[2] = (key[2] << 1) | (key[3] >> 31);
 8010266:	687b      	ldr	r3, [r7, #4]
 8010268:	3308      	adds	r3, #8
 801026a:	681b      	ldr	r3, [r3, #0]
 801026c:	0059      	lsls	r1, r3, #1
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	330c      	adds	r3, #12
 8010272:	681b      	ldr	r3, [r3, #0]
 8010274:	0fda      	lsrs	r2, r3, #31
 8010276:	687b      	ldr	r3, [r7, #4]
 8010278:	3308      	adds	r3, #8
 801027a:	430a      	orrs	r2, r1
 801027c:	601a      	str	r2, [r3, #0]
  key[3] = (key[3] << 1) ^ carry;
 801027e:	687b      	ldr	r3, [r7, #4]
 8010280:	330c      	adds	r3, #12
 8010282:	681b      	ldr	r3, [r3, #0]
 8010284:	0059      	lsls	r1, r3, #1
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	330c      	adds	r3, #12
 801028a:	68fa      	ldr	r2, [r7, #12]
 801028c:	404a      	eors	r2, r1
 801028e:	601a      	str	r2, [r3, #0]
}
 8010290:	bf00      	nop
 8010292:	3714      	adds	r7, #20
 8010294:	46bd      	mov	sp, r7
 8010296:	f85d 7b04 	ldr.w	r7, [sp], #4
 801029a:	4770      	bx	lr

0801029c <BAES_CmacRawEncrypt>:
 *
 */

static void BAES_CmacRawEncrypt( const uint32_t* input,
                                 uint32_t* output )
{
 801029c:	b580      	push	{r7, lr}
 801029e:	b082      	sub	sp, #8
 80102a0:	af00      	add	r7, sp, #0
 80102a2:	6078      	str	r0, [r7, #4]
 80102a4:	6039      	str	r1, [r7, #0]
#if CFG_BAES_SW == 0

  HW_AES_Crypt( input, output );
 80102a6:	6839      	ldr	r1, [r7, #0]
 80102a8:	6878      	ldr	r0, [r7, #4]
 80102aa:	f7fa f951 	bl	800a550 <HW_AES_Crypt>
  BAES_CMAC_t *av = &BAES_CMAC_var;

  BAES_RawEncrypt( input, output, av->exp_key );

#endif /* CFG_BAES_SW != 0 */
}
 80102ae:	bf00      	nop
 80102b0:	3708      	adds	r7, #8
 80102b2:	46bd      	mov	sp, r7
 80102b4:	bd80      	pop	{r7, pc}
	...

080102b8 <BAES_CmacSetKey>:
 * Initialization for AES-CMAC for Authentication TAG Generation.
 * Must be called each time a new CMAC has to be computed.
 */

void BAES_CmacSetKey( const uint8_t* key )
{
 80102b8:	b580      	push	{r7, lr}
 80102ba:	b084      	sub	sp, #16
 80102bc:	af00      	add	r7, sp, #0
 80102be:	6078      	str	r0, [r7, #4]
  BAES_CMAC_t *av = &BAES_CMAC_var;
 80102c0:	4b0d      	ldr	r3, [pc, #52]	@ (80102f8 <BAES_CmacSetKey+0x40>)
 80102c2:	60fb      	str	r3, [r7, #12]

  /* Initialize for ECB encoding */

#if CFG_BAES_SW == 0

  HW_AES_Enable( );
 80102c4:	f7fa f8a2 	bl	800a40c <HW_AES_Enable>
  HW_AES_SetKey( HW_AES_ENC, key );
 80102c8:	6879      	ldr	r1, [r7, #4]
 80102ca:	2001      	movs	r0, #1
 80102cc:	f7fa f8c8 	bl	800a460 <HW_AES_SetKey>
  BAES_EncKeySchedule( av->exp_key );

#endif /* CFG_BAES_SW != 0 */

  /* set IV to zero */
  av->iv[0] = av->iv[1] = av->iv[2] = av->iv[3] = 0;
 80102d0:	68fb      	ldr	r3, [r7, #12]
 80102d2:	2200      	movs	r2, #0
 80102d4:	60da      	str	r2, [r3, #12]
 80102d6:	68fb      	ldr	r3, [r7, #12]
 80102d8:	68da      	ldr	r2, [r3, #12]
 80102da:	68fb      	ldr	r3, [r7, #12]
 80102dc:	609a      	str	r2, [r3, #8]
 80102de:	68fb      	ldr	r3, [r7, #12]
 80102e0:	689a      	ldr	r2, [r3, #8]
 80102e2:	68fb      	ldr	r3, [r7, #12]
 80102e4:	605a      	str	r2, [r3, #4]
 80102e6:	68fb      	ldr	r3, [r7, #12]
 80102e8:	685a      	ldr	r2, [r3, #4]
 80102ea:	68fb      	ldr	r3, [r7, #12]
 80102ec:	601a      	str	r2, [r3, #0]
}
 80102ee:	bf00      	nop
 80102f0:	3710      	adds	r7, #16
 80102f2:	46bd      	mov	sp, r7
 80102f4:	bd80      	pop	{r7, pc}
 80102f6:	bf00      	nop
 80102f8:	20006b6c 	.word	0x20006b6c

080102fc <BAES_CmacCompute>:
 */

void BAES_CmacCompute( const uint8_t* input,
                       uint32_t size,
                       uint8_t* output )
{
 80102fc:	b580      	push	{r7, lr}
 80102fe:	b098      	sub	sp, #96	@ 0x60
 8010300:	af00      	add	r7, sp, #0
 8010302:	60f8      	str	r0, [r7, #12]
 8010304:	60b9      	str	r1, [r7, #8]
 8010306:	607a      	str	r2, [r7, #4]
  BAES_CMAC_t *av = &BAES_CMAC_var;
 8010308:	4b7e      	ldr	r3, [pc, #504]	@ (8010504 <BAES_CmacCompute+0x208>)
 801030a:	653b      	str	r3, [r7, #80]	@ 0x50
  uint32_t i, last_size;
  uint32_t tmp[4], key[4];
  const uint8_t* ptr = input;
 801030c:	68fb      	ldr	r3, [r7, #12]
 801030e:	657b      	str	r3, [r7, #84]	@ 0x54

  if ( output )
 8010310:	687b      	ldr	r3, [r7, #4]
 8010312:	2b00      	cmp	r3, #0
 8010314:	d044      	beq.n	80103a0 <BAES_CmacCompute+0xa4>
  {
    /* In case of final append, compute size of last block */
    last_size = size % 16;
 8010316:	68bb      	ldr	r3, [r7, #8]
 8010318:	f003 030f 	and.w	r3, r3, #15
 801031c:	65bb      	str	r3, [r7, #88]	@ 0x58
    if ( (size != 0) && (last_size == 0) )
 801031e:	68bb      	ldr	r3, [r7, #8]
 8010320:	2b00      	cmp	r3, #0
 8010322:	d004      	beq.n	801032e <BAES_CmacCompute+0x32>
 8010324:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8010326:	2b00      	cmp	r3, #0
 8010328:	d101      	bne.n	801032e <BAES_CmacCompute+0x32>
      last_size = 16;
 801032a:	2310      	movs	r3, #16
 801032c:	65bb      	str	r3, [r7, #88]	@ 0x58
    size -= last_size;
 801032e:	68ba      	ldr	r2, [r7, #8]
 8010330:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8010332:	1ad3      	subs	r3, r2, r3
 8010334:	60bb      	str	r3, [r7, #8]
  }

  while ( size )
 8010336:	e033      	b.n	80103a0 <BAES_CmacCompute+0xa4>
  {
    /* Load the input of all blocks but the last one
       and xor data with previous tag */
    memcpy( tmp, ptr, 16 );
 8010338:	f107 0320 	add.w	r3, r7, #32
 801033c:	2210      	movs	r2, #16
 801033e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8010340:	4618      	mov	r0, r3
 8010342:	f01f f86c 	bl	802f41e <memcpy>
    BAES_REV_XOR( tmp, av->iv );
 8010346:	6a3b      	ldr	r3, [r7, #32]
 8010348:	643b      	str	r3, [r7, #64]	@ 0x40
  return __builtin_bswap32(value);
 801034a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801034c:	ba1a      	rev	r2, r3
 801034e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010350:	681b      	ldr	r3, [r3, #0]
 8010352:	4053      	eors	r3, r2
 8010354:	623b      	str	r3, [r7, #32]
 8010356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010358:	647b      	str	r3, [r7, #68]	@ 0x44
 801035a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801035c:	ba1a      	rev	r2, r3
 801035e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010360:	685b      	ldr	r3, [r3, #4]
 8010362:	4053      	eors	r3, r2
 8010364:	627b      	str	r3, [r7, #36]	@ 0x24
 8010366:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010368:	64bb      	str	r3, [r7, #72]	@ 0x48
 801036a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801036c:	ba1a      	rev	r2, r3
 801036e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010370:	689b      	ldr	r3, [r3, #8]
 8010372:	4053      	eors	r3, r2
 8010374:	62bb      	str	r3, [r7, #40]	@ 0x28
 8010376:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010378:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801037a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801037c:	ba1a      	rev	r2, r3
 801037e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010380:	68db      	ldr	r3, [r3, #12]
 8010382:	4053      	eors	r3, r2
 8010384:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Encrypt block */
    BAES_CmacRawEncrypt( tmp, av->iv );
 8010386:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8010388:	f107 0320 	add.w	r3, r7, #32
 801038c:	4611      	mov	r1, r2
 801038e:	4618      	mov	r0, r3
 8010390:	f7ff ff84 	bl	801029c <BAES_CmacRawEncrypt>

    /* Next block */
    ptr += 16;
 8010394:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010396:	3310      	adds	r3, #16
 8010398:	657b      	str	r3, [r7, #84]	@ 0x54
    size -= 16;
 801039a:	68bb      	ldr	r3, [r7, #8]
 801039c:	3b10      	subs	r3, #16
 801039e:	60bb      	str	r3, [r7, #8]
  while ( size )
 80103a0:	68bb      	ldr	r3, [r7, #8]
 80103a2:	2b00      	cmp	r3, #0
 80103a4:	d1c8      	bne.n	8010338 <BAES_CmacCompute+0x3c>
  }

  if ( output )
 80103a6:	687b      	ldr	r3, [r7, #4]
 80103a8:	2b00      	cmp	r3, #0
 80103aa:	f000 80a6 	beq.w	80104fa <BAES_CmacCompute+0x1fe>
  {
    /* Load the input bytes left with 0 padding */
    tmp[0] = tmp[1] = tmp[2] = tmp[3] = 0;
 80103ae:	2300      	movs	r3, #0
 80103b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80103b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80103b4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80103b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80103b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80103ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80103bc:	623b      	str	r3, [r7, #32]
    for ( i = 0; i < last_size; i++ )
 80103be:	2300      	movs	r3, #0
 80103c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80103c2:	e01b      	b.n	80103fc <BAES_CmacCompute+0x100>
    {
      BAES_OR_BYTE_BE( tmp, i, ptr[i] );
 80103c4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80103c6:	089a      	lsrs	r2, r3, #2
 80103c8:	0093      	lsls	r3, r2, #2
 80103ca:	3360      	adds	r3, #96	@ 0x60
 80103cc:	443b      	add	r3, r7
 80103ce:	f853 1c40 	ldr.w	r1, [r3, #-64]
 80103d2:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80103d4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80103d6:	4403      	add	r3, r0
 80103d8:	781b      	ldrb	r3, [r3, #0]
 80103da:	4618      	mov	r0, r3
 80103dc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80103de:	43db      	mvns	r3, r3
 80103e0:	f003 0303 	and.w	r3, r3, #3
 80103e4:	00db      	lsls	r3, r3, #3
 80103e6:	fa00 f303 	lsl.w	r3, r0, r3
 80103ea:	4319      	orrs	r1, r3
 80103ec:	0093      	lsls	r3, r2, #2
 80103ee:	3360      	adds	r3, #96	@ 0x60
 80103f0:	443b      	add	r3, r7
 80103f2:	f843 1c40 	str.w	r1, [r3, #-64]
    for ( i = 0; i < last_size; i++ )
 80103f6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80103f8:	3301      	adds	r3, #1
 80103fa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80103fc:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80103fe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8010400:	429a      	cmp	r2, r3
 8010402:	d3df      	bcc.n	80103c4 <BAES_CmacCompute+0xc8>
    }

    /* Compute K1 */
    key[0] = key[1] = key[2] = key[3] = 0;
 8010404:	2300      	movs	r3, #0
 8010406:	61fb      	str	r3, [r7, #28]
 8010408:	69fb      	ldr	r3, [r7, #28]
 801040a:	61bb      	str	r3, [r7, #24]
 801040c:	69bb      	ldr	r3, [r7, #24]
 801040e:	617b      	str	r3, [r7, #20]
 8010410:	697b      	ldr	r3, [r7, #20]
 8010412:	613b      	str	r3, [r7, #16]
    BAES_CmacRawEncrypt( key, key );
 8010414:	f107 0210 	add.w	r2, r7, #16
 8010418:	f107 0310 	add.w	r3, r7, #16
 801041c:	4611      	mov	r1, r2
 801041e:	4618      	mov	r0, r3
 8010420:	f7ff ff3c 	bl	801029c <BAES_CmacRawEncrypt>
    BAES_CmacKeyRoll( key );
 8010424:	f107 0310 	add.w	r3, r7, #16
 8010428:	4618      	mov	r0, r3
 801042a:	f7ff fef9 	bl	8010220 <BAES_CmacKeyRoll>

    /* Add padding and compute K2 if the last block is not full */
    if ( last_size < 16 )
 801042e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8010430:	2b0f      	cmp	r3, #15
 8010432:	d819      	bhi.n	8010468 <BAES_CmacCompute+0x16c>
    {
      BAES_OR_BYTE_BE( tmp, last_size, 0x80 );
 8010434:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8010436:	089a      	lsrs	r2, r3, #2
 8010438:	0093      	lsls	r3, r2, #2
 801043a:	3360      	adds	r3, #96	@ 0x60
 801043c:	443b      	add	r3, r7
 801043e:	f853 1c40 	ldr.w	r1, [r3, #-64]
 8010442:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8010444:	43db      	mvns	r3, r3
 8010446:	f003 0303 	and.w	r3, r3, #3
 801044a:	00db      	lsls	r3, r3, #3
 801044c:	2080      	movs	r0, #128	@ 0x80
 801044e:	fa00 f303 	lsl.w	r3, r0, r3
 8010452:	4319      	orrs	r1, r3
 8010454:	0093      	lsls	r3, r2, #2
 8010456:	3360      	adds	r3, #96	@ 0x60
 8010458:	443b      	add	r3, r7
 801045a:	f843 1c40 	str.w	r1, [r3, #-64]
      BAES_CmacKeyRoll( key );
 801045e:	f107 0310 	add.w	r3, r7, #16
 8010462:	4618      	mov	r0, r3
 8010464:	f7ff fedc 	bl	8010220 <BAES_CmacKeyRoll>
    }

    /* Xor data with previous tag and key */
    for ( i = 0; i < 4; i++ )
 8010468:	2300      	movs	r3, #0
 801046a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801046c:	e01a      	b.n	80104a4 <BAES_CmacCompute+0x1a8>
    {
      tmp[i] ^= av->iv[i] ^ key[i];
 801046e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010470:	009b      	lsls	r3, r3, #2
 8010472:	3360      	adds	r3, #96	@ 0x60
 8010474:	443b      	add	r3, r7
 8010476:	f853 2c40 	ldr.w	r2, [r3, #-64]
 801047a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801047c:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 801047e:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8010482:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010484:	009b      	lsls	r3, r3, #2
 8010486:	3360      	adds	r3, #96	@ 0x60
 8010488:	443b      	add	r3, r7
 801048a:	f853 3c50 	ldr.w	r3, [r3, #-80]
 801048e:	404b      	eors	r3, r1
 8010490:	405a      	eors	r2, r3
 8010492:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010494:	009b      	lsls	r3, r3, #2
 8010496:	3360      	adds	r3, #96	@ 0x60
 8010498:	443b      	add	r3, r7
 801049a:	f843 2c40 	str.w	r2, [r3, #-64]
    for ( i = 0; i < 4; i++ )
 801049e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80104a0:	3301      	adds	r3, #1
 80104a2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80104a4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80104a6:	2b03      	cmp	r3, #3
 80104a8:	d9e1      	bls.n	801046e <BAES_CmacCompute+0x172>
    }

    /* Encrypt block */
    BAES_CmacRawEncrypt( tmp, av->iv );
 80104aa:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80104ac:	f107 0320 	add.w	r3, r7, #32
 80104b0:	4611      	mov	r1, r2
 80104b2:	4618      	mov	r0, r3
 80104b4:	f7ff fef2 	bl	801029c <BAES_CmacRawEncrypt>

#if CFG_BAES_SW == 0

    HW_AES_Disable( );
 80104b8:	f7fa f88c 	bl	800a5d4 <HW_AES_Disable>

#endif /* CFG_BAES_SW == 0 */

    /* Write the tag */
    BAES_COPY_REV( tmp, av->iv );
 80104bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80104be:	681b      	ldr	r3, [r3, #0]
 80104c0:	633b      	str	r3, [r7, #48]	@ 0x30
 80104c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80104c4:	ba1b      	rev	r3, r3
 80104c6:	623b      	str	r3, [r7, #32]
 80104c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80104ca:	685b      	ldr	r3, [r3, #4]
 80104cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80104ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80104d0:	ba1b      	rev	r3, r3
 80104d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80104d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80104d6:	689b      	ldr	r3, [r3, #8]
 80104d8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80104da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80104dc:	ba1b      	rev	r3, r3
 80104de:	62bb      	str	r3, [r7, #40]	@ 0x28
 80104e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80104e2:	68db      	ldr	r3, [r3, #12]
 80104e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80104e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80104e8:	ba1b      	rev	r3, r3
 80104ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    memcpy( output, tmp, 16 );
 80104ec:	f107 0320 	add.w	r3, r7, #32
 80104f0:	2210      	movs	r2, #16
 80104f2:	4619      	mov	r1, r3
 80104f4:	6878      	ldr	r0, [r7, #4]
 80104f6:	f01e ff92 	bl	802f41e <memcpy>
  }
}
 80104fa:	bf00      	nop
 80104fc:	3760      	adds	r7, #96	@ 0x60
 80104fe:	46bd      	mov	sp, r7
 8010500:	bd80      	pop	{r7, pc}
 8010502:	bf00      	nop
 8010504:	20006b6c 	.word	0x20006b6c

08010508 <BAES_Reset>:
#include "baes_global.h"

/*****************************************************************************/

void BAES_Reset( void )
{
 8010508:	b580      	push	{r7, lr}
 801050a:	af00      	add	r7, sp, #0
#if CFG_BAES_SW == 0

  HW_AES_Disable( );
 801050c:	f7fa f862 	bl	800a5d4 <HW_AES_Disable>

#endif
}
 8010510:	bf00      	nop
 8010512:	bd80      	pop	{r7, pc}

08010514 <BAES_EcbCrypt>:

void BAES_EcbCrypt( const uint8_t* key,
                    const uint8_t* input,
                    uint8_t* output,
                    int enc )
{
 8010514:	b580      	push	{r7, lr}
 8010516:	b08a      	sub	sp, #40	@ 0x28
 8010518:	af00      	add	r7, sp, #0
 801051a:	60f8      	str	r0, [r7, #12]
 801051c:	60b9      	str	r1, [r7, #8]
 801051e:	607a      	str	r2, [r7, #4]
 8010520:	603b      	str	r3, [r7, #0]
  uint32_t tmp[4];

#if CFG_BAES_SW == 0

  HW_AES_Enable( );
 8010522:	f7f9 ff73 	bl	800a40c <HW_AES_Enable>
  HW_AES_SetKey( (enc ? (HW_AES_ENC | HW_AES_REV) : (HW_AES_DEC | HW_AES_REV)),
 8010526:	683b      	ldr	r3, [r7, #0]
 8010528:	2b00      	cmp	r3, #0
 801052a:	d001      	beq.n	8010530 <BAES_EcbCrypt+0x1c>
 801052c:	2303      	movs	r3, #3
 801052e:	e000      	b.n	8010532 <BAES_EcbCrypt+0x1e>
 8010530:	2302      	movs	r3, #2
 8010532:	68f9      	ldr	r1, [r7, #12]
 8010534:	4618      	mov	r0, r3
 8010536:	f7f9 ff93 	bl	800a460 <HW_AES_SetKey>
    BAES_EncKeySchedule( exp_key );

#endif /* CFG_BAES_SW != 0 */

  /* Retrieve all bytes from input */
  memcpy( tmp, input, 16 );
 801053a:	f107 0310 	add.w	r3, r7, #16
 801053e:	2210      	movs	r2, #16
 8010540:	68b9      	ldr	r1, [r7, #8]
 8010542:	4618      	mov	r0, r3
 8010544:	f01e ff6b 	bl	802f41e <memcpy>
  BAES_SWAP( tmp );
 8010548:	693b      	ldr	r3, [r7, #16]
 801054a:	627b      	str	r3, [r7, #36]	@ 0x24
 801054c:	69fb      	ldr	r3, [r7, #28]
 801054e:	613b      	str	r3, [r7, #16]
 8010550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010552:	61fb      	str	r3, [r7, #28]
 8010554:	697b      	ldr	r3, [r7, #20]
 8010556:	627b      	str	r3, [r7, #36]	@ 0x24
 8010558:	69bb      	ldr	r3, [r7, #24]
 801055a:	617b      	str	r3, [r7, #20]
 801055c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801055e:	61bb      	str	r3, [r7, #24]

#if CFG_BAES_SW == 0

  HW_AES_Crypt( tmp, tmp );
 8010560:	f107 0210 	add.w	r2, r7, #16
 8010564:	f107 0310 	add.w	r3, r7, #16
 8010568:	4611      	mov	r1, r2
 801056a:	4618      	mov	r0, r3
 801056c:	f7f9 fff0 	bl	800a550 <HW_AES_Crypt>
  HW_AES_Disable( );
 8010570:	f7fa f830 	bl	800a5d4 <HW_AES_Disable>
    BAES_RawEncrypt( tmp, tmp, exp_key );

#endif /* CFG_BAES_SW != 0 */

  /* Write all bytes to output */
  BAES_SWAP( tmp );
 8010574:	693b      	ldr	r3, [r7, #16]
 8010576:	623b      	str	r3, [r7, #32]
 8010578:	69fb      	ldr	r3, [r7, #28]
 801057a:	613b      	str	r3, [r7, #16]
 801057c:	6a3b      	ldr	r3, [r7, #32]
 801057e:	61fb      	str	r3, [r7, #28]
 8010580:	697b      	ldr	r3, [r7, #20]
 8010582:	623b      	str	r3, [r7, #32]
 8010584:	69bb      	ldr	r3, [r7, #24]
 8010586:	617b      	str	r3, [r7, #20]
 8010588:	6a3b      	ldr	r3, [r7, #32]
 801058a:	61bb      	str	r3, [r7, #24]
  memcpy( output, tmp, 16 );
 801058c:	f107 0310 	add.w	r3, r7, #16
 8010590:	2210      	movs	r2, #16
 8010592:	4619      	mov	r1, r3
 8010594:	6878      	ldr	r0, [r7, #4]
 8010596:	f01e ff42 	bl	802f41e <memcpy>
}
 801059a:	bf00      	nop
 801059c:	3728      	adds	r7, #40	@ 0x28
 801059e:	46bd      	mov	sp, r7
 80105a0:	bd80      	pop	{r7, pc}

080105a2 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 80105a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80105a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80105a6:	3304      	adds	r3, #4

080105a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80105a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80105aa:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 80105ac:	d3f9      	bcc.n	80105a2 <CopyDataInit>
  bx lr
 80105ae:	4770      	bx	lr

080105b0 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 80105b0:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 80105b2:	3004      	adds	r0, #4

080105b4 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 80105b4:	4288      	cmp	r0, r1
  bcc FillZerobss
 80105b6:	d3fb      	bcc.n	80105b0 <FillZerobss>
  bx lr
 80105b8:	4770      	bx	lr
	...

080105bc <Reset_Handler>:

  .section .text.Reset_Handler
  .global Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80105bc:	4828      	ldr	r0, [pc, #160]	@ (8010660 <restore_loop_end+0x4>)
  mov   sp, r0          /* set stack pointer */
 80105be:	4685      	mov	sp, r0
/* If we exit from standby mode, restore CPU context and jump to asleep point. */
   BL      is_boot_from_standby
 80105c0:	f7fa fd9a 	bl	800b0f8 <is_boot_from_standby>
   CMP     R0, #1
 80105c4:	2801      	cmp	r0, #1
   BEQ     CPUcontextRestore
 80105c6:	d023      	beq.n	8010610 <CPUcontextRestore>
/* buffer for local variables (up to 10)from is_boot_from_standby*/
   SUB     SP, SP, #0x28
 80105c8:	b08a      	sub	sp, #40	@ 0x28
/* end of specific code section for standby */
/* Call the clock system initialization function.*/
  bl  SystemInit
 80105ca:	f7f1 f99f 	bl	800190c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 80105ce:	4825      	ldr	r0, [pc, #148]	@ (8010664 <restore_loop_end+0x8>)
 80105d0:	4925      	ldr	r1, [pc, #148]	@ (8010668 <restore_loop_end+0xc>)
 80105d2:	4a26      	ldr	r2, [pc, #152]	@ (801066c <restore_loop_end+0x10>)
 80105d4:	2300      	movs	r3, #0
 80105d6:	f7ff ffe7 	bl	80105a8 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 80105da:	4825      	ldr	r0, [pc, #148]	@ (8010670 <restore_loop_end+0x14>)
 80105dc:	4925      	ldr	r1, [pc, #148]	@ (8010674 <restore_loop_end+0x18>)
 80105de:	2300      	movs	r3, #0
 80105e0:	f7ff ffe8 	bl	80105b4 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80105e4:	f01e fef2 	bl	802f3cc <__libc_init_array>
/* Call the application s entry point.*/
  bl	main
 80105e8:	f7f0 f994 	bl	8000914 <main>

080105ec <LoopForever>:

LoopForever:
  b LoopForever
 80105ec:	e7fe      	b.n	80105ec <LoopForever>

080105ee <CPUcontextSave>:

/* These 2 functions are designed to save and then restore CPU context. */
  .global CPUcontextSave
  .type CPUcontextSave, %function
CPUcontextSave:
        PUSH   { r4 - r7, lr }       /* store R4-R7 and LR (5 words) onto the stack */
 80105ee:	b5f0      	push	{r4, r5, r6, r7, lr}
        MOV    R3, R8                /* mov thread {r8 - r12} to {r3 - r7} */
 80105f0:	4643      	mov	r3, r8
        MOV    R4, R9
 80105f2:	464c      	mov	r4, r9
        MOV    R5, R10
 80105f4:	4655      	mov	r5, sl
        MOV    R6, R11
 80105f6:	465e      	mov	r6, fp
        MOV    R7, R12
 80105f8:	4667      	mov	r7, ip
        PUSH   {R3-R7}                 /* store R8-R12 (5 words) onto the stack */
 80105fa:	b4f8      	push	{r3, r4, r5, r6, r7}
        LDR    R4, =backup_MSP         /* load address of backup_MSP into R4 */
 80105fc:	4c1e      	ldr	r4, [pc, #120]	@ (8010678 <restore_loop_end+0x1c>)
        MOV    R3, SP                  /* load the stack pointer into R3 */
 80105fe:	466b      	mov	r3, sp
        STR    R3, [R4]                /* store the MSP into backup_MSP */
 8010600:	6023      	str	r3, [r4, #0]
        DSB
 8010602:	f3bf 8f4f 	dsb	sy
        bl enter_standby_notification;
 8010606:	f7fa fdb1 	bl	800b16c <enter_standby_notification>
        WFI                            /* all saved, trigger deep sleep */
 801060a:	bf30      	wfi
        bl exit_standby_notification;
 801060c:	f7fa fdb5 	bl	800b17a <exit_standby_notification>

08010610 <CPUcontextRestore>:
CPUcontextRestore:
  /* Even if we fall through the WFI instruction, we will immediately
   * execute a context restore and end up where we left off with no
   * ill effects.  Normally at this point the core will either be
   * powered off or reset (depending on the deep sleep level). */
        LDR    R4, =backup_MSP       /* load address of backup_MSP into R4 */
 8010610:	4c19      	ldr	r4, [pc, #100]	@ (8010678 <restore_loop_end+0x1c>)
        LDR    R4, [R4]              /* load the SP from backup_MSP */
 8010612:	6824      	ldr	r4, [r4, #0]
        MOV    SP, R4                /* restore the SP from R4 */
 8010614:	46a5      	mov	sp, r4
        POP   {R3-R7}                /* load R8-R12 (5 words) from the stack */
 8010616:	bcf8      	pop	{r3, r4, r5, r6, r7}
        MOV    R8, R3                /* mov {r3 - r7} to {r8 - r12} */
 8010618:	4698      	mov	r8, r3
        MOV    R9, R4
 801061a:	46a1      	mov	r9, r4
        MOV    R10, R5
 801061c:	46aa      	mov	sl, r5
        MOV    R11, R6
 801061e:	46b3      	mov	fp, r6
        MOV    R12, R7
 8010620:	46bc      	mov	ip, r7
        POP   { R4 - R7, PC }        /*load R4-R7 and PC (5 words) from the stack */
 8010622:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010624 <backup_system_register>:
/* R0 -> register_backup_table array current item address */
/* R1 -> loop counter (from register_backup_table_size to 0) */
/* R2 -> register_backup_table array current item value */

backup_loop_init:
        LDR    R0, =register_backup_table        /* R0 points to the first array item */
 8010624:	4815      	ldr	r0, [pc, #84]	@ (801067c <restore_loop_end+0x20>)
        LDR    R1, =register_backup_table_size
 8010626:	4916      	ldr	r1, [pc, #88]	@ (8010680 <restore_loop_end+0x24>)
        LDR    R1, [R1]                          /* R1 contains the number of registers in the array */
 8010628:	6809      	ldr	r1, [r1, #0]

0801062a <backup_loop_iter>:

backup_loop_iter:
        /* Offset processing */
        LDR    R2, [R0], #4                      /* R2 contains the register_backup_table current item (register address) */
 801062a:	f850 2b04 	ldr.w	r2, [r0], #4
                                                 /* R0 points to the next register_backup_table item (uint32_t items -> 4 bytes added to previous address) */

        /* Register value backup */
        LDR    R2, [R2]                          /* R2 contains now the register value to backup */
 801062e:	6812      	ldr	r2, [r2, #0]
        PUSH   {R2}                              /* Push register value into the stack */
 8010630:	b404      	push	{r2}

        /* Loop iteration control */
        SUBS   R1, #1                            /* Decrement loop counter by 1 and update APSR (Application Processor Status Register) */
 8010632:	3901      	subs	r1, #1
        BNE    backup_loop_iter                  /* Loop continues until Z flag is set (still array item to handle) */
 8010634:	d1f9      	bne.n	801062a <backup_loop_iter>

08010636 <backup_loop_end>:

backup_loop_end:
        BX LR                                    /* Return to caller */
 8010636:	4770      	bx	lr

08010638 <restore_system_register>:
/* R0 -> register_backup_table array current item address */
/* R1 -> loop counter (from register_backup_table_size to 0) */
/* R2 -> register_backup_table array current item value */

restore_loop_init:
        LDR    R0, =register_backup_table         /* R0 points to the first array item */
 8010638:	4810      	ldr	r0, [pc, #64]	@ (801067c <restore_loop_end+0x20>)

        /* Reverse loop: counter initial value processing */
        LDR    R1, =register_backup_table_size
 801063a:	4911      	ldr	r1, [pc, #68]	@ (8010680 <restore_loop_end+0x24>)
        LDR    R1, [R1]                          /* R1 contains the number of registers in the array */
 801063c:	6809      	ldr	r1, [r1, #0]
        SUB    R1, #1                            /* R1 now contains last array item index (register_backup_table_size - 1) */
 801063e:	f1a1 0101 	sub.w	r1, r1, #1

        /* Reverse loop: apply offset to current array index (point to last array element) */
        LSL    R1, #2              /* Left shift R1 by 2 */
 8010642:	ea4f 0181 	mov.w	r1, r1, lsl #2
        ADD    R0, R1              /* R0 now points to last array item (register_backup_table + (register_backup_table_size - 1) * 4) */
 8010646:	4408      	add	r0, r1

        LSR    R1, #2                            /* Reverse left shift operation on R1 */
 8010648:	ea4f 0191 	mov.w	r1, r1, lsr #2
        ADD    R1, #1                            /* Re-add 1 to R1 (array length) */
 801064c:	f101 0101 	add.w	r1, r1, #1

08010650 <restore_loop_iter>:

/* Reverse loop */
restore_loop_iter:
        /* Offset processing  */
        LDR    R2, [R0], #-4                     /* R2 contains the register_backup_table current item (register address) */
 8010650:	f850 2904 	ldr.w	r2, [r0], #-4
                                                 /* R0 now points to the previous register_backup_table item (uint32_t items -> 4 bytes subtracted to previous address) */

        /* Register value restoration */
        POP    {R3}                              /* Head of stack popped into R3. R3 contains register value to restore */
 8010654:	bc08      	pop	{r3}
        STR    R3, [R2]                          /* Write backuped value into the register */
 8010656:	6013      	str	r3, [r2, #0]

        /* Loop iteration control */
        SUBS   R1, #1                            /* Decrement loop counter by 1 and update APSR (Application Processor Status Register) */
 8010658:	3901      	subs	r1, #1
        BNE    restore_loop_iter                 /* Loop continues until Z flag is set (still array item to handle) */
 801065a:	d1f9      	bne.n	8010650 <restore_loop_iter>

0801065c <restore_loop_end>:

restore_loop_end:
        BX LR                                    /* Return to caller */
 801065c:	4770      	bx	lr
 801065e:	0000      	.short	0x0000
  ldr   r0, =_estack
 8010660:	20020000 	.word	0x20020000
  INIT_DATA _sdata, _edata, _sidata
 8010664:	20000000 	.word	0x20000000
 8010668:	200004d0 	.word	0x200004d0
 801066c:	08031f68 	.word	0x08031f68
  INIT_BSS _sbss, _ebss
 8010670:	200004d0 	.word	0x200004d0
 8010674:	2000a1d4 	.word	0x2000a1d4
        LDR    R4, =backup_MSP         /* load address of backup_MSP into R4 */
 8010678:	200069f4 	.word	0x200069f4
        LDR    R0, =register_backup_table        /* R0 points to the first array item */
 801067c:	08031690 	.word	0x08031690
        LDR    R1, =register_backup_table_size
 8010680:	080316a4 	.word	0x080316a4

08010684 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 8010684:	b580      	push	{r7, lr}
 8010686:	b090      	sub	sp, #64	@ 0x40
 8010688:	af00      	add	r7, sp, #0
 801068a:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 801068c:	4b76      	ldr	r3, [pc, #472]	@ (8010868 <UTIL_SEQ_Run+0x1e4>)
 801068e:	681b      	ldr	r3, [r3, #0]
 8010690:	62bb      	str	r3, [r7, #40]	@ 0x28
  SuperMask &= Mask_bm;
 8010692:	4b75      	ldr	r3, [pc, #468]	@ (8010868 <UTIL_SEQ_Run+0x1e4>)
 8010694:	681a      	ldr	r2, [r3, #0]
 8010696:	687b      	ldr	r3, [r7, #4]
 8010698:	4013      	ands	r3, r2
 801069a:	4a73      	ldr	r2, [pc, #460]	@ (8010868 <UTIL_SEQ_Run+0x1e4>)
 801069c:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 801069e:	4b73      	ldr	r3, [pc, #460]	@ (801086c <UTIL_SEQ_Run+0x1e8>)
 80106a0:	681b      	ldr	r3, [r3, #0]
 80106a2:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 80106a4:	4b72      	ldr	r3, [pc, #456]	@ (8010870 <UTIL_SEQ_Run+0x1ec>)
 80106a6:	681b      	ldr	r3, [r3, #0]
 80106a8:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 80106aa:	4b72      	ldr	r3, [pc, #456]	@ (8010874 <UTIL_SEQ_Run+0x1f0>)
 80106ac:	681b      	ldr	r3, [r3, #0]
 80106ae:	633b      	str	r3, [r7, #48]	@ 0x30
  local_evtwaited =  EvtWaited;
 80106b0:	4b71      	ldr	r3, [pc, #452]	@ (8010878 <UTIL_SEQ_Run+0x1f4>)
 80106b2:	681b      	ldr	r3, [r3, #0]
 80106b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 80106b6:	e08d      	b.n	80107d4 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 80106b8:	2300      	movs	r3, #0
 80106ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 80106bc:	e002      	b.n	80106c4 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 80106be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80106c0:	3301      	adds	r3, #1
 80106c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 80106c4:	4a6d      	ldr	r2, [pc, #436]	@ (801087c <UTIL_SEQ_Run+0x1f8>)
 80106c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80106c8:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80106cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80106ce:	401a      	ands	r2, r3
 80106d0:	4b65      	ldr	r3, [pc, #404]	@ (8010868 <UTIL_SEQ_Run+0x1e4>)
 80106d2:	681b      	ldr	r3, [r3, #0]
 80106d4:	4013      	ands	r3, r2
 80106d6:	2b00      	cmp	r3, #0
 80106d8:	d0f1      	beq.n	80106be <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 80106da:	4a68      	ldr	r2, [pc, #416]	@ (801087c <UTIL_SEQ_Run+0x1f8>)
 80106dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80106de:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80106e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80106e4:	401a      	ands	r2, r3
 80106e6:	4b60      	ldr	r3, [pc, #384]	@ (8010868 <UTIL_SEQ_Run+0x1e4>)
 80106e8:	681b      	ldr	r3, [r3, #0]
 80106ea:	4013      	ands	r3, r2
 80106ec:	627b      	str	r3, [r7, #36]	@ 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 80106ee:	4a63      	ldr	r2, [pc, #396]	@ (801087c <UTIL_SEQ_Run+0x1f8>)
 80106f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80106f2:	00db      	lsls	r3, r3, #3
 80106f4:	4413      	add	r3, r2
 80106f6:	685a      	ldr	r2, [r3, #4]
 80106f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80106fa:	4013      	ands	r3, r2
 80106fc:	2b00      	cmp	r3, #0
 80106fe:	d106      	bne.n	801070e <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 8010700:	4a5e      	ldr	r2, [pc, #376]	@ (801087c <UTIL_SEQ_Run+0x1f8>)
 8010702:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010704:	00db      	lsls	r3, r3, #3
 8010706:	4413      	add	r3, r2
 8010708:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801070c:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 801070e:	4a5b      	ldr	r2, [pc, #364]	@ (801087c <UTIL_SEQ_Run+0x1f8>)
 8010710:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010712:	00db      	lsls	r3, r3, #3
 8010714:	4413      	add	r3, r2
 8010716:	685a      	ldr	r2, [r3, #4]
 8010718:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801071a:	4013      	ands	r3, r2
 801071c:	4618      	mov	r0, r3
 801071e:	f000 f921 	bl	8010964 <SEQ_BitPosition>
 8010722:	4603      	mov	r3, r0
 8010724:	461a      	mov	r2, r3
 8010726:	4b56      	ldr	r3, [pc, #344]	@ (8010880 <UTIL_SEQ_Run+0x1fc>)
 8010728:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 801072a:	4a54      	ldr	r2, [pc, #336]	@ (801087c <UTIL_SEQ_Run+0x1f8>)
 801072c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801072e:	00db      	lsls	r3, r3, #3
 8010730:	4413      	add	r3, r2
 8010732:	685a      	ldr	r2, [r3, #4]
 8010734:	4b52      	ldr	r3, [pc, #328]	@ (8010880 <UTIL_SEQ_Run+0x1fc>)
 8010736:	681b      	ldr	r3, [r3, #0]
 8010738:	2101      	movs	r1, #1
 801073a:	fa01 f303 	lsl.w	r3, r1, r3
 801073e:	43db      	mvns	r3, r3
 8010740:	401a      	ands	r2, r3
 8010742:	494e      	ldr	r1, [pc, #312]	@ (801087c <UTIL_SEQ_Run+0x1f8>)
 8010744:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010746:	00db      	lsls	r3, r3, #3
 8010748:	440b      	add	r3, r1
 801074a:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801074c:	f3ef 8310 	mrs	r3, PRIMASK
 8010750:	61bb      	str	r3, [r7, #24]
  return(result);
 8010752:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8010754:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8010756:	b672      	cpsid	i
}
 8010758:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 801075a:	4b49      	ldr	r3, [pc, #292]	@ (8010880 <UTIL_SEQ_Run+0x1fc>)
 801075c:	681b      	ldr	r3, [r3, #0]
 801075e:	2201      	movs	r2, #1
 8010760:	fa02 f303 	lsl.w	r3, r2, r3
 8010764:	43da      	mvns	r2, r3
 8010766:	4b41      	ldr	r3, [pc, #260]	@ (801086c <UTIL_SEQ_Run+0x1e8>)
 8010768:	681b      	ldr	r3, [r3, #0]
 801076a:	4013      	ands	r3, r2
 801076c:	4a3f      	ldr	r2, [pc, #252]	@ (801086c <UTIL_SEQ_Run+0x1e8>)
 801076e:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8010770:	2302      	movs	r3, #2
 8010772:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010774:	e013      	b.n	801079e <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 8010776:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010778:	3b01      	subs	r3, #1
 801077a:	4a40      	ldr	r2, [pc, #256]	@ (801087c <UTIL_SEQ_Run+0x1f8>)
 801077c:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8010780:	4b3f      	ldr	r3, [pc, #252]	@ (8010880 <UTIL_SEQ_Run+0x1fc>)
 8010782:	681b      	ldr	r3, [r3, #0]
 8010784:	2201      	movs	r2, #1
 8010786:	fa02 f303 	lsl.w	r3, r2, r3
 801078a:	43da      	mvns	r2, r3
 801078c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801078e:	3b01      	subs	r3, #1
 8010790:	400a      	ands	r2, r1
 8010792:	493a      	ldr	r1, [pc, #232]	@ (801087c <UTIL_SEQ_Run+0x1f8>)
 8010794:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8010798:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801079a:	3b01      	subs	r3, #1
 801079c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801079e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80107a0:	2b00      	cmp	r3, #0
 80107a2:	d1e8      	bne.n	8010776 <UTIL_SEQ_Run+0xf2>
 80107a4:	6a3b      	ldr	r3, [r7, #32]
 80107a6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80107a8:	697b      	ldr	r3, [r7, #20]
 80107aa:	f383 8810 	msr	PRIMASK, r3
}
 80107ae:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 80107b0:	4b33      	ldr	r3, [pc, #204]	@ (8010880 <UTIL_SEQ_Run+0x1fc>)
 80107b2:	681b      	ldr	r3, [r3, #0]
 80107b4:	4a33      	ldr	r2, [pc, #204]	@ (8010884 <UTIL_SEQ_Run+0x200>)
 80107b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80107ba:	4798      	blx	r3

    local_taskset = TaskSet;
 80107bc:	4b2b      	ldr	r3, [pc, #172]	@ (801086c <UTIL_SEQ_Run+0x1e8>)
 80107be:	681b      	ldr	r3, [r3, #0]
 80107c0:	63bb      	str	r3, [r7, #56]	@ 0x38
    local_evtset = EvtSet;
 80107c2:	4b2b      	ldr	r3, [pc, #172]	@ (8010870 <UTIL_SEQ_Run+0x1ec>)
 80107c4:	681b      	ldr	r3, [r3, #0]
 80107c6:	637b      	str	r3, [r7, #52]	@ 0x34
    local_taskmask = TaskMask;
 80107c8:	4b2a      	ldr	r3, [pc, #168]	@ (8010874 <UTIL_SEQ_Run+0x1f0>)
 80107ca:	681b      	ldr	r3, [r3, #0]
 80107cc:	633b      	str	r3, [r7, #48]	@ 0x30
    local_evtwaited = EvtWaited;
 80107ce:	4b2a      	ldr	r3, [pc, #168]	@ (8010878 <UTIL_SEQ_Run+0x1f4>)
 80107d0:	681b      	ldr	r3, [r3, #0]
 80107d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 80107d4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80107d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80107d8:	401a      	ands	r2, r3
 80107da:	4b23      	ldr	r3, [pc, #140]	@ (8010868 <UTIL_SEQ_Run+0x1e4>)
 80107dc:	681b      	ldr	r3, [r3, #0]
 80107de:	4013      	ands	r3, r2
 80107e0:	2b00      	cmp	r3, #0
 80107e2:	d005      	beq.n	80107f0 <UTIL_SEQ_Run+0x16c>
 80107e4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80107e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80107e8:	4013      	ands	r3, r2
 80107ea:	2b00      	cmp	r3, #0
 80107ec:	f43f af64 	beq.w	80106b8 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 80107f0:	4b23      	ldr	r3, [pc, #140]	@ (8010880 <UTIL_SEQ_Run+0x1fc>)
 80107f2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80107f6:	601a      	str	r2, [r3, #0]
  /* if a waited event is present, ignore the IDLE sequence */
  if ((local_evtset & EvtWaited)== 0U)
 80107f8:	4b1f      	ldr	r3, [pc, #124]	@ (8010878 <UTIL_SEQ_Run+0x1f4>)
 80107fa:	681a      	ldr	r2, [r3, #0]
 80107fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80107fe:	4013      	ands	r3, r2
 8010800:	2b00      	cmp	r3, #0
 8010802:	d129      	bne.n	8010858 <UTIL_SEQ_Run+0x1d4>
  {
    UTIL_SEQ_PreIdle( );
 8010804:	f7ef ffe1 	bl	80007ca <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8010808:	f3ef 8310 	mrs	r3, PRIMASK
 801080c:	613b      	str	r3, [r7, #16]
  return(result);
 801080e:	693b      	ldr	r3, [r7, #16]

    UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 8010810:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8010812:	b672      	cpsid	i
}
 8010814:	bf00      	nop
    local_taskset = TaskSet;
 8010816:	4b15      	ldr	r3, [pc, #84]	@ (801086c <UTIL_SEQ_Run+0x1e8>)
 8010818:	681b      	ldr	r3, [r3, #0]
 801081a:	63bb      	str	r3, [r7, #56]	@ 0x38
    local_evtset = EvtSet;
 801081c:	4b14      	ldr	r3, [pc, #80]	@ (8010870 <UTIL_SEQ_Run+0x1ec>)
 801081e:	681b      	ldr	r3, [r3, #0]
 8010820:	637b      	str	r3, [r7, #52]	@ 0x34
    local_taskmask = TaskMask;
 8010822:	4b14      	ldr	r3, [pc, #80]	@ (8010874 <UTIL_SEQ_Run+0x1f0>)
 8010824:	681b      	ldr	r3, [r3, #0]
 8010826:	633b      	str	r3, [r7, #48]	@ 0x30
    if ((local_taskset & local_taskmask & SuperMask) == 0U)
 8010828:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801082a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801082c:	401a      	ands	r2, r3
 801082e:	4b0e      	ldr	r3, [pc, #56]	@ (8010868 <UTIL_SEQ_Run+0x1e4>)
 8010830:	681b      	ldr	r3, [r3, #0]
 8010832:	4013      	ands	r3, r2
 8010834:	2b00      	cmp	r3, #0
 8010836:	d107      	bne.n	8010848 <UTIL_SEQ_Run+0x1c4>
    {
      if ((local_evtset & EvtWaited)== 0U)
 8010838:	4b0f      	ldr	r3, [pc, #60]	@ (8010878 <UTIL_SEQ_Run+0x1f4>)
 801083a:	681a      	ldr	r2, [r3, #0]
 801083c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801083e:	4013      	ands	r3, r2
 8010840:	2b00      	cmp	r3, #0
 8010842:	d101      	bne.n	8010848 <UTIL_SEQ_Run+0x1c4>
      {
        UTIL_SEQ_Idle( );
 8010844:	f7ef ffba 	bl	80007bc <UTIL_SEQ_Idle>
 8010848:	69fb      	ldr	r3, [r7, #28]
 801084a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801084c:	68fb      	ldr	r3, [r7, #12]
 801084e:	f383 8810 	msr	PRIMASK, r3
}
 8010852:	bf00      	nop
      }
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

    UTIL_SEQ_PostIdle( );
 8010854:	f7ef ffc0 	bl	80007d8 <UTIL_SEQ_PostIdle>
  }

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 8010858:	4a03      	ldr	r2, [pc, #12]	@ (8010868 <UTIL_SEQ_Run+0x1e4>)
 801085a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801085c:	6013      	str	r3, [r2, #0]

  return;
 801085e:	bf00      	nop
}
 8010860:	3740      	adds	r7, #64	@ 0x40
 8010862:	46bd      	mov	sp, r7
 8010864:	bd80      	pop	{r7, pc}
 8010866:	bf00      	nop
 8010868:	200000e8 	.word	0x200000e8
 801086c:	20006b7c 	.word	0x20006b7c
 8010870:	20006b80 	.word	0x20006b80
 8010874:	200000e4 	.word	0x200000e4
 8010878:	20006b84 	.word	0x20006b84
 801087c:	20006c0c 	.word	0x20006c0c
 8010880:	20006b88 	.word	0x20006b88
 8010884:	20006b8c 	.word	0x20006b8c

08010888 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 8010888:	b580      	push	{r7, lr}
 801088a:	b088      	sub	sp, #32
 801088c:	af00      	add	r7, sp, #0
 801088e:	60f8      	str	r0, [r7, #12]
 8010890:	60b9      	str	r1, [r7, #8]
 8010892:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8010894:	f3ef 8310 	mrs	r3, PRIMASK
 8010898:	617b      	str	r3, [r7, #20]
  return(result);
 801089a:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 801089c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801089e:	b672      	cpsid	i
}
 80108a0:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 80108a2:	68f8      	ldr	r0, [r7, #12]
 80108a4:	f000 f85e 	bl	8010964 <SEQ_BitPosition>
 80108a8:	4603      	mov	r3, r0
 80108aa:	4619      	mov	r1, r3
 80108ac:	4a06      	ldr	r2, [pc, #24]	@ (80108c8 <UTIL_SEQ_RegTask+0x40>)
 80108ae:	687b      	ldr	r3, [r7, #4]
 80108b0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80108b4:	69fb      	ldr	r3, [r7, #28]
 80108b6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80108b8:	69bb      	ldr	r3, [r7, #24]
 80108ba:	f383 8810 	msr	PRIMASK, r3
}
 80108be:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 80108c0:	bf00      	nop
}
 80108c2:	3720      	adds	r7, #32
 80108c4:	46bd      	mov	sp, r7
 80108c6:	bd80      	pop	{r7, pc}
 80108c8:	20006b8c 	.word	0x20006b8c

080108cc <UTIL_SEQ_SetTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 80108cc:	b480      	push	{r7}
 80108ce:	b087      	sub	sp, #28
 80108d0:	af00      	add	r7, sp, #0
 80108d2:	6078      	str	r0, [r7, #4]
 80108d4:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80108d6:	f3ef 8310 	mrs	r3, PRIMASK
 80108da:	60fb      	str	r3, [r7, #12]
  return(result);
 80108dc:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80108de:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80108e0:	b672      	cpsid	i
}
 80108e2:	bf00      	nop

  TaskSet |= TaskId_bm;
 80108e4:	4b0d      	ldr	r3, [pc, #52]	@ (801091c <UTIL_SEQ_SetTask+0x50>)
 80108e6:	681a      	ldr	r2, [r3, #0]
 80108e8:	687b      	ldr	r3, [r7, #4]
 80108ea:	4313      	orrs	r3, r2
 80108ec:	4a0b      	ldr	r2, [pc, #44]	@ (801091c <UTIL_SEQ_SetTask+0x50>)
 80108ee:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 80108f0:	4a0b      	ldr	r2, [pc, #44]	@ (8010920 <UTIL_SEQ_SetTask+0x54>)
 80108f2:	683b      	ldr	r3, [r7, #0]
 80108f4:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80108f8:	687b      	ldr	r3, [r7, #4]
 80108fa:	431a      	orrs	r2, r3
 80108fc:	4908      	ldr	r1, [pc, #32]	@ (8010920 <UTIL_SEQ_SetTask+0x54>)
 80108fe:	683b      	ldr	r3, [r7, #0]
 8010900:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 8010904:	697b      	ldr	r3, [r7, #20]
 8010906:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010908:	693b      	ldr	r3, [r7, #16]
 801090a:	f383 8810 	msr	PRIMASK, r3
}
 801090e:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8010910:	bf00      	nop
}
 8010912:	371c      	adds	r7, #28
 8010914:	46bd      	mov	sp, r7
 8010916:	f85d 7b04 	ldr.w	r7, [sp], #4
 801091a:	4770      	bx	lr
 801091c:	20006b7c 	.word	0x20006b7c
 8010920:	20006c0c 	.word	0x20006c0c

08010924 <UTIL_SEQ_SetEvt>:

  return;
}

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 8010924:	b480      	push	{r7}
 8010926:	b087      	sub	sp, #28
 8010928:	af00      	add	r7, sp, #0
 801092a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801092c:	f3ef 8310 	mrs	r3, PRIMASK
 8010930:	60fb      	str	r3, [r7, #12]
  return(result);
 8010932:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8010934:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8010936:	b672      	cpsid	i
}
 8010938:	bf00      	nop

  EvtSet |= EvtId_bm;
 801093a:	4b09      	ldr	r3, [pc, #36]	@ (8010960 <UTIL_SEQ_SetEvt+0x3c>)
 801093c:	681a      	ldr	r2, [r3, #0]
 801093e:	687b      	ldr	r3, [r7, #4]
 8010940:	4313      	orrs	r3, r2
 8010942:	4a07      	ldr	r2, [pc, #28]	@ (8010960 <UTIL_SEQ_SetEvt+0x3c>)
 8010944:	6013      	str	r3, [r2, #0]
 8010946:	697b      	ldr	r3, [r7, #20]
 8010948:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801094a:	693b      	ldr	r3, [r7, #16]
 801094c:	f383 8810 	msr	PRIMASK, r3
}
 8010950:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8010952:	bf00      	nop
}
 8010954:	371c      	adds	r7, #28
 8010956:	46bd      	mov	sp, r7
 8010958:	f85d 7b04 	ldr.w	r7, [sp], #4
 801095c:	4770      	bx	lr
 801095e:	bf00      	nop
 8010960:	20006b80 	.word	0x20006b80

08010964 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 8010964:	b480      	push	{r7}
 8010966:	b085      	sub	sp, #20
 8010968:	af00      	add	r7, sp, #0
 801096a:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 801096c:	2300      	movs	r3, #0
 801096e:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 8010970:	687b      	ldr	r3, [r7, #4]
 8010972:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 8010974:	68bb      	ldr	r3, [r7, #8]
 8010976:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801097a:	d204      	bcs.n	8010986 <SEQ_BitPosition+0x22>
 801097c:	2310      	movs	r3, #16
 801097e:	73fb      	strb	r3, [r7, #15]
 8010980:	68bb      	ldr	r3, [r7, #8]
 8010982:	041b      	lsls	r3, r3, #16
 8010984:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 8010986:	68bb      	ldr	r3, [r7, #8]
 8010988:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801098c:	d205      	bcs.n	801099a <SEQ_BitPosition+0x36>
 801098e:	7bfb      	ldrb	r3, [r7, #15]
 8010990:	3308      	adds	r3, #8
 8010992:	73fb      	strb	r3, [r7, #15]
 8010994:	68bb      	ldr	r3, [r7, #8]
 8010996:	021b      	lsls	r3, r3, #8
 8010998:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 801099a:	68bb      	ldr	r3, [r7, #8]
 801099c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80109a0:	d205      	bcs.n	80109ae <SEQ_BitPosition+0x4a>
 80109a2:	7bfb      	ldrb	r3, [r7, #15]
 80109a4:	3304      	adds	r3, #4
 80109a6:	73fb      	strb	r3, [r7, #15]
 80109a8:	68bb      	ldr	r3, [r7, #8]
 80109aa:	011b      	lsls	r3, r3, #4
 80109ac:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 80109ae:	68bb      	ldr	r3, [r7, #8]
 80109b0:	0f1b      	lsrs	r3, r3, #28
 80109b2:	4a07      	ldr	r2, [pc, #28]	@ (80109d0 <SEQ_BitPosition+0x6c>)
 80109b4:	5cd2      	ldrb	r2, [r2, r3]
 80109b6:	7bfb      	ldrb	r3, [r7, #15]
 80109b8:	4413      	add	r3, r2
 80109ba:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 80109bc:	7bfb      	ldrb	r3, [r7, #15]
 80109be:	f1c3 031f 	rsb	r3, r3, #31
 80109c2:	b2db      	uxtb	r3, r3
}
 80109c4:	4618      	mov	r0, r3
 80109c6:	3714      	adds	r7, #20
 80109c8:	46bd      	mov	sp, r7
 80109ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109ce:	4770      	bx	lr
 80109d0:	080317b4 	.word	0x080317b4

080109d4 <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 80109d4:	b580      	push	{r7, lr}
 80109d6:	af00      	add	r7, sp, #0
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 80109d8:	4b04      	ldr	r3, [pc, #16]	@ (80109ec <UTIL_TIMER_Init+0x18>)
 80109da:	2200      	movs	r2, #0
 80109dc:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 80109de:	4b04      	ldr	r3, [pc, #16]	@ (80109f0 <UTIL_TIMER_Init+0x1c>)
 80109e0:	681b      	ldr	r3, [r3, #0]
 80109e2:	4798      	blx	r3
 80109e4:	4603      	mov	r3, r0
}
 80109e6:	4618      	mov	r0, r3
 80109e8:	bd80      	pop	{r7, pc}
 80109ea:	bf00      	nop
 80109ec:	20006c1c 	.word	0x20006c1c
 80109f0:	08031788 	.word	0x08031788

080109f4 <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 80109f4:	b580      	push	{r7, lr}
 80109f6:	b084      	sub	sp, #16
 80109f8:	af00      	add	r7, sp, #0
 80109fa:	60f8      	str	r0, [r7, #12]
 80109fc:	60b9      	str	r1, [r7, #8]
 80109fe:	603b      	str	r3, [r7, #0]
 8010a00:	4613      	mov	r3, r2
 8010a02:	71fb      	strb	r3, [r7, #7]
  if((TimerObject != NULL) && (Callback != NULL))
 8010a04:	68fb      	ldr	r3, [r7, #12]
 8010a06:	2b00      	cmp	r3, #0
 8010a08:	d023      	beq.n	8010a52 <UTIL_TIMER_Create+0x5e>
 8010a0a:	683b      	ldr	r3, [r7, #0]
 8010a0c:	2b00      	cmp	r3, #0
 8010a0e:	d020      	beq.n	8010a52 <UTIL_TIMER_Create+0x5e>
  {
    TimerObject->Timestamp = 0U;
 8010a10:	68fb      	ldr	r3, [r7, #12]
 8010a12:	2200      	movs	r2, #0
 8010a14:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 8010a16:	4b11      	ldr	r3, [pc, #68]	@ (8010a5c <UTIL_TIMER_Create+0x68>)
 8010a18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010a1a:	68b8      	ldr	r0, [r7, #8]
 8010a1c:	4798      	blx	r3
 8010a1e:	4602      	mov	r2, r0
 8010a20:	68fb      	ldr	r3, [r7, #12]
 8010a22:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 8010a24:	68fb      	ldr	r3, [r7, #12]
 8010a26:	2200      	movs	r2, #0
 8010a28:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 8010a2a:	68fb      	ldr	r3, [r7, #12]
 8010a2c:	2200      	movs	r2, #0
 8010a2e:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 8010a30:	68fb      	ldr	r3, [r7, #12]
 8010a32:	2200      	movs	r2, #0
 8010a34:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 8010a36:	68fb      	ldr	r3, [r7, #12]
 8010a38:	683a      	ldr	r2, [r7, #0]
 8010a3a:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 8010a3c:	68fb      	ldr	r3, [r7, #12]
 8010a3e:	69ba      	ldr	r2, [r7, #24]
 8010a40:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 8010a42:	68fb      	ldr	r3, [r7, #12]
 8010a44:	79fa      	ldrb	r2, [r7, #7]
 8010a46:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 8010a48:	68fb      	ldr	r3, [r7, #12]
 8010a4a:	2200      	movs	r2, #0
 8010a4c:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 8010a4e:	2300      	movs	r3, #0
 8010a50:	e000      	b.n	8010a54 <UTIL_TIMER_Create+0x60>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 8010a52:	2301      	movs	r3, #1
  }
}
 8010a54:	4618      	mov	r0, r3
 8010a56:	3710      	adds	r7, #16
 8010a58:	46bd      	mov	sp, r7
 8010a5a:	bd80      	pop	{r7, pc}
 8010a5c:	08031788 	.word	0x08031788

08010a60 <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 8010a60:	b580      	push	{r7, lr}
 8010a62:	b08a      	sub	sp, #40	@ 0x28
 8010a64:	af00      	add	r7, sp, #0
 8010a66:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 8010a68:	2300      	movs	r3, #0
 8010a6a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 8010a6e:	687b      	ldr	r3, [r7, #4]
 8010a70:	2b00      	cmp	r3, #0
 8010a72:	d056      	beq.n	8010b22 <UTIL_TIMER_Start+0xc2>
 8010a74:	6878      	ldr	r0, [r7, #4]
 8010a76:	f000 f8d1 	bl	8010c1c <TimerExists>
 8010a7a:	4603      	mov	r3, r0
 8010a7c:	f083 0301 	eor.w	r3, r3, #1
 8010a80:	b2db      	uxtb	r3, r3
 8010a82:	2b00      	cmp	r3, #0
 8010a84:	d04d      	beq.n	8010b22 <UTIL_TIMER_Start+0xc2>
 8010a86:	687b      	ldr	r3, [r7, #4]
 8010a88:	7a5b      	ldrb	r3, [r3, #9]
 8010a8a:	2b00      	cmp	r3, #0
 8010a8c:	d149      	bne.n	8010b22 <UTIL_TIMER_Start+0xc2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8010a8e:	f3ef 8310 	mrs	r3, PRIMASK
 8010a92:	613b      	str	r3, [r7, #16]
  return(result);
 8010a94:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 8010a96:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8010a98:	b672      	cpsid	i
}
 8010a9a:	bf00      	nop
    ticks = TimerObject->ReloadValue;
 8010a9c:	687b      	ldr	r3, [r7, #4]
 8010a9e:	685b      	ldr	r3, [r3, #4]
 8010aa0:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 8010aa2:	4b24      	ldr	r3, [pc, #144]	@ (8010b34 <UTIL_TIMER_Start+0xd4>)
 8010aa4:	6a1b      	ldr	r3, [r3, #32]
 8010aa6:	4798      	blx	r3
 8010aa8:	61b8      	str	r0, [r7, #24]
    
    if( ticks < minValue )
 8010aaa:	6a3a      	ldr	r2, [r7, #32]
 8010aac:	69bb      	ldr	r3, [r7, #24]
 8010aae:	429a      	cmp	r2, r3
 8010ab0:	d201      	bcs.n	8010ab6 <UTIL_TIMER_Start+0x56>
    {
      ticks = minValue;
 8010ab2:	69bb      	ldr	r3, [r7, #24]
 8010ab4:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 8010ab6:	687b      	ldr	r3, [r7, #4]
 8010ab8:	6a3a      	ldr	r2, [r7, #32]
 8010aba:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 8010abc:	687b      	ldr	r3, [r7, #4]
 8010abe:	2200      	movs	r2, #0
 8010ac0:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 8010ac2:	687b      	ldr	r3, [r7, #4]
 8010ac4:	2201      	movs	r2, #1
 8010ac6:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 8010ac8:	687b      	ldr	r3, [r7, #4]
 8010aca:	2200      	movs	r2, #0
 8010acc:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 8010ace:	4b1a      	ldr	r3, [pc, #104]	@ (8010b38 <UTIL_TIMER_Start+0xd8>)
 8010ad0:	681b      	ldr	r3, [r3, #0]
 8010ad2:	2b00      	cmp	r3, #0
 8010ad4:	d106      	bne.n	8010ae4 <UTIL_TIMER_Start+0x84>
    {
      UTIL_TimerDriver.SetTimerContext();
 8010ad6:	4b17      	ldr	r3, [pc, #92]	@ (8010b34 <UTIL_TIMER_Start+0xd4>)
 8010ad8:	691b      	ldr	r3, [r3, #16]
 8010ada:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 8010adc:	6878      	ldr	r0, [r7, #4]
 8010ade:	f000 f915 	bl	8010d0c <TimerInsertNewHeadTimer>
 8010ae2:	e017      	b.n	8010b14 <UTIL_TIMER_Start+0xb4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 8010ae4:	4b13      	ldr	r3, [pc, #76]	@ (8010b34 <UTIL_TIMER_Start+0xd4>)
 8010ae6:	699b      	ldr	r3, [r3, #24]
 8010ae8:	4798      	blx	r3
 8010aea:	6178      	str	r0, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 8010aec:	687b      	ldr	r3, [r7, #4]
 8010aee:	681a      	ldr	r2, [r3, #0]
 8010af0:	697b      	ldr	r3, [r7, #20]
 8010af2:	441a      	add	r2, r3
 8010af4:	687b      	ldr	r3, [r7, #4]
 8010af6:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 8010af8:	687b      	ldr	r3, [r7, #4]
 8010afa:	681a      	ldr	r2, [r3, #0]
 8010afc:	4b0e      	ldr	r3, [pc, #56]	@ (8010b38 <UTIL_TIMER_Start+0xd8>)
 8010afe:	681b      	ldr	r3, [r3, #0]
 8010b00:	681b      	ldr	r3, [r3, #0]
 8010b02:	429a      	cmp	r2, r3
 8010b04:	d203      	bcs.n	8010b0e <UTIL_TIMER_Start+0xae>
      {
        TimerInsertNewHeadTimer( TimerObject);
 8010b06:	6878      	ldr	r0, [r7, #4]
 8010b08:	f000 f900 	bl	8010d0c <TimerInsertNewHeadTimer>
 8010b0c:	e002      	b.n	8010b14 <UTIL_TIMER_Start+0xb4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 8010b0e:	6878      	ldr	r0, [r7, #4]
 8010b10:	f000 f8cc 	bl	8010cac <TimerInsertTimer>
 8010b14:	69fb      	ldr	r3, [r7, #28]
 8010b16:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010b18:	68fb      	ldr	r3, [r7, #12]
 8010b1a:	f383 8810 	msr	PRIMASK, r3
}
 8010b1e:	bf00      	nop
  {
 8010b20:	e002      	b.n	8010b28 <UTIL_TIMER_Start+0xc8>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 8010b22:	2301      	movs	r3, #1
 8010b24:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  return ret;
 8010b28:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8010b2c:	4618      	mov	r0, r3
 8010b2e:	3728      	adds	r7, #40	@ 0x28
 8010b30:	46bd      	mov	sp, r7
 8010b32:	bd80      	pop	{r7, pc}
 8010b34:	08031788 	.word	0x08031788
 8010b38:	20006c1c 	.word	0x20006c1c

08010b3c <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 8010b3c:	b580      	push	{r7, lr}
 8010b3e:	b088      	sub	sp, #32
 8010b40:	af00      	add	r7, sp, #0
 8010b42:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 8010b44:	2300      	movs	r3, #0
 8010b46:	77fb      	strb	r3, [r7, #31]

  if (NULL != TimerObject)
 8010b48:	687b      	ldr	r3, [r7, #4]
 8010b4a:	2b00      	cmp	r3, #0
 8010b4c:	d05b      	beq.n	8010c06 <UTIL_TIMER_Stop+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8010b4e:	f3ef 8310 	mrs	r3, PRIMASK
 8010b52:	60fb      	str	r3, [r7, #12]
  return(result);
 8010b54:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 8010b56:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8010b58:	b672      	cpsid	i
}
 8010b5a:	bf00      	nop
    UTIL_TIMER_Object_t* prev = TimerListHead;
 8010b5c:	4b2d      	ldr	r3, [pc, #180]	@ (8010c14 <UTIL_TIMER_Stop+0xd8>)
 8010b5e:	681b      	ldr	r3, [r3, #0]
 8010b60:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 8010b62:	4b2c      	ldr	r3, [pc, #176]	@ (8010c14 <UTIL_TIMER_Stop+0xd8>)
 8010b64:	681b      	ldr	r3, [r3, #0]
 8010b66:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 8010b68:	687b      	ldr	r3, [r7, #4]
 8010b6a:	2201      	movs	r2, #1
 8010b6c:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 8010b6e:	4b29      	ldr	r3, [pc, #164]	@ (8010c14 <UTIL_TIMER_Stop+0xd8>)
 8010b70:	681b      	ldr	r3, [r3, #0]
 8010b72:	2b00      	cmp	r3, #0
 8010b74:	d041      	beq.n	8010bfa <UTIL_TIMER_Stop+0xbe>
    {
      TimerObject->IsRunning = 0U;
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	2200      	movs	r2, #0
 8010b7a:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 8010b7c:	4b25      	ldr	r3, [pc, #148]	@ (8010c14 <UTIL_TIMER_Stop+0xd8>)
 8010b7e:	681b      	ldr	r3, [r3, #0]
 8010b80:	687a      	ldr	r2, [r7, #4]
 8010b82:	429a      	cmp	r2, r3
 8010b84:	d134      	bne.n	8010bf0 <UTIL_TIMER_Stop+0xb4>
      {
          TimerListHead->IsPending = 0;
 8010b86:	4b23      	ldr	r3, [pc, #140]	@ (8010c14 <UTIL_TIMER_Stop+0xd8>)
 8010b88:	681b      	ldr	r3, [r3, #0]
 8010b8a:	2200      	movs	r2, #0
 8010b8c:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 8010b8e:	4b21      	ldr	r3, [pc, #132]	@ (8010c14 <UTIL_TIMER_Stop+0xd8>)
 8010b90:	681b      	ldr	r3, [r3, #0]
 8010b92:	695b      	ldr	r3, [r3, #20]
 8010b94:	2b00      	cmp	r3, #0
 8010b96:	d00a      	beq.n	8010bae <UTIL_TIMER_Stop+0x72>
          {
            TimerListHead = TimerListHead->Next;
 8010b98:	4b1e      	ldr	r3, [pc, #120]	@ (8010c14 <UTIL_TIMER_Stop+0xd8>)
 8010b9a:	681b      	ldr	r3, [r3, #0]
 8010b9c:	695b      	ldr	r3, [r3, #20]
 8010b9e:	4a1d      	ldr	r2, [pc, #116]	@ (8010c14 <UTIL_TIMER_Stop+0xd8>)
 8010ba0:	6013      	str	r3, [r2, #0]
            TimerSetTimeout( TimerListHead );
 8010ba2:	4b1c      	ldr	r3, [pc, #112]	@ (8010c14 <UTIL_TIMER_Stop+0xd8>)
 8010ba4:	681b      	ldr	r3, [r3, #0]
 8010ba6:	4618      	mov	r0, r3
 8010ba8:	f000 f856 	bl	8010c58 <TimerSetTimeout>
 8010bac:	e023      	b.n	8010bf6 <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 8010bae:	4b1a      	ldr	r3, [pc, #104]	@ (8010c18 <UTIL_TIMER_Stop+0xdc>)
 8010bb0:	68db      	ldr	r3, [r3, #12]
 8010bb2:	4798      	blx	r3
            TimerListHead = NULL;
 8010bb4:	4b17      	ldr	r3, [pc, #92]	@ (8010c14 <UTIL_TIMER_Stop+0xd8>)
 8010bb6:	2200      	movs	r2, #0
 8010bb8:	601a      	str	r2, [r3, #0]
 8010bba:	e01c      	b.n	8010bf6 <UTIL_TIMER_Stop+0xba>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 8010bbc:	697a      	ldr	r2, [r7, #20]
 8010bbe:	687b      	ldr	r3, [r7, #4]
 8010bc0:	429a      	cmp	r2, r3
 8010bc2:	d110      	bne.n	8010be6 <UTIL_TIMER_Stop+0xaa>
          {
            if( cur->Next != NULL )
 8010bc4:	697b      	ldr	r3, [r7, #20]
 8010bc6:	695b      	ldr	r3, [r3, #20]
 8010bc8:	2b00      	cmp	r3, #0
 8010bca:	d006      	beq.n	8010bda <UTIL_TIMER_Stop+0x9e>
            {
              cur = cur->Next;
 8010bcc:	697b      	ldr	r3, [r7, #20]
 8010bce:	695b      	ldr	r3, [r3, #20]
 8010bd0:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 8010bd2:	69bb      	ldr	r3, [r7, #24]
 8010bd4:	697a      	ldr	r2, [r7, #20]
 8010bd6:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 8010bd8:	e00d      	b.n	8010bf6 <UTIL_TIMER_Stop+0xba>
              cur = NULL;
 8010bda:	2300      	movs	r3, #0
 8010bdc:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 8010bde:	69bb      	ldr	r3, [r7, #24]
 8010be0:	697a      	ldr	r2, [r7, #20]
 8010be2:	615a      	str	r2, [r3, #20]
            break;
 8010be4:	e007      	b.n	8010bf6 <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            prev = cur;
 8010be6:	697b      	ldr	r3, [r7, #20]
 8010be8:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 8010bea:	697b      	ldr	r3, [r7, #20]
 8010bec:	695b      	ldr	r3, [r3, #20]
 8010bee:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 8010bf0:	697b      	ldr	r3, [r7, #20]
 8010bf2:	2b00      	cmp	r3, #0
 8010bf4:	d1e2      	bne.n	8010bbc <UTIL_TIMER_Stop+0x80>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 8010bf6:	2300      	movs	r3, #0
 8010bf8:	77fb      	strb	r3, [r7, #31]
 8010bfa:	693b      	ldr	r3, [r7, #16]
 8010bfc:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010bfe:	68bb      	ldr	r3, [r7, #8]
 8010c00:	f383 8810 	msr	PRIMASK, r3
}
 8010c04:	e001      	b.n	8010c0a <UTIL_TIMER_Stop+0xce>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 8010c06:	2301      	movs	r3, #1
 8010c08:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 8010c0a:	7ffb      	ldrb	r3, [r7, #31]
}
 8010c0c:	4618      	mov	r0, r3
 8010c0e:	3720      	adds	r7, #32
 8010c10:	46bd      	mov	sp, r7
 8010c12:	bd80      	pop	{r7, pc}
 8010c14:	20006c1c 	.word	0x20006c1c
 8010c18:	08031788 	.word	0x08031788

08010c1c <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 8010c1c:	b480      	push	{r7}
 8010c1e:	b085      	sub	sp, #20
 8010c20:	af00      	add	r7, sp, #0
 8010c22:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 8010c24:	4b0b      	ldr	r3, [pc, #44]	@ (8010c54 <TimerExists+0x38>)
 8010c26:	681b      	ldr	r3, [r3, #0]
 8010c28:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 8010c2a:	e008      	b.n	8010c3e <TimerExists+0x22>
  {
    if( cur == TimerObject )
 8010c2c:	68fa      	ldr	r2, [r7, #12]
 8010c2e:	687b      	ldr	r3, [r7, #4]
 8010c30:	429a      	cmp	r2, r3
 8010c32:	d101      	bne.n	8010c38 <TimerExists+0x1c>
    {
      return true;
 8010c34:	2301      	movs	r3, #1
 8010c36:	e006      	b.n	8010c46 <TimerExists+0x2a>
    }
    cur = cur->Next;
 8010c38:	68fb      	ldr	r3, [r7, #12]
 8010c3a:	695b      	ldr	r3, [r3, #20]
 8010c3c:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 8010c3e:	68fb      	ldr	r3, [r7, #12]
 8010c40:	2b00      	cmp	r3, #0
 8010c42:	d1f3      	bne.n	8010c2c <TimerExists+0x10>
  }
  return false;
 8010c44:	2300      	movs	r3, #0
}
 8010c46:	4618      	mov	r0, r3
 8010c48:	3714      	adds	r7, #20
 8010c4a:	46bd      	mov	sp, r7
 8010c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c50:	4770      	bx	lr
 8010c52:	bf00      	nop
 8010c54:	20006c1c 	.word	0x20006c1c

08010c58 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 8010c58:	b590      	push	{r4, r7, lr}
 8010c5a:	b085      	sub	sp, #20
 8010c5c:	af00      	add	r7, sp, #0
 8010c5e:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 8010c60:	4b11      	ldr	r3, [pc, #68]	@ (8010ca8 <TimerSetTimeout+0x50>)
 8010c62:	6a1b      	ldr	r3, [r3, #32]
 8010c64:	4798      	blx	r3
 8010c66:	60f8      	str	r0, [r7, #12]
  TimerObject->IsPending = 1;
 8010c68:	687b      	ldr	r3, [r7, #4]
 8010c6a:	2201      	movs	r2, #1
 8010c6c:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 8010c6e:	687b      	ldr	r3, [r7, #4]
 8010c70:	681c      	ldr	r4, [r3, #0]
 8010c72:	4b0d      	ldr	r3, [pc, #52]	@ (8010ca8 <TimerSetTimeout+0x50>)
 8010c74:	699b      	ldr	r3, [r3, #24]
 8010c76:	4798      	blx	r3
 8010c78:	4602      	mov	r2, r0
 8010c7a:	68fb      	ldr	r3, [r7, #12]
 8010c7c:	4413      	add	r3, r2
 8010c7e:	429c      	cmp	r4, r3
 8010c80:	d207      	bcs.n	8010c92 <TimerSetTimeout+0x3a>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 8010c82:	4b09      	ldr	r3, [pc, #36]	@ (8010ca8 <TimerSetTimeout+0x50>)
 8010c84:	699b      	ldr	r3, [r3, #24]
 8010c86:	4798      	blx	r3
 8010c88:	4602      	mov	r2, r0
 8010c8a:	68fb      	ldr	r3, [r7, #12]
 8010c8c:	441a      	add	r2, r3
 8010c8e:	687b      	ldr	r3, [r7, #4]
 8010c90:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 8010c92:	4b05      	ldr	r3, [pc, #20]	@ (8010ca8 <TimerSetTimeout+0x50>)
 8010c94:	689b      	ldr	r3, [r3, #8]
 8010c96:	687a      	ldr	r2, [r7, #4]
 8010c98:	6812      	ldr	r2, [r2, #0]
 8010c9a:	4610      	mov	r0, r2
 8010c9c:	4798      	blx	r3
}
 8010c9e:	bf00      	nop
 8010ca0:	3714      	adds	r7, #20
 8010ca2:	46bd      	mov	sp, r7
 8010ca4:	bd90      	pop	{r4, r7, pc}
 8010ca6:	bf00      	nop
 8010ca8:	08031788 	.word	0x08031788

08010cac <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 8010cac:	b480      	push	{r7}
 8010cae:	b085      	sub	sp, #20
 8010cb0:	af00      	add	r7, sp, #0
 8010cb2:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 8010cb4:	4b14      	ldr	r3, [pc, #80]	@ (8010d08 <TimerInsertTimer+0x5c>)
 8010cb6:	681b      	ldr	r3, [r3, #0]
 8010cb8:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 8010cba:	4b13      	ldr	r3, [pc, #76]	@ (8010d08 <TimerInsertTimer+0x5c>)
 8010cbc:	681b      	ldr	r3, [r3, #0]
 8010cbe:	695b      	ldr	r3, [r3, #20]
 8010cc0:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 8010cc2:	e012      	b.n	8010cea <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 8010cc4:	687b      	ldr	r3, [r7, #4]
 8010cc6:	681a      	ldr	r2, [r3, #0]
 8010cc8:	68bb      	ldr	r3, [r7, #8]
 8010cca:	681b      	ldr	r3, [r3, #0]
 8010ccc:	429a      	cmp	r2, r3
 8010cce:	d905      	bls.n	8010cdc <TimerInsertTimer+0x30>
    {
        cur = next;
 8010cd0:	68bb      	ldr	r3, [r7, #8]
 8010cd2:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 8010cd4:	68bb      	ldr	r3, [r7, #8]
 8010cd6:	695b      	ldr	r3, [r3, #20]
 8010cd8:	60bb      	str	r3, [r7, #8]
 8010cda:	e006      	b.n	8010cea <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 8010cdc:	68fb      	ldr	r3, [r7, #12]
 8010cde:	687a      	ldr	r2, [r7, #4]
 8010ce0:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 8010ce2:	687b      	ldr	r3, [r7, #4]
 8010ce4:	68ba      	ldr	r2, [r7, #8]
 8010ce6:	615a      	str	r2, [r3, #20]
        return;
 8010ce8:	e009      	b.n	8010cfe <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 8010cea:	68fb      	ldr	r3, [r7, #12]
 8010cec:	695b      	ldr	r3, [r3, #20]
 8010cee:	2b00      	cmp	r3, #0
 8010cf0:	d1e8      	bne.n	8010cc4 <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 8010cf2:	68fb      	ldr	r3, [r7, #12]
 8010cf4:	687a      	ldr	r2, [r7, #4]
 8010cf6:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 8010cf8:	687b      	ldr	r3, [r7, #4]
 8010cfa:	2200      	movs	r2, #0
 8010cfc:	615a      	str	r2, [r3, #20]
}
 8010cfe:	3714      	adds	r7, #20
 8010d00:	46bd      	mov	sp, r7
 8010d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d06:	4770      	bx	lr
 8010d08:	20006c1c 	.word	0x20006c1c

08010d0c <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 8010d0c:	b580      	push	{r7, lr}
 8010d0e:	b084      	sub	sp, #16
 8010d10:	af00      	add	r7, sp, #0
 8010d12:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 8010d14:	4b0b      	ldr	r3, [pc, #44]	@ (8010d44 <TimerInsertNewHeadTimer+0x38>)
 8010d16:	681b      	ldr	r3, [r3, #0]
 8010d18:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 8010d1a:	68fb      	ldr	r3, [r7, #12]
 8010d1c:	2b00      	cmp	r3, #0
 8010d1e:	d002      	beq.n	8010d26 <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 8010d20:	68fb      	ldr	r3, [r7, #12]
 8010d22:	2200      	movs	r2, #0
 8010d24:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 8010d26:	687b      	ldr	r3, [r7, #4]
 8010d28:	68fa      	ldr	r2, [r7, #12]
 8010d2a:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 8010d2c:	4a05      	ldr	r2, [pc, #20]	@ (8010d44 <TimerInsertNewHeadTimer+0x38>)
 8010d2e:	687b      	ldr	r3, [r7, #4]
 8010d30:	6013      	str	r3, [r2, #0]
  TimerSetTimeout( TimerListHead );
 8010d32:	4b04      	ldr	r3, [pc, #16]	@ (8010d44 <TimerInsertNewHeadTimer+0x38>)
 8010d34:	681b      	ldr	r3, [r3, #0]
 8010d36:	4618      	mov	r0, r3
 8010d38:	f7ff ff8e 	bl	8010c58 <TimerSetTimeout>
}
 8010d3c:	bf00      	nop
 8010d3e:	3710      	adds	r7, #16
 8010d40:	46bd      	mov	sp, r7
 8010d42:	bd80      	pop	{r7, pc}
 8010d44:	20006c1c 	.word	0x20006c1c

08010d48 <evnt_schdlr_get_prdc_clbr_evnt_hndl>:
 8010d48:	b580      	push	{r7, lr}
 8010d4a:	f646 402c 	movw	r0, #27692	@ 0x6c2c
 8010d4e:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8010d52:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8010d54:	68c1      	ldr	r1, [r0, #12]
 8010d56:	2001      	movs	r0, #1
 8010d58:	4788      	blx	r1
 8010d5a:	bf00      	nop
 8010d5c:	b130      	cbz	r0, 8010d6c <evnt_schdlr_get_prdc_clbr_evnt_hndl+0x24>
 8010d5e:	f890 1046 	ldrb.w	r1, [r0, #70]	@ 0x46
 8010d62:	2901      	cmp	r1, #1
 8010d64:	bf08      	it	eq
 8010d66:	bd80      	popeq	{r7, pc}
 8010d68:	6f80      	ldr	r0, [r0, #120]	@ 0x78
 8010d6a:	e7f7      	b.n	8010d5c <evnt_schdlr_get_prdc_clbr_evnt_hndl+0x14>
 8010d6c:	2000      	movs	r0, #0
 8010d6e:	bd80      	pop	{r7, pc}

08010d70 <evnt_schdlr_hndl_next_evnt>:
 8010d70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d74:	b08b      	sub	sp, #44	@ 0x2c
 8010d76:	2000      	movs	r0, #0
 8010d78:	e9cd 0007 	strd	r0, r0, [sp, #28]
 8010d7c:	e9cd 0004 	strd	r0, r0, [sp, #16]
 8010d80:	e9cd 0002 	strd	r0, r0, [sp, #8]
 8010d84:	2007      	movs	r0, #7
 8010d86:	f00e fd93 	bl	801f8b0 <bsp_debug_gpio_set>
 8010d8a:	2007      	movs	r0, #7
 8010d8c:	f00e fda7 	bl	801f8de <disable_specific_irq>
 8010d90:	f646 492c 	movw	r9, #27692	@ 0x6c2c
 8010d94:	f2c2 0900 	movt	r9, #8192	@ 0x2000
 8010d98:	f8d9 0028 	ldr.w	r0, [r9, #40]	@ 0x28
 8010d9c:	2800      	cmp	r0, #0
 8010d9e:	f040 8173 	bne.w	8011088 <evnt_schdlr_hndl_next_evnt+0x318>
 8010da2:	f8d9 0024 	ldr.w	r0, [r9, #36]	@ 0x24
 8010da6:	6880      	ldr	r0, [r0, #8]
 8010da8:	4780      	blx	r0
 8010daa:	2800      	cmp	r0, #0
 8010dac:	f000 80ef 	beq.w	8010f8e <evnt_schdlr_hndl_next_evnt+0x21e>
 8010db0:	f244 77ff 	movw	r7, #18431	@ 0x47ff
 8010db4:	f646 4b68 	movw	fp, #27752	@ 0x6c68
 8010db8:	f240 08ec 	movw	r8, #236	@ 0xec
 8010dbc:	4605      	mov	r5, r0
 8010dbe:	ac07      	add	r4, sp, #28
 8010dc0:	ae04      	add	r6, sp, #16
 8010dc2:	f10d 0a08 	add.w	sl, sp, #8
 8010dc6:	f2c0 17e8 	movt	r7, #488	@ 0x1e8
 8010dca:	f2c2 0b00 	movt	fp, #8192	@ 0x2000
 8010dce:	f2c2 0800 	movt	r8, #8192	@ 0x2000
 8010dd2:	2000      	movs	r0, #0
 8010dd4:	9001      	str	r0, [sp, #4]
 8010dd6:	bf00      	nop
 8010dd8:	f895 0098 	ldrb.w	r0, [r5, #152]	@ 0x98
 8010ddc:	2800      	cmp	r0, #0
 8010dde:	f040 8153 	bne.w	8011088 <evnt_schdlr_hndl_next_evnt+0x318>
 8010de2:	f8b5 0090 	ldrh.w	r0, [r5, #144]	@ 0x90
 8010de6:	f410 7fc0 	tst.w	r0, #384	@ 0x180
 8010dea:	d00b      	beq.n	8010e04 <evnt_schdlr_hndl_next_evnt+0x94>
 8010dec:	6f6a      	ldr	r2, [r5, #116]	@ 0x74
 8010dee:	f644 43c9 	movw	r3, #19657	@ 0x4cc9
 8010df2:	2002      	movs	r0, #2
 8010df4:	2101      	movs	r1, #1
 8010df6:	f6c0 0302 	movt	r3, #2050	@ 0x802
 8010dfa:	f010 fd89 	bl	8021910 <emngr_process_conditional_event>
 8010dfe:	2801      	cmp	r0, #1
 8010e00:	f000 80bc 	beq.w	8010f7c <evnt_schdlr_hndl_next_evnt+0x20c>
 8010e04:	f899 0039 	ldrb.w	r0, [r9, #57]	@ 0x39
 8010e08:	2800      	cmp	r0, #0
 8010e0a:	f040 80e0 	bne.w	8010fce <evnt_schdlr_hndl_next_evnt+0x25e>
 8010e0e:	2099      	movs	r0, #153	@ 0x99
 8010e10:	f00e fd52 	bl	801f8b8 <bsp_debug_gpio_toggle>
 8010e14:	4620      	mov	r0, r4
 8010e16:	f011 fb18 	bl	802244a <llhwc_slptmr_get>
 8010e1a:	9807      	ldr	r0, [sp, #28]
 8010e1c:	42b8      	cmp	r0, r7
 8010e1e:	bf9c      	itt	ls
 8010e20:	4628      	movls	r0, r5
 8010e22:	f002 fed1 	blls	8013bc8 <evnt_utils_reset_sw_overflow>
 8010e26:	e9d5 0114 	ldrd	r0, r1, [r5, #80]	@ 0x50
 8010e2a:	e9d5 2324 	ldrd	r2, r3, [r5, #144]	@ 0x90
 8010e2e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010e32:	f083 0008 	eor.w	r0, r3, #8
 8010e36:	4310      	orrs	r0, r2
 8010e38:	4640      	mov	r0, r8
 8010e3a:	bf08      	it	eq
 8010e3c:	4658      	moveq	r0, fp
 8010e3e:	6801      	ldr	r1, [r0, #0]
 8010e40:	4630      	mov	r0, r6
 8010e42:	2205      	movs	r2, #5
 8010e44:	f010 fb72 	bl	802152c <ble_time_rmv_uint>
 8010e48:	f011 fd26 	bl	8022898 <llhwc_cmn_is_dp_slp_enabled>
 8010e4c:	2800      	cmp	r0, #0
 8010e4e:	f040 811b 	bne.w	8011088 <evnt_schdlr_hndl_next_evnt+0x318>
 8010e52:	e9dd 2004 	ldrd	r2, r0, [sp, #16]
 8010e56:	f8db 1000 	ldr.w	r1, [fp]
 8010e5a:	9202      	str	r2, [sp, #8]
 8010e5c:	2205      	movs	r2, #5
 8010e5e:	9003      	str	r0, [sp, #12]
 8010e60:	4650      	mov	r0, sl
 8010e62:	f010 fac1 	bl	80213e8 <ble_time_add_uint>
 8010e66:	9907      	ldr	r1, [sp, #28]
 8010e68:	4650      	mov	r0, sl
 8010e6a:	f010 fb9d 	bl	80215a8 <ble_time_cmp_raw_reading>
 8010e6e:	2801      	cmp	r0, #1
 8010e70:	db06      	blt.n	8010e80 <evnt_schdlr_hndl_next_evnt+0x110>
 8010e72:	f8d9 0024 	ldr.w	r0, [r9, #36]	@ 0x24
 8010e76:	6941      	ldr	r1, [r0, #20]
 8010e78:	4628      	mov	r0, r5
 8010e7a:	4788      	blx	r1
 8010e7c:	e07e      	b.n	8010f7c <evnt_schdlr_hndl_next_evnt+0x20c>
 8010e7e:	bf00      	nop
 8010e80:	e9dd 1004 	ldrd	r1, r0, [sp, #16]
 8010e84:	2205      	movs	r2, #5
 8010e86:	e9cd 1002 	strd	r1, r0, [sp, #8]
 8010e8a:	4650      	mov	r0, sl
 8010e8c:	2104      	movs	r1, #4
 8010e8e:	f010 fb4d 	bl	802152c <ble_time_rmv_uint>
 8010e92:	9907      	ldr	r1, [sp, #28]
 8010e94:	4650      	mov	r0, sl
 8010e96:	f010 fb87 	bl	80215a8 <ble_time_cmp_raw_reading>
 8010e9a:	f1b0 3fff 	cmp.w	r0, #4294967295	@ 0xffffffff
 8010e9e:	f300 8096 	bgt.w	8010fce <evnt_schdlr_hndl_next_evnt+0x25e>
 8010ea2:	464f      	mov	r7, r9
 8010ea4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8010ea6:	46d9      	mov	r9, fp
 8010ea8:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8010eaa:	46c3      	mov	fp, r8
 8010eac:	4780      	blx	r0
 8010eae:	b3a0      	cbz	r0, 8010f1a <evnt_schdlr_hndl_next_evnt+0x1aa>
 8010eb0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8010eb2:	463e      	mov	r6, r7
 8010eb4:	68c1      	ldr	r1, [r0, #12]
 8010eb6:	2000      	movs	r0, #0
 8010eb8:	4788      	blx	r1
 8010eba:	b378      	cbz	r0, 8010f1c <evnt_schdlr_hndl_next_evnt+0x1ac>
 8010ebc:	4680      	mov	r8, r0
 8010ebe:	6b80      	ldr	r0, [r0, #56]	@ 0x38
 8010ec0:	217d      	movs	r1, #125	@ 0x7d
 8010ec2:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 8010ec6:	f644 51d3 	movw	r1, #19923	@ 0x4dd3
 8010eca:	f2c1 0162 	movt	r1, #4194	@ 0x1062
 8010ece:	fba0 0101 	umull	r0, r1, r0, r1
 8010ed2:	08c8      	lsrs	r0, r1, #3
 8010ed4:	9001      	str	r0, [sp, #4]
 8010ed6:	9008      	str	r0, [sp, #32]
 8010ed8:	e9dd 2004 	ldrd	r2, r0, [sp, #16]
 8010edc:	9202      	str	r2, [sp, #8]
 8010ede:	2205      	movs	r2, #5
 8010ee0:	9003      	str	r0, [sp, #12]
 8010ee2:	2004      	movs	r0, #4
 8010ee4:	eb00 01d1 	add.w	r1, r0, r1, lsr #3
 8010ee8:	4650      	mov	r0, sl
 8010eea:	f010 fb1f 	bl	802152c <ble_time_rmv_uint>
 8010eee:	9907      	ldr	r1, [sp, #28]
 8010ef0:	4650      	mov	r0, sl
 8010ef2:	f010 fb59 	bl	80215a8 <ble_time_cmp_raw_reading>
 8010ef6:	f1b0 3fff 	cmp.w	r0, #4294967295	@ 0xffffffff
 8010efa:	dc0f      	bgt.n	8010f1c <evnt_schdlr_hndl_next_evnt+0x1ac>
 8010efc:	f898 0046 	ldrb.w	r0, [r8, #70]	@ 0x46
 8010f00:	2801      	cmp	r0, #1
 8010f02:	d106      	bne.n	8010f12 <evnt_schdlr_hndl_next_evnt+0x1a2>
 8010f04:	9804      	ldr	r0, [sp, #16]
 8010f06:	9907      	ldr	r1, [sp, #28]
 8010f08:	f010 fb73 	bl	80215f2 <ble_time_overflow_diff>
 8010f0c:	3804      	subs	r0, #4
 8010f0e:	9001      	str	r0, [sp, #4]
 8010f10:	9008      	str	r0, [sp, #32]
 8010f12:	f898 0049 	ldrb.w	r0, [r8, #73]	@ 0x49
 8010f16:	b908      	cbnz	r0, 8010f1c <evnt_schdlr_hndl_next_evnt+0x1ac>
 8010f18:	e0ef      	b.n	80110fa <evnt_schdlr_hndl_next_evnt+0x38a>
 8010f1a:	463e      	mov	r6, r7
 8010f1c:	e9d5 0114 	ldrd	r0, r1, [r5, #80]	@ 0x50
 8010f20:	f8db 2000 	ldr.w	r2, [fp]
 8010f24:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8010f28:	9002      	str	r0, [sp, #8]
 8010f2a:	9103      	str	r1, [sp, #12]
 8010f2c:	eb03 0142 	add.w	r1, r3, r2, lsl #1
 8010f30:	4650      	mov	r0, sl
 8010f32:	3110      	adds	r1, #16
 8010f34:	2205      	movs	r2, #5
 8010f36:	46d8      	mov	r8, fp
 8010f38:	46cb      	mov	fp, r9
 8010f3a:	f010 faf7 	bl	802152c <ble_time_rmv_uint>
 8010f3e:	9907      	ldr	r1, [sp, #28]
 8010f40:	4650      	mov	r0, sl
 8010f42:	f010 fb31 	bl	80215a8 <ble_time_cmp_raw_reading>
 8010f46:	f1b0 3fff 	cmp.w	r0, #4294967295	@ 0xffffffff
 8010f4a:	46b1      	mov	r9, r6
 8010f4c:	dc72      	bgt.n	8011034 <evnt_schdlr_hndl_next_evnt+0x2c4>
 8010f4e:	f8d9 0024 	ldr.w	r0, [r9, #36]	@ 0x24
 8010f52:	2100      	movs	r1, #0
 8010f54:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8010f56:	910a      	str	r1, [sp, #40]	@ 0x28
 8010f58:	9109      	str	r1, [sp, #36]	@ 0x24
 8010f5a:	a809      	add	r0, sp, #36	@ 0x24
 8010f5c:	a90a      	add	r1, sp, #40	@ 0x28
 8010f5e:	4790      	blx	r2
 8010f60:	b918      	cbnz	r0, 8010f6a <evnt_schdlr_hndl_next_evnt+0x1fa>
 8010f62:	e9dd 0109 	ldrd	r0, r1, [sp, #36]	@ 0x24
 8010f66:	f000 f8cb 	bl	8011100 <evnt_schdlr_exec>
 8010f6a:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8010f6e:	f244 77ff 	movw	r7, #18431	@ 0x47ff
 8010f72:	4288      	cmp	r0, r1
 8010f74:	ae04      	add	r6, sp, #16
 8010f76:	f2c0 17e8 	movt	r7, #488	@ 0x1e8
 8010f7a:	d14f      	bne.n	801101c <evnt_schdlr_hndl_next_evnt+0x2ac>
 8010f7c:	f8d9 0024 	ldr.w	r0, [r9, #36]	@ 0x24
 8010f80:	6880      	ldr	r0, [r0, #8]
 8010f82:	4780      	blx	r0
 8010f84:	4605      	mov	r5, r0
 8010f86:	2800      	cmp	r0, #0
 8010f88:	f47f af26 	bne.w	8010dd8 <evnt_schdlr_hndl_next_evnt+0x68>
 8010f8c:	e001      	b.n	8010f92 <evnt_schdlr_hndl_next_evnt+0x222>
 8010f8e:	2000      	movs	r0, #0
 8010f90:	9001      	str	r0, [sp, #4]
 8010f92:	f8d9 0024 	ldr.w	r0, [r9, #36]	@ 0x24
 8010f96:	68c1      	ldr	r1, [r0, #12]
 8010f98:	2000      	movs	r0, #0
 8010f9a:	4788      	blx	r1
 8010f9c:	f646 4120 	movw	r1, #27680	@ 0x6c20
 8010fa0:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8010fa4:	7809      	ldrb	r1, [r1, #0]
 8010fa6:	2900      	cmp	r1, #0
 8010fa8:	d16b      	bne.n	8011082 <evnt_schdlr_hndl_next_evnt+0x312>
 8010faa:	4605      	mov	r5, r0
 8010fac:	f8d9 0024 	ldr.w	r0, [r9, #36]	@ 0x24
 8010fb0:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8010fb2:	4780      	blx	r0
 8010fb4:	2800      	cmp	r0, #0
 8010fb6:	d064      	beq.n	8011082 <evnt_schdlr_hndl_next_evnt+0x312>
 8010fb8:	2d00      	cmp	r5, #0
 8010fba:	d062      	beq.n	8011082 <evnt_schdlr_hndl_next_evnt+0x312>
 8010fbc:	f011 fc6c 	bl	8022898 <llhwc_cmn_is_dp_slp_enabled>
 8010fc0:	2800      	cmp	r0, #0
 8010fc2:	d15e      	bne.n	8011082 <evnt_schdlr_hndl_next_evnt+0x312>
 8010fc4:	4628      	mov	r0, r5
 8010fc6:	9901      	ldr	r1, [sp, #4]
 8010fc8:	f000 f89a 	bl	8011100 <evnt_schdlr_exec>
 8010fcc:	e05f      	b.n	801108e <evnt_schdlr_hndl_next_evnt+0x31e>
 8010fce:	f8d9 0024 	ldr.w	r0, [r9, #36]	@ 0x24
 8010fd2:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8010fd4:	4780      	blx	r0
 8010fd6:	b1c8      	cbz	r0, 801100c <evnt_schdlr_hndl_next_evnt+0x29c>
 8010fd8:	f8d9 0024 	ldr.w	r0, [r9, #36]	@ 0x24
 8010fdc:	68c1      	ldr	r1, [r0, #12]
 8010fde:	2000      	movs	r0, #0
 8010fe0:	4788      	blx	r1
 8010fe2:	b198      	cbz	r0, 801100c <evnt_schdlr_hndl_next_evnt+0x29c>
 8010fe4:	4604      	mov	r4, r0
 8010fe6:	f890 0049 	ldrb.w	r0, [r0, #73]	@ 0x49
 8010fea:	b978      	cbnz	r0, 801100c <evnt_schdlr_hndl_next_evnt+0x29c>
 8010fec:	f8d9 0024 	ldr.w	r0, [r9, #36]	@ 0x24
 8010ff0:	a908      	add	r1, sp, #32
 8010ff2:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8010ff4:	4620      	mov	r0, r4
 8010ff6:	4790      	blx	r2
 8010ff8:	2801      	cmp	r0, #1
 8010ffa:	d107      	bne.n	801100c <evnt_schdlr_hndl_next_evnt+0x29c>
 8010ffc:	f8d9 0024 	ldr.w	r0, [r9, #36]	@ 0x24
 8011000:	6941      	ldr	r1, [r0, #20]
 8011002:	4628      	mov	r0, r5
 8011004:	4788      	blx	r1
 8011006:	9908      	ldr	r1, [sp, #32]
 8011008:	4620      	mov	r0, r4
 801100a:	e7dd      	b.n	8010fc8 <evnt_schdlr_hndl_next_evnt+0x258>
 801100c:	f8d9 0024 	ldr.w	r0, [r9, #36]	@ 0x24
 8011010:	6880      	ldr	r0, [r0, #8]
 8011012:	4780      	blx	r0
 8011014:	2100      	movs	r1, #0
 8011016:	f000 f873 	bl	8011100 <evnt_schdlr_exec>
 801101a:	e035      	b.n	8011088 <evnt_schdlr_hndl_next_evnt+0x318>
 801101c:	b3a0      	cbz	r0, 8011088 <evnt_schdlr_hndl_next_evnt+0x318>
 801101e:	2807      	cmp	r0, #7
 8011020:	d105      	bne.n	801102e <evnt_schdlr_hndl_next_evnt+0x2be>
 8011022:	a807      	add	r0, sp, #28
 8011024:	f011 fa11 	bl	802244a <llhwc_slptmr_get>
 8011028:	f44f 74a0 	mov.w	r4, #320	@ 0x140
 801102c:	e014      	b.n	8011058 <evnt_schdlr_hndl_next_evnt+0x2e8>
 801102e:	a807      	add	r0, sp, #28
 8011030:	f011 fa0b 	bl	802244a <llhwc_slptmr_get>
 8011034:	9907      	ldr	r1, [sp, #28]
 8011036:	a804      	add	r0, sp, #16
 8011038:	f010 fab6 	bl	80215a8 <ble_time_cmp_raw_reading>
 801103c:	f1b0 3fff 	cmp.w	r0, #4294967295	@ 0xffffffff
 8011040:	dd05      	ble.n	801104e <evnt_schdlr_hndl_next_evnt+0x2de>
 8011042:	2000      	movs	r0, #0
 8011044:	2101      	movs	r1, #1
 8011046:	2400      	movs	r4, #0
 8011048:	f00e fbeb 	bl	801f822 <bsp_assert>
 801104c:	e004      	b.n	8011058 <evnt_schdlr_hndl_next_evnt+0x2e8>
 801104e:	9804      	ldr	r0, [sp, #16]
 8011050:	9907      	ldr	r1, [sp, #28]
 8011052:	f010 face 	bl	80215f2 <ble_time_overflow_diff>
 8011056:	4604      	mov	r4, r0
 8011058:	f247 3090 	movw	r0, #29584	@ 0x7390
 801105c:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8011060:	7880      	ldrb	r0, [r0, #2]
 8011062:	b1d0      	cbz	r0, 801109a <evnt_schdlr_hndl_next_evnt+0x32a>
 8011064:	f8d9 002c 	ldr.w	r0, [r9, #44]	@ 0x2c
 8011068:	4621      	mov	r1, r4
 801106a:	f011 f877 	bl	802215c <os_timer_set>
 801106e:	4604      	mov	r4, r0
 8011070:	2004      	movs	r0, #4
 8011072:	f00e fc21 	bl	801f8b8 <bsp_debug_gpio_toggle>
 8011076:	fab4 f084 	clz	r0, r4
 801107a:	0940      	lsrs	r0, r0, #5
 801107c:	2101      	movs	r1, #1
 801107e:	f00e fbd0 	bl	801f822 <bsp_assert>
 8011082:	2001      	movs	r0, #1
 8011084:	f013 f882 	bl	802418c <llhwc_cmn_evnt_notify>
 8011088:	2007      	movs	r0, #7
 801108a:	f00e fc26 	bl	801f8da <enable_specific_irq>
 801108e:	2007      	movs	r0, #7
 8011090:	f00e fc10 	bl	801f8b4 <bsp_debug_gpio_clear>
 8011094:	b00b      	add	sp, #44	@ 0x2c
 8011096:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801109a:	f8d9 0024 	ldr.w	r0, [r9, #36]	@ 0x24
 801109e:	68c1      	ldr	r1, [r0, #12]
 80110a0:	2001      	movs	r0, #1
 80110a2:	4788      	blx	r1
 80110a4:	2800      	cmp	r0, #0
 80110a6:	d0dd      	beq.n	8011064 <evnt_schdlr_hndl_next_evnt+0x2f4>
 80110a8:	4605      	mov	r5, r0
 80110aa:	f895 0046 	ldrb.w	r0, [r5, #70]	@ 0x46
 80110ae:	2801      	cmp	r0, #1
 80110b0:	d003      	beq.n	80110ba <evnt_schdlr_hndl_next_evnt+0x34a>
 80110b2:	6fad      	ldr	r5, [r5, #120]	@ 0x78
 80110b4:	2d00      	cmp	r5, #0
 80110b6:	d1f8      	bne.n	80110aa <evnt_schdlr_hndl_next_evnt+0x33a>
 80110b8:	e7d4      	b.n	8011064 <evnt_schdlr_hndl_next_evnt+0x2f4>
 80110ba:	4628      	mov	r0, r5
 80110bc:	f000 fd3a 	bl	8011b34 <evnt_schdlr_get_req_phy_clbr_time>
 80110c0:	e9d5 1214 	ldrd	r1, r2, [r5, #80]	@ 0x50
 80110c4:	4606      	mov	r6, r0
 80110c6:	9008      	str	r0, [sp, #32]
 80110c8:	a802      	add	r0, sp, #8
 80110ca:	e9cd 1202 	strd	r1, r2, [sp, #8]
 80110ce:	4631      	mov	r1, r6
 80110d0:	2205      	movs	r2, #5
 80110d2:	f010 f989 	bl	80213e8 <ble_time_add_uint>
 80110d6:	42b4      	cmp	r4, r6
 80110d8:	d9c4      	bls.n	8011064 <evnt_schdlr_hndl_next_evnt+0x2f4>
 80110da:	a804      	add	r0, sp, #16
 80110dc:	a902      	add	r1, sp, #8
 80110de:	f010 f8e1 	bl	80212a4 <ble_time_comp>
 80110e2:	2801      	cmp	r0, #1
 80110e4:	dbbe      	blt.n	8011064 <evnt_schdlr_hndl_next_evnt+0x2f4>
 80110e6:	2005      	movs	r0, #5
 80110e8:	f00e fbe6 	bl	801f8b8 <bsp_debug_gpio_toggle>
 80110ec:	f895 0044 	ldrb.w	r0, [r5, #68]	@ 0x44
 80110f0:	1ba4      	subs	r4, r4, r6
 80110f2:	3001      	adds	r0, #1
 80110f4:	f885 0044 	strb.w	r0, [r5, #68]	@ 0x44
 80110f8:	e7b4      	b.n	8011064 <evnt_schdlr_hndl_next_evnt+0x2f4>
 80110fa:	4640      	mov	r0, r8
 80110fc:	e763      	b.n	8010fc6 <evnt_schdlr_hndl_next_evnt+0x256>
	...

08011100 <evnt_schdlr_exec>:
 8011100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011104:	b08f      	sub	sp, #60	@ 0x3c
 8011106:	4683      	mov	fp, r0
 8011108:	2600      	movs	r6, #0
 801110a:	2011      	movs	r0, #17
 801110c:	4689      	mov	r9, r1
 801110e:	e9cd 6604 	strd	r6, r6, [sp, #16]
 8011112:	f00e fbcd 	bl	801f8b0 <bsp_debug_gpio_set>
 8011116:	2010      	movs	r0, #16
 8011118:	f00e fbca 	bl	801f8b0 <bsp_debug_gpio_set>
 801111c:	f1bb 0f00 	cmp.w	fp, #0
 8011120:	f000 84c8 	beq.w	8011ab4 <evnt_schdlr_exec+0x9b4>
 8011124:	f646 4a2c 	movw	sl, #27692	@ 0x6c2c
 8011128:	f2c2 0a00 	movt	sl, #8192	@ 0x2000
 801112c:	f8da 0028 	ldr.w	r0, [sl, #40]	@ 0x28
 8011130:	2800      	cmp	r0, #0
 8011132:	f040 84bf 	bne.w	8011ab4 <evnt_schdlr_exec+0x9b4>
 8011136:	e9db 0124 	ldrd	r0, r1, [fp, #144]	@ 0x90
 801113a:	f081 0102 	eor.w	r1, r1, #2
 801113e:	4308      	orrs	r0, r1
 8011140:	d108      	bne.n	8011154 <evnt_schdlr_exec+0x54>
 8011142:	f89b 0049 	ldrb.w	r0, [fp, #73]	@ 0x49
 8011146:	2801      	cmp	r0, #1
 8011148:	f000 84da 	beq.w	8011b00 <evnt_schdlr_exec+0xa00>
 801114c:	f89b 0046 	ldrb.w	r0, [fp, #70]	@ 0x46
 8011150:	2801      	cmp	r0, #1
 8011152:	d004      	beq.n	801115e <evnt_schdlr_exec+0x5e>
 8011154:	2000      	movs	r0, #0
 8011156:	f013 f819 	bl	802418c <llhwc_cmn_evnt_notify>
 801115a:	f013 f897 	bl	802428c <llhwc_cmn_request_temperature>
 801115e:	f89a 0039 	ldrb.w	r0, [sl, #57]	@ 0x39
 8011162:	b120      	cbz	r0, 801116e <evnt_schdlr_exec+0x6e>
 8011164:	f8da 0030 	ldr.w	r0, [sl, #48]	@ 0x30
 8011168:	f8ad 0014 	strh.w	r0, [sp, #20]
 801116c:	e048      	b.n	8011200 <evnt_schdlr_exec+0x100>
 801116e:	e9db 0124 	ldrd	r0, r1, [fp, #144]	@ 0x90
 8011172:	4240      	negs	r0, r0
 8011174:	f04f 0001 	mov.w	r0, #1
 8011178:	4188      	sbcs	r0, r1
 801117a:	d341      	bcc.n	8011200 <evnt_schdlr_exec+0x100>
 801117c:	f1b9 0f00 	cmp.w	r9, #0
 8011180:	d012      	beq.n	80111a8 <evnt_schdlr_exec+0xa8>
 8011182:	ad04      	add	r5, sp, #16
 8011184:	4628      	mov	r0, r5
 8011186:	f011 f960 	bl	802244a <llhwc_slptmr_get>
 801118a:	f240 04ec 	movw	r4, #236	@ 0xec
 801118e:	f2c2 0400 	movt	r4, #8192	@ 0x2000
 8011192:	6821      	ldr	r1, [r4, #0]
 8011194:	4628      	mov	r0, r5
 8011196:	2205      	movs	r2, #5
 8011198:	f010 f926 	bl	80213e8 <ble_time_add_uint>
 801119c:	6820      	ldr	r0, [r4, #0]
 801119e:	eba9 0000 	sub.w	r0, r9, r0
 80111a2:	f1a0 090a 	sub.w	r9, r0, #10
 80111a6:	e004      	b.n	80111b2 <evnt_schdlr_exec+0xb2>
 80111a8:	f8db 0050 	ldr.w	r0, [fp, #80]	@ 0x50
 80111ac:	f04f 0900 	mov.w	r9, #0
 80111b0:	9004      	str	r0, [sp, #16]
 80111b2:	f8bb 0054 	ldrh.w	r0, [fp, #84]	@ 0x54
 80111b6:	a904      	add	r1, sp, #16
 80111b8:	f8ad 0014 	strh.w	r0, [sp, #20]
 80111bc:	2000      	movs	r0, #0
 80111be:	f88d 0016 	strb.w	r0, [sp, #22]
 80111c2:	2000      	movs	r0, #0
 80111c4:	f011 fdcc 	bl	8022d60 <llhwc_slptmr_set>
 80111c8:	b110      	cbz	r0, 80111d0 <evnt_schdlr_exec+0xd0>
 80111ca:	4606      	mov	r6, r0
 80111cc:	f000 bc48 	b.w	8011a60 <evnt_schdlr_exec+0x960>
 80111d0:	2001      	movs	r0, #1
 80111d2:	2100      	movs	r1, #0
 80111d4:	2401      	movs	r4, #1
 80111d6:	f012 fcfb 	bl	8023bd0 <llhwc_cmn_control_aclk>
 80111da:	e9db 0124 	ldrd	r0, r1, [fp, #144]	@ 0x90
 80111de:	4242      	negs	r2, r0
 80111e0:	eb74 0101 	sbcs.w	r1, r4, r1
 80111e4:	d30c      	bcc.n	8011200 <evnt_schdlr_exec+0x100>
 80111e6:	f410 7fc0 	tst.w	r0, #384	@ 0x180
 80111ea:	d006      	beq.n	80111fa <evnt_schdlr_exec+0xfa>
 80111ec:	f8db 0074 	ldr.w	r0, [fp, #116]	@ 0x74
 80111f0:	f890 0122 	ldrb.w	r0, [r0, #290]	@ 0x122
 80111f4:	3801      	subs	r0, #1
 80111f6:	2802      	cmp	r0, #2
 80111f8:	d302      	bcc.n	8011200 <evnt_schdlr_exec+0x100>
 80111fa:	2002      	movs	r0, #2
 80111fc:	f011 fb20 	bl	8022840 <llhwc_pwr_switch>
 8011200:	4658      	mov	r0, fp
 8011202:	f008 fadc 	bl	80197be <llhwc_set_evnt_hndl>
 8011206:	e9db 7824 	ldrd	r7, r8, [fp, #144]	@ 0x90
 801120a:	261f      	movs	r6, #31
 801120c:	f1d7 003f 	rsbs	r0, r7, #63	@ 0x3f
 8011210:	f04f 0000 	mov.w	r0, #0
 8011214:	eb70 0108 	sbcs.w	r1, r0, r8
 8011218:	f2c0 8087 	blt.w	801132a <evnt_schdlr_exec+0x22a>
 801121c:	1e79      	subs	r1, r7, #1
 801121e:	f168 0200 	sbc.w	r2, r8, #0
 8011222:	f1d1 031f 	rsbs	r3, r1, #31
 8011226:	4190      	sbcs	r0, r2
 8011228:	f0c0 841a 	bcc.w	8011a60 <evnt_schdlr_exec+0x960>
 801122c:	2001      	movs	r0, #1
 801122e:	4088      	lsls	r0, r1
 8011230:	f010 0f8b 	tst.w	r0, #139	@ 0x8b
 8011234:	f000 80bd 	beq.w	80113b2 <evnt_schdlr_exec+0x2b2>
 8011238:	f8db 5074 	ldr.w	r5, [fp, #116]	@ 0x74
 801123c:	f646 4690 	movw	r6, #27792	@ 0x6c90
 8011240:	f895 0035 	ldrb.w	r0, [r5, #53]	@ 0x35
 8011244:	f2c2 0600 	movt	r6, #8192	@ 0x2000
 8011248:	f8cd 900c 	str.w	r9, [sp, #12]
 801124c:	f895 a018 	ldrb.w	sl, [r5, #24]
 8011250:	7e6c      	ldrb	r4, [r5, #25]
 8011252:	9001      	str	r0, [sp, #4]
 8011254:	f8bb 9008 	ldrh.w	r9, [fp, #8]
 8011258:	1d30      	adds	r0, r6, #4
 801125a:	2124      	movs	r1, #36	@ 0x24
 801125c:	6035      	str	r5, [r6, #0]
 801125e:	9002      	str	r0, [sp, #8]
 8011260:	f01e f8da 	bl	802f418 <__aeabi_memclr>
 8011264:	f106 0033 	add.w	r0, r6, #51	@ 0x33
 8011268:	210d      	movs	r1, #13
 801126a:	e9c6 780a 	strd	r7, r8, [r6, #40]	@ 0x28
 801126e:	46b0      	mov	r8, r6
 8011270:	f8a6 9030 	strh.w	r9, [r6, #48]	@ 0x30
 8011274:	f886 a032 	strb.w	sl, [r6, #50]	@ 0x32
 8011278:	f01e f8ce 	bl	802f418 <__aeabi_memclr>
 801127c:	9801      	ldr	r0, [sp, #4]
 801127e:	2107      	movs	r1, #7
 8011280:	f886 0040 	strb.w	r0, [r6, #64]	@ 0x40
 8011284:	f106 0041 	add.w	r0, r6, #65	@ 0x41
 8011288:	f01e f8c6 	bl	802f418 <__aeabi_memclr>
 801128c:	2c04      	cmp	r4, #4
 801128e:	d80c      	bhi.n	80112aa <evnt_schdlr_exec+0x1aa>
 8011290:	2001      	movs	r0, #1
 8011292:	40a0      	lsls	r0, r4
 8011294:	f010 0f15 	tst.w	r0, #21
 8011298:	d007      	beq.n	80112aa <evnt_schdlr_exec+0x1aa>
 801129a:	f105 004c 	add.w	r0, r5, #76	@ 0x4c
 801129e:	f108 0108 	add.w	r1, r8, #8
 80112a2:	f10d 021e 	add.w	r2, sp, #30
 80112a6:	f001 ff9e 	bl	80131e6 <get_pkt_data>
 80112aa:	9902      	ldr	r1, [sp, #8]
 80112ac:	f105 0038 	add.w	r0, r5, #56	@ 0x38
 80112b0:	f10d 021e 	add.w	r2, sp, #30
 80112b4:	f001 ff97 	bl	80131e6 <get_pkt_data>
 80112b8:	e9db 0124 	ldrd	r0, r1, [fp, #144]	@ 0x90
 80112bc:	2201      	movs	r2, #1
 80112be:	f080 0004 	eor.w	r0, r0, #4
 80112c2:	f888 2034 	strb.w	r2, [r8, #52]	@ 0x34
 80112c6:	4308      	orrs	r0, r1
 80112c8:	d10e      	bne.n	80112e8 <evnt_schdlr_exec+0x1e8>
 80112ca:	f898 0032 	ldrb.w	r0, [r8, #50]	@ 0x32
 80112ce:	f002 fb35 	bl	801393c <evnt_count_adv_channels>
 80112d2:	2802      	cmp	r0, #2
 80112d4:	d308      	bcc.n	80112e8 <evnt_schdlr_exec+0x1e8>
 80112d6:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80112da:	f108 0208 	add.w	r2, r8, #8
 80112de:	3801      	subs	r0, #1
 80112e0:	f842 1b04 	str.w	r1, [r2], #4
 80112e4:	3801      	subs	r0, #1
 80112e6:	d1fb      	bne.n	80112e0 <evnt_schdlr_exec+0x1e0>
 80112e8:	7e28      	ldrb	r0, [r5, #24]
 80112ea:	7e6b      	ldrb	r3, [r5, #25]
 80112ec:	0147      	lsls	r7, r0, #5
 80112ee:	b27f      	sxtb	r7, r7
 80112f0:	2100      	movs	r1, #0
 80112f2:	f3c7 17c1 	ubfx	r7, r7, #7, #2
 80112f6:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80112fa:	910a      	str	r1, [sp, #40]	@ 0x28
 80112fc:	9108      	str	r1, [sp, #32]
 80112fe:	f000 0101 	and.w	r1, r0, #1
 8011302:	f000 0202 	and.w	r2, r0, #2
 8011306:	2b01      	cmp	r3, #1
 8011308:	f88d 1025 	strb.w	r1, [sp, #37]	@ 0x25
 801130c:	f88d 2026 	strb.w	r2, [sp, #38]	@ 0x26
 8011310:	f88d 7027 	strb.w	r7, [sp, #39]	@ 0x27
 8011314:	f040 8105 	bne.w	8011522 <evnt_schdlr_exec+0x422>
 8011318:	0740      	lsls	r0, r0, #29
 801131a:	2303      	movs	r3, #3
 801131c:	ea03 70e0 	and.w	r0, r3, r0, asr #31
 8011320:	0100      	lsls	r0, r0, #4
 8011322:	ea40 0082 	orr.w	r0, r0, r2, lsl #2
 8011326:	4408      	add	r0, r1
 8011328:	e17f      	b.n	801162a <evnt_schdlr_exec+0x52a>
 801132a:	f1d7 01ff 	rsbs	r1, r7, #255	@ 0xff
 801132e:	eb70 0008 	sbcs.w	r0, r0, r8
 8011332:	f280 8086 	bge.w	8011442 <evnt_schdlr_exec+0x342>
 8011336:	f487 7080 	eor.w	r0, r7, #256	@ 0x100
 801133a:	ea50 0008 	orrs.w	r0, r0, r8
 801133e:	f000 808c 	beq.w	801145a <evnt_schdlr_exec+0x35a>
 8011342:	f088 0002 	eor.w	r0, r8, #2
 8011346:	4338      	orrs	r0, r7
 8011348:	f000 8115 	beq.w	8011576 <evnt_schdlr_exec+0x476>
 801134c:	f088 0008 	eor.w	r0, r8, #8
 8011350:	4338      	orrs	r0, r7
 8011352:	f040 8385 	bne.w	8011a60 <evnt_schdlr_exec+0x960>
 8011356:	e9db 0105 	ldrd	r0, r1, [fp, #20]
 801135a:	4281      	cmp	r1, r0
 801135c:	bf84      	itt	hi
 801135e:	4658      	movhi	r0, fp
 8011360:	f001 fe8c 	blhi	801307c <gnrc_evnt_durn_update>
 8011364:	f8da 0024 	ldr.w	r0, [sl, #36]	@ 0x24
 8011368:	f8ca b028 	str.w	fp, [sl, #40]	@ 0x28
 801136c:	6901      	ldr	r1, [r0, #16]
 801136e:	4658      	mov	r0, fp
 8011370:	4788      	blx	r1
 8011372:	f240 00ec 	movw	r0, #236	@ 0xec
 8011376:	f646 4168 	movw	r1, #27752	@ 0x6c68
 801137a:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801137e:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8011382:	6800      	ldr	r0, [r0, #0]
 8011384:	6889      	ldr	r1, [r1, #8]
 8011386:	f8db 3060 	ldr.w	r3, [fp, #96]	@ 0x60
 801138a:	4408      	add	r0, r1
 801138c:	1a18      	subs	r0, r3, r0
 801138e:	ebc0 1140 	rsb	r1, r0, r0, lsl #5
 8011392:	f8db 2024 	ldr.w	r2, [fp, #36]	@ 0x24
 8011396:	f8db 3028 	ldr.w	r3, [fp, #40]	@ 0x28
 801139a:	eb01 0190 	add.w	r1, r1, r0, lsr #2
 801139e:	4658      	mov	r0, fp
 80113a0:	4798      	blx	r3
 80113a2:	2800      	cmp	r0, #0
 80113a4:	f000 83ac 	beq.w	8011b00 <evnt_schdlr_exec+0xa00>
 80113a8:	4606      	mov	r6, r0
 80113aa:	4658      	mov	r0, fp
 80113ac:	f001 fd2b 	bl	8012e06 <evnt_schdlr_gnrc_evnt_cmplt>
 80113b0:	e3a7      	b.n	8011b02 <evnt_schdlr_exec+0xa02>
 80113b2:	f010 2f80 	tst.w	r0, #2147516416	@ 0x80008000
 80113b6:	f000 8353 	beq.w	8011a60 <evnt_schdlr_exec+0x960>
 80113ba:	2001      	movs	r0, #1
 80113bc:	2101      	movs	r1, #1
 80113be:	f00e fa30 	bl	801f822 <bsp_assert>
 80113c2:	f8db 5074 	ldr.w	r5, [fp, #116]	@ 0x74
 80113c6:	2000      	movs	r0, #0
 80113c8:	e9cd 000c 	strd	r0, r0, [sp, #48]	@ 0x30
 80113cc:	8969      	ldrh	r1, [r5, #10]
 80113ce:	f240 2271 	movw	r2, #625	@ 0x271
 80113d2:	fb01 f102 	mul.w	r1, r1, r2
 80113d6:	f646 4690 	movw	r6, #27792	@ 0x6c90
 80113da:	f2c2 0600 	movt	r6, #8192	@ 0x2000
 80113de:	f1b9 0f00 	cmp.w	r9, #0
 80113e2:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
 80113e6:	e9c6 0100 	strd	r0, r1, [r6]
 80113ea:	e9c6 0502 	strd	r0, r5, [r6, #8]
 80113ee:	e9c6 0004 	strd	r0, r0, [r6, #16]
 80113f2:	61b0      	str	r0, [r6, #24]
 80113f4:	61f0      	str	r0, [r6, #28]
 80113f6:	f000 8140 	beq.w	801167a <evnt_schdlr_exec+0x57a>
 80113fa:	ebc9 1049 	rsb	r0, r9, r9, lsl #5
 80113fe:	4631      	mov	r1, r6
 8011400:	eb00 0099 	add.w	r0, r0, r9, lsr #2
 8011404:	2200      	movs	r2, #0
 8011406:	6070      	str	r0, [r6, #4]
 8011408:	f105 0010 	add.w	r0, r5, #16
 801140c:	f001 feeb 	bl	80131e6 <get_pkt_data>
 8011410:	f8bb 100e 	ldrh.w	r1, [fp, #14]
 8011414:	f8bb 0088 	ldrh.w	r0, [fp, #136]	@ 0x88
 8011418:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801141c:	4291      	cmp	r1, r2
 801141e:	f1a0 0001 	sub.w	r0, r0, #1
 8011422:	d002      	beq.n	801142a <evnt_schdlr_exec+0x32a>
 8011424:	4288      	cmp	r0, r1
 8011426:	f340 8140 	ble.w	80116aa <evnt_schdlr_exec+0x5aa>
 801142a:	f89b 100c 	ldrb.w	r1, [fp, #12]
 801142e:	2225      	movs	r2, #37	@ 0x25
 8011430:	2926      	cmp	r1, #38	@ 0x26
 8011432:	bf08      	it	eq
 8011434:	2227      	moveq	r2, #39	@ 0x27
 8011436:	2925      	cmp	r1, #37	@ 0x25
 8011438:	bf08      	it	eq
 801143a:	2226      	moveq	r2, #38	@ 0x26
 801143c:	f88b 200c 	strb.w	r2, [fp, #12]
 8011440:	e131      	b.n	80116a6 <evnt_schdlr_exec+0x5a6>
 8011442:	f087 0040 	eor.w	r0, r7, #64	@ 0x40
 8011446:	ea50 0008 	orrs.w	r0, r0, r8
 801144a:	f000 80af 	beq.w	80115ac <evnt_schdlr_exec+0x4ac>
 801144e:	f087 0080 	eor.w	r0, r7, #128	@ 0x80
 8011452:	ea50 0008 	orrs.w	r0, r0, r8
 8011456:	f040 8303 	bne.w	8011a60 <evnt_schdlr_exec+0x960>
 801145a:	f89a 0039 	ldrb.w	r0, [sl, #57]	@ 0x39
 801145e:	b970      	cbnz	r0, 801147e <evnt_schdlr_exec+0x37e>
 8011460:	f8db 0074 	ldr.w	r0, [fp, #116]	@ 0x74
 8011464:	f890 0122 	ldrb.w	r0, [r0, #290]	@ 0x122
 8011468:	3801      	subs	r0, #1
 801146a:	2801      	cmp	r0, #1
 801146c:	d807      	bhi.n	801147e <evnt_schdlr_exec+0x37e>
 801146e:	2004      	movs	r0, #4
 8011470:	f011 f9e6 	bl	8022840 <llhwc_pwr_switch>
 8011474:	2800      	cmp	r0, #0
 8011476:	f47f aea8 	bne.w	80111ca <evnt_schdlr_exec+0xca>
 801147a:	e9db 7824 	ldrd	r7, r8, [fp, #144]	@ 0x90
 801147e:	f8db 1074 	ldr.w	r1, [fp, #116]	@ 0x74
 8011482:	f646 4090 	movw	r0, #27792	@ 0x6c90
 8011486:	f646 45d8 	movw	r5, #27864	@ 0x6cd8
 801148a:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801148e:	2400      	movs	r4, #0
 8011490:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 8011494:	7004      	strb	r4, [r0, #0]
 8011496:	6087      	str	r7, [r0, #8]
 8011498:	4607      	mov	r7, r0
 801149a:	f8c0 800c 	str.w	r8, [r0, #12]
 801149e:	6104      	str	r4, [r0, #16]
 80114a0:	7504      	strb	r4, [r0, #20]
 80114a2:	6185      	str	r5, [r0, #24]
 80114a4:	8384      	strh	r4, [r0, #28]
 80114a6:	f891 0125 	ldrb.w	r0, [r1, #293]	@ 0x125
 80114aa:	4688      	mov	r8, r1
 80114ac:	2801      	cmp	r0, #1
 80114ae:	77bc      	strb	r4, [r7, #30]
 80114b0:	623c      	str	r4, [r7, #32]
 80114b2:	d107      	bne.n	80114c4 <evnt_schdlr_exec+0x3c4>
 80114b4:	f898 012d 	ldrb.w	r0, [r8, #301]	@ 0x12d
 80114b8:	f8db 4000 	ldr.w	r4, [fp]
 80114bc:	2101      	movs	r1, #1
 80114be:	f012 f830 	bl	8023522 <llhwc_get_hw_setup_time>
 80114c2:	4404      	add	r4, r0
 80114c4:	f8d8 0140 	ldr.w	r0, [r8, #320]	@ 0x140
 80114c8:	f10b 0158 	add.w	r1, fp, #88	@ 0x58
 80114cc:	900a      	str	r0, [sp, #40]	@ 0x28
 80114ce:	f10b 0050 	add.w	r0, fp, #80	@ 0x50
 80114d2:	f00f ff44 	bl	802135e <ble_time_ordered_diff_us>
 80114d6:	f8b8 101a 	ldrh.w	r1, [r8, #26]
 80114da:	4420      	add	r0, r4
 80114dc:	e9cd 010b 	strd	r0, r1, [sp, #44]	@ 0x2c
 80114e0:	f8db 0000 	ldr.w	r0, [fp]
 80114e4:	f8b8 1016 	ldrh.w	r1, [r8, #22]
 80114e8:	2204      	movs	r2, #4
 80114ea:	e9cd 010d 	strd	r0, r1, [sp, #52]	@ 0x34
 80114ee:	f508 7196 	add.w	r1, r8, #300	@ 0x12c
 80114f2:	f107 0020 	add.w	r0, r7, #32
 80114f6:	f013 f827 	bl	8024548 <ble_memcpy>
 80114fa:	f898 012a 	ldrb.w	r0, [r8, #298]	@ 0x12a
 80114fe:	2800      	cmp	r0, #0
 8011500:	f000 80f4 	beq.w	80116ec <evnt_schdlr_exec+0x5ec>
 8011504:	f8b8 10da 	ldrh.w	r1, [r8, #218]	@ 0xda
 8011508:	f646 4290 	movw	r2, #27792	@ 0x6c90
 801150c:	f108 0028 	add.w	r0, r8, #40	@ 0x28
 8011510:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8011514:	f006 fba2 	bl	8017c5c <llhwc_get_ch_idx_algo_2>
 8011518:	4606      	mov	r6, r0
 801151a:	2800      	cmp	r0, #0
 801151c:	f040 829a 	bne.w	8011a54 <evnt_schdlr_exec+0x954>
 8011520:	e0e7      	b.n	80116f2 <evnt_schdlr_exec+0x5f2>
 8011522:	a80a      	add	r0, sp, #40	@ 0x28
 8011524:	2101      	movs	r1, #1
 8011526:	f006 fe0a 	bl	801813e <llhwc_gen_rnd_num>
 801152a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801152c:	f10d 0625 	add.w	r6, sp, #37	@ 0x25
 8011530:	f000 0003 	and.w	r0, r0, #3
 8011534:	1ec1      	subs	r1, r0, #3
 8011536:	bf18      	it	ne
 8011538:	4601      	movne	r1, r0
 801153a:	5c70      	ldrb	r0, [r6, r1]
 801153c:	910a      	str	r1, [sp, #40]	@ 0x28
 801153e:	f000 0703 	and.w	r7, r0, #3
 8011542:	a808      	add	r0, sp, #32
 8011544:	2101      	movs	r1, #1
 8011546:	f006 fdfa 	bl	801813e <llhwc_gen_rnd_num>
 801154a:	f89d 1020 	ldrb.w	r1, [sp, #32]
 801154e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8011550:	07c9      	lsls	r1, r1, #31
 8011552:	d159      	bne.n	8011608 <evnt_schdlr_exec+0x508>
 8011554:	1e41      	subs	r1, r0, #1
 8011556:	2800      	cmp	r0, #0
 8011558:	bf08      	it	eq
 801155a:	2102      	moveq	r1, #2
 801155c:	1e4a      	subs	r2, r1, #1
 801155e:	5c70      	ldrb	r0, [r6, r1]
 8011560:	2900      	cmp	r1, #0
 8011562:	bf08      	it	eq
 8011564:	2202      	moveq	r2, #2
 8011566:	5cb1      	ldrb	r1, [r6, r2]
 8011568:	2230      	movs	r2, #48	@ 0x30
 801156a:	ea02 1101 	and.w	r1, r2, r1, lsl #4
 801156e:	f360 0183 	bfi	r1, r0, #2, #2
 8011572:	19c8      	adds	r0, r1, r7
 8011574:	e059      	b.n	801162a <evnt_schdlr_exec+0x52a>
 8011576:	2001      	movs	r0, #1
 8011578:	f88b 008d 	strb.w	r0, [fp, #141]	@ 0x8d
 801157c:	ebc9 1049 	rsb	r0, r9, r9, lsl #5
 8011580:	f8ca b028 	str.w	fp, [sl, #40]	@ 0x28
 8011584:	f8db 2024 	ldr.w	r2, [fp, #36]	@ 0x24
 8011588:	f8db 3028 	ldr.w	r3, [fp, #40]	@ 0x28
 801158c:	eb00 0199 	add.w	r1, r0, r9, lsr #2
 8011590:	2600      	movs	r6, #0
 8011592:	4658      	mov	r0, fp
 8011594:	f88b 6099 	strb.w	r6, [fp, #153]	@ 0x99
 8011598:	4798      	blx	r3
 801159a:	2800      	cmp	r0, #0
 801159c:	f000 82b1 	beq.w	8011b02 <evnt_schdlr_exec+0xa02>
 80115a0:	4605      	mov	r5, r0
 80115a2:	4658      	mov	r0, fp
 80115a4:	f001 fc2f 	bl	8012e06 <evnt_schdlr_gnrc_evnt_cmplt>
 80115a8:	462e      	mov	r6, r5
 80115aa:	e2aa      	b.n	8011b02 <evnt_schdlr_exec+0xa02>
 80115ac:	f8db 5074 	ldr.w	r5, [fp, #116]	@ 0x74
 80115b0:	2001      	movs	r0, #1
 80115b2:	2101      	movs	r1, #1
 80115b4:	f00e f935 	bl	801f822 <bsp_assert>
 80115b8:	4628      	mov	r0, r5
 80115ba:	2101      	movs	r1, #1
 80115bc:	2d00      	cmp	r5, #0
 80115be:	bf18      	it	ne
 80115c0:	2001      	movne	r0, #1
 80115c2:	f00e f92e 	bl	801f822 <bsp_assert>
 80115c6:	f1b9 0f00 	cmp.w	r9, #0
 80115ca:	f000 8182 	beq.w	80118d2 <evnt_schdlr_exec+0x7d2>
 80115ce:	2000      	movs	r0, #0
 80115d0:	f8bb 200e 	ldrh.w	r2, [fp, #14]
 80115d4:	f8bb 1088 	ldrh.w	r1, [fp, #136]	@ 0x88
 80115d8:	f88b 0099 	strb.w	r0, [fp, #153]	@ 0x99
 80115dc:	f89b 000c 	ldrb.w	r0, [fp, #12]
 80115e0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80115e4:	429a      	cmp	r2, r3
 80115e6:	f1a1 0101 	sub.w	r1, r1, #1
 80115ea:	d002      	beq.n	80115f2 <evnt_schdlr_exec+0x4f2>
 80115ec:	4291      	cmp	r1, r2
 80115ee:	f340 817f 	ble.w	80118f0 <evnt_schdlr_exec+0x7f0>
 80115f2:	2225      	movs	r2, #37	@ 0x25
 80115f4:	2826      	cmp	r0, #38	@ 0x26
 80115f6:	bf08      	it	eq
 80115f8:	2227      	moveq	r2, #39	@ 0x27
 80115fa:	2825      	cmp	r0, #37	@ 0x25
 80115fc:	bf08      	it	eq
 80115fe:	2226      	moveq	r2, #38	@ 0x26
 8011600:	4610      	mov	r0, r2
 8011602:	f88b 200c 	strb.w	r2, [fp, #12]
 8011606:	e171      	b.n	80118ec <evnt_schdlr_exec+0x7ec>
 8011608:	3001      	adds	r0, #1
 801160a:	2802      	cmp	r0, #2
 801160c:	bf88      	it	hi
 801160e:	2000      	movhi	r0, #0
 8011610:	1831      	adds	r1, r6, r0
 8011612:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011616:	2801      	cmp	r0, #1
 8011618:	bf88      	it	hi
 801161a:	4631      	movhi	r1, r6
 801161c:	7808      	ldrb	r0, [r1, #0]
 801161e:	2130      	movs	r1, #48	@ 0x30
 8011620:	ea01 1000 	and.w	r0, r1, r0, lsl #4
 8011624:	f362 0083 	bfi	r0, r2, #2, #2
 8011628:	4438      	add	r0, r7
 801162a:	e9db 2124 	ldrd	r2, r1, [fp, #144]	@ 0x90
 801162e:	f888 0032 	strb.w	r0, [r8, #50]	@ 0x32
 8011632:	f641 77ff 	movw	r7, #8191	@ 0x1fff
 8011636:	7e2b      	ldrb	r3, [r5, #24]
 8011638:	2000      	movs	r0, #0
 801163a:	1abf      	subs	r7, r7, r2
 801163c:	eb70 0701 	sbcs.w	r7, r0, r1
 8011640:	f888 3033 	strb.w	r3, [r8, #51]	@ 0x33
 8011644:	da0f      	bge.n	8011666 <evnt_schdlr_exec+0x566>
 8011646:	f482 5300 	eor.w	r3, r2, #8192	@ 0x2000
 801164a:	430b      	orrs	r3, r1
 801164c:	f000 8126 	beq.w	801189c <evnt_schdlr_exec+0x79c>
 8011650:	f082 7300 	eor.w	r3, r2, #33554432	@ 0x2000000
 8011654:	430b      	orrs	r3, r1
 8011656:	f000 8123 	beq.w	80118a0 <evnt_schdlr_exec+0x7a0>
 801165a:	f082 6280 	eor.w	r2, r2, #67108864	@ 0x4000000
 801165e:	4311      	orrs	r1, r2
 8011660:	bf08      	it	eq
 8011662:	2002      	moveq	r0, #2
 8011664:	e11d      	b.n	80118a2 <evnt_schdlr_exec+0x7a2>
 8011666:	f082 0304 	eor.w	r3, r2, #4
 801166a:	430b      	orrs	r3, r1
 801166c:	bf1a      	itte	ne
 801166e:	f082 0208 	eorne.w	r2, r2, #8
 8011672:	ea51 0102 	orrsne.w	r1, r1, r2
 8011676:	2001      	moveq	r0, #1
 8011678:	e113      	b.n	80118a2 <evnt_schdlr_exec+0x7a2>
 801167a:	f646 4190 	movw	r1, #27792	@ 0x6c90
 801167e:	f105 0010 	add.w	r0, r5, #16
 8011682:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8011686:	2200      	movs	r2, #0
 8011688:	f001 fdad 	bl	80131e6 <get_pkt_data>
 801168c:	f89b 000c 	ldrb.w	r0, [fp, #12]
 8011690:	2125      	movs	r1, #37	@ 0x25
 8011692:	2826      	cmp	r0, #38	@ 0x26
 8011694:	bf08      	it	eq
 8011696:	2127      	moveq	r1, #39	@ 0x27
 8011698:	2825      	cmp	r0, #37	@ 0x25
 801169a:	bf08      	it	eq
 801169c:	2126      	moveq	r1, #38	@ 0x26
 801169e:	f8bb 0088 	ldrh.w	r0, [fp, #136]	@ 0x88
 80116a2:	f88b 100c 	strb.w	r1, [fp, #12]
 80116a6:	f8ab 000e 	strh.w	r0, [fp, #14]
 80116aa:	f8db 0090 	ldr.w	r0, [fp, #144]	@ 0x90
 80116ae:	f010 0f30 	tst.w	r0, #48	@ 0x30
 80116b2:	d005      	beq.n	80116c0 <evnt_schdlr_exec+0x5c0>
 80116b4:	f8db 1094 	ldr.w	r1, [fp, #148]	@ 0x94
 80116b8:	e9cb 0104 	strd	r0, r1, [fp, #16]
 80116bc:	2001      	movs	r0, #1
 80116be:	7670      	strb	r0, [r6, #25]
 80116c0:	e9db 0104 	ldrd	r0, r1, [fp, #16]
 80116c4:	e9c6 0104 	strd	r0, r1, [r6, #16]
 80116c8:	f89b 000c 	ldrb.w	r0, [fp, #12]
 80116cc:	7630      	strb	r0, [r6, #24]
 80116ce:	f106 0009 	add.w	r0, r6, #9
 80116d2:	f014 fe0b 	bl	80262ec <db_get_tx_power_value>
 80116d6:	f013 f8f2 	bl	80248be <pta_configure_non_prdc_scan_params>
 80116da:	f105 000e 	add.w	r0, r5, #14
 80116de:	a90a      	add	r1, sp, #40	@ 0x28
 80116e0:	4632      	mov	r2, r6
 80116e2:	2300      	movs	r3, #0
 80116e4:	f007 f8d9 	bl	801889a <llhwc_set_scan_param>
 80116e8:	4606      	mov	r6, r0
 80116ea:	e1b8      	b.n	8011a5e <evnt_schdlr_exec+0x95e>
 80116ec:	f898 0025 	ldrb.w	r0, [r8, #37]	@ 0x25
 80116f0:	7038      	strb	r0, [r7, #0]
 80116f2:	f898 0020 	ldrb.w	r0, [r8, #32]
 80116f6:	f240 41e2 	movw	r1, #1250	@ 0x4e2
 80116fa:	fb00 f101 	mul.w	r1, r0, r1
 80116fe:	f8db 2000 	ldr.w	r2, [fp]
 8011702:	f898 012d 	ldrb.w	r0, [r8, #301]	@ 0x12d
 8011706:	eb01 0442 	add.w	r4, r1, r2, lsl #1
 801170a:	2101      	movs	r1, #1
 801170c:	f007 f8b0 	bl	8018870 <llhwc_get_access_adrs_time>
 8011710:	4420      	add	r0, r4
 8011712:	3008      	adds	r0, #8
 8011714:	6138      	str	r0, [r7, #16]
 8011716:	f8da 0024 	ldr.w	r0, [sl, #36]	@ 0x24
 801171a:	f89b 1018 	ldrb.w	r1, [fp, #24]
 801171e:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 8011720:	4658      	mov	r0, fp
 8011722:	7739      	strb	r1, [r7, #28]
 8011724:	4790      	blx	r2
 8011726:	2101      	movs	r1, #1
 8011728:	4607      	mov	r7, r0
 801172a:	2800      	cmp	r0, #0
 801172c:	bf18      	it	ne
 801172e:	2001      	movne	r0, #1
 8011730:	f00e f877 	bl	801f822 <bsp_assert>
 8011734:	f248 14b4 	movw	r4, #33204	@ 0x81b4
 8011738:	f2c2 0400 	movt	r4, #8192	@ 0x2000
 801173c:	2100      	movs	r1, #0
 801173e:	6820      	ldr	r0, [r4, #0]
 8011740:	f88b 1018 	strb.w	r1, [fp, #24]
 8011744:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8011748:	f00e f8cf 	bl	801f8ea <os_rcrsv_mutex_wait>
 801174c:	f10b 0a0c 	add.w	sl, fp, #12
 8011750:	4650      	mov	r0, sl
 8011752:	f002 f956 	bl	8013a02 <packet_get_frst_pkt>
 8011756:	e9db 1224 	ldrd	r1, r2, [fp, #144]	@ 0x90
 801175a:	4606      	mov	r6, r0
 801175c:	f481 7180 	eor.w	r1, r1, #256	@ 0x100
 8011760:	f8cd 900c 	str.w	r9, [sp, #12]
 8011764:	4311      	orrs	r1, r2
 8011766:	d112      	bne.n	801178e <evnt_schdlr_exec+0x68e>
 8011768:	f240 00f0 	movw	r0, #240	@ 0xf0
 801176c:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8011770:	4286      	cmp	r6, r0
 8011772:	d00b      	beq.n	801178c <evnt_schdlr_exec+0x68c>
 8011774:	7bb0      	ldrb	r0, [r6, #14]
 8011776:	0780      	lsls	r0, r0, #30
 8011778:	d508      	bpl.n	801178c <evnt_schdlr_exec+0x68c>
 801177a:	6830      	ldr	r0, [r6, #0]
 801177c:	8971      	ldrh	r1, [r6, #10]
 801177e:	89b2      	ldrh	r2, [r6, #12]
 8011780:	4408      	add	r0, r1
 8011782:	4410      	add	r0, r2
 8011784:	7900      	ldrb	r0, [r0, #4]
 8011786:	280b      	cmp	r0, #11
 8011788:	bf08      	it	eq
 801178a:	2701      	moveq	r7, #1
 801178c:	3701      	adds	r7, #1
 801178e:	f04f 0900 	mov.w	r9, #0
 8011792:	f8cd 8008 	str.w	r8, [sp, #8]
 8011796:	b386      	cbz	r6, 80117fa <evnt_schdlr_exec+0x6fa>
 8011798:	0638      	lsls	r0, r7, #24
 801179a:	d02e      	beq.n	80117fa <evnt_schdlr_exec+0x6fa>
 801179c:	4638      	mov	r0, r7
 801179e:	f240 04f0 	movw	r4, #240	@ 0xf0
 80117a2:	462f      	mov	r7, r5
 80117a4:	3520      	adds	r5, #32
 80117a6:	fa5f f880 	uxtb.w	r8, r0
 80117aa:	f04f 0900 	mov.w	r9, #0
 80117ae:	f2c2 0400 	movt	r4, #8192	@ 0x2000
 80117b2:	9001      	str	r0, [sp, #4]
 80117b4:	4630      	mov	r0, r6
 80117b6:	4639      	mov	r1, r7
 80117b8:	462a      	mov	r2, r5
 80117ba:	f001 fd14 	bl	80131e6 <get_pkt_data>
 80117be:	f89b 0018 	ldrb.w	r0, [fp, #24]
 80117c2:	42a6      	cmp	r6, r4
 80117c4:	f100 0001 	add.w	r0, r0, #1
 80117c8:	f88b 0018 	strb.w	r0, [fp, #24]
 80117cc:	4650      	mov	r0, sl
 80117ce:	bf18      	it	ne
 80117d0:	1d30      	addne	r0, r6, #4
 80117d2:	6806      	ldr	r6, [r0, #0]
 80117d4:	f109 0901 	add.w	r9, r9, #1
 80117d8:	b126      	cbz	r6, 80117e4 <evnt_schdlr_exec+0x6e4>
 80117da:	3502      	adds	r5, #2
 80117dc:	45c1      	cmp	r9, r8
 80117de:	f107 0704 	add.w	r7, r7, #4
 80117e2:	d3e7      	bcc.n	80117b4 <evnt_schdlr_exec+0x6b4>
 80117e4:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80117e8:	f646 45d8 	movw	r5, #27864	@ 0x6cd8
 80117ec:	f248 14b4 	movw	r4, #33204	@ 0x81b4
 80117f0:	9f01      	ldr	r7, [sp, #4]
 80117f2:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 80117f6:	f2c2 0400 	movt	r4, #8192	@ 0x2000
 80117fa:	4639      	mov	r1, r7
 80117fc:	b2ff      	uxtb	r7, r7
 80117fe:	fa5f f089 	uxtb.w	r0, r9
 8011802:	f646 4a2c 	movw	sl, #27692	@ 0x6c2c
 8011806:	42b8      	cmp	r0, r7
 8011808:	f2c2 0a00 	movt	sl, #8192	@ 0x2000
 801180c:	d222      	bcs.n	8011854 <evnt_schdlr_exec+0x754>
 801180e:	4689      	mov	r9, r1
 8011810:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 8011814:	eb05 0580 	add.w	r5, r5, r0, lsl #2
 8011818:	f240 08f0 	movw	r8, #240	@ 0xf0
 801181c:	1c44      	adds	r4, r0, #1
 801181e:	f101 0620 	add.w	r6, r1, #32
 8011822:	f2c2 0800 	movt	r8, #8192	@ 0x2000
 8011826:	bf00      	nop
 8011828:	4640      	mov	r0, r8
 801182a:	4629      	mov	r1, r5
 801182c:	4632      	mov	r2, r6
 801182e:	f001 fcda 	bl	80131e6 <get_pkt_data>
 8011832:	b2e0      	uxtb	r0, r4
 8011834:	3401      	adds	r4, #1
 8011836:	3602      	adds	r6, #2
 8011838:	4287      	cmp	r7, r0
 801183a:	f105 0504 	add.w	r5, r5, #4
 801183e:	d1f3      	bne.n	8011828 <evnt_schdlr_exec+0x728>
 8011840:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8011844:	f646 45d8 	movw	r5, #27864	@ 0x6cd8
 8011848:	f248 14b4 	movw	r4, #33204	@ 0x81b4
 801184c:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 8011850:	f2c2 0400 	movt	r4, #8192	@ 0x2000
 8011854:	fa5f f089 	uxtb.w	r0, r9
 8011858:	2807      	cmp	r0, #7
 801185a:	d80a      	bhi.n	8011872 <evnt_schdlr_exec+0x772>
 801185c:	2100      	movs	r1, #0
 801185e:	bf00      	nop
 8011860:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
 8011864:	eb05 0240 	add.w	r2, r5, r0, lsl #1
 8011868:	3001      	adds	r0, #1
 801186a:	b2c3      	uxtb	r3, r0
 801186c:	2b08      	cmp	r3, #8
 801186e:	8411      	strh	r1, [r2, #32]
 8011870:	d1f6      	bne.n	8011860 <evnt_schdlr_exec+0x760>
 8011872:	6820      	ldr	r0, [r4, #0]
 8011874:	f00e f83f 	bl	801f8f6 <os_rcrsv_mutex_release>
 8011878:	f8d8 00bc 	ldr.w	r0, [r8, #188]	@ 0xbc
 801187c:	f646 4190 	movw	r1, #27792	@ 0x6c90
 8011880:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8011884:	f881 9014 	strb.w	r9, [r1, #20]
 8011888:	f00d ffa4 	bl	801f7d4 <state_mngr_get_state_type>
 801188c:	2805      	cmp	r0, #5
 801188e:	f000 8096 	beq.w	80119be <evnt_schdlr_exec+0x8be>
 8011892:	2806      	cmp	r0, #6
 8011894:	f040 8095 	bne.w	80119c2 <evnt_schdlr_exec+0x8c2>
 8011898:	2501      	movs	r5, #1
 801189a:	e097      	b.n	80119cc <evnt_schdlr_exec+0x8cc>
 801189c:	2003      	movs	r0, #3
 801189e:	e000      	b.n	80118a2 <evnt_schdlr_exec+0x7a2>
 80118a0:	2004      	movs	r0, #4
 80118a2:	1f21      	subs	r1, r4, #4
 80118a4:	bf18      	it	ne
 80118a6:	2101      	movne	r1, #1
 80118a8:	1e62      	subs	r2, r4, #1
 80118aa:	bf18      	it	ne
 80118ac:	2201      	movne	r2, #1
 80118ae:	4011      	ands	r1, r2
 80118b0:	2200      	movs	r2, #0
 80118b2:	f012 ffed 	bl	8024890 <pta_configure_adv_params>
 80118b6:	f646 4190 	movw	r1, #27792	@ 0x6c90
 80118ba:	f105 001b 	add.w	r0, r5, #27
 80118be:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 80118c2:	f006 fe35 	bl	8018530 <llhwc_set_adv_param>
 80118c6:	f646 4a2c 	movw	sl, #27692	@ 0x6c2c
 80118ca:	4606      	mov	r6, r0
 80118cc:	f2c2 0a00 	movt	sl, #8192	@ 0x2000
 80118d0:	e0c5      	b.n	8011a5e <evnt_schdlr_exec+0x95e>
 80118d2:	f89b 100c 	ldrb.w	r1, [fp, #12]
 80118d6:	2025      	movs	r0, #37	@ 0x25
 80118d8:	2926      	cmp	r1, #38	@ 0x26
 80118da:	bf08      	it	eq
 80118dc:	2027      	moveq	r0, #39	@ 0x27
 80118de:	2925      	cmp	r1, #37	@ 0x25
 80118e0:	bf08      	it	eq
 80118e2:	2026      	moveq	r0, #38	@ 0x26
 80118e4:	f8bb 1088 	ldrh.w	r1, [fp, #136]	@ 0x88
 80118e8:	f88b 000c 	strb.w	r0, [fp, #12]
 80118ec:	f8ab 100e 	strh.w	r1, [fp, #14]
 80118f0:	8969      	ldrh	r1, [r5, #10]
 80118f2:	f240 2271 	movw	r2, #625	@ 0x271
 80118f6:	fb01 f102 	mul.w	r1, r1, r2
 80118fa:	f646 4890 	movw	r8, #27792	@ 0x6c90
 80118fe:	f2c2 0800 	movt	r8, #8192	@ 0x2000
 8011902:	2200      	movs	r2, #0
 8011904:	f1b9 0f00 	cmp.w	r9, #0
 8011908:	e9c8 5200 	strd	r5, r2, [r8]
 801190c:	f8c8 1008 	str.w	r1, [r8, #8]
 8011910:	f888 000c 	strb.w	r0, [r8, #12]
 8011914:	f888 200d 	strb.w	r2, [r8, #13]
 8011918:	f888 200e 	strb.w	r2, [r8, #14]
 801191c:	d005      	beq.n	801192a <evnt_schdlr_exec+0x82a>
 801191e:	ebc9 1049 	rsb	r0, r9, r9, lsl #5
 8011922:	eb00 0099 	add.w	r0, r0, r9, lsr #2
 8011926:	f8c8 0008 	str.w	r0, [r8, #8]
 801192a:	8d28      	ldrh	r0, [r5, #40]	@ 0x28
 801192c:	f105 0618 	add.w	r6, r5, #24
 8011930:	2807      	cmp	r0, #7
 8011932:	bf8f      	iteee	hi
 8011934:	2700      	movhi	r7, #0
 8011936:	f649 6164 	movwls	r1, #40548	@ 0x9e64
 801193a:	f2c2 0100 	movtls	r1, #8192	@ 0x2000
 801193e:	f851 7020 	ldrls.w	r7, [r1, r0, lsl #2]
 8011942:	f108 0104 	add.w	r1, r8, #4
 8011946:	4630      	mov	r0, r6
 8011948:	2200      	movs	r2, #0
 801194a:	464c      	mov	r4, r9
 801194c:	f001 fc4b 	bl	80131e6 <get_pkt_data>
 8011950:	2001      	movs	r0, #1
 8011952:	2101      	movs	r1, #1
 8011954:	f04f 0901 	mov.w	r9, #1
 8011958:	f00d ff63 	bl	801f822 <bsp_assert>
 801195c:	4638      	mov	r0, r7
 801195e:	2101      	movs	r1, #1
 8011960:	2f00      	cmp	r7, #0
 8011962:	bf18      	it	ne
 8011964:	2001      	movne	r0, #1
 8011966:	f00d ff5c 	bl	801f822 <bsp_assert>
 801196a:	8ee8      	ldrh	r0, [r5, #54]	@ 0x36
 801196c:	8f29      	ldrh	r1, [r5, #56]	@ 0x38
 801196e:	f107 0216 	add.w	r2, r7, #22
 8011972:	2320      	movs	r3, #32
 8011974:	f008 ff64 	bl	801a840 <evnt_schdlr_choose_suitable_intrv>
 8011978:	8fe9      	ldrh	r1, [r5, #62]	@ 0x3e
 801197a:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 801197e:	f009 f99d 	bl	801acbc <evnt_schdlr_get_master_conn_anchor_point>
 8011982:	8af9      	ldrh	r1, [r7, #22]
 8011984:	8f6a      	ldrh	r2, [r5, #58]	@ 0x3a
 8011986:	8fab      	ldrh	r3, [r5, #60]	@ 0x3c
 8011988:	4630      	mov	r0, r6
 801198a:	f8cd 9000 	str.w	r9, [sp]
 801198e:	f00c fa82 	bl	801de96 <pdu_trnsprt_hndlr_nconn_init_patch>
 8011992:	e9db 0124 	ldrd	r0, r1, [fp, #144]	@ 0x90
 8011996:	f080 0040 	eor.w	r0, r0, #64	@ 0x40
 801199a:	4308      	orrs	r0, r1
 801199c:	bf08      	it	eq
 801199e:	f888 900d 	strbeq.w	r9, [r8, #13]
 80119a2:	f012 ff9b 	bl	80248dc <pta_configure_init_params>
 80119a6:	f646 4190 	movw	r1, #27792	@ 0x6c90
 80119aa:	f105 000d 	add.w	r0, r5, #13
 80119ae:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 80119b2:	2200      	movs	r2, #0
 80119b4:	f007 f927 	bl	8018c06 <llhwc_set_init_param>
 80119b8:	4606      	mov	r6, r0
 80119ba:	46a1      	mov	r9, r4
 80119bc:	e04f      	b.n	8011a5e <evnt_schdlr_exec+0x95e>
 80119be:	2500      	movs	r5, #0
 80119c0:	e004      	b.n	80119cc <evnt_schdlr_exec+0x8cc>
 80119c2:	2000      	movs	r0, #0
 80119c4:	2101      	movs	r1, #1
 80119c6:	2500      	movs	r5, #0
 80119c8:	f00d ff2b 	bl	801f822 <bsp_assert>
 80119cc:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80119d0:	a80a      	add	r0, sp, #40	@ 0x28
 80119d2:	4629      	mov	r1, r5
 80119d4:	2200      	movs	r2, #0
 80119d6:	f012 fee3 	bl	80247a0 <pta_configure_acl_params>
 80119da:	f646 4790 	movw	r7, #27792	@ 0x6c90
 80119de:	f2c2 0700 	movt	r7, #8192	@ 0x2000
 80119e2:	f108 0028 	add.w	r0, r8, #40	@ 0x28
 80119e6:	f508 7190 	add.w	r1, r8, #288	@ 0x120
 80119ea:	463a      	mov	r2, r7
 80119ec:	f007 fa7c 	bl	8018ee8 <llhwc_set_conn_evnt_param>
 80119f0:	f646 42d8 	movw	r2, #27864	@ 0x6cd8
 80119f4:	4606      	mov	r6, r0
 80119f6:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 80119fa:	bb58      	cbnz	r0, 8011a54 <evnt_schdlr_exec+0x954>
 80119fc:	f898 0122 	ldrb.w	r0, [r8, #290]	@ 0x122
 8011a00:	3801      	subs	r0, #1
 8011a02:	2801      	cmp	r0, #1
 8011a04:	d825      	bhi.n	8011a52 <evnt_schdlr_exec+0x952>
 8011a06:	f898 1125 	ldrb.w	r1, [r8, #293]	@ 0x125
 8011a0a:	7f78      	ldrb	r0, [r7, #29]
 8011a0c:	b131      	cbz	r1, 8011a1c <evnt_schdlr_exec+0x91c>
 8011a0e:	7fb9      	ldrb	r1, [r7, #30]
 8011a10:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 8011a14:	7778      	strb	r0, [r7, #29]
 8011a16:	f061 007f 	orn	r0, r1, #127	@ 0x7f
 8011a1a:	e005      	b.n	8011a28 <evnt_schdlr_exec+0x928>
 8011a1c:	7fb9      	ldrb	r1, [r7, #30]
 8011a1e:	f040 0080 	orr.w	r0, r0, #128	@ 0x80
 8011a22:	7778      	strb	r0, [r7, #29]
 8011a24:	f001 007f 	and.w	r0, r1, #127	@ 0x7f
 8011a28:	6811      	ldr	r1, [r2, #0]
 8011a2a:	f240 02f0 	movw	r2, #240	@ 0xf0
 8011a2e:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8011a32:	6812      	ldr	r2, [r2, #0]
 8011a34:	77b8      	strb	r0, [r7, #30]
 8011a36:	4291      	cmp	r1, r2
 8011a38:	d103      	bne.n	8011a42 <evnt_schdlr_exec+0x942>
 8011a3a:	7f38      	ldrb	r0, [r7, #28]
 8011a3c:	b108      	cbz	r0, 8011a42 <evnt_schdlr_exec+0x942>
 8011a3e:	3801      	subs	r0, #1
 8011a40:	7738      	strb	r0, [r7, #28]
 8011a42:	f646 4190 	movw	r1, #27792	@ 0x6c90
 8011a46:	f108 00e0 	add.w	r0, r8, #224	@ 0xe0
 8011a4a:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8011a4e:	f007 fd5c 	bl	801950a <llhwc_conn_evnt_en_encry>
 8011a52:	2600      	movs	r6, #0
 8011a54:	f89b 009d 	ldrb.w	r0, [fp, #157]	@ 0x9d
 8011a58:	3001      	adds	r0, #1
 8011a5a:	f88b 009d 	strb.w	r0, [fp, #157]	@ 0x9d
 8011a5e:	b386      	cbz	r6, 8011ac2 <evnt_schdlr_exec+0x9c2>
 8011a60:	f007 feb3 	bl	80197ca <llhwc_reset_evnt_hndl>
 8011a64:	2000      	movs	r0, #0
 8011a66:	2400      	movs	r4, #0
 8011a68:	f011 fb9e 	bl	80231a8 <llhwc_slptmr_stop>
 8011a6c:	2001      	movs	r0, #1
 8011a6e:	f010 fee7 	bl	8022840 <llhwc_pwr_switch>
 8011a72:	2012      	movs	r0, #18
 8011a74:	f88b 4098 	strb.w	r4, [fp, #152]	@ 0x98
 8011a78:	f00d ff1e 	bl	801f8b8 <bsp_debug_gpio_toggle>
 8011a7c:	2000      	movs	r0, #0
 8011a7e:	2100      	movs	r1, #0
 8011a80:	f012 f8a6 	bl	8023bd0 <llhwc_cmn_control_aclk>
 8011a84:	f89b 0099 	ldrb.w	r0, [fp, #153]	@ 0x99
 8011a88:	b110      	cbz	r0, 8011a90 <evnt_schdlr_exec+0x990>
 8011a8a:	3801      	subs	r0, #1
 8011a8c:	f88b 0099 	strb.w	r0, [fp, #153]	@ 0x99
 8011a90:	f8da 0024 	ldr.w	r0, [sl, #36]	@ 0x24
 8011a94:	6941      	ldr	r1, [r0, #20]
 8011a96:	4658      	mov	r0, fp
 8011a98:	4788      	blx	r1
 8011a9a:	f1b9 0f00 	cmp.w	r9, #0
 8011a9e:	d130      	bne.n	8011b02 <evnt_schdlr_exec+0xa02>
 8011aa0:	e002      	b.n	8011aa8 <evnt_schdlr_exec+0x9a8>
 8011aa2:	bf00      	nop
 8011aa4:	f00e f95e 	bl	801fd64 <llhwc_phy_get_nxt_seq_from_queue>
 8011aa8:	f00e f956 	bl	801fd58 <llhwc_phy_is_phy_driver_busy>
 8011aac:	2801      	cmp	r0, #1
 8011aae:	d0f9      	beq.n	8011aa4 <evnt_schdlr_exec+0x9a4>
 8011ab0:	f7ff f95e 	bl	8010d70 <evnt_schdlr_hndl_next_evnt>
 8011ab4:	2011      	movs	r0, #17
 8011ab6:	f00d fefd 	bl	801f8b4 <bsp_debug_gpio_clear>
 8011aba:	f1bb 0f00 	cmp.w	fp, #0
 8011abe:	d123      	bne.n	8011b08 <evnt_schdlr_exec+0xa08>
 8011ac0:	e031      	b.n	8011b26 <evnt_schdlr_exec+0xa26>
 8011ac2:	e9db 0124 	ldrd	r0, r1, [fp, #144]	@ 0x90
 8011ac6:	4242      	negs	r2, r0
 8011ac8:	f04f 0201 	mov.w	r2, #1
 8011acc:	eb72 0101 	sbcs.w	r1, r2, r1
 8011ad0:	d30f      	bcc.n	8011af2 <evnt_schdlr_exec+0x9f2>
 8011ad2:	f410 7fc0 	tst.w	r0, #384	@ 0x180
 8011ad6:	d004      	beq.n	8011ae2 <evnt_schdlr_exec+0x9e2>
 8011ad8:	f8db 0074 	ldr.w	r0, [fp, #116]	@ 0x74
 8011adc:	f890 0127 	ldrb.w	r0, [r0, #295]	@ 0x127
 8011ae0:	e001      	b.n	8011ae6 <evnt_schdlr_exec+0x9e6>
 8011ae2:	f007 fe97 	bl	8019814 <llhwc_is_in_augmented_mode>
 8011ae6:	3801      	subs	r0, #1
 8011ae8:	fab0 f080 	clz	r0, r0
 8011aec:	0940      	lsrs	r0, r0, #5
 8011aee:	f007 fe73 	bl	80197d8 <llhwc_enable_augment_event>
 8011af2:	f8da 0024 	ldr.w	r0, [sl, #36]	@ 0x24
 8011af6:	f8ca b028 	str.w	fp, [sl, #40]	@ 0x28
 8011afa:	6901      	ldr	r1, [r0, #16]
 8011afc:	4658      	mov	r0, fp
 8011afe:	4788      	blx	r1
 8011b00:	2600      	movs	r6, #0
 8011b02:	2011      	movs	r0, #17
 8011b04:	f00d fed6 	bl	801f8b4 <bsp_debug_gpio_clear>
 8011b08:	e9db 0124 	ldrd	r0, r1, [fp, #144]	@ 0x90
 8011b0c:	4240      	negs	r0, r0
 8011b0e:	f04f 0001 	mov.w	r0, #1
 8011b12:	4188      	sbcs	r0, r1
 8011b14:	d307      	bcc.n	8011b26 <evnt_schdlr_exec+0xa26>
 8011b16:	bf00      	nop
 8011b18:	f00e f91e 	bl	801fd58 <llhwc_phy_is_phy_driver_busy>
 8011b1c:	2801      	cmp	r0, #1
 8011b1e:	d102      	bne.n	8011b26 <evnt_schdlr_exec+0xa26>
 8011b20:	f00e f920 	bl	801fd64 <llhwc_phy_get_nxt_seq_from_queue>
 8011b24:	e7f8      	b.n	8011b18 <evnt_schdlr_exec+0xa18>
 8011b26:	2010      	movs	r0, #16
 8011b28:	f00d fec4 	bl	801f8b4 <bsp_debug_gpio_clear>
 8011b2c:	4630      	mov	r0, r6
 8011b2e:	b00f      	add	sp, #60	@ 0x3c
 8011b30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011b34 <evnt_schdlr_get_req_phy_clbr_time>:
 8011b34:	b510      	push	{r4, lr}
 8011b36:	4604      	mov	r4, r0
 8011b38:	f00d ff19 	bl	801f96e <llhwc_phy_get_num_of_prdc_clbr_chnls>
 8011b3c:	f894 1047 	ldrb.w	r1, [r4, #71]	@ 0x47
 8011b40:	f104 0334 	add.w	r3, r4, #52	@ 0x34
 8011b44:	1a40      	subs	r0, r0, r1
 8011b46:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011b48:	b2c0      	uxtb	r0, r0
 8011b4a:	fb01 2000 	mla	r0, r1, r0, r2
 8011b4e:	217d      	movs	r1, #125	@ 0x7d
 8011b50:	4418      	add	r0, r3
 8011b52:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 8011b56:	f644 51d3 	movw	r1, #19923	@ 0x4dd3
 8011b5a:	f247 3270 	movw	r2, #29552	@ 0x7370
 8011b5e:	f2c1 0162 	movt	r1, #4194	@ 0x1062
 8011b62:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8011b66:	fba0 0101 	umull	r0, r1, r0, r1
 8011b6a:	7d12      	ldrb	r2, [r2, #20]
 8011b6c:	08c8      	lsrs	r0, r1, #3
 8011b6e:	230a      	movs	r3, #10
 8011b70:	2a01      	cmp	r2, #1
 8011b72:	bf08      	it	eq
 8011b74:	eb03 00d1 	addeq.w	r0, r3, r1, lsr #3
 8011b78:	bd10      	pop	{r4, pc}

08011b7a <evnt_schdlr_rgstr_prdc_clbr_evnt>:
 8011b7a:	b510      	push	{r4, lr}
 8011b7c:	b092      	sub	sp, #72	@ 0x48
 8011b7e:	f641 30bf 	movw	r0, #7103	@ 0x1bbf
 8011b82:	f6c0 0001 	movt	r0, #2049	@ 0x801
 8011b86:	900f      	str	r0, [sp, #60]	@ 0x3c
 8011b88:	f641 40a7 	movw	r0, #7335	@ 0x1ca7
 8011b8c:	f6c0 0001 	movt	r0, #2049	@ 0x801
 8011b90:	9011      	str	r0, [sp, #68]	@ 0x44
 8011b92:	f641 40b5 	movw	r0, #7349	@ 0x1cb5
 8011b96:	f641 51c1 	movw	r1, #7617	@ 0x1dc1
 8011b9a:	2400      	movs	r4, #0
 8011b9c:	f6c0 0001 	movt	r0, #2049	@ 0x801
 8011ba0:	f6c0 0101 	movt	r1, #2049	@ 0x801
 8011ba4:	940e      	str	r4, [sp, #56]	@ 0x38
 8011ba6:	f00e ff0e 	bl	80209c6 <llhwc_phy_set_schdr_clbr_cbks>
 8011baa:	aa04      	add	r2, sp, #16
 8011bac:	2000      	movs	r0, #0
 8011bae:	2104      	movs	r1, #4
 8011bb0:	2300      	movs	r3, #0
 8011bb2:	9402      	str	r4, [sp, #8]
 8011bb4:	9400      	str	r4, [sp, #0]
 8011bb6:	f000 f972 	bl	8011e9e <evnt_schdlr_rgstr_evnt>
 8011bba:	b012      	add	sp, #72	@ 0x48
 8011bbc:	bd10      	pop	{r4, pc}

08011bbe <evnt_schdlr_prdc_clbr_strtd>:
 8011bbe:	b570      	push	{r4, r5, r6, lr}
 8011bc0:	b084      	sub	sp, #16
 8011bc2:	4604      	mov	r4, r0
 8011bc4:	2000      	movs	r0, #0
 8011bc6:	9003      	str	r0, [sp, #12]
 8011bc8:	e9cd 0001 	strd	r0, r0, [sp, #4]
 8011bcc:	2031      	movs	r0, #49	@ 0x31
 8011bce:	6421      	str	r1, [r4, #64]	@ 0x40
 8011bd0:	f00d fe6e 	bl	801f8b0 <bsp_debug_gpio_set>
 8011bd4:	2001      	movs	r0, #1
 8011bd6:	f00d fed9 	bl	801f98c <llhwc_phy_set_phy_clbr_state>
 8011bda:	2001      	movs	r0, #1
 8011bdc:	f00d fe6e 	bl	801f8bc <bsp_set_phy_clbr_state>
 8011be0:	f894 0044 	ldrb.w	r0, [r4, #68]	@ 0x44
 8011be4:	b330      	cbz	r0, 8011c34 <evnt_schdlr_prdc_clbr_strtd+0x76>
 8011be6:	f894 0048 	ldrb.w	r0, [r4, #72]	@ 0x48
 8011bea:	2801      	cmp	r0, #1
 8011bec:	d122      	bne.n	8011c34 <evnt_schdlr_prdc_clbr_strtd+0x76>
 8011bee:	2000      	movs	r0, #0
 8011bf0:	f884 0044 	strb.w	r0, [r4, #68]	@ 0x44
 8011bf4:	2001      	movs	r0, #1
 8011bf6:	f00f fe06 	bl	8021806 <emngr_get_handle_events>
 8011bfa:	b918      	cbnz	r0, 8011c04 <evnt_schdlr_prdc_clbr_strtd+0x46>
 8011bfc:	2001      	movs	r0, #1
 8011bfe:	4621      	mov	r1, r4
 8011c00:	f00f fd47 	bl	8021692 <emngr_post_event>
 8011c04:	f894 0045 	ldrb.w	r0, [r4, #69]	@ 0x45
 8011c08:	f646 462c 	movw	r6, #27692	@ 0x6c2c
 8011c0c:	f2c2 0600 	movt	r6, #8192	@ 0x2000
 8011c10:	b1e0      	cbz	r0, 8011c4c <evnt_schdlr_prdc_clbr_strtd+0x8e>
 8011c12:	6ab0      	ldr	r0, [r6, #40]	@ 0x28
 8011c14:	2101      	movs	r1, #1
 8011c16:	1b00      	subs	r0, r0, r4
 8011c18:	fab0 f080 	clz	r0, r0
 8011c1c:	0940      	lsrs	r0, r0, #5
 8011c1e:	f00d fe00 	bl	801f822 <bsp_assert>
 8011c22:	6ab0      	ldr	r0, [r6, #40]	@ 0x28
 8011c24:	2100      	movs	r1, #0
 8011c26:	f880 108d 	strb.w	r1, [r0, #141]	@ 0x8d
 8011c2a:	2007      	movs	r0, #7
 8011c2c:	62b1      	str	r1, [r6, #40]	@ 0x28
 8011c2e:	f00d fe54 	bl	801f8da <enable_specific_irq>
 8011c32:	e005      	b.n	8011c40 <evnt_schdlr_prdc_clbr_strtd+0x82>
 8011c34:	2007      	movs	r0, #7
 8011c36:	f00d fe50 	bl	801f8da <enable_specific_irq>
 8011c3a:	4620      	mov	r0, r4
 8011c3c:	f001 f9e6 	bl	801300c <evnt_schdlr_prdc_clbr_exec>
 8011c40:	2031      	movs	r0, #49	@ 0x31
 8011c42:	f00d fe37 	bl	801f8b4 <bsp_debug_gpio_clear>
 8011c46:	2000      	movs	r0, #0
 8011c48:	b004      	add	sp, #16
 8011c4a:	bd70      	pop	{r4, r5, r6, pc}
 8011c4c:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8011c4e:	6880      	ldr	r0, [r0, #8]
 8011c50:	4780      	blx	r0
 8011c52:	2800      	cmp	r0, #0
 8011c54:	d0dd      	beq.n	8011c12 <evnt_schdlr_prdc_clbr_strtd+0x54>
 8011c56:	e9d0 0114 	ldrd	r0, r1, [r0, #80]	@ 0x50
 8011c5a:	ad02      	add	r5, sp, #8
 8011c5c:	9002      	str	r0, [sp, #8]
 8011c5e:	4628      	mov	r0, r5
 8011c60:	9103      	str	r1, [sp, #12]
 8011c62:	f240 01ec 	movw	r1, #236	@ 0xec
 8011c66:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8011c6a:	6809      	ldr	r1, [r1, #0]
 8011c6c:	2205      	movs	r2, #5
 8011c6e:	f00f fc5d 	bl	802152c <ble_time_rmv_uint>
 8011c72:	a801      	add	r0, sp, #4
 8011c74:	f010 fbe9 	bl	802244a <llhwc_slptmr_get>
 8011c78:	9901      	ldr	r1, [sp, #4]
 8011c7a:	4628      	mov	r0, r5
 8011c7c:	f00f fc94 	bl	80215a8 <ble_time_cmp_raw_reading>
 8011c80:	f1b0 3fff 	cmp.w	r0, #4294967295	@ 0xffffffff
 8011c84:	dcc5      	bgt.n	8011c12 <evnt_schdlr_prdc_clbr_strtd+0x54>
 8011c86:	e9dd 1001 	ldrd	r1, r0, [sp, #4]
 8011c8a:	6af5      	ldr	r5, [r6, #44]	@ 0x2c
 8011c8c:	f00f fcb1 	bl	80215f2 <ble_time_overflow_diff>
 8011c90:	4601      	mov	r1, r0
 8011c92:	4628      	mov	r0, r5
 8011c94:	f010 fa62 	bl	802215c <os_timer_set>
 8011c98:	fab0 f080 	clz	r0, r0
 8011c9c:	0940      	lsrs	r0, r0, #5
 8011c9e:	2101      	movs	r1, #1
 8011ca0:	f00d fdbf 	bl	801f822 <bsp_assert>
 8011ca4:	e7b5      	b.n	8011c12 <evnt_schdlr_prdc_clbr_strtd+0x54>

08011ca6 <evnt_schdlr_prdc_clbr_abortd>:
 8011ca6:	b580      	push	{r7, lr}
 8011ca8:	2000      	movs	r0, #0
 8011caa:	2100      	movs	r1, #0
 8011cac:	f00d fdb9 	bl	801f822 <bsp_assert>
 8011cb0:	2000      	movs	r0, #0
 8011cb2:	bd80      	pop	{r7, pc}

08011cb4 <evnt_schdlr_phy_clbr_done_clbk>:
 8011cb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011cb6:	b083      	sub	sp, #12
 8011cb8:	f646 472c 	movw	r7, #27692	@ 0x6c2c
 8011cbc:	f2c2 0700 	movt	r7, #8192	@ 0x2000
 8011cc0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011cc2:	460d      	mov	r5, r1
 8011cc4:	68d1      	ldr	r1, [r2, #12]
 8011cc6:	4606      	mov	r6, r0
 8011cc8:	2001      	movs	r0, #1
 8011cca:	4788      	blx	r1
 8011ccc:	4604      	mov	r4, r0
 8011cce:	2800      	cmp	r0, #0
 8011cd0:	f04f 0000 	mov.w	r0, #0
 8011cd4:	d007      	beq.n	8011ce6 <evnt_schdlr_phy_clbr_done_clbk+0x32>
 8011cd6:	bf00      	nop
 8011cd8:	f894 1046 	ldrb.w	r1, [r4, #70]	@ 0x46
 8011cdc:	2901      	cmp	r1, #1
 8011cde:	d003      	beq.n	8011ce8 <evnt_schdlr_phy_clbr_done_clbk+0x34>
 8011ce0:	6fa4      	ldr	r4, [r4, #120]	@ 0x78
 8011ce2:	2c00      	cmp	r4, #0
 8011ce4:	d1f8      	bne.n	8011cd8 <evnt_schdlr_phy_clbr_done_clbk+0x24>
 8011ce6:	2400      	movs	r4, #0
 8011ce8:	e9cd 0000 	strd	r0, r0, [sp]
 8011cec:	4620      	mov	r0, r4
 8011cee:	2101      	movs	r1, #1
 8011cf0:	2c00      	cmp	r4, #0
 8011cf2:	bf18      	it	ne
 8011cf4:	2001      	movne	r0, #1
 8011cf6:	f00d fd94 	bl	801f822 <bsp_assert>
 8011cfa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011cfc:	2101      	movs	r1, #1
 8011cfe:	1a20      	subs	r0, r4, r0
 8011d00:	fab0 f080 	clz	r0, r0
 8011d04:	0940      	lsrs	r0, r0, #5
 8011d06:	f00d fd8c 	bl	801f822 <bsp_assert>
 8011d0a:	2001      	movs	r0, #1
 8011d0c:	f010 fd98 	bl	8022840 <llhwc_pwr_switch>
 8011d10:	2e01      	cmp	r6, #1
 8011d12:	bf08      	it	eq
 8011d14:	2dff      	cmpeq	r5, #255	@ 0xff
 8011d16:	d01e      	beq.n	8011d56 <evnt_schdlr_phy_clbr_done_clbk+0xa2>
 8011d18:	b316      	cbz	r6, 8011d60 <evnt_schdlr_phy_clbr_done_clbk+0xac>
 8011d1a:	2001      	movs	r0, #1
 8011d1c:	2501      	movs	r5, #1
 8011d1e:	f00f fc9f 	bl	8021660 <emngr_handle_remove>
 8011d22:	2000      	movs	r0, #0
 8011d24:	2600      	movs	r6, #0
 8011d26:	f00d fe31 	bl	801f98c <llhwc_phy_set_phy_clbr_state>
 8011d2a:	f247 3090 	movw	r0, #29584	@ 0x7390
 8011d2e:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8011d32:	7881      	ldrb	r1, [r0, #2]
 8011d34:	f884 6045 	strb.w	r6, [r4, #69]	@ 0x45
 8011d38:	2901      	cmp	r1, #1
 8011d3a:	f884 5048 	strb.w	r5, [r4, #72]	@ 0x48
 8011d3e:	f884 6047 	strb.w	r6, [r4, #71]	@ 0x47
 8011d42:	d110      	bne.n	8011d66 <evnt_schdlr_phy_clbr_done_clbk+0xb2>
 8011d44:	78c1      	ldrb	r1, [r0, #3]
 8011d46:	6526      	str	r6, [r4, #80]	@ 0x50
 8011d48:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 8011d4c:	3102      	adds	r1, #2
 8011d4e:	f8a4 6054 	strh.w	r6, [r4, #84]	@ 0x54
 8011d52:	70c1      	strb	r1, [r0, #3]
 8011d54:	e029      	b.n	8011daa <evnt_schdlr_phy_clbr_done_clbk+0xf6>
 8011d56:	2000      	movs	r0, #0
 8011d58:	f884 008d 	strb.w	r0, [r4, #141]	@ 0x8d
 8011d5c:	62b8      	str	r0, [r7, #40]	@ 0x28
 8011d5e:	e02a      	b.n	8011db6 <evnt_schdlr_phy_clbr_done_clbk+0x102>
 8011d60:	f884 5047 	strb.w	r5, [r4, #71]	@ 0x47
 8011d64:	e024      	b.n	8011db0 <evnt_schdlr_phy_clbr_done_clbk+0xfc>
 8011d66:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8011d68:	4625      	mov	r5, r4
 8011d6a:	f646 4784 	movw	r7, #27780	@ 0x6c84
 8011d6e:	f845 0f50 	str.w	r0, [r5, #80]!
 8011d72:	f2c2 0700 	movt	r7, #8192	@ 0x2000
 8011d76:	6839      	ldr	r1, [r7, #0]
 8011d78:	4628      	mov	r0, r5
 8011d7a:	2205      	movs	r2, #5
 8011d7c:	71ae      	strb	r6, [r5, #6]
 8011d7e:	80ae      	strh	r6, [r5, #4]
 8011d80:	f00f fb32 	bl	80213e8 <ble_time_add_uint>
 8011d84:	4668      	mov	r0, sp
 8011d86:	f010 fb60 	bl	802244a <llhwc_slptmr_get>
 8011d8a:	9900      	ldr	r1, [sp, #0]
 8011d8c:	4628      	mov	r0, r5
 8011d8e:	f00f fc0b 	bl	80215a8 <ble_time_cmp_raw_reading>
 8011d92:	0fc0      	lsrs	r0, r0, #31
 8011d94:	2101      	movs	r1, #1
 8011d96:	f00d fd44 	bl	801f822 <bsp_assert>
 8011d9a:	6878      	ldr	r0, [r7, #4]
 8011d9c:	b128      	cbz	r0, 8011daa <evnt_schdlr_phy_clbr_done_clbk+0xf6>
 8011d9e:	68b8      	ldr	r0, [r7, #8]
 8011da0:	3801      	subs	r0, #1
 8011da2:	60b8      	str	r0, [r7, #8]
 8011da4:	bf08      	it	eq
 8011da6:	f007 fcf4 	bleq	8019792 <llhwc_prdc_clbr_deinit>
 8011daa:	2000      	movs	r0, #0
 8011dac:	f00d fd86 	bl	801f8bc <bsp_set_phy_clbr_state>
 8011db0:	4620      	mov	r0, r4
 8011db2:	f001 f828 	bl	8012e06 <evnt_schdlr_gnrc_evnt_cmplt>
 8011db6:	2032      	movs	r0, #50	@ 0x32
 8011db8:	f00d fd7c 	bl	801f8b4 <bsp_debug_gpio_clear>
 8011dbc:	b003      	add	sp, #12
 8011dbe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011dc0 <evnt_schdlr_get_nxt_event_chnl>:
 8011dc0:	b570      	push	{r4, r5, r6, lr}
 8011dc2:	b082      	sub	sp, #8
 8011dc4:	f646 412c 	movw	r1, #27692	@ 0x6c2c
 8011dc8:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8011dcc:	6a49      	ldr	r1, [r1, #36]	@ 0x24
 8011dce:	4606      	mov	r6, r0
 8011dd0:	6889      	ldr	r1, [r1, #8]
 8011dd2:	4788      	blx	r1
 8011dd4:	2800      	cmp	r0, #0
 8011dd6:	d05d      	beq.n	8011e94 <evnt_schdlr_get_nxt_event_chnl+0xd4>
 8011dd8:	e9d0 3224 	ldrd	r3, r2, [r0, #144]	@ 0x90
 8011ddc:	4601      	mov	r1, r0
 8011dde:	f1d3 003f 	rsbs	r0, r3, #63	@ 0x3f
 8011de2:	f04f 0400 	mov.w	r4, #0
 8011de6:	eb74 0002 	sbcs.w	r0, r4, r2
 8011dea:	f04f 00ff 	mov.w	r0, #255	@ 0xff
 8011dee:	db19      	blt.n	8011e24 <evnt_schdlr_get_nxt_event_chnl+0x64>
 8011df0:	3b01      	subs	r3, #1
 8011df2:	f162 0200 	sbc.w	r2, r2, #0
 8011df6:	f1d3 051f 	rsbs	r5, r3, #31
 8011dfa:	eb74 0202 	sbcs.w	r2, r4, r2
 8011dfe:	d34a      	bcc.n	8011e96 <evnt_schdlr_get_nxt_event_chnl+0xd6>
 8011e00:	2201      	movs	r2, #1
 8011e02:	409a      	lsls	r2, r3
 8011e04:	f012 0f8b 	tst.w	r2, #139	@ 0x8b
 8011e08:	d028      	beq.n	8011e5c <evnt_schdlr_get_nxt_event_chnl+0x9c>
 8011e0a:	6f48      	ldr	r0, [r1, #116]	@ 0x74
 8011e0c:	7e00      	ldrb	r0, [r0, #24]
 8011e0e:	07c1      	lsls	r1, r0, #31
 8011e10:	d001      	beq.n	8011e16 <evnt_schdlr_get_nxt_event_chnl+0x56>
 8011e12:	7831      	ldrb	r1, [r6, #0]
 8011e14:	b3a9      	cbz	r1, 8011e82 <evnt_schdlr_get_nxt_event_chnl+0xc2>
 8011e16:	0781      	lsls	r1, r0, #30
 8011e18:	d501      	bpl.n	8011e1e <evnt_schdlr_get_nxt_event_chnl+0x5e>
 8011e1a:	7b31      	ldrb	r1, [r6, #12]
 8011e1c:	b3e9      	cbz	r1, 8011e9a <evnt_schdlr_get_nxt_event_chnl+0xda>
 8011e1e:	0740      	lsls	r0, r0, #29
 8011e20:	d431      	bmi.n	8011e86 <evnt_schdlr_get_nxt_event_chnl+0xc6>
 8011e22:	e037      	b.n	8011e94 <evnt_schdlr_get_nxt_event_chnl+0xd4>
 8011e24:	f083 0540 	eor.w	r5, r3, #64	@ 0x40
 8011e28:	4315      	orrs	r5, r2
 8011e2a:	d01a      	beq.n	8011e62 <evnt_schdlr_get_nxt_event_chnl+0xa2>
 8011e2c:	f083 0680 	eor.w	r6, r3, #128	@ 0x80
 8011e30:	4316      	orrs	r6, r2
 8011e32:	bf1c      	itt	ne
 8011e34:	f483 7380 	eorne.w	r3, r3, #256	@ 0x100
 8011e38:	ea52 0203 	orrsne.w	r2, r2, r3
 8011e3c:	d12b      	bne.n	8011e96 <evnt_schdlr_get_nxt_event_chnl+0xd6>
 8011e3e:	6f48      	ldr	r0, [r1, #116]	@ 0x74
 8011e40:	2201      	movs	r2, #1
 8011e42:	f890 112a 	ldrb.w	r1, [r0, #298]	@ 0x12a
 8011e46:	f88d 2007 	strb.w	r2, [sp, #7]
 8011e4a:	b319      	cbz	r1, 8011e94 <evnt_schdlr_get_nxt_event_chnl+0xd4>
 8011e4c:	f8b0 10da 	ldrh.w	r1, [r0, #218]	@ 0xda
 8011e50:	3028      	adds	r0, #40	@ 0x28
 8011e52:	f10d 0207 	add.w	r2, sp, #7
 8011e56:	f005 ff01 	bl	8017c5c <llhwc_get_ch_idx_algo_2>
 8011e5a:	e01b      	b.n	8011e94 <evnt_schdlr_get_nxt_event_chnl+0xd4>
 8011e5c:	f012 2f80 	tst.w	r2, #2147516416	@ 0x80008000
 8011e60:	d019      	beq.n	8011e96 <evnt_schdlr_get_nxt_event_chnl+0xd6>
 8011e62:	7b09      	ldrb	r1, [r1, #12]
 8011e64:	2001      	movs	r0, #1
 8011e66:	2926      	cmp	r1, #38	@ 0x26
 8011e68:	bf08      	it	eq
 8011e6a:	2003      	moveq	r0, #3
 8011e6c:	2925      	cmp	r1, #37	@ 0x25
 8011e6e:	bf08      	it	eq
 8011e70:	2002      	moveq	r0, #2
 8011e72:	2803      	cmp	r0, #3
 8011e74:	d007      	beq.n	8011e86 <evnt_schdlr_get_nxt_event_chnl+0xc6>
 8011e76:	2802      	cmp	r0, #2
 8011e78:	d00a      	beq.n	8011e90 <evnt_schdlr_get_nxt_event_chnl+0xd0>
 8011e7a:	2801      	cmp	r0, #1
 8011e7c:	d10a      	bne.n	8011e94 <evnt_schdlr_get_nxt_event_chnl+0xd4>
 8011e7e:	7830      	ldrb	r0, [r6, #0]
 8011e80:	b940      	cbnz	r0, 8011e94 <evnt_schdlr_get_nxt_event_chnl+0xd4>
 8011e82:	2000      	movs	r0, #0
 8011e84:	e007      	b.n	8011e96 <evnt_schdlr_get_nxt_event_chnl+0xd6>
 8011e86:	f896 0027 	ldrb.w	r0, [r6, #39]	@ 0x27
 8011e8a:	b918      	cbnz	r0, 8011e94 <evnt_schdlr_get_nxt_event_chnl+0xd4>
 8011e8c:	2027      	movs	r0, #39	@ 0x27
 8011e8e:	e002      	b.n	8011e96 <evnt_schdlr_get_nxt_event_chnl+0xd6>
 8011e90:	7b30      	ldrb	r0, [r6, #12]
 8011e92:	b110      	cbz	r0, 8011e9a <evnt_schdlr_get_nxt_event_chnl+0xda>
 8011e94:	20ff      	movs	r0, #255	@ 0xff
 8011e96:	b002      	add	sp, #8
 8011e98:	bd70      	pop	{r4, r5, r6, pc}
 8011e9a:	200c      	movs	r0, #12
 8011e9c:	e7fb      	b.n	8011e96 <evnt_schdlr_get_nxt_event_chnl+0xd6>

08011e9e <evnt_schdlr_rgstr_evnt>:
 8011e9e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ea2:	b081      	sub	sp, #4
 8011ea4:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 8011ea6:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
 8011eaa:	4683      	mov	fp, r0
 8011eac:	200c      	movs	r0, #12
 8011eae:	461e      	mov	r6, r3
 8011eb0:	4615      	mov	r5, r2
 8011eb2:	4689      	mov	r9, r1
 8011eb4:	f00d fcfc 	bl	801f8b0 <bsp_debug_gpio_set>
 8011eb8:	f001 f919 	bl	80130ee <evnt_schdlr_alloc_evnt>
 8011ebc:	2101      	movs	r1, #1
 8011ebe:	4604      	mov	r4, r0
 8011ec0:	2800      	cmp	r0, #0
 8011ec2:	bf18      	it	ne
 8011ec4:	2001      	movne	r0, #1
 8011ec6:	9000      	str	r0, [sp, #0]
 8011ec8:	f04f 0a01 	mov.w	sl, #1
 8011ecc:	f00d fca9 	bl	801f822 <bsp_assert>
 8011ed0:	f089 0004 	eor.w	r0, r9, #4
 8011ed4:	ea50 000b 	orrs.w	r0, r0, fp
 8011ed8:	bf02      	ittt	eq
 8011eda:	f884 a046 	strbeq.w	sl, [r4, #70]	@ 0x46
 8011ede:	f04f 0b00 	moveq.w	fp, #0
 8011ee2:	f04f 0902 	moveq.w	r9, #2
 8011ee6:	2000      	movs	r0, #0
 8011ee8:	f884 0098 	strb.w	r0, [r4, #152]	@ 0x98
 8011eec:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8011ef0:	e9c4 b924 	strd	fp, r9, [r4, #144]	@ 0x90
 8011ef4:	e880 01c0 	stmia.w	r0, {r6, r7, r8}
 8011ef8:	6765      	str	r5, [r4, #116]	@ 0x74
 8011efa:	b15d      	cbz	r5, 8011f14 <evnt_schdlr_rgstr_evnt+0x76>
 8011efc:	f08b 5080 	eor.w	r0, fp, #268435456	@ 0x10000000
 8011f00:	ea50 0009 	orrs.w	r0, r0, r9
 8011f04:	d106      	bne.n	8011f14 <evnt_schdlr_rgstr_evnt+0x76>
 8011f06:	f895 0050 	ldrb.w	r0, [r5, #80]	@ 0x50
 8011f0a:	7620      	strb	r0, [r4, #24]
 8011f0c:	2000      	movs	r0, #0
 8011f0e:	f885 0050 	strb.w	r0, [r5, #80]	@ 0x50
 8011f12:	e040      	b.n	8011f96 <evnt_schdlr_rgstr_evnt+0xf8>
 8011f14:	f019 0f0a 	tst.w	r9, #10
 8011f18:	d034      	beq.n	8011f84 <evnt_schdlr_rgstr_evnt+0xe6>
 8011f1a:	6a28      	ldr	r0, [r5, #32]
 8011f1c:	f644 56d3 	movw	r6, #19923	@ 0x4dd3
 8011f20:	0080      	lsls	r0, r0, #2
 8011f22:	f2c1 0662 	movt	r6, #4194	@ 0x1062
 8011f26:	fba0 0206 	umull	r0, r2, r0, r6
 8011f2a:	08d0      	lsrs	r0, r2, #3
 8011f2c:	68e9      	ldr	r1, [r5, #12]
 8011f2e:	60a0      	str	r0, [r4, #8]
 8011f30:	68a8      	ldr	r0, [r5, #8]
 8011f32:	f011 fedd 	bl	8023cf0 <US_TO_SLP_TMR_PROTECTED>
 8011f36:	60e0      	str	r0, [r4, #12]
 8011f38:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8011f3c:	f011 fed8 	bl	8023cf0 <US_TO_SLP_TMR_PROTECTED>
 8011f40:	6120      	str	r0, [r4, #16]
 8011f42:	69a8      	ldr	r0, [r5, #24]
 8011f44:	0080      	lsls	r0, r0, #2
 8011f46:	fba0 0106 	umull	r0, r1, r0, r6
 8011f4a:	08c8      	lsrs	r0, r1, #3
 8011f4c:	6160      	str	r0, [r4, #20]
 8011f4e:	69e8      	ldr	r0, [r5, #28]
 8011f50:	6869      	ldr	r1, [r5, #4]
 8011f52:	0080      	lsls	r0, r0, #2
 8011f54:	fba0 0206 	umull	r0, r2, r0, r6
 8011f58:	08d0      	lsrs	r0, r2, #3
 8011f5a:	61a0      	str	r0, [r4, #24]
 8011f5c:	6828      	ldr	r0, [r5, #0]
 8011f5e:	f011 fec7 	bl	8023cf0 <US_TO_SLP_TMR_PROTECTED>
 8011f62:	61e0      	str	r0, [r4, #28]
 8011f64:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 8011f66:	62e0      	str	r0, [r4, #44]	@ 0x2c
 8011f68:	f895 0025 	ldrb.w	r0, [r5, #37]	@ 0x25
 8011f6c:	f884 0021 	strb.w	r0, [r4, #33]	@ 0x21
 8011f70:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8011f72:	6260      	str	r0, [r4, #36]	@ 0x24
 8011f74:	f895 0024 	ldrb.w	r0, [r5, #36]	@ 0x24
 8011f78:	f884 0020 	strb.w	r0, [r4, #32]
 8011f7c:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8011f7e:	62a0      	str	r0, [r4, #40]	@ 0x28
 8011f80:	6b68      	ldr	r0, [r5, #52]	@ 0x34
 8011f82:	6320      	str	r0, [r4, #48]	@ 0x30
 8011f84:	f41b 7fc0 	tst.w	fp, #384	@ 0x180
 8011f88:	d005      	beq.n	8011f96 <evnt_schdlr_rgstr_evnt+0xf8>
 8011f8a:	2000      	movs	r0, #0
 8011f8c:	7660      	strb	r0, [r4, #25]
 8011f8e:	e9c4 0003 	strd	r0, r0, [r4, #12]
 8011f92:	2001      	movs	r0, #1
 8011f94:	7520      	strb	r0, [r4, #20]
 8011f96:	e9d4 1224 	ldrd	r1, r2, [r4, #144]	@ 0x90
 8011f9a:	2000      	movs	r0, #0
 8011f9c:	e9c4 001f 	strd	r0, r0, [r4, #124]	@ 0x7c
 8011fa0:	f081 0002 	eor.w	r0, r1, #2
 8011fa4:	4310      	orrs	r0, r2
 8011fa6:	f646 462c 	movw	r6, #27692	@ 0x6c2c
 8011faa:	f04f 0001 	mov.w	r0, #1
 8011fae:	f2c2 0600 	movt	r6, #8192	@ 0x2000
 8011fb2:	f884 0084 	strb.w	r0, [r4, #132]	@ 0x84
 8011fb6:	d105      	bne.n	8011fc4 <evnt_schdlr_rgstr_evnt+0x126>
 8011fb8:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8011fba:	7e40      	ldrb	r0, [r0, #25]
 8011fbc:	2801      	cmp	r0, #1
 8011fbe:	bf04      	itt	eq
 8011fc0:	2000      	moveq	r0, #0
 8011fc2:	6030      	streq	r0, [r6, #0]
 8011fc4:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8011fc6:	6981      	ldr	r1, [r0, #24]
 8011fc8:	4620      	mov	r0, r4
 8011fca:	4788      	blx	r1
 8011fcc:	b130      	cbz	r0, 8011fdc <evnt_schdlr_rgstr_evnt+0x13e>
 8011fce:	f089 0008 	eor.w	r0, r9, #8
 8011fd2:	ea50 000b 	orrs.w	r0, r0, fp
 8011fd6:	d13e      	bne.n	8012056 <evnt_schdlr_rgstr_evnt+0x1b8>
 8011fd8:	2400      	movs	r4, #0
 8011fda:	e0bb      	b.n	8012154 <evnt_schdlr_rgstr_evnt+0x2b6>
 8011fdc:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8011fde:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8011fe0:	4780      	blx	r0
 8011fe2:	6a71      	ldr	r1, [r6, #36]	@ 0x24
 8011fe4:	4605      	mov	r5, r0
 8011fe6:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8011fe8:	4788      	blx	r1
 8011fea:	4428      	add	r0, r5
 8011fec:	2801      	cmp	r0, #1
 8011fee:	d114      	bne.n	801201a <evnt_schdlr_rgstr_evnt+0x17c>
 8011ff0:	6af0      	ldr	r0, [r6, #44]	@ 0x2c
 8011ff2:	b990      	cbnz	r0, 801201a <evnt_schdlr_rgstr_evnt+0x17c>
 8011ff4:	f642 10c5 	movw	r0, #10693	@ 0x29c5
 8011ff8:	f6c0 0001 	movt	r0, #2049	@ 0x801
 8011ffc:	2100      	movs	r1, #0
 8011ffe:	2200      	movs	r2, #0
 8012000:	f00f fee4 	bl	8021dcc <os_timer_create>
 8012004:	2101      	movs	r1, #1
 8012006:	62f0      	str	r0, [r6, #44]	@ 0x2c
 8012008:	2800      	cmp	r0, #0
 801200a:	bf18      	it	ne
 801200c:	2001      	movne	r0, #1
 801200e:	f00d fc08 	bl	801f822 <bsp_assert>
 8012012:	6af0      	ldr	r0, [r6, #44]	@ 0x2c
 8012014:	2101      	movs	r1, #1
 8012016:	f00f ff22 	bl	8021e5e <os_timer_set_prio>
 801201a:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 801201c:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 801201e:	4780      	blx	r0
 8012020:	2801      	cmp	r0, #1
 8012022:	bf04      	itt	eq
 8012024:	2001      	moveq	r0, #1
 8012026:	f011 fe7c 	bleq	8023d22 <llhwc_cmn_set_controller_activity>
 801202a:	e9d4 0124 	ldrd	r0, r1, [r4, #144]	@ 0x90
 801202e:	f000 43e0 	and.w	r3, r0, #1879048192	@ 0x70000000
 8012032:	f001 0201 	and.w	r2, r1, #1
 8012036:	18d2      	adds	r2, r2, r3
 8012038:	f040 8087 	bne.w	801214a <evnt_schdlr_rgstr_evnt+0x2ac>
 801203c:	f480 2200 	eor.w	r2, r0, #524288	@ 0x80000
 8012040:	430a      	orrs	r2, r1
 8012042:	d00d      	beq.n	8012060 <evnt_schdlr_rgstr_evnt+0x1c2>
 8012044:	f081 0102 	eor.w	r1, r1, #2
 8012048:	4308      	orrs	r0, r1
 801204a:	d10e      	bne.n	801206a <evnt_schdlr_rgstr_evnt+0x1cc>
 801204c:	f894 0046 	ldrb.w	r0, [r4, #70]	@ 0x46
 8012050:	2801      	cmp	r0, #1
 8012052:	d10a      	bne.n	801206a <evnt_schdlr_rgstr_evnt+0x1cc>
 8012054:	e079      	b.n	801214a <evnt_schdlr_rgstr_evnt+0x2ac>
 8012056:	4620      	mov	r0, r4
 8012058:	f001 f85a 	bl	8013110 <evnt_schdlr_free_evnt>
 801205c:	2400      	movs	r4, #0
 801205e:	e086      	b.n	801216e <evnt_schdlr_rgstr_evnt+0x2d0>
 8012060:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8012062:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8012064:	4780      	blx	r0
 8012066:	2801      	cmp	r0, #1
 8012068:	d06d      	beq.n	8012146 <evnt_schdlr_rgstr_evnt+0x2a8>
 801206a:	9800      	ldr	r0, [sp, #0]
 801206c:	2100      	movs	r1, #0
 801206e:	2500      	movs	r5, #0
 8012070:	f00d fbd7 	bl	801f822 <bsp_assert>
 8012074:	e9d4 1024 	ldrd	r1, r0, [r4, #144]	@ 0x90
 8012078:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801207c:	f2c0 021f 	movt	r2, #31
 8012080:	1a52      	subs	r2, r2, r1
 8012082:	eb75 0200 	sbcs.w	r2, r5, r0
 8012086:	db16      	blt.n	80120b6 <evnt_schdlr_rgstr_evnt+0x218>
 8012088:	f1d1 023f 	rsbs	r2, r1, #63	@ 0x3f
 801208c:	eb75 0200 	sbcs.w	r2, r5, r0
 8012090:	db33      	blt.n	80120fa <evnt_schdlr_rgstr_evnt+0x25c>
 8012092:	3901      	subs	r1, #1
 8012094:	f160 0000 	sbc.w	r0, r0, #0
 8012098:	f1d1 021f 	rsbs	r2, r1, #31
 801209c:	f04f 0200 	mov.w	r2, #0
 80120a0:	eb72 0000 	sbcs.w	r0, r2, r0
 80120a4:	d36d      	bcc.n	8012182 <evnt_schdlr_rgstr_evnt+0x2e4>
 80120a6:	2001      	movs	r0, #1
 80120a8:	4088      	lsls	r0, r1
 80120aa:	f010 0f8b 	tst.w	r0, #139	@ 0x8b
 80120ae:	d035      	beq.n	801211c <evnt_schdlr_rgstr_evnt+0x27e>
 80120b0:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 80120b2:	62c4      	str	r4, [r0, #44]	@ 0x2c
 80120b4:	e047      	b.n	8012146 <evnt_schdlr_rgstr_evnt+0x2a8>
 80120b6:	f06f 4240 	mvn.w	r2, #3221225472	@ 0xc0000000
 80120ba:	1a52      	subs	r2, r2, r1
 80120bc:	eb75 0200 	sbcs.w	r2, r5, r0
 80120c0:	da0d      	bge.n	80120de <evnt_schdlr_rgstr_evnt+0x240>
 80120c2:	2801      	cmp	r0, #1
 80120c4:	dd30      	ble.n	8012128 <evnt_schdlr_rgstr_evnt+0x28a>
 80120c6:	f080 0202 	eor.w	r2, r0, #2
 80120ca:	430a      	orrs	r2, r1
 80120cc:	bf1c      	itt	ne
 80120ce:	f080 0204 	eorne.w	r2, r0, #4
 80120d2:	ea52 0201 	orrsne.w	r2, r2, r1
 80120d6:	d036      	beq.n	8012146 <evnt_schdlr_rgstr_evnt+0x2a8>
 80120d8:	f080 0008 	eor.w	r0, r0, #8
 80120dc:	e031      	b.n	8012142 <evnt_schdlr_rgstr_evnt+0x2a4>
 80120de:	f06f 4270 	mvn.w	r2, #4026531840	@ 0xf0000000
 80120e2:	1a52      	subs	r2, r2, r1
 80120e4:	f04f 0200 	mov.w	r2, #0
 80120e8:	4182      	sbcs	r2, r0
 80120ea:	db24      	blt.n	8012136 <evnt_schdlr_rgstr_evnt+0x298>
 80120ec:	f481 1200 	eor.w	r2, r1, #2097152	@ 0x200000
 80120f0:	4302      	orrs	r2, r0
 80120f2:	d028      	beq.n	8012146 <evnt_schdlr_rgstr_evnt+0x2a8>
 80120f4:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 80120f8:	e023      	b.n	8012142 <evnt_schdlr_rgstr_evnt+0x2a4>
 80120fa:	f081 0240 	eor.w	r2, r1, #64	@ 0x40
 80120fe:	4302      	orrs	r2, r0
 8012100:	d03c      	beq.n	801217c <evnt_schdlr_rgstr_evnt+0x2de>
 8012102:	f081 0280 	eor.w	r2, r1, #128	@ 0x80
 8012106:	4302      	orrs	r2, r0
 8012108:	bf1c      	itt	ne
 801210a:	f481 7180 	eorne.w	r1, r1, #256	@ 0x100
 801210e:	ea50 0001 	orrsne.w	r0, r0, r1
 8012112:	d136      	bne.n	8012182 <evnt_schdlr_rgstr_evnt+0x2e4>
 8012114:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8012116:	f8c0 40c0 	str.w	r4, [r0, #192]	@ 0xc0
 801211a:	e014      	b.n	8012146 <evnt_schdlr_rgstr_evnt+0x2a8>
 801211c:	f010 2f80 	tst.w	r0, #2147516416	@ 0x80008000
 8012120:	d02f      	beq.n	8012182 <evnt_schdlr_rgstr_evnt+0x2e4>
 8012122:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8012124:	6244      	str	r4, [r0, #36]	@ 0x24
 8012126:	e00e      	b.n	8012146 <evnt_schdlr_rgstr_evnt+0x2a8>
 8012128:	f081 4280 	eor.w	r2, r1, #1073741824	@ 0x40000000
 801212c:	4302      	orrs	r2, r0
 801212e:	d00a      	beq.n	8012146 <evnt_schdlr_rgstr_evnt+0x2a8>
 8012130:	f080 0001 	eor.w	r0, r0, #1
 8012134:	e005      	b.n	8012142 <evnt_schdlr_rgstr_evnt+0x2a4>
 8012136:	f081 5280 	eor.w	r2, r1, #268435456	@ 0x10000000
 801213a:	4302      	orrs	r2, r0
 801213c:	d003      	beq.n	8012146 <evnt_schdlr_rgstr_evnt+0x2a8>
 801213e:	f081 5100 	eor.w	r1, r1, #536870912	@ 0x20000000
 8012142:	4308      	orrs	r0, r1
 8012144:	d11d      	bne.n	8012182 <evnt_schdlr_rgstr_evnt+0x2e4>
 8012146:	f7fe fe13 	bl	8010d70 <evnt_schdlr_hndl_next_evnt>
 801214a:	f089 0008 	eor.w	r0, r9, #8
 801214e:	ea50 000b 	orrs.w	r0, r0, fp
 8012152:	d103      	bne.n	801215c <evnt_schdlr_rgstr_evnt+0x2be>
 8012154:	4620      	mov	r0, r4
 8012156:	f008 fd9d 	bl	801ac94 <evnt_schdlr_check_if_evnt_exist>
 801215a:	4604      	mov	r4, r0
 801215c:	f1b8 0f00 	cmp.w	r8, #0
 8012160:	bf18      	it	ne
 8012162:	2c00      	cmpne	r4, #0
 8012164:	d003      	beq.n	801216e <evnt_schdlr_rgstr_evnt+0x2d0>
 8012166:	6f20      	ldr	r0, [r4, #112]	@ 0x70
 8012168:	2800      	cmp	r0, #0
 801216a:	bf08      	it	eq
 801216c:	4604      	moveq	r4, r0
 801216e:	200c      	movs	r0, #12
 8012170:	f00d fba0 	bl	801f8b4 <bsp_debug_gpio_clear>
 8012174:	4620      	mov	r0, r4
 8012176:	b001      	add	sp, #4
 8012178:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801217c:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 801217e:	6304      	str	r4, [r0, #48]	@ 0x30
 8012180:	e7e1      	b.n	8012146 <evnt_schdlr_rgstr_evnt+0x2a8>
 8012182:	2000      	movs	r0, #0
 8012184:	2101      	movs	r1, #1
 8012186:	f00d fb4c 	bl	801f822 <bsp_assert>
 801218a:	e7dc      	b.n	8012146 <evnt_schdlr_rgstr_evnt+0x2a8>

0801218c <evnt_schdlr_init>:
 801218c:	b570      	push	{r4, r5, r6, lr}
 801218e:	f646 442c 	movw	r4, #27692	@ 0x6c2c
 8012192:	f2c2 0400 	movt	r4, #8192	@ 0x2000
 8012196:	4620      	mov	r0, r4
 8012198:	2100      	movs	r1, #0
 801219a:	223c      	movs	r2, #60	@ 0x3c
 801219c:	2600      	movs	r6, #0
 801219e:	f012 fa23 	bl	80245e8 <ble_memset>
 80121a2:	f240 00ec 	movw	r0, #236	@ 0xec
 80121a6:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80121aa:	2133      	movs	r1, #51	@ 0x33
 80121ac:	6001      	str	r1, [r0, #0]
 80121ae:	f646 4168 	movw	r1, #27752	@ 0x6c68
 80121b2:	f248 15b4 	movw	r5, #33204	@ 0x81b4
 80121b6:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 80121ba:	200f      	movs	r0, #15
 80121bc:	2216      	movs	r2, #22
 80121be:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 80121c2:	2314      	movs	r3, #20
 80121c4:	e881 000d 	stmia.w	r1, {r0, r2, r3}
 80121c8:	e9c1 0203 	strd	r0, r2, [r1, #12]
 80121cc:	6828      	ldr	r0, [r5, #0]
 80121ce:	760e      	strb	r6, [r1, #24]
 80121d0:	614b      	str	r3, [r1, #20]
 80121d2:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80121d6:	f00d fb88 	bl	801f8ea <os_rcrsv_mutex_wait>
 80121da:	f008 ffc8 	bl	801b16e <evnt_schdlr_multi_role_instance>
 80121de:	2101      	movs	r1, #1
 80121e0:	6260      	str	r0, [r4, #36]	@ 0x24
 80121e2:	2800      	cmp	r0, #0
 80121e4:	bf18      	it	ne
 80121e6:	2001      	movne	r0, #1
 80121e8:	f00d fb1b 	bl	801f822 <bsp_assert>
 80121ec:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 80121ee:	6800      	ldr	r0, [r0, #0]
 80121f0:	4780      	blx	r0
 80121f2:	f242 2249 	movw	r2, #8777	@ 0x2249
 80121f6:	2000      	movs	r0, #0
 80121f8:	f6c0 0201 	movt	r2, #2049	@ 0x801
 80121fc:	2105      	movs	r1, #5
 80121fe:	6026      	str	r6, [r4, #0]
 8012200:	f00f fa22 	bl	8021648 <emngr_handle_init>
 8012204:	f242 62bf 	movw	r2, #9919	@ 0x26bf
 8012208:	2001      	movs	r0, #1
 801220a:	f6c0 0201 	movt	r2, #2049	@ 0x801
 801220e:	2101      	movs	r1, #1
 8012210:	f00f fa1a 	bl	8021648 <emngr_handle_init>
 8012214:	f240 00f0 	movw	r0, #240	@ 0xf0
 8012218:	f248 2100 	movw	r1, #33280	@ 0x8200
 801221c:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8012220:	f6c4 0102 	movt	r1, #18434	@ 0x4802
 8012224:	6001      	str	r1, [r0, #0]
 8012226:	f242 707d 	movw	r0, #10109	@ 0x277d
 801222a:	f6c0 0001 	movt	r0, #2049	@ 0x801
 801222e:	f006 f880 	bl	8018332 <llhwc_rgstr_evnt_schdlr_cb>
 8012232:	f642 00c3 	movw	r0, #10435	@ 0x28c3
 8012236:	f6c0 0001 	movt	r0, #2049	@ 0x801
 801223a:	f012 f835 	bl	80242a8 <llhwc_cmn_rgstr_evnt_schdlr_timing_update_cb>
 801223e:	6828      	ldr	r0, [r5, #0]
 8012240:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012244:	f00d bb57 	b.w	801f8f6 <os_rcrsv_mutex_release>

08012248 <evnt_schdlr_hw_evnt_cmplt>:
 8012248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801224c:	b083      	sub	sp, #12
 801224e:	4605      	mov	r5, r0
 8012250:	208f      	movs	r0, #143	@ 0x8f
 8012252:	f00d fb2d 	bl	801f8b0 <bsp_debug_gpio_set>
 8012256:	2d00      	cmp	r5, #0
 8012258:	d057      	beq.n	801230a <evnt_schdlr_hw_evnt_cmplt+0xc2>
 801225a:	f646 462c 	movw	r6, #27692	@ 0x6c2c
 801225e:	f2c2 0600 	movt	r6, #8192	@ 0x2000
 8012262:	6ab0      	ldr	r0, [r6, #40]	@ 0x28
 8012264:	2800      	cmp	r0, #0
 8012266:	d049      	beq.n	80122fc <evnt_schdlr_hw_evnt_cmplt+0xb4>
 8012268:	f248 18b4 	movw	r8, #33204	@ 0x81b4
 801226c:	f2c2 0800 	movt	r8, #8192	@ 0x2000
 8012270:	f8d8 0000 	ldr.w	r0, [r8]
 8012274:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8012278:	f00d fb37 	bl	801f8ea <os_rcrsv_mutex_wait>
 801227c:	69ac      	ldr	r4, [r5, #24]
 801227e:	f894 0098 	ldrb.w	r0, [r4, #152]	@ 0x98
 8012282:	2804      	cmp	r0, #4
 8012284:	d167      	bne.n	8012356 <evnt_schdlr_hw_evnt_cmplt+0x10e>
 8012286:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
 801228a:	2130      	movs	r1, #48	@ 0x30
 801228c:	f6c7 01a0 	movt	r1, #30880	@ 0x78a0
 8012290:	4208      	tst	r0, r1
 8012292:	d003      	beq.n	801229c <evnt_schdlr_hw_evnt_cmplt+0x54>
 8012294:	f895 0024 	ldrb.w	r0, [r5, #36]	@ 0x24
 8012298:	2801      	cmp	r0, #1
 801229a:	d108      	bne.n	80122ae <evnt_schdlr_hw_evnt_cmplt+0x66>
 801229c:	f896 1038 	ldrb.w	r1, [r6, #56]	@ 0x38
 80122a0:	2000      	movs	r0, #0
 80122a2:	f884 008d 	strb.w	r0, [r4, #141]	@ 0x8d
 80122a6:	62b0      	str	r0, [r6, #40]	@ 0x28
 80122a8:	1e48      	subs	r0, r1, #1
 80122aa:	f886 0038 	strb.w	r0, [r6, #56]	@ 0x38
 80122ae:	68a8      	ldr	r0, [r5, #8]
 80122b0:	b170      	cbz	r0, 80122d0 <evnt_schdlr_hw_evnt_cmplt+0x88>
 80122b2:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80122b6:	bf00      	nop
 80122b8:	f895 1020 	ldrb.w	r1, [r5, #32]
 80122bc:	3701      	adds	r7, #1
 80122be:	428f      	cmp	r7, r1
 80122c0:	d206      	bcs.n	80122d0 <evnt_schdlr_hw_evnt_cmplt+0x88>
 80122c2:	6841      	ldr	r1, [r0, #4]
 80122c4:	60a9      	str	r1, [r5, #8]
 80122c6:	f00c fad0 	bl	801e86a <free_buff_hdr>
 80122ca:	68a8      	ldr	r0, [r5, #8]
 80122cc:	2800      	cmp	r0, #0
 80122ce:	d1f3      	bne.n	80122b8 <evnt_schdlr_hw_evnt_cmplt+0x70>
 80122d0:	f896 0039 	ldrb.w	r0, [r6, #57]	@ 0x39
 80122d4:	b110      	cbz	r0, 80122dc <evnt_schdlr_hw_evnt_cmplt+0x94>
 80122d6:	3801      	subs	r0, #1
 80122d8:	f886 0039 	strb.w	r0, [r6, #57]	@ 0x39
 80122dc:	f8d8 0000 	ldr.w	r0, [r8]
 80122e0:	f00d fb09 	bl	801f8f6 <os_rcrsv_mutex_release>
 80122e4:	4628      	mov	r0, r5
 80122e6:	f00f fbab 	bl	8021a40 <os_mem_pool_free>
 80122ea:	2c00      	cmp	r4, #0
 80122ec:	f040 819d 	bne.w	801262a <evnt_schdlr_hw_evnt_cmplt+0x3e2>
 80122f0:	e19f      	b.n	8012632 <evnt_schdlr_hw_evnt_cmplt+0x3ea>
 80122f2:	bf00      	nop
 80122f4:	6841      	ldr	r1, [r0, #4]
 80122f6:	60a9      	str	r1, [r5, #8]
 80122f8:	f00c fab7 	bl	801e86a <free_buff_hdr>
 80122fc:	68a8      	ldr	r0, [r5, #8]
 80122fe:	2800      	cmp	r0, #0
 8012300:	d1f8      	bne.n	80122f4 <evnt_schdlr_hw_evnt_cmplt+0xac>
 8012302:	4628      	mov	r0, r5
 8012304:	f00f fb9c 	bl	8021a40 <os_mem_pool_free>
 8012308:	e193      	b.n	8012632 <evnt_schdlr_hw_evnt_cmplt+0x3ea>
 801230a:	20c2      	movs	r0, #194	@ 0xc2
 801230c:	f00d fad4 	bl	801f8b8 <bsp_debug_gpio_toggle>
 8012310:	f646 402c 	movw	r0, #27692	@ 0x6c2c
 8012314:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8012318:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 801231a:	2c00      	cmp	r4, #0
 801231c:	f000 8189 	beq.w	8012632 <evnt_schdlr_hw_evnt_cmplt+0x3ea>
 8012320:	2500      	movs	r5, #0
 8012322:	6285      	str	r5, [r0, #40]	@ 0x28
 8012324:	e9d4 301b 	ldrd	r3, r0, [r4, #108]	@ 0x6c
 8012328:	2102      	movs	r1, #2
 801232a:	f884 1098 	strb.w	r1, [r4, #152]	@ 0x98
 801232e:	2100      	movs	r1, #0
 8012330:	2200      	movs	r2, #0
 8012332:	f884 508d 	strb.w	r5, [r4, #141]	@ 0x8d
 8012336:	4798      	blx	r3
 8012338:	e9d4 1024 	ldrd	r1, r0, [r4, #144]	@ 0x90
 801233c:	f081 5280 	eor.w	r2, r1, #268435456	@ 0x10000000
 8012340:	4302      	orrs	r2, r0
 8012342:	bf1a      	itte	ne
 8012344:	f081 6100 	eorne.w	r1, r1, #134217728	@ 0x8000000
 8012348:	ea50 0001 	orrsne.w	r0, r0, r1
 801234c:	6725      	streq	r5, [r4, #112]	@ 0x70
 801234e:	4620      	mov	r0, r4
 8012350:	f000 fca8 	bl	8012ca4 <evnt_schdlr_evnt_updtd>
 8012354:	e169      	b.n	801262a <evnt_schdlr_hw_evnt_cmplt+0x3e2>
 8012356:	f105 0022 	add.w	r0, r5, #34	@ 0x22
 801235a:	f013 ffd8 	bl	802630e <db_calc_rssi_compensated_value>
 801235e:	f105 0023 	add.w	r0, r5, #35	@ 0x23
 8012362:	f013 ffd4 	bl	802630e <db_calc_rssi_compensated_value>
 8012366:	f895 0024 	ldrb.w	r0, [r5, #36]	@ 0x24
 801236a:	2801      	cmp	r0, #1
 801236c:	d00f      	beq.n	801238e <evnt_schdlr_hw_evnt_cmplt+0x146>
 801236e:	f8d4 1090 	ldr.w	r1, [r4, #144]	@ 0x90
 8012372:	f411 7fc0 	tst.w	r1, #384	@ 0x180
 8012376:	d10a      	bne.n	801238e <evnt_schdlr_hw_evnt_cmplt+0x146>
 8012378:	f8d4 2094 	ldr.w	r2, [r4, #148]	@ 0x94
 801237c:	f481 2380 	eor.w	r3, r1, #262144	@ 0x40000
 8012380:	4313      	orrs	r3, r2
 8012382:	bf1c      	itt	ne
 8012384:	f481 3100 	eorne.w	r1, r1, #131072	@ 0x20000
 8012388:	ea51 0102 	orrsne.w	r1, r1, r2
 801238c:	d124      	bne.n	80123d8 <evnt_schdlr_hw_evnt_cmplt+0x190>
 801238e:	f896 2039 	ldrb.w	r2, [r6, #57]	@ 0x39
 8012392:	2100      	movs	r1, #0
 8012394:	f884 108d 	strb.w	r1, [r4, #141]	@ 0x8d
 8012398:	b902      	cbnz	r2, 801239c <evnt_schdlr_hw_evnt_cmplt+0x154>
 801239a:	62b1      	str	r1, [r6, #40]	@ 0x28
 801239c:	f8d4 1090 	ldr.w	r1, [r4, #144]	@ 0x90
 80123a0:	f411 7fc0 	tst.w	r1, #384	@ 0x180
 80123a4:	d018      	beq.n	80123d8 <evnt_schdlr_hw_evnt_cmplt+0x190>
 80123a6:	f8d4 2094 	ldr.w	r2, [r4, #148]	@ 0x94
 80123aa:	f081 0180 	eor.w	r1, r1, #128	@ 0x80
 80123ae:	4311      	orrs	r1, r2
 80123b0:	d10b      	bne.n	80123ca <evnt_schdlr_hw_evnt_cmplt+0x182>
 80123b2:	f895 1020 	ldrb.w	r1, [r5, #32]
 80123b6:	b911      	cbnz	r1, 80123be <evnt_schdlr_hw_evnt_cmplt+0x176>
 80123b8:	f895 1021 	ldrb.w	r1, [r5, #33]	@ 0x21
 80123bc:	b129      	cbz	r1, 80123ca <evnt_schdlr_hw_evnt_cmplt+0x182>
 80123be:	f894 108c 	ldrb.w	r1, [r4, #140]	@ 0x8c
 80123c2:	b911      	cbnz	r1, 80123ca <evnt_schdlr_hw_evnt_cmplt+0x182>
 80123c4:	2101      	movs	r1, #1
 80123c6:	f884 108c 	strb.w	r1, [r4, #140]	@ 0x8c
 80123ca:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 80123ce:	6f62      	ldr	r2, [r4, #116]	@ 0x74
 80123d0:	f882 1121 	strb.w	r1, [r2, #289]	@ 0x121
 80123d4:	f882 0120 	strb.w	r0, [r2, #288]	@ 0x120
 80123d8:	f8d8 0000 	ldr.w	r0, [r8]
 80123dc:	f00d fa8b 	bl	801f8f6 <os_rcrsv_mutex_release>
 80123e0:	f8d4 1090 	ldr.w	r1, [r4, #144]	@ 0x90
 80123e4:	f411 7fc0 	tst.w	r1, #384	@ 0x180
 80123e8:	f000 807e 	beq.w	80124e8 <evnt_schdlr_hw_evnt_cmplt+0x2a0>
 80123ec:	f895 0020 	ldrb.w	r0, [r5, #32]
 80123f0:	b938      	cbnz	r0, 8012402 <evnt_schdlr_hw_evnt_cmplt+0x1ba>
 80123f2:	f895 0021 	ldrb.w	r0, [r5, #33]	@ 0x21
 80123f6:	b920      	cbnz	r0, 8012402 <evnt_schdlr_hw_evnt_cmplt+0x1ba>
 80123f8:	f894 009b 	ldrb.w	r0, [r4, #155]	@ 0x9b
 80123fc:	3001      	adds	r0, #1
 80123fe:	f884 009b 	strb.w	r0, [r4, #155]	@ 0x9b
 8012402:	f894 0099 	ldrb.w	r0, [r4, #153]	@ 0x99
 8012406:	b110      	cbz	r0, 801240e <evnt_schdlr_hw_evnt_cmplt+0x1c6>
 8012408:	3801      	subs	r0, #1
 801240a:	f884 0099 	strb.w	r0, [r4, #153]	@ 0x99
 801240e:	f895 b01d 	ldrb.w	fp, [r5, #29]
 8012412:	2001      	movs	r0, #1
 8012414:	2101      	movs	r1, #1
 8012416:	f00d fa04 	bl	801f822 <bsp_assert>
 801241a:	f646 49d8 	movw	r9, #27864	@ 0x6cd8
 801241e:	2000      	movs	r0, #0
 8012420:	f1bb 0f00 	cmp.w	fp, #0
 8012424:	f2c2 0900 	movt	r9, #8192	@ 0x2000
 8012428:	7768      	strb	r0, [r5, #29]
 801242a:	f8cd b004 	str.w	fp, [sp, #4]
 801242e:	d062      	beq.n	80124f6 <evnt_schdlr_hw_evnt_cmplt+0x2ae>
 8012430:	f8d9 0000 	ldr.w	r0, [r9]
 8012434:	f104 060c 	add.w	r6, r4, #12
 8012438:	f04f 0a00 	mov.w	sl, #0
 801243c:	2100      	movs	r1, #0
 801243e:	f04f 0800 	mov.w	r8, #0
 8012442:	9102      	str	r1, [sp, #8]
 8012444:	2800      	cmp	r0, #0
 8012446:	d05a      	beq.n	80124fe <evnt_schdlr_hw_evnt_cmplt+0x2b6>
 8012448:	4630      	mov	r0, r6
 801244a:	f000 fe9c 	bl	8013186 <packet_dequeue>
 801244e:	4607      	mov	r7, r0
 8012450:	f240 00f0 	movw	r0, #240	@ 0xf0
 8012454:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8012458:	4287      	cmp	r7, r0
 801245a:	d02d      	beq.n	80124b8 <evnt_schdlr_hw_evnt_cmplt+0x270>
 801245c:	7bb8      	ldrb	r0, [r7, #14]
 801245e:	0780      	lsls	r0, r0, #30
 8012460:	d520      	bpl.n	80124a4 <evnt_schdlr_hw_evnt_cmplt+0x25c>
 8012462:	6838      	ldr	r0, [r7, #0]
 8012464:	8979      	ldrh	r1, [r7, #10]
 8012466:	89ba      	ldrh	r2, [r7, #12]
 8012468:	4408      	add	r0, r1
 801246a:	7e61      	ldrb	r1, [r4, #25]
 801246c:	4410      	add	r0, r2
 801246e:	3901      	subs	r1, #1
 8012470:	7900      	ldrb	r0, [r0, #4]
 8012472:	7661      	strb	r1, [r4, #25]
 8012474:	f895 1027 	ldrb.w	r1, [r5, #39]	@ 0x27
 8012478:	2802      	cmp	r0, #2
 801247a:	f101 0101 	add.w	r1, r1, #1
 801247e:	f885 1027 	strb.w	r1, [r5, #39]	@ 0x27
 8012482:	d10f      	bne.n	80124a4 <evnt_schdlr_hw_evnt_cmplt+0x25c>
 8012484:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8012486:	f890 1123 	ldrb.w	r1, [r0, #291]	@ 0x123
 801248a:	2905      	cmp	r1, #5
 801248c:	d00a      	beq.n	80124a4 <evnt_schdlr_hw_evnt_cmplt+0x25c>
 801248e:	220d      	movs	r2, #13
 8012490:	f100 0158 	add.w	r1, r0, #88	@ 0x58
 8012494:	6580      	str	r0, [r0, #88]	@ 0x58
 8012496:	f880 205c 	strb.w	r2, [r0, #92]	@ 0x5c
 801249a:	2002      	movs	r0, #2
 801249c:	f00f f8f9 	bl	8021692 <emngr_post_event>
 80124a0:	2001      	movs	r0, #1
 80124a2:	9002      	str	r0, [sp, #8]
 80124a4:	4638      	mov	r0, r7
 80124a6:	f00c f9e0 	bl	801e86a <free_buff_hdr>
 80124aa:	2800      	cmp	r0, #0
 80124ac:	7f68      	ldrb	r0, [r5, #29]
 80124ae:	bf18      	it	ne
 80124b0:	f108 0801 	addne.w	r8, r8, #1
 80124b4:	3001      	adds	r0, #1
 80124b6:	7768      	strb	r0, [r5, #29]
 80124b8:	7e20      	ldrb	r0, [r4, #24]
 80124ba:	eb09 018a 	add.w	r1, r9, sl, lsl #2
 80124be:	3801      	subs	r0, #1
 80124c0:	7620      	strb	r0, [r4, #24]
 80124c2:	6848      	ldr	r0, [r1, #4]
 80124c4:	f240 01f0 	movw	r1, #240	@ 0xf0
 80124c8:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 80124cc:	6809      	ldr	r1, [r1, #0]
 80124ce:	4288      	cmp	r0, r1
 80124d0:	d015      	beq.n	80124fe <evnt_schdlr_hw_evnt_cmplt+0x2b6>
 80124d2:	f1ba 0f06 	cmp.w	sl, #6
 80124d6:	d812      	bhi.n	80124fe <evnt_schdlr_hw_evnt_cmplt+0x2b6>
 80124d8:	f1ab 0b01 	sub.w	fp, fp, #1
 80124dc:	ea5f 610b 	movs.w	r1, fp, lsl #24
 80124e0:	f10a 0a01 	add.w	sl, sl, #1
 80124e4:	d1ae      	bne.n	8012444 <evnt_schdlr_hw_evnt_cmplt+0x1fc>
 80124e6:	e00a      	b.n	80124fe <evnt_schdlr_hw_evnt_cmplt+0x2b6>
 80124e8:	f8d4 0094 	ldr.w	r0, [r4, #148]	@ 0x94
 80124ec:	f04f 0800 	mov.w	r8, #0
 80124f0:	f884 8099 	strb.w	r8, [r4, #153]	@ 0x99
 80124f4:	e024      	b.n	8012540 <evnt_schdlr_hw_evnt_cmplt+0x2f8>
 80124f6:	2000      	movs	r0, #0
 80124f8:	9002      	str	r0, [sp, #8]
 80124fa:	f04f 0800 	mov.w	r8, #0
 80124fe:	9e01      	ldr	r6, [sp, #4]
 8012500:	f104 0a0c 	add.w	sl, r4, #12
 8012504:	f859 7026 	ldr.w	r7, [r9, r6, lsl #2]
 8012508:	4650      	mov	r0, sl
 801250a:	f001 fa7a 	bl	8013a02 <packet_get_frst_pkt>
 801250e:	6800      	ldr	r0, [r0, #0]
 8012510:	4287      	cmp	r7, r0
 8012512:	d00b      	beq.n	801252c <evnt_schdlr_hw_evnt_cmplt+0x2e4>
 8012514:	f240 01f0 	movw	r1, #240	@ 0xf0
 8012518:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 801251c:	f859 0026 	ldr.w	r0, [r9, r6, lsl #2]
 8012520:	6809      	ldr	r1, [r1, #0]
 8012522:	4288      	cmp	r0, r1
 8012524:	bf04      	itt	eq
 8012526:	4650      	moveq	r0, sl
 8012528:	f001 fa58 	bleq	80139dc <packet_insert_empty_frst>
 801252c:	e9d4 1024 	ldrd	r1, r0, [r4, #144]	@ 0x90
 8012530:	f885 801c 	strb.w	r8, [r5, #28]
 8012534:	f646 462c 	movw	r6, #27692	@ 0x6c2c
 8012538:	f8dd 8008 	ldr.w	r8, [sp, #8]
 801253c:	f2c2 0600 	movt	r6, #8192	@ 0x2000
 8012540:	f481 7280 	eor.w	r2, r1, #256	@ 0x100
 8012544:	4302      	orrs	r2, r0
 8012546:	d118      	bne.n	801257a <evnt_schdlr_hw_evnt_cmplt+0x332>
 8012548:	f895 0020 	ldrb.w	r0, [r5, #32]
 801254c:	b920      	cbnz	r0, 8012558 <evnt_schdlr_hw_evnt_cmplt+0x310>
 801254e:	f895 0021 	ldrb.w	r0, [r5, #33]	@ 0x21
 8012552:	2800      	cmp	r0, #0
 8012554:	f000 8084 	beq.w	8012660 <evnt_schdlr_hw_evnt_cmplt+0x418>
 8012558:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801255c:	4629      	mov	r1, r5
 801255e:	f00e ff1e 	bl	802139e <ble_time_set>
 8012562:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8012566:	4629      	mov	r1, r5
 8012568:	f00e ff19 	bl	802139e <ble_time_set>
 801256c:	2001      	movs	r0, #1
 801256e:	f884 008c 	strb.w	r0, [r4, #140]	@ 0x8c
 8012572:	e9d4 1024 	ldrd	r1, r0, [r4, #144]	@ 0x90
 8012576:	2200      	movs	r2, #0
 8012578:	6022      	str	r2, [r4, #0]
 801257a:	f081 0202 	eor.w	r2, r1, #2
 801257e:	4302      	orrs	r2, r0
 8012580:	d113      	bne.n	80125aa <evnt_schdlr_hw_evnt_cmplt+0x362>
 8012582:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8012584:	7e41      	ldrb	r1, [r0, #25]
 8012586:	2901      	cmp	r1, #1
 8012588:	d118      	bne.n	80125bc <evnt_schdlr_hw_evnt_cmplt+0x374>
 801258a:	6831      	ldr	r1, [r6, #0]
 801258c:	f240 1255 	movw	r2, #341	@ 0x155
 8012590:	3101      	adds	r1, #1
 8012592:	4291      	cmp	r1, r2
 8012594:	6031      	str	r1, [r6, #0]
 8012596:	d111      	bne.n	80125bc <evnt_schdlr_hw_evnt_cmplt+0x374>
 8012598:	f890 0036 	ldrb.w	r0, [r0, #54]	@ 0x36
 801259c:	2201      	movs	r2, #1
 801259e:	b908      	cbnz	r0, 80125a4 <evnt_schdlr_hw_evnt_cmplt+0x35c>
 80125a0:	f885 2021 	strb.w	r2, [r5, #33]	@ 0x21
 80125a4:	2000      	movs	r0, #0
 80125a6:	2102      	movs	r1, #2
 80125a8:	e00d      	b.n	80125c6 <evnt_schdlr_hw_evnt_cmplt+0x37e>
 80125aa:	f411 7fc0 	tst.w	r1, #384	@ 0x180
 80125ae:	d007      	beq.n	80125c0 <evnt_schdlr_hw_evnt_cmplt+0x378>
 80125b0:	68a2      	ldr	r2, [r4, #8]
 80125b2:	b13a      	cbz	r2, 80125c4 <evnt_schdlr_hw_evnt_cmplt+0x37c>
 80125b4:	6f20      	ldr	r0, [r4, #112]	@ 0x70
 80125b6:	68a9      	ldr	r1, [r5, #8]
 80125b8:	4790      	blx	r2
 80125ba:	e029      	b.n	8012610 <evnt_schdlr_hw_evnt_cmplt+0x3c8>
 80125bc:	2000      	movs	r0, #0
 80125be:	2102      	movs	r1, #2
 80125c0:	2201      	movs	r2, #1
 80125c2:	e000      	b.n	80125c6 <evnt_schdlr_hw_evnt_cmplt+0x37e>
 80125c4:	2200      	movs	r2, #0
 80125c6:	f895 3020 	ldrb.w	r3, [r5, #32]
 80125ca:	b913      	cbnz	r3, 80125d2 <evnt_schdlr_hw_evnt_cmplt+0x38a>
 80125cc:	f895 3021 	ldrb.w	r3, [r5, #33]	@ 0x21
 80125d0:	b3ab      	cbz	r3, 801263e <evnt_schdlr_hw_evnt_cmplt+0x3f6>
 80125d2:	f081 0180 	eor.w	r1, r1, #128	@ 0x80
 80125d6:	4308      	orrs	r0, r1
 80125d8:	d105      	bne.n	80125e6 <evnt_schdlr_hw_evnt_cmplt+0x39e>
 80125da:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80125de:	f104 0150 	add.w	r1, r4, #80	@ 0x50
 80125e2:	f00e fedc 	bl	802139e <ble_time_set>
 80125e6:	2000      	movs	r0, #0
 80125e8:	f884 009b 	strb.w	r0, [r4, #155]	@ 0x9b
 80125ec:	2002      	movs	r0, #2
 80125ee:	f1b8 0f00 	cmp.w	r8, #0
 80125f2:	f8a4 0098 	strh.w	r0, [r4, #152]	@ 0x98
 80125f6:	d006      	beq.n	8012606 <evnt_schdlr_hw_evnt_cmplt+0x3be>
 80125f8:	68a8      	ldr	r0, [r5, #8]
 80125fa:	b148      	cbz	r0, 8012610 <evnt_schdlr_hw_evnt_cmplt+0x3c8>
 80125fc:	6841      	ldr	r1, [r0, #4]
 80125fe:	60a9      	str	r1, [r5, #8]
 8012600:	f00c f933 	bl	801e86a <free_buff_hdr>
 8012604:	e7f8      	b.n	80125f8 <evnt_schdlr_hw_evnt_cmplt+0x3b0>
 8012606:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 8012608:	6f20      	ldr	r0, [r4, #112]	@ 0x70
 801260a:	4629      	mov	r1, r5
 801260c:	4622      	mov	r2, r4
 801260e:	4798      	blx	r3
 8012610:	e9d4 0124 	ldrd	r0, r1, [r4, #144]	@ 0x90
 8012614:	f080 0080 	eor.w	r0, r0, #128	@ 0x80
 8012618:	4308      	orrs	r0, r1
 801261a:	d103      	bne.n	8012624 <evnt_schdlr_hw_evnt_cmplt+0x3dc>
 801261c:	6f20      	ldr	r0, [r4, #112]	@ 0x70
 801261e:	4629      	mov	r1, r5
 8012620:	f012 fa9e 	bl	8024b60 <conn_mngr_update_ststic>
 8012624:	4628      	mov	r0, r5
 8012626:	f00f fa0b 	bl	8021a40 <os_mem_pool_free>
 801262a:	e9d4 0124 	ldrd	r0, r1, [r4, #144]	@ 0x90
 801262e:	f000 fcb8 	bl	8012fa2 <evnt_schdlr_call_end_of_activity_callback>
 8012632:	208f      	movs	r0, #143	@ 0x8f
 8012634:	b003      	add	sp, #12
 8012636:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801263a:	f00d b93b 	b.w	801f8b4 <bsp_debug_gpio_clear>
 801263e:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8012640:	b123      	cbz	r3, 801264c <evnt_schdlr_hw_evnt_cmplt+0x404>
 8012642:	f895 702c 	ldrb.w	r7, [r5, #44]	@ 0x2c
 8012646:	07bf      	lsls	r7, r7, #30
 8012648:	d40e      	bmi.n	8012668 <evnt_schdlr_hw_evnt_cmplt+0x420>
 801264a:	b38a      	cbz	r2, 80126b0 <evnt_schdlr_hw_evnt_cmplt+0x468>
 801264c:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 801264e:	2100      	movs	r1, #0
 8012650:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 8012652:	4620      	mov	r0, r4
 8012654:	f884 1098 	strb.w	r1, [r4, #152]	@ 0x98
 8012658:	4790      	blx	r2
 801265a:	f7fe fb89 	bl	8010d70 <evnt_schdlr_hndl_next_evnt>
 801265e:	e7d7      	b.n	8012610 <evnt_schdlr_hw_evnt_cmplt+0x3c8>
 8012660:	2000      	movs	r0, #0
 8012662:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8012666:	e7a3      	b.n	80125b0 <evnt_schdlr_hw_evnt_cmplt+0x368>
 8012668:	f481 7280 	eor.w	r2, r1, #256	@ 0x100
 801266c:	4302      	orrs	r2, r0
 801266e:	d110      	bne.n	8012692 <evnt_schdlr_hw_evnt_cmplt+0x44a>
 8012670:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8012674:	4629      	mov	r1, r5
 8012676:	f00e fe92 	bl	802139e <ble_time_set>
 801267a:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 801267e:	4629      	mov	r1, r5
 8012680:	f00e fe8d 	bl	802139e <ble_time_set>
 8012684:	2001      	movs	r0, #1
 8012686:	f884 008c 	strb.w	r0, [r4, #140]	@ 0x8c
 801268a:	e9d4 1024 	ldrd	r1, r0, [r4, #144]	@ 0x90
 801268e:	2200      	movs	r2, #0
 8012690:	6022      	str	r2, [r4, #0]
 8012692:	f081 0180 	eor.w	r1, r1, #128	@ 0x80
 8012696:	4308      	orrs	r0, r1
 8012698:	bf04      	itt	eq
 801269a:	2001      	moveq	r0, #1
 801269c:	f884 008c 	strbeq.w	r0, [r4, #140]	@ 0x8c
 80126a0:	2002      	movs	r0, #2
 80126a2:	f1b8 0f00 	cmp.w	r8, #0
 80126a6:	f884 0098 	strb.w	r0, [r4, #152]	@ 0x98
 80126aa:	d1b1      	bne.n	8012610 <evnt_schdlr_hw_evnt_cmplt+0x3c8>
 80126ac:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 80126ae:	e7ab      	b.n	8012608 <evnt_schdlr_hw_evnt_cmplt+0x3c0>
 80126b0:	2002      	movs	r0, #2
 80126b2:	f1b8 0f00 	cmp.w	r8, #0
 80126b6:	f884 0098 	strb.w	r0, [r4, #152]	@ 0x98
 80126ba:	d1a9      	bne.n	8012610 <evnt_schdlr_hw_evnt_cmplt+0x3c8>
 80126bc:	e7a4      	b.n	8012608 <evnt_schdlr_hw_evnt_cmplt+0x3c0>

080126be <evnt_schdlr_prdc_clbr_evnt_clbk>:
 80126be:	b570      	push	{r4, r5, r6, lr}
 80126c0:	b084      	sub	sp, #16
 80126c2:	4604      	mov	r4, r0
 80126c4:	2000      	movs	r0, #0
 80126c6:	e9cd 0002 	strd	r0, r0, [sp, #8]
 80126ca:	4620      	mov	r0, r4
 80126cc:	2101      	movs	r1, #1
 80126ce:	2c00      	cmp	r4, #0
 80126d0:	bf18      	it	ne
 80126d2:	2001      	movne	r0, #1
 80126d4:	f00d f8a5 	bl	801f822 <bsp_assert>
 80126d8:	f00d f903 	bl	801f8e2 <os_disable_isr>
 80126dc:	f646 462c 	movw	r6, #27692	@ 0x6c2c
 80126e0:	f2c2 0600 	movt	r6, #8192	@ 0x2000
 80126e4:	6ab0      	ldr	r0, [r6, #40]	@ 0x28
 80126e6:	b118      	cbz	r0, 80126f0 <evnt_schdlr_prdc_clbr_evnt_clbk+0x32>
 80126e8:	f00d f8fd 	bl	801f8e6 <os_enable_isr>
 80126ec:	b004      	add	sp, #16
 80126ee:	bd70      	pop	{r4, r5, r6, pc}
 80126f0:	f894 0045 	ldrb.w	r0, [r4, #69]	@ 0x45
 80126f4:	2801      	cmp	r0, #1
 80126f6:	d10b      	bne.n	8012710 <evnt_schdlr_prdc_clbr_evnt_clbk+0x52>
 80126f8:	2000      	movs	r0, #0
 80126fa:	2101      	movs	r1, #1
 80126fc:	62b4      	str	r4, [r6, #40]	@ 0x28
 80126fe:	f884 108d 	strb.w	r1, [r4, #141]	@ 0x8d
 8012702:	6420      	str	r0, [r4, #64]	@ 0x40
 8012704:	f00d f8ef 	bl	801f8e6 <os_enable_isr>
 8012708:	4620      	mov	r0, r4
 801270a:	f000 fc7f 	bl	801300c <evnt_schdlr_prdc_clbr_exec>
 801270e:	e7ed      	b.n	80126ec <evnt_schdlr_prdc_clbr_evnt_clbk+0x2e>
 8012710:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8012712:	6880      	ldr	r0, [r0, #8]
 8012714:	4780      	blx	r0
 8012716:	2800      	cmp	r0, #0
 8012718:	d0e6      	beq.n	80126e8 <evnt_schdlr_prdc_clbr_evnt_clbk+0x2a>
 801271a:	e9d0 0114 	ldrd	r0, r1, [r0, #80]	@ 0x50
 801271e:	ad02      	add	r5, sp, #8
 8012720:	9002      	str	r0, [sp, #8]
 8012722:	4628      	mov	r0, r5
 8012724:	9103      	str	r1, [sp, #12]
 8012726:	f240 01ec 	movw	r1, #236	@ 0xec
 801272a:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 801272e:	6809      	ldr	r1, [r1, #0]
 8012730:	2205      	movs	r2, #5
 8012732:	f00e fefb 	bl	802152c <ble_time_rmv_uint>
 8012736:	a801      	add	r0, sp, #4
 8012738:	f00f fe87 	bl	802244a <llhwc_slptmr_get>
 801273c:	9901      	ldr	r1, [sp, #4]
 801273e:	4628      	mov	r0, r5
 8012740:	f00e ff32 	bl	80215a8 <ble_time_cmp_raw_reading>
 8012744:	f1b0 3fff 	cmp.w	r0, #4294967295	@ 0xffffffff
 8012748:	dcce      	bgt.n	80126e8 <evnt_schdlr_prdc_clbr_evnt_clbk+0x2a>
 801274a:	e9dd 1001 	ldrd	r1, r0, [sp, #4]
 801274e:	f00e ff50 	bl	80215f2 <ble_time_overflow_diff>
 8012752:	f646 4168 	movw	r1, #27752	@ 0x6c68
 8012756:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 801275a:	6809      	ldr	r1, [r1, #0]
 801275c:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 801275e:	4408      	add	r0, r1
 8012760:	ebc0 1140 	rsb	r1, r0, r0, lsl #5
 8012764:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 8012768:	eb01 0090 	add.w	r0, r1, r0, lsr #2
 801276c:	fb02 f103 	mul.w	r1, r2, r3
 8012770:	4288      	cmp	r0, r1
 8012772:	d3b9      	bcc.n	80126e8 <evnt_schdlr_prdc_clbr_evnt_clbk+0x2a>
 8012774:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012776:	4288      	cmp	r0, r1
 8012778:	d3b6      	bcc.n	80126e8 <evnt_schdlr_prdc_clbr_evnt_clbk+0x2a>
 801277a:	e7be      	b.n	80126fa <evnt_schdlr_prdc_clbr_evnt_clbk+0x3c>

0801277c <evnt_schdlr_hndl_near_evnts>:
 801277c:	b570      	push	{r4, r5, r6, lr}
 801277e:	b084      	sub	sp, #16
 8012780:	f646 452c 	movw	r5, #27692	@ 0x6c2c
 8012784:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 8012788:	e9d5 1609 	ldrd	r1, r6, [r5, #36]	@ 0x24
 801278c:	2000      	movs	r0, #0
 801278e:	6889      	ldr	r1, [r1, #8]
 8012790:	9003      	str	r0, [sp, #12]
 8012792:	9001      	str	r0, [sp, #4]
 8012794:	9000      	str	r0, [sp, #0]
 8012796:	4788      	blx	r1
 8012798:	4604      	mov	r4, r0
 801279a:	200b      	movs	r0, #11
 801279c:	f00d f888 	bl	801f8b0 <bsp_debug_gpio_set>
 80127a0:	b324      	cbz	r4, 80127ec <evnt_schdlr_hndl_near_evnts+0x70>
 80127a2:	e9d6 1024 	ldrd	r1, r0, [r6, #144]	@ 0x90
 80127a6:	f081 5200 	eor.w	r2, r1, #536870912	@ 0x20000000
 80127aa:	4302      	orrs	r2, r0
 80127ac:	d00c      	beq.n	80127c8 <evnt_schdlr_hndl_near_evnts+0x4c>
 80127ae:	f481 7280 	eor.w	r2, r1, #256	@ 0x100
 80127b2:	4302      	orrs	r2, r0
 80127b4:	d00d      	beq.n	80127d2 <evnt_schdlr_hndl_near_evnts+0x56>
 80127b6:	f081 0180 	eor.w	r1, r1, #128	@ 0x80
 80127ba:	4308      	orrs	r0, r1
 80127bc:	d116      	bne.n	80127ec <evnt_schdlr_hndl_near_evnts+0x70>
 80127be:	e9d4 0124 	ldrd	r0, r1, [r4, #144]	@ 0x90
 80127c2:	f080 0080 	eor.w	r0, r0, #128	@ 0x80
 80127c6:	e008      	b.n	80127da <evnt_schdlr_hndl_near_evnts+0x5e>
 80127c8:	e9d4 0124 	ldrd	r0, r1, [r4, #144]	@ 0x90
 80127cc:	f480 1080 	eor.w	r0, r0, #1048576	@ 0x100000
 80127d0:	e003      	b.n	80127da <evnt_schdlr_hndl_near_evnts+0x5e>
 80127d2:	e9d4 0124 	ldrd	r0, r1, [r4, #144]	@ 0x90
 80127d6:	f480 2080 	eor.w	r0, r0, #262144	@ 0x40000
 80127da:	4308      	orrs	r0, r1
 80127dc:	d106      	bne.n	80127ec <evnt_schdlr_hndl_near_evnts+0x70>
 80127de:	2008      	movs	r0, #8
 80127e0:	f00d f86a 	bl	801f8b8 <bsp_debug_gpio_toggle>
 80127e4:	f894 0098 	ldrb.w	r0, [r4, #152]	@ 0x98
 80127e8:	2804      	cmp	r0, #4
 80127ea:	d106      	bne.n	80127fa <evnt_schdlr_hndl_near_evnts+0x7e>
 80127ec:	f006 ffa5 	bl	801973a <llhwc_goto_sleep>
 80127f0:	200b      	movs	r0, #11
 80127f2:	f00d f85f 	bl	801f8b4 <bsp_debug_gpio_clear>
 80127f6:	b004      	add	sp, #16
 80127f8:	bd70      	pop	{r4, r5, r6, pc}
 80127fa:	200a      	movs	r0, #10
 80127fc:	f00d f85c 	bl	801f8b8 <bsp_debug_gpio_toggle>
 8012800:	e9d4 0114 	ldrd	r0, r1, [r4, #80]	@ 0x50
 8012804:	e9cd 0100 	strd	r0, r1, [sp]
 8012808:	a803      	add	r0, sp, #12
 801280a:	f00f fe1e 	bl	802244a <llhwc_slptmr_get>
 801280e:	9903      	ldr	r1, [sp, #12]
 8012810:	4668      	mov	r0, sp
 8012812:	f00e fec9 	bl	80215a8 <ble_time_cmp_raw_reading>
 8012816:	f1b0 3fff 	cmp.w	r0, #4294967295	@ 0xffffffff
 801281a:	dd01      	ble.n	8012820 <evnt_schdlr_hndl_near_evnts+0xa4>
 801281c:	2000      	movs	r0, #0
 801281e:	e007      	b.n	8012830 <evnt_schdlr_hndl_near_evnts+0xb4>
 8012820:	9800      	ldr	r0, [sp, #0]
 8012822:	9903      	ldr	r1, [sp, #12]
 8012824:	f00e fee5 	bl	80215f2 <ble_time_overflow_diff>
 8012828:	ebc0 1140 	rsb	r1, r0, r0, lsl #5
 801282c:	eb01 0090 	add.w	r0, r1, r0, lsr #2
 8012830:	283f      	cmp	r0, #63	@ 0x3f
 8012832:	d3db      	bcc.n	80127ec <evnt_schdlr_hndl_near_evnts+0x70>
 8012834:	f240 01ec 	movw	r1, #236	@ 0xec
 8012838:	f646 4268 	movw	r2, #27752	@ 0x6c68
 801283c:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8012840:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8012844:	6809      	ldr	r1, [r1, #0]
 8012846:	6892      	ldr	r2, [r2, #8]
 8012848:	4411      	add	r1, r2
 801284a:	ebc1 1241 	rsb	r2, r1, r1, lsl #5
 801284e:	eb02 0191 	add.w	r1, r2, r1, lsr #2
 8012852:	4288      	cmp	r0, r1
 8012854:	d2ca      	bcs.n	80127ec <evnt_schdlr_hndl_near_evnts+0x70>
 8012856:	2009      	movs	r0, #9
 8012858:	f00d f82e 	bl	801f8b8 <bsp_debug_gpio_toggle>
 801285c:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 801285e:	2101      	movs	r1, #1
 8012860:	2800      	cmp	r0, #0
 8012862:	bf18      	it	ne
 8012864:	2001      	movne	r0, #1
 8012866:	f00c ffdc 	bl	801f822 <bsp_assert>
 801286a:	f895 1039 	ldrb.w	r1, [r5, #57]	@ 0x39
 801286e:	2000      	movs	r0, #0
 8012870:	62a8      	str	r0, [r5, #40]	@ 0x28
 8012872:	1c48      	adds	r0, r1, #1
 8012874:	f885 0039 	strb.w	r0, [r5, #57]	@ 0x39
 8012878:	f106 0150 	add.w	r1, r6, #80	@ 0x50
 801287c:	4668      	mov	r0, sp
 801287e:	f00e fd6e 	bl	802135e <ble_time_ordered_diff_us>
 8012882:	f240 4644 	movw	r6, #1092	@ 0x444
 8012886:	6328      	str	r0, [r5, #48]	@ 0x30
 8012888:	f6c4 0602 	movt	r6, #18434	@ 0x4802
 801288c:	6970      	ldr	r0, [r6, #20]
 801288e:	2100      	movs	r1, #0
 8012890:	f040 0002 	orr.w	r0, r0, #2
 8012894:	6170      	str	r0, [r6, #20]
 8012896:	6870      	ldr	r0, [r6, #4]
 8012898:	f020 0010 	bic.w	r0, r0, #16
 801289c:	6070      	str	r0, [r6, #4]
 801289e:	6830      	ldr	r0, [r6, #0]
 80128a0:	f040 0002 	orr.w	r0, r0, #2
 80128a4:	6030      	str	r0, [r6, #0]
 80128a6:	6830      	ldr	r0, [r6, #0]
 80128a8:	f020 0002 	bic.w	r0, r0, #2
 80128ac:	6030      	str	r0, [r6, #0]
 80128ae:	4620      	mov	r0, r4
 80128b0:	f7fe fc26 	bl	8011100 <evnt_schdlr_exec>
 80128b4:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 80128b6:	61b0      	str	r0, [r6, #24]
 80128b8:	6970      	ldr	r0, [r6, #20]
 80128ba:	f020 0002 	bic.w	r0, r0, #2
 80128be:	6170      	str	r0, [r6, #20]
 80128c0:	e796      	b.n	80127f0 <evnt_schdlr_hndl_near_evnts+0x74>

080128c2 <evnt_schdlr_config_schdling_time>:
 80128c2:	b5b0      	push	{r4, r5, r7, lr}
 80128c4:	2003      	movs	r0, #3
 80128c6:	f00d f80a 	bl	801f8de <disable_specific_irq>
 80128ca:	f646 452c 	movw	r5, #27692	@ 0x6c2c
 80128ce:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 80128d2:	6aa9      	ldr	r1, [r5, #40]	@ 0x28
 80128d4:	f646 4068 	movw	r0, #27752	@ 0x6c68
 80128d8:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80128dc:	b119      	cbz	r1, 80128e6 <evnt_schdlr_config_schdling_time+0x24>
 80128de:	f891 108d 	ldrb.w	r1, [r1, #141]	@ 0x8d
 80128e2:	2901      	cmp	r1, #1
 80128e4:	d00f      	beq.n	8012906 <evnt_schdlr_config_schdling_time+0x44>
 80128e6:	7e01      	ldrb	r1, [r0, #24]
 80128e8:	2901      	cmp	r1, #1
 80128ea:	d10c      	bne.n	8012906 <evnt_schdlr_config_schdling_time+0x44>
 80128ec:	2100      	movs	r1, #0
 80128ee:	f100 040c 	add.w	r4, r0, #12
 80128f2:	7601      	strb	r1, [r0, #24]
 80128f4:	4620      	mov	r0, r4
 80128f6:	f00c ffee 	bl	801f8d6 <bsp_evnt_schldr_timing_update_not>
 80128fa:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 80128fc:	6a01      	ldr	r1, [r0, #32]
 80128fe:	4620      	mov	r0, r4
 8012900:	4788      	blx	r1
 8012902:	f7fe fa35 	bl	8010d70 <evnt_schdlr_hndl_next_evnt>
 8012906:	2003      	movs	r0, #3
 8012908:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 801290c:	f00c bfe5 	b.w	801f8da <enable_specific_irq>

08012910 <evnt_schdlr_reset>:
 8012910:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012912:	b081      	sub	sp, #4
 8012914:	f248 17b4 	movw	r7, #33204	@ 0x81b4
 8012918:	f2c2 0700 	movt	r7, #8192	@ 0x2000
 801291c:	6838      	ldr	r0, [r7, #0]
 801291e:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8012922:	f00c ffe2 	bl	801f8ea <os_rcrsv_mutex_wait>
 8012926:	f646 462c 	movw	r6, #27692	@ 0x6c2c
 801292a:	f2c2 0600 	movt	r6, #8192	@ 0x2000
 801292e:	6af0      	ldr	r0, [r6, #44]	@ 0x2c
 8012930:	b120      	cbz	r0, 801293c <evnt_schdlr_reset+0x2c>
 8012932:	f00f fb7f 	bl	8022034 <os_timer_stop>
 8012936:	b108      	cbz	r0, 801293c <evnt_schdlr_reset+0x2c>
 8012938:	241f      	movs	r4, #31
 801293a:	e02f      	b.n	801299c <evnt_schdlr_reset+0x8c>
 801293c:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 801293e:	6840      	ldr	r0, [r0, #4]
 8012940:	4780      	blx	r0
 8012942:	2400      	movs	r4, #0
 8012944:	f886 4038 	strb.w	r4, [r6, #56]	@ 0x38
 8012948:	6034      	str	r4, [r6, #0]
 801294a:	bf00      	nop
 801294c:	2000      	movs	r0, #0
 801294e:	f00e ff5a 	bl	8021806 <emngr_get_handle_events>
 8012952:	b168      	cbz	r0, 8012970 <evnt_schdlr_reset+0x60>
 8012954:	2000      	movs	r0, #0
 8012956:	f00e ff00 	bl	802175a <emngr_get_event>
 801295a:	2101      	movs	r1, #1
 801295c:	4605      	mov	r5, r0
 801295e:	2800      	cmp	r0, #0
 8012960:	bf18      	it	ne
 8012962:	2001      	movne	r0, #1
 8012964:	f00c ff5d 	bl	801f822 <bsp_assert>
 8012968:	4628      	mov	r0, r5
 801296a:	f00f f869 	bl	8021a40 <os_mem_pool_free>
 801296e:	e7ed      	b.n	801294c <evnt_schdlr_reset+0x3c>
 8012970:	f240 00ec 	movw	r0, #236	@ 0xec
 8012974:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8012978:	2133      	movs	r1, #51	@ 0x33
 801297a:	6001      	str	r1, [r0, #0]
 801297c:	f646 4068 	movw	r0, #27752	@ 0x6c68
 8012980:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8012984:	210f      	movs	r1, #15
 8012986:	7604      	strb	r4, [r0, #24]
 8012988:	2216      	movs	r2, #22
 801298a:	2314      	movs	r3, #20
 801298c:	c00e      	stmia	r0!, {r1, r2, r3}
 801298e:	62b4      	str	r4, [r6, #40]	@ 0x28
 8012990:	c00e      	stmia	r0!, {r1, r2, r3}
 8012992:	f646 4028 	movw	r0, #27688	@ 0x6c28
 8012996:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801299a:	8004      	strh	r4, [r0, #0]
 801299c:	6838      	ldr	r0, [r7, #0]
 801299e:	f00c ffaa 	bl	801f8f6 <os_rcrsv_mutex_release>
 80129a2:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 80129a4:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 80129a6:	4780      	blx	r0
 80129a8:	b918      	cbnz	r0, 80129b2 <evnt_schdlr_reset+0xa2>
 80129aa:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 80129ac:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 80129ae:	4780      	blx	r0
 80129b0:	b120      	cbz	r0, 80129bc <evnt_schdlr_reset+0xac>
 80129b2:	f7fe f9dd 	bl	8010d70 <evnt_schdlr_hndl_next_evnt>
 80129b6:	4620      	mov	r0, r4
 80129b8:	b001      	add	sp, #4
 80129ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80129bc:	2001      	movs	r0, #1
 80129be:	f011 fbe5 	bl	802418c <llhwc_cmn_evnt_notify>
 80129c2:	e7f8      	b.n	80129b6 <evnt_schdlr_reset+0xa6>

080129c4 <evnt_schdlr_timer_callback>:
 80129c4:	b580      	push	{r7, lr}
 80129c6:	205f      	movs	r0, #95	@ 0x5f
 80129c8:	f00c ff72 	bl	801f8b0 <bsp_debug_gpio_set>
 80129cc:	2001      	movs	r0, #1
 80129ce:	f001 f8e3 	bl	8013b98 <evnt_util_set_prdc_clbr_exce_state>
 80129d2:	f7fe f9cd 	bl	8010d70 <evnt_schdlr_hndl_next_evnt>
 80129d6:	2000      	movs	r0, #0
 80129d8:	f001 f8de 	bl	8013b98 <evnt_util_set_prdc_clbr_exce_state>
 80129dc:	205f      	movs	r0, #95	@ 0x5f
 80129de:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80129e2:	f00c bf67 	b.w	801f8b4 <bsp_debug_gpio_clear>
	...

080129e8 <evnt_schdlr_unrgstr_evnt>:
 80129e8:	b570      	push	{r4, r5, r6, lr}
 80129ea:	4604      	mov	r4, r0
 80129ec:	200f      	movs	r0, #15
 80129ee:	f00c ff5f 	bl	801f8b0 <bsp_debug_gpio_set>
 80129f2:	4620      	mov	r0, r4
 80129f4:	2101      	movs	r1, #1
 80129f6:	2c00      	cmp	r4, #0
 80129f8:	bf18      	it	ne
 80129fa:	2001      	movne	r0, #1
 80129fc:	f00c ff11 	bl	801f822 <bsp_assert>
 8012a00:	f646 462c 	movw	r6, #27692	@ 0x6c2c
 8012a04:	f2c2 0600 	movt	r6, #8192	@ 0x2000
 8012a08:	6af0      	ldr	r0, [r6, #44]	@ 0x2c
 8012a0a:	2104      	movs	r1, #4
 8012a0c:	f884 1098 	strb.w	r1, [r4, #152]	@ 0x98
 8012a10:	b120      	cbz	r0, 8012a1c <evnt_schdlr_unrgstr_evnt+0x34>
 8012a12:	f00f fb0f 	bl	8022034 <os_timer_stop>
 8012a16:	b108      	cbz	r0, 8012a1c <evnt_schdlr_unrgstr_evnt+0x34>
 8012a18:	251f      	movs	r5, #31
 8012a1a:	e058      	b.n	8012ace <evnt_schdlr_unrgstr_evnt+0xe6>
 8012a1c:	e9d4 5024 	ldrd	r5, r0, [r4, #144]	@ 0x90
 8012a20:	f010 0f0a 	tst.w	r0, #10
 8012a24:	d006      	beq.n	8012a34 <evnt_schdlr_unrgstr_evnt+0x4c>
 8012a26:	6ab0      	ldr	r0, [r6, #40]	@ 0x28
 8012a28:	42a0      	cmp	r0, r4
 8012a2a:	d103      	bne.n	8012a34 <evnt_schdlr_unrgstr_evnt+0x4c>
 8012a2c:	2000      	movs	r0, #0
 8012a2e:	62b0      	str	r0, [r6, #40]	@ 0x28
 8012a30:	f884 008d 	strb.w	r0, [r4, #141]	@ 0x8d
 8012a34:	f00c ff55 	bl	801f8e2 <os_disable_isr>
 8012a38:	6ab0      	ldr	r0, [r6, #40]	@ 0x28
 8012a3a:	42a0      	cmp	r0, r4
 8012a3c:	d11f      	bne.n	8012a7e <evnt_schdlr_unrgstr_evnt+0x96>
 8012a3e:	f894 008d 	ldrb.w	r0, [r4, #141]	@ 0x8d
 8012a42:	2801      	cmp	r0, #1
 8012a44:	d11b      	bne.n	8012a7e <evnt_schdlr_unrgstr_evnt+0x96>
 8012a46:	f896 1038 	ldrb.w	r1, [r6, #56]	@ 0x38
 8012a4a:	2004      	movs	r0, #4
 8012a4c:	f884 0098 	strb.w	r0, [r4, #152]	@ 0x98
 8012a50:	1c48      	adds	r0, r1, #1
 8012a52:	f015 0f70 	tst.w	r5, #112	@ 0x70
 8012a56:	f886 0038 	strb.w	r0, [r6, #56]	@ 0x38
 8012a5a:	bf18      	it	ne
 8012a5c:	f004 fd0b 	blne	8017476 <llhwc_stop_scan>
 8012a60:	f00c ff41 	bl	801f8e6 <os_enable_isr>
 8012a64:	f894 008d 	ldrb.w	r0, [r4, #141]	@ 0x8d
 8012a68:	2801      	cmp	r0, #1
 8012a6a:	d10a      	bne.n	8012a82 <evnt_schdlr_unrgstr_evnt+0x9a>
 8012a6c:	2000      	movs	r0, #0
 8012a6e:	f00e feca 	bl	8021806 <emngr_get_handle_events>
 8012a72:	2800      	cmp	r0, #0
 8012a74:	d0f6      	beq.n	8012a64 <evnt_schdlr_unrgstr_evnt+0x7c>
 8012a76:	2000      	movs	r0, #0
 8012a78:	f00e ff18 	bl	80218ac <emngr_handle_event>
 8012a7c:	e7f2      	b.n	8012a64 <evnt_schdlr_unrgstr_evnt+0x7c>
 8012a7e:	f00c ff32 	bl	801f8e6 <os_enable_isr>
 8012a82:	f00c ff2e 	bl	801f8e2 <os_disable_isr>
 8012a86:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8012a88:	69c1      	ldr	r1, [r0, #28]
 8012a8a:	4620      	mov	r0, r4
 8012a8c:	4788      	blx	r1
 8012a8e:	4605      	mov	r5, r0
 8012a90:	b9e8      	cbnz	r0, 8012ace <evnt_schdlr_unrgstr_evnt+0xe6>
 8012a92:	4620      	mov	r0, r4
 8012a94:	f000 fb3c 	bl	8013110 <evnt_schdlr_free_evnt>
 8012a98:	f00c ff25 	bl	801f8e6 <os_enable_isr>
 8012a9c:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8012a9e:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8012aa0:	4780      	blx	r0
 8012aa2:	b948      	cbnz	r0, 8012ab8 <evnt_schdlr_unrgstr_evnt+0xd0>
 8012aa4:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8012aa6:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8012aa8:	4780      	blx	r0
 8012aaa:	b928      	cbnz	r0, 8012ab8 <evnt_schdlr_unrgstr_evnt+0xd0>
 8012aac:	f106 002c 	add.w	r0, r6, #44	@ 0x2c
 8012ab0:	f00f fb3e 	bl	8022130 <os_timer_stop_free>
 8012ab4:	4605      	mov	r5, r0
 8012ab6:	b950      	cbnz	r0, 8012ace <evnt_schdlr_unrgstr_evnt+0xe6>
 8012ab8:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8012aba:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8012abc:	4780      	blx	r0
 8012abe:	2801      	cmp	r0, #1
 8012ac0:	d104      	bne.n	8012acc <evnt_schdlr_unrgstr_evnt+0xe4>
 8012ac2:	2000      	movs	r0, #0
 8012ac4:	2500      	movs	r5, #0
 8012ac6:	f011 f92c 	bl	8023d22 <llhwc_cmn_set_controller_activity>
 8012aca:	e000      	b.n	8012ace <evnt_schdlr_unrgstr_evnt+0xe6>
 8012acc:	2500      	movs	r5, #0
 8012ace:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8012ad0:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8012ad2:	4780      	blx	r0
 8012ad4:	b918      	cbnz	r0, 8012ade <evnt_schdlr_unrgstr_evnt+0xf6>
 8012ad6:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8012ad8:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8012ada:	4780      	blx	r0
 8012adc:	b108      	cbz	r0, 8012ae2 <evnt_schdlr_unrgstr_evnt+0xfa>
 8012ade:	f7fe f947 	bl	8010d70 <evnt_schdlr_hndl_next_evnt>
 8012ae2:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8012ae4:	b190      	cbz	r0, 8012b0c <evnt_schdlr_unrgstr_evnt+0x124>
 8012ae6:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8012ae8:	4780      	blx	r0
 8012aea:	b978      	cbnz	r0, 8012b0c <evnt_schdlr_unrgstr_evnt+0x124>
 8012aec:	f646 4024 	movw	r0, #27684	@ 0x6c24
 8012af0:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8012af4:	6802      	ldr	r2, [r0, #0]
 8012af6:	b14a      	cbz	r2, 8012b0c <evnt_schdlr_unrgstr_evnt+0x124>
 8012af8:	f646 4028 	movw	r0, #27688	@ 0x6c28
 8012afc:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8012b00:	7800      	ldrb	r0, [r0, #0]
 8012b02:	07c0      	lsls	r0, r0, #31
 8012b04:	d002      	beq.n	8012b0c <evnt_schdlr_unrgstr_evnt+0x124>
 8012b06:	2000      	movs	r0, #0
 8012b08:	2100      	movs	r1, #0
 8012b0a:	4790      	blx	r2
 8012b0c:	200f      	movs	r0, #15
 8012b0e:	f00c fed1 	bl	801f8b4 <bsp_debug_gpio_clear>
 8012b12:	4628      	mov	r0, r5
 8012b14:	bd70      	pop	{r4, r5, r6, pc}

08012b16 <evnt_schdlr_add_data_pkt>:
 8012b16:	b570      	push	{r4, r5, r6, lr}
 8012b18:	460c      	mov	r4, r1
 8012b1a:	2101      	movs	r1, #1
 8012b1c:	4605      	mov	r5, r0
 8012b1e:	2800      	cmp	r0, #0
 8012b20:	bf18      	it	ne
 8012b22:	2001      	movne	r0, #1
 8012b24:	f00c fe7d 	bl	801f822 <bsp_assert>
 8012b28:	4620      	mov	r0, r4
 8012b2a:	2101      	movs	r1, #1
 8012b2c:	2c00      	cmp	r4, #0
 8012b2e:	bf18      	it	ne
 8012b30:	2001      	movne	r0, #1
 8012b32:	f00c fe76 	bl	801f822 <bsp_assert>
 8012b36:	f8b5 0090 	ldrh.w	r0, [r5, #144]	@ 0x90
 8012b3a:	f410 7fc0 	tst.w	r0, #384	@ 0x180
 8012b3e:	bf04      	itt	eq
 8012b40:	2011      	moveq	r0, #17
 8012b42:	bd70      	popeq	{r4, r5, r6, pc}
 8012b44:	f248 16b4 	movw	r6, #33204	@ 0x81b4
 8012b48:	f2c2 0600 	movt	r6, #8192	@ 0x2000
 8012b4c:	6830      	ldr	r0, [r6, #0]
 8012b4e:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8012b52:	f00c feca 	bl	801f8ea <os_rcrsv_mutex_wait>
 8012b56:	6f68      	ldr	r0, [r5, #116]	@ 0x74
 8012b58:	f890 1123 	ldrb.w	r1, [r0, #291]	@ 0x123
 8012b5c:	2907      	cmp	r1, #7
 8012b5e:	d004      	beq.n	8012b6a <evnt_schdlr_add_data_pkt+0x54>
 8012b60:	f890 0124 	ldrb.w	r0, [r0, #292]	@ 0x124
 8012b64:	3807      	subs	r0, #7
 8012b66:	2801      	cmp	r0, #1
 8012b68:	d802      	bhi.n	8012b70 <evnt_schdlr_add_data_pkt+0x5a>
 8012b6a:	f105 007c 	add.w	r0, r5, #124	@ 0x7c
 8012b6e:	e001      	b.n	8012b74 <evnt_schdlr_add_data_pkt+0x5e>
 8012b70:	f105 000c 	add.w	r0, r5, #12
 8012b74:	7ba1      	ldrb	r1, [r4, #14]
 8012b76:	0789      	lsls	r1, r1, #30
 8012b78:	d502      	bpl.n	8012b80 <evnt_schdlr_add_data_pkt+0x6a>
 8012b7a:	7e69      	ldrb	r1, [r5, #25]
 8012b7c:	3101      	adds	r1, #1
 8012b7e:	7669      	strb	r1, [r5, #25]
 8012b80:	4621      	mov	r1, r4
 8012b82:	f000 ff10 	bl	80139a6 <packet_enqueue>
 8012b86:	6830      	ldr	r0, [r6, #0]
 8012b88:	f00c feb5 	bl	801f8f6 <os_rcrsv_mutex_release>
 8012b8c:	2000      	movs	r0, #0
 8012b8e:	bd70      	pop	{r4, r5, r6, pc}

08012b90 <evnt_schdlr_send_pndng_data_pkt>:
 8012b90:	b5b0      	push	{r4, r5, r7, lr}
 8012b92:	2101      	movs	r1, #1
 8012b94:	4604      	mov	r4, r0
 8012b96:	2800      	cmp	r0, #0
 8012b98:	bf18      	it	ne
 8012b9a:	2001      	movne	r0, #1
 8012b9c:	f00c fe41 	bl	801f822 <bsp_assert>
 8012ba0:	f248 15b4 	movw	r5, #33204	@ 0x81b4
 8012ba4:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 8012ba8:	6828      	ldr	r0, [r5, #0]
 8012baa:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8012bae:	f00c fe9c 	bl	801f8ea <os_rcrsv_mutex_wait>
 8012bb2:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
 8012bb4:	b189      	cbz	r1, 8012bda <evnt_schdlr_send_pndng_data_pkt+0x4a>
 8012bb6:	4620      	mov	r0, r4
 8012bb8:	f850 2f0c 	ldr.w	r2, [r0, #12]!
 8012bbc:	b912      	cbnz	r2, 8012bc4 <evnt_schdlr_send_pndng_data_pkt+0x34>
 8012bbe:	f894 2084 	ldrb.w	r2, [r4, #132]	@ 0x84
 8012bc2:	7522      	strb	r2, [r4, #20]
 8012bc4:	f000 feef 	bl	80139a6 <packet_enqueue>
 8012bc8:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 8012bcc:	6120      	str	r0, [r4, #16]
 8012bce:	2000      	movs	r0, #0
 8012bd0:	e9c4 001f 	strd	r0, r0, [r4, #124]	@ 0x7c
 8012bd4:	2001      	movs	r0, #1
 8012bd6:	f884 0084 	strb.w	r0, [r4, #132]	@ 0x84
 8012bda:	6828      	ldr	r0, [r5, #0]
 8012bdc:	f00c fe8b 	bl	801f8f6 <os_rcrsv_mutex_release>
 8012be0:	2000      	movs	r0, #0
 8012be2:	bdb0      	pop	{r4, r5, r7, pc}

08012be4 <evnt_schdlr_add_ctrl_pkt>:
 8012be4:	b570      	push	{r4, r5, r6, lr}
 8012be6:	460c      	mov	r4, r1
 8012be8:	2101      	movs	r1, #1
 8012bea:	4605      	mov	r5, r0
 8012bec:	2800      	cmp	r0, #0
 8012bee:	bf18      	it	ne
 8012bf0:	2001      	movne	r0, #1
 8012bf2:	f00c fe16 	bl	801f822 <bsp_assert>
 8012bf6:	4620      	mov	r0, r4
 8012bf8:	2101      	movs	r1, #1
 8012bfa:	2c00      	cmp	r4, #0
 8012bfc:	bf18      	it	ne
 8012bfe:	2001      	movne	r0, #1
 8012c00:	f00c fe0f 	bl	801f822 <bsp_assert>
 8012c04:	f8b5 0090 	ldrh.w	r0, [r5, #144]	@ 0x90
 8012c08:	f410 7fc0 	tst.w	r0, #384	@ 0x180
 8012c0c:	bf04      	itt	eq
 8012c0e:	2011      	moveq	r0, #17
 8012c10:	bd70      	popeq	{r4, r5, r6, pc}
 8012c12:	f248 16b4 	movw	r6, #33204	@ 0x81b4
 8012c16:	f2c2 0600 	movt	r6, #8192	@ 0x2000
 8012c1a:	6830      	ldr	r0, [r6, #0]
 8012c1c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8012c20:	f00c fe63 	bl	801f8ea <os_rcrsv_mutex_wait>
 8012c24:	7ba0      	ldrb	r0, [r4, #14]
 8012c26:	4621      	mov	r1, r4
 8012c28:	f040 0002 	orr.w	r0, r0, #2
 8012c2c:	73a0      	strb	r0, [r4, #14]
 8012c2e:	7e68      	ldrb	r0, [r5, #25]
 8012c30:	3001      	adds	r0, #1
 8012c32:	7668      	strb	r0, [r5, #25]
 8012c34:	f105 000c 	add.w	r0, r5, #12
 8012c38:	f000 feb5 	bl	80139a6 <packet_enqueue>
 8012c3c:	6830      	ldr	r0, [r6, #0]
 8012c3e:	f00c fe5a 	bl	801f8f6 <os_rcrsv_mutex_release>
 8012c42:	2000      	movs	r0, #0
 8012c44:	bd70      	pop	{r4, r5, r6, pc}

08012c46 <evnt_schdlr_conn_params_updtd>:
 8012c46:	b570      	push	{r4, r5, r6, lr}
 8012c48:	460d      	mov	r5, r1
 8012c4a:	2101      	movs	r1, #1
 8012c4c:	4604      	mov	r4, r0
 8012c4e:	2800      	cmp	r0, #0
 8012c50:	bf18      	it	ne
 8012c52:	2001      	movne	r0, #1
 8012c54:	f00c fde5 	bl	801f822 <bsp_assert>
 8012c58:	6f66      	ldr	r6, [r4, #116]	@ 0x74
 8012c5a:	0728      	lsls	r0, r5, #28
 8012c5c:	d505      	bpl.n	8012c6a <evnt_schdlr_conn_params_updtd+0x24>
 8012c5e:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8012c62:	f106 0138 	add.w	r1, r6, #56	@ 0x38
 8012c66:	f00e fb9a 	bl	802139e <ble_time_set>
 8012c6a:	0768      	lsls	r0, r5, #29
 8012c6c:	d50a      	bpl.n	8012c84 <evnt_schdlr_conn_params_updtd+0x3e>
 8012c6e:	f896 0020 	ldrb.w	r0, [r6, #32]
 8012c72:	b138      	cbz	r0, 8012c84 <evnt_schdlr_conn_params_updtd+0x3e>
 8012c74:	8a31      	ldrh	r1, [r6, #16]
 8012c76:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8012c7a:	2203      	movs	r2, #3
 8012c7c:	f00e fbb4 	bl	80213e8 <ble_time_add_uint>
 8012c80:	f7fe f876 	bl	8010d70 <evnt_schdlr_hndl_next_evnt>
 8012c84:	2000      	movs	r0, #0
 8012c86:	bd70      	pop	{r4, r5, r6, pc}

08012c88 <evnt_schdlr_updt_conn_evnt_durn>:
 8012c88:	e9d0 2324 	ldrd	r2, r3, [r0, #144]	@ 0x90
 8012c8c:	f082 0280 	eor.w	r2, r2, #128	@ 0x80
 8012c90:	431a      	orrs	r2, r3
 8012c92:	bf18      	it	ne
 8012c94:	4770      	bxne	lr
 8012c96:	f646 422c 	movw	r2, #27692	@ 0x6c2c
 8012c9a:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8012c9e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8012ca0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8012ca2:	4710      	bx	r2

08012ca4 <evnt_schdlr_evnt_updtd>:
 8012ca4:	b5b0      	push	{r4, r5, r7, lr}
 8012ca6:	4604      	mov	r4, r0
 8012ca8:	2003      	movs	r0, #3
 8012caa:	f00c fe01 	bl	801f8b0 <bsp_debug_gpio_set>
 8012cae:	4620      	mov	r0, r4
 8012cb0:	2101      	movs	r1, #1
 8012cb2:	2c00      	cmp	r4, #0
 8012cb4:	bf18      	it	ne
 8012cb6:	2001      	movne	r0, #1
 8012cb8:	f00c fdb3 	bl	801f822 <bsp_assert>
 8012cbc:	f646 452c 	movw	r5, #27692	@ 0x6c2c
 8012cc0:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 8012cc4:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8012cc6:	2100      	movs	r1, #0
 8012cc8:	42a0      	cmp	r0, r4
 8012cca:	f884 1098 	strb.w	r1, [r4, #152]	@ 0x98
 8012cce:	d10a      	bne.n	8012ce6 <evnt_schdlr_evnt_updtd+0x42>
 8012cd0:	e9d4 0124 	ldrd	r0, r1, [r4, #144]	@ 0x90
 8012cd4:	f081 0102 	eor.w	r1, r1, #2
 8012cd8:	4308      	orrs	r0, r1
 8012cda:	d104      	bne.n	8012ce6 <evnt_schdlr_evnt_updtd+0x42>
 8012cdc:	2000      	movs	r0, #0
 8012cde:	62a8      	str	r0, [r5, #40]	@ 0x28
 8012ce0:	f884 008d 	strb.w	r0, [r4, #141]	@ 0x8d
 8012ce4:	e003      	b.n	8012cee <evnt_schdlr_evnt_updtd+0x4a>
 8012ce6:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 8012ce8:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8012cea:	4620      	mov	r0, r4
 8012cec:	4788      	blx	r1
 8012cee:	f895 0039 	ldrb.w	r0, [r5, #57]	@ 0x39
 8012cf2:	b118      	cbz	r0, 8012cfc <evnt_schdlr_evnt_updtd+0x58>
 8012cf4:	3801      	subs	r0, #1
 8012cf6:	f885 0039 	strb.w	r0, [r5, #57]	@ 0x39
 8012cfa:	e001      	b.n	8012d00 <evnt_schdlr_evnt_updtd+0x5c>
 8012cfc:	f7fe f838 	bl	8010d70 <evnt_schdlr_hndl_next_evnt>
 8012d00:	2003      	movs	r0, #3
 8012d02:	f00c fdd7 	bl	801f8b4 <bsp_debug_gpio_clear>
 8012d06:	2000      	movs	r0, #0
 8012d08:	bdb0      	pop	{r4, r5, r7, pc}

08012d0a <evnt_schdlr_rgstr_wait_for_evnt_cmplt>:
 8012d0a:	b5b0      	push	{r4, r5, r7, lr}
 8012d0c:	460c      	mov	r4, r1
 8012d0e:	4605      	mov	r5, r0
 8012d10:	2900      	cmp	r1, #0
 8012d12:	4608      	mov	r0, r1
 8012d14:	f04f 0101 	mov.w	r1, #1
 8012d18:	bf18      	it	ne
 8012d1a:	2001      	movne	r0, #1
 8012d1c:	f00c fd81 	bl	801f822 <bsp_assert>
 8012d20:	60a5      	str	r5, [r4, #8]
 8012d22:	bdb0      	pop	{r4, r5, r7, pc}

08012d24 <evnt_schdlr_rgstr_error_cbk_evnt_cmplt>:
 8012d24:	b5b0      	push	{r4, r5, r7, lr}
 8012d26:	460c      	mov	r4, r1
 8012d28:	4605      	mov	r5, r0
 8012d2a:	2900      	cmp	r1, #0
 8012d2c:	4608      	mov	r0, r1
 8012d2e:	f04f 0101 	mov.w	r1, #1
 8012d32:	bf18      	it	ne
 8012d34:	2001      	movne	r0, #1
 8012d36:	f00c fd74 	bl	801f822 <bsp_assert>
 8012d3a:	66e5      	str	r5, [r4, #108]	@ 0x6c
 8012d3c:	bdb0      	pop	{r4, r5, r7, pc}

08012d3e <evnt_schdlr_rgstr_gnrc_evnt>:
 8012d3e:	b510      	push	{r4, lr}
 8012d40:	b084      	sub	sp, #16
 8012d42:	2101      	movs	r1, #1
 8012d44:	4604      	mov	r4, r0
 8012d46:	2800      	cmp	r0, #0
 8012d48:	bf18      	it	ne
 8012d4a:	2001      	movne	r0, #1
 8012d4c:	f00c fd69 	bl	801f822 <bsp_assert>
 8012d50:	e9d4 2e02 	ldrd	r2, lr, [r4, #8]
 8012d54:	2005      	movs	r0, #5
 8012d56:	f884 0025 	strb.w	r0, [r4, #37]	@ 0x25
 8012d5a:	ea52 030e 	orrs.w	r3, r2, lr
 8012d5e:	bf1c      	itt	ne
 8012d60:	e9d4 3004 	ldrdne	r3, r0, [r4, #16]
 8012d64:	ea53 0100 	orrsne.w	r1, r3, r0
 8012d68:	d139      	bne.n	8012dde <evnt_schdlr_rgstr_gnrc_evnt+0xa0>
 8012d6a:	69a0      	ldr	r0, [r4, #24]
 8012d6c:	b3d8      	cbz	r0, 8012de6 <evnt_schdlr_rgstr_gnrc_evnt+0xa8>
 8012d6e:	69e3      	ldr	r3, [r4, #28]
 8012d70:	b10b      	cbz	r3, 8012d76 <evnt_schdlr_rgstr_gnrc_evnt+0x38>
 8012d72:	4298      	cmp	r0, r3
 8012d74:	d837      	bhi.n	8012de6 <evnt_schdlr_rgstr_gnrc_evnt+0xa8>
 8012d76:	e9d4 3c00 	ldrd	r3, ip, [r4]
 8012d7a:	ea53 010c 	orrs.w	r1, r3, ip
 8012d7e:	d006      	beq.n	8012d8e <evnt_schdlr_rgstr_gnrc_evnt+0x50>
 8012d80:	1811      	adds	r1, r2, r0
 8012d82:	f14e 0200 	adc.w	r2, lr, #0
 8012d86:	1a59      	subs	r1, r3, r1
 8012d88:	eb7c 0102 	sbcs.w	r1, ip, r2
 8012d8c:	d32b      	bcc.n	8012de6 <evnt_schdlr_rgstr_gnrc_evnt+0xa8>
 8012d8e:	6a21      	ldr	r1, [r4, #32]
 8012d90:	b189      	cbz	r1, 8012db6 <evnt_schdlr_rgstr_gnrc_evnt+0x78>
 8012d92:	f240 02ec 	movw	r2, #236	@ 0xec
 8012d96:	f646 4368 	movw	r3, #27752	@ 0x6c68
 8012d9a:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8012d9e:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8012da2:	6812      	ldr	r2, [r2, #0]
 8012da4:	689b      	ldr	r3, [r3, #8]
 8012da6:	441a      	add	r2, r3
 8012da8:	ebc2 1342 	rsb	r3, r2, r2, lsl #5
 8012dac:	eb00 0092 	add.w	r0, r0, r2, lsr #2
 8012db0:	4418      	add	r0, r3
 8012db2:	4281      	cmp	r1, r0
 8012db4:	d317      	bcc.n	8012de6 <evnt_schdlr_rgstr_gnrc_evnt+0xa8>
 8012db6:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8012db8:	b1a8      	cbz	r0, 8012de6 <evnt_schdlr_rgstr_gnrc_evnt+0xa8>
 8012dba:	a803      	add	r0, sp, #12
 8012dbc:	f00f fb45 	bl	802244a <llhwc_slptmr_get>
 8012dc0:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
 8012dc4:	ea50 0201 	orrs.w	r2, r0, r1
 8012dc8:	d010      	beq.n	8012dec <evnt_schdlr_rgstr_gnrc_evnt+0xae>
 8012dca:	f010 ff91 	bl	8023cf0 <US_TO_SLP_TMR_PROTECTED>
 8012dce:	9903      	ldr	r1, [sp, #12]
 8012dd0:	3105      	adds	r1, #5
 8012dd2:	4288      	cmp	r0, r1
 8012dd4:	d20a      	bcs.n	8012dec <evnt_schdlr_rgstr_gnrc_evnt+0xae>
 8012dd6:	2003      	movs	r0, #3
 8012dd8:	f884 0025 	strb.w	r0, [r4, #37]	@ 0x25
 8012ddc:	e003      	b.n	8012de6 <evnt_schdlr_rgstr_gnrc_evnt+0xa8>
 8012dde:	1a99      	subs	r1, r3, r2
 8012de0:	eb70 000e 	sbcs.w	r0, r0, lr
 8012de4:	d2c1      	bcs.n	8012d6a <evnt_schdlr_rgstr_gnrc_evnt+0x2c>
 8012de6:	2000      	movs	r0, #0
 8012de8:	b004      	add	sp, #16
 8012dea:	bd10      	pop	{r4, pc}
 8012dec:	f04f 0c00 	mov.w	ip, #0
 8012df0:	2000      	movs	r0, #0
 8012df2:	2108      	movs	r1, #8
 8012df4:	4622      	mov	r2, r4
 8012df6:	2300      	movs	r3, #0
 8012df8:	f8cd c008 	str.w	ip, [sp, #8]
 8012dfc:	f8cd c000 	str.w	ip, [sp]
 8012e00:	f7ff f84d 	bl	8011e9e <evnt_schdlr_rgstr_evnt>
 8012e04:	e7f0      	b.n	8012de8 <evnt_schdlr_rgstr_gnrc_evnt+0xaa>

08012e06 <evnt_schdlr_gnrc_evnt_cmplt>:
 8012e06:	b510      	push	{r4, lr}
 8012e08:	2101      	movs	r1, #1
 8012e0a:	4604      	mov	r4, r0
 8012e0c:	2800      	cmp	r0, #0
 8012e0e:	bf18      	it	ne
 8012e10:	2001      	movne	r0, #1
 8012e12:	f00c fd06 	bl	801f822 <bsp_assert>
 8012e16:	e9d4 0124 	ldrd	r0, r1, [r4, #144]	@ 0x90
 8012e1a:	f081 0208 	eor.w	r2, r1, #8
 8012e1e:	f081 0102 	eor.w	r1, r1, #2
 8012e22:	4302      	orrs	r2, r0
 8012e24:	4308      	orrs	r0, r1
 8012e26:	fab2 f282 	clz	r2, r2
 8012e2a:	fab0 f080 	clz	r0, r0
 8012e2e:	0952      	lsrs	r2, r2, #5
 8012e30:	0940      	lsrs	r0, r0, #5
 8012e32:	4310      	orrs	r0, r2
 8012e34:	2101      	movs	r1, #1
 8012e36:	f00c fcf4 	bl	801f822 <bsp_assert>
 8012e3a:	e9d4 0124 	ldrd	r0, r1, [r4, #144]	@ 0x90
 8012e3e:	f081 0108 	eor.w	r1, r1, #8
 8012e42:	4308      	orrs	r0, r1
 8012e44:	d101      	bne.n	8012e4a <evnt_schdlr_gnrc_evnt_cmplt+0x44>
 8012e46:	68a0      	ldr	r0, [r4, #8]
 8012e48:	b120      	cbz	r0, 8012e54 <evnt_schdlr_gnrc_evnt_cmplt+0x4e>
 8012e4a:	4620      	mov	r0, r4
 8012e4c:	f7ff ff2a 	bl	8012ca4 <evnt_schdlr_evnt_updtd>
 8012e50:	2000      	movs	r0, #0
 8012e52:	bd10      	pop	{r4, pc}
 8012e54:	4620      	mov	r0, r4
 8012e56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012e5a:	f7ff bdc5 	b.w	80129e8 <evnt_schdlr_unrgstr_evnt>

08012e5e <evnt_schdlr_set_phy_clbr_params>:
 8012e5e:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8012e62:	fb00 f002 	mul.w	r0, r0, r2
 8012e66:	f646 4284 	movw	r2, #27780	@ 0x6c84
 8012e6a:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8012e6e:	e9c2 0100 	strd	r0, r1, [r2]
 8012e72:	6091      	str	r1, [r2, #8]
 8012e74:	b108      	cbz	r0, 8012e7a <evnt_schdlr_set_phy_clbr_params+0x1c>
 8012e76:	f006 bc7d 	b.w	8019774 <llhwc_prdc_clbr_init>
 8012e7a:	f006 bc8a 	b.w	8019792 <llhwc_prdc_clbr_deinit>

08012e7e <evnt_schdlr_set_dp_slp_mode>:
 8012e7e:	b5b0      	push	{r4, r5, r7, lr}
 8012e80:	f646 452c 	movw	r5, #27692	@ 0x6c2c
 8012e84:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 8012e88:	6aa9      	ldr	r1, [r5, #40]	@ 0x28
 8012e8a:	4604      	mov	r4, r0
 8012e8c:	b141      	cbz	r1, 8012ea0 <evnt_schdlr_set_dp_slp_mode+0x22>
 8012e8e:	f891 008d 	ldrb.w	r0, [r1, #141]	@ 0x8d
 8012e92:	2801      	cmp	r0, #1
 8012e94:	d104      	bne.n	8012ea0 <evnt_schdlr_set_dp_slp_mode+0x22>
 8012e96:	2043      	movs	r0, #67	@ 0x43
 8012e98:	f00c fd0e 	bl	801f8b8 <bsp_debug_gpio_toggle>
 8012e9c:	240c      	movs	r4, #12
 8012e9e:	e018      	b.n	8012ed2 <evnt_schdlr_set_dp_slp_mode+0x54>
 8012ea0:	4620      	mov	r0, r4
 8012ea2:	f00f fc8d 	bl	80227c0 <llhwc_cmn_set_dp_slp_mode>
 8012ea6:	2c00      	cmp	r4, #0
 8012ea8:	4604      	mov	r4, r0
 8012eaa:	bf08      	it	eq
 8012eac:	2c00      	cmpeq	r4, #0
 8012eae:	d110      	bne.n	8012ed2 <evnt_schdlr_set_dp_slp_mode+0x54>
 8012eb0:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 8012eb2:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8012eb4:	4780      	blx	r0
 8012eb6:	b918      	cbnz	r0, 8012ec0 <evnt_schdlr_set_dp_slp_mode+0x42>
 8012eb8:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 8012eba:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8012ebc:	4780      	blx	r0
 8012ebe:	b150      	cbz	r0, 8012ed6 <evnt_schdlr_set_dp_slp_mode+0x58>
 8012ec0:	2001      	movs	r0, #1
 8012ec2:	f000 fe69 	bl	8013b98 <evnt_util_set_prdc_clbr_exce_state>
 8012ec6:	f7fd ff53 	bl	8010d70 <evnt_schdlr_hndl_next_evnt>
 8012eca:	2000      	movs	r0, #0
 8012ecc:	2400      	movs	r4, #0
 8012ece:	f000 fe63 	bl	8013b98 <evnt_util_set_prdc_clbr_exce_state>
 8012ed2:	4620      	mov	r0, r4
 8012ed4:	bdb0      	pop	{r4, r5, r7, pc}
 8012ed6:	2400      	movs	r4, #0
 8012ed8:	e7fb      	b.n	8012ed2 <evnt_schdlr_set_dp_slp_mode+0x54>

08012eda <evnt_schdlr_select_tx_power_mode>:
 8012eda:	b510      	push	{r4, lr}
 8012edc:	f646 442c 	movw	r4, #27692	@ 0x6c2c
 8012ee0:	f2c2 0400 	movt	r4, #8192	@ 0x2000
 8012ee4:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8012ee6:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8012ee8:	4780      	blx	r0
 8012eea:	f894 1038 	ldrb.w	r1, [r4, #56]	@ 0x38
 8012eee:	4288      	cmp	r0, r1
 8012ef0:	bf04      	itt	eq
 8012ef2:	2000      	moveq	r0, #0
 8012ef4:	bd10      	popeq	{r4, pc}
 8012ef6:	2043      	movs	r0, #67	@ 0x43
 8012ef8:	f00c fcde 	bl	801f8b8 <bsp_debug_gpio_toggle>
 8012efc:	200c      	movs	r0, #12
 8012efe:	bd10      	pop	{r4, pc}

08012f00 <evnt_schdlr_set_pndg_evnts>:
 8012f00:	f646 4120 	movw	r1, #27680	@ 0x6c20
 8012f04:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8012f08:	7008      	strb	r0, [r1, #0]
 8012f0a:	4770      	bx	lr

08012f0c <evnt_schdlr_rgstr_end_of_activity_cbk>:
 8012f0c:	f646 4124 	movw	r1, #27684	@ 0x6c24
 8012f10:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8012f14:	6008      	str	r0, [r1, #0]
 8012f16:	4770      	bx	lr

08012f18 <evnt_schdlr_get_end_of_activity_state>:
 8012f18:	b570      	push	{r4, r5, r6, lr}
 8012f1a:	f646 4328 	movw	r3, #27688	@ 0x6c28
 8012f1e:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8012f22:	881e      	ldrh	r6, [r3, #0]
 8012f24:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 8012f28:	b396      	cbz	r6, 8012f90 <evnt_schdlr_get_end_of_activity_state+0x78>
 8012f2a:	1e44      	subs	r4, r0, #1
 8012f2c:	f161 0300 	sbc.w	r3, r1, #0
 8012f30:	f1d4 051f 	rsbs	r5, r4, #31
 8012f34:	f04f 0500 	mov.w	r5, #0
 8012f38:	eb75 0303 	sbcs.w	r3, r5, r3
 8012f3c:	d314      	bcc.n	8012f68 <evnt_schdlr_get_end_of_activity_state+0x50>
 8012f3e:	f04f 0e01 	mov.w	lr, #1
 8012f42:	fa0e f404 	lsl.w	r4, lr, r4
 8012f46:	f014 0f8b 	tst.w	r4, #139	@ 0x8b
 8012f4a:	d006      	beq.n	8012f5a <evnt_schdlr_get_end_of_activity_state+0x42>
 8012f4c:	07b0      	lsls	r0, r6, #30
 8012f4e:	bf48      	it	mi
 8012f50:	46f4      	movmi	ip, lr
 8012f52:	2a00      	cmp	r2, #0
 8012f54:	bf08      	it	eq
 8012f56:	46f4      	moveq	ip, lr
 8012f58:	e01a      	b.n	8012f90 <evnt_schdlr_get_end_of_activity_state+0x78>
 8012f5a:	f014 2f80 	tst.w	r4, #2147516416	@ 0x80008000
 8012f5e:	d003      	beq.n	8012f68 <evnt_schdlr_get_end_of_activity_state+0x50>
 8012f60:	0730      	lsls	r0, r6, #28
 8012f62:	f04f 0003 	mov.w	r0, #3
 8012f66:	e00e      	b.n	8012f86 <evnt_schdlr_get_end_of_activity_state+0x6e>
 8012f68:	f080 0380 	eor.w	r3, r0, #128	@ 0x80
 8012f6c:	430b      	orrs	r3, r1
 8012f6e:	d007      	beq.n	8012f80 <evnt_schdlr_get_end_of_activity_state+0x68>
 8012f70:	f480 7080 	eor.w	r0, r0, #256	@ 0x100
 8012f74:	4308      	orrs	r0, r1
 8012f76:	d10e      	bne.n	8012f96 <evnt_schdlr_get_end_of_activity_state+0x7e>
 8012f78:	0770      	lsls	r0, r6, #29
 8012f7a:	f04f 0002 	mov.w	r0, #2
 8012f7e:	e002      	b.n	8012f86 <evnt_schdlr_get_end_of_activity_state+0x6e>
 8012f80:	06b0      	lsls	r0, r6, #26
 8012f82:	f04f 0005 	mov.w	r0, #5
 8012f86:	bf48      	it	mi
 8012f88:	4684      	movmi	ip, r0
 8012f8a:	2a00      	cmp	r2, #0
 8012f8c:	bf08      	it	eq
 8012f8e:	4684      	moveq	ip, r0
 8012f90:	fa1f f08c 	uxth.w	r0, ip
 8012f94:	bd70      	pop	{r4, r5, r6, pc}
 8012f96:	2a00      	cmp	r2, #0
 8012f98:	bf18      	it	ne
 8012f9a:	f04f 32ff 	movne.w	r2, #4294967295	@ 0xffffffff
 8012f9e:	4694      	mov	ip, r2
 8012fa0:	e7f6      	b.n	8012f90 <evnt_schdlr_get_end_of_activity_state+0x78>

08012fa2 <evnt_schdlr_call_end_of_activity_callback>:
 8012fa2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012fa6:	f646 4824 	movw	r8, #27684	@ 0x6c24
 8012faa:	f2c2 0800 	movt	r8, #8192	@ 0x2000
 8012fae:	f8d8 2000 	ldr.w	r2, [r8]
 8012fb2:	b34a      	cbz	r2, 8013008 <evnt_schdlr_call_end_of_activity_callback+0x66>
 8012fb4:	460c      	mov	r4, r1
 8012fb6:	f646 412c 	movw	r1, #27692	@ 0x6c2c
 8012fba:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8012fbe:	4605      	mov	r5, r0
 8012fc0:	6a88      	ldr	r0, [r1, #40]	@ 0x28
 8012fc2:	b110      	cbz	r0, 8012fca <evnt_schdlr_call_end_of_activity_callback+0x28>
 8012fc4:	e9d0 7624 	ldrd	r7, r6, [r0, #144]	@ 0x90
 8012fc8:	e008      	b.n	8012fdc <evnt_schdlr_call_end_of_activity_callback+0x3a>
 8012fca:	6a48      	ldr	r0, [r1, #36]	@ 0x24
 8012fcc:	b118      	cbz	r0, 8012fd6 <evnt_schdlr_call_end_of_activity_callback+0x34>
 8012fce:	6880      	ldr	r0, [r0, #8]
 8012fd0:	4780      	blx	r0
 8012fd2:	2800      	cmp	r0, #0
 8012fd4:	d1f6      	bne.n	8012fc4 <evnt_schdlr_call_end_of_activity_callback+0x22>
 8012fd6:	2600      	movs	r6, #0
 8012fd8:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8012fdc:	4628      	mov	r0, r5
 8012fde:	4621      	mov	r1, r4
 8012fe0:	2201      	movs	r2, #1
 8012fe2:	f7ff ff99 	bl	8012f18 <evnt_schdlr_get_end_of_activity_state>
 8012fe6:	4604      	mov	r4, r0
 8012fe8:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8012fec:	4284      	cmp	r4, r0
 8012fee:	d00b      	beq.n	8013008 <evnt_schdlr_call_end_of_activity_callback+0x66>
 8012ff0:	4638      	mov	r0, r7
 8012ff2:	4631      	mov	r1, r6
 8012ff4:	2200      	movs	r2, #0
 8012ff6:	f7ff ff8f 	bl	8012f18 <evnt_schdlr_get_end_of_activity_state>
 8012ffa:	f8d8 2000 	ldr.w	r2, [r8]
 8012ffe:	4601      	mov	r1, r0
 8013000:	4620      	mov	r0, r4
 8013002:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013006:	4710      	bx	r2
 8013008:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801300c <evnt_schdlr_prdc_clbr_exec>:
 801300c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801300e:	b081      	sub	sp, #4
 8013010:	f646 472c 	movw	r7, #27692	@ 0x6c2c
 8013014:	4604      	mov	r4, r0
 8013016:	2000      	movs	r0, #0
 8013018:	f2c2 0700 	movt	r7, #8192	@ 0x2000
 801301c:	9000      	str	r0, [sp, #0]
 801301e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013020:	6c26      	ldr	r6, [r4, #64]	@ 0x40
 8013022:	f104 0548 	add.w	r5, r4, #72	@ 0x48
 8013026:	b108      	cbz	r0, 801302c <evnt_schdlr_prdc_clbr_exec+0x20>
 8013028:	f00f f804 	bl	8022034 <os_timer_stop>
 801302c:	2032      	movs	r0, #50	@ 0x32
 801302e:	f00c fc3f 	bl	801f8b0 <bsp_debug_gpio_set>
 8013032:	2000      	movs	r0, #0
 8013034:	f011 f8aa 	bl	802418c <llhwc_cmn_evnt_notify>
 8013038:	2002      	movs	r0, #2
 801303a:	f00f fc01 	bl	8022840 <llhwc_pwr_switch>
 801303e:	4668      	mov	r0, sp
 8013040:	f00f fa03 	bl	802244a <llhwc_slptmr_get>
 8013044:	7829      	ldrb	r1, [r5, #0]
 8013046:	f644 52d3 	movw	r2, #19923	@ 0x4dd3
 801304a:	2901      	cmp	r1, #1
 801304c:	f04f 017d 	mov.w	r1, #125	@ 0x7d
 8013050:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 8013054:	9800      	ldr	r0, [sp, #0]
 8013056:	bf08      	it	eq
 8013058:	6378      	streq	r0, [r7, #52]	@ 0x34
 801305a:	f2c1 0262 	movt	r2, #4194	@ 0x1062
 801305e:	fba1 1202 	umull	r1, r2, r1, r2
 8013062:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8013064:	eb00 01d2 	add.w	r1, r0, r2, lsr #3
 8013068:	4628      	mov	r0, r5
 801306a:	2b00      	cmp	r3, #0
 801306c:	bf08      	it	eq
 801306e:	f04f 31ff 	moveq.w	r1, #4294967295	@ 0xffffffff
 8013072:	9100      	str	r1, [sp, #0]
 8013074:	f006 fb74 	bl	8019760 <llhwc_prdc_clbr_exec>
 8013078:	b001      	add	sp, #4
 801307a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801307c <gnrc_evnt_durn_update>:
 801307c:	b570      	push	{r4, r5, r6, lr}
 801307e:	e9d0 2305 	ldrd	r2, r3, [r0, #20]
 8013082:	6f81      	ldr	r1, [r0, #120]	@ 0x78
 8013084:	f240 0eec 	movw	lr, #236	@ 0xec
 8013088:	f646 4c68 	movw	ip, #27752	@ 0x6c68
 801308c:	1a9a      	subs	r2, r3, r2
 801308e:	f2c2 0e00 	movt	lr, #8192	@ 0x2000
 8013092:	f2c2 0c00 	movt	ip, #8192	@ 0x2000
 8013096:	b191      	cbz	r1, 80130be <gnrc_evnt_durn_update+0x42>
 8013098:	e9d1 3424 	ldrd	r3, r4, [r1, #144]	@ 0x90
 801309c:	6d09      	ldr	r1, [r1, #80]	@ 0x50
 801309e:	f084 0408 	eor.w	r4, r4, #8
 80130a2:	4323      	orrs	r3, r4
 80130a4:	4673      	mov	r3, lr
 80130a6:	bf08      	it	eq
 80130a8:	4663      	moveq	r3, ip
 80130aa:	681c      	ldr	r4, [r3, #0]
 80130ac:	6d05      	ldr	r5, [r0, #80]	@ 0x50
 80130ae:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 80130b0:	1b0c      	subs	r4, r1, r4
 80130b2:	1959      	adds	r1, r3, r5
 80130b4:	188d      	adds	r5, r1, r2
 80130b6:	42ac      	cmp	r4, r5
 80130b8:	d904      	bls.n	80130c4 <gnrc_evnt_durn_update+0x48>
 80130ba:	4413      	add	r3, r2
 80130bc:	e006      	b.n	80130cc <gnrc_evnt_durn_update+0x50>
 80130be:	6e01      	ldr	r1, [r0, #96]	@ 0x60
 80130c0:	188b      	adds	r3, r1, r2
 80130c2:	e003      	b.n	80130cc <gnrc_evnt_durn_update+0x50>
 80130c4:	428c      	cmp	r4, r1
 80130c6:	d902      	bls.n	80130ce <gnrc_evnt_durn_update+0x52>
 80130c8:	191a      	adds	r2, r3, r4
 80130ca:	1a53      	subs	r3, r2, r1
 80130cc:	6603      	str	r3, [r0, #96]	@ 0x60
 80130ce:	69c2      	ldr	r2, [r0, #28]
 80130d0:	b162      	cbz	r2, 80130ec <gnrc_evnt_durn_update+0x70>
 80130d2:	6d06      	ldr	r6, [r0, #80]	@ 0x50
 80130d4:	f8de 5000 	ldr.w	r5, [lr]
 80130d8:	f8dc 4008 	ldr.w	r4, [ip, #8]
 80130dc:	1999      	adds	r1, r3, r6
 80130de:	1963      	adds	r3, r4, r5
 80130e0:	1ac9      	subs	r1, r1, r3
 80130e2:	4291      	cmp	r1, r2
 80130e4:	bf82      	ittt	hi
 80130e6:	1b91      	subhi	r1, r2, r6
 80130e8:	4419      	addhi	r1, r3
 80130ea:	6601      	strhi	r1, [r0, #96]	@ 0x60
 80130ec:	bd70      	pop	{r4, r5, r6, pc}

080130ee <evnt_schdlr_alloc_evnt>:
 80130ee:	b510      	push	{r4, lr}
 80130f0:	f248 3004 	movw	r0, #33540	@ 0x8304
 80130f4:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80130f8:	f00e fca0 	bl	8021a3c <os_mem_pool_alloc>
 80130fc:	4604      	mov	r4, r0
 80130fe:	b120      	cbz	r0, 801310a <evnt_schdlr_alloc_evnt+0x1c>
 8013100:	4620      	mov	r0, r4
 8013102:	2100      	movs	r1, #0
 8013104:	22a0      	movs	r2, #160	@ 0xa0
 8013106:	f011 fa6f 	bl	80245e8 <ble_memset>
 801310a:	4620      	mov	r0, r4
 801310c:	bd10      	pop	{r4, pc}
	...

08013110 <evnt_schdlr_free_evnt>:
 8013110:	b570      	push	{r4, r5, r6, lr}
 8013112:	b390      	cbz	r0, 801317a <evnt_schdlr_free_evnt+0x6a>
 8013114:	4604      	mov	r4, r0
 8013116:	f8d0 0090 	ldr.w	r0, [r0, #144]	@ 0x90
 801311a:	f410 7fc0 	tst.w	r0, #384	@ 0x180
 801311e:	d026      	beq.n	801316e <evnt_schdlr_free_evnt+0x5e>
 8013120:	4625      	mov	r5, r4
 8013122:	f855 0f0c 	ldr.w	r0, [r5, #12]!
 8013126:	b168      	cbz	r0, 8013144 <evnt_schdlr_free_evnt+0x34>
 8013128:	f240 06f0 	movw	r6, #240	@ 0xf0
 801312c:	f2c2 0600 	movt	r6, #8192	@ 0x2000
 8013130:	4628      	mov	r0, r5
 8013132:	f000 f828 	bl	8013186 <packet_dequeue>
 8013136:	42b0      	cmp	r0, r6
 8013138:	bf18      	it	ne
 801313a:	f00b fb96 	blne	801e86a <free_buff_hdr>
 801313e:	6828      	ldr	r0, [r5, #0]
 8013140:	2800      	cmp	r0, #0
 8013142:	d1f5      	bne.n	8013130 <evnt_schdlr_free_evnt+0x20>
 8013144:	4625      	mov	r5, r4
 8013146:	f855 0f7c 	ldr.w	r0, [r5, #124]!
 801314a:	b168      	cbz	r0, 8013168 <evnt_schdlr_free_evnt+0x58>
 801314c:	f240 06f0 	movw	r6, #240	@ 0xf0
 8013150:	f2c2 0600 	movt	r6, #8192	@ 0x2000
 8013154:	4628      	mov	r0, r5
 8013156:	f000 f816 	bl	8013186 <packet_dequeue>
 801315a:	42b0      	cmp	r0, r6
 801315c:	bf18      	it	ne
 801315e:	f00b fb84 	blne	801e86a <free_buff_hdr>
 8013162:	6828      	ldr	r0, [r5, #0]
 8013164:	2800      	cmp	r0, #0
 8013166:	d1f5      	bne.n	8013154 <evnt_schdlr_free_evnt+0x44>
 8013168:	e9d4 0124 	ldrd	r0, r1, [r4, #144]	@ 0x90
 801316c:	e001      	b.n	8013172 <evnt_schdlr_free_evnt+0x62>
 801316e:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 8013172:	f480 5000 	eor.w	r0, r0, #8192	@ 0x2000
 8013176:	4308      	orrs	r0, r1
 8013178:	d100      	bne.n	801317c <evnt_schdlr_free_evnt+0x6c>
 801317a:	bd70      	pop	{r4, r5, r6, pc}
 801317c:	4620      	mov	r0, r4
 801317e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013182:	f00e bc5d 	b.w	8021a40 <os_mem_pool_free>

08013186 <packet_dequeue>:
 8013186:	b570      	push	{r4, r5, r6, lr}
 8013188:	f248 16b4 	movw	r6, #33204	@ 0x81b4
 801318c:	f2c2 0600 	movt	r6, #8192	@ 0x2000
 8013190:	6831      	ldr	r1, [r6, #0]
 8013192:	4605      	mov	r5, r0
 8013194:	4608      	mov	r0, r1
 8013196:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 801319a:	f00c fba6 	bl	801f8ea <os_rcrsv_mutex_wait>
 801319e:	7a28      	ldrb	r0, [r5, #8]
 80131a0:	682c      	ldr	r4, [r5, #0]
 80131a2:	b158      	cbz	r0, 80131bc <packet_dequeue+0x36>
 80131a4:	b10c      	cbz	r4, 80131aa <packet_dequeue+0x24>
 80131a6:	2000      	movs	r0, #0
 80131a8:	7228      	strb	r0, [r5, #8]
 80131aa:	f240 04f0 	movw	r4, #240	@ 0xf0
 80131ae:	f2c2 0400 	movt	r4, #8192	@ 0x2000
 80131b2:	6830      	ldr	r0, [r6, #0]
 80131b4:	f00c fb9f 	bl	801f8f6 <os_rcrsv_mutex_release>
 80131b8:	4620      	mov	r0, r4
 80131ba:	bd70      	pop	{r4, r5, r6, pc}
 80131bc:	b13c      	cbz	r4, 80131ce <packet_dequeue+0x48>
 80131be:	6868      	ldr	r0, [r5, #4]
 80131c0:	4284      	cmp	r4, r0
 80131c2:	d00a      	beq.n	80131da <packet_dequeue+0x54>
 80131c4:	6860      	ldr	r0, [r4, #4]
 80131c6:	6028      	str	r0, [r5, #0]
 80131c8:	2000      	movs	r0, #0
 80131ca:	6060      	str	r0, [r4, #4]
 80131cc:	e7f1      	b.n	80131b2 <packet_dequeue+0x2c>
 80131ce:	2000      	movs	r0, #0
 80131d0:	2101      	movs	r1, #1
 80131d2:	2400      	movs	r4, #0
 80131d4:	f00c fb25 	bl	801f822 <bsp_assert>
 80131d8:	e7eb      	b.n	80131b2 <packet_dequeue+0x2c>
 80131da:	2000      	movs	r0, #0
 80131dc:	e9c5 0000 	strd	r0, r0, [r5]
 80131e0:	2001      	movs	r0, #1
 80131e2:	7228      	strb	r0, [r5, #8]
 80131e4:	e7e5      	b.n	80131b2 <packet_dequeue+0x2c>

080131e6 <get_pkt_data>:
 80131e6:	b570      	push	{r4, r5, r6, lr}
 80131e8:	460e      	mov	r6, r1
 80131ea:	2101      	movs	r1, #1
 80131ec:	4614      	mov	r4, r2
 80131ee:	4605      	mov	r5, r0
 80131f0:	2800      	cmp	r0, #0
 80131f2:	bf18      	it	ne
 80131f4:	2001      	movne	r0, #1
 80131f6:	f00c fb14 	bl	801f822 <bsp_assert>
 80131fa:	b11e      	cbz	r6, 8013204 <get_pkt_data+0x1e>
 80131fc:	6828      	ldr	r0, [r5, #0]
 80131fe:	8969      	ldrh	r1, [r5, #10]
 8013200:	4408      	add	r0, r1
 8013202:	6030      	str	r0, [r6, #0]
 8013204:	b10c      	cbz	r4, 801320a <get_pkt_data+0x24>
 8013206:	89a8      	ldrh	r0, [r5, #12]
 8013208:	8020      	strh	r0, [r4, #0]
 801320a:	2000      	movs	r0, #0
 801320c:	bd70      	pop	{r4, r5, r6, pc}

0801320e <get_sca_ppm>:
 801320e:	3801      	subs	r0, #1
 8013210:	b2c1      	uxtb	r1, r0
 8013212:	2906      	cmp	r1, #6
 8013214:	bf84      	itt	hi
 8013216:	f44f 70fa 	movhi.w	r0, #500	@ 0x1f4
 801321a:	4770      	bxhi	lr
 801321c:	b240      	sxtb	r0, r0
 801321e:	f241 71e8 	movw	r1, #6120	@ 0x17e8
 8013222:	f6c0 0103 	movt	r1, #2051	@ 0x803
 8013226:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
 801322a:	4770      	bx	lr

0801322c <evnt_schdlr_calc_wndw_widening>:
 801322c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801322e:	b081      	sub	sp, #4
 8013230:	460c      	mov	r4, r1
 8013232:	9e06      	ldr	r6, [sp, #24]
 8013234:	4605      	mov	r5, r0
 8013236:	f24a 1720 	movw	r7, #41248	@ 0xa120
 801323a:	4618      	mov	r0, r3
 801323c:	4611      	mov	r1, r2
 801323e:	f2c0 0707 	movt	r7, #7
 8013242:	f00e f88c 	bl	802135e <ble_time_ordered_diff_us>
 8013246:	f640 1101 	movw	r1, #2305	@ 0x901
 801324a:	f2c0 013d 	movt	r1, #61	@ 0x3d
 801324e:	4288      	cmp	r0, r1
 8013250:	eb04 0105 	add.w	r1, r4, r5
 8013254:	d30a      	bcc.n	801326c <evnt_schdlr_calc_wndw_widening+0x40>
 8013256:	f64d 6283 	movw	r2, #56963	@ 0xde83
 801325a:	4438      	add	r0, r7
 801325c:	f2c4 321b 	movt	r2, #17179	@ 0x431b
 8013260:	fba0 0202 	umull	r0, r2, r0, r2
 8013264:	0c90      	lsrs	r0, r2, #18
 8013266:	fb00 f001 	mul.w	r0, r0, r1
 801326a:	e008      	b.n	801327e <evnt_schdlr_calc_wndw_widening+0x52>
 801326c:	fb00 7001 	mla	r0, r0, r1, r7
 8013270:	f64d 6183 	movw	r1, #56963	@ 0xde83
 8013274:	f2c4 311b 	movt	r1, #17179	@ 0x431b
 8013278:	fba0 0101 	umull	r0, r1, r0, r1
 801327c:	0c88      	lsrs	r0, r1, #18
 801327e:	eb00 1006 	add.w	r0, r0, r6, lsl #4
 8013282:	3010      	adds	r0, #16
 8013284:	b001      	add	sp, #4
 8013286:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013288 <evnt_schdlr_set_slave_conn_timers>:
 8013288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801328c:	b081      	sub	sp, #4
 801328e:	2101      	movs	r1, #1
 8013290:	4604      	mov	r4, r0
 8013292:	2800      	cmp	r0, #0
 8013294:	bf18      	it	ne
 8013296:	2001      	movne	r0, #1
 8013298:	f00c fac3 	bl	801f822 <bsp_assert>
 801329c:	6f65      	ldr	r5, [r4, #116]	@ 0x74
 801329e:	4626      	mov	r6, r4
 80132a0:	f895 0126 	ldrb.w	r0, [r5, #294]	@ 0x126
 80132a4:	f24a 1b20 	movw	fp, #41248	@ 0xa120
 80132a8:	1e41      	subs	r1, r0, #1
 80132aa:	b2c8      	uxtb	r0, r1
 80132ac:	2806      	cmp	r0, #6
 80132ae:	f241 70cc 	movw	r0, #6092	@ 0x17cc
 80132b2:	f6c0 0003 	movt	r0, #2051	@ 0x803
 80132b6:	bf9a      	itte	ls
 80132b8:	b249      	sxtbls	r1, r1
 80132ba:	f850 8021 	ldrls.w	r8, [r0, r1, lsl #2]
 80132be:	f44f 78fa 	movhi.w	r8, #500	@ 0x1f4
 80132c2:	f895 1021 	ldrb.w	r1, [r5, #33]	@ 0x21
 80132c6:	f2c0 0b07 	movt	fp, #7
 80132ca:	3901      	subs	r1, #1
 80132cc:	b2ca      	uxtb	r2, r1
 80132ce:	2a06      	cmp	r2, #6
 80132d0:	bf9a      	itte	ls
 80132d2:	b249      	sxtbls	r1, r1
 80132d4:	f850 a021 	ldrls.w	sl, [r0, r1, lsl #2]
 80132d8:	f44f 7afa 	movhi.w	sl, #500	@ 0x1f4
 80132dc:	e9d5 230e 	ldrd	r2, r3, [r5, #56]	@ 0x38
 80132e0:	8ae8      	ldrh	r0, [r5, #22]
 80132e2:	f846 2f50 	str.w	r2, [r6, #80]!
 80132e6:	f240 2171 	movw	r1, #625	@ 0x271
 80132ea:	4637      	mov	r7, r6
 80132ec:	fb00 f001 	mul.w	r0, r0, r1
 80132f0:	60f3      	str	r3, [r6, #12]
 80132f2:	f847 2f08 	str.w	r2, [r7, #8]!
 80132f6:	6073      	str	r3, [r6, #4]
 80132f8:	8a29      	ldrh	r1, [r5, #16]
 80132fa:	f1a0 0996 	sub.w	r9, r0, #150	@ 0x96
 80132fe:	4630      	mov	r0, r6
 8013300:	2203      	movs	r2, #3
 8013302:	f00e f871 	bl	80213e8 <ble_time_add_uint>
 8013306:	f895 012c 	ldrb.w	r0, [r5, #300]	@ 0x12c
 801330a:	f240 31ee 	movw	r1, #1006	@ 0x3ee
 801330e:	2802      	cmp	r0, #2
 8013310:	bf08      	it	eq
 8013312:	21b4      	moveq	r1, #180	@ 0xb4
 8013314:	2801      	cmp	r0, #1
 8013316:	bf08      	it	eq
 8013318:	f44f 71b0 	moveq.w	r1, #352	@ 0x160
 801331c:	4638      	mov	r0, r7
 801331e:	2201      	movs	r2, #1
 8013320:	f00e f904 	bl	802152c <ble_time_rmv_uint>
 8013324:	4630      	mov	r0, r6
 8013326:	4639      	mov	r1, r7
 8013328:	f00e f819 	bl	802135e <ble_time_ordered_diff_us>
 801332c:	f640 1101 	movw	r1, #2305	@ 0x901
 8013330:	f2c0 013d 	movt	r1, #61	@ 0x3d
 8013334:	4288      	cmp	r0, r1
 8013336:	eb0a 0108 	add.w	r1, sl, r8
 801333a:	d30a      	bcc.n	8013352 <evnt_schdlr_set_slave_conn_timers+0xca>
 801333c:	f64d 6283 	movw	r2, #56963	@ 0xde83
 8013340:	4458      	add	r0, fp
 8013342:	f2c4 321b 	movt	r2, #17179	@ 0x431b
 8013346:	fba0 0202 	umull	r0, r2, r0, r2
 801334a:	0c90      	lsrs	r0, r2, #18
 801334c:	fb00 f001 	mul.w	r0, r0, r1
 8013350:	e008      	b.n	8013364 <evnt_schdlr_set_slave_conn_timers+0xdc>
 8013352:	fb00 b001 	mla	r0, r0, r1, fp
 8013356:	f64d 6183 	movw	r1, #56963	@ 0xde83
 801335a:	f2c4 311b 	movt	r1, #17179	@ 0x431b
 801335e:	fba0 0101 	umull	r0, r1, r0, r1
 8013362:	0c88      	lsrs	r0, r1, #18
 8013364:	f100 0720 	add.w	r7, r0, #32
 8013368:	454f      	cmp	r7, r9
 801336a:	6027      	str	r7, [r4, #0]
 801336c:	d904      	bls.n	8013378 <evnt_schdlr_set_slave_conn_timers+0xf0>
 801336e:	2003      	movs	r0, #3
 8013370:	f884 0098 	strb.w	r0, [r4, #152]	@ 0x98
 8013374:	201f      	movs	r0, #31
 8013376:	e02d      	b.n	80133d4 <evnt_schdlr_set_slave_conn_timers+0x14c>
 8013378:	f895 012d 	ldrb.w	r0, [r5, #301]	@ 0x12d
 801337c:	2101      	movs	r1, #1
 801337e:	f010 f8d0 	bl	8023522 <llhwc_get_hw_setup_time>
 8013382:	19c1      	adds	r1, r0, r7
 8013384:	4630      	mov	r0, r6
 8013386:	2201      	movs	r2, #1
 8013388:	f00e f8d0 	bl	802152c <ble_time_rmv_uint>
 801338c:	f8b5 10ac 	ldrh.w	r1, [r5, #172]	@ 0xac
 8013390:	4628      	mov	r0, r5
 8013392:	f000 fa59 	bl	8013848 <evnt_utils_calc_conn_tx_rx_durn_per_pkt>
 8013396:	f240 22d5 	movw	r2, #725	@ 0x2d5
 801339a:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 801339e:	f240 02ec 	movw	r2, #236	@ 0xec
 80133a2:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 80133a6:	f644 53d3 	movw	r3, #19923	@ 0x4dd3
 80133aa:	f895 1020 	ldrb.w	r1, [r5, #32]
 80133ae:	f2c1 0362 	movt	r3, #4194	@ 0x1062
 80133b2:	6812      	ldr	r2, [r2, #0]
 80133b4:	fba0 0303 	umull	r0, r3, r0, r3
 80133b8:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80133bc:	f646 4068 	movw	r0, #27752	@ 0x6c68
 80133c0:	eb02 02d3 	add.w	r2, r2, r3, lsr #3
 80133c4:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80133c8:	6880      	ldr	r0, [r0, #8]
 80133ca:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 80133ce:	4408      	add	r0, r1
 80133d0:	6620      	str	r0, [r4, #96]	@ 0x60
 80133d2:	2000      	movs	r0, #0
 80133d4:	b001      	add	sp, #4
 80133d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080133da <evnt_schdlr_get_pckt_durn_on_air>:
 80133da:	2902      	cmp	r1, #2
 80133dc:	f100 0002 	add.w	r0, r0, #2
 80133e0:	d006      	beq.n	80133f0 <evnt_schdlr_get_pckt_durn_on_air+0x16>
 80133e2:	2901      	cmp	r1, #1
 80133e4:	d109      	bne.n	80133fa <evnt_schdlr_get_pckt_durn_on_air+0x20>
 80133e6:	b280      	uxth	r0, r0
 80133e8:	2140      	movs	r1, #64	@ 0x40
 80133ea:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 80133ee:	4770      	bx	lr
 80133f0:	b280      	uxth	r0, r0
 80133f2:	2124      	movs	r1, #36	@ 0x24
 80133f4:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 80133f8:	4770      	bx	lr
 80133fa:	2a02      	cmp	r2, #2
 80133fc:	d009      	beq.n	8013412 <evnt_schdlr_get_pckt_durn_on_air+0x38>
 80133fe:	2a01      	cmp	r2, #1
 8013400:	bf1c      	itt	ne
 8013402:	2000      	movne	r0, #0
 8013404:	4770      	bxne	lr
 8013406:	b280      	uxth	r0, r0
 8013408:	f44f 71d7 	mov.w	r1, #430	@ 0x1ae
 801340c:	eb01 1000 	add.w	r0, r1, r0, lsl #4
 8013410:	4770      	bx	lr
 8013412:	b280      	uxth	r0, r0
 8013414:	f44f 7114 	mov.w	r1, #592	@ 0x250
 8013418:	eb01 1080 	add.w	r0, r1, r0, lsl #6
 801341c:	4770      	bx	lr

0801341e <evnt_schdlr_calc_conn_duration>:
 801341e:	b570      	push	{r4, r5, r6, lr}
 8013420:	f8b0 20ac 	ldrh.w	r2, [r0, #172]	@ 0xac
 8013424:	8b86      	ldrh	r6, [r0, #28]
 8013426:	460d      	mov	r5, r1
 8013428:	4611      	mov	r1, r2
 801342a:	4604      	mov	r4, r0
 801342c:	f000 fa0c 	bl	8013848 <evnt_utils_calc_conn_tx_rx_durn_per_pkt>
 8013430:	2d01      	cmp	r5, #1
 8013432:	f100 0196 	add.w	r1, r0, #150	@ 0x96
 8013436:	d110      	bne.n	801345a <evnt_schdlr_calc_conn_duration+0x3c>
 8013438:	f894 0020 	ldrb.w	r0, [r4, #32]
 801343c:	227d      	movs	r2, #125	@ 0x7d
 801343e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8013442:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 8013446:	f644 52d3 	movw	r2, #19923	@ 0x4dd3
 801344a:	f2c1 0262 	movt	r2, #4194	@ 0x1062
 801344e:	00c0      	lsls	r0, r0, #3
 8013450:	fba1 1202 	umull	r1, r2, r1, r2
 8013454:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
 8013458:	bd70      	pop	{r4, r5, r6, pc}
 801345a:	f240 2271 	movw	r2, #625	@ 0x271
 801345e:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8013462:	fb06 f202 	mul.w	r2, r6, r2
 8013466:	f200 709e 	addw	r0, r0, #1950	@ 0x79e
 801346a:	4282      	cmp	r2, r0
 801346c:	bf38      	it	cc
 801346e:	4610      	movcc	r0, r2
 8013470:	428a      	cmp	r2, r1
 8013472:	8ae2      	ldrh	r2, [r4, #22]
 8013474:	bf38      	it	cc
 8013476:	4608      	movcc	r0, r1
 8013478:	f240 43e2 	movw	r3, #1250	@ 0x4e2
 801347c:	fb02 f303 	mul.w	r3, r2, r3
 8013480:	4298      	cmp	r0, r3
 8013482:	d90f      	bls.n	80134a4 <evnt_schdlr_calc_conn_duration+0x86>
 8013484:	f240 00ec 	movw	r0, #236	@ 0xec
 8013488:	f646 4168 	movw	r1, #27752	@ 0x6c68
 801348c:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8013490:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8013494:	6800      	ldr	r0, [r0, #0]
 8013496:	6889      	ldr	r1, [r1, #8]
 8013498:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801349c:	4408      	add	r0, r1
 801349e:	ebc0 00c2 	rsb	r0, r0, r2, lsl #3
 80134a2:	bd70      	pop	{r4, r5, r6, pc}
 80134a4:	217d      	movs	r1, #125	@ 0x7d
 80134a6:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 80134aa:	f644 51d3 	movw	r1, #19923	@ 0x4dd3
 80134ae:	f2c1 0162 	movt	r1, #4194	@ 0x1062
 80134b2:	fba0 0101 	umull	r0, r1, r0, r1
 80134b6:	08c8      	lsrs	r0, r1, #3
 80134b8:	bd70      	pop	{r4, r5, r6, pc}

080134ba <evnt_schdlr_cal_conn_eff_rx_time>:
 80134ba:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80134be:	b081      	sub	sp, #4
 80134c0:	2101      	movs	r1, #1
 80134c2:	4604      	mov	r4, r0
 80134c4:	2800      	cmp	r0, #0
 80134c6:	bf18      	it	ne
 80134c8:	2001      	movne	r0, #1
 80134ca:	f00c f9aa 	bl	801f822 <bsp_assert>
 80134ce:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 80134d0:	f44f 7374 	mov.w	r3, #976	@ 0x3d0
 80134d4:	f8b0 20a8 	ldrh.w	r2, [r0, #168]	@ 0xa8
 80134d8:	f8b0 10b6 	ldrh.w	r1, [r0, #182]	@ 0xb6
 80134dc:	eb03 1582 	add.w	r5, r3, r2, lsl #6
 80134e0:	f240 08ec 	movw	r8, #236	@ 0xec
 80134e4:	428d      	cmp	r5, r1
 80134e6:	bf28      	it	cs
 80134e8:	460d      	movcs	r5, r1
 80134ea:	f8b0 70ac 	ldrh.w	r7, [r0, #172]	@ 0xac
 80134ee:	f646 4968 	movw	r9, #27752	@ 0x6c68
 80134f2:	f2c2 0800 	movt	r8, #8192	@ 0x2000
 80134f6:	f2c2 0900 	movt	r9, #8192	@ 0x2000
 80134fa:	eb03 1387 	add.w	r3, r3, r7, lsl #6
 80134fe:	f8d8 7000 	ldr.w	r7, [r8]
 8013502:	f8d9 6008 	ldr.w	r6, [r9, #8]
 8013506:	f8b0 20b2 	ldrh.w	r2, [r0, #178]	@ 0xb2
 801350a:	4437      	add	r7, r6
 801350c:	ebc7 1647 	rsb	r6, r7, r7, lsl #5
 8013510:	4293      	cmp	r3, r2
 8013512:	bf38      	it	cc
 8013514:	461a      	movcc	r2, r3
 8013516:	eb06 0397 	add.w	r3, r6, r7, lsr #2
 801351a:	f8b0 608e 	ldrh.w	r6, [r0, #142]	@ 0x8e
 801351e:	1957      	adds	r7, r2, r5
 8013520:	f240 45e2 	movw	r5, #1250	@ 0x4e2
 8013524:	441f      	add	r7, r3
 8013526:	fb06 f505 	mul.w	r5, r6, r5
 801352a:	3796      	adds	r7, #150	@ 0x96
 801352c:	42bd      	cmp	r5, r7
 801352e:	d218      	bcs.n	8013562 <evnt_schdlr_cal_conn_eff_rx_time+0xa8>
 8013530:	f5b1 6f29 	cmp.w	r1, #2704	@ 0xa90
 8013534:	d915      	bls.n	8013562 <evnt_schdlr_cal_conn_eff_rx_time+0xa8>
 8013536:	18d1      	adds	r1, r2, r3
 8013538:	f890 2125 	ldrb.w	r2, [r0, #293]	@ 0x125
 801353c:	1a69      	subs	r1, r5, r1
 801353e:	3996      	subs	r1, #150	@ 0x96
 8013540:	f8a0 10b6 	strh.w	r1, [r0, #182]	@ 0xb6
 8013544:	f8a0 10b4 	strh.w	r1, [r0, #180]	@ 0xb4
 8013548:	f8a0 10aa 	strh.w	r1, [r0, #170]	@ 0xaa
 801354c:	b94a      	cbnz	r2, 8013562 <evnt_schdlr_cal_conn_eff_rx_time+0xa8>
 801354e:	2100      	movs	r1, #0
 8013550:	f7ff ff65 	bl	801341e <evnt_schdlr_calc_conn_duration>
 8013554:	f8d8 1000 	ldr.w	r1, [r8]
 8013558:	f8d9 2008 	ldr.w	r2, [r9, #8]
 801355c:	4408      	add	r0, r1
 801355e:	4410      	add	r0, r2
 8013560:	6620      	str	r0, [r4, #96]	@ 0x60
 8013562:	b001      	add	sp, #4
 8013564:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08013568 <evnt_schdlr_update_slave_conn_timers>:
 8013568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801356c:	b081      	sub	sp, #4
 801356e:	460e      	mov	r6, r1
 8013570:	2101      	movs	r1, #1
 8013572:	4604      	mov	r4, r0
 8013574:	2800      	cmp	r0, #0
 8013576:	bf18      	it	ne
 8013578:	2001      	movne	r0, #1
 801357a:	f00c f952 	bl	801f822 <bsp_assert>
 801357e:	6827      	ldr	r7, [r4, #0]
 8013580:	6f65      	ldr	r5, [r4, #116]	@ 0x74
 8013582:	b15f      	cbz	r7, 801359c <evnt_schdlr_update_slave_conn_timers+0x34>
 8013584:	f895 012d 	ldrb.w	r0, [r5, #301]	@ 0x12d
 8013588:	2101      	movs	r1, #1
 801358a:	f104 0850 	add.w	r8, r4, #80	@ 0x50
 801358e:	f00f ffc8 	bl	8023522 <llhwc_get_hw_setup_time>
 8013592:	19c1      	adds	r1, r0, r7
 8013594:	4640      	mov	r0, r8
 8013596:	2201      	movs	r2, #1
 8013598:	f00d ff26 	bl	80213e8 <ble_time_add_uint>
 801359c:	f104 0b50 	add.w	fp, r4, #80	@ 0x50
 80135a0:	f104 0858 	add.w	r8, r4, #88	@ 0x58
 80135a4:	4658      	mov	r0, fp
 80135a6:	4641      	mov	r1, r8
 80135a8:	f00d fed9 	bl	802135e <ble_time_ordered_diff_us>
 80135ac:	6821      	ldr	r1, [r4, #0]
 80135ae:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80135b2:	eb00 0951 	add.w	r9, r0, r1, lsr #1
 80135b6:	8ae8      	ldrh	r0, [r5, #22]
 80135b8:	f240 41e2 	movw	r1, #1250	@ 0x4e2
 80135bc:	fb00 fa01 	mul.w	sl, r0, r1
 80135c0:	f8b5 10dc 	ldrh.w	r1, [r5, #220]	@ 0xdc
 80135c4:	4637      	mov	r7, r6
 80135c6:	4291      	cmp	r1, r2
 80135c8:	bf18      	it	ne
 80135ca:	440f      	addne	r7, r1
 80135cc:	2e01      	cmp	r6, #1
 80135ce:	bf18      	it	ne
 80135d0:	4637      	movne	r7, r6
 80135d2:	f8b5 10da 	ldrh.w	r1, [r5, #218]	@ 0xda
 80135d6:	45ca      	cmp	sl, r9
 80135d8:	bf98      	it	ls
 80135da:	4637      	movls	r7, r6
 80135dc:	19ca      	adds	r2, r1, r7
 80135de:	fb07 f100 	mul.w	r1, r7, r0
 80135e2:	f8a5 20da 	strh.w	r2, [r5, #218]	@ 0xda
 80135e6:	4658      	mov	r0, fp
 80135e8:	2203      	movs	r2, #3
 80135ea:	f00d fefd 	bl	80213e8 <ble_time_add_uint>
 80135ee:	f8b5 0070 	ldrh.w	r0, [r5, #112]	@ 0x70
 80135f2:	f8b5 10da 	ldrh.w	r1, [r5, #218]	@ 0xda
 80135f6:	4288      	cmp	r0, r1
 80135f8:	bf9c      	itt	ls
 80135fa:	1bc9      	subls	r1, r1, r7
 80135fc:	4281      	cmpls	r1, r0
 80135fe:	d21f      	bcs.n	8013640 <evnt_schdlr_update_slave_conn_timers+0xd8>
 8013600:	f895 005c 	ldrb.w	r0, [r5, #92]	@ 0x5c
 8013604:	2803      	cmp	r0, #3
 8013606:	d011      	beq.n	801362c <evnt_schdlr_update_slave_conn_timers+0xc4>
 8013608:	2802      	cmp	r0, #2
 801360a:	d116      	bne.n	801363a <evnt_schdlr_update_slave_conn_timers+0xd2>
 801360c:	4620      	mov	r0, r4
 801360e:	f7ff ff54 	bl	80134ba <evnt_schdlr_cal_conn_eff_rx_time>
 8013612:	f8b5 008e 	ldrh.w	r0, [r5, #142]	@ 0x8e
 8013616:	8aea      	ldrh	r2, [r5, #22]
 8013618:	f8b5 1088 	ldrh.w	r1, [r5, #136]	@ 0x88
 801361c:	82e8      	strh	r0, [r5, #22]
 801361e:	f8a5 208e 	strh.w	r2, [r5, #142]	@ 0x8e
 8013622:	4658      	mov	r0, fp
 8013624:	2203      	movs	r2, #3
 8013626:	f00d fedf 	bl	80213e8 <ble_time_add_uint>
 801362a:	e006      	b.n	801363a <evnt_schdlr_update_slave_conn_timers+0xd2>
 801362c:	f105 0030 	add.w	r0, r5, #48	@ 0x30
 8013630:	f105 0176 	add.w	r1, r5, #118	@ 0x76
 8013634:	2205      	movs	r2, #5
 8013636:	f010 ff87 	bl	8024548 <ble_memcpy>
 801363a:	2000      	movs	r0, #0
 801363c:	f8a5 0070 	strh.w	r0, [r5, #112]	@ 0x70
 8013640:	f895 012a 	ldrb.w	r0, [r5, #298]	@ 0x12a
 8013644:	b9d0      	cbnz	r0, 801367c <evnt_schdlr_update_slave_conn_timers+0x114>
 8013646:	f895 6026 	ldrb.w	r6, [r5, #38]	@ 0x26
 801364a:	f249 114d 	movw	r1, #37197	@ 0x914d
 801364e:	fb07 f006 	mul.w	r0, r7, r6
 8013652:	f6cb 21cf 	movt	r1, #47823	@ 0xbacf
 8013656:	fba0 1201 	umull	r1, r2, r0, r1
 801365a:	1a81      	subs	r1, r0, r2
 801365c:	eb02 0151 	add.w	r1, r2, r1, lsr #1
 8013660:	2225      	movs	r2, #37	@ 0x25
 8013662:	0949      	lsrs	r1, r1, #5
 8013664:	fb01 0112 	mls	r1, r1, r2, r0
 8013668:	f105 0024 	add.w	r0, r5, #36	@ 0x24
 801366c:	f885 1026 	strb.w	r1, [r5, #38]	@ 0x26
 8013670:	f105 0128 	add.w	r1, r5, #40	@ 0x28
 8013674:	f004 fa94 	bl	8017ba0 <llhwc_get_ch_idx>
 8013678:	f885 6026 	strb.w	r6, [r5, #38]	@ 0x26
 801367c:	f895 0126 	ldrb.w	r0, [r5, #294]	@ 0x126
 8013680:	fbb9 f7fa 	udiv	r7, r9, sl
 8013684:	3801      	subs	r0, #1
 8013686:	b2c1      	uxtb	r1, r0
 8013688:	2906      	cmp	r1, #6
 801368a:	d807      	bhi.n	801369c <evnt_schdlr_update_slave_conn_timers+0x134>
 801368c:	b240      	sxtb	r0, r0
 801368e:	f241 71e8 	movw	r1, #6120	@ 0x17e8
 8013692:	f6c0 0103 	movt	r1, #2051	@ 0x803
 8013696:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
 801369a:	e001      	b.n	80136a0 <evnt_schdlr_update_slave_conn_timers+0x138>
 801369c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80136a0:	f895 1021 	ldrb.w	r1, [r5, #33]	@ 0x21
 80136a4:	3901      	subs	r1, #1
 80136a6:	b2ca      	uxtb	r2, r1
 80136a8:	2a06      	cmp	r2, #6
 80136aa:	d807      	bhi.n	80136bc <evnt_schdlr_update_slave_conn_timers+0x154>
 80136ac:	b249      	sxtb	r1, r1
 80136ae:	f241 72e8 	movw	r2, #6120	@ 0x17e8
 80136b2:	f6c0 0203 	movt	r2, #2051	@ 0x803
 80136b6:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 80136ba:	e001      	b.n	80136c0 <evnt_schdlr_update_slave_conn_timers+0x158>
 80136bc:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80136c0:	4642      	mov	r2, r8
 80136c2:	465b      	mov	r3, fp
 80136c4:	9700      	str	r7, [sp, #0]
 80136c6:	f7ff fdb1 	bl	801322c <evnt_schdlr_calc_wndw_widening>
 80136ca:	4607      	mov	r7, r0
 80136cc:	f895 012d 	ldrb.w	r0, [r5, #301]	@ 0x12d
 80136d0:	2101      	movs	r1, #1
 80136d2:	6027      	str	r7, [r4, #0]
 80136d4:	f00f ff25 	bl	8023522 <llhwc_get_hw_setup_time>
 80136d8:	19c1      	adds	r1, r0, r7
 80136da:	4658      	mov	r0, fp
 80136dc:	2201      	movs	r2, #1
 80136de:	f00d ff25 	bl	802152c <ble_time_rmv_uint>
 80136e2:	f894 008c 	ldrb.w	r0, [r4, #140]	@ 0x8c
 80136e6:	fab0 f080 	clz	r0, r0
 80136ea:	0941      	lsrs	r1, r0, #5
 80136ec:	4628      	mov	r0, r5
 80136ee:	f7ff fe96 	bl	801341e <evnt_schdlr_calc_conn_duration>
 80136f2:	f240 01ec 	movw	r1, #236	@ 0xec
 80136f6:	f646 4268 	movw	r2, #27752	@ 0x6c68
 80136fa:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 80136fe:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8013702:	6809      	ldr	r1, [r1, #0]
 8013704:	6892      	ldr	r2, [r2, #8]
 8013706:	4411      	add	r1, r2
 8013708:	f894 209e 	ldrb.w	r2, [r4, #158]	@ 0x9e
 801370c:	4401      	add	r1, r0
 801370e:	2a01      	cmp	r2, #1
 8013710:	6621      	str	r1, [r4, #96]	@ 0x60
 8013712:	bf04      	itt	eq
 8013714:	3007      	addeq	r0, #7
 8013716:	6620      	streq	r0, [r4, #96]	@ 0x60
 8013718:	2000      	movs	r0, #0
 801371a:	b001      	add	sp, #4
 801371c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013720 <evnt_schdlr_update_master_conn_timers>:
 8013720:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013722:	b081      	sub	sp, #4
 8013724:	460c      	mov	r4, r1
 8013726:	2101      	movs	r1, #1
 8013728:	4605      	mov	r5, r0
 801372a:	2800      	cmp	r0, #0
 801372c:	bf18      	it	ne
 801372e:	2001      	movne	r0, #1
 8013730:	f00c f877 	bl	801f822 <bsp_assert>
 8013734:	6f6f      	ldr	r7, [r5, #116]	@ 0x74
 8013736:	f105 0650 	add.w	r6, r5, #80	@ 0x50
 801373a:	f8b7 00da 	ldrh.w	r0, [r7, #218]	@ 0xda
 801373e:	8af9      	ldrh	r1, [r7, #22]
 8013740:	4420      	add	r0, r4
 8013742:	fb01 f104 	mul.w	r1, r1, r4
 8013746:	f8a7 00da 	strh.w	r0, [r7, #218]	@ 0xda
 801374a:	4630      	mov	r0, r6
 801374c:	2203      	movs	r2, #3
 801374e:	f00d fe4b 	bl	80213e8 <ble_time_add_uint>
 8013752:	f8b7 0070 	ldrh.w	r0, [r7, #112]	@ 0x70
 8013756:	f8b7 10da 	ldrh.w	r1, [r7, #218]	@ 0xda
 801375a:	4288      	cmp	r0, r1
 801375c:	bf9c      	itt	ls
 801375e:	1b09      	subls	r1, r1, r4
 8013760:	4281      	cmpls	r1, r0
 8013762:	d251      	bcs.n	8013808 <evnt_schdlr_update_master_conn_timers+0xe8>
 8013764:	f897 005c 	ldrb.w	r0, [r7, #92]	@ 0x5c
 8013768:	2803      	cmp	r0, #3
 801376a:	d043      	beq.n	80137f4 <evnt_schdlr_update_master_conn_timers+0xd4>
 801376c:	2802      	cmp	r0, #2
 801376e:	d148      	bne.n	8013802 <evnt_schdlr_update_master_conn_timers+0xe2>
 8013770:	4628      	mov	r0, r5
 8013772:	f7ff fea2 	bl	80134ba <evnt_schdlr_cal_conn_eff_rx_time>
 8013776:	f8b7 008e 	ldrh.w	r0, [r7, #142]	@ 0x8e
 801377a:	8af9      	ldrh	r1, [r7, #22]
 801377c:	82f8      	strh	r0, [r7, #22]
 801377e:	f8a7 108e 	strh.w	r1, [r7, #142]	@ 0x8e
 8013782:	f105 0058 	add.w	r0, r5, #88	@ 0x58
 8013786:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 801378a:	f00d fe08 	bl	802139e <ble_time_set>
 801378e:	f897 0090 	ldrb.w	r0, [r7, #144]	@ 0x90
 8013792:	b128      	cbz	r0, 80137a0 <evnt_schdlr_update_master_conn_timers+0x80>
 8013794:	f8b7 1088 	ldrh.w	r1, [r7, #136]	@ 0x88
 8013798:	4630      	mov	r0, r6
 801379a:	2203      	movs	r2, #3
 801379c:	f00d fe24 	bl	80213e8 <ble_time_add_uint>
 80137a0:	f646 402c 	movw	r0, #27692	@ 0x6c2c
 80137a4:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80137a8:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 80137aa:	8af9      	ldrh	r1, [r7, #22]
 80137ac:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 80137ae:	4628      	mov	r0, r5
 80137b0:	4790      	blx	r2
 80137b2:	f646 600d 	movw	r0, #28173	@ 0x6e0d
 80137b6:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80137ba:	7801      	ldrb	r1, [r0, #0]
 80137bc:	2902      	cmp	r1, #2
 80137be:	d114      	bne.n	80137ea <evnt_schdlr_update_master_conn_timers+0xca>
 80137c0:	f895 109e 	ldrb.w	r1, [r5, #158]	@ 0x9e
 80137c4:	b989      	cbnz	r1, 80137ea <evnt_schdlr_update_master_conn_timers+0xca>
 80137c6:	f240 01ec 	movw	r1, #236	@ 0xec
 80137ca:	f646 4268 	movw	r2, #27752	@ 0x6c68
 80137ce:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 80137d2:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 80137d6:	6809      	ldr	r1, [r1, #0]
 80137d8:	6892      	ldr	r2, [r2, #8]
 80137da:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 80137dc:	4411      	add	r1, r2
 80137de:	1a59      	subs	r1, r3, r1
 80137e0:	3107      	adds	r1, #7
 80137e2:	6629      	str	r1, [r5, #96]	@ 0x60
 80137e4:	2101      	movs	r1, #1
 80137e6:	f885 109e 	strb.w	r1, [r5, #158]	@ 0x9e
 80137ea:	2100      	movs	r1, #0
 80137ec:	7001      	strb	r1, [r0, #0]
 80137ee:	f8a5 109c 	strh.w	r1, [r5, #156]	@ 0x9c
 80137f2:	e006      	b.n	8013802 <evnt_schdlr_update_master_conn_timers+0xe2>
 80137f4:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 80137f8:	f107 0176 	add.w	r1, r7, #118	@ 0x76
 80137fc:	2205      	movs	r2, #5
 80137fe:	f010 fea3 	bl	8024548 <ble_memcpy>
 8013802:	2000      	movs	r0, #0
 8013804:	f8a7 0070 	strh.w	r0, [r7, #112]	@ 0x70
 8013808:	f897 012a 	ldrb.w	r0, [r7, #298]	@ 0x12a
 801380c:	b9d0      	cbnz	r0, 8013844 <evnt_schdlr_update_master_conn_timers+0x124>
 801380e:	f897 5026 	ldrb.w	r5, [r7, #38]	@ 0x26
 8013812:	f249 114d 	movw	r1, #37197	@ 0x914d
 8013816:	fb05 f004 	mul.w	r0, r5, r4
 801381a:	f6cb 21cf 	movt	r1, #47823	@ 0xbacf
 801381e:	fba0 1201 	umull	r1, r2, r0, r1
 8013822:	1a81      	subs	r1, r0, r2
 8013824:	eb02 0151 	add.w	r1, r2, r1, lsr #1
 8013828:	2225      	movs	r2, #37	@ 0x25
 801382a:	0949      	lsrs	r1, r1, #5
 801382c:	fb01 0112 	mls	r1, r1, r2, r0
 8013830:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8013834:	f887 1026 	strb.w	r1, [r7, #38]	@ 0x26
 8013838:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 801383c:	f004 f9b0 	bl	8017ba0 <llhwc_get_ch_idx>
 8013840:	f887 5026 	strb.w	r5, [r7, #38]	@ 0x26
 8013844:	b001      	add	sp, #4
 8013846:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013848 <evnt_utils_calc_conn_tx_rx_durn_per_pkt>:
 8013848:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801384c:	4604      	mov	r4, r0
 801384e:	f8b0 a0ae 	ldrh.w	sl, [r0, #174]	@ 0xae
 8013852:	f8b0 80aa 	ldrh.w	r8, [r0, #170]	@ 0xaa
 8013856:	f8b0 70a8 	ldrh.w	r7, [r0, #168]	@ 0xa8
 801385a:	f890 012c 	ldrb.w	r0, [r0, #300]	@ 0x12c
 801385e:	f894 5122 	ldrb.w	r5, [r4, #290]	@ 0x122
 8013862:	2804      	cmp	r0, #4
 8013864:	f64f 79c0 	movw	r9, #65472	@ 0xffc0
 8013868:	d017      	beq.n	801389a <evnt_utils_calc_conn_tx_rx_durn_per_pkt+0x52>
 801386a:	2802      	cmp	r0, #2
 801386c:	d00b      	beq.n	8013886 <evnt_utils_calc_conn_tx_rx_durn_per_pkt+0x3e>
 801386e:	2801      	cmp	r0, #1
 8013870:	d11f      	bne.n	80138b2 <evnt_utils_calc_conn_tx_rx_durn_per_pkt+0x6a>
 8013872:	00c8      	lsls	r0, r1, #3
 8013874:	eb09 01c1 	add.w	r1, r9, r1, lsl #3
 8013878:	2d00      	cmp	r5, #0
 801387a:	bf08      	it	eq
 801387c:	f101 0020 	addeq.w	r0, r1, #32
 8013880:	f100 0670 	add.w	r6, r0, #112	@ 0x70
 8013884:	e024      	b.n	80138d0 <evnt_utils_calc_conn_tx_rx_durn_per_pkt+0x88>
 8013886:	0088      	lsls	r0, r1, #2
 8013888:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 801388c:	2d00      	cmp	r5, #0
 801388e:	bf08      	it	eq
 8013890:	f101 0030 	addeq.w	r0, r1, #48	@ 0x30
 8013894:	f100 063c 	add.w	r6, r0, #60	@ 0x3c
 8013898:	e01a      	b.n	80138d0 <evnt_utils_calc_conn_tx_rx_durn_per_pkt+0x88>
 801389a:	f8b4 012e 	ldrh.w	r0, [r4, #302]	@ 0x12e
 801389e:	2801      	cmp	r0, #1
 80138a0:	d10d      	bne.n	80138be <evnt_utils_calc_conn_tx_rx_durn_per_pkt+0x76>
 80138a2:	0108      	lsls	r0, r1, #4
 80138a4:	2d00      	cmp	r5, #0
 80138a6:	bf08      	it	eq
 80138a8:	eb09 1001 	addeq.w	r0, r9, r1, lsl #4
 80138ac:	f200 260e 	addw	r6, r0, #526	@ 0x20e
 80138b0:	e00e      	b.n	80138d0 <evnt_utils_calc_conn_tx_rx_durn_per_pkt+0x88>
 80138b2:	2000      	movs	r0, #0
 80138b4:	2101      	movs	r1, #1
 80138b6:	2600      	movs	r6, #0
 80138b8:	f00b ffb3 	bl	801f822 <bsp_assert>
 80138bc:	e008      	b.n	80138d0 <evnt_utils_calc_conn_tx_rx_durn_per_pkt+0x88>
 80138be:	0188      	lsls	r0, r1, #6
 80138c0:	f06f 02ff 	mvn.w	r2, #255	@ 0xff
 80138c4:	2d00      	cmp	r5, #0
 80138c6:	bf08      	it	eq
 80138c8:	eb02 1081 	addeq.w	r0, r2, r1, lsl #6
 80138cc:	f500 7674 	add.w	r6, r0, #976	@ 0x3d0
 80138d0:	f894 012d 	ldrb.w	r0, [r4, #301]	@ 0x12d
 80138d4:	2804      	cmp	r0, #4
 80138d6:	d017      	beq.n	8013908 <evnt_utils_calc_conn_tx_rx_durn_per_pkt+0xc0>
 80138d8:	2802      	cmp	r0, #2
 80138da:	d00b      	beq.n	80138f4 <evnt_utils_calc_conn_tx_rx_durn_per_pkt+0xac>
 80138dc:	2801      	cmp	r0, #1
 80138de:	d11d      	bne.n	801391c <evnt_utils_calc_conn_tx_rx_durn_per_pkt+0xd4>
 80138e0:	00f8      	lsls	r0, r7, #3
 80138e2:	eb09 01c7 	add.w	r1, r9, r7, lsl #3
 80138e6:	2d00      	cmp	r5, #0
 80138e8:	bf08      	it	eq
 80138ea:	f101 0020 	addeq.w	r0, r1, #32
 80138ee:	f100 0470 	add.w	r4, r0, #112	@ 0x70
 80138f2:	e018      	b.n	8013926 <evnt_utils_calc_conn_tx_rx_durn_per_pkt+0xde>
 80138f4:	00b8      	lsls	r0, r7, #2
 80138f6:	eb09 0187 	add.w	r1, r9, r7, lsl #2
 80138fa:	2d00      	cmp	r5, #0
 80138fc:	bf08      	it	eq
 80138fe:	f101 0030 	addeq.w	r0, r1, #48	@ 0x30
 8013902:	f100 043c 	add.w	r4, r0, #60	@ 0x3c
 8013906:	e00e      	b.n	8013926 <evnt_utils_calc_conn_tx_rx_durn_per_pkt+0xde>
 8013908:	01b8      	lsls	r0, r7, #6
 801390a:	f06f 01ff 	mvn.w	r1, #255	@ 0xff
 801390e:	2d00      	cmp	r5, #0
 8013910:	bf08      	it	eq
 8013912:	eb01 1087 	addeq.w	r0, r1, r7, lsl #6
 8013916:	f500 7474 	add.w	r4, r0, #976	@ 0x3d0
 801391a:	e004      	b.n	8013926 <evnt_utils_calc_conn_tx_rx_durn_per_pkt+0xde>
 801391c:	2000      	movs	r0, #0
 801391e:	2101      	movs	r1, #1
 8013920:	2400      	movs	r4, #0
 8013922:	f00b ff7e 	bl	801f822 <bsp_assert>
 8013926:	b2b0      	uxth	r0, r6
 8013928:	b2a1      	uxth	r1, r4
 801392a:	4582      	cmp	sl, r0
 801392c:	bf38      	it	cc
 801392e:	4650      	movcc	r0, sl
 8013930:	4588      	cmp	r8, r1
 8013932:	bf38      	it	cc
 8013934:	4641      	movcc	r1, r8
 8013936:	4408      	add	r0, r1
 8013938:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0801393c <evnt_count_adv_channels>:
 801393c:	f241 71c4 	movw	r1, #6084	@ 0x17c4
 8013940:	f000 000f 	and.w	r0, r0, #15
 8013944:	f6c0 0103 	movt	r1, #2051	@ 0x803
 8013948:	5c08      	ldrb	r0, [r1, r0]
 801394a:	4770      	bx	lr

0801394c <evnt_schdlr_calc_adv_max_dur>:
 801394c:	b510      	push	{r4, lr}
 801394e:	2805      	cmp	r0, #5
 8013950:	d207      	bcs.n	8013962 <evnt_schdlr_calc_adv_max_dur+0x16>
 8013952:	b240      	sxtb	r0, r0
 8013954:	f241 71f6 	movw	r1, #6134	@ 0x17f6
 8013958:	f6c0 0103 	movt	r1, #2051	@ 0x803
 801395c:	f831 4010 	ldrh.w	r4, [r1, r0, lsl #1]
 8013960:	e004      	b.n	801396c <evnt_schdlr_calc_adv_max_dur+0x20>
 8013962:	2000      	movs	r0, #0
 8013964:	2101      	movs	r1, #1
 8013966:	2400      	movs	r4, #0
 8013968:	f00b ff5b 	bl	801f822 <bsp_assert>
 801396c:	4620      	mov	r0, r4
 801396e:	bd10      	pop	{r4, pc}

08013970 <evnt_schdlr_calc_prim_adv_durn_on_air>:
 8013970:	b570      	push	{r4, r5, r6, lr}
 8013972:	6f45      	ldr	r5, [r0, #116]	@ 0x74
 8013974:	4604      	mov	r4, r0
 8013976:	7e28      	ldrb	r0, [r5, #24]
 8013978:	f241 71c4 	movw	r1, #6084	@ 0x17c4
 801397c:	f000 000f 	and.w	r0, r0, #15
 8013980:	f6c0 0103 	movt	r1, #2051	@ 0x803
 8013984:	5c0e      	ldrb	r6, [r1, r0]
 8013986:	f00d fade 	bl	8020f46 <llhwc_phy_get_adv_chnls_switch_time>
 801398a:	7e69      	ldrb	r1, [r5, #25]
 801398c:	4605      	mov	r5, r0
 801398e:	4608      	mov	r0, r1
 8013990:	f7ff ffdc 	bl	801394c <evnt_schdlr_calc_adv_max_dur>
 8013994:	1e71      	subs	r1, r6, #1
 8013996:	fb01 f105 	mul.w	r1, r1, r5
 801399a:	1942      	adds	r2, r0, r5
 801399c:	fb00 1106 	mla	r1, r0, r6, r1
 80139a0:	8122      	strh	r2, [r4, #8]
 80139a2:	4608      	mov	r0, r1
 80139a4:	bd70      	pop	{r4, r5, r6, pc}

080139a6 <packet_enqueue>:
 80139a6:	b570      	push	{r4, r5, r6, lr}
 80139a8:	f248 16b4 	movw	r6, #33204	@ 0x81b4
 80139ac:	f2c2 0600 	movt	r6, #8192	@ 0x2000
 80139b0:	460c      	mov	r4, r1
 80139b2:	6831      	ldr	r1, [r6, #0]
 80139b4:	4605      	mov	r5, r0
 80139b6:	4608      	mov	r0, r1
 80139b8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80139bc:	f00b ff95 	bl	801f8ea <os_rcrsv_mutex_wait>
 80139c0:	6828      	ldr	r0, [r5, #0]
 80139c2:	b118      	cbz	r0, 80139cc <packet_enqueue+0x26>
 80139c4:	f855 0f04 	ldr.w	r0, [r5, #4]!
 80139c8:	6044      	str	r4, [r0, #4]
 80139ca:	e001      	b.n	80139d0 <packet_enqueue+0x2a>
 80139cc:	f845 4b04 	str.w	r4, [r5], #4
 80139d0:	6830      	ldr	r0, [r6, #0]
 80139d2:	602c      	str	r4, [r5, #0]
 80139d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80139d8:	f00b bf8d 	b.w	801f8f6 <os_rcrsv_mutex_release>

080139dc <packet_insert_empty_frst>:
 80139dc:	b5b0      	push	{r4, r5, r7, lr}
 80139de:	f248 15b4 	movw	r5, #33204	@ 0x81b4
 80139e2:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 80139e6:	6829      	ldr	r1, [r5, #0]
 80139e8:	4604      	mov	r4, r0
 80139ea:	4608      	mov	r0, r1
 80139ec:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80139f0:	f00b ff7b 	bl	801f8ea <os_rcrsv_mutex_wait>
 80139f4:	6828      	ldr	r0, [r5, #0]
 80139f6:	2101      	movs	r1, #1
 80139f8:	7221      	strb	r1, [r4, #8]
 80139fa:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80139fe:	f00b bf7a 	b.w	801f8f6 <os_rcrsv_mutex_release>

08013a02 <packet_get_frst_pkt>:
 8013a02:	b5b0      	push	{r4, r5, r7, lr}
 8013a04:	f248 15b4 	movw	r5, #33204	@ 0x81b4
 8013a08:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 8013a0c:	6829      	ldr	r1, [r5, #0]
 8013a0e:	4604      	mov	r4, r0
 8013a10:	4608      	mov	r0, r1
 8013a12:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8013a16:	f00b ff68 	bl	801f8ea <os_rcrsv_mutex_wait>
 8013a1a:	7a20      	ldrb	r0, [r4, #8]
 8013a1c:	2800      	cmp	r0, #0
 8013a1e:	bf0e      	itee	eq
 8013a20:	6824      	ldreq	r4, [r4, #0]
 8013a22:	f240 04f0 	movwne	r4, #240	@ 0xf0
 8013a26:	f2c2 0400 	movtne	r4, #8192	@ 0x2000
 8013a2a:	6828      	ldr	r0, [r5, #0]
 8013a2c:	f00b ff63 	bl	801f8f6 <os_rcrsv_mutex_release>
 8013a30:	4620      	mov	r0, r4
 8013a32:	bdb0      	pop	{r4, r5, r7, pc}

08013a34 <evnt_schdlr_backoff_prcdr>:
 8013a34:	b5b0      	push	{r4, r5, r7, lr}
 8013a36:	f646 432c 	movw	r3, #27692	@ 0x6c2c
 8013a3a:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8013a3e:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 8013a40:	2c00      	cmp	r4, #0
 8013a42:	d06d      	beq.n	8013b20 <evnt_schdlr_backoff_prcdr+0xec>
 8013a44:	460b      	mov	r3, r1
 8013a46:	2900      	cmp	r1, #0
 8013a48:	d06a      	beq.n	8013b20 <evnt_schdlr_backoff_prcdr+0xec>
 8013a4a:	4684      	mov	ip, r0
 8013a4c:	e9d4 0124 	ldrd	r0, r1, [r4, #144]	@ 0x90
 8013a50:	f080 0010 	eor.w	r0, r0, #16
 8013a54:	4308      	orrs	r0, r1
 8013a56:	d163      	bne.n	8013b20 <evnt_schdlr_backoff_prcdr+0xec>
 8013a58:	6f65      	ldr	r5, [r4, #116]	@ 0x74
 8013a5a:	e9d5 0110 	ldrd	r0, r1, [r5, #64]	@ 0x40
 8013a5e:	f080 0410 	eor.w	r4, r0, #16
 8013a62:	430c      	orrs	r4, r1
 8013a64:	d016      	beq.n	8013a94 <evnt_schdlr_backoff_prcdr+0x60>
 8013a66:	f080 0320 	eor.w	r3, r0, #32
 8013a6a:	430b      	orrs	r3, r1
 8013a6c:	bf18      	it	ne
 8013a6e:	bdb0      	popne	{r4, r5, r7, pc}
 8013a70:	2a01      	cmp	r2, #1
 8013a72:	d005      	beq.n	8013a80 <evnt_schdlr_backoff_prcdr+0x4c>
 8013a74:	f1bc 0f06 	cmp.w	ip, #6
 8013a78:	bf18      	it	ne
 8013a7a:	f1bc 0f00 	cmpne.w	ip, #0
 8013a7e:	d162      	bne.n	8013b46 <evnt_schdlr_backoff_prcdr+0x112>
 8013a80:	f895 0048 	ldrb.w	r0, [r5, #72]	@ 0x48
 8013a84:	2100      	movs	r1, #0
 8013a86:	3801      	subs	r0, #1
 8013a88:	f885 0048 	strb.w	r0, [r5, #72]	@ 0x48
 8013a8c:	0600      	lsls	r0, r0, #24
 8013a8e:	d022      	beq.n	8013ad6 <evnt_schdlr_backoff_prcdr+0xa2>
 8013a90:	2020      	movs	r0, #32
 8013a92:	bdb0      	pop	{r4, r5, r7, pc}
 8013a94:	2a01      	cmp	r2, #1
 8013a96:	bf18      	it	ne
 8013a98:	f1bc 0f06 	cmpne.w	ip, #6
 8013a9c:	d155      	bne.n	8013b4a <evnt_schdlr_backoff_prcdr+0x116>
 8013a9e:	2b01      	cmp	r3, #1
 8013aa0:	d01d      	beq.n	8013ade <evnt_schdlr_backoff_prcdr+0xaa>
 8013aa2:	2b02      	cmp	r3, #2
 8013aa4:	d136      	bne.n	8013b14 <evnt_schdlr_backoff_prcdr+0xe0>
 8013aa6:	f646 500c 	movw	r0, #27916	@ 0x6d0c
 8013aaa:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8013aae:	7802      	ldrb	r2, [r0, #0]
 8013ab0:	f646 530d 	movw	r3, #27917	@ 0x6d0d
 8013ab4:	1c51      	adds	r1, r2, #1
 8013ab6:	7001      	strb	r1, [r0, #0]
 8013ab8:	2100      	movs	r1, #0
 8013aba:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8013abe:	7019      	strb	r1, [r3, #0]
 8013ac0:	bb42      	cbnz	r2, 8013b14 <evnt_schdlr_backoff_prcdr+0xe0>
 8013ac2:	7001      	strb	r1, [r0, #0]
 8013ac4:	f895 0049 	ldrb.w	r0, [r5, #73]	@ 0x49
 8013ac8:	2101      	movs	r1, #1
 8013aca:	2801      	cmp	r0, #1
 8013acc:	bf88      	it	hi
 8013ace:	0841      	lsrhi	r1, r0, #1
 8013ad0:	f885 1049 	strb.w	r1, [r5, #73]	@ 0x49
 8013ad4:	e01e      	b.n	8013b14 <evnt_schdlr_backoff_prcdr+0xe0>
 8013ad6:	2010      	movs	r0, #16
 8013ad8:	e9c5 0110 	strd	r0, r1, [r5, #64]	@ 0x40
 8013adc:	bdb0      	pop	{r4, r5, r7, pc}
 8013ade:	f646 510d 	movw	r1, #27917	@ 0x6d0d
 8013ae2:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8013ae6:	780b      	ldrb	r3, [r1, #0]
 8013ae8:	2000      	movs	r0, #0
 8013aea:	2220      	movs	r2, #32
 8013aec:	e9c5 2010 	strd	r2, r0, [r5, #64]	@ 0x40
 8013af0:	1c5a      	adds	r2, r3, #1
 8013af2:	700a      	strb	r2, [r1, #0]
 8013af4:	f646 520c 	movw	r2, #27916	@ 0x6d0c
 8013af8:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8013afc:	7010      	strb	r0, [r2, #0]
 8013afe:	b94b      	cbnz	r3, 8013b14 <evnt_schdlr_backoff_prcdr+0xe0>
 8013b00:	f895 2049 	ldrb.w	r2, [r5, #73]	@ 0x49
 8013b04:	7008      	strb	r0, [r1, #0]
 8013b06:	0050      	lsls	r0, r2, #1
 8013b08:	b2c0      	uxtb	r0, r0
 8013b0a:	2810      	cmp	r0, #16
 8013b0c:	bf28      	it	cs
 8013b0e:	2010      	movcs	r0, #16
 8013b10:	f885 0049 	strb.w	r0, [r5, #73]	@ 0x49
 8013b14:	f105 0048 	add.w	r0, r5, #72	@ 0x48
 8013b18:	2101      	movs	r1, #1
 8013b1a:	f004 fb10 	bl	801813e <llhwc_gen_rnd_num>
 8013b1e:	b110      	cbz	r0, 8013b26 <evnt_schdlr_backoff_prcdr+0xf2>
 8013b20:	2110      	movs	r1, #16
 8013b22:	2000      	movs	r0, #0
 8013b24:	bdb0      	pop	{r4, r5, r7, pc}
 8013b26:	f895 0049 	ldrb.w	r0, [r5, #73]	@ 0x49
 8013b2a:	f895 1048 	ldrb.w	r1, [r5, #72]	@ 0x48
 8013b2e:	3801      	subs	r0, #1
 8013b30:	4008      	ands	r0, r1
 8013b32:	3001      	adds	r0, #1
 8013b34:	b2c2      	uxtb	r2, r0
 8013b36:	4282      	cmp	r2, r0
 8013b38:	bf18      	it	ne
 8013b3a:	2201      	movne	r2, #1
 8013b3c:	e9d5 0110 	ldrd	r0, r1, [r5, #64]	@ 0x40
 8013b40:	f885 2048 	strb.w	r2, [r5, #72]	@ 0x48
 8013b44:	bdb0      	pop	{r4, r5, r7, pc}
 8013b46:	2100      	movs	r1, #0
 8013b48:	e7a2      	b.n	8013a90 <evnt_schdlr_backoff_prcdr+0x5c>
 8013b4a:	f1bc 0f00 	cmp.w	ip, #0
 8013b4e:	d0a6      	beq.n	8013a9e <evnt_schdlr_backoff_prcdr+0x6a>
 8013b50:	2100      	movs	r1, #0
 8013b52:	2010      	movs	r0, #16
 8013b54:	bdb0      	pop	{r4, r5, r7, pc}

08013b56 <evnt_schdlr_optm_conn_param>:
 8013b56:	f646 422c 	movw	r2, #27692	@ 0x6c2c
 8013b5a:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8013b5e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8013b60:	b289      	uxth	r1, r1
 8013b62:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8013b64:	4710      	bx	r2

08013b66 <evnt_schdlr_conn_parm_req>:
 8013b66:	f646 412c 	movw	r1, #27692	@ 0x6c2c
 8013b6a:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8013b6e:	6a49      	ldr	r1, [r1, #36]	@ 0x24
 8013b70:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 8013b72:	4708      	bx	r1

08013b74 <evnt_schdlr_calc_win_offset>:
 8013b74:	f646 422c 	movw	r2, #27692	@ 0x6c2c
 8013b78:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8013b7c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8013b7e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8013b80:	4710      	bx	r2

08013b82 <evnt_util_is_connect_setup>:
 8013b82:	b510      	push	{r4, lr}
 8013b84:	2101      	movs	r1, #1
 8013b86:	4604      	mov	r4, r0
 8013b88:	2800      	cmp	r0, #0
 8013b8a:	bf18      	it	ne
 8013b8c:	2001      	movne	r0, #1
 8013b8e:	f00b fe48 	bl	801f822 <bsp_assert>
 8013b92:	f894 008c 	ldrb.w	r0, [r4, #140]	@ 0x8c
 8013b96:	bd10      	pop	{r4, pc}

08013b98 <evnt_util_set_prdc_clbr_exce_state>:
 8013b98:	b5b0      	push	{r4, r5, r7, lr}
 8013b9a:	4605      	mov	r5, r0
 8013b9c:	f7fd f8d4 	bl	8010d48 <evnt_schdlr_get_prdc_clbr_evnt_hndl>
 8013ba0:	4604      	mov	r4, r0
 8013ba2:	2000      	movs	r0, #0
 8013ba4:	2101      	movs	r1, #1
 8013ba6:	2d02      	cmp	r5, #2
 8013ba8:	bf38      	it	cc
 8013baa:	2001      	movcc	r0, #1
 8013bac:	f00b fe39 	bl	801f822 <bsp_assert>
 8013bb0:	b14c      	cbz	r4, 8013bc6 <evnt_util_set_prdc_clbr_exce_state+0x2e>
 8013bb2:	f894 0044 	ldrb.w	r0, [r4, #68]	@ 0x44
 8013bb6:	b10d      	cbz	r5, 8013bbc <evnt_util_set_prdc_clbr_exce_state+0x24>
 8013bb8:	2101      	movs	r1, #1
 8013bba:	e001      	b.n	8013bc0 <evnt_util_set_prdc_clbr_exce_state+0x28>
 8013bbc:	b118      	cbz	r0, 8013bc6 <evnt_util_set_prdc_clbr_exce_state+0x2e>
 8013bbe:	21ff      	movs	r1, #255	@ 0xff
 8013bc0:	4408      	add	r0, r1
 8013bc2:	f884 0044 	strb.w	r0, [r4, #68]	@ 0x44
 8013bc6:	bdb0      	pop	{r4, r5, r7, pc}

08013bc8 <evnt_utils_reset_sw_overflow>:
 8013bc8:	b510      	push	{r4, lr}
 8013bca:	2101      	movs	r1, #1
 8013bcc:	4604      	mov	r4, r0
 8013bce:	2800      	cmp	r0, #0
 8013bd0:	bf18      	it	ne
 8013bd2:	2001      	movne	r0, #1
 8013bd4:	f00b fe25 	bl	801f822 <bsp_assert>
 8013bd8:	b12c      	cbz	r4, 8013be6 <evnt_utils_reset_sw_overflow+0x1e>
 8013bda:	2000      	movs	r0, #0
 8013bdc:	f884 0056 	strb.w	r0, [r4, #86]	@ 0x56
 8013be0:	6fa4      	ldr	r4, [r4, #120]	@ 0x78
 8013be2:	2c00      	cmp	r4, #0
 8013be4:	d1fa      	bne.n	8013bdc <evnt_utils_reset_sw_overflow+0x14>
 8013be6:	bd10      	pop	{r4, pc}

08013be8 <hci_default_ll_queue_full>:
 8013be8:	2000      	movs	r0, #0
 8013bea:	2101      	movs	r1, #1
 8013bec:	f00b be19 	b.w	801f822 <bsp_assert>

08013bf0 <ll_hci_init>:
 8013bf0:	b510      	push	{r4, lr}
 8013bf2:	b120      	cbz	r0, 8013bfe <ll_hci_init+0xe>
 8013bf4:	f646 5114 	movw	r1, #27924	@ 0x6d14
 8013bf8:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8013bfc:	6008      	str	r0, [r1, #0]
 8013bfe:	f646 5418 	movw	r4, #27928	@ 0x6d18
 8013c02:	f2c2 0400 	movt	r4, #8192	@ 0x2000
 8013c06:	4620      	mov	r0, r4
 8013c08:	2100      	movs	r1, #0
 8013c0a:	221c      	movs	r2, #28
 8013c0c:	f010 fcec 	bl	80245e8 <ble_memset>
 8013c10:	f641 70ff 	movw	r0, #8191	@ 0x1fff
 8013c14:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8013c18:	e9c4 0100 	strd	r0, r1, [r4]
 8013c1c:	211f      	movs	r1, #31
 8013c1e:	2000      	movs	r0, #0
 8013c20:	6121      	str	r1, [r4, #16]
 8013c22:	bd10      	pop	{r4, pc}

08013c24 <hci_get_dis_tbl>:
 8013c24:	f641 0100 	movw	r1, #6144	@ 0x1800
 8013c28:	f6c0 0103 	movt	r1, #2051	@ 0x803
 8013c2c:	6001      	str	r1, [r0, #0]
 8013c2e:	4770      	bx	lr

08013c30 <hci_end_of_activity_evnt>:
 8013c30:	b5b0      	push	{r4, r5, r7, lr}
 8013c32:	b082      	sub	sp, #8
 8013c34:	f646 5234 	movw	r2, #27956	@ 0x6d34
 8013c38:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8013c3c:	7812      	ldrb	r2, [r2, #0]
 8013c3e:	f8ad 0006 	strh.w	r0, [sp, #6]
 8013c42:	06d0      	lsls	r0, r2, #27
 8013c44:	f8ad 1004 	strh.w	r1, [sp, #4]
 8013c48:	d522      	bpl.n	8013c90 <hci_end_of_activity_evnt+0x60>
 8013c4a:	f647 3044 	movw	r0, #31556	@ 0x7b44
 8013c4e:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8013c52:	f00d fef3 	bl	8021a3c <os_mem_pool_alloc>
 8013c56:	b1d8      	cbz	r0, 8013c90 <hci_end_of_activity_evnt+0x60>
 8013c58:	4604      	mov	r4, r0
 8013c5a:	20ff      	movs	r0, #255	@ 0xff
 8013c5c:	7020      	strb	r0, [r4, #0]
 8013c5e:	2005      	movs	r0, #5
 8013c60:	7060      	strb	r0, [r4, #1]
 8013c62:	70a0      	strb	r0, [r4, #2]
 8013c64:	1ce0      	adds	r0, r4, #3
 8013c66:	f10d 0106 	add.w	r1, sp, #6
 8013c6a:	2202      	movs	r2, #2
 8013c6c:	f010 fc6c 	bl	8024548 <ble_memcpy>
 8013c70:	1d60      	adds	r0, r4, #5
 8013c72:	a901      	add	r1, sp, #4
 8013c74:	2202      	movs	r2, #2
 8013c76:	f010 fc67 	bl	8024548 <ble_memcpy>
 8013c7a:	f646 5014 	movw	r0, #27924	@ 0x6d14
 8013c7e:	7861      	ldrb	r1, [r4, #1]
 8013c80:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8013c84:	6805      	ldr	r5, [r0, #0]
 8013c86:	3102      	adds	r1, #2
 8013c88:	4620      	mov	r0, r4
 8013c8a:	f000 f803 	bl	8013c94 <hci_form_hdr>
 8013c8e:	47a8      	blx	r5
 8013c90:	b002      	add	sp, #8
 8013c92:	bdb0      	pop	{r4, r5, r7, pc}

08013c94 <hci_form_hdr>:
 8013c94:	b570      	push	{r4, r5, r6, lr}
 8013c96:	4605      	mov	r5, r0
 8013c98:	f249 4060 	movw	r0, #37984	@ 0x9460
 8013c9c:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8013ca0:	460c      	mov	r4, r1
 8013ca2:	f00d fecb 	bl	8021a3c <os_mem_pool_alloc>
 8013ca6:	2101      	movs	r1, #1
 8013ca8:	4606      	mov	r6, r0
 8013caa:	2800      	cmp	r0, #0
 8013cac:	bf18      	it	ne
 8013cae:	2001      	movne	r0, #1
 8013cb0:	f00b fdb7 	bl	801f822 <bsp_assert>
 8013cb4:	2001      	movs	r0, #1
 8013cb6:	2101      	movs	r1, #1
 8013cb8:	6035      	str	r5, [r6, #0]
 8013cba:	81b4      	strh	r4, [r6, #12]
 8013cbc:	f00b fdb1 	bl	801f822 <bsp_assert>
 8013cc0:	2000      	movs	r0, #0
 8013cc2:	8170      	strh	r0, [r6, #10]
 8013cc4:	2108      	movs	r1, #8
 8013cc6:	4630      	mov	r0, r6
 8013cc8:	73b1      	strb	r1, [r6, #14]
 8013cca:	bd70      	pop	{r4, r5, r6, pc}

08013ccc <hci_event_get_queue_id>:
 8013ccc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013cce:	b081      	sub	sp, #4
 8013cd0:	6806      	ldr	r6, [r0, #0]
 8013cd2:	460c      	mov	r4, r1
 8013cd4:	4605      	mov	r5, r0
 8013cd6:	8947      	ldrh	r7, [r0, #10]
 8013cd8:	4630      	mov	r0, r6
 8013cda:	2101      	movs	r1, #1
 8013cdc:	2e00      	cmp	r6, #0
 8013cde:	bf18      	it	ne
 8013ce0:	2001      	movne	r0, #1
 8013ce2:	f00b fd9e 	bl	801f822 <bsp_assert>
 8013ce6:	b10c      	cbz	r4, 8013cec <hci_event_get_queue_id+0x20>
 8013ce8:	2004      	movs	r0, #4
 8013cea:	7020      	strb	r0, [r4, #0]
 8013cec:	7ba8      	ldrb	r0, [r5, #14]
 8013cee:	2808      	cmp	r0, #8
 8013cf0:	d006      	beq.n	8013d00 <hci_event_get_queue_id+0x34>
 8013cf2:	2810      	cmp	r0, #16
 8013cf4:	d10b      	bne.n	8013d0e <hci_event_get_queue_id+0x42>
 8013cf6:	f04f 0007 	mov.w	r0, #7
 8013cfa:	b17c      	cbz	r4, 8013d1c <hci_event_get_queue_id+0x50>
 8013cfc:	2128      	movs	r1, #40	@ 0x28
 8013cfe:	e00a      	b.n	8013d16 <hci_event_get_queue_id+0x4a>
 8013d00:	b12c      	cbz	r4, 8013d0e <hci_event_get_queue_id+0x42>
 8013d02:	5df0      	ldrb	r0, [r6, r7]
 8013d04:	283e      	cmp	r0, #62	@ 0x3e
 8013d06:	d102      	bne.n	8013d0e <hci_event_get_queue_id+0x42>
 8013d08:	2006      	movs	r0, #6
 8013d0a:	2105      	movs	r1, #5
 8013d0c:	e003      	b.n	8013d16 <hci_event_get_queue_id+0x4a>
 8013d0e:	b124      	cbz	r4, 8013d1a <hci_event_get_queue_id+0x4e>
 8013d10:	7820      	ldrb	r0, [r4, #0]
 8013d12:	1c41      	adds	r1, r0, #1
 8013d14:	2006      	movs	r0, #6
 8013d16:	7021      	strb	r1, [r4, #0]
 8013d18:	e000      	b.n	8013d1c <hci_event_get_queue_id+0x50>
 8013d1a:	2006      	movs	r0, #6
 8013d1c:	b001      	add	sp, #4
 8013d1e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013d20 <hci_queue_send_pckt>:
 8013d20:	b5b0      	push	{r4, r5, r7, lr}
 8013d22:	b082      	sub	sp, #8
 8013d24:	2101      	movs	r1, #1
 8013d26:	4604      	mov	r4, r0
 8013d28:	2800      	cmp	r0, #0
 8013d2a:	bf18      	it	ne
 8013d2c:	2001      	movne	r0, #1
 8013d2e:	f00b fd78 	bl	801f822 <bsp_assert>
 8013d32:	f10d 0107 	add.w	r1, sp, #7
 8013d36:	4620      	mov	r0, r4
 8013d38:	f7ff ffc8 	bl	8013ccc <hci_event_get_queue_id>
 8013d3c:	4605      	mov	r5, r0
 8013d3e:	f00d fd62 	bl	8021806 <emngr_get_handle_events>
 8013d42:	2d07      	cmp	r5, #7
 8013d44:	d00f      	beq.n	8013d66 <hci_queue_send_pckt+0x46>
 8013d46:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8013d4a:	3901      	subs	r1, #1
 8013d4c:	4288      	cmp	r0, r1
 8013d4e:	d10a      	bne.n	8013d66 <hci_queue_send_pckt+0x46>
 8013d50:	f240 1000 	movw	r0, #256	@ 0x100
 8013d54:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8013d58:	6801      	ldr	r1, [r0, #0]
 8013d5a:	4620      	mov	r0, r4
 8013d5c:	4788      	blx	r1
 8013d5e:	4620      	mov	r0, r4
 8013d60:	f000 ff3e 	bl	8014be0 <ll_intf_free_ll_pkt_hndlr>
 8013d64:	e003      	b.n	8013d6e <hci_queue_send_pckt+0x4e>
 8013d66:	4628      	mov	r0, r5
 8013d68:	4621      	mov	r1, r4
 8013d6a:	f00d fc92 	bl	8021692 <emngr_post_event>
 8013d6e:	2001      	movs	r0, #1
 8013d70:	b002      	add	sp, #8
 8013d72:	bdb0      	pop	{r4, r5, r7, pc}

08013d74 <hci_init_events_queues>:
 8013d74:	b510      	push	{r4, lr}
 8013d76:	f643 54a1 	movw	r4, #15777	@ 0x3da1
 8013d7a:	f6c0 0401 	movt	r4, #2049	@ 0x801
 8013d7e:	2006      	movs	r0, #6
 8013d80:	2105      	movs	r1, #5
 8013d82:	4622      	mov	r2, r4
 8013d84:	f00d fc60 	bl	8021648 <emngr_handle_init>
 8013d88:	2008      	movs	r0, #8
 8013d8a:	2111      	movs	r1, #17
 8013d8c:	4622      	mov	r2, r4
 8013d8e:	f00d fc5b 	bl	8021648 <emngr_handle_init>
 8013d92:	2007      	movs	r0, #7
 8013d94:	2128      	movs	r1, #40	@ 0x28
 8013d96:	4622      	mov	r2, r4
 8013d98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013d9c:	f00d bc54 	b.w	8021648 <emngr_handle_init>

08013da0 <hci_post_event_cbk>:
 8013da0:	b570      	push	{r4, r5, r6, lr}
 8013da2:	2100      	movs	r1, #0
 8013da4:	4604      	mov	r4, r0
 8013da6:	f7ff ff91 	bl	8013ccc <hci_event_get_queue_id>
 8013daa:	f646 5610 	movw	r6, #27920	@ 0x6d10
 8013dae:	f2c2 0600 	movt	r6, #8192	@ 0x2000
 8013db2:	6831      	ldr	r1, [r6, #0]
 8013db4:	4605      	mov	r5, r0
 8013db6:	2900      	cmp	r1, #0
 8013db8:	bf18      	it	ne
 8013dba:	2101      	movne	r1, #1
 8013dbc:	4608      	mov	r0, r1
 8013dbe:	2101      	movs	r1, #1
 8013dc0:	f00b fd2f 	bl	801f822 <bsp_assert>
 8013dc4:	6831      	ldr	r1, [r6, #0]
 8013dc6:	4620      	mov	r0, r4
 8013dc8:	4788      	blx	r1
 8013dca:	b100      	cbz	r0, 8013dce <hci_post_event_cbk+0x2e>
 8013dcc:	bd70      	pop	{r4, r5, r6, pc}
 8013dce:	4628      	mov	r0, r5
 8013dd0:	4621      	mov	r1, r4
 8013dd2:	f00d fc90 	bl	80216f6 <emngr_post_event_first>
 8013dd6:	f00b fd84 	bl	801f8e2 <os_disable_isr>
 8013dda:	4628      	mov	r0, r5
 8013ddc:	2101      	movs	r1, #1
 8013dde:	f00d fd1c 	bl	802181a <emngr_set_event_handle_busy>
 8013de2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013de6:	f00b bd7e 	b.w	801f8e6 <os_enable_isr>

08013dea <hci_rgstr_hst_cbk>:
 8013dea:	f646 5110 	movw	r1, #27920	@ 0x6d10
 8013dee:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8013df2:	6008      	str	r0, [r1, #0]
 8013df4:	4770      	bx	lr

08013df6 <hci_rgstr_hst_cbk_ll_queue_full>:
 8013df6:	f240 1100 	movw	r1, #256	@ 0x100
 8013dfa:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8013dfe:	6008      	str	r0, [r1, #0]
 8013e00:	4770      	bx	lr

08013e02 <hci_ll_set_le_event_mask>:
 8013e02:	7801      	ldrb	r1, [r0, #0]
 8013e04:	7842      	ldrb	r2, [r0, #1]
 8013e06:	7883      	ldrb	r3, [r0, #2]
 8013e08:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
 8013e0c:	78c2      	ldrb	r2, [r0, #3]
 8013e0e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8013e12:	f646 5c18 	movw	ip, #27928	@ 0x6d18
 8013e16:	ea41 6102 	orr.w	r1, r1, r2, lsl #24
 8013e1a:	f2c2 0c00 	movt	ip, #8192	@ 0x2000
 8013e1e:	f8cc 1010 	str.w	r1, [ip, #16]
 8013e22:	7901      	ldrb	r1, [r0, #4]
 8013e24:	7943      	ldrb	r3, [r0, #5]
 8013e26:	7982      	ldrb	r2, [r0, #6]
 8013e28:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
 8013e2c:	79c0      	ldrb	r0, [r0, #7]
 8013e2e:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8013e32:	ea41 6000 	orr.w	r0, r1, r0, lsl #24
 8013e36:	f8cc 0014 	str.w	r0, [ip, #20]
 8013e3a:	4770      	bx	lr

08013e3c <hci_ll_set_event_mask>:
 8013e3c:	7801      	ldrb	r1, [r0, #0]
 8013e3e:	7842      	ldrb	r2, [r0, #1]
 8013e40:	7883      	ldrb	r3, [r0, #2]
 8013e42:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
 8013e46:	78c2      	ldrb	r2, [r0, #3]
 8013e48:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8013e4c:	f646 5c18 	movw	ip, #27928	@ 0x6d18
 8013e50:	ea41 6102 	orr.w	r1, r1, r2, lsl #24
 8013e54:	f2c2 0c00 	movt	ip, #8192	@ 0x2000
 8013e58:	f8cc 1004 	str.w	r1, [ip, #4]
 8013e5c:	7901      	ldrb	r1, [r0, #4]
 8013e5e:	7943      	ldrb	r3, [r0, #5]
 8013e60:	7982      	ldrb	r2, [r0, #6]
 8013e62:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
 8013e66:	79c0      	ldrb	r0, [r0, #7]
 8013e68:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8013e6c:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8013e70:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
 8013e74:	ea02 6000 	and.w	r0, r2, r0, lsl #24
 8013e78:	f8cc 1000 	str.w	r1, [ip]
 8013e7c:	f8cc 0018 	str.w	r0, [ip, #24]
 8013e80:	4770      	bx	lr

08013e82 <hci_ll_set_event_mask_page2>:
 8013e82:	7801      	ldrb	r1, [r0, #0]
 8013e84:	7842      	ldrb	r2, [r0, #1]
 8013e86:	7883      	ldrb	r3, [r0, #2]
 8013e88:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
 8013e8c:	78c2      	ldrb	r2, [r0, #3]
 8013e8e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8013e92:	f646 5c18 	movw	ip, #27928	@ 0x6d18
 8013e96:	ea41 6102 	orr.w	r1, r1, r2, lsl #24
 8013e9a:	f2c2 0c00 	movt	ip, #8192	@ 0x2000
 8013e9e:	f8cc 100c 	str.w	r1, [ip, #12]
 8013ea2:	7901      	ldrb	r1, [r0, #4]
 8013ea4:	7943      	ldrb	r3, [r0, #5]
 8013ea6:	7982      	ldrb	r2, [r0, #6]
 8013ea8:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
 8013eac:	79c0      	ldrb	r0, [r0, #7]
 8013eae:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8013eb2:	ea41 6000 	orr.w	r0, r1, r0, lsl #24
 8013eb6:	f8cc 0008 	str.w	r0, [ip, #8]
 8013eba:	4770      	bx	lr

08013ebc <hci_ll_set_custom_event_mask>:
 8013ebc:	f646 5134 	movw	r1, #27956	@ 0x6d34
 8013ec0:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8013ec4:	7008      	strb	r0, [r1, #0]
 8013ec6:	4770      	bx	lr

08013ec8 <hci_construct_hw_err_evnt>:
 8013ec8:	b510      	push	{r4, lr}
 8013eca:	f646 5118 	movw	r1, #27928	@ 0x6d18
 8013ece:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8013ed2:	7949      	ldrb	r1, [r1, #5]
 8013ed4:	0609      	lsls	r1, r1, #24
 8013ed6:	bf58      	it	pl
 8013ed8:	bd10      	poppl	{r4, pc}
 8013eda:	4604      	mov	r4, r0
 8013edc:	f647 3044 	movw	r0, #31556	@ 0x7b44
 8013ee0:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8013ee4:	f00d fdaa 	bl	8021a3c <os_mem_pool_alloc>
 8013ee8:	b180      	cbz	r0, 8013f0c <hci_construct_hw_err_evnt+0x44>
 8013eea:	2110      	movs	r1, #16
 8013eec:	7001      	strb	r1, [r0, #0]
 8013eee:	2101      	movs	r1, #1
 8013ef0:	7041      	strb	r1, [r0, #1]
 8013ef2:	f646 5114 	movw	r1, #27924	@ 0x6d14
 8013ef6:	7084      	strb	r4, [r0, #2]
 8013ef8:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8013efc:	680c      	ldr	r4, [r1, #0]
 8013efe:	2103      	movs	r1, #3
 8013f00:	f7ff fec8 	bl	8013c94 <hci_form_hdr>
 8013f04:	4621      	mov	r1, r4
 8013f06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013f0a:	4708      	bx	r1
 8013f0c:	bd10      	pop	{r4, pc}

08013f0e <hci_disconn_cmplt_evnt>:
 8013f0e:	b570      	push	{r4, r5, r6, lr}
 8013f10:	4614      	mov	r4, r2
 8013f12:	f646 5218 	movw	r2, #27928	@ 0x6d18
 8013f16:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8013f1a:	7912      	ldrb	r2, [r2, #4]
 8013f1c:	460d      	mov	r5, r1
 8013f1e:	06d1      	lsls	r1, r2, #27
 8013f20:	bf58      	it	pl
 8013f22:	bd70      	poppl	{r4, r5, r6, pc}
 8013f24:	4606      	mov	r6, r0
 8013f26:	f647 3044 	movw	r0, #31556	@ 0x7b44
 8013f2a:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8013f2e:	f00d fd85 	bl	8021a3c <os_mem_pool_alloc>
 8013f32:	b1a0      	cbz	r0, 8013f5e <hci_disconn_cmplt_evnt+0x50>
 8013f34:	2105      	movs	r1, #5
 8013f36:	7001      	strb	r1, [r0, #0]
 8013f38:	2104      	movs	r1, #4
 8013f3a:	7041      	strb	r1, [r0, #1]
 8013f3c:	0a29      	lsrs	r1, r5, #8
 8013f3e:	7101      	strb	r1, [r0, #4]
 8013f40:	f646 5114 	movw	r1, #27924	@ 0x6d14
 8013f44:	7086      	strb	r6, [r0, #2]
 8013f46:	70c5      	strb	r5, [r0, #3]
 8013f48:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8013f4c:	680d      	ldr	r5, [r1, #0]
 8013f4e:	2106      	movs	r1, #6
 8013f50:	7144      	strb	r4, [r0, #5]
 8013f52:	f7ff fe9f 	bl	8013c94 <hci_form_hdr>
 8013f56:	4629      	mov	r1, r5
 8013f58:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013f5c:	4708      	bx	r1
 8013f5e:	bd70      	pop	{r4, r5, r6, pc}

08013f60 <hci_le_enhanced_conn_cmplt_evnt>:
 8013f60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013f64:	b083      	sub	sp, #12
 8013f66:	f646 5118 	movw	r1, #27928	@ 0x6d18
 8013f6a:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8013f6e:	698a      	ldr	r2, [r1, #24]
 8013f70:	2a00      	cmp	r2, #0
 8013f72:	d058      	beq.n	8014026 <hci_le_enhanced_conn_cmplt_evnt+0xc6>
 8013f74:	4604      	mov	r4, r0
 8013f76:	6908      	ldr	r0, [r1, #16]
 8013f78:	0581      	lsls	r1, r0, #22
 8013f7a:	d42f      	bmi.n	8013fdc <hci_le_enhanced_conn_cmplt_evnt+0x7c>
 8013f7c:	07c0      	lsls	r0, r0, #31
 8013f7e:	d052      	beq.n	8014026 <hci_le_enhanced_conn_cmplt_evnt+0xc6>
 8013f80:	8b20      	ldrh	r0, [r4, #24]
 8013f82:	e9d4 8500 	ldrd	r8, r5, [r4]
 8013f86:	9001      	str	r0, [sp, #4]
 8013f88:	7ee0      	ldrb	r0, [r4, #27]
 8013f8a:	f8b4 9012 	ldrh.w	r9, [r4, #18]
 8013f8e:	9002      	str	r0, [sp, #8]
 8013f90:	f647 3044 	movw	r0, #31556	@ 0x7b44
 8013f94:	7c26      	ldrb	r6, [r4, #16]
 8013f96:	7ea7      	ldrb	r7, [r4, #26]
 8013f98:	f8b4 b014 	ldrh.w	fp, [r4, #20]
 8013f9c:	f8b4 a016 	ldrh.w	sl, [r4, #22]
 8013fa0:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8013fa4:	f00d fd4a 	bl	8021a3c <os_mem_pool_alloc>
 8013fa8:	b3e8      	cbz	r0, 8014026 <hci_le_enhanced_conn_cmplt_evnt+0xc6>
 8013faa:	4604      	mov	r4, r0
 8013fac:	203e      	movs	r0, #62	@ 0x3e
 8013fae:	7020      	strb	r0, [r4, #0]
 8013fb0:	2013      	movs	r0, #19
 8013fb2:	7060      	strb	r0, [r4, #1]
 8013fb4:	2001      	movs	r0, #1
 8013fb6:	70a0      	strb	r0, [r4, #2]
 8013fb8:	ea4f 2019 	mov.w	r0, r9, lsr #8
 8013fbc:	7160      	strb	r0, [r4, #5]
 8013fbe:	2d00      	cmp	r5, #0
 8013fc0:	f104 0008 	add.w	r0, r4, #8
 8013fc4:	f884 8003 	strb.w	r8, [r4, #3]
 8013fc8:	f884 9004 	strb.w	r9, [r4, #4]
 8013fcc:	71a6      	strb	r6, [r4, #6]
 8013fce:	71e7      	strb	r7, [r4, #7]
 8013fd0:	d058      	beq.n	8014084 <hci_le_enhanced_conn_cmplt_evnt+0x124>
 8013fd2:	4629      	mov	r1, r5
 8013fd4:	2206      	movs	r2, #6
 8013fd6:	f010 fab7 	bl	8024548 <ble_memcpy>
 8013fda:	e057      	b.n	801408c <hci_le_enhanced_conn_cmplt_evnt+0x12c>
 8013fdc:	f647 3044 	movw	r0, #31556	@ 0x7b44
 8013fe0:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8013fe4:	f00d fd2a 	bl	8021a3c <os_mem_pool_alloc>
 8013fe8:	b1e8      	cbz	r0, 8014026 <hci_le_enhanced_conn_cmplt_evnt+0xc6>
 8013fea:	4605      	mov	r5, r0
 8013fec:	203e      	movs	r0, #62	@ 0x3e
 8013fee:	7028      	strb	r0, [r5, #0]
 8013ff0:	200a      	movs	r0, #10
 8013ff2:	70a8      	strb	r0, [r5, #2]
 8013ff4:	6820      	ldr	r0, [r4, #0]
 8013ff6:	70e8      	strb	r0, [r5, #3]
 8013ff8:	7ca0      	ldrb	r0, [r4, #18]
 8013ffa:	7128      	strb	r0, [r5, #4]
 8013ffc:	7ce0      	ldrb	r0, [r4, #19]
 8013ffe:	7168      	strb	r0, [r5, #5]
 8014000:	7c20      	ldrb	r0, [r4, #16]
 8014002:	71a8      	strb	r0, [r5, #6]
 8014004:	7ea0      	ldrb	r0, [r4, #26]
 8014006:	71e8      	strb	r0, [r5, #7]
 8014008:	6861      	ldr	r1, [r4, #4]
 801400a:	b121      	cbz	r1, 8014016 <hci_le_enhanced_conn_cmplt_evnt+0xb6>
 801400c:	f105 0008 	add.w	r0, r5, #8
 8014010:	2206      	movs	r2, #6
 8014012:	f010 fa99 	bl	8024548 <ble_memcpy>
 8014016:	68a1      	ldr	r1, [r4, #8]
 8014018:	f105 000e 	add.w	r0, r5, #14
 801401c:	b131      	cbz	r1, 801402c <hci_le_enhanced_conn_cmplt_evnt+0xcc>
 801401e:	2206      	movs	r2, #6
 8014020:	f010 fa92 	bl	8024548 <ble_memcpy>
 8014024:	e006      	b.n	8014034 <hci_le_enhanced_conn_cmplt_evnt+0xd4>
 8014026:	b003      	add	sp, #12
 8014028:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801402c:	2100      	movs	r1, #0
 801402e:	2206      	movs	r2, #6
 8014030:	f010 fada 	bl	80245e8 <ble_memset>
 8014034:	68e1      	ldr	r1, [r4, #12]
 8014036:	f105 0014 	add.w	r0, r5, #20
 801403a:	b119      	cbz	r1, 8014044 <hci_le_enhanced_conn_cmplt_evnt+0xe4>
 801403c:	2206      	movs	r2, #6
 801403e:	f010 fa83 	bl	8024548 <ble_memcpy>
 8014042:	e003      	b.n	801404c <hci_le_enhanced_conn_cmplt_evnt+0xec>
 8014044:	2100      	movs	r1, #0
 8014046:	2206      	movs	r2, #6
 8014048:	f010 face 	bl	80245e8 <ble_memset>
 801404c:	7d20      	ldrb	r0, [r4, #20]
 801404e:	211f      	movs	r1, #31
 8014050:	76a8      	strb	r0, [r5, #26]
 8014052:	7d60      	ldrb	r0, [r4, #21]
 8014054:	76e8      	strb	r0, [r5, #27]
 8014056:	7da0      	ldrb	r0, [r4, #22]
 8014058:	7728      	strb	r0, [r5, #28]
 801405a:	7de0      	ldrb	r0, [r4, #23]
 801405c:	7768      	strb	r0, [r5, #29]
 801405e:	7e20      	ldrb	r0, [r4, #24]
 8014060:	77a8      	strb	r0, [r5, #30]
 8014062:	7e60      	ldrb	r0, [r4, #25]
 8014064:	77e8      	strb	r0, [r5, #31]
 8014066:	7ee0      	ldrb	r0, [r4, #27]
 8014068:	7069      	strb	r1, [r5, #1]
 801406a:	f646 5114 	movw	r1, #27924	@ 0x6d14
 801406e:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8014072:	680c      	ldr	r4, [r1, #0]
 8014074:	f885 0020 	strb.w	r0, [r5, #32]
 8014078:	4628      	mov	r0, r5
 801407a:	2121      	movs	r1, #33	@ 0x21
 801407c:	f7ff fe0a 	bl	8013c94 <hci_form_hdr>
 8014080:	4621      	mov	r1, r4
 8014082:	e01e      	b.n	80140c2 <hci_le_enhanced_conn_cmplt_evnt+0x162>
 8014084:	2100      	movs	r1, #0
 8014086:	2206      	movs	r2, #6
 8014088:	f010 faae 	bl	80245e8 <ble_memset>
 801408c:	ea4f 201b 	mov.w	r0, fp, lsr #8
 8014090:	73e0      	strb	r0, [r4, #15]
 8014092:	ea4f 201a 	mov.w	r0, sl, lsr #8
 8014096:	7460      	strb	r0, [r4, #17]
 8014098:	9801      	ldr	r0, [sp, #4]
 801409a:	7861      	ldrb	r1, [r4, #1]
 801409c:	74a0      	strb	r0, [r4, #18]
 801409e:	0a00      	lsrs	r0, r0, #8
 80140a0:	74e0      	strb	r0, [r4, #19]
 80140a2:	9802      	ldr	r0, [sp, #8]
 80140a4:	3102      	adds	r1, #2
 80140a6:	7520      	strb	r0, [r4, #20]
 80140a8:	f646 5014 	movw	r0, #27924	@ 0x6d14
 80140ac:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80140b0:	6805      	ldr	r5, [r0, #0]
 80140b2:	4620      	mov	r0, r4
 80140b4:	f884 b00e 	strb.w	fp, [r4, #14]
 80140b8:	f884 a010 	strb.w	sl, [r4, #16]
 80140bc:	f7ff fdea 	bl	8013c94 <hci_form_hdr>
 80140c0:	4629      	mov	r1, r5
 80140c2:	b003      	add	sp, #12
 80140c4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80140c8:	4708      	bx	r1

080140ca <hci_read_rmt_ver_info_cmplt_evnt>:
 80140ca:	b5b0      	push	{r4, r5, r7, lr}
 80140cc:	b084      	sub	sp, #16
 80140ce:	9003      	str	r0, [sp, #12]
 80140d0:	f646 5018 	movw	r0, #27928	@ 0x6d18
 80140d4:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80140d8:	7940      	ldrb	r0, [r0, #5]
 80140da:	460d      	mov	r5, r1
 80140dc:	9908      	ldr	r1, [sp, #32]
 80140de:	0700      	lsls	r0, r0, #28
 80140e0:	f88d 200b 	strb.w	r2, [sp, #11]
 80140e4:	f8ad 3008 	strh.w	r3, [sp, #8]
 80140e8:	f8ad 1006 	strh.w	r1, [sp, #6]
 80140ec:	d530      	bpl.n	8014150 <hci_read_rmt_ver_info_cmplt_evnt+0x86>
 80140ee:	f647 3044 	movw	r0, #31556	@ 0x7b44
 80140f2:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80140f6:	f00d fca1 	bl	8021a3c <os_mem_pool_alloc>
 80140fa:	b348      	cbz	r0, 8014150 <hci_read_rmt_ver_info_cmplt_evnt+0x86>
 80140fc:	4604      	mov	r4, r0
 80140fe:	200c      	movs	r0, #12
 8014100:	7020      	strb	r0, [r4, #0]
 8014102:	2008      	movs	r0, #8
 8014104:	7060      	strb	r0, [r4, #1]
 8014106:	1ca0      	adds	r0, r4, #2
 8014108:	a903      	add	r1, sp, #12
 801410a:	2201      	movs	r2, #1
 801410c:	f010 fa1c 	bl	8024548 <ble_memcpy>
 8014110:	0a28      	lsrs	r0, r5, #8
 8014112:	7120      	strb	r0, [r4, #4]
 8014114:	1d60      	adds	r0, r4, #5
 8014116:	f10d 010b 	add.w	r1, sp, #11
 801411a:	2201      	movs	r2, #1
 801411c:	70e5      	strb	r5, [r4, #3]
 801411e:	f010 fa13 	bl	8024548 <ble_memcpy>
 8014122:	1da0      	adds	r0, r4, #6
 8014124:	a902      	add	r1, sp, #8
 8014126:	2202      	movs	r2, #2
 8014128:	f010 fa0e 	bl	8024548 <ble_memcpy>
 801412c:	f104 0008 	add.w	r0, r4, #8
 8014130:	f10d 0106 	add.w	r1, sp, #6
 8014134:	2202      	movs	r2, #2
 8014136:	f010 fa07 	bl	8024548 <ble_memcpy>
 801413a:	f646 5014 	movw	r0, #27924	@ 0x6d14
 801413e:	7861      	ldrb	r1, [r4, #1]
 8014140:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8014144:	6805      	ldr	r5, [r0, #0]
 8014146:	3102      	adds	r1, #2
 8014148:	4620      	mov	r0, r4
 801414a:	f7ff fda3 	bl	8013c94 <hci_form_hdr>
 801414e:	47a8      	blx	r5
 8014150:	b004      	add	sp, #16
 8014152:	bdb0      	pop	{r4, r5, r7, pc}

08014154 <hci_le_read_rmt_used_features_cmplt_evnt>:
 8014154:	b570      	push	{r4, r5, r6, lr}
 8014156:	b082      	sub	sp, #8
 8014158:	460d      	mov	r5, r1
 801415a:	f646 5118 	movw	r1, #27928	@ 0x6d18
 801415e:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8014162:	4614      	mov	r4, r2
 8014164:	698a      	ldr	r2, [r1, #24]
 8014166:	9001      	str	r0, [sp, #4]
 8014168:	f04f 0004 	mov.w	r0, #4
 801416c:	f88d 0003 	strb.w	r0, [sp, #3]
 8014170:	b362      	cbz	r2, 80141cc <hci_le_read_rmt_used_features_cmplt_evnt+0x78>
 8014172:	7c08      	ldrb	r0, [r1, #16]
 8014174:	0700      	lsls	r0, r0, #28
 8014176:	d529      	bpl.n	80141cc <hci_le_read_rmt_used_features_cmplt_evnt+0x78>
 8014178:	f647 3044 	movw	r0, #31556	@ 0x7b44
 801417c:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8014180:	f00d fc5c 	bl	8021a3c <os_mem_pool_alloc>
 8014184:	b310      	cbz	r0, 80141cc <hci_le_read_rmt_used_features_cmplt_evnt+0x78>
 8014186:	4606      	mov	r6, r0
 8014188:	203e      	movs	r0, #62	@ 0x3e
 801418a:	7030      	strb	r0, [r6, #0]
 801418c:	200c      	movs	r0, #12
 801418e:	7070      	strb	r0, [r6, #1]
 8014190:	1cb0      	adds	r0, r6, #2
 8014192:	f10d 0103 	add.w	r1, sp, #3
 8014196:	2201      	movs	r2, #1
 8014198:	f010 f9d6 	bl	8024548 <ble_memcpy>
 801419c:	1cf0      	adds	r0, r6, #3
 801419e:	a901      	add	r1, sp, #4
 80141a0:	2201      	movs	r2, #1
 80141a2:	f010 f9d1 	bl	8024548 <ble_memcpy>
 80141a6:	0a28      	lsrs	r0, r5, #8
 80141a8:	7170      	strb	r0, [r6, #5]
 80141aa:	1db0      	adds	r0, r6, #6
 80141ac:	4621      	mov	r1, r4
 80141ae:	2208      	movs	r2, #8
 80141b0:	7135      	strb	r5, [r6, #4]
 80141b2:	f010 f9c9 	bl	8024548 <ble_memcpy>
 80141b6:	f646 5014 	movw	r0, #27924	@ 0x6d14
 80141ba:	7871      	ldrb	r1, [r6, #1]
 80141bc:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80141c0:	6804      	ldr	r4, [r0, #0]
 80141c2:	3102      	adds	r1, #2
 80141c4:	4630      	mov	r0, r6
 80141c6:	f7ff fd65 	bl	8013c94 <hci_form_hdr>
 80141ca:	47a0      	blx	r4
 80141cc:	b002      	add	sp, #8
 80141ce:	bd70      	pop	{r4, r5, r6, pc}

080141d0 <hci_le_data_buff_ovrflw_event>:
 80141d0:	b510      	push	{r4, lr}
 80141d2:	f646 5118 	movw	r1, #27928	@ 0x6d18
 80141d6:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 80141da:	79c9      	ldrb	r1, [r1, #7]
 80141dc:	0789      	lsls	r1, r1, #30
 80141de:	bf58      	it	pl
 80141e0:	bd10      	poppl	{r4, pc}
 80141e2:	4604      	mov	r4, r0
 80141e4:	f647 3044 	movw	r0, #31556	@ 0x7b44
 80141e8:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80141ec:	f00d fc26 	bl	8021a3c <os_mem_pool_alloc>
 80141f0:	b180      	cbz	r0, 8014214 <hci_le_data_buff_ovrflw_event+0x44>
 80141f2:	211a      	movs	r1, #26
 80141f4:	7001      	strb	r1, [r0, #0]
 80141f6:	2101      	movs	r1, #1
 80141f8:	7041      	strb	r1, [r0, #1]
 80141fa:	f646 5114 	movw	r1, #27924	@ 0x6d14
 80141fe:	7084      	strb	r4, [r0, #2]
 8014200:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8014204:	680c      	ldr	r4, [r1, #0]
 8014206:	2103      	movs	r1, #3
 8014208:	f7ff fd44 	bl	8013c94 <hci_form_hdr>
 801420c:	4621      	mov	r1, r4
 801420e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014212:	4708      	bx	r1
 8014214:	bd10      	pop	{r4, pc}

08014216 <hci_send_acl_data_from_cntrlr_to_host>:
 8014216:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014218:	b081      	sub	sp, #4
 801421a:	4605      	mov	r5, r0
 801421c:	7b88      	ldrb	r0, [r1, #14]
 801421e:	460c      	mov	r4, r1
 8014220:	07c0      	lsls	r0, r0, #31
 8014222:	8948      	ldrh	r0, [r1, #10]
 8014224:	f44f 5700 	mov.w	r7, #8192	@ 0x2000
 8014228:	fab0 f080 	clz	r0, r0
 801422c:	bf08      	it	eq
 801422e:	f44f 5780 	moveq.w	r7, #4096	@ 0x1000
 8014232:	0940      	lsrs	r0, r0, #5
 8014234:	2101      	movs	r1, #1
 8014236:	f405 6670 	and.w	r6, r5, #3840	@ 0xf00
 801423a:	f00b faf2 	bl	801f822 <bsp_assert>
 801423e:	6820      	ldr	r0, [r4, #0]
 8014240:	8961      	ldrh	r1, [r4, #10]
 8014242:	19ba      	adds	r2, r7, r6
 8014244:	5445      	strb	r5, [r0, r1]
 8014246:	6820      	ldr	r0, [r4, #0]
 8014248:	8961      	ldrh	r1, [r4, #10]
 801424a:	0a12      	lsrs	r2, r2, #8
 801424c:	4408      	add	r0, r1
 801424e:	7042      	strb	r2, [r0, #1]
 8014250:	7b20      	ldrb	r0, [r4, #12]
 8014252:	6821      	ldr	r1, [r4, #0]
 8014254:	8962      	ldrh	r2, [r4, #10]
 8014256:	3804      	subs	r0, #4
 8014258:	4411      	add	r1, r2
 801425a:	7088      	strb	r0, [r1, #2]
 801425c:	89a0      	ldrh	r0, [r4, #12]
 801425e:	6821      	ldr	r1, [r4, #0]
 8014260:	8962      	ldrh	r2, [r4, #10]
 8014262:	3804      	subs	r0, #4
 8014264:	0a00      	lsrs	r0, r0, #8
 8014266:	4411      	add	r1, r2
 8014268:	70c8      	strb	r0, [r1, #3]
 801426a:	f646 5014 	movw	r0, #27924	@ 0x6d14
 801426e:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8014272:	2110      	movs	r1, #16
 8014274:	6802      	ldr	r2, [r0, #0]
 8014276:	4620      	mov	r0, r4
 8014278:	73a1      	strb	r1, [r4, #14]
 801427a:	b001      	add	sp, #4
 801427c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8014280:	4710      	bx	r2
	...

08014284 <hci_num_of_cmpltd_pckts_cmplt_evnt>:
 8014284:	b570      	push	{r4, r5, r6, lr}
 8014286:	4606      	mov	r6, r0
 8014288:	f647 3044 	movw	r0, #31556	@ 0x7b44
 801428c:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8014290:	4614      	mov	r4, r2
 8014292:	460d      	mov	r5, r1
 8014294:	f00d fbd2 	bl	8021a3c <os_mem_pool_alloc>
 8014298:	b380      	cbz	r0, 80142fc <hci_num_of_cmpltd_pckts_cmplt_evnt+0x78>
 801429a:	2113      	movs	r1, #19
 801429c:	7001      	strb	r1, [r0, #0]
 801429e:	00b1      	lsls	r1, r6, #2
 80142a0:	3101      	adds	r1, #1
 80142a2:	7041      	strb	r1, [r0, #1]
 80142a4:	7086      	strb	r6, [r0, #2]
 80142a6:	b1e6      	cbz	r6, 80142e2 <hci_num_of_cmpltd_pckts_cmplt_evnt+0x5e>
 80142a8:	2102      	movs	r1, #2
 80142aa:	eb01 0146 	add.w	r1, r1, r6, lsl #1
 80142ae:	ea4f 0e46 	mov.w	lr, r6, lsl #1
 80142b2:	b2c9      	uxtb	r1, r1
 80142b4:	eb00 0c01 	add.w	ip, r0, r1
 80142b8:	2300      	movs	r3, #0
 80142ba:	bf00      	nop
 80142bc:	5ce9      	ldrb	r1, [r5, r3]
 80142be:	18c2      	adds	r2, r0, r3
 80142c0:	18ee      	adds	r6, r5, r3
 80142c2:	70d1      	strb	r1, [r2, #3]
 80142c4:	7871      	ldrb	r1, [r6, #1]
 80142c6:	eb0c 0603 	add.w	r6, ip, r3
 80142ca:	f001 010f 	and.w	r1, r1, #15
 80142ce:	7111      	strb	r1, [r2, #4]
 80142d0:	5ce2      	ldrb	r2, [r4, r3]
 80142d2:	18e1      	adds	r1, r4, r3
 80142d4:	7072      	strb	r2, [r6, #1]
 80142d6:	7849      	ldrb	r1, [r1, #1]
 80142d8:	3302      	adds	r3, #2
 80142da:	459e      	cmp	lr, r3
 80142dc:	70b1      	strb	r1, [r6, #2]
 80142de:	d1ed      	bne.n	80142bc <hci_num_of_cmpltd_pckts_cmplt_evnt+0x38>
 80142e0:	7841      	ldrb	r1, [r0, #1]
 80142e2:	f646 5214 	movw	r2, #27924	@ 0x6d14
 80142e6:	b2c9      	uxtb	r1, r1
 80142e8:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 80142ec:	6814      	ldr	r4, [r2, #0]
 80142ee:	3102      	adds	r1, #2
 80142f0:	f7ff fcd0 	bl	8013c94 <hci_form_hdr>
 80142f4:	4621      	mov	r1, r4
 80142f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80142fa:	4708      	bx	r1
 80142fc:	bd70      	pop	{r4, r5, r6, pc}

080142fe <hci_send_le_adv_report_pkt>:
 80142fe:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014302:	b081      	sub	sp, #4
 8014304:	f646 5218 	movw	r2, #27928	@ 0x6d18
 8014308:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 801430c:	6993      	ldr	r3, [r2, #24]
 801430e:	2b00      	cmp	r3, #0
 8014310:	d06b      	beq.n	80143ea <hci_send_le_adv_report_pkt+0xec>
 8014312:	4604      	mov	r4, r0
 8014314:	7c10      	ldrb	r0, [r2, #16]
 8014316:	0780      	lsls	r0, r0, #30
 8014318:	d567      	bpl.n	80143ea <hci_send_le_adv_report_pkt+0xec>
 801431a:	f647 3044 	movw	r0, #31556	@ 0x7b44
 801431e:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8014322:	460e      	mov	r6, r1
 8014324:	f00d fb8a 	bl	8021a3c <os_mem_pool_alloc>
 8014328:	2800      	cmp	r0, #0
 801432a:	d05e      	beq.n	80143ea <hci_send_le_adv_report_pkt+0xec>
 801432c:	f8b4 9014 	ldrh.w	r9, [r4, #20]
 8014330:	4605      	mov	r5, r0
 8014332:	223e      	movs	r2, #62	@ 0x3e
 8014334:	68a0      	ldr	r0, [r4, #8]
 8014336:	8a61      	ldrh	r1, [r4, #18]
 8014338:	702a      	strb	r2, [r5, #0]
 801433a:	f109 020c 	add.w	r2, r9, #12
 801433e:	706a      	strb	r2, [r5, #1]
 8014340:	2202      	movs	r2, #2
 8014342:	70aa      	strb	r2, [r5, #2]
 8014344:	70ee      	strb	r6, [r5, #3]
 8014346:	7e62      	ldrb	r2, [r4, #25]
 8014348:	eb00 0801 	add.w	r8, r0, r1
 801434c:	712a      	strb	r2, [r5, #4]
 801434e:	7ea0      	ldrb	r0, [r4, #26]
 8014350:	4621      	mov	r1, r4
 8014352:	7168      	strb	r0, [r5, #5]
 8014354:	1da8      	adds	r0, r5, #6
 8014356:	2206      	movs	r2, #6
 8014358:	fa5f f789 	uxtb.w	r7, r9
 801435c:	f010 f8f4 	bl	8024548 <ble_memcpy>
 8014360:	f105 000d 	add.w	r0, r5, #13
 8014364:	4641      	mov	r1, r8
 8014366:	463a      	mov	r2, r7
 8014368:	f885 900c 	strb.w	r9, [r5, #12]
 801436c:	f010 f8ec 	bl	8024548 <ble_memcpy>
 8014370:	7e21      	ldrb	r1, [r4, #24]
 8014372:	1978      	adds	r0, r7, r5
 8014374:	2e02      	cmp	r6, #2
 8014376:	7341      	strb	r1, [r0, #13]
 8014378:	d128      	bne.n	80143cc <hci_send_le_adv_report_pkt+0xce>
 801437a:	f109 0110 	add.w	r1, r9, #16
 801437e:	b2ca      	uxtb	r2, r1
 8014380:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8014382:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 8014384:	8e27      	ldrh	r7, [r4, #48]	@ 0x30
 8014386:	eb01 0803 	add.w	r8, r1, r3
 801438a:	eb09 0107 	add.w	r1, r9, r7
 801438e:	3116      	adds	r1, #22
 8014390:	7069      	strb	r1, [r5, #1]
 8014392:	f894 3035 	ldrb.w	r3, [r4, #53]	@ 0x35
 8014396:	18ae      	adds	r6, r5, r2
 8014398:	7383      	strb	r3, [r0, #14]
 801439a:	f894 3036 	ldrb.w	r3, [r4, #54]	@ 0x36
 801439e:	f104 011c 	add.w	r1, r4, #28
 80143a2:	73c3      	strb	r3, [r0, #15]
 80143a4:	4630      	mov	r0, r6
 80143a6:	2206      	movs	r2, #6
 80143a8:	b2ff      	uxtb	r7, r7
 80143aa:	f010 f8cd 	bl	8024548 <ble_memcpy>
 80143ae:	f894 0030 	ldrb.w	r0, [r4, #48]	@ 0x30
 80143b2:	4641      	mov	r1, r8
 80143b4:	71b0      	strb	r0, [r6, #6]
 80143b6:	f109 0017 	add.w	r0, r9, #23
 80143ba:	b2c6      	uxtb	r6, r0
 80143bc:	19a8      	adds	r0, r5, r6
 80143be:	463a      	mov	r2, r7
 80143c0:	f010 f8c2 	bl	8024548 <ble_memcpy>
 80143c4:	f894 0034 	ldrb.w	r0, [r4, #52]	@ 0x34
 80143c8:	19b9      	adds	r1, r7, r6
 80143ca:	5468      	strb	r0, [r5, r1]
 80143cc:	f646 5014 	movw	r0, #27924	@ 0x6d14
 80143d0:	7869      	ldrb	r1, [r5, #1]
 80143d2:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80143d6:	6804      	ldr	r4, [r0, #0]
 80143d8:	3102      	adds	r1, #2
 80143da:	4628      	mov	r0, r5
 80143dc:	f7ff fc5a 	bl	8013c94 <hci_form_hdr>
 80143e0:	4621      	mov	r1, r4
 80143e2:	b001      	add	sp, #4
 80143e4:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80143e8:	4708      	bx	r1
 80143ea:	b001      	add	sp, #4
 80143ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080143f0 <hci_send_le_dir_adv_report_pkt>:
 80143f0:	b5b0      	push	{r4, r5, r7, lr}
 80143f2:	f646 5118 	movw	r1, #27928	@ 0x6d18
 80143f6:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 80143fa:	698a      	ldr	r2, [r1, #24]
 80143fc:	b3aa      	cbz	r2, 801446a <hci_send_le_dir_adv_report_pkt+0x7a>
 80143fe:	4604      	mov	r4, r0
 8014400:	7c48      	ldrb	r0, [r1, #17]
 8014402:	0740      	lsls	r0, r0, #29
 8014404:	d531      	bpl.n	801446a <hci_send_le_dir_adv_report_pkt+0x7a>
 8014406:	f647 3044 	movw	r0, #31556	@ 0x7b44
 801440a:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801440e:	f00d fb15 	bl	8021a3c <os_mem_pool_alloc>
 8014412:	b350      	cbz	r0, 801446a <hci_send_le_dir_adv_report_pkt+0x7a>
 8014414:	4605      	mov	r5, r0
 8014416:	203e      	movs	r0, #62	@ 0x3e
 8014418:	7028      	strb	r0, [r5, #0]
 801441a:	2012      	movs	r0, #18
 801441c:	7068      	strb	r0, [r5, #1]
 801441e:	200b      	movs	r0, #11
 8014420:	70a8      	strb	r0, [r5, #2]
 8014422:	2001      	movs	r0, #1
 8014424:	70e8      	strb	r0, [r5, #3]
 8014426:	7c60      	ldrb	r0, [r4, #17]
 8014428:	4621      	mov	r1, r4
 801442a:	7128      	strb	r0, [r5, #4]
 801442c:	7ca0      	ldrb	r0, [r4, #18]
 801442e:	2206      	movs	r2, #6
 8014430:	7168      	strb	r0, [r5, #5]
 8014432:	1da8      	adds	r0, r5, #6
 8014434:	f010 f888 	bl	8024548 <ble_memcpy>
 8014438:	7ce0      	ldrb	r0, [r4, #19]
 801443a:	f104 0108 	add.w	r1, r4, #8
 801443e:	7328      	strb	r0, [r5, #12]
 8014440:	f105 000d 	add.w	r0, r5, #13
 8014444:	2206      	movs	r2, #6
 8014446:	f010 f87f 	bl	8024548 <ble_memcpy>
 801444a:	7c20      	ldrb	r0, [r4, #16]
 801444c:	7869      	ldrb	r1, [r5, #1]
 801444e:	74e8      	strb	r0, [r5, #19]
 8014450:	f646 5014 	movw	r0, #27924	@ 0x6d14
 8014454:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8014458:	6804      	ldr	r4, [r0, #0]
 801445a:	3102      	adds	r1, #2
 801445c:	4628      	mov	r0, r5
 801445e:	f7ff fc19 	bl	8013c94 <hci_form_hdr>
 8014462:	4621      	mov	r1, r4
 8014464:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8014468:	4708      	bx	r1
 801446a:	bdb0      	pop	{r4, r5, r7, pc}

0801446c <hci_le_conn_update_cmplt_event>:
 801446c:	b5b0      	push	{r4, r5, r7, lr}
 801446e:	b084      	sub	sp, #16
 8014470:	9003      	str	r0, [sp, #12]
 8014472:	2003      	movs	r0, #3
 8014474:	460d      	mov	r5, r1
 8014476:	9908      	ldr	r1, [sp, #32]
 8014478:	f88d 0005 	strb.w	r0, [sp, #5]
 801447c:	f647 3044 	movw	r0, #31556	@ 0x7b44
 8014480:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8014484:	f8ad 200a 	strh.w	r2, [sp, #10]
 8014488:	f8ad 3008 	strh.w	r3, [sp, #8]
 801448c:	f8ad 1006 	strh.w	r1, [sp, #6]
 8014490:	f00d fad4 	bl	8021a3c <os_mem_pool_alloc>
 8014494:	b380      	cbz	r0, 80144f8 <hci_le_conn_update_cmplt_event+0x8c>
 8014496:	4604      	mov	r4, r0
 8014498:	203e      	movs	r0, #62	@ 0x3e
 801449a:	7020      	strb	r0, [r4, #0]
 801449c:	200a      	movs	r0, #10
 801449e:	7060      	strb	r0, [r4, #1]
 80144a0:	1ca0      	adds	r0, r4, #2
 80144a2:	f10d 0105 	add.w	r1, sp, #5
 80144a6:	2201      	movs	r2, #1
 80144a8:	f010 f84e 	bl	8024548 <ble_memcpy>
 80144ac:	1ce0      	adds	r0, r4, #3
 80144ae:	a903      	add	r1, sp, #12
 80144b0:	2201      	movs	r2, #1
 80144b2:	f010 f849 	bl	8024548 <ble_memcpy>
 80144b6:	0a28      	lsrs	r0, r5, #8
 80144b8:	7160      	strb	r0, [r4, #5]
 80144ba:	1da0      	adds	r0, r4, #6
 80144bc:	f10d 010a 	add.w	r1, sp, #10
 80144c0:	2202      	movs	r2, #2
 80144c2:	7125      	strb	r5, [r4, #4]
 80144c4:	f010 f840 	bl	8024548 <ble_memcpy>
 80144c8:	f104 0008 	add.w	r0, r4, #8
 80144cc:	a902      	add	r1, sp, #8
 80144ce:	2202      	movs	r2, #2
 80144d0:	f010 f83a 	bl	8024548 <ble_memcpy>
 80144d4:	f104 000a 	add.w	r0, r4, #10
 80144d8:	f10d 0106 	add.w	r1, sp, #6
 80144dc:	2202      	movs	r2, #2
 80144de:	f010 f833 	bl	8024548 <ble_memcpy>
 80144e2:	f646 5014 	movw	r0, #27924	@ 0x6d14
 80144e6:	7861      	ldrb	r1, [r4, #1]
 80144e8:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80144ec:	6805      	ldr	r5, [r0, #0]
 80144ee:	3102      	adds	r1, #2
 80144f0:	4620      	mov	r0, r4
 80144f2:	f7ff fbcf 	bl	8013c94 <hci_form_hdr>
 80144f6:	47a8      	blx	r5
 80144f8:	b004      	add	sp, #16
 80144fa:	bdb0      	pop	{r4, r5, r7, pc}

080144fc <hci_le_rem_conn_param_req_event>:
 80144fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80144fe:	b081      	sub	sp, #4
 8014500:	4615      	mov	r5, r2
 8014502:	f646 5218 	movw	r2, #27928	@ 0x6d18
 8014506:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 801450a:	461c      	mov	r4, r3
 801450c:	6993      	ldr	r3, [r2, #24]
 801450e:	b11b      	cbz	r3, 8014518 <hci_le_rem_conn_param_req_event+0x1c>
 8014510:	4607      	mov	r7, r0
 8014512:	7c10      	ldrb	r0, [r2, #16]
 8014514:	0680      	lsls	r0, r0, #26
 8014516:	d401      	bmi.n	801451c <hci_le_rem_conn_param_req_event+0x20>
 8014518:	201a      	movs	r0, #26
 801451a:	e02c      	b.n	8014576 <hci_le_rem_conn_param_req_event+0x7a>
 801451c:	f647 3044 	movw	r0, #31556	@ 0x7b44
 8014520:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8014524:	460e      	mov	r6, r1
 8014526:	f00d fa89 	bl	8021a3c <os_mem_pool_alloc>
 801452a:	b300      	cbz	r0, 801456e <hci_le_rem_conn_param_req_event+0x72>
 801452c:	223e      	movs	r2, #62	@ 0x3e
 801452e:	7002      	strb	r2, [r0, #0]
 8014530:	220b      	movs	r2, #11
 8014532:	7042      	strb	r2, [r0, #1]
 8014534:	2206      	movs	r2, #6
 8014536:	7082      	strb	r2, [r0, #2]
 8014538:	0a3a      	lsrs	r2, r7, #8
 801453a:	7102      	strb	r2, [r0, #4]
 801453c:	0a32      	lsrs	r2, r6, #8
 801453e:	7182      	strb	r2, [r0, #6]
 8014540:	0a2a      	lsrs	r2, r5, #8
 8014542:	9906      	ldr	r1, [sp, #24]
 8014544:	7202      	strb	r2, [r0, #8]
 8014546:	0a22      	lsrs	r2, r4, #8
 8014548:	7282      	strb	r2, [r0, #10]
 801454a:	f646 5214 	movw	r2, #27924	@ 0x6d14
 801454e:	70c7      	strb	r7, [r0, #3]
 8014550:	72c1      	strb	r1, [r0, #11]
 8014552:	0a09      	lsrs	r1, r1, #8
 8014554:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8014558:	7244      	strb	r4, [r0, #9]
 801455a:	6814      	ldr	r4, [r2, #0]
 801455c:	7301      	strb	r1, [r0, #12]
 801455e:	210d      	movs	r1, #13
 8014560:	7146      	strb	r6, [r0, #5]
 8014562:	71c5      	strb	r5, [r0, #7]
 8014564:	f7ff fb96 	bl	8013c94 <hci_form_hdr>
 8014568:	47a0      	blx	r4
 801456a:	2000      	movs	r0, #0
 801456c:	e003      	b.n	8014576 <hci_le_rem_conn_param_req_event+0x7a>
 801456e:	2042      	movs	r0, #66	@ 0x42
 8014570:	f00b f9a2 	bl	801f8b8 <bsp_debug_gpio_toggle>
 8014574:	2007      	movs	r0, #7
 8014576:	b001      	add	sp, #4
 8014578:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801457a <hci_le_data_length_chg_event>:
 801457a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801457e:	b081      	sub	sp, #4
 8014580:	460e      	mov	r6, r1
 8014582:	f646 5118 	movw	r1, #27928	@ 0x6d18
 8014586:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 801458a:	4615      	mov	r5, r2
 801458c:	698a      	ldr	r2, [r1, #24]
 801458e:	4604      	mov	r4, r0
 8014590:	f04f 0007 	mov.w	r0, #7
 8014594:	f88d 0003 	strb.w	r0, [sp, #3]
 8014598:	b3b2      	cbz	r2, 8014608 <hci_le_data_length_chg_event+0x8e>
 801459a:	6908      	ldr	r0, [r1, #16]
 801459c:	f010 0040 	ands.w	r0, r0, #64	@ 0x40
 80145a0:	d032      	beq.n	8014608 <hci_le_data_length_chg_event+0x8e>
 80145a2:	f647 3044 	movw	r0, #31556	@ 0x7b44
 80145a6:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80145aa:	4698      	mov	r8, r3
 80145ac:	f00d fa46 	bl	8021a3c <os_mem_pool_alloc>
 80145b0:	b350      	cbz	r0, 8014608 <hci_le_data_length_chg_event+0x8e>
 80145b2:	4607      	mov	r7, r0
 80145b4:	203e      	movs	r0, #62	@ 0x3e
 80145b6:	7038      	strb	r0, [r7, #0]
 80145b8:	200b      	movs	r0, #11
 80145ba:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80145be:	7078      	strb	r0, [r7, #1]
 80145c0:	1cb8      	adds	r0, r7, #2
 80145c2:	f10d 0103 	add.w	r1, sp, #3
 80145c6:	2201      	movs	r2, #1
 80145c8:	f00f ffbe 	bl	8024548 <ble_memcpy>
 80145cc:	0a20      	lsrs	r0, r4, #8
 80145ce:	7138      	strb	r0, [r7, #4]
 80145d0:	0a30      	lsrs	r0, r6, #8
 80145d2:	71b8      	strb	r0, [r7, #6]
 80145d4:	0a28      	lsrs	r0, r5, #8
 80145d6:	7238      	strb	r0, [r7, #8]
 80145d8:	ea4f 2018 	mov.w	r0, r8, lsr #8
 80145dc:	72b8      	strb	r0, [r7, #10]
 80145de:	ea4f 2019 	mov.w	r0, r9, lsr #8
 80145e2:	7338      	strb	r0, [r7, #12]
 80145e4:	f646 5014 	movw	r0, #27924	@ 0x6d14
 80145e8:	7879      	ldrb	r1, [r7, #1]
 80145ea:	70fc      	strb	r4, [r7, #3]
 80145ec:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80145f0:	6804      	ldr	r4, [r0, #0]
 80145f2:	3102      	adds	r1, #2
 80145f4:	4638      	mov	r0, r7
 80145f6:	717e      	strb	r6, [r7, #5]
 80145f8:	71fd      	strb	r5, [r7, #7]
 80145fa:	f887 8009 	strb.w	r8, [r7, #9]
 80145fe:	f887 900b 	strb.w	r9, [r7, #11]
 8014602:	f7ff fb47 	bl	8013c94 <hci_form_hdr>
 8014606:	47a0      	blx	r4
 8014608:	b001      	add	sp, #4
 801460a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0801460e <hci_le_phy_update_complete_event>:
 801460e:	b5b0      	push	{r4, r5, r7, lr}
 8014610:	b082      	sub	sp, #8
 8014612:	9001      	str	r0, [sp, #4]
 8014614:	f646 5018 	movw	r0, #27928	@ 0x6d18
 8014618:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801461c:	460d      	mov	r5, r1
 801461e:	6981      	ldr	r1, [r0, #24]
 8014620:	f88d 2003 	strb.w	r2, [sp, #3]
 8014624:	220c      	movs	r2, #12
 8014626:	f88d 3002 	strb.w	r3, [sp, #2]
 801462a:	f88d 2001 	strb.w	r2, [sp, #1]
 801462e:	b3a1      	cbz	r1, 801469a <hci_le_phy_update_complete_event+0x8c>
 8014630:	6900      	ldr	r0, [r0, #16]
 8014632:	f410 6000 	ands.w	r0, r0, #2048	@ 0x800
 8014636:	d030      	beq.n	801469a <hci_le_phy_update_complete_event+0x8c>
 8014638:	f647 3044 	movw	r0, #31556	@ 0x7b44
 801463c:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8014640:	f00d f9fc 	bl	8021a3c <os_mem_pool_alloc>
 8014644:	b348      	cbz	r0, 801469a <hci_le_phy_update_complete_event+0x8c>
 8014646:	4604      	mov	r4, r0
 8014648:	203e      	movs	r0, #62	@ 0x3e
 801464a:	7020      	strb	r0, [r4, #0]
 801464c:	2006      	movs	r0, #6
 801464e:	7060      	strb	r0, [r4, #1]
 8014650:	1ca0      	adds	r0, r4, #2
 8014652:	f10d 0101 	add.w	r1, sp, #1
 8014656:	2201      	movs	r2, #1
 8014658:	f00f ff76 	bl	8024548 <ble_memcpy>
 801465c:	1ce0      	adds	r0, r4, #3
 801465e:	a901      	add	r1, sp, #4
 8014660:	2201      	movs	r2, #1
 8014662:	f00f ff71 	bl	8024548 <ble_memcpy>
 8014666:	0a28      	lsrs	r0, r5, #8
 8014668:	7160      	strb	r0, [r4, #5]
 801466a:	1da0      	adds	r0, r4, #6
 801466c:	f10d 0103 	add.w	r1, sp, #3
 8014670:	2201      	movs	r2, #1
 8014672:	7125      	strb	r5, [r4, #4]
 8014674:	f00f ff68 	bl	8024548 <ble_memcpy>
 8014678:	1de0      	adds	r0, r4, #7
 801467a:	f10d 0102 	add.w	r1, sp, #2
 801467e:	2201      	movs	r2, #1
 8014680:	f00f ff62 	bl	8024548 <ble_memcpy>
 8014684:	f646 5014 	movw	r0, #27924	@ 0x6d14
 8014688:	7861      	ldrb	r1, [r4, #1]
 801468a:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801468e:	6805      	ldr	r5, [r0, #0]
 8014690:	3102      	adds	r1, #2
 8014692:	4620      	mov	r0, r4
 8014694:	f7ff fafe 	bl	8013c94 <hci_form_hdr>
 8014698:	47a8      	blx	r5
 801469a:	b002      	add	sp, #8
 801469c:	bdb0      	pop	{r4, r5, r7, pc}

0801469e <hci_encrpt_chng_evnt>:
 801469e:	b570      	push	{r4, r5, r6, lr}
 80146a0:	4614      	mov	r4, r2
 80146a2:	f646 5218 	movw	r2, #27928	@ 0x6d18
 80146a6:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 80146aa:	7912      	ldrb	r2, [r2, #4]
 80146ac:	460d      	mov	r5, r1
 80146ae:	0611      	lsls	r1, r2, #24
 80146b0:	bf58      	it	pl
 80146b2:	bd70      	poppl	{r4, r5, r6, pc}
 80146b4:	4606      	mov	r6, r0
 80146b6:	f647 3044 	movw	r0, #31556	@ 0x7b44
 80146ba:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80146be:	f00d f9bd 	bl	8021a3c <os_mem_pool_alloc>
 80146c2:	b1a0      	cbz	r0, 80146ee <hci_encrpt_chng_evnt+0x50>
 80146c4:	2108      	movs	r1, #8
 80146c6:	7001      	strb	r1, [r0, #0]
 80146c8:	2104      	movs	r1, #4
 80146ca:	7041      	strb	r1, [r0, #1]
 80146cc:	0a29      	lsrs	r1, r5, #8
 80146ce:	7101      	strb	r1, [r0, #4]
 80146d0:	f646 5114 	movw	r1, #27924	@ 0x6d14
 80146d4:	7086      	strb	r6, [r0, #2]
 80146d6:	70c5      	strb	r5, [r0, #3]
 80146d8:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 80146dc:	680d      	ldr	r5, [r1, #0]
 80146de:	2106      	movs	r1, #6
 80146e0:	7144      	strb	r4, [r0, #5]
 80146e2:	f7ff fad7 	bl	8013c94 <hci_form_hdr>
 80146e6:	4629      	mov	r1, r5
 80146e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80146ec:	4708      	bx	r1
 80146ee:	bd70      	pop	{r4, r5, r6, pc}

080146f0 <hci_encrpt_key_rfrsh_cmplt_evnt>:
 80146f0:	b5b0      	push	{r4, r5, r7, lr}
 80146f2:	f646 5218 	movw	r2, #27928	@ 0x6d18
 80146f6:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 80146fa:	7952      	ldrb	r2, [r2, #5]
 80146fc:	460c      	mov	r4, r1
 80146fe:	0611      	lsls	r1, r2, #24
 8014700:	bf58      	it	pl
 8014702:	bdb0      	poppl	{r4, r5, r7, pc}
 8014704:	4605      	mov	r5, r0
 8014706:	f647 3044 	movw	r0, #31556	@ 0x7b44
 801470a:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801470e:	f00d f995 	bl	8021a3c <os_mem_pool_alloc>
 8014712:	b198      	cbz	r0, 801473c <hci_encrpt_key_rfrsh_cmplt_evnt+0x4c>
 8014714:	2130      	movs	r1, #48	@ 0x30
 8014716:	7001      	strb	r1, [r0, #0]
 8014718:	2103      	movs	r1, #3
 801471a:	f646 5214 	movw	r2, #27924	@ 0x6d14
 801471e:	7041      	strb	r1, [r0, #1]
 8014720:	7085      	strb	r5, [r0, #2]
 8014722:	70c4      	strb	r4, [r0, #3]
 8014724:	0a21      	lsrs	r1, r4, #8
 8014726:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 801472a:	6814      	ldr	r4, [r2, #0]
 801472c:	7101      	strb	r1, [r0, #4]
 801472e:	2105      	movs	r1, #5
 8014730:	f7ff fab0 	bl	8013c94 <hci_form_hdr>
 8014734:	4621      	mov	r1, r4
 8014736:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 801473a:	4708      	bx	r1
 801473c:	bdb0      	pop	{r4, r5, r7, pc}

0801473e <hci_authn_pyld_tout_exprd_evnt>:
 801473e:	b510      	push	{r4, lr}
 8014740:	f646 5118 	movw	r1, #27928	@ 0x6d18
 8014744:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8014748:	7b89      	ldrb	r1, [r1, #14]
 801474a:	0609      	lsls	r1, r1, #24
 801474c:	bf58      	it	pl
 801474e:	bd10      	poppl	{r4, pc}
 8014750:	4604      	mov	r4, r0
 8014752:	f647 3044 	movw	r0, #31556	@ 0x7b44
 8014756:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801475a:	f00d f96f 	bl	8021a3c <os_mem_pool_alloc>
 801475e:	b190      	cbz	r0, 8014786 <hci_authn_pyld_tout_exprd_evnt+0x48>
 8014760:	2157      	movs	r1, #87	@ 0x57
 8014762:	7001      	strb	r1, [r0, #0]
 8014764:	2102      	movs	r1, #2
 8014766:	7041      	strb	r1, [r0, #1]
 8014768:	0a21      	lsrs	r1, r4, #8
 801476a:	70c1      	strb	r1, [r0, #3]
 801476c:	f646 5114 	movw	r1, #27924	@ 0x6d14
 8014770:	7084      	strb	r4, [r0, #2]
 8014772:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8014776:	680c      	ldr	r4, [r1, #0]
 8014778:	2104      	movs	r1, #4
 801477a:	f7ff fa8b 	bl	8013c94 <hci_form_hdr>
 801477e:	4621      	mov	r1, r4
 8014780:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014784:	4708      	bx	r1
 8014786:	bd10      	pop	{r4, pc}

08014788 <hci_le_long_trm_key_rqst_evnt>:
 8014788:	b5f0      	push	{r4, r5, r6, r7, lr}
 801478a:	b081      	sub	sp, #4
 801478c:	4614      	mov	r4, r2
 801478e:	f646 5218 	movw	r2, #27928	@ 0x6d18
 8014792:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8014796:	6993      	ldr	r3, [r2, #24]
 8014798:	b353      	cbz	r3, 80147f0 <hci_le_long_trm_key_rqst_evnt+0x68>
 801479a:	4607      	mov	r7, r0
 801479c:	7c10      	ldrb	r0, [r2, #16]
 801479e:	06c0      	lsls	r0, r0, #27
 80147a0:	d401      	bmi.n	80147a6 <hci_le_long_trm_key_rqst_evnt+0x1e>
 80147a2:	201a      	movs	r0, #26
 80147a4:	e025      	b.n	80147f2 <hci_le_long_trm_key_rqst_evnt+0x6a>
 80147a6:	f647 3044 	movw	r0, #31556	@ 0x7b44
 80147aa:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80147ae:	460d      	mov	r5, r1
 80147b0:	f00d f944 	bl	8021a3c <os_mem_pool_alloc>
 80147b4:	b1f8      	cbz	r0, 80147f6 <hci_le_long_trm_key_rqst_evnt+0x6e>
 80147b6:	4606      	mov	r6, r0
 80147b8:	203e      	movs	r0, #62	@ 0x3e
 80147ba:	7030      	strb	r0, [r6, #0]
 80147bc:	200d      	movs	r0, #13
 80147be:	7070      	strb	r0, [r6, #1]
 80147c0:	2005      	movs	r0, #5
 80147c2:	70b0      	strb	r0, [r6, #2]
 80147c4:	0a38      	lsrs	r0, r7, #8
 80147c6:	7130      	strb	r0, [r6, #4]
 80147c8:	1d70      	adds	r0, r6, #5
 80147ca:	4629      	mov	r1, r5
 80147cc:	2208      	movs	r2, #8
 80147ce:	70f7      	strb	r7, [r6, #3]
 80147d0:	f00f feba 	bl	8024548 <ble_memcpy>
 80147d4:	0a20      	lsrs	r0, r4, #8
 80147d6:	73b0      	strb	r0, [r6, #14]
 80147d8:	f646 5014 	movw	r0, #27924	@ 0x6d14
 80147dc:	7871      	ldrb	r1, [r6, #1]
 80147de:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80147e2:	7374      	strb	r4, [r6, #13]
 80147e4:	6804      	ldr	r4, [r0, #0]
 80147e6:	3102      	adds	r1, #2
 80147e8:	4630      	mov	r0, r6
 80147ea:	f7ff fa53 	bl	8013c94 <hci_form_hdr>
 80147ee:	47a0      	blx	r4
 80147f0:	2000      	movs	r0, #0
 80147f2:	b001      	add	sp, #4
 80147f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80147f6:	2042      	movs	r0, #66	@ 0x42
 80147f8:	f00b f85e 	bl	801f8b8 <bsp_debug_gpio_toggle>
 80147fc:	2007      	movs	r0, #7
 80147fe:	e7f8      	b.n	80147f2 <hci_le_long_trm_key_rqst_evnt+0x6a>

08014800 <hci_le_chnl_sel_algo_evnt>:
 8014800:	b5b0      	push	{r4, r5, r7, lr}
 8014802:	f646 5218 	movw	r2, #27928	@ 0x6d18
 8014806:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 801480a:	6993      	ldr	r3, [r2, #24]
 801480c:	b30b      	cbz	r3, 8014852 <hci_le_chnl_sel_algo_evnt+0x52>
 801480e:	4605      	mov	r5, r0
 8014810:	7c90      	ldrb	r0, [r2, #18]
 8014812:	0700      	lsls	r0, r0, #28
 8014814:	d51d      	bpl.n	8014852 <hci_le_chnl_sel_algo_evnt+0x52>
 8014816:	f647 3044 	movw	r0, #31556	@ 0x7b44
 801481a:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801481e:	460c      	mov	r4, r1
 8014820:	f00d f90c 	bl	8021a3c <os_mem_pool_alloc>
 8014824:	b1a8      	cbz	r0, 8014852 <hci_le_chnl_sel_algo_evnt+0x52>
 8014826:	213e      	movs	r1, #62	@ 0x3e
 8014828:	7001      	strb	r1, [r0, #0]
 801482a:	2104      	movs	r1, #4
 801482c:	7041      	strb	r1, [r0, #1]
 801482e:	2114      	movs	r1, #20
 8014830:	7081      	strb	r1, [r0, #2]
 8014832:	0a29      	lsrs	r1, r5, #8
 8014834:	7101      	strb	r1, [r0, #4]
 8014836:	f646 5114 	movw	r1, #27924	@ 0x6d14
 801483a:	70c5      	strb	r5, [r0, #3]
 801483c:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8014840:	680d      	ldr	r5, [r1, #0]
 8014842:	2106      	movs	r1, #6
 8014844:	7144      	strb	r4, [r0, #5]
 8014846:	f7ff fa25 	bl	8013c94 <hci_form_hdr>
 801484a:	4629      	mov	r1, r5
 801484c:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8014850:	4708      	bx	r1
 8014852:	bdb0      	pop	{r4, r5, r7, pc}

08014854 <hci_le_energy_dctn_cmplt_evnt>:
 8014854:	b5b0      	push	{r4, r5, r7, lr}
 8014856:	f646 5234 	movw	r2, #27956	@ 0x6d34
 801485a:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 801485e:	7812      	ldrb	r2, [r2, #0]
 8014860:	460c      	mov	r4, r1
 8014862:	0711      	lsls	r1, r2, #28
 8014864:	d400      	bmi.n	8014868 <hci_le_energy_dctn_cmplt_evnt+0x14>
 8014866:	bdb0      	pop	{r4, r5, r7, pc}
 8014868:	4605      	mov	r5, r0
 801486a:	f647 3044 	movw	r0, #31556	@ 0x7b44
 801486e:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8014872:	f00d f8e3 	bl	8021a3c <os_mem_pool_alloc>
 8014876:	2800      	cmp	r0, #0
 8014878:	bf08      	it	eq
 801487a:	bdb0      	popeq	{r4, r5, r7, pc}
 801487c:	21ff      	movs	r1, #255	@ 0xff
 801487e:	7001      	strb	r1, [r0, #0]
 8014880:	0061      	lsls	r1, r4, #1
 8014882:	3101      	adds	r1, #1
 8014884:	7041      	strb	r1, [r0, #1]
 8014886:	b2c9      	uxtb	r1, r1
 8014888:	3102      	adds	r1, #2
 801488a:	2204      	movs	r2, #4
 801488c:	7082      	strb	r2, [r0, #2]
 801488e:	b15c      	cbz	r4, 80148a8 <hci_le_energy_dctn_cmplt_evnt+0x54>
 8014890:	1d02      	adds	r2, r0, #4
 8014892:	bf00      	nop
 8014894:	f815 3b02 	ldrb.w	r3, [r5], #2
 8014898:	3c01      	subs	r4, #1
 801489a:	f802 3c01 	strb.w	r3, [r2, #-1]
 801489e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80148a2:	f802 3b02 	strb.w	r3, [r2], #2
 80148a6:	d1f5      	bne.n	8014894 <hci_le_energy_dctn_cmplt_evnt+0x40>
 80148a8:	f646 5214 	movw	r2, #27924	@ 0x6d14
 80148ac:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 80148b0:	6814      	ldr	r4, [r2, #0]
 80148b2:	f7ff f9ef 	bl	8013c94 <hci_form_hdr>
 80148b6:	4621      	mov	r1, r4
 80148b8:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80148bc:	4708      	bx	r1

080148be <ll_intf_init>:
 80148be:	b5b0      	push	{r4, r5, r7, lr}
 80148c0:	4604      	mov	r4, r0
 80148c2:	202a      	movs	r0, #42	@ 0x2a
 80148c4:	f00a fff8 	bl	801f8b8 <bsp_debug_gpio_toggle>
 80148c8:	f010 f876 	bl	80249b8 <sys_shared_init>
 80148cc:	f7ff fa52 	bl	8013d74 <hci_init_events_queues>
 80148d0:	f643 5021 	movw	r0, #15649	@ 0x3d21
 80148d4:	f6c0 0001 	movt	r0, #2049	@ 0x801
 80148d8:	f7ff f98a 	bl	8013bf0 <ll_hci_init>
 80148dc:	b354      	cbz	r4, 8014934 <ll_intf_init+0x76>
 80148de:	f646 5538 	movw	r5, #27960	@ 0x6d38
 80148e2:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 80148e6:	602c      	str	r4, [r5, #0]
 80148e8:	f010 f87c 	bl	80249e4 <ble_mem_init>
 80148ec:	f010 f8c5 	bl	8024a7a <ble_mem_shared_reset>
 80148f0:	f011 fc33 	bl	802615a <db_reset>
 80148f4:	f008 f956 	bl	801cba4 <non_conn_mngr_reset>
 80148f8:	f009 ffd7 	bl	801e8aa <prvcy_mngr_reset>
 80148fc:	fab0 f080 	clz	r0, r0
 8014900:	0940      	lsrs	r0, r0, #5
 8014902:	2101      	movs	r1, #1
 8014904:	f00a ff8d 	bl	801f822 <bsp_assert>
 8014908:	f003 fc5c 	bl	80181c4 <llhwc_init>
 801490c:	4604      	mov	r4, r0
 801490e:	fab0 f080 	clz	r0, r0
 8014912:	0940      	lsrs	r0, r0, #5
 8014914:	2101      	movs	r1, #1
 8014916:	f00a ff84 	bl	801f822 <bsp_assert>
 801491a:	f010 f9df 	bl	8024cdc <conn_mngr_init>
 801491e:	f7fd fc35 	bl	801218c <evnt_schdlr_init>
 8014922:	6828      	ldr	r0, [r5, #0]
 8014924:	6d00      	ldr	r0, [r0, #80]	@ 0x50
 8014926:	f7fe faf1 	bl	8012f0c <evnt_schdlr_rgstr_end_of_activity_cbk>
 801492a:	200a      	movs	r0, #10
 801492c:	2100      	movs	r1, #0
 801492e:	f7fe fa96 	bl	8012e5e <evnt_schdlr_set_phy_clbr_params>
 8014932:	e000      	b.n	8014936 <ll_intf_init+0x78>
 8014934:	241e      	movs	r4, #30
 8014936:	4620      	mov	r0, r4
 8014938:	bdb0      	pop	{r4, r5, r7, pc}

0801493a <ll_intf_write_bd_addr>:
 801493a:	b120      	cbz	r0, 8014946 <ll_intf_write_bd_addr+0xc>
 801493c:	b580      	push	{r7, lr}
 801493e:	f011 fd88 	bl	8026452 <db_set_bd_address>
 8014942:	b2c0      	uxtb	r0, r0
 8014944:	bd80      	pop	{r7, pc}
 8014946:	2012      	movs	r0, #18
 8014948:	4770      	bx	lr

0801494a <ll_intf_le_set_adv_enable>:
 801494a:	2801      	cmp	r0, #1
 801494c:	bf84      	itt	hi
 801494e:	2012      	movhi	r0, #18
 8014950:	4770      	bxhi	lr
 8014952:	fab0 f080 	clz	r0, r0
 8014956:	0940      	lsrs	r0, r0, #5
 8014958:	f008 be5a 	b.w	801d610 <non_conn_mngr_adv_enable>

0801495c <ll_intf_le_set_adv_data>:
 801495c:	281f      	cmp	r0, #31
 801495e:	d805      	bhi.n	801496c <ll_intf_le_set_adv_data+0x10>
 8014960:	b121      	cbz	r1, 801496c <ll_intf_le_set_adv_data+0x10>
 8014962:	4602      	mov	r2, r0
 8014964:	4608      	mov	r0, r1
 8014966:	4611      	mov	r1, r2
 8014968:	f008 bdea 	b.w	801d540 <non_conn_mngr_set_adv_data>
 801496c:	2012      	movs	r0, #18
 801496e:	4770      	bx	lr

08014970 <ll_intf_le_set_adv_params>:
 8014970:	b5b0      	push	{r4, r5, r7, lr}
 8014972:	b088      	sub	sp, #32
 8014974:	f890 c004 	ldrb.w	ip, [r0, #4]
 8014978:	4604      	mov	r4, r0
 801497a:	f1bc 0f01 	cmp.w	ip, #1
 801497e:	d101      	bne.n	8014984 <ll_intf_le_set_adv_params+0x14>
 8014980:	2201      	movs	r2, #1
 8014982:	e023      	b.n	80149cc <ll_intf_le_set_adv_params+0x5c>
 8014984:	8821      	ldrh	r1, [r4, #0]
 8014986:	8863      	ldrh	r3, [r4, #2]
 8014988:	f1a1 0220 	sub.w	r2, r1, #32
 801498c:	f643 7ee1 	movw	lr, #16353	@ 0x3fe1
 8014990:	4572      	cmp	r2, lr
 8014992:	f04f 0200 	mov.w	r2, #0
 8014996:	f1a3 0520 	sub.w	r5, r3, #32
 801499a:	bf38      	it	cc
 801499c:	2201      	movcc	r2, #1
 801499e:	4575      	cmp	r5, lr
 80149a0:	f04f 0500 	mov.w	r5, #0
 80149a4:	bf38      	it	cc
 80149a6:	2501      	movcc	r5, #1
 80149a8:	402a      	ands	r2, r5
 80149aa:	4299      	cmp	r1, r3
 80149ac:	f04f 0100 	mov.w	r1, #0
 80149b0:	f04f 0000 	mov.w	r0, #0
 80149b4:	bf98      	it	ls
 80149b6:	2101      	movls	r1, #1
 80149b8:	f1bc 0f04 	cmp.w	ip, #4
 80149bc:	ea02 0201 	and.w	r2, r2, r1
 80149c0:	d004      	beq.n	80149cc <ll_intf_le_set_adv_params+0x5c>
 80149c2:	7ba1      	ldrb	r1, [r4, #14]
 80149c4:	2904      	cmp	r1, #4
 80149c6:	bf38      	it	cc
 80149c8:	2001      	movcc	r0, #1
 80149ca:	4002      	ands	r2, r0
 80149cc:	f1bc 0f04 	cmp.w	ip, #4
 80149d0:	f04f 0012 	mov.w	r0, #18
 80149d4:	d82b      	bhi.n	8014a2e <ll_intf_le_set_adv_params+0xbe>
 80149d6:	b352      	cbz	r2, 8014a2e <ll_intf_le_set_adv_params+0xbe>
 80149d8:	7962      	ldrb	r2, [r4, #5]
 80149da:	2a03      	cmp	r2, #3
 80149dc:	d827      	bhi.n	8014a2e <ll_intf_le_set_adv_params+0xbe>
 80149de:	79a3      	ldrb	r3, [r4, #6]
 80149e0:	2b01      	cmp	r3, #1
 80149e2:	d824      	bhi.n	8014a2e <ll_intf_le_set_adv_params+0xbe>
 80149e4:	7b61      	ldrb	r1, [r4, #13]
 80149e6:	1e4d      	subs	r5, r1, #1
 80149e8:	2d06      	cmp	r5, #6
 80149ea:	d820      	bhi.n	8014a2e <ll_intf_le_set_adv_params+0xbe>
 80149ec:	8820      	ldrh	r0, [r4, #0]
 80149ee:	8865      	ldrh	r5, [r4, #2]
 80149f0:	f88d 201b 	strb.w	r2, [sp, #27]
 80149f4:	e9cd 0502 	strd	r0, r5, [sp, #8]
 80149f8:	4668      	mov	r0, sp
 80149fa:	3013      	adds	r0, #19
 80149fc:	f88d 1010 	strb.w	r1, [sp, #16]
 8014a00:	1de1      	adds	r1, r4, #7
 8014a02:	2206      	movs	r2, #6
 8014a04:	f88d c011 	strb.w	ip, [sp, #17]
 8014a08:	f88d 3012 	strb.w	r3, [sp, #18]
 8014a0c:	f00f fd9c 	bl	8024548 <ble_memcpy>
 8014a10:	7ba0      	ldrb	r0, [r4, #14]
 8014a12:	2803      	cmp	r0, #3
 8014a14:	d808      	bhi.n	8014a28 <ll_intf_le_set_adv_params+0xb8>
 8014a16:	f240 2100 	movw	r1, #512	@ 0x200
 8014a1a:	00c0      	lsls	r0, r0, #3
 8014a1c:	f2c0 1103 	movt	r1, #259	@ 0x103
 8014a20:	fa21 f000 	lsr.w	r0, r1, r0
 8014a24:	f88d 001c 	strb.w	r0, [sp, #28]
 8014a28:	4668      	mov	r0, sp
 8014a2a:	f008 fd59 	bl	801d4e0 <non_conn_mngr_set_adv_params>
 8014a2e:	b008      	add	sp, #32
 8014a30:	bdb0      	pop	{r4, r5, r7, pc}
	...

08014a34 <ll_intf_reset>:
 8014a34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014a36:	b081      	sub	sp, #4
 8014a38:	2000      	movs	r0, #0
 8014a3a:	f8ad 0002 	strh.w	r0, [sp, #2]
 8014a3e:	f00d ff2b 	bl	8022898 <llhwc_cmn_is_dp_slp_enabled>
 8014a42:	b110      	cbz	r0, 8014a4a <ll_intf_reset+0x16>
 8014a44:	2000      	movs	r0, #0
 8014a46:	f00d febb 	bl	80227c0 <llhwc_cmn_set_dp_slp_mode>
 8014a4a:	f010 fb55 	bl	80250f8 <conn_mngr_reset>
 8014a4e:	f011 fb84 	bl	802615a <db_reset>
 8014a52:	f008 f8a7 	bl	801cba4 <non_conn_mngr_reset>
 8014a56:	2000      	movs	r0, #0
 8014a58:	2100      	movs	r1, #0
 8014a5a:	f7fe fa00 	bl	8012e5e <evnt_schdlr_set_phy_clbr_params>
 8014a5e:	f7fd ff57 	bl	8012910 <evnt_schdlr_reset>
 8014a62:	f00a fdd3 	bl	801f60c <state_mngr_reset>
 8014a66:	f003 fc85 	bl	8018374 <llhwc_is_dtm_enabled>
 8014a6a:	b118      	cbz	r0, 8014a74 <ll_intf_reset+0x40>
 8014a6c:	f10d 0002 	add.w	r0, sp, #2
 8014a70:	f003 fc8a 	bl	8018388 <llhwc_stp_dtm>
 8014a74:	f009 ff19 	bl	801e8aa <prvcy_mngr_reset>
 8014a78:	2600      	movs	r6, #0
 8014a7a:	f002 ff3f 	bl	80178fc <llhwc_reset>
 8014a7e:	4604      	mov	r4, r0
 8014a80:	a712      	add	r7, pc, #72	@ (adr r7, 8014acc <ll_intf_reset+0x98>)
 8014a82:	bf00      	nop
 8014a84:	5dbd      	ldrb	r5, [r7, r6]
 8014a86:	bf00      	nop
 8014a88:	4628      	mov	r0, r5
 8014a8a:	f00c febc 	bl	8021806 <emngr_get_handle_events>
 8014a8e:	b138      	cbz	r0, 8014aa0 <ll_intf_reset+0x6c>
 8014a90:	4628      	mov	r0, r5
 8014a92:	f00c fe62 	bl	802175a <emngr_get_event>
 8014a96:	2800      	cmp	r0, #0
 8014a98:	d0f6      	beq.n	8014a88 <ll_intf_reset+0x54>
 8014a9a:	f000 f8a1 	bl	8014be0 <ll_intf_free_ll_pkt_hndlr>
 8014a9e:	e7f3      	b.n	8014a88 <ll_intf_reset+0x54>
 8014aa0:	3601      	adds	r6, #1
 8014aa2:	2e03      	cmp	r6, #3
 8014aa4:	d1ee      	bne.n	8014a84 <ll_intf_reset+0x50>
 8014aa6:	f00f ffe8 	bl	8024a7a <ble_mem_shared_reset>
 8014aaa:	2002      	movs	r0, #2
 8014aac:	f00f f939 	bl	8023d22 <llhwc_cmn_set_controller_activity>
 8014ab0:	f004 feb0 	bl	8019814 <llhwc_is_in_augmented_mode>
 8014ab4:	2801      	cmp	r0, #1
 8014ab6:	bf08      	it	eq
 8014ab8:	f004 fea5 	bleq	8019806 <llhwc_stop_augmented_mode>
 8014abc:	200a      	movs	r0, #10
 8014abe:	2100      	movs	r1, #0
 8014ac0:	f7fe f9cd 	bl	8012e5e <evnt_schdlr_set_phy_clbr_params>
 8014ac4:	4620      	mov	r0, r4
 8014ac6:	b001      	add	sp, #4
 8014ac8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014aca:	bf00      	nop
 8014acc:	00080706 	.word	0x00080706

08014ad0 <ll_intf_rcvd_long_trm_key>:
 8014ad0:	0a02      	lsrs	r2, r0, #8
 8014ad2:	2a0e      	cmp	r2, #14
 8014ad4:	bf84      	itt	hi
 8014ad6:	2012      	movhi	r0, #18
 8014ad8:	4770      	bxhi	lr
 8014ada:	f002 b9b3 	b.w	8016e44 <llcp_start_encryption>

08014ade <ll_intf_le_strt_encrpt>:
 8014ade:	ea4f 2c10 	mov.w	ip, r0, lsr #8
 8014ae2:	f1bc 0f0e 	cmp.w	ip, #14
 8014ae6:	d803      	bhi.n	8014af0 <ll_intf_le_strt_encrpt+0x12>
 8014ae8:	b111      	cbz	r1, 8014af0 <ll_intf_le_strt_encrpt+0x12>
 8014aea:	b10b      	cbz	r3, 8014af0 <ll_intf_le_strt_encrpt+0x12>
 8014aec:	f000 bc60 	b.w	80153b0 <llcp_encryption_req>
 8014af0:	2012      	movs	r0, #18
 8014af2:	4770      	bx	lr

08014af4 <ll_intf_le_set_addr_rsln_enble>:
 8014af4:	2801      	cmp	r0, #1
 8014af6:	bf84      	itt	hi
 8014af8:	2012      	movhi	r0, #18
 8014afa:	4770      	bxhi	lr
 8014afc:	f00a bcac 	b.w	801f458 <prvcy_mngr_set_addr_rsln_enble>

08014b00 <ll_intf_le_read_adv_channel_tx_power>:
 8014b00:	b5b0      	push	{r4, r5, r7, lr}
 8014b02:	b180      	cbz	r0, 8014b26 <ll_intf_le_read_adv_channel_tx_power+0x26>
 8014b04:	4605      	mov	r5, r0
 8014b06:	f011 fbd6 	bl	80262b6 <db_get_advertising_channel_tx_power>
 8014b0a:	f995 1000 	ldrsb.w	r1, [r5]
 8014b0e:	4604      	mov	r4, r0
 8014b10:	4608      	mov	r0, r1
 8014b12:	4629      	mov	r1, r5
 8014b14:	f011 fc18 	bl	8026348 <db_get_radiative_tx_pwr>
 8014b18:	f995 0000 	ldrsb.w	r0, [r5]
 8014b1c:	2815      	cmp	r0, #21
 8014b1e:	bfa4      	itt	ge
 8014b20:	2014      	movge	r0, #20
 8014b22:	7028      	strbge	r0, [r5, #0]
 8014b24:	e000      	b.n	8014b28 <ll_intf_le_read_adv_channel_tx_power+0x28>
 8014b26:	2412      	movs	r4, #18
 8014b28:	4620      	mov	r0, r4
 8014b2a:	bdb0      	pop	{r4, r5, r7, pc}

08014b2c <ll_intf_le_set_scan_enable>:
 8014b2c:	2801      	cmp	r0, #1
 8014b2e:	d805      	bhi.n	8014b3c <ll_intf_le_set_scan_enable+0x10>
 8014b30:	b130      	cbz	r0, 8014b40 <ll_intf_le_set_scan_enable+0x14>
 8014b32:	2901      	cmp	r1, #1
 8014b34:	bf9c      	itt	ls
 8014b36:	2000      	movls	r0, #0
 8014b38:	f008 b9b3 	bls.w	801cea2 <non_conn_mngr_scan_enable>
 8014b3c:	2012      	movs	r0, #18
 8014b3e:	4770      	bx	lr
 8014b40:	2001      	movs	r0, #1
 8014b42:	f008 b9ae 	b.w	801cea2 <non_conn_mngr_scan_enable>

08014b46 <ll_intf_le_add_device_white_list>:
 8014b46:	4602      	mov	r2, r0
 8014b48:	28ff      	cmp	r0, #255	@ 0xff
 8014b4a:	d002      	beq.n	8014b52 <ll_intf_le_add_device_white_list+0xc>
 8014b4c:	2a01      	cmp	r2, #1
 8014b4e:	d805      	bhi.n	8014b5c <ll_intf_le_add_device_white_list+0x16>
 8014b50:	b121      	cbz	r1, 8014b5c <ll_intf_le_add_device_white_list+0x16>
 8014b52:	4608      	mov	r0, r1
 8014b54:	4611      	mov	r1, r2
 8014b56:	2200      	movs	r2, #0
 8014b58:	f008 b87d 	b.w	801cc56 <non_conn_mngr_add_rmv_clr_device_white_list>
 8014b5c:	2012      	movs	r0, #18
 8014b5e:	4770      	bx	lr

08014b60 <ll_intf_le_clear_white_list>:
 8014b60:	b580      	push	{r7, lr}
 8014b62:	b082      	sub	sp, #8
 8014b64:	f10d 0002 	add.w	r0, sp, #2
 8014b68:	2100      	movs	r1, #0
 8014b6a:	2202      	movs	r2, #2
 8014b6c:	f008 f873 	bl	801cc56 <non_conn_mngr_add_rmv_clr_device_white_list>
 8014b70:	b002      	add	sp, #8
 8014b72:	bd80      	pop	{r7, pc}

08014b74 <ll_intf_le_set_random_addr>:
 8014b74:	2800      	cmp	r0, #0
 8014b76:	bf04      	itt	eq
 8014b78:	2012      	moveq	r0, #18
 8014b7a:	4770      	bxeq	lr
 8014b7c:	f009 b855 	b.w	801dc2a <non_conn_mngr_set_random_address>

08014b80 <ll_intf_le_set_default_phy_cmd>:
 8014b80:	ea42 0301 	orr.w	r3, r2, r1
 8014b84:	2b07      	cmp	r3, #7
 8014b86:	d80d      	bhi.n	8014ba4 <ll_intf_le_set_default_phy_cmd+0x24>
 8014b88:	2803      	cmp	r0, #3
 8014b8a:	d80d      	bhi.n	8014ba8 <ll_intf_le_set_default_phy_cmd+0x28>
 8014b8c:	b918      	cbnz	r0, 8014b96 <ll_intf_le_set_default_phy_cmd+0x16>
 8014b8e:	f04f 0311 	mov.w	r3, #17
 8014b92:	b151      	cbz	r1, 8014baa <ll_intf_le_set_default_phy_cmd+0x2a>
 8014b94:	b14a      	cbz	r2, 8014baa <ll_intf_le_set_default_phy_cmd+0x2a>
 8014b96:	b580      	push	{r7, lr}
 8014b98:	f011 fc85 	bl	80264a6 <db_le_set_default_phy_cmd>
 8014b9c:	b2c3      	uxtb	r3, r0
 8014b9e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8014ba2:	e002      	b.n	8014baa <ll_intf_le_set_default_phy_cmd+0x2a>
 8014ba4:	2311      	movs	r3, #17
 8014ba6:	e000      	b.n	8014baa <ll_intf_le_set_default_phy_cmd+0x2a>
 8014ba8:	2312      	movs	r3, #18
 8014baa:	4618      	mov	r0, r3
 8014bac:	4770      	bx	lr

08014bae <ll_intf_acl_data_from_host_to_cntrlr>:
 8014bae:	b5b0      	push	{r4, r5, r7, lr}
 8014bb0:	4605      	mov	r5, r0
 8014bb2:	202b      	movs	r0, #43	@ 0x2b
 8014bb4:	460c      	mov	r4, r1
 8014bb6:	f00a fe7b 	bl	801f8b0 <bsp_debug_gpio_set>
 8014bba:	b17c      	cbz	r4, 8014bdc <ll_intf_acl_data_from_host_to_cntrlr+0x2e>
 8014bbc:	f5b5 6f70 	cmp.w	r5, #3840	@ 0xf00
 8014bc0:	d209      	bcs.n	8014bd6 <ll_intf_acl_data_from_host_to_cntrlr+0x28>
 8014bc2:	4628      	mov	r0, r5
 8014bc4:	4621      	mov	r1, r4
 8014bc6:	f010 fce1 	bl	802558c <conn_mngr_send_pkt>
 8014bca:	4604      	mov	r4, r0
 8014bcc:	202b      	movs	r0, #43	@ 0x2b
 8014bce:	f00a fe71 	bl	801f8b4 <bsp_debug_gpio_clear>
 8014bd2:	b2e0      	uxtb	r0, r4
 8014bd4:	bdb0      	pop	{r4, r5, r7, pc}
 8014bd6:	4620      	mov	r0, r4
 8014bd8:	f000 f802 	bl	8014be0 <ll_intf_free_ll_pkt_hndlr>
 8014bdc:	2012      	movs	r0, #18
 8014bde:	bdb0      	pop	{r4, r5, r7, pc}

08014be0 <ll_intf_free_ll_pkt_hndlr>:
 8014be0:	b510      	push	{r4, lr}
 8014be2:	4604      	mov	r4, r0
 8014be4:	202c      	movs	r0, #44	@ 0x2c
 8014be6:	f00a fe63 	bl	801f8b0 <bsp_debug_gpio_set>
 8014bea:	6820      	ldr	r0, [r4, #0]
 8014bec:	f00a fe1e 	bl	801f82c <bsp_is_ptr_in_ble_mem>
 8014bf0:	6821      	ldr	r1, [r4, #0]
 8014bf2:	2800      	cmp	r0, #0
 8014bf4:	bf18      	it	ne
 8014bf6:	3904      	subne	r1, #4
 8014bf8:	4608      	mov	r0, r1
 8014bfa:	f00c ff21 	bl	8021a40 <os_mem_pool_free>
 8014bfe:	4620      	mov	r0, r4
 8014c00:	f00c ff1e 	bl	8021a40 <os_mem_pool_free>
 8014c04:	202c      	movs	r0, #44	@ 0x2c
 8014c06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014c0a:	f00a be53 	b.w	801f8b4 <bsp_debug_gpio_clear>

08014c0e <ll_intf_set_conn_tx_power_level>:
 8014c0e:	b5b0      	push	{r4, r5, r7, lr}
 8014c10:	4605      	mov	r5, r0
 8014c12:	8800      	ldrh	r0, [r0, #0]
 8014c14:	0a02      	lsrs	r2, r0, #8
 8014c16:	2a0e      	cmp	r2, #14
 8014c18:	bf84      	itt	hi
 8014c1a:	2030      	movhi	r0, #48	@ 0x30
 8014c1c:	bdb0      	pophi	{r4, r5, r7, pc}
 8014c1e:	2807      	cmp	r0, #7
 8014c20:	bf84      	itt	hi
 8014c22:	2002      	movhi	r0, #2
 8014c24:	bdb0      	pophi	{r4, r5, r7, pc}
 8014c26:	f991 0000 	ldrsb.w	r0, [r1]
 8014c2a:	460c      	mov	r4, r1
 8014c2c:	f011 fba7 	bl	802637e <db_get_phy_conf_tx_pwr>
 8014c30:	4628      	mov	r0, r5
 8014c32:	4621      	mov	r1, r4
 8014c34:	f010 ff9f 	bl	8025b76 <conn_mngr_set_conn_tx_power_level>
 8014c38:	f994 1000 	ldrsb.w	r1, [r4]
 8014c3c:	4605      	mov	r5, r0
 8014c3e:	4608      	mov	r0, r1
 8014c40:	4621      	mov	r1, r4
 8014c42:	f011 fb81 	bl	8026348 <db_get_radiative_tx_pwr>
 8014c46:	4628      	mov	r0, r5
 8014c48:	bdb0      	pop	{r4, r5, r7, pc}

08014c4a <ll_intf_le_write_tx_pwr>:
 8014c4a:	b580      	push	{r7, lr}
 8014c4c:	b082      	sub	sp, #8
 8014c4e:	2100      	movs	r1, #0
 8014c50:	f88d 1006 	strb.w	r1, [sp, #6]
 8014c54:	f88d 1005 	strb.w	r1, [sp, #5]
 8014c58:	f10d 0107 	add.w	r1, sp, #7
 8014c5c:	f88d 0007 	strb.w	r0, [sp, #7]
 8014c60:	f011 fb8d 	bl	802637e <db_get_phy_conf_tx_pwr>
 8014c64:	f10d 0006 	add.w	r0, sp, #6
 8014c68:	f10d 0105 	add.w	r1, sp, #5
 8014c6c:	f00d fb1f 	bl	80222ae <ll_tx_pwr_if_get_min_max_supprtd_tx_power_levels>
 8014c70:	f99d 0007 	ldrsb.w	r0, [sp, #7]
 8014c74:	f99d 1006 	ldrsb.w	r1, [sp, #6]
 8014c78:	4288      	cmp	r0, r1
 8014c7a:	f04f 0111 	mov.w	r1, #17
 8014c7e:	db13      	blt.n	8014ca8 <ll_intf_le_write_tx_pwr+0x5e>
 8014c80:	f99d 2005 	ldrsb.w	r2, [sp, #5]
 8014c84:	4290      	cmp	r0, r2
 8014c86:	dc0f      	bgt.n	8014ca8 <ll_intf_le_write_tx_pwr+0x5e>
 8014c88:	2101      	movs	r1, #1
 8014c8a:	2201      	movs	r2, #1
 8014c8c:	f00d fb22 	bl	80222d4 <ll_tx_pwr_if_get_tx_pwr_table_offset>
 8014c90:	f247 21ec 	movw	r1, #29420	@ 0x72ec
 8014c94:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8014c98:	6809      	ldr	r1, [r1, #0]
 8014c9a:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 8014c9e:	f990 0003 	ldrsb.w	r0, [r0, #3]
 8014ca2:	f011 fb2c 	bl	80262fe <db_set_tx_power_value>
 8014ca6:	4601      	mov	r1, r0
 8014ca8:	4608      	mov	r0, r1
 8014caa:	b002      	add	sp, #8
 8014cac:	bd80      	pop	{r7, pc}

08014cae <ll_intf_le_set_dp_slp_mode>:
 8014cae:	2801      	cmp	r0, #1
 8014cb0:	bf84      	itt	hi
 8014cb2:	2012      	movhi	r0, #18
 8014cb4:	4770      	bxhi	lr
 8014cb6:	f7fe b8e2 	b.w	8012e7e <evnt_schdlr_set_dp_slp_mode>

08014cba <ll_intf_le_select_slp_clk_src>:
 8014cba:	b5b0      	push	{r4, r5, r7, lr}
 8014cbc:	460d      	mov	r5, r1
 8014cbe:	4604      	mov	r4, r0
 8014cc0:	f00d fcf2 	bl	80226a8 <llhwc_cmn_reset_slptmr_src>
 8014cc4:	f00d fd02 	bl	80226cc <llhwc_cmn_reset_rco_clbr>
 8014cc8:	2c02      	cmp	r4, #2
 8014cca:	d005      	beq.n	8014cd8 <ll_intf_le_select_slp_clk_src+0x1e>
 8014ccc:	2c01      	cmp	r4, #1
 8014cce:	d007      	beq.n	8014ce0 <ll_intf_le_select_slp_clk_src+0x26>
 8014cd0:	b98c      	cbnz	r4, 8014cf6 <ll_intf_le_select_slp_clk_src+0x3c>
 8014cd2:	f44f 40fa 	mov.w	r0, #32000	@ 0x7d00
 8014cd6:	e001      	b.n	8014cdc <ll_intf_le_select_slp_clk_src+0x22>
 8014cd8:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8014cdc:	8028      	strh	r0, [r5, #0]
 8014cde:	e003      	b.n	8014ce8 <ll_intf_le_select_slp_clk_src+0x2e>
 8014ce0:	2001      	movs	r0, #1
 8014ce2:	4629      	mov	r1, r5
 8014ce4:	f00d ff5e 	bl	8022ba4 <llhwc_cmn_initial_rco_clbr>
 8014ce8:	f247 3070 	movw	r0, #29552	@ 0x7370
 8014cec:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8014cf0:	7504      	strb	r4, [r0, #20]
 8014cf2:	2000      	movs	r0, #0
 8014cf4:	bdb0      	pop	{r4, r5, r7, pc}
 8014cf6:	2012      	movs	r0, #18
 8014cf8:	bdb0      	pop	{r4, r5, r7, pc}

08014cfa <ll_intf_select_tx_power_table>:
 8014cfa:	b510      	push	{r4, lr}
 8014cfc:	4604      	mov	r4, r0
 8014cfe:	f7fe f8ec 	bl	8012eda <evnt_schdlr_select_tx_power_mode>
 8014d02:	0601      	lsls	r1, r0, #24
 8014d04:	d105      	bne.n	8014d12 <ll_intf_select_tx_power_table+0x18>
 8014d06:	4620      	mov	r0, r4
 8014d08:	f00d fa7a 	bl	8022200 <ll_tx_pwr_if_select_tx_power_mode>
 8014d0c:	2800      	cmp	r0, #0
 8014d0e:	bf18      	it	ne
 8014d10:	2012      	movne	r0, #18
 8014d12:	b2c0      	uxtb	r0, r0
 8014d14:	bd10      	pop	{r4, pc}

08014d16 <ll_intf_config_ll_ctx_params>:
 8014d16:	b5b0      	push	{r4, r5, r7, lr}
 8014d18:	460c      	mov	r4, r1
 8014d1a:	4605      	mov	r5, r0
 8014d1c:	f00f fd15 	bl	802474a <os_wrapper_is_rtos_used>
 8014d20:	2200      	movs	r2, #0
 8014d22:	2d01      	cmp	r5, #1
 8014d24:	bf88      	it	hi
 8014d26:	2201      	movhi	r2, #1
 8014d28:	4601      	mov	r1, r0
 8014d2a:	2c01      	cmp	r4, #1
 8014d2c:	f04f 0012 	mov.w	r0, #18
 8014d30:	d80a      	bhi.n	8014d48 <ll_intf_config_ll_ctx_params+0x32>
 8014d32:	fab1 f181 	clz	r1, r1
 8014d36:	0949      	lsrs	r1, r1, #5
 8014d38:	4011      	ands	r1, r2
 8014d3a:	bf18      	it	ne
 8014d3c:	bdb0      	popne	{r4, r5, r7, pc}
 8014d3e:	4628      	mov	r0, r5
 8014d40:	4621      	mov	r1, r4
 8014d42:	f00f fa49 	bl	80241d8 <llhwc_cmn_sys_configure_ll_ctx>
 8014d46:	2000      	movs	r0, #0
 8014d48:	bdb0      	pop	{r4, r5, r7, pc}

08014d4a <ll_intf_alloc_ll_pkt>:
 8014d4a:	f649 6044 	movw	r0, #40516	@ 0x9e44
 8014d4e:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8014d52:	f00c be77 	b.w	8021a44 <os_shrd_mem_alloc>

08014d56 <ll_intf_get_link_status>:
 8014d56:	b570      	push	{r4, r5, r6, lr}
 8014d58:	b082      	sub	sp, #8
 8014d5a:	4604      	mov	r4, r0
 8014d5c:	2000      	movs	r0, #0
 8014d5e:	460d      	mov	r5, r1
 8014d60:	f88d 0007 	strb.w	r0, [sp, #7]
 8014d64:	4620      	mov	r0, r4
 8014d66:	2100      	movs	r1, #0
 8014d68:	220a      	movs	r2, #10
 8014d6a:	f00f fc3d 	bl	80245e8 <ble_memset>
 8014d6e:	4628      	mov	r0, r5
 8014d70:	21ff      	movs	r1, #255	@ 0xff
 8014d72:	2214      	movs	r2, #20
 8014d74:	f00f fc38 	bl	80245e8 <ble_memset>
 8014d78:	4668      	mov	r0, sp
 8014d7a:	f004 fd51 	bl	8019820 <llhwc_get_dtm_curr_mode>
 8014d7e:	9800      	ldr	r0, [sp, #0]
 8014d80:	f5b0 6f80 	cmp.w	r0, #1024	@ 0x400
 8014d84:	bf18      	it	ne
 8014d86:	f5b0 7f00 	cmpne.w	r0, #512	@ 0x200
 8014d8a:	d106      	bne.n	8014d9a <ll_intf_get_link_status+0x44>
 8014d8c:	2107      	movs	r1, #7
 8014d8e:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 8014d92:	bf08      	it	eq
 8014d94:	2106      	moveq	r1, #6
 8014d96:	7021      	strb	r1, [r4, #0]
 8014d98:	e00b      	b.n	8014db2 <ll_intf_get_link_status+0x5c>
 8014d9a:	f10d 0607 	add.w	r6, sp, #7
 8014d9e:	4620      	mov	r0, r4
 8014da0:	4629      	mov	r1, r5
 8014da2:	4632      	mov	r2, r6
 8014da4:	f010 ff4c 	bl	8025c40 <conn_mngr_get_link_status>
 8014da8:	4620      	mov	r0, r4
 8014daa:	4629      	mov	r1, r5
 8014dac:	4632      	mov	r2, r6
 8014dae:	f008 ff5b 	bl	801dc68 <non_conn_mngr_get_link_status>
 8014db2:	2000      	movs	r0, #0
 8014db4:	b002      	add	sp, #8
 8014db6:	bd70      	pop	{r4, r5, r6, pc}

08014db8 <ll_intf_rgstr_hst_cbk>:
 8014db8:	b510      	push	{r4, lr}
 8014dba:	2101      	movs	r1, #1
 8014dbc:	4604      	mov	r4, r0
 8014dbe:	2800      	cmp	r0, #0
 8014dc0:	bf18      	it	ne
 8014dc2:	2001      	movne	r0, #1
 8014dc4:	f00a fd2d 	bl	801f822 <bsp_assert>
 8014dc8:	4620      	mov	r0, r4
 8014dca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014dce:	f7ff b80c 	b.w	8013dea <hci_rgstr_hst_cbk>

08014dd2 <ll_intf_rgstr_hst_cbk_ll_queue_full>:
 8014dd2:	b510      	push	{r4, lr}
 8014dd4:	2101      	movs	r1, #1
 8014dd6:	4604      	mov	r4, r0
 8014dd8:	2800      	cmp	r0, #0
 8014dda:	bf18      	it	ne
 8014ddc:	2001      	movne	r0, #1
 8014dde:	f00a fd20 	bl	801f822 <bsp_assert>
 8014de2:	4620      	mov	r0, r4
 8014de4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014de8:	f7ff b805 	b.w	8013df6 <hci_rgstr_hst_cbk_ll_queue_full>

08014dec <ll_intf_chng_evnt_hndlr_state>:
 8014dec:	b510      	push	{r4, lr}
 8014dee:	4604      	mov	r4, r0
 8014df0:	0780      	lsls	r0, r0, #30
 8014df2:	d503      	bpl.n	8014dfc <ll_intf_chng_evnt_hndlr_state+0x10>
 8014df4:	2007      	movs	r0, #7
 8014df6:	2100      	movs	r1, #0
 8014df8:	f00c fd0f 	bl	802181a <emngr_set_event_handle_busy>
 8014dfc:	0720      	lsls	r0, r4, #28
 8014dfe:	d503      	bpl.n	8014e08 <ll_intf_chng_evnt_hndlr_state+0x1c>
 8014e00:	2008      	movs	r0, #8
 8014e02:	2100      	movs	r1, #0
 8014e04:	f00c fd09 	bl	802181a <emngr_set_event_handle_busy>
 8014e08:	07e0      	lsls	r0, r4, #31
 8014e0a:	bf08      	it	eq
 8014e0c:	bd10      	popeq	{r4, pc}
 8014e0e:	2006      	movs	r0, #6
 8014e10:	2100      	movs	r1, #0
 8014e12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014e16:	f00c bd00 	b.w	802181a <emngr_set_event_handle_busy>

08014e1a <ll_intf_set_event_mask>:
 8014e1a:	f7ff b80f 	b.w	8013e3c <hci_ll_set_event_mask>

08014e1e <ll_intf_set_event_mask_page2>:
 8014e1e:	f7ff b830 	b.w	8013e82 <hci_ll_set_event_mask_page2>

08014e22 <ll_intf_set_le_event_mask>:
 8014e22:	f7fe bfee 	b.w	8013e02 <hci_ll_set_le_event_mask>

08014e26 <ll_intf_clear_event>:
 8014e26:	b580      	push	{r7, lr}
 8014e28:	b082      	sub	sp, #8
 8014e2a:	2100      	movs	r1, #0
 8014e2c:	2807      	cmp	r0, #7
 8014e2e:	f88d 1004 	strb.w	r1, [sp, #4]
 8014e32:	f8ad 0006 	strh.w	r0, [sp, #6]
 8014e36:	d809      	bhi.n	8014e4c <ll_intf_clear_event+0x26>
 8014e38:	f24d 4393 	movw	r3, #54419	@ 0xd493
 8014e3c:	aa01      	add	r2, sp, #4
 8014e3e:	2007      	movs	r0, #7
 8014e40:	2100      	movs	r1, #0
 8014e42:	f6c0 0301 	movt	r3, #2049	@ 0x801
 8014e46:	f00c fda3 	bl	8021990 <emngr_remove_conditional_event>
 8014e4a:	e000      	b.n	8014e4e <ll_intf_clear_event+0x28>
 8014e4c:	2002      	movs	r0, #2
 8014e4e:	b002      	add	sp, #8
 8014e50:	bd80      	pop	{r7, pc}

08014e52 <ll_intf_set_custom_event_mask>:
 8014e52:	f7ff b833 	b.w	8013ebc <hci_ll_set_custom_event_mask>
	...

08014e58 <llcp_set_req_chnls_in_min_chnls_prcdr>:
 8014e58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014e5a:	b081      	sub	sp, #4
 8014e5c:	460c      	mov	r4, r1
 8014e5e:	2101      	movs	r1, #1
 8014e60:	4605      	mov	r5, r0
 8014e62:	2800      	cmp	r0, #0
 8014e64:	bf18      	it	ne
 8014e66:	2001      	movne	r0, #1
 8014e68:	2601      	movs	r6, #1
 8014e6a:	f00a fcda 	bl	801f822 <bsp_assert>
 8014e6e:	4620      	mov	r0, r4
 8014e70:	f010 fd22 	bl	80258b8 <conn_mngr_calc_num_of_used_data_chnls>
 8014e74:	f895 1136 	ldrb.w	r1, [r5, #310]	@ 0x136
 8014e78:	4281      	cmp	r1, r0
 8014e7a:	d934      	bls.n	8014ee6 <llcp_set_req_chnls_in_min_chnls_prcdr+0x8e>
 8014e7c:	1a09      	subs	r1, r1, r0
 8014e7e:	f04f 0e00 	mov.w	lr, #0
 8014e82:	f20f 0c70 	addw	ip, pc, #112	@ 0x70
 8014e86:	f1be 0f09 	cmp.w	lr, #9
 8014e8a:	d217      	bcs.n	8014ebc <llcp_set_req_chnls_in_min_chnls_prcdr+0x64>
 8014e8c:	2204      	movs	r2, #4
 8014e8e:	f1be 0f05 	cmp.w	lr, #5
 8014e92:	bf38      	it	cc
 8014e94:	2202      	movcc	r2, #2
 8014e96:	f81c 500e 	ldrb.w	r5, [ip, lr]
 8014e9a:	f1be 0f02 	cmp.w	lr, #2
 8014e9e:	bf38      	it	cc
 8014ea0:	2201      	movcc	r2, #1
 8014ea2:	5ca3      	ldrb	r3, [r4, r2]
 8014ea4:	fa06 f505 	lsl.w	r5, r6, r5
 8014ea8:	421d      	tst	r5, r3
 8014eaa:	d102      	bne.n	8014eb2 <llcp_set_req_chnls_in_min_chnls_prcdr+0x5a>
 8014eac:	432b      	orrs	r3, r5
 8014eae:	3901      	subs	r1, #1
 8014eb0:	54a3      	strb	r3, [r4, r2]
 8014eb2:	f10e 0e01 	add.w	lr, lr, #1
 8014eb6:	060a      	lsls	r2, r1, #24
 8014eb8:	d1e5      	bne.n	8014e86 <llcp_set_req_chnls_in_min_chnls_prcdr+0x2e>
 8014eba:	e014      	b.n	8014ee6 <llcp_set_req_chnls_in_min_chnls_prcdr+0x8e>
 8014ebc:	2500      	movs	r5, #0
 8014ebe:	5d63      	ldrb	r3, [r4, r5]
 8014ec0:	2200      	movs	r2, #0
 8014ec2:	bf00      	nop
 8014ec4:	fa06 f702 	lsl.w	r7, r6, r2
 8014ec8:	421f      	tst	r7, r3
 8014eca:	d105      	bne.n	8014ed8 <llcp_set_req_chnls_in_min_chnls_prcdr+0x80>
 8014ecc:	b2ff      	uxtb	r7, r7
 8014ece:	3901      	subs	r1, #1
 8014ed0:	433b      	orrs	r3, r7
 8014ed2:	060f      	lsls	r7, r1, #24
 8014ed4:	5563      	strb	r3, [r4, r5]
 8014ed6:	d006      	beq.n	8014ee6 <llcp_set_req_chnls_in_min_chnls_prcdr+0x8e>
 8014ed8:	3201      	adds	r2, #1
 8014eda:	2a08      	cmp	r2, #8
 8014edc:	d1f2      	bne.n	8014ec4 <llcp_set_req_chnls_in_min_chnls_prcdr+0x6c>
 8014ede:	3501      	adds	r5, #1
 8014ee0:	2d02      	cmp	r5, #2
 8014ee2:	d1ec      	bne.n	8014ebe <llcp_set_req_chnls_in_min_chnls_prcdr+0x66>
 8014ee4:	e7e7      	b.n	8014eb6 <llcp_set_req_chnls_in_min_chnls_prcdr+0x5e>
 8014ee6:	2100      	movs	r1, #0
 8014ee8:	2802      	cmp	r0, #2
 8014eea:	bf38      	it	cc
 8014eec:	211e      	movcc	r1, #30
 8014eee:	4608      	mov	r0, r1
 8014ef0:	b001      	add	sp, #4
 8014ef2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08014ef4 <low_interefernce_chnls_loc>:
 8014ef4:	06050201 	.word	0x06050201
 8014ef8:	03020107 	.word	0x03020107
 8014efc:	00000004 	.word	0x00000004

08014f00 <llcp_le_set_phy_cmd>:
 8014f00:	b5b0      	push	{r4, r5, r7, lr}
 8014f02:	b08c      	sub	sp, #48	@ 0x30
 8014f04:	2807      	cmp	r0, #7
 8014f06:	d81c      	bhi.n	8014f42 <llcp_le_set_phy_cmd+0x42>
 8014f08:	f649 6564 	movw	r5, #40548	@ 0x9e64
 8014f0c:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 8014f10:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
 8014f14:	b1ac      	cbz	r4, 8014f42 <llcp_le_set_phy_cmd+0x42>
 8014f16:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8014f18:	f894 5123 	ldrb.w	r5, [r4, #291]	@ 0x123
 8014f1c:	2802      	cmp	r0, #2
 8014f1e:	bf18      	it	ne
 8014f20:	2001      	movne	r0, #1
 8014f22:	f8a4 012e 	strh.w	r0, [r4, #302]	@ 0x12e
 8014f26:	b955      	cbnz	r5, 8014f3e <llcp_le_set_phy_cmd+0x3e>
 8014f28:	f894 0124 	ldrb.w	r0, [r4, #292]	@ 0x124
 8014f2c:	280c      	cmp	r0, #12
 8014f2e:	d80c      	bhi.n	8014f4a <llcp_le_set_phy_cmd+0x4a>
 8014f30:	2501      	movs	r5, #1
 8014f32:	fa05 f000 	lsl.w	r0, r5, r0
 8014f36:	f241 4506 	movw	r5, #5126	@ 0x1406
 8014f3a:	4228      	tst	r0, r5
 8014f3c:	d005      	beq.n	8014f4a <llcp_le_set_phy_cmd+0x4a>
 8014f3e:	253a      	movs	r5, #58	@ 0x3a
 8014f40:	e000      	b.n	8014f44 <llcp_le_set_phy_cmd+0x44>
 8014f42:	2502      	movs	r5, #2
 8014f44:	4628      	mov	r0, r5
 8014f46:	b00c      	add	sp, #48	@ 0x30
 8014f48:	bdb0      	pop	{r4, r5, r7, pc}
 8014f4a:	2001      	movs	r0, #1
 8014f4c:	2903      	cmp	r1, #3
 8014f4e:	f884 0078 	strb.w	r0, [r4, #120]	@ 0x78
 8014f52:	d10c      	bne.n	8014f6e <llcp_le_set_phy_cmd+0x6e>
 8014f54:	2009      	movs	r0, #9
 8014f56:	2500      	movs	r5, #0
 8014f58:	f104 0158 	add.w	r1, r4, #88	@ 0x58
 8014f5c:	f884 005c 	strb.w	r0, [r4, #92]	@ 0x5c
 8014f60:	2002      	movs	r0, #2
 8014f62:	f8a4 5130 	strh.w	r5, [r4, #304]	@ 0x130
 8014f66:	65a4      	str	r4, [r4, #88]	@ 0x58
 8014f68:	f00c fb93 	bl	8021692 <emngr_post_event>
 8014f6c:	e7ea      	b.n	8014f44 <llcp_le_set_phy_cmd+0x44>
 8014f6e:	f894 512c 	ldrb.w	r5, [r4, #300]	@ 0x12c
 8014f72:	f894 e12d 	ldrb.w	lr, [r4, #301]	@ 0x12d
 8014f76:	07c8      	lsls	r0, r1, #31
 8014f78:	f884 5074 	strb.w	r5, [r4, #116]	@ 0x74
 8014f7c:	f884 e075 	strb.w	lr, [r4, #117]	@ 0x75
 8014f80:	d10a      	bne.n	8014f98 <llcp_le_set_phy_cmd+0x98>
 8014f82:	4295      	cmp	r5, r2
 8014f84:	f884 2130 	strb.w	r2, [r4, #304]	@ 0x130
 8014f88:	bf0e      	itee	eq
 8014f8a:	f04f 0c00 	moveq.w	ip, #0
 8014f8e:	f884 2074 	strbne.w	r2, [r4, #116]	@ 0x74
 8014f92:	f04f 0c01 	movne.w	ip, #1
 8014f96:	e004      	b.n	8014fa2 <llcp_le_set_phy_cmd+0xa2>
 8014f98:	f04f 0c00 	mov.w	ip, #0
 8014f9c:	462a      	mov	r2, r5
 8014f9e:	f884 c130 	strb.w	ip, [r4, #304]	@ 0x130
 8014fa2:	0788      	lsls	r0, r1, #30
 8014fa4:	d406      	bmi.n	8014fb4 <llcp_le_set_phy_cmd+0xb4>
 8014fa6:	459e      	cmp	lr, r3
 8014fa8:	f884 3131 	strb.w	r3, [r4, #305]	@ 0x131
 8014fac:	d005      	beq.n	8014fba <llcp_le_set_phy_cmd+0xba>
 8014fae:	f884 3075 	strb.w	r3, [r4, #117]	@ 0x75
 8014fb2:	e006      	b.n	8014fc2 <llcp_le_set_phy_cmd+0xc2>
 8014fb4:	2000      	movs	r0, #0
 8014fb6:	f884 0131 	strb.w	r0, [r4, #305]	@ 0x131
 8014fba:	f1bc 0f00 	cmp.w	ip, #0
 8014fbe:	4673      	mov	r3, lr
 8014fc0:	d011      	beq.n	8014fe6 <llcp_le_set_phy_cmd+0xe6>
 8014fc2:	200c      	movs	r0, #12
 8014fc4:	f884 0123 	strb.w	r0, [r4, #291]	@ 0x123
 8014fc8:	f88d 2004 	strb.w	r2, [sp, #4]
 8014fcc:	f88d 3005 	strb.w	r3, [sp, #5]
 8014fd0:	a801      	add	r0, sp, #4
 8014fd2:	4621      	mov	r1, r4
 8014fd4:	2216      	movs	r2, #22
 8014fd6:	2301      	movs	r3, #1
 8014fd8:	f000 f810 	bl	8014ffc <llcp_cntrl_pkt_init>
 8014fdc:	4605      	mov	r5, r0
 8014fde:	2002      	movs	r0, #2
 8014fe0:	f884 0134 	strb.w	r0, [r4, #308]	@ 0x134
 8014fe4:	e7ae      	b.n	8014f44 <llcp_le_set_phy_cmd+0x44>
 8014fe6:	2009      	movs	r0, #9
 8014fe8:	f104 0158 	add.w	r1, r4, #88	@ 0x58
 8014fec:	f884 005c 	strb.w	r0, [r4, #92]	@ 0x5c
 8014ff0:	2002      	movs	r0, #2
 8014ff2:	65a4      	str	r4, [r4, #88]	@ 0x58
 8014ff4:	f00c fb4d 	bl	8021692 <emngr_post_event>
 8014ff8:	2500      	movs	r5, #0
 8014ffa:	e7a3      	b.n	8014f44 <llcp_le_set_phy_cmd+0x44>

08014ffc <llcp_cntrl_pkt_init>:
 8014ffc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015000:	460c      	mov	r4, r1
 8015002:	f649 615c 	movw	r1, #40540	@ 0x9e5c
 8015006:	4681      	mov	r9, r0
 8015008:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 801500c:	2000      	movs	r0, #0
 801500e:	461f      	mov	r7, r3
 8015010:	4692      	mov	sl, r2
 8015012:	2500      	movs	r5, #0
 8015014:	f009 fbfb 	bl	801e80e <allocate_data_packet>
 8015018:	2800      	cmp	r0, #0
 801501a:	d070      	beq.n	80150fe <llcp_cntrl_pkt_init+0x102>
 801501c:	4606      	mov	r6, r0
 801501e:	f1ba 0f02 	cmp.w	sl, #2
 8015022:	d105      	bne.n	8015030 <llcp_cntrl_pkt_init+0x34>
 8015024:	8b60      	ldrh	r0, [r4, #26]
 8015026:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801502a:	ea4f 1880 	mov.w	r8, r0, lsl #6
 801502e:	e00c      	b.n	801504a <llcp_cntrl_pkt_init+0x4e>
 8015030:	f648 0800 	movw	r8, #34816	@ 0x8800
 8015034:	f2c0 0813 	movt	r8, #19
 8015038:	b337      	cbz	r7, 8015088 <llcp_cntrl_pkt_init+0x8c>
 801503a:	f8d4 00c8 	ldr.w	r0, [r4, #200]	@ 0xc8
 801503e:	2101      	movs	r1, #1
 8015040:	fab0 f080 	clz	r0, r0
 8015044:	0940      	lsrs	r0, r0, #5
 8015046:	f00a fbec 	bl	801f822 <bsp_assert>
 801504a:	2001      	movs	r0, #1
 801504c:	f884 0064 	strb.w	r0, [r4, #100]	@ 0x64
 8015050:	f8d4 00c8 	ldr.w	r0, [r4, #200]	@ 0xc8
 8015054:	2122      	movs	r1, #34	@ 0x22
 8015056:	6624      	str	r4, [r4, #96]	@ 0x60
 8015058:	f884 1128 	strb.w	r1, [r4, #296]	@ 0x128
 801505c:	b108      	cbz	r0, 8015062 <llcp_cntrl_pkt_init+0x66>
 801505e:	2700      	movs	r7, #0
 8015060:	e013      	b.n	801508a <llcp_cntrl_pkt_init+0x8e>
 8015062:	f645 6043 	movw	r0, #24131	@ 0x5e43
 8015066:	f104 0260 	add.w	r2, r4, #96	@ 0x60
 801506a:	f6c0 0001 	movt	r0, #2049	@ 0x801
 801506e:	2100      	movs	r1, #0
 8015070:	2700      	movs	r7, #0
 8015072:	f00c feab 	bl	8021dcc <os_timer_create>
 8015076:	2101      	movs	r1, #1
 8015078:	f8c4 00c8 	str.w	r0, [r4, #200]	@ 0xc8
 801507c:	2800      	cmp	r0, #0
 801507e:	bf18      	it	ne
 8015080:	2001      	movne	r0, #1
 8015082:	f00a fbce 	bl	801f822 <bsp_assert>
 8015086:	e000      	b.n	801508a <llcp_cntrl_pkt_init+0x8e>
 8015088:	2701      	movs	r7, #1
 801508a:	4650      	mov	r0, sl
 801508c:	4649      	mov	r1, r9
 801508e:	4632      	mov	r2, r6
 8015090:	f009 f868 	bl	801e164 <pdu_trnsprt_hndlr_form_cntrl_pdu>
 8015094:	f1ba 0f17 	cmp.w	sl, #23
 8015098:	d81f      	bhi.n	80150da <llcp_cntrl_pkt_init+0xde>
 801509a:	2001      	movs	r0, #1
 801509c:	f248 0100 	movw	r1, #32768	@ 0x8000
 80150a0:	fa00 f00a 	lsl.w	r0, r0, sl
 80150a4:	f2c0 0181 	movt	r1, #129	@ 0x81
 80150a8:	4208      	tst	r0, r1
 80150aa:	d10c      	bne.n	80150c6 <llcp_cntrl_pkt_init+0xca>
 80150ac:	f410 3f08 	tst.w	r0, #139264	@ 0x22000
 80150b0:	d013      	beq.n	80150da <llcp_cntrl_pkt_init+0xde>
 80150b2:	4620      	mov	r0, r4
 80150b4:	f850 1fd0 	ldr.w	r1, [r0, #208]!
 80150b8:	b109      	cbz	r1, 80150be <llcp_cntrl_pkt_init+0xc2>
 80150ba:	f00d f839 	bl	8022130 <os_timer_stop_free>
 80150be:	f1aa 000f 	sub.w	r0, sl, #15
 80150c2:	2801      	cmp	r0, #1
 80150c4:	d809      	bhi.n	80150da <llcp_cntrl_pkt_init+0xde>
 80150c6:	7bb0      	ldrb	r0, [r6, #14]
 80150c8:	f040 0102 	orr.w	r1, r0, #2
 80150cc:	f8d4 00c0 	ldr.w	r0, [r4, #192]	@ 0xc0
 80150d0:	73b1      	strb	r1, [r6, #14]
 80150d2:	4631      	mov	r1, r6
 80150d4:	f7fd fd1f 	bl	8012b16 <evnt_schdlr_add_data_pkt>
 80150d8:	e004      	b.n	80150e4 <llcp_cntrl_pkt_init+0xe8>
 80150da:	f8d4 00c0 	ldr.w	r0, [r4, #192]	@ 0xc0
 80150de:	4631      	mov	r1, r6
 80150e0:	f7fd fd80 	bl	8012be4 <evnt_schdlr_add_ctrl_pkt>
 80150e4:	4605      	mov	r5, r0
 80150e6:	fab0 f080 	clz	r0, r0
 80150ea:	0940      	lsrs	r0, r0, #5
 80150ec:	2101      	movs	r1, #1
 80150ee:	f00a fb98 	bl	801f822 <bsp_assert>
 80150f2:	b927      	cbnz	r7, 80150fe <llcp_cntrl_pkt_init+0x102>
 80150f4:	f8d4 00c8 	ldr.w	r0, [r4, #200]	@ 0xc8
 80150f8:	4641      	mov	r1, r8
 80150fa:	f00c fee0 	bl	8021ebe <os_timer_start>
 80150fe:	4628      	mov	r0, r5
 8015100:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08015104 <llcp_data_length_update>:
 8015104:	b510      	push	{r4, lr}
 8015106:	b08c      	sub	sp, #48	@ 0x30
 8015108:	2807      	cmp	r0, #7
 801510a:	d80d      	bhi.n	8015128 <llcp_data_length_update+0x24>
 801510c:	460b      	mov	r3, r1
 801510e:	f649 6164 	movw	r1, #40548	@ 0x9e64
 8015112:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8015116:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 801511a:	b129      	cbz	r1, 8015128 <llcp_data_length_update+0x24>
 801511c:	f891 0046 	ldrb.w	r0, [r1, #70]	@ 0x46
 8015120:	0680      	lsls	r0, r0, #26
 8015122:	d404      	bmi.n	801512e <llcp_data_length_update+0x2a>
 8015124:	201a      	movs	r0, #26
 8015126:	e000      	b.n	801512a <llcp_data_length_update+0x26>
 8015128:	2002      	movs	r0, #2
 801512a:	b00c      	add	sp, #48	@ 0x30
 801512c:	bd10      	pop	{r4, pc}
 801512e:	f891 0123 	ldrb.w	r0, [r1, #291]	@ 0x123
 8015132:	b108      	cbz	r0, 8015138 <llcp_data_length_update+0x34>
 8015134:	203a      	movs	r0, #58	@ 0x3a
 8015136:	e7f8      	b.n	801512a <llcp_data_length_update+0x26>
 8015138:	2009      	movs	r0, #9
 801513a:	f881 0123 	strb.w	r0, [r1, #291]	@ 0x123
 801513e:	f891 004e 	ldrb.w	r0, [r1, #78]	@ 0x4e
 8015142:	f04f 0cfb 	mov.w	ip, #251	@ 0xfb
 8015146:	f8a1 c0a0 	strh.w	ip, [r1, #160]	@ 0xa0
 801514a:	b118      	cbz	r0, 8015154 <llcp_data_length_update+0x50>
 801514c:	f891 0047 	ldrb.w	r0, [r1, #71]	@ 0x47
 8015150:	0700      	lsls	r0, r0, #28
 8015152:	d404      	bmi.n	801515e <llcp_data_length_update+0x5a>
 8015154:	f640 0e48 	movw	lr, #2120	@ 0x848
 8015158:	f640 0048 	movw	r0, #2120	@ 0x848
 801515c:	e005      	b.n	801516a <llcp_data_length_update+0x66>
 801515e:	f44f 7074 	mov.w	r0, #976	@ 0x3d0
 8015162:	eb00 1083 	add.w	r0, r0, r3, lsl #6
 8015166:	f244 2e90 	movw	lr, #17040	@ 0x4290
 801516a:	4290      	cmp	r0, r2
 801516c:	bf38      	it	cc
 801516e:	4602      	movcc	r2, r0
 8015170:	b290      	uxth	r0, r2
 8015172:	f06f 040e 	mvn.w	r4, #14
 8015176:	eb04 0090 	add.w	r0, r4, r0, lsr #2
 801517a:	f8a1 e0a2 	strh.w	lr, [r1, #162]	@ 0xa2
 801517e:	b280      	uxth	r0, r0
 8015180:	f8a1 20a6 	strh.w	r2, [r1, #166]	@ 0xa6
 8015184:	4298      	cmp	r0, r3
 8015186:	bf38      	it	cc
 8015188:	4603      	movcc	r3, r0
 801518a:	2bfb      	cmp	r3, #251	@ 0xfb
 801518c:	bf28      	it	cs
 801518e:	4663      	movcs	r3, ip
 8015190:	f8a1 30a4 	strh.w	r3, [r1, #164]	@ 0xa4
 8015194:	f8ad 3008 	strh.w	r3, [sp, #8]
 8015198:	f8ad 200a 	strh.w	r2, [sp, #10]
 801519c:	a801      	add	r0, sp, #4
 801519e:	2214      	movs	r2, #20
 80151a0:	2301      	movs	r3, #1
 80151a2:	f8ad c004 	strh.w	ip, [sp, #4]
 80151a6:	f8ad e006 	strh.w	lr, [sp, #6]
 80151aa:	f7ff ff27 	bl	8014ffc <llcp_cntrl_pkt_init>
 80151ae:	e7bc      	b.n	801512a <llcp_data_length_update+0x26>

080151b0 <llcp_data_length_update_received>:
 80151b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80151b4:	b08e      	sub	sp, #56	@ 0x38
 80151b6:	4604      	mov	r4, r0
 80151b8:	f890 004e 	ldrb.w	r0, [r0, #78]	@ 0x4e
 80151bc:	880b      	ldrh	r3, [r1, #0]
 80151be:	884a      	ldrh	r2, [r1, #2]
 80151c0:	888f      	ldrh	r7, [r1, #4]
 80151c2:	88ce      	ldrh	r6, [r1, #6]
 80151c4:	f104 08a8 	add.w	r8, r4, #168	@ 0xa8
 80151c8:	b140      	cbz	r0, 80151dc <llcp_data_length_update_received+0x2c>
 80151ca:	f894 0047 	ldrb.w	r0, [r4, #71]	@ 0x47
 80151ce:	0700      	lsls	r0, r0, #28
 80151d0:	f244 2090 	movw	r0, #17040	@ 0x4290
 80151d4:	bf58      	it	pl
 80151d6:	f640 0048 	movwpl	r0, #2120	@ 0x848
 80151da:	e001      	b.n	80151e0 <llcp_data_length_update_received+0x30>
 80151dc:	f640 0048 	movw	r0, #2120	@ 0x848
 80151e0:	2ffb      	cmp	r7, #251	@ 0xfb
 80151e2:	f04f 0afb 	mov.w	sl, #251	@ 0xfb
 80151e6:	bf28      	it	cs
 80151e8:	4657      	movcs	r7, sl
 80151ea:	2f1b      	cmp	r7, #27
 80151ec:	f04f 051b 	mov.w	r5, #27
 80151f0:	bf98      	it	ls
 80151f2:	462f      	movls	r7, r5
 80151f4:	42b0      	cmp	r0, r6
 80151f6:	4631      	mov	r1, r6
 80151f8:	bf38      	it	cc
 80151fa:	4601      	movcc	r1, r0
 80151fc:	f5b6 7fa4 	cmp.w	r6, #328	@ 0x148
 8015200:	bf38      	it	cc
 8015202:	f44f 71a4 	movcc.w	r1, #328	@ 0x148
 8015206:	2bfb      	cmp	r3, #251	@ 0xfb
 8015208:	bf38      	it	cc
 801520a:	469a      	movcc	sl, r3
 801520c:	f1ba 0f1b 	cmp.w	sl, #27
 8015210:	bf98      	it	ls
 8015212:	46aa      	movls	sl, r5
 8015214:	4290      	cmp	r0, r2
 8015216:	bf28      	it	cs
 8015218:	4610      	movcs	r0, r2
 801521a:	f5b2 7fa4 	cmp.w	r2, #328	@ 0x148
 801521e:	f894 2123 	ldrb.w	r2, [r4, #291]	@ 0x123
 8015222:	bf38      	it	cc
 8015224:	f44f 70a4 	movcc.w	r0, #328	@ 0x148
 8015228:	2a09      	cmp	r2, #9
 801522a:	d102      	bne.n	8015232 <llcp_data_length_update_received+0x82>
 801522c:	4606      	mov	r6, r0
 801522e:	460d      	mov	r5, r1
 8015230:	e025      	b.n	801527e <llcp_data_length_update_received+0xce>
 8015232:	f44f 7274 	mov.w	r2, #976	@ 0x3d0
 8015236:	eb02 1387 	add.w	r3, r2, r7, lsl #6
 801523a:	eb02 128a 	add.w	r2, r2, sl, lsl #6
 801523e:	b29d      	uxth	r5, r3
 8015240:	b296      	uxth	r6, r2
 8015242:	42a9      	cmp	r1, r5
 8015244:	bf38      	it	cc
 8015246:	460d      	movcc	r5, r1
 8015248:	42b0      	cmp	r0, r6
 801524a:	bf38      	it	cc
 801524c:	4606      	movcc	r6, r0
 801524e:	f06f 000e 	mvn.w	r0, #14
 8015252:	eb00 0195 	add.w	r1, r0, r5, lsr #2
 8015256:	eb00 0096 	add.w	r0, r0, r6, lsr #2
 801525a:	29fc      	cmp	r1, #252	@ 0xfc
 801525c:	f8a4 50a2 	strh.w	r5, [r4, #162]	@ 0xa2
 8015260:	f8a4 60a6 	strh.w	r6, [r4, #166]	@ 0xa6
 8015264:	f8a4 10a0 	strh.w	r1, [r4, #160]	@ 0xa0
 8015268:	f8a4 00a4 	strh.w	r0, [r4, #164]	@ 0xa4
 801526c:	bf24      	itt	cs
 801526e:	21fb      	movcs	r1, #251	@ 0xfb
 8015270:	f8a4 10a0 	strhcs.w	r1, [r4, #160]	@ 0xa0
 8015274:	28fc      	cmp	r0, #252	@ 0xfc
 8015276:	bf24      	itt	cs
 8015278:	20fb      	movcs	r0, #251	@ 0xfb
 801527a:	f8a4 00a4 	strhcs.w	r0, [r4, #164]	@ 0xa4
 801527e:	f10d 0904 	add.w	r9, sp, #4
 8015282:	4648      	mov	r0, r9
 8015284:	4641      	mov	r1, r8
 8015286:	2208      	movs	r2, #8
 8015288:	f00f f95e 	bl	8024548 <ble_memcpy>
 801528c:	f8b4 00a6 	ldrh.w	r0, [r4, #166]	@ 0xa6
 8015290:	f44f 6129 	mov.w	r1, #2704	@ 0xa90
 8015294:	42b0      	cmp	r0, r6
 8015296:	bf38      	it	cc
 8015298:	4606      	movcc	r6, r0
 801529a:	f8b4 00a2 	ldrh.w	r0, [r4, #162]	@ 0xa2
 801529e:	f8a4 60b0 	strh.w	r6, [r4, #176]	@ 0xb0
 80152a2:	42a8      	cmp	r0, r5
 80152a4:	bf38      	it	cc
 80152a6:	4605      	movcc	r5, r0
 80152a8:	f8a4 50b4 	strh.w	r5, [r4, #180]	@ 0xb4
 80152ac:	f5b5 6f29 	cmp.w	r5, #2704	@ 0xa90
 80152b0:	bf88      	it	hi
 80152b2:	4629      	movhi	r1, r5
 80152b4:	f894 212d 	ldrb.w	r2, [r4, #301]	@ 0x12d
 80152b8:	f8a4 10b6 	strh.w	r1, [r4, #182]	@ 0xb6
 80152bc:	2a04      	cmp	r2, #4
 80152be:	f8b4 20a0 	ldrh.w	r2, [r4, #160]	@ 0xa0
 80152c2:	bf18      	it	ne
 80152c4:	4629      	movne	r1, r5
 80152c6:	f240 45e2 	movw	r5, #1250	@ 0x4e2
 80152ca:	42ba      	cmp	r2, r7
 80152cc:	bf38      	it	cc
 80152ce:	4617      	movcc	r7, r2
 80152d0:	f44f 7274 	mov.w	r2, #976	@ 0x3d0
 80152d4:	eb02 1287 	add.w	r2, r2, r7, lsl #6
 80152d8:	f894 312c 	ldrb.w	r3, [r4, #300]	@ 0x12c
 80152dc:	b292      	uxth	r2, r2
 80152de:	f8a4 10aa 	strh.w	r1, [r4, #170]	@ 0xaa
 80152e2:	428a      	cmp	r2, r1
 80152e4:	bf38      	it	cc
 80152e6:	4611      	movcc	r1, r2
 80152e8:	8ae2      	ldrh	r2, [r4, #22]
 80152ea:	f501 7196 	add.w	r1, r1, #300	@ 0x12c
 80152ee:	b289      	uxth	r1, r1
 80152f0:	fb02 f205 	mul.w	r2, r2, r5
 80152f4:	f8a4 70a8 	strh.w	r7, [r4, #168]	@ 0xa8
 80152f8:	1a51      	subs	r1, r2, r1
 80152fa:	f04f 0700 	mov.w	r7, #0
 80152fe:	bf38      	it	cc
 8015300:	4639      	movcc	r1, r7
 8015302:	42b1      	cmp	r1, r6
 8015304:	bf28      	it	cs
 8015306:	4631      	movcs	r1, r6
 8015308:	f44f 6029 	mov.w	r0, #2704	@ 0xa90
 801530c:	f5b1 6f29 	cmp.w	r1, #2704	@ 0xa90
 8015310:	bf98      	it	ls
 8015312:	4601      	movls	r1, r0
 8015314:	f8a4 10b2 	strh.w	r1, [r4, #178]	@ 0xb2
 8015318:	f8a4 10b8 	strh.w	r1, [r4, #184]	@ 0xb8
 801531c:	2b04      	cmp	r3, #4
 801531e:	bf18      	it	ne
 8015320:	4631      	movne	r1, r6
 8015322:	f8b4 00a4 	ldrh.w	r0, [r4, #164]	@ 0xa4
 8015326:	f8a4 10ae 	strh.w	r1, [r4, #174]	@ 0xae
 801532a:	4550      	cmp	r0, sl
 801532c:	bf38      	it	cc
 801532e:	4682      	movcc	sl, r0
 8015330:	4648      	mov	r0, r9
 8015332:	4641      	mov	r1, r8
 8015334:	2208      	movs	r2, #8
 8015336:	f8a4 a0ac 	strh.w	sl, [r4, #172]	@ 0xac
 801533a:	f00f f98d 	bl	8024658 <ble_memcmp>
 801533e:	f894 1123 	ldrb.w	r1, [r4, #291]	@ 0x123
 8015342:	4605      	mov	r5, r0
 8015344:	2909      	cmp	r1, #9
 8015346:	d108      	bne.n	801535a <llcp_data_length_update_received+0x1aa>
 8015348:	f104 00c8 	add.w	r0, r4, #200	@ 0xc8
 801534c:	f00c fef0 	bl	8022130 <os_timer_stop_free>
 8015350:	f884 7123 	strb.w	r7, [r4, #291]	@ 0x123
 8015354:	f884 7128 	strb.w	r7, [r4, #296]	@ 0x128
 8015358:	e009      	b.n	801536e <llcp_data_length_update_received+0x1be>
 801535a:	e9d4 0128 	ldrd	r0, r1, [r4, #160]	@ 0xa0
 801535e:	2215      	movs	r2, #21
 8015360:	2300      	movs	r3, #0
 8015362:	e9cd 0103 	strd	r0, r1, [sp, #12]
 8015366:	a803      	add	r0, sp, #12
 8015368:	4621      	mov	r1, r4
 801536a:	f7ff fe47 	bl	8014ffc <llcp_cntrl_pkt_init>
 801536e:	b1dd      	cbz	r5, 80153a8 <llcp_data_length_update_received+0x1f8>
 8015370:	f8b4 10ae 	ldrh.w	r1, [r4, #174]	@ 0xae
 8015374:	f8b4 20aa 	ldrh.w	r2, [r4, #170]	@ 0xaa
 8015378:	f8d4 00c0 	ldr.w	r0, [r4, #192]	@ 0xc0
 801537c:	4411      	add	r1, r2
 801537e:	f7fd fc83 	bl	8012c88 <evnt_schdlr_updt_conn_evnt_durn>
 8015382:	f646 5038 	movw	r0, #27960	@ 0x6d38
 8015386:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801538a:	6800      	ldr	r0, [r0, #0]
 801538c:	6b07      	ldr	r7, [r0, #48]	@ 0x30
 801538e:	b15f      	cbz	r7, 80153a8 <llcp_data_length_update_received+0x1f8>
 8015390:	f8b4 00de 	ldrh.w	r0, [r4, #222]	@ 0xde
 8015394:	f8b4 10ac 	ldrh.w	r1, [r4, #172]	@ 0xac
 8015398:	f8b4 20ae 	ldrh.w	r2, [r4, #174]	@ 0xae
 801539c:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	@ 0xa8
 80153a0:	f8b4 60aa 	ldrh.w	r6, [r4, #170]	@ 0xaa
 80153a4:	9600      	str	r6, [sp, #0]
 80153a6:	47b8      	blx	r7
 80153a8:	2000      	movs	r0, #0
 80153aa:	b00e      	add	sp, #56	@ 0x38
 80153ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080153b0 <llcp_encryption_req>:
 80153b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80153b4:	b08e      	sub	sp, #56	@ 0x38
 80153b6:	2808      	cmp	r0, #8
 80153b8:	d20c      	bcs.n	80153d4 <llcp_encryption_req+0x24>
 80153ba:	4605      	mov	r5, r0
 80153bc:	f649 6064 	movw	r0, #40548	@ 0x9e64
 80153c0:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80153c4:	f850 4025 	ldr.w	r4, [r0, r5, lsl #2]
 80153c8:	b124      	cbz	r4, 80153d4 <llcp_encryption_req+0x24>
 80153ca:	f894 0125 	ldrb.w	r0, [r4, #293]	@ 0x125
 80153ce:	b130      	cbz	r0, 80153de <llcp_encryption_req+0x2e>
 80153d0:	2412      	movs	r4, #18
 80153d2:	e000      	b.n	80153d6 <llcp_encryption_req+0x26>
 80153d4:	2402      	movs	r4, #2
 80153d6:	4620      	mov	r0, r4
 80153d8:	b00e      	add	sp, #56	@ 0x38
 80153da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80153de:	a801      	add	r0, sp, #4
 80153e0:	461f      	mov	r7, r3
 80153e2:	4690      	mov	r8, r2
 80153e4:	460e      	mov	r6, r1
 80153e6:	f011 f808 	bl	80263fa <db_get_le_feature_info>
 80153ea:	f894 0046 	ldrb.w	r0, [r4, #70]	@ 0x46
 80153ee:	07c0      	lsls	r0, r0, #31
 80153f0:	d101      	bne.n	80153f6 <llcp_encryption_req+0x46>
 80153f2:	241a      	movs	r4, #26
 80153f4:	e7ef      	b.n	80153d6 <llcp_encryption_req+0x26>
 80153f6:	f011 f823 	bl	8026440 <db_check_encryption>
 80153fa:	b360      	cbz	r0, 8015456 <llcp_encryption_req+0xa6>
 80153fc:	f894 0123 	ldrb.w	r0, [r4, #291]	@ 0x123
 8015400:	2807      	cmp	r0, #7
 8015402:	d007      	beq.n	8015414 <llcp_encryption_req+0x64>
 8015404:	bb48      	cbnz	r0, 801545a <llcp_encryption_req+0xaa>
 8015406:	2001      	movs	r0, #1
 8015408:	f884 005c 	strb.w	r0, [r4, #92]	@ 0x5c
 801540c:	4620      	mov	r0, r4
 801540e:	2107      	movs	r1, #7
 8015410:	f000 f864 	bl	80154dc <llcp_cntrl_init>
 8015414:	f894 0122 	ldrb.w	r0, [r4, #290]	@ 0x122
 8015418:	b3a0      	cbz	r0, 8015484 <llcp_encryption_req+0xd4>
 801541a:	2008      	movs	r0, #8
 801541c:	f884 011e 	strb.w	r0, [r4, #286]	@ 0x11e
 8015420:	f504 7083 	add.w	r0, r4, #262	@ 0x106
 8015424:	4639      	mov	r1, r7
 8015426:	2210      	movs	r2, #16
 8015428:	f00f f88e 	bl	8024548 <ble_memcpy>
 801542c:	f504 708b 	add.w	r0, r4, #278	@ 0x116
 8015430:	4631      	mov	r1, r6
 8015432:	2208      	movs	r2, #8
 8015434:	f00f f888 	bl	8024548 <ble_memcpy>
 8015438:	2000      	movs	r0, #0
 801543a:	4621      	mov	r1, r4
 801543c:	220a      	movs	r2, #10
 801543e:	2300      	movs	r3, #0
 8015440:	f8a4 8104 	strh.w	r8, [r4, #260]	@ 0x104
 8015444:	f7ff fdda 	bl	8014ffc <llcp_cntrl_pkt_init>
 8015448:	f8d4 10d4 	ldr.w	r1, [r4, #212]	@ 0xd4
 801544c:	4604      	mov	r4, r0
 801544e:	4608      	mov	r0, r1
 8015450:	f00c fdf0 	bl	8022034 <os_timer_stop>
 8015454:	e7bf      	b.n	80153d6 <llcp_encryption_req+0x26>
 8015456:	2411      	movs	r4, #17
 8015458:	e7bd      	b.n	80153d6 <llcp_encryption_req+0x26>
 801545a:	f504 7083 	add.w	r0, r4, #262	@ 0x106
 801545e:	4639      	mov	r1, r7
 8015460:	2210      	movs	r2, #16
 8015462:	f00f f871 	bl	8024548 <ble_memcpy>
 8015466:	f504 708b 	add.w	r0, r4, #278	@ 0x116
 801546a:	4631      	mov	r1, r6
 801546c:	2208      	movs	r2, #8
 801546e:	f00f f86b 	bl	8024548 <ble_memcpy>
 8015472:	2005      	movs	r0, #5
 8015474:	4629      	mov	r1, r5
 8015476:	2200      	movs	r2, #0
 8015478:	f8a4 8104 	strh.w	r8, [r4, #260]	@ 0x104
 801547c:	f000 f862 	bl	8015544 <llcp_enqueue_host_control>
 8015480:	4604      	mov	r4, r0
 8015482:	e7a8      	b.n	80153d6 <llcp_encryption_req+0x26>
 8015484:	f504 7083 	add.w	r0, r4, #262	@ 0x106
 8015488:	4639      	mov	r1, r7
 801548a:	2210      	movs	r2, #16
 801548c:	f00f f85c 	bl	8024548 <ble_memcpy>
 8015490:	ad03      	add	r5, sp, #12
 8015492:	4628      	mov	r0, r5
 8015494:	4631      	mov	r1, r6
 8015496:	2208      	movs	r2, #8
 8015498:	f00f f856 	bl	8024548 <ble_memcpy>
 801549c:	f105 0010 	add.w	r0, r5, #16
 80154a0:	2104      	movs	r1, #4
 80154a2:	f8ad 8020 	strh.w	r8, [sp, #32]
 80154a6:	f002 fe4a 	bl	801813e <llhwc_gen_rnd_num>
 80154aa:	b928      	cbnz	r0, 80154b8 <llcp_encryption_req+0x108>
 80154ac:	3508      	adds	r5, #8
 80154ae:	4628      	mov	r0, r5
 80154b0:	2108      	movs	r1, #8
 80154b2:	f002 fe44 	bl	801813e <llhwc_gen_rnd_num>
 80154b6:	b108      	cbz	r0, 80154bc <llcp_encryption_req+0x10c>
 80154b8:	243a      	movs	r4, #58	@ 0x3a
 80154ba:	e78c      	b.n	80153d6 <llcp_encryption_req+0x26>
 80154bc:	9807      	ldr	r0, [sp, #28]
 80154be:	4629      	mov	r1, r5
 80154c0:	f8c4 00e0 	str.w	r0, [r4, #224]	@ 0xe0
 80154c4:	f104 00f0 	add.w	r0, r4, #240	@ 0xf0
 80154c8:	2208      	movs	r2, #8
 80154ca:	f00f f83d 	bl	8024548 <ble_memcpy>
 80154ce:	a803      	add	r0, sp, #12
 80154d0:	4621      	mov	r1, r4
 80154d2:	2203      	movs	r2, #3
 80154d4:	2300      	movs	r3, #0
 80154d6:	f7ff fd91 	bl	8014ffc <llcp_cntrl_pkt_init>
 80154da:	e7d1      	b.n	8015480 <llcp_encryption_req+0xd0>

080154dc <llcp_cntrl_init>:
 80154dc:	b5b0      	push	{r4, r5, r7, lr}
 80154de:	f890 205c 	ldrb.w	r2, [r0, #92]	@ 0x5c
 80154e2:	f100 0458 	add.w	r4, r0, #88	@ 0x58
 80154e6:	2a01      	cmp	r2, #1
 80154e8:	f04f 0222 	mov.w	r2, #34	@ 0x22
 80154ec:	6580      	str	r0, [r0, #88]	@ 0x58
 80154ee:	f880 2128 	strb.w	r2, [r0, #296]	@ 0x128
 80154f2:	d104      	bne.n	80154fe <llcp_cntrl_init+0x22>
 80154f4:	f880 1123 	strb.w	r1, [r0, #291]	@ 0x123
 80154f8:	f100 05c8 	add.w	r5, r0, #200	@ 0xc8
 80154fc:	e003      	b.n	8015506 <llcp_cntrl_init+0x2a>
 80154fe:	f100 05d0 	add.w	r5, r0, #208	@ 0xd0
 8015502:	f880 1124 	strb.w	r1, [r0, #292]	@ 0x124
 8015506:	6828      	ldr	r0, [r5, #0]
 8015508:	2101      	movs	r1, #1
 801550a:	fab0 f080 	clz	r0, r0
 801550e:	0940      	lsrs	r0, r0, #5
 8015510:	f00a f987 	bl	801f822 <bsp_assert>
 8015514:	f645 6043 	movw	r0, #24131	@ 0x5e43
 8015518:	f6c0 0001 	movt	r0, #2049	@ 0x801
 801551c:	2100      	movs	r1, #0
 801551e:	4622      	mov	r2, r4
 8015520:	f00c fc54 	bl	8021dcc <os_timer_create>
 8015524:	2101      	movs	r1, #1
 8015526:	6028      	str	r0, [r5, #0]
 8015528:	2800      	cmp	r0, #0
 801552a:	bf18      	it	ne
 801552c:	2001      	movne	r0, #1
 801552e:	f00a f978 	bl	801f822 <bsp_assert>
 8015532:	6828      	ldr	r0, [r5, #0]
 8015534:	f648 0100 	movw	r1, #34816	@ 0x8800
 8015538:	f2c0 0113 	movt	r1, #19
 801553c:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8015540:	f00c bcbd 	b.w	8021ebe <os_timer_start>

08015544 <llcp_enqueue_host_control>:
 8015544:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015546:	b081      	sub	sp, #4
 8015548:	4605      	mov	r5, r0
 801554a:	f649 6004 	movw	r0, #40452	@ 0x9e04
 801554e:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8015552:	4617      	mov	r7, r2
 8015554:	460e      	mov	r6, r1
 8015556:	f00c fa71 	bl	8021a3c <os_mem_pool_alloc>
 801555a:	b1f0      	cbz	r0, 801559a <llcp_enqueue_host_control+0x56>
 801555c:	4604      	mov	r4, r0
 801555e:	b127      	cbz	r7, 801556a <llcp_enqueue_host_control+0x26>
 8015560:	1d20      	adds	r0, r4, #4
 8015562:	4639      	mov	r1, r7
 8015564:	2210      	movs	r2, #16
 8015566:	f00e ffef 	bl	8024548 <ble_memcpy>
 801556a:	2000      	movs	r0, #0
 801556c:	6160      	str	r0, [r4, #20]
 801556e:	2003      	movs	r0, #3
 8015570:	8066      	strh	r6, [r4, #2]
 8015572:	7025      	strb	r5, [r4, #0]
 8015574:	f00a f9b3 	bl	801f8de <disable_specific_irq>
 8015578:	f649 6084 	movw	r0, #40580	@ 0x9e84
 801557c:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8015580:	6801      	ldr	r1, [r0, #0]
 8015582:	b121      	cbz	r1, 801558e <llcp_enqueue_host_control+0x4a>
 8015584:	4608      	mov	r0, r1
 8015586:	6949      	ldr	r1, [r1, #20]
 8015588:	2900      	cmp	r1, #0
 801558a:	d1fb      	bne.n	8015584 <llcp_enqueue_host_control+0x40>
 801558c:	3014      	adds	r0, #20
 801558e:	6004      	str	r4, [r0, #0]
 8015590:	2003      	movs	r0, #3
 8015592:	f00a f9a2 	bl	801f8da <enable_specific_irq>
 8015596:	2000      	movs	r0, #0
 8015598:	e000      	b.n	801559c <llcp_enqueue_host_control+0x58>
 801559a:	203a      	movs	r0, #58	@ 0x3a
 801559c:	b001      	add	sp, #4
 801559e:	bdf0      	pop	{r4, r5, r6, r7, pc}

080155a0 <llcp_enc_rsp_received>:
 80155a0:	b5b0      	push	{r4, r5, r7, lr}
 80155a2:	4604      	mov	r4, r0
 80155a4:	f890 0123 	ldrb.w	r0, [r0, #291]	@ 0x123
 80155a8:	2807      	cmp	r0, #7
 80155aa:	d11b      	bne.n	80155e4 <llcp_enc_rsp_received+0x44>
 80155ac:	20aa      	movs	r0, #170	@ 0xaa
 80155ae:	f884 011f 	strb.w	r0, [r4, #287]	@ 0x11f
 80155b2:	f851 0b04 	ldr.w	r0, [r1], #4
 80155b6:	2208      	movs	r2, #8
 80155b8:	f8c4 00e4 	str.w	r0, [r4, #228]	@ 0xe4
 80155bc:	f104 00f8 	add.w	r0, r4, #248	@ 0xf8
 80155c0:	f104 05f0 	add.w	r5, r4, #240	@ 0xf0
 80155c4:	f00e ffc0 	bl	8024548 <ble_memcpy>
 80155c8:	f504 7183 	add.w	r1, r4, #262	@ 0x106
 80155cc:	4628      	mov	r0, r5
 80155ce:	462a      	mov	r2, r5
 80155d0:	f002 feb5 	bl	801833e <llhwc_128_encrypt>
 80155d4:	4604      	mov	r4, r0
 80155d6:	fab0 f080 	clz	r0, r0
 80155da:	0940      	lsrs	r0, r0, #5
 80155dc:	2101      	movs	r1, #1
 80155de:	f00a f920 	bl	801f822 <bsp_assert>
 80155e2:	e000      	b.n	80155e6 <llcp_enc_rsp_received+0x46>
 80155e4:	2400      	movs	r4, #0
 80155e6:	4620      	mov	r0, r4
 80155e8:	bdb0      	pop	{r4, r5, r7, pc}

080155ea <llcp_enc_req_received>:
 80155ea:	b570      	push	{r4, r5, r6, lr}
 80155ec:	b08c      	sub	sp, #48	@ 0x30
 80155ee:	460d      	mov	r5, r1
 80155f0:	4604      	mov	r4, r0
 80155f2:	f010 ff25 	bl	8026440 <db_check_encryption>
 80155f6:	2800      	cmp	r0, #0
 80155f8:	d040      	beq.n	801567c <llcp_enc_req_received+0x92>
 80155fa:	f894 0125 	ldrb.w	r0, [r4, #293]	@ 0x125
 80155fe:	2801      	cmp	r0, #1
 8015600:	d145      	bne.n	801568e <llcp_enc_req_received+0xa4>
 8015602:	20aa      	movs	r0, #170	@ 0xaa
 8015604:	f884 011f 	strb.w	r0, [r4, #287]	@ 0x11f
 8015608:	2007      	movs	r0, #7
 801560a:	f884 005c 	strb.w	r0, [r4, #92]	@ 0x5c
 801560e:	4620      	mov	r0, r4
 8015610:	2107      	movs	r1, #7
 8015612:	f7ff ff63 	bl	80154dc <llcp_cntrl_init>
 8015616:	6928      	ldr	r0, [r5, #16]
 8015618:	f105 0108 	add.w	r1, r5, #8
 801561c:	f8c4 00e0 	str.w	r0, [r4, #224]	@ 0xe0
 8015620:	f104 00f0 	add.w	r0, r4, #240	@ 0xf0
 8015624:	2208      	movs	r2, #8
 8015626:	f00e ff8f 	bl	8024548 <ble_memcpy>
 801562a:	f504 7083 	add.w	r0, r4, #262	@ 0x106
 801562e:	4629      	mov	r1, r5
 8015630:	2208      	movs	r2, #8
 8015632:	f00e ff89 	bl	8024548 <ble_memcpy>
 8015636:	7d28      	ldrb	r0, [r5, #20]
 8015638:	2104      	movs	r1, #4
 801563a:	f884 010e 	strb.w	r0, [r4, #270]	@ 0x10e
 801563e:	7d68      	ldrb	r0, [r5, #21]
 8015640:	ad01      	add	r5, sp, #4
 8015642:	f884 010f 	strb.w	r0, [r4, #271]	@ 0x10f
 8015646:	4628      	mov	r0, r5
 8015648:	f002 fd79 	bl	801813e <llhwc_gen_rnd_num>
 801564c:	4606      	mov	r6, r0
 801564e:	b9f8      	cbnz	r0, 8015690 <llcp_enc_req_received+0xa6>
 8015650:	3504      	adds	r5, #4
 8015652:	4628      	mov	r0, r5
 8015654:	2108      	movs	r1, #8
 8015656:	f002 fd72 	bl	801813e <llhwc_gen_rnd_num>
 801565a:	4606      	mov	r6, r0
 801565c:	b9c0      	cbnz	r0, 8015690 <llcp_enc_req_received+0xa6>
 801565e:	9801      	ldr	r0, [sp, #4]
 8015660:	4629      	mov	r1, r5
 8015662:	f8c4 00e4 	str.w	r0, [r4, #228]	@ 0xe4
 8015666:	f104 00f8 	add.w	r0, r4, #248	@ 0xf8
 801566a:	2208      	movs	r2, #8
 801566c:	f00e ff6c 	bl	8024548 <ble_memcpy>
 8015670:	a801      	add	r0, sp, #4
 8015672:	4621      	mov	r1, r4
 8015674:	2204      	movs	r2, #4
 8015676:	2300      	movs	r3, #0
 8015678:	2600      	movs	r6, #0
 801567a:	e005      	b.n	8015688 <llcp_enc_req_received+0x9e>
 801567c:	261a      	movs	r6, #26
 801567e:	4628      	mov	r0, r5
 8015680:	4621      	mov	r1, r4
 8015682:	220d      	movs	r2, #13
 8015684:	2300      	movs	r3, #0
 8015686:	702e      	strb	r6, [r5, #0]
 8015688:	f7ff fcb8 	bl	8014ffc <llcp_cntrl_pkt_init>
 801568c:	e000      	b.n	8015690 <llcp_enc_req_received+0xa6>
 801568e:	2600      	movs	r6, #0
 8015690:	4630      	mov	r0, r6
 8015692:	b00c      	add	sp, #48	@ 0x30
 8015694:	bd70      	pop	{r4, r5, r6, pc}

08015696 <llcp_req_lng_trm_key>:
 8015696:	b510      	push	{r4, lr}
 8015698:	b08c      	sub	sp, #48	@ 0x30
 801569a:	4604      	mov	r4, r0
 801569c:	f890 0124 	ldrb.w	r0, [r0, #292]	@ 0x124
 80156a0:	2807      	cmp	r0, #7
 80156a2:	d114      	bne.n	80156ce <llcp_req_lng_trm_key+0x38>
 80156a4:	f646 5038 	movw	r0, #27960	@ 0x6d38
 80156a8:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80156ac:	6800      	ldr	r0, [r0, #0]
 80156ae:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 80156b0:	b123      	cbz	r3, 80156bc <llcp_req_lng_trm_key+0x26>
 80156b2:	f8b4 00de 	ldrh.w	r0, [r4, #222]	@ 0xde
 80156b6:	4798      	blx	r3
 80156b8:	b908      	cbnz	r0, 80156be <llcp_req_lng_trm_key+0x28>
 80156ba:	e008      	b.n	80156ce <llcp_req_lng_trm_key+0x38>
 80156bc:	2006      	movs	r0, #6
 80156be:	f88d 0004 	strb.w	r0, [sp, #4]
 80156c2:	a801      	add	r0, sp, #4
 80156c4:	4621      	mov	r1, r4
 80156c6:	220d      	movs	r2, #13
 80156c8:	2300      	movs	r3, #0
 80156ca:	f7ff fc97 	bl	8014ffc <llcp_cntrl_pkt_init>
 80156ce:	2000      	movs	r0, #0
 80156d0:	b00c      	add	sp, #48	@ 0x30
 80156d2:	bd10      	pop	{r4, pc}

080156d4 <llcp_ping_req>:
 80156d4:	4601      	mov	r1, r0
 80156d6:	f890 0122 	ldrb.w	r0, [r0, #290]	@ 0x122
 80156da:	2801      	cmp	r0, #1
 80156dc:	d102      	bne.n	80156e4 <llcp_ping_req+0x10>
 80156de:	f891 0123 	ldrb.w	r0, [r1, #291]	@ 0x123
 80156e2:	b108      	cbz	r0, 80156e8 <llcp_ping_req+0x14>
 80156e4:	203a      	movs	r0, #58	@ 0x3a
 80156e6:	4770      	bx	lr
 80156e8:	f04f 0c06 	mov.w	ip, #6
 80156ec:	2000      	movs	r0, #0
 80156ee:	2212      	movs	r2, #18
 80156f0:	2301      	movs	r3, #1
 80156f2:	f881 c123 	strb.w	ip, [r1, #291]	@ 0x123
 80156f6:	f7ff bc81 	b.w	8014ffc <llcp_cntrl_pkt_init>

080156fa <llcp_ping_received>:
 80156fa:	b5b0      	push	{r4, r5, r7, lr}
 80156fc:	b082      	sub	sp, #8
 80156fe:	4604      	mov	r4, r0
 8015700:	f890 0123 	ldrb.w	r0, [r0, #291]	@ 0x123
 8015704:	2806      	cmp	r0, #6
 8015706:	d11a      	bne.n	801573e <llcp_ping_received+0x44>
 8015708:	f104 00c8 	add.w	r0, r4, #200	@ 0xc8
 801570c:	f00c fd10 	bl	8022130 <os_timer_stop_free>
 8015710:	f8d4 00d4 	ldr.w	r0, [r4, #212]	@ 0xd4
 8015714:	2500      	movs	r5, #0
 8015716:	f884 5128 	strb.w	r5, [r4, #296]	@ 0x128
 801571a:	f00c fc8b 	bl	8022034 <os_timer_stop>
 801571e:	a901      	add	r1, sp, #4
 8015720:	4620      	mov	r0, r4
 8015722:	f010 f901 	bl	8025928 <conn_mngr_get_ping_timeout_value>
 8015726:	9901      	ldr	r1, [sp, #4]
 8015728:	f8d4 00d4 	ldr.w	r0, [r4, #212]	@ 0xd4
 801572c:	0149      	lsls	r1, r1, #5
 801572e:	f00c fbc6 	bl	8021ebe <os_timer_start>
 8015732:	200a      	movs	r0, #10
 8015734:	f884 006c 	strb.w	r0, [r4, #108]	@ 0x6c
 8015738:	f884 5123 	strb.w	r5, [r4, #291]	@ 0x123
 801573c:	e005      	b.n	801574a <llcp_ping_received+0x50>
 801573e:	2000      	movs	r0, #0
 8015740:	4621      	mov	r1, r4
 8015742:	2213      	movs	r2, #19
 8015744:	2300      	movs	r3, #0
 8015746:	f7ff fc59 	bl	8014ffc <llcp_cntrl_pkt_init>
 801574a:	2000      	movs	r0, #0
 801574c:	b002      	add	sp, #8
 801574e:	bdb0      	pop	{r4, r5, r7, pc}

08015750 <llcp_read_remote_version>:
 8015750:	b580      	push	{r7, lr}
 8015752:	2807      	cmp	r0, #7
 8015754:	d81c      	bhi.n	8015790 <llcp_read_remote_version+0x40>
 8015756:	f649 6164 	movw	r1, #40548	@ 0x9e64
 801575a:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 801575e:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 8015762:	b1a8      	cbz	r0, 8015790 <llcp_read_remote_version+0x40>
 8015764:	f890 2044 	ldrb.w	r2, [r0, #68]	@ 0x44
 8015768:	f890 1123 	ldrb.w	r1, [r0, #291]	@ 0x123
 801576c:	b19a      	cbz	r2, 8015796 <llcp_read_remote_version+0x46>
 801576e:	b1a9      	cbz	r1, 801579c <llcp_read_remote_version+0x4c>
 8015770:	2300      	movs	r3, #0
 8015772:	2201      	movs	r2, #1
 8015774:	18c1      	adds	r1, r0, r3
 8015776:	f891 313b 	ldrb.w	r3, [r1, #315]	@ 0x13b
 801577a:	2bff      	cmp	r3, #255	@ 0xff
 801577c:	d01b      	beq.n	80157b6 <llcp_read_remote_version+0x66>
 801577e:	07d2      	lsls	r2, r2, #31
 8015780:	f04f 0100 	mov.w	r1, #0
 8015784:	f04f 0301 	mov.w	r3, #1
 8015788:	f04f 0200 	mov.w	r2, #0
 801578c:	d1f2      	bne.n	8015774 <llcp_read_remote_version+0x24>
 801578e:	e000      	b.n	8015792 <llcp_read_remote_version+0x42>
 8015790:	2102      	movs	r1, #2
 8015792:	4608      	mov	r0, r1
 8015794:	bd80      	pop	{r7, pc}
 8015796:	b1a1      	cbz	r1, 80157c2 <llcp_read_remote_version+0x72>
 8015798:	213a      	movs	r1, #58	@ 0x3a
 801579a:	e7fa      	b.n	8015792 <llcp_read_remote_version+0x42>
 801579c:	2103      	movs	r1, #3
 801579e:	2204      	movs	r2, #4
 80157a0:	f880 1123 	strb.w	r1, [r0, #291]	@ 0x123
 80157a4:	f100 0160 	add.w	r1, r0, #96	@ 0x60
 80157a8:	6600      	str	r0, [r0, #96]	@ 0x60
 80157aa:	f880 2064 	strb.w	r2, [r0, #100]	@ 0x64
 80157ae:	2002      	movs	r0, #2
 80157b0:	f00b ff6f 	bl	8021692 <emngr_post_event>
 80157b4:	e003      	b.n	80157be <llcp_read_remote_version+0x6e>
 80157b6:	f201 103b 	addw	r0, r1, #315	@ 0x13b
 80157ba:	2103      	movs	r1, #3
 80157bc:	7001      	strb	r1, [r0, #0]
 80157be:	2100      	movs	r1, #0
 80157c0:	e7e7      	b.n	8015792 <llcp_read_remote_version+0x42>
 80157c2:	2203      	movs	r2, #3
 80157c4:	2101      	movs	r1, #1
 80157c6:	f880 2123 	strb.w	r2, [r0, #291]	@ 0x123
 80157ca:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80157ce:	f000 b800 	b.w	80157d2 <llcp_version_exchange_init>

080157d2 <llcp_version_exchange_init>:
 80157d2:	b5b0      	push	{r4, r5, r7, lr}
 80157d4:	b08e      	sub	sp, #56	@ 0x38
 80157d6:	4605      	mov	r5, r0
 80157d8:	a80c      	add	r0, sp, #48	@ 0x30
 80157da:	460c      	mov	r4, r1
 80157dc:	f010 fdfa 	bl	80263d4 <db_get_local_vrsn_info>
 80157e0:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80157e2:	f89d 1036 	ldrb.w	r1, [sp, #54]	@ 0x36
 80157e6:	ea4f 4030 	mov.w	r0, r0, ror #16
 80157ea:	9001      	str	r0, [sp, #4]
 80157ec:	f88d 1008 	strb.w	r1, [sp, #8]
 80157f0:	a801      	add	r0, sp, #4
 80157f2:	4629      	mov	r1, r5
 80157f4:	220c      	movs	r2, #12
 80157f6:	4623      	mov	r3, r4
 80157f8:	f7ff fc00 	bl	8014ffc <llcp_cntrl_pkt_init>
 80157fc:	b00e      	add	sp, #56	@ 0x38
 80157fe:	bdb0      	pop	{r4, r5, r7, pc}

08015800 <llcp_read_remote_version_received>:
 8015800:	b5b0      	push	{r4, r5, r7, lr}
 8015802:	b082      	sub	sp, #8
 8015804:	4604      	mov	r4, r0
 8015806:	f890 0123 	ldrb.w	r0, [r0, #291]	@ 0x123
 801580a:	460d      	mov	r5, r1
 801580c:	2803      	cmp	r0, #3
 801580e:	d11d      	bne.n	801584c <llcp_read_remote_version_received+0x4c>
 8015810:	f104 00c8 	add.w	r0, r4, #200	@ 0xc8
 8015814:	f00c fc8c 	bl	8022130 <os_timer_stop_free>
 8015818:	f646 5038 	movw	r0, #27960	@ 0x6d38
 801581c:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8015820:	6800      	ldr	r0, [r0, #0]
 8015822:	2100      	movs	r1, #0
 8015824:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 8015828:	f884 1123 	strb.w	r1, [r4, #291]	@ 0x123
 801582c:	f1bc 0f00 	cmp.w	ip, #0
 8015830:	f884 1128 	strb.w	r1, [r4, #296]	@ 0x128
 8015834:	d011      	beq.n	801585a <llcp_read_remote_version_received+0x5a>
 8015836:	f8b4 10de 	ldrh.w	r1, [r4, #222]	@ 0xde
 801583a:	792a      	ldrb	r2, [r5, #4]
 801583c:	882b      	ldrh	r3, [r5, #0]
 801583e:	f8b5 e002 	ldrh.w	lr, [r5, #2]
 8015842:	2000      	movs	r0, #0
 8015844:	f8cd e000 	str.w	lr, [sp]
 8015848:	47e0      	blx	ip
 801584a:	e006      	b.n	801585a <llcp_read_remote_version_received+0x5a>
 801584c:	f894 0044 	ldrb.w	r0, [r4, #68]	@ 0x44
 8015850:	b918      	cbnz	r0, 801585a <llcp_read_remote_version_received+0x5a>
 8015852:	4620      	mov	r0, r4
 8015854:	2100      	movs	r1, #0
 8015856:	f7ff ffbc 	bl	80157d2 <llcp_version_exchange_init>
 801585a:	7928      	ldrb	r0, [r5, #4]
 801585c:	f884 0044 	strb.w	r0, [r4, #68]	@ 0x44
 8015860:	8828      	ldrh	r0, [r5, #0]
 8015862:	f8a4 0040 	strh.w	r0, [r4, #64]	@ 0x40
 8015866:	8869      	ldrh	r1, [r5, #2]
 8015868:	2000      	movs	r0, #0
 801586a:	f8a4 1042 	strh.w	r1, [r4, #66]	@ 0x42
 801586e:	b002      	add	sp, #8
 8015870:	bdb0      	pop	{r4, r5, r7, pc}

08015872 <llcp_read_remote_features>:
 8015872:	b5b0      	push	{r4, r5, r7, lr}
 8015874:	b08c      	sub	sp, #48	@ 0x30
 8015876:	2808      	cmp	r0, #8
 8015878:	d21e      	bcs.n	80158b8 <llcp_read_remote_features+0x46>
 801587a:	460d      	mov	r5, r1
 801587c:	f649 6164 	movw	r1, #40548	@ 0x9e64
 8015880:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8015884:	f851 4020 	ldr.w	r4, [r1, r0, lsl #2]
 8015888:	b1b4      	cbz	r4, 80158b8 <llcp_read_remote_features+0x46>
 801588a:	a801      	add	r0, sp, #4
 801588c:	2100      	movs	r1, #0
 801588e:	2208      	movs	r2, #8
 8015890:	f00e feaa 	bl	80245e8 <ble_memset>
 8015894:	f894 004e 	ldrb.w	r0, [r4, #78]	@ 0x4e
 8015898:	b180      	cbz	r0, 80158bc <llcp_read_remote_features+0x4a>
 801589a:	b995      	cbnz	r5, 80158c2 <llcp_read_remote_features+0x50>
 801589c:	2004      	movs	r0, #4
 801589e:	f884 0123 	strb.w	r0, [r4, #291]	@ 0x123
 80158a2:	2005      	movs	r0, #5
 80158a4:	f104 0160 	add.w	r1, r4, #96	@ 0x60
 80158a8:	f884 0064 	strb.w	r0, [r4, #100]	@ 0x64
 80158ac:	2002      	movs	r0, #2
 80158ae:	6624      	str	r4, [r4, #96]	@ 0x60
 80158b0:	f00b feef 	bl	8021692 <emngr_post_event>
 80158b4:	2000      	movs	r0, #0
 80158b6:	e005      	b.n	80158c4 <llcp_read_remote_features+0x52>
 80158b8:	2002      	movs	r0, #2
 80158ba:	e003      	b.n	80158c4 <llcp_read_remote_features+0x52>
 80158bc:	f894 0123 	ldrb.w	r0, [r4, #291]	@ 0x123
 80158c0:	b110      	cbz	r0, 80158c8 <llcp_read_remote_features+0x56>
 80158c2:	203a      	movs	r0, #58	@ 0x3a
 80158c4:	b00c      	add	sp, #48	@ 0x30
 80158c6:	bdb0      	pop	{r4, r5, r7, pc}
 80158c8:	2004      	movs	r0, #4
 80158ca:	f884 0123 	strb.w	r0, [r4, #291]	@ 0x123
 80158ce:	f894 0125 	ldrb.w	r0, [r4, #293]	@ 0x125
 80158d2:	210e      	movs	r1, #14
 80158d4:	2800      	cmp	r0, #0
 80158d6:	bf08      	it	eq
 80158d8:	2108      	moveq	r1, #8
 80158da:	4620      	mov	r0, r4
 80158dc:	2201      	movs	r2, #1
 80158de:	f000 f803 	bl	80158e8 <llcp_feature_exchange_init>
 80158e2:	f884 504f 	strb.w	r5, [r4, #79]	@ 0x4f
 80158e6:	e7ed      	b.n	80158c4 <llcp_read_remote_features+0x52>

080158e8 <llcp_feature_exchange_init>:
 80158e8:	b570      	push	{r4, r5, r6, lr}
 80158ea:	b08c      	sub	sp, #48	@ 0x30
 80158ec:	4606      	mov	r6, r0
 80158ee:	a801      	add	r0, sp, #4
 80158f0:	4614      	mov	r4, r2
 80158f2:	460d      	mov	r5, r1
 80158f4:	f010 fd81 	bl	80263fa <db_get_le_feature_info>
 80158f8:	2d09      	cmp	r5, #9
 80158fa:	d106      	bne.n	801590a <llcp_feature_exchange_init+0x22>
 80158fc:	f896 0046 	ldrb.w	r0, [r6, #70]	@ 0x46
 8015900:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8015904:	4008      	ands	r0, r1
 8015906:	f88d 0004 	strb.w	r0, [sp, #4]
 801590a:	a801      	add	r0, sp, #4
 801590c:	4631      	mov	r1, r6
 801590e:	462a      	mov	r2, r5
 8015910:	4623      	mov	r3, r4
 8015912:	f7ff fb73 	bl	8014ffc <llcp_cntrl_pkt_init>
 8015916:	b00c      	add	sp, #48	@ 0x30
 8015918:	bd70      	pop	{r4, r5, r6, pc}

0801591a <llcp_read_remote_features_received>:
 801591a:	b5b0      	push	{r4, r5, r7, lr}
 801591c:	b08c      	sub	sp, #48	@ 0x30
 801591e:	2a0e      	cmp	r2, #14
 8015920:	4604      	mov	r4, r0
 8015922:	d008      	beq.n	8015936 <llcp_read_remote_features_received+0x1c>
 8015924:	2a09      	cmp	r2, #9
 8015926:	d023      	beq.n	8015970 <llcp_read_remote_features_received+0x56>
 8015928:	2a08      	cmp	r2, #8
 801592a:	d142      	bne.n	80159b2 <llcp_read_remote_features_received+0x98>
 801592c:	f894 0125 	ldrb.w	r0, [r4, #293]	@ 0x125
 8015930:	2801      	cmp	r0, #1
 8015932:	d003      	beq.n	801593c <llcp_read_remote_features_received+0x22>
 8015934:	e03d      	b.n	80159b2 <llcp_read_remote_features_received+0x98>
 8015936:	f894 0125 	ldrb.w	r0, [r4, #293]	@ 0x125
 801593a:	bbd0      	cbnz	r0, 80159b2 <llcp_read_remote_features_received+0x98>
 801593c:	f104 0046 	add.w	r0, r4, #70	@ 0x46
 8015940:	2208      	movs	r2, #8
 8015942:	f00e fe01 	bl	8024548 <ble_memcpy>
 8015946:	2001      	movs	r0, #1
 8015948:	ad01      	add	r5, sp, #4
 801594a:	f884 004e 	strb.w	r0, [r4, #78]	@ 0x4e
 801594e:	4628      	mov	r0, r5
 8015950:	f010 fd53 	bl	80263fa <db_get_le_feature_info>
 8015954:	f894 0046 	ldrb.w	r0, [r4, #70]	@ 0x46
 8015958:	f89d 1004 	ldrb.w	r1, [sp, #4]
 801595c:	2209      	movs	r2, #9
 801595e:	4008      	ands	r0, r1
 8015960:	f88d 0004 	strb.w	r0, [sp, #4]
 8015964:	4628      	mov	r0, r5
 8015966:	4621      	mov	r1, r4
 8015968:	2300      	movs	r3, #0
 801596a:	f7ff fb47 	bl	8014ffc <llcp_cntrl_pkt_init>
 801596e:	e020      	b.n	80159b2 <llcp_read_remote_features_received+0x98>
 8015970:	2001      	movs	r0, #1
 8015972:	f884 004e 	strb.w	r0, [r4, #78]	@ 0x4e
 8015976:	f104 0046 	add.w	r0, r4, #70	@ 0x46
 801597a:	2208      	movs	r2, #8
 801597c:	f00e fde4 	bl	8024548 <ble_memcpy>
 8015980:	f104 00c8 	add.w	r0, r4, #200	@ 0xc8
 8015984:	f00c fbd4 	bl	8022130 <os_timer_stop_free>
 8015988:	f894 104f 	ldrb.w	r1, [r4, #79]	@ 0x4f
 801598c:	2000      	movs	r0, #0
 801598e:	f884 0128 	strb.w	r0, [r4, #296]	@ 0x128
 8015992:	b111      	cbz	r1, 801599a <llcp_read_remote_features_received+0x80>
 8015994:	f884 0123 	strb.w	r0, [r4, #291]	@ 0x123
 8015998:	e00b      	b.n	80159b2 <llcp_read_remote_features_received+0x98>
 801599a:	2004      	movs	r0, #4
 801599c:	f884 0123 	strb.w	r0, [r4, #291]	@ 0x123
 80159a0:	2005      	movs	r0, #5
 80159a2:	f104 0160 	add.w	r1, r4, #96	@ 0x60
 80159a6:	f884 0064 	strb.w	r0, [r4, #100]	@ 0x64
 80159aa:	2002      	movs	r0, #2
 80159ac:	6624      	str	r4, [r4, #96]	@ 0x60
 80159ae:	f00b fe70 	bl	8021692 <emngr_post_event>
 80159b2:	2000      	movs	r0, #0
 80159b4:	b00c      	add	sp, #48	@ 0x30
 80159b6:	bdb0      	pop	{r4, r5, r7, pc}

080159b8 <llcp_disconnect_received>:
 80159b8:	4602      	mov	r2, r0
 80159ba:	2005      	movs	r0, #5
 80159bc:	f882 0124 	strb.w	r0, [r2, #292]	@ 0x124
 80159c0:	f892 0125 	ldrb.w	r0, [r2, #293]	@ 0x125
 80159c4:	780b      	ldrb	r3, [r1, #0]
 80159c6:	b118      	cbz	r0, 80159d0 <llcp_disconnect_received+0x18>
 80159c8:	4610      	mov	r0, r2
 80159ca:	4619      	mov	r1, r3
 80159cc:	f00f bfe2 	b.w	8025994 <conn_mngr_disconnect>
 80159d0:	f8d2 10c0 	ldr.w	r1, [r2, #192]	@ 0xc0
 80159d4:	f645 10e5 	movw	r0, #23013	@ 0x59e5
 80159d8:	f6c0 0001 	movt	r0, #2049	@ 0x801
 80159dc:	f882 3128 	strb.w	r3, [r2, #296]	@ 0x128
 80159e0:	f7fd b993 	b.w	8012d0a <evnt_schdlr_rgstr_wait_for_evnt_cmplt>

080159e4 <llcp_mngr_termination_recevied_clbk>:
 80159e4:	b5b0      	push	{r4, r5, r7, lr}
 80159e6:	4605      	mov	r5, r0
 80159e8:	b131      	cbz	r1, 80159f8 <llcp_mngr_termination_recevied_clbk+0x14>
 80159ea:	460c      	mov	r4, r1
 80159ec:	4620      	mov	r0, r4
 80159ee:	f008 ff3c 	bl	801e86a <free_buff_hdr>
 80159f2:	6864      	ldr	r4, [r4, #4]
 80159f4:	2c00      	cmp	r4, #0
 80159f6:	d1f9      	bne.n	80159ec <llcp_mngr_termination_recevied_clbk+0x8>
 80159f8:	f895 1128 	ldrb.w	r1, [r5, #296]	@ 0x128
 80159fc:	4628      	mov	r0, r5
 80159fe:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8015a02:	f00f bfc7 	b.w	8025994 <conn_mngr_disconnect>
	...

08015a08 <llcp_check_update_prcdur>:
 8015a08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015a0c:	b08b      	sub	sp, #44	@ 0x2c
 8015a0e:	f890 308a 	ldrb.w	r3, [r0, #138]	@ 0x8a
 8015a12:	4604      	mov	r4, r0
 8015a14:	2b01      	cmp	r3, #1
 8015a16:	d008      	beq.n	8015a2a <llcp_check_update_prcdur+0x22>
 8015a18:	f894 007b 	ldrb.w	r0, [r4, #123]	@ 0x7b
 8015a1c:	2802      	cmp	r0, #2
 8015a1e:	d004      	beq.n	8015a2a <llcp_check_update_prcdur+0x22>
 8015a20:	f8b4 0076 	ldrh.w	r0, [r4, #118]	@ 0x76
 8015a24:	2802      	cmp	r0, #2
 8015a26:	f040 80cf 	bne.w	8015bc8 <llcp_check_update_prcdur+0x1c0>
 8015a2a:	8b22      	ldrh	r2, [r4, #24]
 8015a2c:	f8d4 00c0 	ldr.w	r0, [r4, #192]	@ 0xc0
 8015a30:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8015a34:	68c7      	ldr	r7, [r0, #12]
 8015a36:	260a      	movs	r6, #10
 8015a38:	eb06 0242 	add.w	r2, r6, r2, lsl #1
 8015a3c:	f104 0974 	add.w	r9, r4, #116	@ 0x74
 8015a40:	b197      	cbz	r7, 8015a68 <llcp_check_update_prcdur+0x60>
 8015a42:	6906      	ldr	r6, [r0, #16]
 8015a44:	42b7      	cmp	r7, r6
 8015a46:	d008      	beq.n	8015a5a <llcp_check_update_prcdur+0x52>
 8015a48:	2501      	movs	r5, #1
 8015a4a:	bf00      	nop
 8015a4c:	687f      	ldr	r7, [r7, #4]
 8015a4e:	3501      	adds	r5, #1
 8015a50:	42b7      	cmp	r7, r6
 8015a52:	d1fb      	bne.n	8015a4c <llcp_check_update_prcdur+0x44>
 8015a54:	b2af      	uxth	r7, r5
 8015a56:	007f      	lsls	r7, r7, #1
 8015a58:	e000      	b.n	8015a5c <llcp_check_update_prcdur+0x54>
 8015a5a:	2702      	movs	r7, #2
 8015a5c:	2900      	cmp	r1, #0
 8015a5e:	bf08      	it	eq
 8015a60:	2101      	moveq	r1, #1
 8015a62:	fbb7 f1f1 	udiv	r1, r7, r1
 8015a66:	440a      	add	r2, r1
 8015a68:	2b01      	cmp	r3, #1
 8015a6a:	d129      	bne.n	8015ac0 <llcp_check_update_prcdur+0xb8>
 8015a6c:	f8b4 10da 	ldrh.w	r1, [r4, #218]	@ 0xda
 8015a70:	b292      	uxth	r2, r2
 8015a72:	188e      	adds	r6, r1, r2
 8015a74:	4631      	mov	r1, r6
 8015a76:	f7fe f86e 	bl	8013b56 <evnt_schdlr_optm_conn_param>
 8015a7a:	f8b4 00da 	ldrh.w	r0, [r4, #218]	@ 0xda
 8015a7e:	8ae1      	ldrh	r1, [r4, #22]
 8015a80:	1a30      	subs	r0, r6, r0
 8015a82:	fb00 f001 	mul.w	r0, r0, r1
 8015a86:	0849      	lsrs	r1, r1, #1
 8015a88:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8015a8c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8015a90:	f8a4 608c 	strh.w	r6, [r4, #140]	@ 0x8c
 8015a94:	0880      	lsrs	r0, r0, #2
 8015a96:	f8a4 6070 	strh.w	r6, [r4, #112]	@ 0x70
 8015a9a:	466e      	mov	r6, sp
 8015a9c:	eba0 0791 	sub.w	r7, r0, r1, lsr #2
 8015aa0:	4630      	mov	r0, r6
 8015aa2:	4649      	mov	r1, r9
 8015aa4:	222c      	movs	r2, #44	@ 0x2c
 8015aa6:	f00e fd4f 	bl	8024548 <ble_memcpy>
 8015aaa:	4630      	mov	r0, r6
 8015aac:	4621      	mov	r1, r4
 8015aae:	2200      	movs	r2, #0
 8015ab0:	2300      	movs	r3, #0
 8015ab2:	2600      	movs	r6, #0
 8015ab4:	f7ff faa2 	bl	8014ffc <llcp_cntrl_pkt_init>
 8015ab8:	4605      	mov	r5, r0
 8015aba:	f884 608a 	strb.w	r6, [r4, #138]	@ 0x8a
 8015abe:	e088      	b.n	8015bd2 <llcp_check_update_prcdur+0x1ca>
 8015ac0:	f894 007b 	ldrb.w	r0, [r4, #123]	@ 0x7b
 8015ac4:	2802      	cmp	r0, #2
 8015ac6:	d14e      	bne.n	8015b66 <llcp_check_update_prcdur+0x15e>
 8015ac8:	b290      	uxth	r0, r2
 8015aca:	8ae1      	ldrh	r1, [r4, #22]
 8015acc:	f8b4 30da 	ldrh.w	r3, [r4, #218]	@ 0xda
 8015ad0:	fb00 f001 	mul.w	r0, r0, r1
 8015ad4:	f104 0676 	add.w	r6, r4, #118	@ 0x76
 8015ad8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8015adc:	441a      	add	r2, r3
 8015ade:	ea4f 0890 	mov.w	r8, r0, lsr #2
 8015ae2:	0848      	lsrs	r0, r1, #1
 8015ae4:	eb00 0780 	add.w	r7, r0, r0, lsl #2
 8015ae8:	4630      	mov	r0, r6
 8015aea:	f8a4 2074 	strh.w	r2, [r4, #116]	@ 0x74
 8015aee:	f8a4 2070 	strh.w	r2, [r4, #112]	@ 0x70
 8015af2:	f010 fbce 	bl	8026292 <db_get_local_chnl_classification>
 8015af6:	f894 0137 	ldrb.w	r0, [r4, #311]	@ 0x137
 8015afa:	2801      	cmp	r0, #1
 8015afc:	d110      	bne.n	8015b20 <llcp_check_update_prcdur+0x118>
 8015afe:	f894 012d 	ldrb.w	r0, [r4, #301]	@ 0x12d
 8015b02:	f894 1135 	ldrb.w	r1, [r4, #309]	@ 0x135
 8015b06:	4201      	tst	r1, r0
 8015b08:	d00a      	beq.n	8015b20 <llcp_check_update_prcdur+0x118>
 8015b0a:	4630      	mov	r0, r6
 8015b0c:	f00f fed4 	bl	80258b8 <conn_mngr_calc_num_of_used_data_chnls>
 8015b10:	f894 1136 	ldrb.w	r1, [r4, #310]	@ 0x136
 8015b14:	4288      	cmp	r0, r1
 8015b16:	d203      	bcs.n	8015b20 <llcp_check_update_prcdur+0x118>
 8015b18:	4620      	mov	r0, r4
 8015b1a:	4631      	mov	r1, r6
 8015b1c:	f7ff f99c 	bl	8014e58 <llcp_set_req_chnls_in_min_chnls_prcdr>
 8015b20:	466e      	mov	r6, sp
 8015b22:	4630      	mov	r0, r6
 8015b24:	4649      	mov	r1, r9
 8015b26:	2208      	movs	r2, #8
 8015b28:	eba8 0797 	sub.w	r7, r8, r7, lsr #2
 8015b2c:	f00e fd0c 	bl	8024548 <ble_memcpy>
 8015b30:	4630      	mov	r0, r6
 8015b32:	4621      	mov	r1, r4
 8015b34:	2201      	movs	r2, #1
 8015b36:	2300      	movs	r3, #0
 8015b38:	2600      	movs	r6, #0
 8015b3a:	f7ff fa5f 	bl	8014ffc <llcp_cntrl_pkt_init>
 8015b3e:	f894 1124 	ldrb.w	r1, [r4, #292]	@ 0x124
 8015b42:	290a      	cmp	r1, #10
 8015b44:	d142      	bne.n	8015bcc <llcp_check_update_prcdur+0x1c4>
 8015b46:	f642 200f 	movw	r0, #10767	@ 0x2a0f
 8015b4a:	f8ad 0000 	strh.w	r0, [sp]
 8015b4e:	4668      	mov	r0, sp
 8015b50:	4621      	mov	r1, r4
 8015b52:	2211      	movs	r2, #17
 8015b54:	2300      	movs	r3, #0
 8015b56:	f7ff fa51 	bl	8014ffc <llcp_cntrl_pkt_init>
 8015b5a:	4605      	mov	r5, r0
 8015b5c:	f884 6124 	strb.w	r6, [r4, #292]	@ 0x124
 8015b60:	f884 6128 	strb.w	r6, [r4, #296]	@ 0x128
 8015b64:	e033      	b.n	8015bce <llcp_check_update_prcdur+0x1c6>
 8015b66:	f8b4 0076 	ldrh.w	r0, [r4, #118]	@ 0x76
 8015b6a:	2802      	cmp	r0, #2
 8015b6c:	d129      	bne.n	8015bc2 <llcp_check_update_prcdur+0x1ba>
 8015b6e:	f894 0123 	ldrb.w	r0, [r4, #291]	@ 0x123
 8015b72:	280c      	cmp	r0, #12
 8015b74:	d003      	beq.n	8015b7e <llcp_check_update_prcdur+0x176>
 8015b76:	f894 0124 	ldrb.w	r0, [r4, #292]	@ 0x124
 8015b7a:	280c      	cmp	r0, #12
 8015b7c:	d121      	bne.n	8015bc2 <llcp_check_update_prcdur+0x1ba>
 8015b7e:	b290      	uxth	r0, r2
 8015b80:	8ae1      	ldrh	r1, [r4, #22]
 8015b82:	f8b4 30da 	ldrh.w	r3, [r4, #218]	@ 0xda
 8015b86:	fb00 f001 	mul.w	r0, r0, r1
 8015b8a:	0849      	lsrs	r1, r1, #1
 8015b8c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8015b90:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8015b94:	441a      	add	r2, r3
 8015b96:	0880      	lsrs	r0, r0, #2
 8015b98:	466e      	mov	r6, sp
 8015b9a:	eba0 0791 	sub.w	r7, r0, r1, lsr #2
 8015b9e:	f8a4 2076 	strh.w	r2, [r4, #118]	@ 0x76
 8015ba2:	4630      	mov	r0, r6
 8015ba4:	4649      	mov	r1, r9
 8015ba6:	2206      	movs	r2, #6
 8015ba8:	f00e fcce 	bl	8024548 <ble_memcpy>
 8015bac:	4630      	mov	r0, r6
 8015bae:	4621      	mov	r1, r4
 8015bb0:	2218      	movs	r2, #24
 8015bb2:	2300      	movs	r3, #0
 8015bb4:	2600      	movs	r6, #0
 8015bb6:	f7ff fa21 	bl	8014ffc <llcp_cntrl_pkt_init>
 8015bba:	4605      	mov	r5, r0
 8015bbc:	f884 6128 	strb.w	r6, [r4, #296]	@ 0x128
 8015bc0:	e007      	b.n	8015bd2 <llcp_check_update_prcdur+0x1ca>
 8015bc2:	2530      	movs	r5, #48	@ 0x30
 8015bc4:	2700      	movs	r7, #0
 8015bc6:	e004      	b.n	8015bd2 <llcp_check_update_prcdur+0x1ca>
 8015bc8:	2530      	movs	r5, #48	@ 0x30
 8015bca:	e007      	b.n	8015bdc <llcp_check_update_prcdur+0x1d4>
 8015bcc:	4605      	mov	r5, r0
 8015bce:	f884 607b 	strb.w	r6, [r4, #123]	@ 0x7b
 8015bd2:	f8d4 00cc 	ldr.w	r0, [r4, #204]	@ 0xcc
 8015bd6:	0179      	lsls	r1, r7, #5
 8015bd8:	f00c f971 	bl	8021ebe <os_timer_start>
 8015bdc:	4628      	mov	r0, r5
 8015bde:	b00b      	add	sp, #44	@ 0x2c
 8015be0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08015be4 <llcp_update_conn_param>:
 8015be4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015be6:	b08b      	sub	sp, #44	@ 0x2c
 8015be8:	2808      	cmp	r0, #8
 8015bea:	d20f      	bcs.n	8015c0c <llcp_update_conn_param+0x28>
 8015bec:	460d      	mov	r5, r1
 8015bee:	f649 6164 	movw	r1, #40548	@ 0x9e64
 8015bf2:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8015bf6:	f851 4020 	ldr.w	r4, [r1, r0, lsl #2]
 8015bfa:	b13c      	cbz	r4, 8015c0c <llcp_update_conn_param+0x28>
 8015bfc:	f894 0125 	ldrb.w	r0, [r4, #293]	@ 0x125
 8015c00:	b140      	cbz	r0, 8015c14 <llcp_update_conn_param+0x30>
 8015c02:	263a      	movs	r6, #58	@ 0x3a
 8015c04:	2801      	cmp	r0, #1
 8015c06:	bf08      	it	eq
 8015c08:	2611      	moveq	r6, #17
 8015c0a:	e000      	b.n	8015c0e <llcp_update_conn_param+0x2a>
 8015c0c:	2602      	movs	r6, #2
 8015c0e:	4630      	mov	r0, r6
 8015c10:	b00b      	add	sp, #44	@ 0x2c
 8015c12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015c14:	f894 1123 	ldrb.w	r1, [r4, #291]	@ 0x123
 8015c18:	b129      	cbz	r1, 8015c26 <llcp_update_conn_param+0x42>
 8015c1a:	290a      	cmp	r1, #10
 8015c1c:	d003      	beq.n	8015c26 <llcp_update_conn_param+0x42>
 8015c1e:	f894 1124 	ldrb.w	r1, [r4, #292]	@ 0x124
 8015c22:	2901      	cmp	r1, #1
 8015c24:	d1ed      	bne.n	8015c02 <llcp_update_conn_param+0x1e>
 8015c26:	f104 007c 	add.w	r0, r4, #124	@ 0x7c
 8015c2a:	4629      	mov	r1, r5
 8015c2c:	2210      	movs	r2, #16
 8015c2e:	65a4      	str	r4, [r4, #88]	@ 0x58
 8015c30:	f00e fc8a 	bl	8024548 <ble_memcpy>
 8015c34:	f894 012c 	ldrb.w	r0, [r4, #300]	@ 0x12c
 8015c38:	2804      	cmp	r0, #4
 8015c3a:	d003      	beq.n	8015c44 <llcp_update_conn_param+0x60>
 8015c3c:	f894 012d 	ldrb.w	r0, [r4, #301]	@ 0x12d
 8015c40:	2804      	cmp	r0, #4
 8015c42:	d120      	bne.n	8015c86 <llcp_update_conn_param+0xa2>
 8015c44:	f8b4 10a8 	ldrh.w	r1, [r4, #168]	@ 0xa8
 8015c48:	f44f 7274 	mov.w	r2, #976	@ 0x3d0
 8015c4c:	f8b4 00b6 	ldrh.w	r0, [r4, #182]	@ 0xb6
 8015c50:	eb02 1181 	add.w	r1, r2, r1, lsl #6
 8015c54:	f240 42e2 	movw	r2, #1250	@ 0x4e2
 8015c58:	4281      	cmp	r1, r0
 8015c5a:	bf38      	it	cc
 8015c5c:	4608      	movcc	r0, r1
 8015c5e:	f8b4 107e 	ldrh.w	r1, [r4, #126]	@ 0x7e
 8015c62:	f600 30bc 	addw	r0, r0, #3004	@ 0xbbc
 8015c66:	fb01 f202 	mul.w	r2, r1, r2
 8015c6a:	4282      	cmp	r2, r0
 8015c6c:	d20d      	bcs.n	8015c8a <llcp_update_conn_param+0xa6>
 8015c6e:	f241 7159 	movw	r1, #5977	@ 0x1759
 8015c72:	f2cd 11b7 	movt	r1, #53687	@ 0xd1b7
 8015c76:	fba0 0101 	umull	r0, r1, r0, r1
 8015c7a:	0a89      	lsrs	r1, r1, #10
 8015c7c:	f8a4 107e 	strh.w	r1, [r4, #126]	@ 0x7e
 8015c80:	f8a4 107c 	strh.w	r1, [r4, #124]	@ 0x7c
 8015c84:	e001      	b.n	8015c8a <llcp_update_conn_param+0xa6>
 8015c86:	f8b4 107e 	ldrh.w	r1, [r4, #126]	@ 0x7e
 8015c8a:	4620      	mov	r0, r4
 8015c8c:	f000 f875 	bl	8015d7a <llcp_update_eff_max_tx_time>
 8015c90:	4606      	mov	r6, r0
 8015c92:	2800      	cmp	r0, #0
 8015c94:	d1bb      	bne.n	8015c0e <llcp_update_conn_param+0x2a>
 8015c96:	2005      	movs	r0, #5
 8015c98:	f884 0090 	strb.w	r0, [r4, #144]	@ 0x90
 8015c9c:	7ba8      	ldrb	r0, [r5, #14]
 8015c9e:	280b      	cmp	r0, #11
 8015ca0:	d13f      	bne.n	8015d22 <llcp_update_conn_param+0x13e>
 8015ca2:	f8b4 007e 	ldrh.w	r0, [r4, #126]	@ 0x7e
 8015ca6:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8015caa:	f8a4 008e 	strh.w	r0, [r4, #142]	@ 0x8e
 8015cae:	89a8      	ldrh	r0, [r5, #12]
 8015cb0:	4288      	cmp	r0, r1
 8015cb2:	d033      	beq.n	8015d1c <llcp_update_conn_param+0x138>
 8015cb4:	f8d4 00c0 	ldr.w	r0, [r4, #192]	@ 0xc0
 8015cb8:	f8b4 108c 	ldrh.w	r1, [r4, #140]	@ 0x8c
 8015cbc:	f7fd ff4b 	bl	8013b56 <evnt_schdlr_optm_conn_param>
 8015cc0:	8ae1      	ldrh	r1, [r4, #22]
 8015cc2:	f8b4 208e 	ldrh.w	r2, [r4, #142]	@ 0x8e
 8015cc6:	4291      	cmp	r1, r2
 8015cc8:	d12b      	bne.n	8015d22 <llcp_update_conn_param+0x13e>
 8015cca:	4606      	mov	r6, r0
 8015ccc:	f8b4 00dc 	ldrh.w	r0, [r4, #220]	@ 0xdc
 8015cd0:	f8b4 1080 	ldrh.w	r1, [r4, #128]	@ 0x80
 8015cd4:	4288      	cmp	r0, r1
 8015cd6:	d124      	bne.n	8015d22 <llcp_update_conn_param+0x13e>
 8015cd8:	8b60      	ldrh	r0, [r4, #26]
 8015cda:	f8b4 1082 	ldrh.w	r1, [r4, #130]	@ 0x82
 8015cde:	4288      	cmp	r0, r1
 8015ce0:	d11f      	bne.n	8015d22 <llcp_update_conn_param+0x13e>
 8015ce2:	b1f6      	cbz	r6, 8015d22 <llcp_update_conn_param+0x13e>
 8015ce4:	f894 0124 	ldrb.w	r0, [r4, #292]	@ 0x124
 8015ce8:	280a      	cmp	r0, #10
 8015cea:	d10d      	bne.n	8015d08 <llcp_update_conn_param+0x124>
 8015cec:	4668      	mov	r0, sp
 8015cee:	4621      	mov	r1, r4
 8015cf0:	220d      	movs	r2, #13
 8015cf2:	2300      	movs	r3, #0
 8015cf4:	f88d 6000 	strb.w	r6, [sp]
 8015cf8:	f7ff f980 	bl	8014ffc <llcp_cntrl_pkt_init>
 8015cfc:	4620      	mov	r0, r4
 8015cfe:	f850 1fc8 	ldr.w	r1, [r0, #200]!
 8015d02:	b109      	cbz	r1, 8015d08 <llcp_update_conn_param+0x124>
 8015d04:	f00c fa14 	bl	8022130 <os_timer_stop_free>
 8015d08:	2000      	movs	r0, #0
 8015d0a:	f884 008a 	strb.w	r0, [r4, #138]	@ 0x8a
 8015d0e:	f884 0124 	strb.w	r0, [r4, #292]	@ 0x124
 8015d12:	f884 0123 	strb.w	r0, [r4, #291]	@ 0x123
 8015d16:	f884 0128 	strb.w	r0, [r4, #296]	@ 0x128
 8015d1a:	e778      	b.n	8015c0e <llcp_update_conn_param+0x2a>
 8015d1c:	2000      	movs	r0, #0
 8015d1e:	f8a4 0088 	strh.w	r0, [r4, #136]	@ 0x88
 8015d22:	f894 0124 	ldrb.w	r0, [r4, #292]	@ 0x124
 8015d26:	2102      	movs	r1, #2
 8015d28:	2801      	cmp	r0, #1
 8015d2a:	f884 105c 	strb.w	r1, [r4, #92]	@ 0x5c
 8015d2e:	bf1c      	itt	ne
 8015d30:	2001      	movne	r0, #1
 8015d32:	f884 0123 	strbne.w	r0, [r4, #291]	@ 0x123
 8015d36:	f8d4 10cc 	ldr.w	r1, [r4, #204]	@ 0xcc
 8015d3a:	2028      	movs	r0, #40	@ 0x28
 8015d3c:	f884 0128 	strb.w	r0, [r4, #296]	@ 0x128
 8015d40:	fab1 f081 	clz	r0, r1
 8015d44:	0940      	lsrs	r0, r0, #5
 8015d46:	2101      	movs	r1, #1
 8015d48:	f104 0558 	add.w	r5, r4, #88	@ 0x58
 8015d4c:	2701      	movs	r7, #1
 8015d4e:	f009 fd68 	bl	801f822 <bsp_assert>
 8015d52:	f645 6043 	movw	r0, #24131	@ 0x5e43
 8015d56:	f6c0 0001 	movt	r0, #2049	@ 0x801
 8015d5a:	2100      	movs	r1, #0
 8015d5c:	462a      	mov	r2, r5
 8015d5e:	2600      	movs	r6, #0
 8015d60:	f00c f834 	bl	8021dcc <os_timer_create>
 8015d64:	2101      	movs	r1, #1
 8015d66:	f8c4 00cc 	str.w	r0, [r4, #204]	@ 0xcc
 8015d6a:	2800      	cmp	r0, #0
 8015d6c:	bf18      	it	ne
 8015d6e:	2001      	movne	r0, #1
 8015d70:	f009 fd57 	bl	801f822 <bsp_assert>
 8015d74:	f884 708a 	strb.w	r7, [r4, #138]	@ 0x8a
 8015d78:	e749      	b.n	8015c0e <llcp_update_conn_param+0x2a>

08015d7a <llcp_update_eff_max_tx_time>:
 8015d7a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015d7c:	2800      	cmp	r0, #0
 8015d7e:	d05d      	beq.n	8015e3c <llcp_update_eff_max_tx_time+0xc2>
 8015d80:	f8b0 20a8 	ldrh.w	r2, [r0, #168]	@ 0xa8
 8015d84:	f44f 7c74 	mov.w	ip, #976	@ 0x3d0
 8015d88:	f8b0 30b6 	ldrh.w	r3, [r0, #182]	@ 0xb6
 8015d8c:	eb0c 1282 	add.w	r2, ip, r2, lsl #6
 8015d90:	f8b0 40b2 	ldrh.w	r4, [r0, #178]	@ 0xb2
 8015d94:	f240 05ec 	movw	r5, #236	@ 0xec
 8015d98:	f646 4668 	movw	r6, #27752	@ 0x6c68
 8015d9c:	429a      	cmp	r2, r3
 8015d9e:	bf38      	it	cc
 8015da0:	4613      	movcc	r3, r2
 8015da2:	2200      	movs	r2, #0
 8015da4:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 8015da8:	f2c2 0600 	movt	r6, #8192	@ 0x2000
 8015dac:	f5b4 6f29 	cmp.w	r4, #2704	@ 0xa90
 8015db0:	bf98      	it	ls
 8015db2:	2201      	movls	r2, #1
 8015db4:	682f      	ldr	r7, [r5, #0]
 8015db6:	68b6      	ldr	r6, [r6, #8]
 8015db8:	f8b0 e0ac 	ldrh.w	lr, [r0, #172]	@ 0xac
 8015dbc:	4437      	add	r7, r6
 8015dbe:	ebc7 1647 	rsb	r6, r7, r7, lsl #5
 8015dc2:	eb0c 158e 	add.w	r5, ip, lr, lsl #6
 8015dc6:	eb06 0797 	add.w	r7, r6, r7, lsr #2
 8015dca:	42a5      	cmp	r5, r4
 8015dcc:	bf28      	it	cs
 8015dce:	4625      	movcs	r5, r4
 8015dd0:	eb07 0c03 	add.w	ip, r7, r3
 8015dd4:	f240 47e2 	movw	r7, #1250	@ 0x4e2
 8015dd8:	eb0c 0305 	add.w	r3, ip, r5
 8015ddc:	fb01 fe07 	mul.w	lr, r1, r7
 8015de0:	f103 0196 	add.w	r1, r3, #150	@ 0x96
 8015de4:	458e      	cmp	lr, r1
 8015de6:	f04f 0100 	mov.w	r1, #0
 8015dea:	bf28      	it	cs
 8015dec:	2101      	movcs	r1, #1
 8015dee:	f8b0 30b8 	ldrh.w	r3, [r0, #184]	@ 0xb8
 8015df2:	4311      	orrs	r1, r2
 8015df4:	2901      	cmp	r1, #1
 8015df6:	f04f 0100 	mov.w	r1, #0
 8015dfa:	bf08      	it	eq
 8015dfc:	42a3      	cmpeq	r3, r4
 8015dfe:	d01e      	beq.n	8015e3e <llcp_update_eff_max_tx_time+0xc4>
 8015e00:	ebae 010c 	sub.w	r1, lr, ip
 8015e04:	f5a1 7196 	sub.w	r1, r1, #300	@ 0x12c
 8015e08:	f5b1 6f29 	cmp.w	r1, #2704	@ 0xa90
 8015e0c:	f44f 6229 	mov.w	r2, #2704	@ 0xa90
 8015e10:	bf98      	it	ls
 8015e12:	4611      	movls	r1, r2
 8015e14:	4299      	cmp	r1, r3
 8015e16:	bf28      	it	cs
 8015e18:	4619      	movcs	r1, r3
 8015e1a:	f8a0 10b0 	strh.w	r1, [r0, #176]	@ 0xb0
 8015e1e:	f5b1 6f29 	cmp.w	r1, #2704	@ 0xa90
 8015e22:	bf88      	it	hi
 8015e24:	460a      	movhi	r2, r1
 8015e26:	f890 312c 	ldrb.w	r3, [r0, #300]	@ 0x12c
 8015e2a:	f8a0 20b2 	strh.w	r2, [r0, #178]	@ 0xb2
 8015e2e:	2b04      	cmp	r3, #4
 8015e30:	bf18      	it	ne
 8015e32:	460a      	movne	r2, r1
 8015e34:	2100      	movs	r1, #0
 8015e36:	f8a0 20ae 	strh.w	r2, [r0, #174]	@ 0xae
 8015e3a:	e000      	b.n	8015e3e <llcp_update_eff_max_tx_time+0xc4>
 8015e3c:	2102      	movs	r1, #2
 8015e3e:	4608      	mov	r0, r1
 8015e40:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015e42 <llcp_post_timer_evnt_clbk>:
 8015e42:	b510      	push	{r4, lr}
 8015e44:	4604      	mov	r4, r0
 8015e46:	2061      	movs	r0, #97	@ 0x61
 8015e48:	f009 fd32 	bl	801f8b0 <bsp_debug_gpio_set>
 8015e4c:	2002      	movs	r0, #2
 8015e4e:	4621      	mov	r1, r4
 8015e50:	f00b fc1f 	bl	8021692 <emngr_post_event>
 8015e54:	2061      	movs	r0, #97	@ 0x61
 8015e56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015e5a:	f009 bd2b 	b.w	801f8b4 <bsp_debug_gpio_clear>

08015e5e <llcp_update_conn_param_received>:
 8015e5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015e62:	8b0e      	ldrh	r6, [r1, #24]
 8015e64:	f8b0 70da 	ldrh.w	r7, [r0, #218]	@ 0xda
 8015e68:	4604      	mov	r4, r0
 8015e6a:	42b7      	cmp	r7, r6
 8015e6c:	bf88      	it	hi
 8015e6e:	f506 3680 	addhi.w	r6, r6, #65536	@ 0x10000
 8015e72:	f890 0124 	ldrb.w	r0, [r0, #292]	@ 0x124
 8015e76:	f8b4 8016 	ldrh.w	r8, [r4, #22]
 8015e7a:	460d      	mov	r5, r1
 8015e7c:	280a      	cmp	r0, #10
 8015e7e:	f8a4 6070 	strh.w	r6, [r4, #112]	@ 0x70
 8015e82:	d105      	bne.n	8015e90 <llcp_update_conn_param_received+0x32>
 8015e84:	4620      	mov	r0, r4
 8015e86:	f850 1fd0 	ldr.w	r1, [r0, #208]!
 8015e8a:	b109      	cbz	r1, 8015e90 <llcp_update_conn_param_received+0x32>
 8015e8c:	f00c f950 	bl	8022130 <os_timer_stop_free>
 8015e90:	f894 0123 	ldrb.w	r0, [r4, #291]	@ 0x123
 8015e94:	280a      	cmp	r0, #10
 8015e96:	bf04      	itt	eq
 8015e98:	f104 00c8 	addeq.w	r0, r4, #200	@ 0xc8
 8015e9c:	f00c f948 	bleq	8022130 <os_timer_stop_free>
 8015ea0:	f894 0125 	ldrb.w	r0, [r4, #293]	@ 0x125
 8015ea4:	2801      	cmp	r0, #1
 8015ea6:	d156      	bne.n	8015f56 <llcp_update_conn_param_received+0xf8>
 8015ea8:	f8b4 00da 	ldrh.w	r0, [r4, #218]	@ 0xda
 8015eac:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8015eb0:	1a30      	subs	r0, r6, r0
 8015eb2:	1a40      	subs	r0, r0, r1
 8015eb4:	b280      	uxth	r0, r0
 8015eb6:	f248 0103 	movw	r1, #32771	@ 0x8003
 8015eba:	4288      	cmp	r0, r1
 8015ebc:	d34d      	bcc.n	8015f5a <llcp_update_conn_param_received+0xfc>
 8015ebe:	1bf0      	subs	r0, r6, r7
 8015ec0:	fb08 f000 	mul.w	r0, r8, r0
 8015ec4:	ea4f 0158 	mov.w	r1, r8, lsr #1
 8015ec8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8015ecc:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8015ed0:	0880      	lsrs	r0, r0, #2
 8015ed2:	eba0 0791 	sub.w	r7, r0, r1, lsr #2
 8015ed6:	f894 0123 	ldrb.w	r0, [r4, #291]	@ 0x123
 8015eda:	65a4      	str	r4, [r4, #88]	@ 0x58
 8015edc:	280a      	cmp	r0, #10
 8015ede:	f04f 0002 	mov.w	r0, #2
 8015ee2:	f884 005c 	strb.w	r0, [r4, #92]	@ 0x5c
 8015ee6:	f04f 0001 	mov.w	r0, #1
 8015eea:	bf14      	ite	ne
 8015eec:	f884 0124 	strbne.w	r0, [r4, #292]	@ 0x124
 8015ef0:	f884 0123 	strbeq.w	r0, [r4, #291]	@ 0x123
 8015ef4:	f104 0074 	add.w	r0, r4, #116	@ 0x74
 8015ef8:	4629      	mov	r1, r5
 8015efa:	222c      	movs	r2, #44	@ 0x2c
 8015efc:	f104 0658 	add.w	r6, r4, #88	@ 0x58
 8015f00:	f00e fb22 	bl	8024548 <ble_memcpy>
 8015f04:	f8d4 00cc 	ldr.w	r0, [r4, #204]	@ 0xcc
 8015f08:	2500      	movs	r5, #0
 8015f0a:	fab0 f080 	clz	r0, r0
 8015f0e:	0940      	lsrs	r0, r0, #5
 8015f10:	2101      	movs	r1, #1
 8015f12:	f884 5128 	strb.w	r5, [r4, #296]	@ 0x128
 8015f16:	f009 fc84 	bl	801f822 <bsp_assert>
 8015f1a:	f645 6043 	movw	r0, #24131	@ 0x5e43
 8015f1e:	f6c0 0001 	movt	r0, #2049	@ 0x801
 8015f22:	2100      	movs	r1, #0
 8015f24:	4632      	mov	r2, r6
 8015f26:	f00b ff51 	bl	8021dcc <os_timer_create>
 8015f2a:	2101      	movs	r1, #1
 8015f2c:	f8c4 00cc 	str.w	r0, [r4, #204]	@ 0xcc
 8015f30:	2800      	cmp	r0, #0
 8015f32:	bf18      	it	ne
 8015f34:	2001      	movne	r0, #1
 8015f36:	f009 fc74 	bl	801f822 <bsp_assert>
 8015f3a:	f8d4 00cc 	ldr.w	r0, [r4, #204]	@ 0xcc
 8015f3e:	0179      	lsls	r1, r7, #5
 8015f40:	f8a4 50dc 	strh.w	r5, [r4, #220]	@ 0xdc
 8015f44:	f00b ffbb 	bl	8021ebe <os_timer_start>
 8015f48:	f8b4 108e 	ldrh.w	r1, [r4, #142]	@ 0x8e
 8015f4c:	4620      	mov	r0, r4
 8015f4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015f52:	f7ff bf12 	b.w	8015d7a <llcp_update_eff_max_tx_time>
 8015f56:	2400      	movs	r4, #0
 8015f58:	e004      	b.n	8015f64 <llcp_update_conn_param_received+0x106>
 8015f5a:	4620      	mov	r0, r4
 8015f5c:	2128      	movs	r1, #40	@ 0x28
 8015f5e:	2428      	movs	r4, #40	@ 0x28
 8015f60:	f00f fd18 	bl	8025994 <conn_mngr_disconnect>
 8015f64:	4620      	mov	r0, r4
 8015f66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015f6a <llcp_update_param_req>:
 8015f6a:	b570      	push	{r4, r5, r6, lr}
 8015f6c:	b08c      	sub	sp, #48	@ 0x30
 8015f6e:	2808      	cmp	r0, #8
 8015f70:	d21b      	bcs.n	8015faa <llcp_update_param_req+0x40>
 8015f72:	460e      	mov	r6, r1
 8015f74:	f649 6164 	movw	r1, #40548	@ 0x9e64
 8015f78:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8015f7c:	f851 4020 	ldr.w	r4, [r1, r0, lsl #2]
 8015f80:	b19c      	cbz	r4, 8015faa <llcp_update_param_req+0x40>
 8015f82:	88b2      	ldrh	r2, [r6, #4]
 8015f84:	8873      	ldrh	r3, [r6, #2]
 8015f86:	88f1      	ldrh	r1, [r6, #6]
 8015f88:	3201      	adds	r2, #1
 8015f8a:	fb03 f202 	mul.w	r2, r3, r2
 8015f8e:	00c9      	lsls	r1, r1, #3
 8015f90:	ebb1 0f42 	cmp.w	r1, r2, lsl #1
 8015f94:	d90d      	bls.n	8015fb2 <llcp_update_param_req+0x48>
 8015f96:	f894 1046 	ldrb.w	r1, [r4, #70]	@ 0x46
 8015f9a:	0789      	lsls	r1, r1, #30
 8015f9c:	d40b      	bmi.n	8015fb6 <llcp_update_param_req+0x4c>
 8015f9e:	f894 1125 	ldrb.w	r1, [r4, #293]	@ 0x125
 8015fa2:	2901      	cmp	r1, #1
 8015fa4:	d10f      	bne.n	8015fc6 <llcp_update_param_req+0x5c>
 8015fa6:	251a      	movs	r5, #26
 8015fa8:	e000      	b.n	8015fac <llcp_update_param_req+0x42>
 8015faa:	2502      	movs	r5, #2
 8015fac:	4628      	mov	r0, r5
 8015fae:	b00c      	add	sp, #48	@ 0x30
 8015fb0:	bd70      	pop	{r4, r5, r6, pc}
 8015fb2:	2512      	movs	r5, #18
 8015fb4:	e7fa      	b.n	8015fac <llcp_update_param_req+0x42>
 8015fb6:	f894 0123 	ldrb.w	r0, [r4, #291]	@ 0x123
 8015fba:	b910      	cbnz	r0, 8015fc2 <llcp_update_param_req+0x58>
 8015fbc:	f8d4 00cc 	ldr.w	r0, [r4, #204]	@ 0xcc
 8015fc0:	b138      	cbz	r0, 8015fd2 <llcp_update_param_req+0x68>
 8015fc2:	253a      	movs	r5, #58	@ 0x3a
 8015fc4:	e7f2      	b.n	8015fac <llcp_update_param_req+0x42>
 8015fc6:	4631      	mov	r1, r6
 8015fc8:	b00c      	add	sp, #48	@ 0x30
 8015fca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015fce:	f7ff be09 	b.w	8015be4 <llcp_update_conn_param>
 8015fd2:	f104 007c 	add.w	r0, r4, #124	@ 0x7c
 8015fd6:	4631      	mov	r1, r6
 8015fd8:	2210      	movs	r2, #16
 8015fda:	f104 0574 	add.w	r5, r4, #116	@ 0x74
 8015fde:	f00e fab3 	bl	8024548 <ble_memcpy>
 8015fe2:	f8b4 00da 	ldrh.w	r0, [r4, #218]	@ 0xda
 8015fe6:	300a      	adds	r0, #10
 8015fe8:	f8a4 008c 	strh.w	r0, [r4, #140]	@ 0x8c
 8015fec:	7bb0      	ldrb	r0, [r6, #14]
 8015fee:	2811      	cmp	r0, #17
 8015ff0:	d019      	beq.n	8016026 <llcp_update_param_req+0xbc>
 8015ff2:	280b      	cmp	r0, #11
 8015ff4:	d11c      	bne.n	8016030 <llcp_update_param_req+0xc6>
 8015ff6:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8015ffa:	2600      	movs	r6, #0
 8015ffc:	f8a4 0088 	strh.w	r0, [r4, #136]	@ 0x88
 8016000:	f104 0092 	add.w	r0, r4, #146	@ 0x92
 8016004:	210a      	movs	r1, #10
 8016006:	22ff      	movs	r2, #255	@ 0xff
 8016008:	f884 6090 	strb.w	r6, [r4, #144]	@ 0x90
 801600c:	f7ea f8c8 	bl	80001a0 <__aeabi_memset>
 8016010:	f8b4 107e 	ldrh.w	r1, [r4, #126]	@ 0x7e
 8016014:	f8d4 00c0 	ldr.w	r0, [r4, #192]	@ 0xc0
 8016018:	f884 609c 	strb.w	r6, [r4, #156]	@ 0x9c
 801601c:	f8a4 108e 	strh.w	r1, [r4, #142]	@ 0x8e
 8016020:	f7fd fda1 	bl	8013b66 <evnt_schdlr_conn_parm_req>
 8016024:	e004      	b.n	8016030 <llcp_update_param_req+0xc6>
 8016026:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 8016028:	f8d4 00c0 	ldr.w	r0, [r4, #192]	@ 0xc0
 801602c:	f7fd fda2 	bl	8013b74 <evnt_schdlr_calc_win_offset>
 8016030:	2001      	movs	r0, #1
 8016032:	f884 005c 	strb.w	r0, [r4, #92]	@ 0x5c
 8016036:	4620      	mov	r0, r4
 8016038:	210a      	movs	r1, #10
 801603a:	f7ff fa4f 	bl	80154dc <llcp_cntrl_init>
 801603e:	ae01      	add	r6, sp, #4
 8016040:	4630      	mov	r0, r6
 8016042:	4629      	mov	r1, r5
 8016044:	222c      	movs	r2, #44	@ 0x2c
 8016046:	f00e fa7f 	bl	8024548 <ble_memcpy>
 801604a:	4630      	mov	r0, r6
 801604c:	4621      	mov	r1, r4
 801604e:	220f      	movs	r2, #15
 8016050:	2300      	movs	r3, #0
 8016052:	f7fe ffd3 	bl	8014ffc <llcp_cntrl_pkt_init>
 8016056:	f894 1125 	ldrb.w	r1, [r4, #293]	@ 0x125
 801605a:	2901      	cmp	r1, #1
 801605c:	d01a      	beq.n	8016094 <llcp_update_param_req+0x12a>
 801605e:	4605      	mov	r5, r0
 8016060:	2900      	cmp	r1, #0
 8016062:	d1a3      	bne.n	8015fac <llcp_update_param_req+0x42>
 8016064:	f894 0124 	ldrb.w	r0, [r4, #292]	@ 0x124
 8016068:	280a      	cmp	r0, #10
 801606a:	bf18      	it	ne
 801606c:	2801      	cmpne	r0, #1
 801606e:	d19d      	bne.n	8015fac <llcp_update_param_req+0x42>
 8016070:	f242 300f 	movw	r0, #8975	@ 0x230f
 8016074:	f8ad 0004 	strh.w	r0, [sp, #4]
 8016078:	a801      	add	r0, sp, #4
 801607a:	4621      	mov	r1, r4
 801607c:	2211      	movs	r2, #17
 801607e:	2300      	movs	r3, #0
 8016080:	2600      	movs	r6, #0
 8016082:	f7fe ffbb 	bl	8014ffc <llcp_cntrl_pkt_init>
 8016086:	f884 608a 	strb.w	r6, [r4, #138]	@ 0x8a
 801608a:	f884 6124 	strb.w	r6, [r4, #292]	@ 0x124
 801608e:	f884 6128 	strb.w	r6, [r4, #296]	@ 0x128
 8016092:	e78b      	b.n	8015fac <llcp_update_param_req+0x42>
 8016094:	f8b4 107c 	ldrh.w	r1, [r4, #124]	@ 0x7c
 8016098:	4620      	mov	r0, r4
 801609a:	f7ff fe6e 	bl	8015d7a <llcp_update_eff_max_tx_time>
 801609e:	4605      	mov	r5, r0
 80160a0:	e784      	b.n	8015fac <llcp_update_param_req+0x42>

080160a2 <llcp_update_param_req_received>:
 80160a2:	b570      	push	{r4, r5, r6, lr}
 80160a4:	b082      	sub	sp, #8
 80160a6:	4604      	mov	r4, r0
 80160a8:	3074      	adds	r0, #116	@ 0x74
 80160aa:	222c      	movs	r2, #44	@ 0x2c
 80160ac:	460d      	mov	r5, r1
 80160ae:	f00e fa4b 	bl	8024548 <ble_memcpy>
 80160b2:	8ae0      	ldrh	r0, [r4, #22]
 80160b4:	f8b4 107e 	ldrh.w	r1, [r4, #126]	@ 0x7e
 80160b8:	4288      	cmp	r0, r1
 80160ba:	d10d      	bne.n	80160d8 <llcp_update_param_req_received+0x36>
 80160bc:	f8b4 00dc 	ldrh.w	r0, [r4, #220]	@ 0xdc
 80160c0:	f8b4 1080 	ldrh.w	r1, [r4, #128]	@ 0x80
 80160c4:	4288      	cmp	r0, r1
 80160c6:	d107      	bne.n	80160d8 <llcp_update_param_req_received+0x36>
 80160c8:	8b60      	ldrh	r0, [r4, #26]
 80160ca:	f8b4 1082 	ldrh.w	r1, [r4, #130]	@ 0x82
 80160ce:	4288      	cmp	r0, r1
 80160d0:	d102      	bne.n	80160d8 <llcp_update_param_req_received+0x36>
 80160d2:	f894 009c 	ldrb.w	r0, [r4, #156]	@ 0x9c
 80160d6:	b3d8      	cbz	r0, 8016150 <llcp_update_param_req_received+0xae>
 80160d8:	2007      	movs	r0, #7
 80160da:	f884 005c 	strb.w	r0, [r4, #92]	@ 0x5c
 80160de:	4620      	mov	r0, r4
 80160e0:	210a      	movs	r1, #10
 80160e2:	f7ff f9fb 	bl	80154dc <llcp_cntrl_init>
 80160e6:	8929      	ldrh	r1, [r5, #8]
 80160e8:	8968      	ldrh	r0, [r5, #10]
 80160ea:	261e      	movs	r6, #30
 80160ec:	4281      	cmp	r1, r0
 80160ee:	d827      	bhi.n	8016140 <llcp_update_param_req_received+0x9e>
 80160f0:	89aa      	ldrh	r2, [r5, #12]
 80160f2:	0892      	lsrs	r2, r2, #2
 80160f4:	2a7c      	cmp	r2, #124	@ 0x7c
 80160f6:	d823      	bhi.n	8016140 <llcp_update_param_req_received+0x9e>
 80160f8:	1f8a      	subs	r2, r1, #6
 80160fa:	f640 417a 	movw	r1, #3194	@ 0xc7a
 80160fe:	428a      	cmp	r2, r1
 8016100:	d81e      	bhi.n	8016140 <llcp_update_param_req_received+0x9e>
 8016102:	3806      	subs	r0, #6
 8016104:	4288      	cmp	r0, r1
 8016106:	d81b      	bhi.n	8016140 <llcp_update_param_req_received+0x9e>
 8016108:	89e8      	ldrh	r0, [r5, #14]
 801610a:	f640 4176 	movw	r1, #3190	@ 0xc76
 801610e:	380a      	subs	r0, #10
 8016110:	4288      	cmp	r0, r1
 8016112:	d815      	bhi.n	8016140 <llcp_update_param_req_received+0x9e>
 8016114:	f646 5038 	movw	r0, #27960	@ 0x6d38
 8016118:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801611c:	6800      	ldr	r0, [r0, #0]
 801611e:	6ac6      	ldr	r6, [r0, #44]	@ 0x2c
 8016120:	b16e      	cbz	r6, 801613e <llcp_update_param_req_received+0x9c>
 8016122:	200a      	movs	r0, #10
 8016124:	f884 0124 	strb.w	r0, [r4, #292]	@ 0x124
 8016128:	f8b4 00de 	ldrh.w	r0, [r4, #222]	@ 0xde
 801612c:	8929      	ldrh	r1, [r5, #8]
 801612e:	896a      	ldrh	r2, [r5, #10]
 8016130:	89ab      	ldrh	r3, [r5, #12]
 8016132:	89ed      	ldrh	r5, [r5, #14]
 8016134:	9500      	str	r5, [sp, #0]
 8016136:	47b0      	blx	r6
 8016138:	4606      	mov	r6, r0
 801613a:	b908      	cbnz	r0, 8016140 <llcp_update_param_req_received+0x9e>
 801613c:	e011      	b.n	8016162 <llcp_update_param_req_received+0xc0>
 801613e:	261a      	movs	r6, #26
 8016140:	f8b4 00de 	ldrh.w	r0, [r4, #222]	@ 0xde
 8016144:	b2f1      	uxtb	r1, r6
 8016146:	f000 f80e 	bl	8016166 <llcp_pram_ngtv_rply>
 801614a:	4630      	mov	r0, r6
 801614c:	b002      	add	sp, #8
 801614e:	bd70      	pop	{r4, r5, r6, pc}
 8016150:	f8b4 00de 	ldrh.w	r0, [r4, #222]	@ 0xde
 8016154:	f104 017c 	add.w	r1, r4, #124	@ 0x7c
 8016158:	220a      	movs	r2, #10
 801615a:	f884 2124 	strb.w	r2, [r4, #292]	@ 0x124
 801615e:	f000 f82a 	bl	80161b6 <llcp_pram_pstv_rply>
 8016162:	2600      	movs	r6, #0
 8016164:	e7f1      	b.n	801614a <llcp_update_param_req_received+0xa8>

08016166 <llcp_pram_ngtv_rply>:
 8016166:	b5b0      	push	{r4, r5, r7, lr}
 8016168:	b08c      	sub	sp, #48	@ 0x30
 801616a:	2808      	cmp	r0, #8
 801616c:	d21f      	bcs.n	80161ae <llcp_pram_ngtv_rply+0x48>
 801616e:	f649 6264 	movw	r2, #40548	@ 0x9e64
 8016172:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8016176:	f852 4020 	ldr.w	r4, [r2, r0, lsl #2]
 801617a:	200f      	movs	r0, #15
 801617c:	f88d 1005 	strb.w	r1, [sp, #5]
 8016180:	f88d 0004 	strb.w	r0, [sp, #4]
 8016184:	b19c      	cbz	r4, 80161ae <llcp_pram_ngtv_rply+0x48>
 8016186:	a801      	add	r0, sp, #4
 8016188:	4621      	mov	r1, r4
 801618a:	2211      	movs	r2, #17
 801618c:	2300      	movs	r3, #0
 801618e:	2500      	movs	r5, #0
 8016190:	f7fe ff34 	bl	8014ffc <llcp_cntrl_pkt_init>
 8016194:	4620      	mov	r0, r4
 8016196:	f850 1fd0 	ldr.w	r1, [r0, #208]!
 801619a:	b109      	cbz	r1, 80161a0 <llcp_pram_ngtv_rply+0x3a>
 801619c:	f00b ffc8 	bl	8022130 <os_timer_stop_free>
 80161a0:	f884 508a 	strb.w	r5, [r4, #138]	@ 0x8a
 80161a4:	f884 5124 	strb.w	r5, [r4, #292]	@ 0x124
 80161a8:	f884 5128 	strb.w	r5, [r4, #296]	@ 0x128
 80161ac:	e000      	b.n	80161b0 <llcp_pram_ngtv_rply+0x4a>
 80161ae:	2502      	movs	r5, #2
 80161b0:	4628      	mov	r0, r5
 80161b2:	b00c      	add	sp, #48	@ 0x30
 80161b4:	bdb0      	pop	{r4, r5, r7, pc}

080161b6 <llcp_pram_pstv_rply>:
 80161b6:	b5b0      	push	{r4, r5, r7, lr}
 80161b8:	b08c      	sub	sp, #48	@ 0x30
 80161ba:	2808      	cmp	r0, #8
 80161bc:	d238      	bcs.n	8016230 <llcp_pram_pstv_rply+0x7a>
 80161be:	460d      	mov	r5, r1
 80161c0:	f649 6164 	movw	r1, #40548	@ 0x9e64
 80161c4:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 80161c8:	f851 4020 	ldr.w	r4, [r1, r0, lsl #2]
 80161cc:	b384      	cbz	r4, 8016230 <llcp_pram_pstv_rply+0x7a>
 80161ce:	88e8      	ldrh	r0, [r5, #6]
 80161d0:	88a9      	ldrh	r1, [r5, #4]
 80161d2:	886a      	ldrh	r2, [r5, #2]
 80161d4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80161d8:	3101      	adds	r1, #1
 80161da:	fb02 f101 	mul.w	r1, r2, r1
 80161de:	0040      	lsls	r0, r0, #1
 80161e0:	ebb0 0f41 	cmp.w	r0, r1, lsl #1
 80161e4:	d927      	bls.n	8016236 <llcp_pram_pstv_rply+0x80>
 80161e6:	4620      	mov	r0, r4
 80161e8:	f850 1fd0 	ldr.w	r1, [r0, #208]!
 80161ec:	b109      	cbz	r1, 80161f2 <llcp_pram_pstv_rply+0x3c>
 80161ee:	f00b ff9f 	bl	8022130 <os_timer_stop_free>
 80161f2:	f894 0125 	ldrb.w	r0, [r4, #293]	@ 0x125
 80161f6:	b300      	cbz	r0, 801623a <llcp_pram_pstv_rply+0x84>
 80161f8:	2000      	movs	r0, #0
 80161fa:	f884 0090 	strb.w	r0, [r4, #144]	@ 0x90
 80161fe:	8868      	ldrh	r0, [r5, #2]
 8016200:	f104 0174 	add.w	r1, r4, #116	@ 0x74
 8016204:	f8a4 007e 	strh.w	r0, [r4, #126]	@ 0x7e
 8016208:	8828      	ldrh	r0, [r5, #0]
 801620a:	ad01      	add	r5, sp, #4
 801620c:	f8a4 007c 	strh.w	r0, [r4, #124]	@ 0x7c
 8016210:	4628      	mov	r0, r5
 8016212:	222c      	movs	r2, #44	@ 0x2c
 8016214:	f00e f998 	bl	8024548 <ble_memcpy>
 8016218:	4628      	mov	r0, r5
 801621a:	4621      	mov	r1, r4
 801621c:	2210      	movs	r2, #16
 801621e:	2300      	movs	r3, #0
 8016220:	f7fe feec 	bl	8014ffc <llcp_cntrl_pkt_init>
 8016224:	f8b4 107c 	ldrh.w	r1, [r4, #124]	@ 0x7c
 8016228:	4620      	mov	r0, r4
 801622a:	f7ff fda6 	bl	8015d7a <llcp_update_eff_max_tx_time>
 801622e:	e000      	b.n	8016232 <llcp_pram_pstv_rply+0x7c>
 8016230:	2002      	movs	r0, #2
 8016232:	b00c      	add	sp, #48	@ 0x30
 8016234:	bdb0      	pop	{r4, r5, r7, pc}
 8016236:	2012      	movs	r0, #18
 8016238:	e7fb      	b.n	8016232 <llcp_pram_pstv_rply+0x7c>
 801623a:	200b      	movs	r0, #11
 801623c:	73a8      	strb	r0, [r5, #14]
 801623e:	f8b4 0088 	ldrh.w	r0, [r4, #136]	@ 0x88
 8016242:	4629      	mov	r1, r5
 8016244:	81a8      	strh	r0, [r5, #12]
 8016246:	f8b4 00de 	ldrh.w	r0, [r4, #222]	@ 0xde
 801624a:	b00c      	add	sp, #48	@ 0x30
 801624c:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8016250:	f7ff bcc8 	b.w	8015be4 <llcp_update_conn_param>

08016254 <llcp_update_chnl_map_per_connection>:
 8016254:	b5b0      	push	{r4, r5, r7, lr}
 8016256:	4604      	mov	r4, r0
 8016258:	f890 0125 	ldrb.w	r0, [r0, #293]	@ 0x125
 801625c:	2801      	cmp	r0, #1
 801625e:	d012      	beq.n	8016286 <llcp_update_chnl_map_per_connection+0x32>
 8016260:	b978      	cbnz	r0, 8016282 <llcp_update_chnl_map_per_connection+0x2e>
 8016262:	f894 0123 	ldrb.w	r0, [r4, #291]	@ 0x123
 8016266:	b180      	cbz	r0, 801628a <llcp_update_chnl_map_per_connection+0x36>
 8016268:	2100      	movs	r1, #0
 801626a:	2001      	movs	r0, #1
 801626c:	4421      	add	r1, r4
 801626e:	f891 213b 	ldrb.w	r2, [r1, #315]	@ 0x13b
 8016272:	2aff      	cmp	r2, #255	@ 0xff
 8016274:	d031      	beq.n	80162da <llcp_update_chnl_map_per_connection+0x86>
 8016276:	07c0      	lsls	r0, r0, #31
 8016278:	f04f 0101 	mov.w	r1, #1
 801627c:	f04f 0000 	mov.w	r0, #0
 8016280:	d1f4      	bne.n	801626c <llcp_update_chnl_map_per_connection+0x18>
 8016282:	253a      	movs	r5, #58	@ 0x3a
 8016284:	e02e      	b.n	80162e4 <llcp_update_chnl_map_per_connection+0x90>
 8016286:	2511      	movs	r5, #17
 8016288:	e02c      	b.n	80162e4 <llcp_update_chnl_map_per_connection+0x90>
 801628a:	2003      	movs	r0, #3
 801628c:	f884 005c 	strb.w	r0, [r4, #92]	@ 0x5c
 8016290:	2002      	movs	r0, #2
 8016292:	f884 007b 	strb.w	r0, [r4, #123]	@ 0x7b
 8016296:	f884 0123 	strb.w	r0, [r4, #291]	@ 0x123
 801629a:	2028      	movs	r0, #40	@ 0x28
 801629c:	f884 0128 	strb.w	r0, [r4, #296]	@ 0x128
 80162a0:	f8d4 00cc 	ldr.w	r0, [r4, #204]	@ 0xcc
 80162a4:	2101      	movs	r1, #1
 80162a6:	fab0 f080 	clz	r0, r0
 80162aa:	0940      	lsrs	r0, r0, #5
 80162ac:	f104 0558 	add.w	r5, r4, #88	@ 0x58
 80162b0:	65a4      	str	r4, [r4, #88]	@ 0x58
 80162b2:	f009 fab6 	bl	801f822 <bsp_assert>
 80162b6:	f645 6043 	movw	r0, #24131	@ 0x5e43
 80162ba:	f6c0 0001 	movt	r0, #2049	@ 0x801
 80162be:	2100      	movs	r1, #0
 80162c0:	462a      	mov	r2, r5
 80162c2:	2500      	movs	r5, #0
 80162c4:	f00b fd82 	bl	8021dcc <os_timer_create>
 80162c8:	2101      	movs	r1, #1
 80162ca:	f8c4 00cc 	str.w	r0, [r4, #204]	@ 0xcc
 80162ce:	2800      	cmp	r0, #0
 80162d0:	bf18      	it	ne
 80162d2:	2001      	movne	r0, #1
 80162d4:	f009 faa5 	bl	801f822 <bsp_assert>
 80162d8:	e004      	b.n	80162e4 <llcp_update_chnl_map_per_connection+0x90>
 80162da:	f201 103b 	addw	r0, r1, #315	@ 0x13b
 80162de:	2102      	movs	r1, #2
 80162e0:	7001      	strb	r1, [r0, #0]
 80162e2:	2500      	movs	r5, #0
 80162e4:	4628      	mov	r0, r5
 80162e6:	bdb0      	pop	{r4, r5, r7, pc}

080162e8 <llcp_update_chnl_map>:
 80162e8:	b5b0      	push	{r4, r5, r7, lr}
 80162ea:	f649 6564 	movw	r5, #40548	@ 0x9e64
 80162ee:	2400      	movs	r4, #0
 80162f0:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 80162f4:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 80162f8:	b108      	cbz	r0, 80162fe <llcp_update_chnl_map+0x16>
 80162fa:	f7ff ffab 	bl	8016254 <llcp_update_chnl_map_per_connection>
 80162fe:	3401      	adds	r4, #1
 8016300:	2c08      	cmp	r4, #8
 8016302:	bf04      	itt	eq
 8016304:	2028      	moveq	r0, #40	@ 0x28
 8016306:	bdb0      	popeq	{r4, r5, r7, pc}
 8016308:	e7f4      	b.n	80162f4 <llcp_update_chnl_map+0xc>

0801630a <llcp_update_chnl_map_received>:
 801630a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801630e:	b081      	sub	sp, #4
 8016310:	880f      	ldrh	r7, [r1, #0]
 8016312:	f8b0 50da 	ldrh.w	r5, [r0, #218]	@ 0xda
 8016316:	4604      	mov	r4, r0
 8016318:	42bd      	cmp	r5, r7
 801631a:	bf88      	it	hi
 801631c:	f507 3780 	addhi.w	r7, r7, #65536	@ 0x10000
 8016320:	f890 0125 	ldrb.w	r0, [r0, #293]	@ 0x125
 8016324:	f8b4 9016 	ldrh.w	r9, [r4, #22]
 8016328:	2801      	cmp	r0, #1
 801632a:	f8a4 7070 	strh.w	r7, [r4, #112]	@ 0x70
 801632e:	d12d      	bne.n	801638c <llcp_update_chnl_map_received+0x82>
 8016330:	460e      	mov	r6, r1
 8016332:	8808      	ldrh	r0, [r1, #0]
 8016334:	f248 0101 	movw	r1, #32769	@ 0x8001
 8016338:	f6cf 71ff 	movt	r1, #65535	@ 0xffff
 801633c:	1b49      	subs	r1, r1, r5
 801633e:	4408      	add	r0, r1
 8016340:	b280      	uxth	r0, r0
 8016342:	f248 0103 	movw	r1, #32771	@ 0x8003
 8016346:	4288      	cmp	r0, r1
 8016348:	d323      	bcc.n	8016392 <llcp_update_chnl_map_received+0x88>
 801634a:	2003      	movs	r0, #3
 801634c:	f884 005c 	strb.w	r0, [r4, #92]	@ 0x5c
 8016350:	2002      	movs	r0, #2
 8016352:	f884 0124 	strb.w	r0, [r4, #292]	@ 0x124
 8016356:	f894 0137 	ldrb.w	r0, [r4, #311]	@ 0x137
 801635a:	f04f 0800 	mov.w	r8, #0
 801635e:	2801      	cmp	r0, #1
 8016360:	65a4      	str	r4, [r4, #88]	@ 0x58
 8016362:	f884 8128 	strb.w	r8, [r4, #296]	@ 0x128
 8016366:	d11b      	bne.n	80163a0 <llcp_update_chnl_map_received+0x96>
 8016368:	f894 012c 	ldrb.w	r0, [r4, #300]	@ 0x12c
 801636c:	f894 1135 	ldrb.w	r1, [r4, #309]	@ 0x135
 8016370:	4201      	tst	r1, r0
 8016372:	d015      	beq.n	80163a0 <llcp_update_chnl_map_received+0x96>
 8016374:	1cb0      	adds	r0, r6, #2
 8016376:	f00f fa9f 	bl	80258b8 <conn_mngr_calc_num_of_used_data_chnls>
 801637a:	f894 1136 	ldrb.w	r1, [r4, #310]	@ 0x136
 801637e:	4288      	cmp	r0, r1
 8016380:	d20e      	bcs.n	80163a0 <llcp_update_chnl_map_received+0x96>
 8016382:	4620      	mov	r0, r4
 8016384:	211a      	movs	r1, #26
 8016386:	f04f 081a 	mov.w	r8, #26
 801638a:	e006      	b.n	801639a <llcp_update_chnl_map_received+0x90>
 801638c:	f04f 0800 	mov.w	r8, #0
 8016390:	e039      	b.n	8016406 <llcp_update_chnl_map_received+0xfc>
 8016392:	4620      	mov	r0, r4
 8016394:	2128      	movs	r1, #40	@ 0x28
 8016396:	f04f 0828 	mov.w	r8, #40	@ 0x28
 801639a:	f00f fafb 	bl	8025994 <conn_mngr_disconnect>
 801639e:	e032      	b.n	8016406 <llcp_update_chnl_map_received+0xfc>
 80163a0:	1b78      	subs	r0, r7, r5
 80163a2:	fb09 f000 	mul.w	r0, r9, r0
 80163a6:	ea4f 0159 	mov.w	r1, r9, lsr #1
 80163aa:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80163ae:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80163b2:	0880      	lsrs	r0, r0, #2
 80163b4:	eba0 0591 	sub.w	r5, r0, r1, lsr #2
 80163b8:	f104 0074 	add.w	r0, r4, #116	@ 0x74
 80163bc:	4631      	mov	r1, r6
 80163be:	2208      	movs	r2, #8
 80163c0:	f104 0758 	add.w	r7, r4, #88	@ 0x58
 80163c4:	f00e f8c0 	bl	8024548 <ble_memcpy>
 80163c8:	f8d4 00cc 	ldr.w	r0, [r4, #204]	@ 0xcc
 80163cc:	2101      	movs	r1, #1
 80163ce:	fab0 f080 	clz	r0, r0
 80163d2:	0940      	lsrs	r0, r0, #5
 80163d4:	f009 fa25 	bl	801f822 <bsp_assert>
 80163d8:	f645 6043 	movw	r0, #24131	@ 0x5e43
 80163dc:	f6c0 0001 	movt	r0, #2049	@ 0x801
 80163e0:	2100      	movs	r1, #0
 80163e2:	463a      	mov	r2, r7
 80163e4:	f00b fcf2 	bl	8021dcc <os_timer_create>
 80163e8:	2101      	movs	r1, #1
 80163ea:	f8c4 00cc 	str.w	r0, [r4, #204]	@ 0xcc
 80163ee:	2800      	cmp	r0, #0
 80163f0:	bf18      	it	ne
 80163f2:	2001      	movne	r0, #1
 80163f4:	f009 fa15 	bl	801f822 <bsp_assert>
 80163f8:	f8d4 00cc 	ldr.w	r0, [r4, #204]	@ 0xcc
 80163fc:	0169      	lsls	r1, r5, #5
 80163fe:	f8a4 80dc 	strh.w	r8, [r4, #220]	@ 0xdc
 8016402:	f00b fd5c 	bl	8021ebe <os_timer_start>
 8016406:	4640      	mov	r0, r8
 8016408:	b001      	add	sp, #4
 801640a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0801640e <llcp_process_pkt>:
 801640e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016412:	b081      	sub	sp, #4
 8016414:	460d      	mov	r5, r1
 8016416:	f8b0 90de 	ldrh.w	r9, [r0, #222]	@ 0xde
 801641a:	2101      	movs	r1, #1
 801641c:	4698      	mov	r8, r3
 801641e:	4617      	mov	r7, r2
 8016420:	4606      	mov	r6, r0
 8016422:	2800      	cmp	r0, #0
 8016424:	bf18      	it	ne
 8016426:	2001      	movne	r0, #1
 8016428:	2401      	movs	r4, #1
 801642a:	f009 f9fa 	bl	801f822 <bsp_assert>
 801642e:	b935      	cbnz	r5, 801643e <llcp_process_pkt+0x30>
 8016430:	b127      	cbz	r7, 801643c <llcp_process_pkt+0x2e>
 8016432:	783c      	ldrb	r4, [r7, #0]
 8016434:	2c00      	cmp	r4, #0
 8016436:	bf18      	it	ne
 8016438:	2401      	movne	r4, #1
 801643a:	e000      	b.n	801643e <llcp_process_pkt+0x30>
 801643c:	2400      	movs	r4, #0
 801643e:	4620      	mov	r0, r4
 8016440:	2101      	movs	r1, #1
 8016442:	f009 f9ee 	bl	801f822 <bsp_assert>
 8016446:	7838      	ldrb	r0, [r7, #0]
 8016448:	b300      	cbz	r0, 801648c <llcp_process_pkt+0x7e>
 801644a:	f896 0123 	ldrb.w	r0, [r6, #291]	@ 0x123
 801644e:	2801      	cmp	r0, #1
 8016450:	d011      	beq.n	8016476 <llcp_process_pkt+0x68>
 8016452:	f896 1124 	ldrb.w	r1, [r6, #292]	@ 0x124
 8016456:	2901      	cmp	r1, #1
 8016458:	d00b      	beq.n	8016472 <llcp_process_pkt+0x64>
 801645a:	2802      	cmp	r0, #2
 801645c:	bf18      	it	ne
 801645e:	2805      	cmpne	r0, #5
 8016460:	d007      	beq.n	8016472 <llcp_process_pkt+0x64>
 8016462:	2907      	cmp	r1, #7
 8016464:	bf18      	it	ne
 8016466:	2807      	cmpne	r0, #7
 8016468:	d003      	beq.n	8016472 <llcp_process_pkt+0x64>
 801646a:	280c      	cmp	r0, #12
 801646c:	bf18      	it	ne
 801646e:	2908      	cmpne	r1, #8
 8016470:	d142      	bne.n	80164f8 <llcp_process_pkt+0xea>
 8016472:	2901      	cmp	r1, #1
 8016474:	d11c      	bne.n	80164b0 <llcp_process_pkt+0xa2>
 8016476:	4630      	mov	r0, r6
 8016478:	f850 1fc8 	ldr.w	r1, [r0, #200]!
 801647c:	2296      	movs	r2, #150	@ 0x96
 801647e:	f880 2060 	strb.w	r2, [r0, #96]	@ 0x60
 8016482:	b109      	cbz	r1, 8016488 <llcp_process_pkt+0x7a>
 8016484:	f00b fe54 	bl	8022130 <os_timer_stop_free>
 8016488:	2000      	movs	r0, #0
 801648a:	7038      	strb	r0, [r7, #0]
 801648c:	b165      	cbz	r5, 80164a8 <llcp_process_pkt+0x9a>
 801648e:	f649 6064 	movw	r0, #40548	@ 0x9e64
 8016492:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8016496:	f850 0029 	ldr.w	r0, [r0, r9, lsl #2]
 801649a:	42b0      	cmp	r0, r6
 801649c:	d104      	bne.n	80164a8 <llcp_process_pkt+0x9a>
 801649e:	4630      	mov	r0, r6
 80164a0:	4629      	mov	r1, r5
 80164a2:	4642      	mov	r2, r8
 80164a4:	f000 f866 	bl	8016574 <llcp_pkt_received>
 80164a8:	2000      	movs	r0, #0
 80164aa:	b001      	add	sp, #4
 80164ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80164b0:	2805      	cmp	r0, #5
 80164b2:	d005      	beq.n	80164c0 <llcp_process_pkt+0xb2>
 80164b4:	2802      	cmp	r0, #2
 80164b6:	d10b      	bne.n	80164d0 <llcp_process_pkt+0xc2>
 80164b8:	2096      	movs	r0, #150	@ 0x96
 80164ba:	f886 0128 	strb.w	r0, [r6, #296]	@ 0x128
 80164be:	e7e3      	b.n	8016488 <llcp_process_pkt+0x7a>
 80164c0:	2016      	movs	r0, #22
 80164c2:	f886 0128 	strb.w	r0, [r6, #296]	@ 0x128
 80164c6:	4630      	mov	r0, r6
 80164c8:	2116      	movs	r1, #22
 80164ca:	f00f fa63 	bl	8025994 <conn_mngr_disconnect>
 80164ce:	e7db      	b.n	8016488 <llcp_process_pkt+0x7a>
 80164d0:	2908      	cmp	r1, #8
 80164d2:	d014      	beq.n	80164fe <llcp_process_pkt+0xf0>
 80164d4:	2907      	cmp	r1, #7
 80164d6:	d117      	bne.n	8016508 <llcp_process_pkt+0xfa>
 80164d8:	f896 0122 	ldrb.w	r0, [r6, #290]	@ 0x122
 80164dc:	2802      	cmp	r0, #2
 80164de:	d02b      	beq.n	8016538 <llcp_process_pkt+0x12a>
 80164e0:	2801      	cmp	r0, #1
 80164e2:	d02d      	beq.n	8016540 <llcp_process_pkt+0x132>
 80164e4:	2800      	cmp	r0, #0
 80164e6:	d1cf      	bne.n	8016488 <llcp_process_pkt+0x7a>
 80164e8:	f8b6 210e 	ldrh.w	r2, [r6, #270]	@ 0x10e
 80164ec:	f506 7183 	add.w	r1, r6, #262	@ 0x106
 80164f0:	4630      	mov	r0, r6
 80164f2:	f7ff f8d0 	bl	8015696 <llcp_req_lng_trm_key>
 80164f6:	e7c7      	b.n	8016488 <llcp_process_pkt+0x7a>
 80164f8:	280d      	cmp	r0, #13
 80164fa:	d1c5      	bne.n	8016488 <llcp_process_pkt+0x7a>
 80164fc:	e7b9      	b.n	8016472 <llcp_process_pkt+0x64>
 80164fe:	2007      	movs	r0, #7
 8016500:	f886 0124 	strb.w	r0, [r6, #292]	@ 0x124
 8016504:	2000      	movs	r0, #0
 8016506:	e018      	b.n	801653a <llcp_process_pkt+0x12c>
 8016508:	280d      	cmp	r0, #13
 801650a:	d021      	beq.n	8016550 <llcp_process_pkt+0x142>
 801650c:	280c      	cmp	r0, #12
 801650e:	d0d3      	beq.n	80164b8 <llcp_process_pkt+0xaa>
 8016510:	2807      	cmp	r0, #7
 8016512:	d12a      	bne.n	801656a <llcp_process_pkt+0x15c>
 8016514:	f896 0122 	ldrb.w	r0, [r6, #290]	@ 0x122
 8016518:	2803      	cmp	r0, #3
 801651a:	d1b5      	bne.n	8016488 <llcp_process_pkt+0x7a>
 801651c:	2000      	movs	r0, #0
 801651e:	f886 0122 	strb.w	r0, [r6, #290]	@ 0x122
 8016522:	f8b6 00de 	ldrh.w	r0, [r6, #222]	@ 0xde
 8016526:	f8b6 2104 	ldrh.w	r2, [r6, #260]	@ 0x104
 801652a:	f506 718b 	add.w	r1, r6, #278	@ 0x116
 801652e:	f506 7383 	add.w	r3, r6, #262	@ 0x106
 8016532:	f7fe ff3d 	bl	80153b0 <llcp_encryption_req>
 8016536:	e7a7      	b.n	8016488 <llcp_process_pkt+0x7a>
 8016538:	2001      	movs	r0, #1
 801653a:	f886 0122 	strb.w	r0, [r6, #290]	@ 0x122
 801653e:	e7a3      	b.n	8016488 <llcp_process_pkt+0x7a>
 8016540:	f8d6 00c0 	ldr.w	r0, [r6, #192]	@ 0xc0
 8016544:	f7fc fb24 	bl	8012b90 <evnt_schdlr_send_pndng_data_pkt>
 8016548:	2000      	movs	r0, #0
 801654a:	f886 0124 	strb.w	r0, [r6, #292]	@ 0x124
 801654e:	e79b      	b.n	8016488 <llcp_process_pkt+0x7a>
 8016550:	4630      	mov	r0, r6
 8016552:	f850 1fc8 	ldr.w	r1, [r0, #200]!
 8016556:	2296      	movs	r2, #150	@ 0x96
 8016558:	2900      	cmp	r1, #0
 801655a:	f880 2060 	strb.w	r2, [r0, #96]	@ 0x60
 801655e:	f43f af93 	beq.w	8016488 <llcp_process_pkt+0x7a>
 8016562:	2100      	movs	r1, #0
 8016564:	f886 1123 	strb.w	r1, [r6, #291]	@ 0x123
 8016568:	e78c      	b.n	8016484 <llcp_process_pkt+0x76>
 801656a:	2000      	movs	r0, #0
 801656c:	2101      	movs	r1, #1
 801656e:	f009 f958 	bl	801f822 <bsp_assert>
 8016572:	e789      	b.n	8016488 <llcp_process_pkt+0x7a>

08016574 <llcp_pkt_received>:
 8016574:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016578:	b08f      	sub	sp, #60	@ 0x3c
 801657a:	4605      	mov	r5, r0
 801657c:	2000      	movs	r0, #0
 801657e:	900d      	str	r0, [sp, #52]	@ 0x34
 8016580:	2003      	movs	r0, #3
 8016582:	4616      	mov	r6, r2
 8016584:	460c      	mov	r4, r1
 8016586:	f88d 0007 	strb.w	r0, [sp, #7]
 801658a:	a802      	add	r0, sp, #8
 801658c:	2100      	movs	r1, #0
 801658e:	222c      	movs	r2, #44	@ 0x2c
 8016590:	f00e f82a 	bl	80245e8 <ble_memset>
 8016594:	6820      	ldr	r0, [r4, #0]
 8016596:	8961      	ldrh	r1, [r4, #10]
 8016598:	4401      	add	r1, r0
 801659a:	7908      	ldrb	r0, [r1, #4]
 801659c:	2811      	cmp	r0, #17
 801659e:	f88d 003b 	strb.w	r0, [sp, #59]	@ 0x3b
 80165a2:	d103      	bne.n	80165ac <llcp_pkt_received+0x38>
 80165a4:	f891 9005 	ldrb.w	r9, [r1, #5]
 80165a8:	2111      	movs	r1, #17
 80165aa:	e004      	b.n	80165b6 <llcp_pkt_received+0x42>
 80165ac:	282a      	cmp	r0, #42	@ 0x2a
 80165ae:	d859      	bhi.n	8016664 <llcp_pkt_received+0xf0>
 80165b0:	f04f 0900 	mov.w	r9, #0
 80165b4:	4601      	mov	r1, r0
 80165b6:	89a2      	ldrh	r2, [r4, #12]
 80165b8:	f60f 035c 	addw	r3, pc, #2140	@ 0x85c
 80165bc:	5c59      	ldrb	r1, [r3, r1]
 80165be:	3a04      	subs	r2, #4
 80165c0:	428a      	cmp	r2, r1
 80165c2:	d14f      	bne.n	8016664 <llcp_pkt_received+0xf0>
 80165c4:	f10d 0007 	add.w	r0, sp, #7
 80165c8:	f10d 013b 	add.w	r1, sp, #59	@ 0x3b
 80165cc:	aa02      	add	r2, sp, #8
 80165ce:	4623      	mov	r3, r4
 80165d0:	f007 ff78 	bl	801e4c4 <pdu_trnsprt_hndlr_parse_data_cntrl>
 80165d4:	f895 1123 	ldrb.w	r1, [r5, #291]	@ 0x123
 80165d8:	2907      	cmp	r1, #7
 80165da:	d004      	beq.n	80165e6 <llcp_pkt_received+0x72>
 80165dc:	f895 2124 	ldrb.w	r2, [r5, #292]	@ 0x124
 80165e0:	3a07      	subs	r2, #7
 80165e2:	2a01      	cmp	r2, #1
 80165e4:	d80e      	bhi.n	8016604 <llcp_pkt_received+0x90>
 80165e6:	f89d 203b 	ldrb.w	r2, [sp, #59]	@ 0x3b
 80165ea:	2a11      	cmp	r2, #17
 80165ec:	f200 808e 	bhi.w	801670c <llcp_pkt_received+0x198>
 80165f0:	2301      	movs	r3, #1
 80165f2:	fa03 f202 	lsl.w	r2, r3, r2
 80165f6:	f642 437c 	movw	r3, #11388	@ 0x2c7c
 80165fa:	f2c0 0302 	movt	r3, #2
 80165fe:	421a      	tst	r2, r3
 8016600:	f000 8084 	beq.w	801670c <llcp_pkt_received+0x198>
 8016604:	2800      	cmp	r0, #0
 8016606:	d039      	beq.n	801667c <llcp_pkt_received+0x108>
 8016608:	f895 3124 	ldrb.w	r3, [r5, #292]	@ 0x124
 801660c:	b123      	cbz	r3, 8016618 <llcp_pkt_received+0xa4>
 801660e:	2909      	cmp	r1, #9
 8016610:	bf18      	it	ne
 8016612:	2910      	cmpne	r1, #16
 8016614:	f040 805a 	bne.w	80166cc <llcp_pkt_received+0x158>
 8016618:	f89d 203b 	ldrb.w	r2, [sp, #59]	@ 0x3b
 801661c:	2a19      	cmp	r2, #25
 801661e:	f200 81ac 	bhi.w	801697a <llcp_pkt_received+0x406>
 8016622:	e8df f012 	tbh	[pc, r2, lsl #1]
 8016626:	0084      	.short	0x0084
 8016628:	008e0089 	.word	0x008e0089
 801662c:	00980093 	.word	0x00980093
 8016630:	00af009d 	.word	0x00af009d
 8016634:	001a00d4 	.word	0x001a00d4
 8016638:	0104001a 	.word	0x0104001a
 801663c:	0129011d 	.word	0x0129011d
 8016640:	001a012e 	.word	0x001a012e
 8016644:	01550150 	.word	0x01550150
 8016648:	0100016a 	.word	0x0100016a
 801664c:	007c0100 	.word	0x007c0100
 8016650:	019b007c 	.word	0x019b007c
 8016654:	01a001ad 	.word	0x01a001ad
 8016658:	01a5      	.short	0x01a5
 801665a:	a902      	add	r1, sp, #8
 801665c:	4628      	mov	r0, r5
 801665e:	f7ff f95c 	bl	801591a <llcp_read_remote_features_received>
 8016662:	e0c4      	b.n	80167ee <llcp_pkt_received+0x27a>
 8016664:	f88d 0008 	strb.w	r0, [sp, #8]
 8016668:	a802      	add	r0, sp, #8
 801666a:	4629      	mov	r1, r5
 801666c:	2207      	movs	r2, #7
 801666e:	2300      	movs	r3, #0
 8016670:	f7fe fcc4 	bl	8014ffc <llcp_cntrl_pkt_init>
 8016674:	e0bb      	b.n	80167ee <llcp_pkt_received+0x27a>
 8016676:	b00f      	add	sp, #60	@ 0x3c
 8016678:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801667c:	f89d 803b 	ldrb.w	r8, [sp, #59]	@ 0x3b
 8016680:	f1b8 0f19 	cmp.w	r8, #25
 8016684:	d8c0      	bhi.n	8016608 <llcp_pkt_received+0x94>
 8016686:	e8df f018 	tbh	[pc, r8, lsl #1]
 801668a:	0188      	.short	0x0188
 801668c:	001a0193 	.word	0x001a0193
 8016690:	01b4019b 	.word	0x01b4019b
 8016694:	001a001b 	.word	0x001a001b
 8016698:	01df01bd 	.word	0x01df01bd
 801669c:	01eb01e3 	.word	0x01eb01e3
 80166a0:	01f1001a 	.word	0x01f1001a
 80166a4:	01f5001a 	.word	0x01f5001a
 80166a8:	020f01fd 	.word	0x020f01fd
 80166ac:	01fa001a 	.word	0x01fa001a
 80166b0:	01fa01d7 	.word	0x01fa01d7
 80166b4:	021801db 	.word	0x021801db
 80166b8:	022b0222 	.word	0x022b0222
 80166bc:	001b      	.short	0x001b
 80166be:	e7a3      	b.n	8016608 <llcp_pkt_received+0x94>
 80166c0:	f895 2125 	ldrb.w	r2, [r5, #293]	@ 0x125
 80166c4:	2a01      	cmp	r2, #1
 80166c6:	f47f af9f 	bne.w	8016608 <llcp_pkt_received+0x94>
 80166ca:	e288      	b.n	8016bde <llcp_pkt_received+0x66a>
 80166cc:	2b0a      	cmp	r3, #10
 80166ce:	d806      	bhi.n	80166de <llcp_pkt_received+0x16a>
 80166d0:	2201      	movs	r2, #1
 80166d2:	409a      	lsls	r2, r3
 80166d4:	f240 4782 	movw	r7, #1154	@ 0x482
 80166d8:	423a      	tst	r2, r7
 80166da:	f47f af9d 	bne.w	8016618 <llcp_pkt_received+0xa4>
 80166de:	2b0c      	cmp	r3, #12
 80166e0:	f43f af9a 	beq.w	8016618 <llcp_pkt_received+0xa4>
 80166e4:	f89d 203b 	ldrb.w	r2, [sp, #59]	@ 0x3b
 80166e8:	2a11      	cmp	r2, #17
 80166ea:	bf18      	it	ne
 80166ec:	2a07      	cmpne	r2, #7
 80166ee:	f43f af93 	beq.w	8016618 <llcp_pkt_received+0xa4>
 80166f2:	290f      	cmp	r1, #15
 80166f4:	f43f af90 	beq.w	8016618 <llcp_pkt_received+0xa4>
 80166f8:	f082 030f 	eor.w	r3, r2, #15
 80166fc:	f081 0101 	eor.w	r1, r1, #1
 8016700:	f88d 2008 	strb.w	r2, [sp, #8]
 8016704:	4319      	orrs	r1, r3
 8016706:	bf08      	it	eq
 8016708:	2023      	moveq	r0, #35	@ 0x23
 801670a:	e1fe      	b.n	8016b0a <llcp_pkt_received+0x596>
 801670c:	f895 011f 	ldrb.w	r0, [r5, #287]	@ 0x11f
 8016710:	28aa      	cmp	r0, #170	@ 0xaa
 8016712:	d109      	bne.n	8016728 <llcp_pkt_received+0x1b4>
 8016714:	4628      	mov	r0, r5
 8016716:	213d      	movs	r1, #61	@ 0x3d
 8016718:	f00f f93c 	bl	8025994 <conn_mngr_disconnect>
 801671c:	e067      	b.n	80167ee <llcp_pkt_received+0x27a>
 801671e:	a902      	add	r1, sp, #8
 8016720:	4628      	mov	r0, r5
 8016722:	f7fe fd45 	bl	80151b0 <llcp_data_length_update_received>
 8016726:	e062      	b.n	80167ee <llcp_pkt_received+0x27a>
 8016728:	f8c5 4100 	str.w	r4, [r5, #256]	@ 0x100
 801672c:	e7a3      	b.n	8016676 <llcp_pkt_received+0x102>
 801672e:	a902      	add	r1, sp, #8
 8016730:	4628      	mov	r0, r5
 8016732:	f7ff fb94 	bl	8015e5e <llcp_update_conn_param_received>
 8016736:	e05a      	b.n	80167ee <llcp_pkt_received+0x27a>
 8016738:	a902      	add	r1, sp, #8
 801673a:	4628      	mov	r0, r5
 801673c:	f7ff fde5 	bl	801630a <llcp_update_chnl_map_received>
 8016740:	e055      	b.n	80167ee <llcp_pkt_received+0x27a>
 8016742:	a902      	add	r1, sp, #8
 8016744:	4628      	mov	r0, r5
 8016746:	f7ff f937 	bl	80159b8 <llcp_disconnect_received>
 801674a:	e050      	b.n	80167ee <llcp_pkt_received+0x27a>
 801674c:	a902      	add	r1, sp, #8
 801674e:	4628      	mov	r0, r5
 8016750:	f7fe ff4b 	bl	80155ea <llcp_enc_req_received>
 8016754:	e04b      	b.n	80167ee <llcp_pkt_received+0x27a>
 8016756:	a902      	add	r1, sp, #8
 8016758:	4628      	mov	r0, r5
 801675a:	f7fe ff21 	bl	80155a0 <llcp_enc_rsp_received>
 801675e:	e046      	b.n	80167ee <llcp_pkt_received+0x27a>
 8016760:	2907      	cmp	r1, #7
 8016762:	d144      	bne.n	80167ee <llcp_pkt_received+0x27a>
 8016764:	20bb      	movs	r0, #187	@ 0xbb
 8016766:	f885 011f 	strb.w	r0, [r5, #287]	@ 0x11f
 801676a:	2001      	movs	r0, #1
 801676c:	f885 0122 	strb.w	r0, [r5, #290]	@ 0x122
 8016770:	2000      	movs	r0, #0
 8016772:	4629      	mov	r1, r5
 8016774:	2206      	movs	r2, #6
 8016776:	2300      	movs	r3, #0
 8016778:	2600      	movs	r6, #0
 801677a:	f7fe fc3f 	bl	8014ffc <llcp_cntrl_pkt_init>
 801677e:	e9c5 663a 	strd	r6, r6, [r5, #232]	@ 0xe8
 8016782:	e034      	b.n	80167ee <llcp_pkt_received+0x27a>
 8016784:	2b07      	cmp	r3, #7
 8016786:	f040 81c6 	bne.w	8016b16 <llcp_pkt_received+0x5a2>
 801678a:	4628      	mov	r0, r5
 801678c:	f850 1fd0 	ldr.w	r1, [r0, #208]!
 8016790:	b109      	cbz	r1, 8016796 <llcp_pkt_received+0x222>
 8016792:	f00b fccd 	bl	8022130 <os_timer_stop_free>
 8016796:	2000      	movs	r0, #0
 8016798:	e9c5 063a 	strd	r0, r6, [r5, #232]	@ 0xe8
 801679c:	2000      	movs	r0, #0
 801679e:	4629      	mov	r1, r5
 80167a0:	2206      	movs	r2, #6
 80167a2:	2300      	movs	r3, #0
 80167a4:	f7fe fc2a 	bl	8014ffc <llcp_cntrl_pkt_init>
 80167a8:	f646 5038 	movw	r0, #27960	@ 0x6d38
 80167ac:	f895 111e 	ldrb.w	r1, [r5, #286]	@ 0x11e
 80167b0:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80167b4:	6800      	ldr	r0, [r0, #0]
 80167b6:	2908      	cmp	r1, #8
 80167b8:	f040 81e7 	bne.w	8016b8a <llcp_pkt_received+0x616>
 80167bc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80167be:	2a00      	cmp	r2, #0
 80167c0:	f000 8206 	beq.w	8016bd0 <llcp_pkt_received+0x65c>
 80167c4:	f8b5 10de 	ldrh.w	r1, [r5, #222]	@ 0xde
 80167c8:	2000      	movs	r0, #0
 80167ca:	4790      	blx	r2
 80167cc:	e200      	b.n	8016bd0 <llcp_pkt_received+0x65c>
 80167ce:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80167d2:	380e      	subs	r0, #14
 80167d4:	2808      	cmp	r0, #8
 80167d6:	d80a      	bhi.n	80167ee <llcp_pkt_received+0x27a>
 80167d8:	e8df f010 	tbh	[pc, r0, lsl #1]
 80167dc:	0259000d 	.word	0x0259000d
 80167e0:	00090009 	.word	0x00090009
 80167e4:	00090025 	.word	0x00090025
 80167e8:	0009028c 	.word	0x0009028c
 80167ec:	029c      	.short	0x029c
 80167ee:	4620      	mov	r0, r4
 80167f0:	f008 f83b 	bl	801e86a <free_buff_hdr>
 80167f4:	e73f      	b.n	8016676 <llcp_pkt_received+0x102>
 80167f6:	f105 00c8 	add.w	r0, r5, #200	@ 0xc8
 80167fa:	f00b fc99 	bl	8022130 <os_timer_stop_free>
 80167fe:	f646 5138 	movw	r1, #27960	@ 0x6d38
 8016802:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8016806:	2000      	movs	r0, #0
 8016808:	6809      	ldr	r1, [r1, #0]
 801680a:	f885 0128 	strb.w	r0, [r5, #296]	@ 0x128
 801680e:	f885 0123 	strb.w	r0, [r5, #291]	@ 0x123
 8016812:	690b      	ldr	r3, [r1, #16]
 8016814:	2b00      	cmp	r3, #0
 8016816:	d0ea      	beq.n	80167ee <llcp_pkt_received+0x27a>
 8016818:	f8b5 10de 	ldrh.w	r1, [r5, #222]	@ 0xde
 801681c:	f105 0246 	add.w	r2, r5, #70	@ 0x46
 8016820:	201a      	movs	r0, #26
 8016822:	4798      	blx	r3
 8016824:	e7e3      	b.n	80167ee <llcp_pkt_received+0x27a>
 8016826:	4628      	mov	r0, r5
 8016828:	f7fe ff67 	bl	80156fa <llcp_ping_received>
 801682c:	e7df      	b.n	80167ee <llcp_pkt_received+0x27a>
 801682e:	2b00      	cmp	r3, #0
 8016830:	d1dd      	bne.n	80167ee <llcp_pkt_received+0x27a>
 8016832:	f895 0122 	ldrb.w	r0, [r5, #290]	@ 0x122
 8016836:	2801      	cmp	r0, #1
 8016838:	d1d9      	bne.n	80167ee <llcp_pkt_received+0x27a>
 801683a:	20aa      	movs	r0, #170	@ 0xaa
 801683c:	f885 011f 	strb.w	r0, [r5, #287]	@ 0x11f
 8016840:	2000      	movs	r0, #0
 8016842:	4629      	mov	r1, r5
 8016844:	220b      	movs	r2, #11
 8016846:	2300      	movs	r3, #0
 8016848:	f7fe fbd8 	bl	8014ffc <llcp_cntrl_pkt_init>
 801684c:	f8d5 00d4 	ldr.w	r0, [r5, #212]	@ 0xd4
 8016850:	2108      	movs	r1, #8
 8016852:	f885 111e 	strb.w	r1, [r5, #286]	@ 0x11e
 8016856:	f885 1124 	strb.w	r1, [r5, #292]	@ 0x124
 801685a:	f00b fbeb 	bl	8022034 <os_timer_stop>
 801685e:	e7c6      	b.n	80167ee <llcp_pkt_received+0x27a>
 8016860:	2907      	cmp	r1, #7
 8016862:	d1c4      	bne.n	80167ee <llcp_pkt_received+0x27a>
 8016864:	20aa      	movs	r0, #170	@ 0xaa
 8016866:	f885 011f 	strb.w	r0, [r5, #287]	@ 0x11f
 801686a:	2003      	movs	r0, #3
 801686c:	f885 0122 	strb.w	r0, [r5, #290]	@ 0x122
 8016870:	2000      	movs	r0, #0
 8016872:	4629      	mov	r1, r5
 8016874:	220b      	movs	r2, #11
 8016876:	e6fa      	b.n	801666e <llcp_pkt_received+0xfa>
 8016878:	a902      	add	r1, sp, #8
 801687a:	4628      	mov	r0, r5
 801687c:	f7fe ffc0 	bl	8015800 <llcp_read_remote_version_received>
 8016880:	e7b5      	b.n	80167ee <llcp_pkt_received+0x27a>
 8016882:	2909      	cmp	r1, #9
 8016884:	bf18      	it	ne
 8016886:	2907      	cmpne	r1, #7
 8016888:	d1b1      	bne.n	80167ee <llcp_pkt_received+0x27a>
 801688a:	f105 00c8 	add.w	r0, r5, #200	@ 0xc8
 801688e:	f00b fc4f 	bl	8022130 <os_timer_stop_free>
 8016892:	f895 0123 	ldrb.w	r0, [r5, #291]	@ 0x123
 8016896:	2600      	movs	r6, #0
 8016898:	2807      	cmp	r0, #7
 801689a:	f885 6128 	strb.w	r6, [r5, #296]	@ 0x128
 801689e:	d10f      	bne.n	80168c0 <llcp_pkt_received+0x34c>
 80168a0:	f646 5038 	movw	r0, #27960	@ 0x6d38
 80168a4:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80168a8:	6800      	ldr	r0, [r0, #0]
 80168aa:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 80168ac:	b12b      	cbz	r3, 80168ba <llcp_pkt_received+0x346>
 80168ae:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80168b2:	f8b5 10de 	ldrh.w	r1, [r5, #222]	@ 0xde
 80168b6:	2200      	movs	r2, #0
 80168b8:	4798      	blx	r3
 80168ba:	20bb      	movs	r0, #187	@ 0xbb
 80168bc:	f885 011f 	strb.w	r0, [r5, #287]	@ 0x11f
 80168c0:	f885 6123 	strb.w	r6, [r5, #291]	@ 0x123
 80168c4:	e793      	b.n	80167ee <llcp_pkt_received+0x27a>
 80168c6:	a902      	add	r1, sp, #8
 80168c8:	4628      	mov	r0, r5
 80168ca:	f7ff fbea 	bl	80160a2 <llcp_update_param_req_received>
 80168ce:	e78e      	b.n	80167ee <llcp_pkt_received+0x27a>
 80168d0:	f895 0125 	ldrb.w	r0, [r5, #293]	@ 0x125
 80168d4:	2800      	cmp	r0, #0
 80168d6:	f47f af8a 	bne.w	80167ee <llcp_pkt_received+0x27a>
 80168da:	290a      	cmp	r1, #10
 80168dc:	d106      	bne.n	80168ec <llcp_pkt_received+0x378>
 80168de:	f105 00c8 	add.w	r0, r5, #200	@ 0xc8
 80168e2:	f00b fc25 	bl	8022130 <os_timer_stop_free>
 80168e6:	2000      	movs	r0, #0
 80168e8:	f885 0123 	strb.w	r0, [r5, #291]	@ 0x123
 80168ec:	f8b5 00de 	ldrh.w	r0, [r5, #222]	@ 0xde
 80168f0:	f105 017c 	add.w	r1, r5, #124	@ 0x7c
 80168f4:	f7ff fc5f 	bl	80161b6 <llcp_pram_pstv_rply>
 80168f8:	e779      	b.n	80167ee <llcp_pkt_received+0x27a>
 80168fa:	f1b9 0f0f 	cmp.w	r9, #15
 80168fe:	f300 812a 	bgt.w	8016b56 <llcp_pkt_received+0x5e2>
 8016902:	f1b9 0f03 	cmp.w	r9, #3
 8016906:	f000 817d 	beq.w	8016c04 <llcp_pkt_received+0x690>
 801690a:	f1b9 0f0f 	cmp.w	r9, #15
 801690e:	bf08      	it	eq
 8016910:	290a      	cmpeq	r1, #10
 8016912:	f47f af6c 	bne.w	80167ee <llcp_pkt_received+0x27a>
 8016916:	f105 00c8 	add.w	r0, r5, #200	@ 0xc8
 801691a:	f00b fc09 	bl	8022130 <os_timer_stop_free>
 801691e:	f89d 0009 	ldrb.w	r0, [sp, #9]
 8016922:	f895 1125 	ldrb.w	r1, [r5, #293]	@ 0x125
 8016926:	2200      	movs	r2, #0
 8016928:	281a      	cmp	r0, #26
 801692a:	f885 2128 	strb.w	r2, [r5, #296]	@ 0x128
 801692e:	f885 2123 	strb.w	r2, [r5, #291]	@ 0x123
 8016932:	bf08      	it	eq
 8016934:	2900      	cmpeq	r1, #0
 8016936:	f000 824a 	beq.w	8016dce <llcp_pkt_received+0x85a>
 801693a:	2901      	cmp	r1, #1
 801693c:	f040 8197 	bne.w	8016c6e <llcp_pkt_received+0x6fa>
 8016940:	f8b5 20b2 	ldrh.w	r2, [r5, #178]	@ 0xb2
 8016944:	f8b5 10b8 	ldrh.w	r1, [r5, #184]	@ 0xb8
 8016948:	428a      	cmp	r2, r1
 801694a:	f000 8190 	beq.w	8016c6e <llcp_pkt_received+0x6fa>
 801694e:	f8a5 10b2 	strh.w	r1, [r5, #178]	@ 0xb2
 8016952:	f8a5 10b0 	strh.w	r1, [r5, #176]	@ 0xb0
 8016956:	f8a5 10ae 	strh.w	r1, [r5, #174]	@ 0xae
 801695a:	e188      	b.n	8016c6e <llcp_pkt_received+0x6fa>
 801695c:	a902      	add	r1, sp, #8
 801695e:	4628      	mov	r0, r5
 8016960:	f000 fb22 	bl	8016fa8 <llcp_ll_phy_req_received>
 8016964:	e743      	b.n	80167ee <llcp_pkt_received+0x27a>
 8016966:	a902      	add	r1, sp, #8
 8016968:	4628      	mov	r0, r5
 801696a:	f000 fc20 	bl	80171ae <llcp_ll_phy_update_ind_received>
 801696e:	e73e      	b.n	80167ee <llcp_pkt_received+0x27a>
 8016970:	a902      	add	r1, sp, #8
 8016972:	4628      	mov	r0, r5
 8016974:	f000 fcbb 	bl	80172ee <llcp_min_used_chnls_prcdr_received>
 8016978:	e739      	b.n	80167ee <llcp_pkt_received+0x27a>
 801697a:	f88d 2008 	strb.w	r2, [sp, #8]
 801697e:	e673      	b.n	8016668 <llcp_pkt_received+0xf4>
 8016980:	f895 0125 	ldrb.w	r0, [r5, #293]	@ 0x125
 8016984:	2800      	cmp	r0, #0
 8016986:	f47f af32 	bne.w	80167ee <llcp_pkt_received+0x27a>
 801698a:	9902      	ldr	r1, [sp, #8]
 801698c:	4628      	mov	r0, r5
 801698e:	f000 fb63 	bl	8017058 <llcp_phy_selection>
 8016992:	4628      	mov	r0, r5
 8016994:	f000 fba1 	bl	80170da <llcp_ll_phy_update_ind>
 8016998:	e729      	b.n	80167ee <llcp_pkt_received+0x27a>
 801699a:	f895 2125 	ldrb.w	r2, [r5, #293]	@ 0x125
 801699e:	2a00      	cmp	r2, #0
 80169a0:	f000 811a 	beq.w	8016bd8 <llcp_pkt_received+0x664>
 80169a4:	f895 2124 	ldrb.w	r2, [r5, #292]	@ 0x124
 80169a8:	2a0a      	cmp	r2, #10
 80169aa:	f040 80a1 	bne.w	8016af0 <llcp_pkt_received+0x57c>
 80169ae:	e0a0      	b.n	8016af2 <llcp_pkt_received+0x57e>
 80169b0:	f895 2125 	ldrb.w	r2, [r5, #293]	@ 0x125
 80169b4:	2a00      	cmp	r2, #0
 80169b6:	f000 8112 	beq.w	8016bde <llcp_pkt_received+0x66a>
 80169ba:	f895 2124 	ldrb.w	r2, [r5, #292]	@ 0x124
 80169be:	e097      	b.n	8016af0 <llcp_pkt_received+0x57c>
 80169c0:	f895 2124 	ldrb.w	r2, [r5, #292]	@ 0x124
 80169c4:	2a07      	cmp	r2, #7
 80169c6:	d104      	bne.n	80169d2 <llcp_pkt_received+0x45e>
 80169c8:	f895 311e 	ldrb.w	r3, [r5, #286]	@ 0x11e
 80169cc:	2b08      	cmp	r3, #8
 80169ce:	f040 807b 	bne.w	8016ac8 <llcp_pkt_received+0x554>
 80169d2:	2a00      	cmp	r2, #0
 80169d4:	4613      	mov	r3, r2
 80169d6:	bf18      	it	ne
 80169d8:	2301      	movne	r3, #1
 80169da:	3a07      	subs	r2, #7
 80169dc:	bf18      	it	ne
 80169de:	2201      	movne	r2, #1
 80169e0:	4213      	tst	r3, r2
 80169e2:	f040 808b 	bne.w	8016afc <llcp_pkt_received+0x588>
 80169e6:	f895 2125 	ldrb.w	r2, [r5, #293]	@ 0x125
 80169ea:	2a00      	cmp	r2, #0
 80169ec:	f47f ae0c 	bne.w	8016608 <llcp_pkt_received+0x94>
 80169f0:	e084      	b.n	8016afc <llcp_pkt_received+0x588>
 80169f2:	f895 2125 	ldrb.w	r2, [r5, #293]	@ 0x125
 80169f6:	2a01      	cmp	r2, #1
 80169f8:	f000 80f1 	beq.w	8016bde <llcp_pkt_received+0x66a>
 80169fc:	2907      	cmp	r1, #7
 80169fe:	f43f ae03 	beq.w	8016608 <llcp_pkt_received+0x94>
 8016a02:	e07b      	b.n	8016afc <llcp_pkt_received+0x588>
 8016a04:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8016a08:	f1a3 020e 	sub.w	r2, r3, #14
 8016a0c:	2a0f      	cmp	r2, #15
 8016a0e:	f200 81e5 	bhi.w	8016ddc <llcp_pkt_received+0x868>
 8016a12:	e8df f012 	tbh	[pc, r2, lsl #1]
 8016a16:	0021      	.short	0x0021
 8016a18:	0010004e 	.word	0x0010004e
 8016a1c:	00110010 	.word	0x00110010
 8016a20:	00150010 	.word	0x00150010
 8016a24:	00610010 	.word	0x00610010
 8016a28:	00100010 	.word	0x00100010
 8016a2c:	01ec0010 	.word	0x01ec0010
 8016a30:	00100010 	.word	0x00100010
 8016a34:	01f0      	.short	0x01f0
 8016a36:	e5e7      	b.n	8016608 <llcp_pkt_received+0x94>
 8016a38:	2906      	cmp	r1, #6
 8016a3a:	f43f ade5 	beq.w	8016608 <llcp_pkt_received+0x94>
 8016a3e:	e05d      	b.n	8016afc <llcp_pkt_received+0x588>
 8016a40:	2909      	cmp	r1, #9
 8016a42:	f43f ade1 	beq.w	8016608 <llcp_pkt_received+0x94>
 8016a46:	e059      	b.n	8016afc <llcp_pkt_received+0x588>
 8016a48:	f895 2125 	ldrb.w	r2, [r5, #293]	@ 0x125
 8016a4c:	b9ba      	cbnz	r2, 8016a7e <llcp_pkt_received+0x50a>
 8016a4e:	e0c6      	b.n	8016bde <llcp_pkt_received+0x66a>
 8016a50:	f895 2124 	ldrb.w	r2, [r5, #292]	@ 0x124
 8016a54:	2a00      	cmp	r2, #0
 8016a56:	d151      	bne.n	8016afc <llcp_pkt_received+0x588>
 8016a58:	2904      	cmp	r1, #4
 8016a5a:	f43f add5 	beq.w	8016608 <llcp_pkt_received+0x94>
 8016a5e:	e04d      	b.n	8016afc <llcp_pkt_received+0x588>
 8016a60:	f895 2125 	ldrb.w	r2, [r5, #293]	@ 0x125
 8016a64:	2a00      	cmp	r2, #0
 8016a66:	f47f adcf 	bne.w	8016608 <llcp_pkt_received+0x94>
 8016a6a:	e0b8      	b.n	8016bde <llcp_pkt_received+0x66a>
 8016a6c:	2903      	cmp	r1, #3
 8016a6e:	f43f adcb 	beq.w	8016608 <llcp_pkt_received+0x94>
 8016a72:	e004      	b.n	8016a7e <llcp_pkt_received+0x50a>
 8016a74:	f895 2125 	ldrb.w	r2, [r5, #293]	@ 0x125
 8016a78:	2a01      	cmp	r2, #1
 8016a7a:	f000 80b0 	beq.w	8016bde <llcp_pkt_received+0x66a>
 8016a7e:	f895 2124 	ldrb.w	r2, [r5, #292]	@ 0x124
 8016a82:	e038      	b.n	8016af6 <llcp_pkt_received+0x582>
 8016a84:	f895 2124 	ldrb.w	r2, [r5, #292]	@ 0x124
 8016a88:	bbc2      	cbnz	r2, 8016afc <llcp_pkt_received+0x588>
 8016a8a:	2901      	cmp	r1, #1
 8016a8c:	f000 81ad 	beq.w	8016dea <llcp_pkt_received+0x876>
 8016a90:	2902      	cmp	r1, #2
 8016a92:	f000 81bc 	beq.w	8016e0e <llcp_pkt_received+0x89a>
 8016a96:	290a      	cmp	r1, #10
 8016a98:	f040 81b1 	bne.w	8016dfe <llcp_pkt_received+0x88a>
 8016a9c:	f895 2125 	ldrb.w	r2, [r5, #293]	@ 0x125
 8016aa0:	2a00      	cmp	r2, #0
 8016aa2:	f47f adb1 	bne.w	8016608 <llcp_pkt_received+0x94>
 8016aa6:	e1a0      	b.n	8016dea <llcp_pkt_received+0x876>
 8016aa8:	f895 2125 	ldrb.w	r2, [r5, #293]	@ 0x125
 8016aac:	2a01      	cmp	r2, #1
 8016aae:	f000 8096 	beq.w	8016bde <llcp_pkt_received+0x66a>
 8016ab2:	290a      	cmp	r1, #10
 8016ab4:	f43f ada8 	beq.w	8016608 <llcp_pkt_received+0x94>
 8016ab8:	e020      	b.n	8016afc <llcp_pkt_received+0x588>
 8016aba:	f895 2124 	ldrb.w	r2, [r5, #292]	@ 0x124
 8016abe:	2a00      	cmp	r2, #0
 8016ac0:	f000 8090 	beq.w	8016be4 <llcp_pkt_received+0x670>
 8016ac4:	2a0c      	cmp	r2, #12
 8016ac6:	d119      	bne.n	8016afc <llcp_pkt_received+0x588>
 8016ac8:	4628      	mov	r0, r5
 8016aca:	2124      	movs	r1, #36	@ 0x24
 8016acc:	e624      	b.n	8016718 <llcp_pkt_received+0x1a4>
 8016ace:	f895 2125 	ldrb.w	r2, [r5, #293]	@ 0x125
 8016ad2:	2a01      	cmp	r2, #1
 8016ad4:	f000 8083 	beq.w	8016bde <llcp_pkt_received+0x66a>
 8016ad8:	290c      	cmp	r1, #12
 8016ada:	f43f ad95 	beq.w	8016608 <llcp_pkt_received+0x94>
 8016ade:	e00d      	b.n	8016afc <llcp_pkt_received+0x588>
 8016ae0:	f895 2125 	ldrb.w	r2, [r5, #293]	@ 0x125
 8016ae4:	2a00      	cmp	r2, #0
 8016ae6:	d07a      	beq.n	8016bde <llcp_pkt_received+0x66a>
 8016ae8:	f895 2124 	ldrb.w	r2, [r5, #292]	@ 0x124
 8016aec:	2a0c      	cmp	r2, #12
 8016aee:	d000      	beq.n	8016af2 <llcp_pkt_received+0x57e>
 8016af0:	b922      	cbnz	r2, 8016afc <llcp_pkt_received+0x588>
 8016af2:	f8d5 20cc 	ldr.w	r2, [r5, #204]	@ 0xcc
 8016af6:	2a00      	cmp	r2, #0
 8016af8:	f43f ad86 	beq.w	8016608 <llcp_pkt_received+0x94>
 8016afc:	2000      	movs	r0, #0
 8016afe:	2100      	movs	r1, #0
 8016b00:	f008 fe8f 	bl	801f822 <bsp_assert>
 8016b04:	f88d 8008 	strb.w	r8, [sp, #8]
 8016b08:	2023      	movs	r0, #35	@ 0x23
 8016b0a:	f88d 0009 	strb.w	r0, [sp, #9]
 8016b0e:	a802      	add	r0, sp, #8
 8016b10:	4629      	mov	r1, r5
 8016b12:	2211      	movs	r2, #17
 8016b14:	e5ab      	b.n	801666e <llcp_pkt_received+0xfa>
 8016b16:	2907      	cmp	r1, #7
 8016b18:	f040 814a 	bne.w	8016db0 <llcp_pkt_received+0x83c>
 8016b1c:	f105 00c8 	add.w	r0, r5, #200	@ 0xc8
 8016b20:	f00b fb06 	bl	8022130 <os_timer_stop_free>
 8016b24:	2001      	movs	r0, #1
 8016b26:	e9c5 063a 	strd	r0, r6, [r5, #232]	@ 0xe8
 8016b2a:	f895 011e 	ldrb.w	r0, [r5, #286]	@ 0x11e
 8016b2e:	2100      	movs	r1, #0
 8016b30:	2808      	cmp	r0, #8
 8016b32:	f646 5038 	movw	r0, #27960	@ 0x6d38
 8016b36:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8016b3a:	6800      	ldr	r0, [r0, #0]
 8016b3c:	f885 1128 	strb.w	r1, [r5, #296]	@ 0x128
 8016b40:	f040 8100 	bne.w	8016d44 <llcp_pkt_received+0x7d0>
 8016b44:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8016b46:	2a00      	cmp	r2, #0
 8016b48:	f000 811f 	beq.w	8016d8a <llcp_pkt_received+0x816>
 8016b4c:	f8b5 10de 	ldrh.w	r1, [r5, #222]	@ 0xde
 8016b50:	2000      	movs	r0, #0
 8016b52:	4790      	blx	r2
 8016b54:	e119      	b.n	8016d8a <llcp_pkt_received+0x816>
 8016b56:	f1b9 0f10 	cmp.w	r9, #16
 8016b5a:	d070      	beq.n	8016c3e <llcp_pkt_received+0x6ca>
 8016b5c:	f1b9 0f16 	cmp.w	r9, #22
 8016b60:	bf08      	it	eq
 8016b62:	290c      	cmpeq	r1, #12
 8016b64:	f47f ae43 	bne.w	80167ee <llcp_pkt_received+0x27a>
 8016b68:	f105 00c8 	add.w	r0, r5, #200	@ 0xc8
 8016b6c:	f00b fae0 	bl	8022130 <os_timer_stop_free>
 8016b70:	2000      	movs	r0, #0
 8016b72:	f895 112c 	ldrb.w	r1, [r5, #300]	@ 0x12c
 8016b76:	f895 212d 	ldrb.w	r2, [r5, #301]	@ 0x12d
 8016b7a:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8016b7e:	f885 0123 	strb.w	r0, [r5, #291]	@ 0x123
 8016b82:	4628      	mov	r0, r5
 8016b84:	f00e ffda 	bl	8025b3c <conn_mngr_send_le_phy_update_complete_event>
 8016b88:	e631      	b.n	80167ee <llcp_pkt_received+0x27a>
 8016b8a:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8016b8c:	b123      	cbz	r3, 8016b98 <llcp_pkt_received+0x624>
 8016b8e:	f8b5 10de 	ldrh.w	r1, [r5, #222]	@ 0xde
 8016b92:	2000      	movs	r0, #0
 8016b94:	2201      	movs	r2, #1
 8016b96:	4798      	blx	r3
 8016b98:	f8d5 10d4 	ldr.w	r1, [r5, #212]	@ 0xd4
 8016b9c:	2005      	movs	r0, #5
 8016b9e:	f885 0128 	strb.w	r0, [r5, #296]	@ 0x128
 8016ba2:	fab1 f081 	clz	r0, r1
 8016ba6:	0940      	lsrs	r0, r0, #5
 8016ba8:	2101      	movs	r1, #1
 8016baa:	f008 fe3a 	bl	801f822 <bsp_assert>
 8016bae:	f645 6043 	movw	r0, #24131	@ 0x5e43
 8016bb2:	f105 0268 	add.w	r2, r5, #104	@ 0x68
 8016bb6:	f6c0 0001 	movt	r0, #2049	@ 0x801
 8016bba:	2100      	movs	r1, #0
 8016bbc:	f00b f906 	bl	8021dcc <os_timer_create>
 8016bc0:	2101      	movs	r1, #1
 8016bc2:	f8c5 00d4 	str.w	r0, [r5, #212]	@ 0xd4
 8016bc6:	2800      	cmp	r0, #0
 8016bc8:	bf18      	it	ne
 8016bca:	2001      	movne	r0, #1
 8016bcc:	f008 fe29 	bl	801f822 <bsp_assert>
 8016bd0:	2007      	movs	r0, #7
 8016bd2:	f885 011e 	strb.w	r0, [r5, #286]	@ 0x11e
 8016bd6:	e0eb      	b.n	8016db0 <llcp_pkt_received+0x83c>
 8016bd8:	2000      	movs	r0, #0
 8016bda:	f885 0123 	strb.w	r0, [r5, #291]	@ 0x123
 8016bde:	f88d 8008 	strb.w	r8, [sp, #8]
 8016be2:	e541      	b.n	8016668 <llcp_pkt_received+0xf4>
 8016be4:	f895 2125 	ldrb.w	r2, [r5, #293]	@ 0x125
 8016be8:	2a00      	cmp	r2, #0
 8016bea:	f47f ad0d 	bne.w	8016608 <llcp_pkt_received+0x94>
 8016bee:	1e4a      	subs	r2, r1, #1
 8016bf0:	2a02      	cmp	r2, #2
 8016bf2:	f0c0 810c 	bcc.w	8016e0e <llcp_pkt_received+0x89a>
 8016bf6:	290c      	cmp	r1, #12
 8016bf8:	f000 80f7 	beq.w	8016dea <llcp_pkt_received+0x876>
 8016bfc:	290a      	cmp	r1, #10
 8016bfe:	f000 8106 	beq.w	8016e0e <llcp_pkt_received+0x89a>
 8016c02:	e501      	b.n	8016608 <llcp_pkt_received+0x94>
 8016c04:	2907      	cmp	r1, #7
 8016c06:	f47f adf2 	bne.w	80167ee <llcp_pkt_received+0x27a>
 8016c0a:	f105 00c8 	add.w	r0, r5, #200	@ 0xc8
 8016c0e:	f00b fa8f 	bl	8022130 <os_timer_stop_free>
 8016c12:	f646 5138 	movw	r1, #27960	@ 0x6d38
 8016c16:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8016c1a:	2000      	movs	r0, #0
 8016c1c:	6809      	ldr	r1, [r1, #0]
 8016c1e:	f885 0128 	strb.w	r0, [r5, #296]	@ 0x128
 8016c22:	f885 0123 	strb.w	r0, [r5, #291]	@ 0x123
 8016c26:	6b8b      	ldr	r3, [r1, #56]	@ 0x38
 8016c28:	b12b      	cbz	r3, 8016c36 <llcp_pkt_received+0x6c2>
 8016c2a:	f89d 0009 	ldrb.w	r0, [sp, #9]
 8016c2e:	f8b5 10de 	ldrh.w	r1, [r5, #222]	@ 0xde
 8016c32:	2200      	movs	r2, #0
 8016c34:	4798      	blx	r3
 8016c36:	20bb      	movs	r0, #187	@ 0xbb
 8016c38:	f885 011f 	strb.w	r0, [r5, #287]	@ 0x11f
 8016c3c:	e5d7      	b.n	80167ee <llcp_pkt_received+0x27a>
 8016c3e:	2b0a      	cmp	r3, #10
 8016c40:	f47f add5 	bne.w	80167ee <llcp_pkt_received+0x27a>
 8016c44:	290c      	cmp	r1, #12
 8016c46:	f43f add2 	beq.w	80167ee <llcp_pkt_received+0x27a>
 8016c4a:	f105 00d0 	add.w	r0, r5, #208	@ 0xd0
 8016c4e:	f00b fa6f 	bl	8022130 <os_timer_stop_free>
 8016c52:	f89d 0009 	ldrb.w	r0, [sp, #9]
 8016c56:	2100      	movs	r1, #0
 8016c58:	281a      	cmp	r0, #26
 8016c5a:	f885 1128 	strb.w	r1, [r5, #296]	@ 0x128
 8016c5e:	f885 1124 	strb.w	r1, [r5, #292]	@ 0x124
 8016c62:	d104      	bne.n	8016c6e <llcp_pkt_received+0x6fa>
 8016c64:	f895 1125 	ldrb.w	r1, [r5, #293]	@ 0x125
 8016c68:	2900      	cmp	r1, #0
 8016c6a:	f000 80b0 	beq.w	8016dce <llcp_pkt_received+0x85a>
 8016c6e:	f646 5138 	movw	r1, #27960	@ 0x6d38
 8016c72:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8016c76:	6809      	ldr	r1, [r1, #0]
 8016c78:	6a8f      	ldr	r7, [r1, #40]	@ 0x28
 8016c7a:	2f00      	cmp	r7, #0
 8016c7c:	f43f adb7 	beq.w	80167ee <llcp_pkt_received+0x27a>
 8016c80:	f8b5 10de 	ldrh.w	r1, [r5, #222]	@ 0xde
 8016c84:	8aea      	ldrh	r2, [r5, #22]
 8016c86:	f8b5 30dc 	ldrh.w	r3, [r5, #220]	@ 0xdc
 8016c8a:	8b6e      	ldrh	r6, [r5, #26]
 8016c8c:	e02f      	b.n	8016cee <llcp_pkt_received+0x77a>
 8016c8e:	f895 0046 	ldrb.w	r0, [r5, #70]	@ 0x46
 8016c92:	f000 00fd 	and.w	r0, r0, #253	@ 0xfd
 8016c96:	f885 0046 	strb.w	r0, [r5, #70]	@ 0x46
 8016c9a:	f105 00c8 	add.w	r0, r5, #200	@ 0xc8
 8016c9e:	f00b fa47 	bl	8022130 <os_timer_stop_free>
 8016ca2:	f895 1125 	ldrb.w	r1, [r5, #293]	@ 0x125
 8016ca6:	2000      	movs	r0, #0
 8016ca8:	2900      	cmp	r1, #0
 8016caa:	f885 0128 	strb.w	r0, [r5, #296]	@ 0x128
 8016cae:	f885 0123 	strb.w	r0, [r5, #291]	@ 0x123
 8016cb2:	f000 808c 	beq.w	8016dce <llcp_pkt_received+0x85a>
 8016cb6:	f8b5 10b2 	ldrh.w	r1, [r5, #178]	@ 0xb2
 8016cba:	f8b5 00b8 	ldrh.w	r0, [r5, #184]	@ 0xb8
 8016cbe:	4281      	cmp	r1, r0
 8016cc0:	d005      	beq.n	8016cce <llcp_pkt_received+0x75a>
 8016cc2:	f8a5 00b2 	strh.w	r0, [r5, #178]	@ 0xb2
 8016cc6:	f8a5 00b0 	strh.w	r0, [r5, #176]	@ 0xb0
 8016cca:	f8a5 00ae 	strh.w	r0, [r5, #174]	@ 0xae
 8016cce:	f646 5038 	movw	r0, #27960	@ 0x6d38
 8016cd2:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8016cd6:	6800      	ldr	r0, [r0, #0]
 8016cd8:	6a87      	ldr	r7, [r0, #40]	@ 0x28
 8016cda:	2f00      	cmp	r7, #0
 8016cdc:	f43f ad87 	beq.w	80167ee <llcp_pkt_received+0x27a>
 8016ce0:	f8b5 10de 	ldrh.w	r1, [r5, #222]	@ 0xde
 8016ce4:	8aea      	ldrh	r2, [r5, #22]
 8016ce6:	f8b5 30dc 	ldrh.w	r3, [r5, #220]	@ 0xdc
 8016cea:	8b6e      	ldrh	r6, [r5, #26]
 8016cec:	201a      	movs	r0, #26
 8016cee:	9600      	str	r6, [sp, #0]
 8016cf0:	47b8      	blx	r7
 8016cf2:	e57c      	b.n	80167ee <llcp_pkt_received+0x27a>
 8016cf4:	f895 0046 	ldrb.w	r0, [r5, #70]	@ 0x46
 8016cf8:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8016cfc:	f885 0046 	strb.w	r0, [r5, #70]	@ 0x46
 8016d00:	f105 00c8 	add.w	r0, r5, #200	@ 0xc8
 8016d04:	f00b fa14 	bl	8022130 <os_timer_stop_free>
 8016d08:	2000      	movs	r0, #0
 8016d0a:	f885 0128 	strb.w	r0, [r5, #296]	@ 0x128
 8016d0e:	f885 0123 	strb.w	r0, [r5, #291]	@ 0x123
 8016d12:	e56c      	b.n	80167ee <llcp_pkt_received+0x27a>
 8016d14:	f105 00c8 	add.w	r0, r5, #200	@ 0xc8
 8016d18:	f00b fa0a 	bl	8022130 <os_timer_stop_free>
 8016d1c:	f895 0078 	ldrb.w	r0, [r5, #120]	@ 0x78
 8016d20:	2600      	movs	r6, #0
 8016d22:	2801      	cmp	r0, #1
 8016d24:	f885 6123 	strb.w	r6, [r5, #291]	@ 0x123
 8016d28:	d109      	bne.n	8016d3e <llcp_pkt_received+0x7ca>
 8016d2a:	f895 112c 	ldrb.w	r1, [r5, #300]	@ 0x12c
 8016d2e:	f895 212d 	ldrb.w	r2, [r5, #301]	@ 0x12d
 8016d32:	4628      	mov	r0, r5
 8016d34:	2300      	movs	r3, #0
 8016d36:	f00e ff01 	bl	8025b3c <conn_mngr_send_le_phy_update_complete_event>
 8016d3a:	f885 6078 	strb.w	r6, [r5, #120]	@ 0x78
 8016d3e:	f885 6134 	strb.w	r6, [r5, #308]	@ 0x134
 8016d42:	e554      	b.n	80167ee <llcp_pkt_received+0x27a>
 8016d44:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8016d46:	b123      	cbz	r3, 8016d52 <llcp_pkt_received+0x7de>
 8016d48:	f8b5 10de 	ldrh.w	r1, [r5, #222]	@ 0xde
 8016d4c:	2000      	movs	r0, #0
 8016d4e:	2201      	movs	r2, #1
 8016d50:	4798      	blx	r3
 8016d52:	f8d5 10d4 	ldr.w	r1, [r5, #212]	@ 0xd4
 8016d56:	2005      	movs	r0, #5
 8016d58:	f885 0128 	strb.w	r0, [r5, #296]	@ 0x128
 8016d5c:	fab1 f081 	clz	r0, r1
 8016d60:	0940      	lsrs	r0, r0, #5
 8016d62:	2101      	movs	r1, #1
 8016d64:	f008 fd5d 	bl	801f822 <bsp_assert>
 8016d68:	f645 6043 	movw	r0, #24131	@ 0x5e43
 8016d6c:	f105 0268 	add.w	r2, r5, #104	@ 0x68
 8016d70:	f6c0 0001 	movt	r0, #2049	@ 0x801
 8016d74:	2100      	movs	r1, #0
 8016d76:	f00b f829 	bl	8021dcc <os_timer_create>
 8016d7a:	2101      	movs	r1, #1
 8016d7c:	f8c5 00d4 	str.w	r0, [r5, #212]	@ 0xd4
 8016d80:	2800      	cmp	r0, #0
 8016d82:	bf18      	it	ne
 8016d84:	2001      	movne	r0, #1
 8016d86:	f008 fd4c 	bl	801f822 <bsp_assert>
 8016d8a:	2007      	movs	r0, #7
 8016d8c:	f885 011e 	strb.w	r0, [r5, #286]	@ 0x11e
 8016d90:	f8d5 00c0 	ldr.w	r0, [r5, #192]	@ 0xc0
 8016d94:	2700      	movs	r7, #0
 8016d96:	f885 7123 	strb.w	r7, [r5, #291]	@ 0x123
 8016d9a:	f7fb fef9 	bl	8012b90 <evnt_schdlr_send_pndng_data_pkt>
 8016d9e:	f8d5 1100 	ldr.w	r1, [r5, #256]	@ 0x100
 8016da2:	b129      	cbz	r1, 8016db0 <llcp_pkt_received+0x83c>
 8016da4:	4628      	mov	r0, r5
 8016da6:	4632      	mov	r2, r6
 8016da8:	f7ff fbe4 	bl	8016574 <llcp_pkt_received>
 8016dac:	f8c5 7100 	str.w	r7, [r5, #256]	@ 0x100
 8016db0:	f8d5 00d4 	ldr.w	r0, [r5, #212]	@ 0xd4
 8016db4:	f00b f93e 	bl	8022034 <os_timer_stop>
 8016db8:	a90d      	add	r1, sp, #52	@ 0x34
 8016dba:	4628      	mov	r0, r5
 8016dbc:	f00e fdb4 	bl	8025928 <conn_mngr_get_ping_timeout_value>
 8016dc0:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8016dc2:	f8d5 00d4 	ldr.w	r0, [r5, #212]	@ 0xd4
 8016dc6:	0149      	lsls	r1, r1, #5
 8016dc8:	f00b f879 	bl	8021ebe <os_timer_start>
 8016dcc:	e50f      	b.n	80167ee <llcp_pkt_received+0x27a>
 8016dce:	f8b5 00de 	ldrh.w	r0, [r5, #222]	@ 0xde
 8016dd2:	f105 017c 	add.w	r1, r5, #124	@ 0x7c
 8016dd6:	f7fe ff05 	bl	8015be4 <llcp_update_conn_param>
 8016dda:	e508      	b.n	80167ee <llcp_pkt_received+0x27a>
 8016ddc:	2b23      	cmp	r3, #35	@ 0x23
 8016dde:	f47f ac13 	bne.w	8016608 <llcp_pkt_received+0x94>
 8016de2:	2915      	cmp	r1, #21
 8016de4:	f43f ac10 	beq.w	8016608 <llcp_pkt_received+0x94>
 8016de8:	e688      	b.n	8016afc <llcp_pkt_received+0x588>
 8016dea:	2023      	movs	r0, #35	@ 0x23
 8016dec:	e010      	b.n	8016e10 <llcp_pkt_received+0x89c>
 8016dee:	290f      	cmp	r1, #15
 8016df0:	f43f ac0a 	beq.w	8016608 <llcp_pkt_received+0x94>
 8016df4:	e682      	b.n	8016afc <llcp_pkt_received+0x588>
 8016df6:	2910      	cmp	r1, #16
 8016df8:	f43f ac06 	beq.w	8016608 <llcp_pkt_received+0x94>
 8016dfc:	e67e      	b.n	8016afc <llcp_pkt_received+0x588>
 8016dfe:	f895 2125 	ldrb.w	r2, [r5, #293]	@ 0x125
 8016e02:	2a00      	cmp	r2, #0
 8016e04:	f47f ac00 	bne.w	8016608 <llcp_pkt_received+0x94>
 8016e08:	290c      	cmp	r1, #12
 8016e0a:	f47f abfd 	bne.w	8016608 <llcp_pkt_received+0x94>
 8016e0e:	202a      	movs	r0, #42	@ 0x2a
 8016e10:	f88d 8008 	strb.w	r8, [sp, #8]
 8016e14:	e679      	b.n	8016b0a <llcp_pkt_received+0x596>
 8016e16:	bf00      	nop

08016e18 <g_ll_cntrl_pdus_len>:
 8016e18:	1702080c 	.word	0x1702080c
 8016e1c:	0201010d 	.word	0x0201010d
 8016e20:	01010909 	.word	0x01010909
 8016e24:	18090206 	.word	0x18090206
 8016e28:	01010318 	.word	0x01010318
 8016e2c:	03030909 	.word	0x03030909
 8016e30:	01020305 	.word	0x01020305
 8016e34:	24020223 	.word	0x24020223
 8016e38:	04041009 	.word	0x04041009
 8016e3c:	0b0b0505 	.word	0x0b0b0505
 8016e40:	002b0b04 	.word	0x002b0b04

08016e44 <llcp_start_encryption>:
 8016e44:	b570      	push	{r4, r5, r6, lr}
 8016e46:	b08c      	sub	sp, #48	@ 0x30
 8016e48:	2807      	cmp	r0, #7
 8016e4a:	d81f      	bhi.n	8016e8c <llcp_start_encryption+0x48>
 8016e4c:	f649 6264 	movw	r2, #40548	@ 0x9e64
 8016e50:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8016e54:	f852 4020 	ldr.w	r4, [r2, r0, lsl #2]
 8016e58:	b1c4      	cbz	r4, 8016e8c <llcp_start_encryption+0x48>
 8016e5a:	f894 0124 	ldrb.w	r0, [r4, #292]	@ 0x124
 8016e5e:	2807      	cmp	r0, #7
 8016e60:	d114      	bne.n	8016e8c <llcp_start_encryption+0x48>
 8016e62:	b1b1      	cbz	r1, 8016e92 <llcp_start_encryption+0x4e>
 8016e64:	f504 7583 	add.w	r5, r4, #262	@ 0x106
 8016e68:	4628      	mov	r0, r5
 8016e6a:	2210      	movs	r2, #16
 8016e6c:	f00d fb6c 	bl	8024548 <ble_memcpy>
 8016e70:	f104 00f0 	add.w	r0, r4, #240	@ 0xf0
 8016e74:	4629      	mov	r1, r5
 8016e76:	4602      	mov	r2, r0
 8016e78:	f001 fa61 	bl	801833e <llhwc_128_encrypt>
 8016e7c:	2100      	movs	r1, #0
 8016e7e:	fab0 f080 	clz	r0, r0
 8016e82:	e9c4 113a 	strd	r1, r1, [r4, #232]	@ 0xe8
 8016e86:	0946      	lsrs	r6, r0, #5
 8016e88:	2505      	movs	r5, #5
 8016e8a:	e017      	b.n	8016ebc <llcp_start_encryption+0x78>
 8016e8c:	2002      	movs	r0, #2
 8016e8e:	b00c      	add	sp, #48	@ 0x30
 8016e90:	bd70      	pop	{r4, r5, r6, pc}
 8016e92:	f894 0046 	ldrb.w	r0, [r4, #70]	@ 0x46
 8016e96:	2600      	movs	r6, #0
 8016e98:	0740      	lsls	r0, r0, #29
 8016e9a:	f04f 0006 	mov.w	r0, #6
 8016e9e:	bf51      	iteee	pl
 8016ea0:	250d      	movpl	r5, #13
 8016ea2:	f88d 0005 	strbmi.w	r0, [sp, #5]
 8016ea6:	2511      	movmi	r5, #17
 8016ea8:	2003      	movmi	r0, #3
 8016eaa:	f88d 0004 	strb.w	r0, [sp, #4]
 8016eae:	2007      	movs	r0, #7
 8016eb0:	f884 6122 	strb.w	r6, [r4, #290]	@ 0x122
 8016eb4:	f884 011e 	strb.w	r0, [r4, #286]	@ 0x11e
 8016eb8:	f884 6124 	strb.w	r6, [r4, #292]	@ 0x124
 8016ebc:	f008 fd11 	bl	801f8e2 <os_disable_isr>
 8016ec0:	a801      	add	r0, sp, #4
 8016ec2:	4621      	mov	r1, r4
 8016ec4:	462a      	mov	r2, r5
 8016ec6:	2300      	movs	r3, #0
 8016ec8:	f7fe f898 	bl	8014ffc <llcp_cntrl_pkt_init>
 8016ecc:	b116      	cbz	r6, 8016ed4 <llcp_start_encryption+0x90>
 8016ece:	2002      	movs	r0, #2
 8016ed0:	f884 0122 	strb.w	r0, [r4, #290]	@ 0x122
 8016ed4:	20bb      	movs	r0, #187	@ 0xbb
 8016ed6:	2d0d      	cmp	r5, #13
 8016ed8:	f884 011f 	strb.w	r0, [r4, #287]	@ 0x11f
 8016edc:	d103      	bne.n	8016ee6 <llcp_start_encryption+0xa2>
 8016ede:	f8d4 00c0 	ldr.w	r0, [r4, #192]	@ 0xc0
 8016ee2:	f7fb fe55 	bl	8012b90 <evnt_schdlr_send_pndng_data_pkt>
 8016ee6:	f008 fcfe 	bl	801f8e6 <os_enable_isr>
 8016eea:	2000      	movs	r0, #0
 8016eec:	e7cf      	b.n	8016e8e <llcp_start_encryption+0x4a>
	...

08016ef0 <llcp_re_exec_host_control>:
 8016ef0:	b5b0      	push	{r4, r5, r7, lr}
 8016ef2:	b082      	sub	sp, #8
 8016ef4:	4604      	mov	r4, r0
 8016ef6:	8840      	ldrh	r0, [r0, #2]
 8016ef8:	2807      	cmp	r0, #7
 8016efa:	bf8f      	iteee	hi
 8016efc:	2500      	movhi	r5, #0
 8016efe:	f649 6164 	movwls	r1, #40548	@ 0x9e64
 8016f02:	f2c2 0100 	movtls	r1, #8192	@ 0x2000
 8016f06:	f851 5020 	ldrls.w	r5, [r1, r0, lsl #2]
 8016f0a:	4628      	mov	r0, r5
 8016f0c:	2101      	movs	r1, #1
 8016f0e:	2d00      	cmp	r5, #0
 8016f10:	bf18      	it	ne
 8016f12:	2001      	movne	r0, #1
 8016f14:	f008 fc85 	bl	801f822 <bsp_assert>
 8016f18:	7820      	ldrb	r0, [r4, #0]
 8016f1a:	2807      	cmp	r0, #7
 8016f1c:	d812      	bhi.n	8016f44 <llcp_re_exec_host_control+0x54>
 8016f1e:	e8df f000 	tbb	[pc, r0]
 8016f22:	0a04      	.short	0x0a04
 8016f24:	371f1711 	.word	0x371f1711
 8016f28:	3029      	.short	0x3029
 8016f2a:	8860      	ldrh	r0, [r4, #2]
 8016f2c:	b002      	add	sp, #8
 8016f2e:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8016f32:	f7fe bc0d 	b.w	8015750 <llcp_read_remote_version>
 8016f36:	8860      	ldrh	r0, [r4, #2]
 8016f38:	2100      	movs	r1, #0
 8016f3a:	b002      	add	sp, #8
 8016f3c:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8016f40:	f7fe bc97 	b.w	8015872 <llcp_read_remote_features>
 8016f44:	2000      	movs	r0, #0
 8016f46:	2101      	movs	r1, #1
 8016f48:	f008 fc6b 	bl	801f822 <bsp_assert>
 8016f4c:	2000      	movs	r0, #0
 8016f4e:	e00f      	b.n	8016f70 <llcp_re_exec_host_control+0x80>
 8016f50:	8860      	ldrh	r0, [r4, #2]
 8016f52:	88a1      	ldrh	r1, [r4, #4]
 8016f54:	88e2      	ldrh	r2, [r4, #6]
 8016f56:	b002      	add	sp, #8
 8016f58:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8016f5c:	f7fe b8d2 	b.w	8015104 <llcp_data_length_update>
 8016f60:	8860      	ldrh	r0, [r4, #2]
 8016f62:	7921      	ldrb	r1, [r4, #4]
 8016f64:	7962      	ldrb	r2, [r4, #5]
 8016f66:	79a3      	ldrb	r3, [r4, #6]
 8016f68:	79e5      	ldrb	r5, [r4, #7]
 8016f6a:	9500      	str	r5, [sp, #0]
 8016f6c:	f7fd ffc8 	bl	8014f00 <llcp_le_set_phy_cmd>
 8016f70:	b002      	add	sp, #8
 8016f72:	bdb0      	pop	{r4, r5, r7, pc}
 8016f74:	8860      	ldrh	r0, [r4, #2]
 8016f76:	1d21      	adds	r1, r4, #4
 8016f78:	b002      	add	sp, #8
 8016f7a:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8016f7e:	f7ff b91a 	b.w	80161b6 <llcp_pram_pstv_rply>
 8016f82:	8860      	ldrh	r0, [r4, #2]
 8016f84:	1d21      	adds	r1, r4, #4
 8016f86:	b002      	add	sp, #8
 8016f88:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8016f8c:	f7fe bfed 	b.w	8015f6a <llcp_update_param_req>
 8016f90:	8860      	ldrh	r0, [r4, #2]
 8016f92:	f8b5 2104 	ldrh.w	r2, [r5, #260]	@ 0x104
 8016f96:	f505 718b 	add.w	r1, r5, #278	@ 0x116
 8016f9a:	f505 7383 	add.w	r3, r5, #262	@ 0x106
 8016f9e:	b002      	add	sp, #8
 8016fa0:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8016fa4:	f7fe ba04 	b.w	80153b0 <llcp_encryption_req>

08016fa8 <llcp_ll_phy_req_received>:
 8016fa8:	b5b0      	push	{r4, r5, r7, lr}
 8016faa:	b08c      	sub	sp, #48	@ 0x30
 8016fac:	4604      	mov	r4, r0
 8016fae:	f890 0130 	ldrb.w	r0, [r0, #304]	@ 0x130
 8016fb2:	460d      	mov	r5, r1
 8016fb4:	210c      	movs	r1, #12
 8016fb6:	f884 1124 	strb.w	r1, [r4, #292]	@ 0x124
 8016fba:	b110      	cbz	r0, 8016fc2 <llcp_ll_phy_req_received+0x1a>
 8016fbc:	f894 1131 	ldrb.w	r1, [r4, #305]	@ 0x131
 8016fc0:	b951      	cbnz	r1, 8016fd8 <llcp_ll_phy_req_received+0x30>
 8016fc2:	f10d 0003 	add.w	r0, sp, #3
 8016fc6:	f10d 0102 	add.w	r1, sp, #2
 8016fca:	f10d 0201 	add.w	r2, sp, #1
 8016fce:	f00f fa80 	bl	80264d2 <db_le_get_default_phy_cmd>
 8016fd2:	f894 0130 	ldrb.w	r0, [r4, #304]	@ 0x130
 8016fd6:	b108      	cbz	r0, 8016fdc <llcp_ll_phy_req_received+0x34>
 8016fd8:	f88d 0002 	strb.w	r0, [sp, #2]
 8016fdc:	f894 0131 	ldrb.w	r0, [r4, #305]	@ 0x131
 8016fe0:	b108      	cbz	r0, 8016fe6 <llcp_ll_phy_req_received+0x3e>
 8016fe2:	f88d 0001 	strb.w	r0, [sp, #1]
 8016fe6:	f894 0125 	ldrb.w	r0, [r4, #293]	@ 0x125
 8016fea:	b980      	cbnz	r0, 801700e <llcp_ll_phy_req_received+0x66>
 8016fec:	f89d 0002 	ldrb.w	r0, [sp, #2]
 8016ff0:	f89d 1001 	ldrb.w	r1, [sp, #1]
 8016ff4:	f884 0074 	strb.w	r0, [r4, #116]	@ 0x74
 8016ff8:	f884 1075 	strb.w	r1, [r4, #117]	@ 0x75
 8016ffc:	6829      	ldr	r1, [r5, #0]
 8016ffe:	4620      	mov	r0, r4
 8017000:	f000 f82a 	bl	8017058 <llcp_phy_selection>
 8017004:	4620      	mov	r0, r4
 8017006:	f000 f868 	bl	80170da <llcp_ll_phy_update_ind>
 801700a:	f894 0125 	ldrb.w	r0, [r4, #293]	@ 0x125
 801700e:	2801      	cmp	r0, #1
 8017010:	d11e      	bne.n	8017050 <llcp_ll_phy_req_received+0xa8>
 8017012:	f89d 0002 	ldrb.w	r0, [sp, #2]
 8017016:	f89d 1001 	ldrb.w	r1, [sp, #1]
 801701a:	f884 0075 	strb.w	r0, [r4, #117]	@ 0x75
 801701e:	f88d 0004 	strb.w	r0, [sp, #4]
 8017022:	7868      	ldrb	r0, [r5, #1]
 8017024:	f88d 1005 	strb.w	r1, [sp, #5]
 8017028:	f884 0074 	strb.w	r0, [r4, #116]	@ 0x74
 801702c:	a801      	add	r0, sp, #4
 801702e:	4621      	mov	r1, r4
 8017030:	2217      	movs	r2, #23
 8017032:	2300      	movs	r3, #0
 8017034:	f7fd ffe2 	bl	8014ffc <llcp_cntrl_pkt_init>
 8017038:	4605      	mov	r5, r0
 801703a:	2007      	movs	r0, #7
 801703c:	f884 005c 	strb.w	r0, [r4, #92]	@ 0x5c
 8017040:	4620      	mov	r0, r4
 8017042:	210c      	movs	r1, #12
 8017044:	f7fe fa4a 	bl	80154dc <llcp_cntrl_init>
 8017048:	2003      	movs	r0, #3
 801704a:	f884 0134 	strb.w	r0, [r4, #308]	@ 0x134
 801704e:	e000      	b.n	8017052 <llcp_ll_phy_req_received+0xaa>
 8017050:	2500      	movs	r5, #0
 8017052:	4628      	mov	r0, r5
 8017054:	b00c      	add	sp, #48	@ 0x30
 8017056:	bdb0      	pop	{r4, r5, r7, pc}

08017058 <llcp_phy_selection>:
 8017058:	b580      	push	{r7, lr}
 801705a:	ea81 2311 	eor.w	r3, r1, r1, lsr #8
 801705e:	f890 c074 	ldrb.w	ip, [r0, #116]	@ 0x74
 8017062:	f890 e075 	ldrb.w	lr, [r0, #117]	@ 0x75
 8017066:	f3c1 2207 	ubfx	r2, r1, #8, #8
 801706a:	061b      	lsls	r3, r3, #24
 801706c:	d108      	bne.n	8017080 <llcp_phy_selection+0x28>
 801706e:	2a04      	cmp	r2, #4
 8017070:	d806      	bhi.n	8017080 <llcp_phy_selection+0x28>
 8017072:	2301      	movs	r3, #1
 8017074:	4093      	lsls	r3, r2
 8017076:	f013 0f16 	tst.w	r3, #22
 801707a:	bf18      	it	ne
 801707c:	45f4      	cmpne	ip, lr
 801707e:	d126      	bne.n	80170ce <llcp_phy_selection+0x76>
 8017080:	ea12 020c 	ands.w	r2, r2, ip
 8017084:	ea01 010e 	and.w	r1, r1, lr
 8017088:	d00d      	beq.n	80170a6 <llcp_phy_selection+0x4e>
 801708a:	07d3      	lsls	r3, r2, #31
 801708c:	f04f 0301 	mov.w	r3, #1
 8017090:	bf08      	it	eq
 8017092:	2304      	moveq	r3, #4
 8017094:	0792      	lsls	r2, r2, #30
 8017096:	f890 212c 	ldrb.w	r2, [r0, #300]	@ 0x12c
 801709a:	bf48      	it	mi
 801709c:	2302      	movmi	r3, #2
 801709e:	1a9a      	subs	r2, r3, r2
 80170a0:	bf18      	it	ne
 80170a2:	461a      	movne	r2, r3
 80170a4:	e000      	b.n	80170a8 <llcp_phy_selection+0x50>
 80170a6:	2200      	movs	r2, #0
 80170a8:	f880 2074 	strb.w	r2, [r0, #116]	@ 0x74
 80170ac:	b169      	cbz	r1, 80170ca <llcp_phy_selection+0x72>
 80170ae:	07ca      	lsls	r2, r1, #31
 80170b0:	f04f 0201 	mov.w	r2, #1
 80170b4:	bf08      	it	eq
 80170b6:	2204      	moveq	r2, #4
 80170b8:	0789      	lsls	r1, r1, #30
 80170ba:	f890 112d 	ldrb.w	r1, [r0, #301]	@ 0x12d
 80170be:	bf48      	it	mi
 80170c0:	2202      	movmi	r2, #2
 80170c2:	1a51      	subs	r1, r2, r1
 80170c4:	bf18      	it	ne
 80170c6:	4611      	movne	r1, r2
 80170c8:	e004      	b.n	80170d4 <llcp_phy_selection+0x7c>
 80170ca:	2100      	movs	r1, #0
 80170cc:	e002      	b.n	80170d4 <llcp_phy_selection+0x7c>
 80170ce:	2100      	movs	r1, #0
 80170d0:	f880 1074 	strb.w	r1, [r0, #116]	@ 0x74
 80170d4:	f880 1075 	strb.w	r1, [r0, #117]	@ 0x75
 80170d8:	bd80      	pop	{r7, pc}

080170da <llcp_ll_phy_update_ind>:
 80170da:	b570      	push	{r4, r5, r6, lr}
 80170dc:	b08c      	sub	sp, #48	@ 0x30
 80170de:	4604      	mov	r4, r0
 80170e0:	f850 1fc8 	ldr.w	r1, [r0, #200]!
 80170e4:	b109      	cbz	r1, 80170ea <llcp_ll_phy_update_ind+0x10>
 80170e6:	f00b f823 	bl	8022130 <os_timer_stop_free>
 80170ea:	4621      	mov	r1, r4
 80170ec:	f811 0f74 	ldrb.w	r0, [r1, #116]!
 80170f0:	b910      	cbnz	r0, 80170f8 <llcp_ll_phy_update_ind+0x1e>
 80170f2:	f894 0075 	ldrb.w	r0, [r4, #117]	@ 0x75
 80170f6:	b348      	cbz	r0, 801714c <llcp_ll_phy_update_ind+0x72>
 80170f8:	2002      	movs	r0, #2
 80170fa:	f8a4 0076 	strh.w	r0, [r4, #118]	@ 0x76
 80170fe:	2008      	movs	r0, #8
 8017100:	f884 005c 	strb.w	r0, [r4, #92]	@ 0x5c
 8017104:	2001      	movs	r0, #1
 8017106:	f884 0134 	strb.w	r0, [r4, #308]	@ 0x134
 801710a:	2028      	movs	r0, #40	@ 0x28
 801710c:	f884 0128 	strb.w	r0, [r4, #296]	@ 0x128
 8017110:	f8d4 00cc 	ldr.w	r0, [r4, #204]	@ 0xcc
 8017114:	2101      	movs	r1, #1
 8017116:	fab0 f080 	clz	r0, r0
 801711a:	0940      	lsrs	r0, r0, #5
 801711c:	f104 0558 	add.w	r5, r4, #88	@ 0x58
 8017120:	65a4      	str	r4, [r4, #88]	@ 0x58
 8017122:	f008 fb7e 	bl	801f822 <bsp_assert>
 8017126:	f645 6043 	movw	r0, #24131	@ 0x5e43
 801712a:	f6c0 0001 	movt	r0, #2049	@ 0x801
 801712e:	2100      	movs	r1, #0
 8017130:	462a      	mov	r2, r5
 8017132:	f00a fe4b 	bl	8021dcc <os_timer_create>
 8017136:	f8c4 00cc 	str.w	r0, [r4, #204]	@ 0xcc
 801713a:	2800      	cmp	r0, #0
 801713c:	bf18      	it	ne
 801713e:	2001      	movne	r0, #1
 8017140:	2101      	movs	r1, #1
 8017142:	b00c      	add	sp, #48	@ 0x30
 8017144:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017148:	f008 bb6b 	b.w	801f822 <bsp_assert>
 801714c:	ad01      	add	r5, sp, #4
 801714e:	2600      	movs	r6, #0
 8017150:	4628      	mov	r0, r5
 8017152:	2206      	movs	r2, #6
 8017154:	f8a4 6076 	strh.w	r6, [r4, #118]	@ 0x76
 8017158:	f884 6134 	strb.w	r6, [r4, #308]	@ 0x134
 801715c:	f00d f9f4 	bl	8024548 <ble_memcpy>
 8017160:	4628      	mov	r0, r5
 8017162:	4621      	mov	r1, r4
 8017164:	2218      	movs	r2, #24
 8017166:	2300      	movs	r3, #0
 8017168:	f7fd ff48 	bl	8014ffc <llcp_cntrl_pkt_init>
 801716c:	f894 0078 	ldrb.w	r0, [r4, #120]	@ 0x78
 8017170:	2801      	cmp	r0, #1
 8017172:	d109      	bne.n	8017188 <llcp_ll_phy_update_ind+0xae>
 8017174:	f894 112c 	ldrb.w	r1, [r4, #300]	@ 0x12c
 8017178:	f894 212d 	ldrb.w	r2, [r4, #301]	@ 0x12d
 801717c:	4620      	mov	r0, r4
 801717e:	2300      	movs	r3, #0
 8017180:	f00e fcdc 	bl	8025b3c <conn_mngr_send_le_phy_update_complete_event>
 8017184:	f884 6078 	strb.w	r6, [r4, #120]	@ 0x78
 8017188:	f894 0123 	ldrb.w	r0, [r4, #291]	@ 0x123
 801718c:	280c      	cmp	r0, #12
 801718e:	bf04      	itt	eq
 8017190:	2000      	moveq	r0, #0
 8017192:	f884 0123 	strbeq.w	r0, [r4, #291]	@ 0x123
 8017196:	f894 0124 	ldrb.w	r0, [r4, #292]	@ 0x124
 801719a:	280c      	cmp	r0, #12
 801719c:	bf04      	itt	eq
 801719e:	2000      	moveq	r0, #0
 80171a0:	f884 0124 	strbeq.w	r0, [r4, #292]	@ 0x124
 80171a4:	2000      	movs	r0, #0
 80171a6:	f884 0128 	strb.w	r0, [r4, #296]	@ 0x128
 80171aa:	b00c      	add	sp, #48	@ 0x30
 80171ac:	bd70      	pop	{r4, r5, r6, pc}

080171ae <llcp_ll_phy_update_ind_received>:
 80171ae:	b570      	push	{r4, r5, r6, lr}
 80171b0:	4604      	mov	r4, r0
 80171b2:	f890 0125 	ldrb.w	r0, [r0, #293]	@ 0x125
 80171b6:	2801      	cmp	r0, #1
 80171b8:	d115      	bne.n	80171e6 <llcp_ll_phy_update_ind_received+0x38>
 80171ba:	4620      	mov	r0, r4
 80171bc:	460d      	mov	r5, r1
 80171be:	f850 1fd0 	ldr.w	r1, [r0, #208]!
 80171c2:	b109      	cbz	r1, 80171c8 <llcp_ll_phy_update_ind_received+0x1a>
 80171c4:	f00a ffb4 	bl	8022130 <os_timer_stop_free>
 80171c8:	4620      	mov	r0, r4
 80171ca:	f850 1fc8 	ldr.w	r1, [r0, #200]!
 80171ce:	b109      	cbz	r1, 80171d4 <llcp_ll_phy_update_ind_received+0x26>
 80171d0:	f00a ffae 	bl	8022130 <os_timer_stop_free>
 80171d4:	7828      	ldrb	r0, [r5, #0]
 80171d6:	2803      	cmp	r0, #3
 80171d8:	d108      	bne.n	80171ec <llcp_ll_phy_update_ind_received+0x3e>
 80171da:	4620      	mov	r0, r4
 80171dc:	211e      	movs	r1, #30
 80171de:	251e      	movs	r5, #30
 80171e0:	f00e fbd8 	bl	8025994 <conn_mngr_disconnect>
 80171e4:	e000      	b.n	80171e8 <llcp_ll_phy_update_ind_received+0x3a>
 80171e6:	2500      	movs	r5, #0
 80171e8:	4628      	mov	r0, r5
 80171ea:	bd70      	pop	{r4, r5, r6, pc}
 80171ec:	7869      	ldrb	r1, [r5, #1]
 80171ee:	2904      	cmp	r1, #4
 80171f0:	d8f3      	bhi.n	80171da <llcp_ll_phy_update_ind_received+0x2c>
 80171f2:	2903      	cmp	r1, #3
 80171f4:	d0f1      	beq.n	80171da <llcp_ll_phy_update_ind_received+0x2c>
 80171f6:	2805      	cmp	r0, #5
 80171f8:	d2ef      	bcs.n	80171da <llcp_ll_phy_update_ind_received+0x2c>
 80171fa:	4308      	orrs	r0, r1
 80171fc:	d120      	bne.n	8017240 <llcp_ll_phy_update_ind_received+0x92>
 80171fe:	f894 0078 	ldrb.w	r0, [r4, #120]	@ 0x78
 8017202:	2801      	cmp	r0, #1
 8017204:	d10a      	bne.n	801721c <llcp_ll_phy_update_ind_received+0x6e>
 8017206:	f894 112c 	ldrb.w	r1, [r4, #300]	@ 0x12c
 801720a:	f894 212d 	ldrb.w	r2, [r4, #301]	@ 0x12d
 801720e:	4620      	mov	r0, r4
 8017210:	2300      	movs	r3, #0
 8017212:	2500      	movs	r5, #0
 8017214:	f00e fc92 	bl	8025b3c <conn_mngr_send_le_phy_update_complete_event>
 8017218:	f884 5078 	strb.w	r5, [r4, #120]	@ 0x78
 801721c:	f894 0123 	ldrb.w	r0, [r4, #291]	@ 0x123
 8017220:	2500      	movs	r5, #0
 8017222:	280c      	cmp	r0, #12
 8017224:	bf04      	itt	eq
 8017226:	2000      	moveq	r0, #0
 8017228:	f884 0123 	strbeq.w	r0, [r4, #291]	@ 0x123
 801722c:	f894 0124 	ldrb.w	r0, [r4, #292]	@ 0x124
 8017230:	280c      	cmp	r0, #12
 8017232:	bf04      	itt	eq
 8017234:	2000      	moveq	r0, #0
 8017236:	f884 0124 	strbeq.w	r0, [r4, #292]	@ 0x124
 801723a:	f884 5134 	strb.w	r5, [r4, #308]	@ 0x134
 801723e:	e7d3      	b.n	80171e8 <llcp_ll_phy_update_ind_received+0x3a>
 8017240:	f8b4 10da 	ldrh.w	r1, [r4, #218]	@ 0xda
 8017244:	f248 0201 	movw	r2, #32769	@ 0x8001
 8017248:	8868      	ldrh	r0, [r5, #2]
 801724a:	f6cf 72ff 	movt	r2, #65535	@ 0xffff
 801724e:	1a52      	subs	r2, r2, r1
 8017250:	4281      	cmp	r1, r0
 8017252:	bf88      	it	hi
 8017254:	f500 3080 	addhi.w	r0, r0, #65536	@ 0x10000
 8017258:	4402      	add	r2, r0
 801725a:	b292      	uxth	r2, r2
 801725c:	f248 0303 	movw	r3, #32771	@ 0x8003
 8017260:	429a      	cmp	r2, r3
 8017262:	d340      	bcc.n	80172e6 <llcp_ll_phy_update_ind_received+0x138>
 8017264:	8ae2      	ldrh	r2, [r4, #22]
 8017266:	2308      	movs	r3, #8
 8017268:	1a41      	subs	r1, r0, r1
 801726a:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
 801726e:	230c      	movs	r3, #12
 8017270:	fb01 f102 	mul.w	r1, r1, r2
 8017274:	65a4      	str	r4, [r4, #88]	@ 0x58
 8017276:	f884 3124 	strb.w	r3, [r4, #292]	@ 0x124
 801727a:	f8a4 0076 	strh.w	r0, [r4, #118]	@ 0x76
 801727e:	7868      	ldrb	r0, [r5, #1]
 8017280:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8017284:	0852      	lsrs	r2, r2, #1
 8017286:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801728a:	f884 0074 	strb.w	r0, [r4, #116]	@ 0x74
 801728e:	0889      	lsrs	r1, r1, #2
 8017290:	7828      	ldrb	r0, [r5, #0]
 8017292:	eba1 0692 	sub.w	r6, r1, r2, lsr #2
 8017296:	f8d4 10cc 	ldr.w	r1, [r4, #204]	@ 0xcc
 801729a:	f884 0075 	strb.w	r0, [r4, #117]	@ 0x75
 801729e:	2001      	movs	r0, #1
 80172a0:	f884 0134 	strb.w	r0, [r4, #308]	@ 0x134
 80172a4:	fab1 f081 	clz	r0, r1
 80172a8:	0940      	lsrs	r0, r0, #5
 80172aa:	2101      	movs	r1, #1
 80172ac:	f104 0558 	add.w	r5, r4, #88	@ 0x58
 80172b0:	f008 fab7 	bl	801f822 <bsp_assert>
 80172b4:	f645 6043 	movw	r0, #24131	@ 0x5e43
 80172b8:	f6c0 0001 	movt	r0, #2049	@ 0x801
 80172bc:	2100      	movs	r1, #0
 80172be:	462a      	mov	r2, r5
 80172c0:	2500      	movs	r5, #0
 80172c2:	f00a fd83 	bl	8021dcc <os_timer_create>
 80172c6:	2101      	movs	r1, #1
 80172c8:	f8c4 00cc 	str.w	r0, [r4, #204]	@ 0xcc
 80172cc:	2800      	cmp	r0, #0
 80172ce:	bf18      	it	ne
 80172d0:	2001      	movne	r0, #1
 80172d2:	f008 faa6 	bl	801f822 <bsp_assert>
 80172d6:	f8d4 00cc 	ldr.w	r0, [r4, #204]	@ 0xcc
 80172da:	0171      	lsls	r1, r6, #5
 80172dc:	f8a4 50dc 	strh.w	r5, [r4, #220]	@ 0xdc
 80172e0:	f00a fded 	bl	8021ebe <os_timer_start>
 80172e4:	e780      	b.n	80171e8 <llcp_ll_phy_update_ind_received+0x3a>
 80172e6:	4620      	mov	r0, r4
 80172e8:	2128      	movs	r1, #40	@ 0x28
 80172ea:	2528      	movs	r5, #40	@ 0x28
 80172ec:	e778      	b.n	80171e0 <llcp_ll_phy_update_ind_received+0x32>

080172ee <llcp_min_used_chnls_prcdr_received>:
 80172ee:	b5b0      	push	{r4, r5, r7, lr}
 80172f0:	4604      	mov	r4, r0
 80172f2:	f890 0125 	ldrb.w	r0, [r0, #293]	@ 0x125
 80172f6:	2800      	cmp	r0, #0
 80172f8:	f04f 0000 	mov.w	r0, #0
 80172fc:	bf18      	it	ne
 80172fe:	bdb0      	popne	{r4, r5, r7, pc}
 8017300:	f884 0128 	strb.w	r0, [r4, #296]	@ 0x128
 8017304:	7848      	ldrb	r0, [r1, #1]
 8017306:	460d      	mov	r5, r1
 8017308:	3826      	subs	r0, #38	@ 0x26
 801730a:	f110 0f24 	cmn.w	r0, #36	@ 0x24
 801730e:	d304      	bcc.n	801731a <llcp_min_used_chnls_prcdr_received+0x2c>
 8017310:	7828      	ldrb	r0, [r5, #0]
 8017312:	3808      	subs	r0, #8
 8017314:	f110 0f07 	cmn.w	r0, #7
 8017318:	d201      	bcs.n	801731e <llcp_min_used_chnls_prcdr_received+0x30>
 801731a:	2030      	movs	r0, #48	@ 0x30
 801731c:	bdb0      	pop	{r4, r5, r7, pc}
 801731e:	2000      	movs	r0, #0
 8017320:	f884 008a 	strb.w	r0, [r4, #138]	@ 0x8a
 8017324:	8829      	ldrh	r1, [r5, #0]
 8017326:	0a0a      	lsrs	r2, r1, #8
 8017328:	f884 2136 	strb.w	r2, [r4, #310]	@ 0x136
 801732c:	f894 212d 	ldrb.w	r2, [r4, #301]	@ 0x12d
 8017330:	f884 1135 	strb.w	r1, [r4, #309]	@ 0x135
 8017334:	4011      	ands	r1, r2
 8017336:	2201      	movs	r2, #1
 8017338:	0609      	lsls	r1, r1, #24
 801733a:	f884 2137 	strb.w	r2, [r4, #311]	@ 0x137
 801733e:	d00a      	beq.n	8017356 <llcp_min_used_chnls_prcdr_received+0x68>
 8017340:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 8017344:	f00e fab8 	bl	80258b8 <conn_mngr_calc_num_of_used_data_chnls>
 8017348:	7869      	ldrb	r1, [r5, #1]
 801734a:	4288      	cmp	r0, r1
 801734c:	bf3c      	itt	cc
 801734e:	4620      	movcc	r0, r4
 8017350:	f7fe ff80 	blcc	8016254 <llcp_update_chnl_map_per_connection>
 8017354:	2000      	movs	r0, #0
 8017356:	bdb0      	pop	{r4, r5, r7, pc}

08017358 <llhwc_ble_wait_for_evnt_on_air>:
 8017358:	b570      	push	{r4, r5, r6, lr}
 801735a:	b082      	sub	sp, #8
 801735c:	2600      	movs	r6, #0
 801735e:	f240 4404 	movw	r4, #1028	@ 0x404
 8017362:	f6c4 0402 	movt	r4, #18434	@ 0x4802
 8017366:	f88d 6007 	strb.w	r6, [sp, #7]
 801736a:	f8d4 0478 	ldr.w	r0, [r4, #1144]	@ 0x478
 801736e:	f646 5548 	movw	r5, #27976	@ 0x6d48
 8017372:	f040 0008 	orr.w	r0, r0, #8
 8017376:	f8c4 0478 	str.w	r0, [r4, #1144]	@ 0x478
 801737a:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 801737e:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
 8017382:	f080 0010 	eor.w	r0, r0, #16
 8017386:	4308      	orrs	r0, r1
 8017388:	bf1e      	ittt	ne
 801738a:	e9d5 0108 	ldrdne	r0, r1, [r5, #32]
 801738e:	f080 0020 	eorne.w	r0, r0, #32
 8017392:	ea50 0001 	orrsne.w	r0, r0, r1
 8017396:	d14b      	bne.n	8017430 <llhwc_ble_wait_for_evnt_on_air+0xd8>
 8017398:	201c      	movs	r0, #28
 801739a:	f008 fa89 	bl	801f8b0 <bsp_debug_gpio_set>
 801739e:	616e      	str	r6, [r5, #20]
 80173a0:	f885 6033 	strb.w	r6, [r5, #51]	@ 0x33
 80173a4:	6820      	ldr	r0, [r4, #0]
 80173a6:	f040 0001 	orr.w	r0, r0, #1
 80173aa:	6020      	str	r0, [r4, #0]
 80173ac:	201c      	movs	r0, #28
 80173ae:	f008 fa81 	bl	801f8b4 <bsp_debug_gpio_clear>
 80173b2:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
 80173b6:	2600      	movs	r6, #0
 80173b8:	f081 0110 	eor.w	r1, r1, #16
 80173bc:	4308      	orrs	r0, r1
 80173be:	f04f 0000 	mov.w	r0, #0
 80173c2:	d04e      	beq.n	8017462 <llhwc_ble_wait_for_evnt_on_air+0x10a>
 80173c4:	2001      	movs	r0, #1
 80173c6:	f885 003c 	strb.w	r0, [r5, #60]	@ 0x3c
 80173ca:	f44f 30e0 	mov.w	r0, #114688	@ 0x1c000
 80173ce:	f640 0174 	movw	r1, #2164	@ 0x874
 80173d2:	2208      	movs	r2, #8
 80173d4:	2303      	movs	r3, #3
 80173d6:	f885 6033 	strb.w	r6, [r5, #51]	@ 0x33
 80173da:	9600      	str	r6, [sp, #0]
 80173dc:	f00b fca0 	bl	8022d20 <llhwc_polling>
 80173e0:	2800      	cmp	r0, #0
 80173e2:	d13e      	bne.n	8017462 <llhwc_ble_wait_for_evnt_on_air+0x10a>
 80173e4:	f008 fcb8 	bl	801fd58 <llhwc_phy_is_phy_driver_busy>
 80173e8:	2801      	cmp	r0, #1
 80173ea:	d116      	bne.n	801741a <llhwc_ble_wait_for_evnt_on_air+0xc2>
 80173ec:	f04f 0c00 	mov.w	ip, #0
 80173f0:	f44f 30e0 	mov.w	r0, #114688	@ 0x1c000
 80173f4:	f44f 6188 	mov.w	r1, #1088	@ 0x440
 80173f8:	2201      	movs	r2, #1
 80173fa:	2300      	movs	r3, #0
 80173fc:	f8cd c000 	str.w	ip, [sp]
 8017400:	f00b fc8e 	bl	8022d20 <llhwc_polling>
 8017404:	bb68      	cbnz	r0, 8017462 <llhwc_ble_wait_for_evnt_on_air+0x10a>
 8017406:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8017408:	f040 0001 	orr.w	r0, r0, #1
 801740c:	6420      	str	r0, [r4, #64]	@ 0x40
 801740e:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8017410:	f020 0001 	bic.w	r0, r0, #1
 8017414:	6420      	str	r0, [r4, #64]	@ 0x40
 8017416:	f008 fd5c 	bl	801fed2 <llhwc_phy_phy_driver_stop>
 801741a:	f00b fed8 	bl	80231ce <ll_cmn_clr_isr>
 801741e:	f895 0034 	ldrb.w	r0, [r5, #52]	@ 0x34
 8017422:	2802      	cmp	r0, #2
 8017424:	d018      	beq.n	8017458 <llhwc_ble_wait_for_evnt_on_air+0x100>
 8017426:	2801      	cmp	r0, #1
 8017428:	d11a      	bne.n	8017460 <llhwc_ble_wait_for_evnt_on_air+0x108>
 801742a:	f000 f83d 	bl	80174a8 <llhwc_hg_isr>
 801742e:	e017      	b.n	8017460 <llhwc_ble_wait_for_evnt_on_air+0x108>
 8017430:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
 8017434:	f080 0040 	eor.w	r0, r0, #64	@ 0x40
 8017438:	4308      	orrs	r0, r1
 801743a:	bf1e      	ittt	ne
 801743c:	e9d5 0108 	ldrdne	r0, r1, [r5, #32]
 8017440:	f480 3000 	eorne.w	r0, r0, #131072	@ 0x20000
 8017444:	ea50 0001 	orrsne.w	r0, r0, r1
 8017448:	d0a6      	beq.n	8017398 <llhwc_ble_wait_for_evnt_on_air+0x40>
 801744a:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
 801744e:	f480 2080 	eor.w	r0, r0, #262144	@ 0x40000
 8017452:	4308      	orrs	r0, r1
 8017454:	d0a0      	beq.n	8017398 <llhwc_ble_wait_for_evnt_on_air+0x40>
 8017456:	e7ac      	b.n	80173b2 <llhwc_ble_wait_for_evnt_on_air+0x5a>
 8017458:	f10d 0007 	add.w	r0, sp, #7
 801745c:	f000 f97a 	bl	8017754 <llhwc_lw_isr>
 8017460:	2000      	movs	r0, #0
 8017462:	f8d4 1478 	ldr.w	r1, [r4, #1144]	@ 0x478
 8017466:	f021 0108 	bic.w	r1, r1, #8
 801746a:	f8c4 1478 	str.w	r1, [r4, #1144]	@ 0x478
 801746e:	f885 603c 	strb.w	r6, [r5, #60]	@ 0x3c
 8017472:	b002      	add	sp, #8
 8017474:	bd70      	pop	{r4, r5, r6, pc}

08017476 <llhwc_stop_scan>:
 8017476:	b580      	push	{r7, lr}
 8017478:	201c      	movs	r0, #28
 801747a:	f008 fa19 	bl	801f8b0 <bsp_debug_gpio_set>
 801747e:	f646 5048 	movw	r0, #27976	@ 0x6d48
 8017482:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8017486:	2100      	movs	r1, #0
 8017488:	6141      	str	r1, [r0, #20]
 801748a:	f880 1033 	strb.w	r1, [r0, #51]	@ 0x33
 801748e:	f240 4104 	movw	r1, #1028	@ 0x404
 8017492:	f6c4 0102 	movt	r1, #18434	@ 0x4802
 8017496:	6808      	ldr	r0, [r1, #0]
 8017498:	f040 0201 	orr.w	r2, r0, #1
 801749c:	201c      	movs	r0, #28
 801749e:	600a      	str	r2, [r1, #0]
 80174a0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80174a4:	f008 ba06 	b.w	801f8b4 <bsp_debug_gpio_clear>

080174a8 <llhwc_hg_isr>:
 80174a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80174ac:	b089      	sub	sp, #36	@ 0x24
 80174ae:	f640 0728 	movw	r7, #2088	@ 0x828
 80174b2:	f240 4604 	movw	r6, #1028	@ 0x404
 80174b6:	f6c4 0702 	movt	r7, #18434	@ 0x4802
 80174ba:	f6c4 0602 	movt	r6, #18434	@ 0x4802
 80174be:	f008 fa10 	bl	801f8e2 <os_disable_isr>
 80174c2:	f646 5948 	movw	r9, #27976	@ 0x6d48
 80174c6:	f2c2 0900 	movt	r9, #8192	@ 0x2000
 80174ca:	f8d6 0408 	ldr.w	r0, [r6, #1032]	@ 0x408
 80174ce:	f899 1034 	ldrb.w	r1, [r9, #52]	@ 0x34
 80174d2:	f000 041f 	and.w	r4, r0, #31
 80174d6:	2901      	cmp	r1, #1
 80174d8:	d111      	bne.n	80174fe <llhwc_hg_isr+0x56>
 80174da:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80174dc:	0700      	lsls	r0, r0, #28
 80174de:	d50e      	bpl.n	80174fe <llhwc_hg_isr+0x56>
 80174e0:	f247 3000 	movw	r0, #29440	@ 0x7300
 80174e4:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80174e8:	2100      	movs	r1, #0
 80174ea:	7001      	strb	r1, [r0, #0]
 80174ec:	4620      	mov	r0, r4
 80174ee:	f002 f9a7 	bl	8019840 <llhwc_sm_done_isr>
 80174f2:	f247 308c 	movw	r0, #29580	@ 0x738c
 80174f6:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80174fa:	2102      	movs	r1, #2
 80174fc:	7081      	strb	r1, [r0, #2]
 80174fe:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8017500:	0740      	lsls	r0, r0, #29
 8017502:	f140 8122 	bpl.w	801774a <llhwc_hg_isr+0x2a2>
 8017506:	f247 3000 	movw	r0, #29440	@ 0x7300
 801750a:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801750e:	2100      	movs	r1, #0
 8017510:	7001      	strb	r1, [r0, #0]
 8017512:	6830      	ldr	r0, [r6, #0]
 8017514:	2c0c      	cmp	r4, #12
 8017516:	f020 0001 	bic.w	r0, r0, #1
 801751a:	6030      	str	r0, [r6, #0]
 801751c:	dc61      	bgt.n	80175e2 <llhwc_hg_isr+0x13a>
 801751e:	2c04      	cmp	r4, #4
 8017520:	d067      	beq.n	80175f2 <llhwc_hg_isr+0x14a>
 8017522:	2c06      	cmp	r4, #6
 8017524:	f040 8109 	bne.w	801773a <llhwc_hg_isr+0x292>
 8017528:	f247 3b18 	movw	fp, #29464	@ 0x7318
 801752c:	f2c2 0b00 	movt	fp, #8192	@ 0x2000
 8017530:	f89b 503b 	ldrb.w	r5, [fp, #59]	@ 0x3b
 8017534:	2100      	movs	r1, #0
 8017536:	2d04      	cmp	r5, #4
 8017538:	f6c4 0102 	movt	r1, #18434	@ 0x4802
 801753c:	d10a      	bne.n	8017554 <llhwc_hg_isr+0xac>
 801753e:	f247 30d0 	movw	r0, #29648	@ 0x73d0
 8017542:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8017546:	8bc0      	ldrh	r0, [r0, #30]
 8017548:	2504      	movs	r5, #4
 801754a:	4308      	orrs	r0, r1
 801754c:	78c0      	ldrb	r0, [r0, #3]
 801754e:	0700      	lsls	r0, r0, #28
 8017550:	bf58      	it	pl
 8017552:	2503      	movpl	r5, #3
 8017554:	2002      	movs	r0, #2
 8017556:	f008 f954 	bl	801f802 <bsp_delay_us>
 801755a:	f641 035a 	movw	r3, #6234	@ 0x185a
 801755e:	f6c0 0303 	movt	r3, #2051	@ 0x803
 8017562:	6df0      	ldr	r0, [r6, #92]	@ 0x5c
 8017564:	f8bb 1018 	ldrh.w	r1, [fp, #24]
 8017568:	f8bb 2010 	ldrh.w	r2, [fp, #16]
 801756c:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
 8017570:	4410      	add	r0, r2
 8017572:	4419      	add	r1, r3
 8017574:	1a41      	subs	r1, r0, r1
 8017576:	e9db 2003 	ldrd	r2, r0, [fp, #12]
 801757a:	f10d 0818 	add.w	r8, sp, #24
 801757e:	f04f 0a00 	mov.w	sl, #0
 8017582:	e9cd 2006 	strd	r2, r0, [sp, #24]
 8017586:	4640      	mov	r0, r8
 8017588:	2201      	movs	r2, #1
 801758a:	f8ad a01c 	strh.w	sl, [sp, #28]
 801758e:	f009 ff2b 	bl	80213e8 <ble_time_add_uint>
 8017592:	f646 51f8 	movw	r1, #28152	@ 0x6df8
 8017596:	f899 0030 	ldrb.w	r0, [r9, #48]	@ 0x30
 801759a:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 801759e:	f89b 303a 	ldrb.w	r3, [fp, #58]	@ 0x3a
 80175a2:	f8d1 c000 	ldr.w	ip, [r1]
 80175a6:	9000      	str	r0, [sp, #0]
 80175a8:	a904      	add	r1, sp, #16
 80175aa:	4640      	mov	r0, r8
 80175ac:	462a      	mov	r2, r5
 80175ae:	f8cd c004 	str.w	ip, [sp, #4]
 80175b2:	f003 fde1 	bl	801b178 <evnt_schdlr_update_master_conn_params>
 80175b6:	f646 50fc 	movw	r0, #28156	@ 0x6dfc
 80175ba:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80175be:	6800      	ldr	r0, [r0, #0]
 80175c0:	2100      	movs	r1, #0
 80175c2:	f6c4 0102 	movt	r1, #18434	@ 0x4802
 80175c6:	4408      	add	r0, r1
 80175c8:	68c1      	ldr	r1, [r0, #12]
 80175ca:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80175ce:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 80175d2:	4391      	bics	r1, r2
 80175d4:	4419      	add	r1, r3
 80175d6:	60c1      	str	r1, [r0, #12]
 80175d8:	f899 001a 	ldrb.w	r0, [r9, #26]
 80175dc:	2801      	cmp	r0, #1
 80175de:	d00a      	beq.n	80175f6 <llhwc_hg_isr+0x14e>
 80175e0:	e0ab      	b.n	801773a <llhwc_hg_isr+0x292>
 80175e2:	2c0d      	cmp	r4, #13
 80175e4:	bf18      	it	ne
 80175e6:	2c17      	cmpne	r4, #23
 80175e8:	f040 80a7 	bne.w	801773a <llhwc_hg_isr+0x292>
 80175ec:	f04f 0a00 	mov.w	sl, #0
 80175f0:	e001      	b.n	80175f6 <llhwc_hg_isr+0x14e>
 80175f2:	f04f 0a01 	mov.w	sl, #1
 80175f6:	f247 38d0 	movw	r8, #29648	@ 0x73d0
 80175fa:	f2c2 0800 	movt	r8, #8192	@ 0x2000
 80175fe:	2500      	movs	r5, #0
 8017600:	f6c4 0502 	movt	r5, #18434	@ 0x4802
 8017604:	f8b8 001e 	ldrh.w	r0, [r8, #30]
 8017608:	1d2a      	adds	r2, r5, #4
 801760a:	5881      	ldr	r1, [r0, r2]
 801760c:	f001 030f 	and.w	r3, r1, #15
 8017610:	5881      	ldr	r1, [r0, r2]
 8017612:	2b02      	cmp	r3, #2
 8017614:	b2c9      	uxtb	r1, r1
 8017616:	d304      	bcc.n	8017622 <llhwc_hg_isr+0x17a>
 8017618:	2b05      	cmp	r3, #5
 801761a:	d046      	beq.n	80176aa <llhwc_hg_isr+0x202>
 801761c:	2b06      	cmp	r3, #6
 801761e:	f040 808c 	bne.w	801773a <llhwc_hg_isr+0x292>
 8017622:	4428      	add	r0, r5
 8017624:	6882      	ldr	r2, [r0, #8]
 8017626:	9206      	str	r2, [sp, #24]
 8017628:	68c0      	ldr	r0, [r0, #12]
 801762a:	f899 201a 	ldrb.w	r2, [r9, #26]
 801762e:	b280      	uxth	r0, r0
 8017630:	2a00      	cmp	r2, #0
 8017632:	9007      	str	r0, [sp, #28]
 8017634:	f000 8081 	beq.w	801773a <llhwc_hg_isr+0x292>
 8017638:	2001      	movs	r0, #1
 801763a:	f3c1 1380 	ubfx	r3, r1, #6, #1
 801763e:	a904      	add	r1, sp, #16
 8017640:	40a0      	lsls	r0, r4
 8017642:	f10d 040f 	add.w	r4, sp, #15
 8017646:	9100      	str	r1, [sp, #0]
 8017648:	aa06      	add	r2, sp, #24
 801764a:	2100      	movs	r1, #0
 801764c:	9401      	str	r4, [sp, #4]
 801764e:	f005 fba7 	bl	801cda0 <non_conn_mngr_interrupt>
 8017652:	1e41      	subs	r1, r0, #1
 8017654:	bf18      	it	ne
 8017656:	2101      	movne	r1, #1
 8017658:	f08a 0201 	eor.w	r2, sl, #1
 801765c:	4311      	orrs	r1, r2
 801765e:	f889 0019 	strb.w	r0, [r9, #25]
 8017662:	d106      	bne.n	8017672 <llhwc_hg_isr+0x1ca>
 8017664:	f898 0012 	ldrb.w	r0, [r8, #18]
 8017668:	f3c0 0081 	ubfx	r0, r0, #2, #2
 801766c:	3001      	adds	r0, #1
 801766e:	f009 fd57 	bl	8021120 <llhwc_phy_deactivate_scan_req>
 8017672:	9804      	ldr	r0, [sp, #16]
 8017674:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8017678:	6038      	str	r0, [r7, #0]
 801767a:	f8d6 0420 	ldr.w	r0, [r6, #1056]	@ 0x420
 801767e:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8017682:	4388      	bics	r0, r1
 8017684:	4410      	add	r0, r2
 8017686:	f8c6 0420 	str.w	r0, [r6, #1056]	@ 0x420
 801768a:	e9d9 0108 	ldrd	r0, r1, [r9, #32]
 801768e:	f080 0020 	eor.w	r0, r0, #32
 8017692:	4308      	orrs	r0, r1
 8017694:	d051      	beq.n	801773a <llhwc_hg_isr+0x292>
 8017696:	f8b8 001c 	ldrh.w	r0, [r8, #28]
 801769a:	4428      	add	r0, r5
 801769c:	6841      	ldr	r1, [r0, #4]
 801769e:	f89d 200f 	ldrb.w	r2, [sp, #15]
 80176a2:	f362 1186 	bfi	r1, r2, #6, #1
 80176a6:	6041      	str	r1, [r0, #4]
 80176a8:	e047      	b.n	801773a <llhwc_hg_isr+0x292>
 80176aa:	5883      	ldr	r3, [r0, r2]
 80176ac:	4428      	add	r0, r5
 80176ae:	6882      	ldr	r2, [r0, #8]
 80176b0:	2c17      	cmp	r4, #23
 80176b2:	9206      	str	r2, [sp, #24]
 80176b4:	68c2      	ldr	r2, [r0, #12]
 80176b6:	b292      	uxth	r2, r2
 80176b8:	9207      	str	r2, [sp, #28]
 80176ba:	68c2      	ldr	r2, [r0, #12]
 80176bc:	ea4f 4212 	mov.w	r2, r2, lsr #16
 80176c0:	9204      	str	r2, [sp, #16]
 80176c2:	6900      	ldr	r0, [r0, #16]
 80176c4:	ea4f 1291 	mov.w	r2, r1, lsr #6
 80176c8:	f04f 0140 	mov.w	r1, #64	@ 0x40
 80176cc:	ea01 0353 	and.w	r3, r1, r3, lsr #1
 80176d0:	f8b8 101c 	ldrh.w	r1, [r8, #28]
 80176d4:	ea4f 4610 	mov.w	r6, r0, lsr #16
 80176d8:	9005      	str	r0, [sp, #20]
 80176da:	f8ad 0012 	strh.w	r0, [sp, #18]
 80176de:	f8ad 6014 	strh.w	r6, [sp, #20]
 80176e2:	d002      	beq.n	80176ea <llhwc_hg_isr+0x242>
 80176e4:	4329      	orrs	r1, r5
 80176e6:	6809      	ldr	r1, [r1, #0]
 80176e8:	b289      	uxth	r1, r1
 80176ea:	4429      	add	r1, r5
 80176ec:	684e      	ldr	r6, [r1, #4]
 80176ee:	f002 0201 	and.w	r2, r2, #1
 80176f2:	f026 0640 	bic.w	r6, r6, #64	@ 0x40
 80176f6:	4333      	orrs	r3, r6
 80176f8:	604b      	str	r3, [r1, #4]
 80176fa:	684b      	ldr	r3, [r1, #4]
 80176fc:	f64f 76ff 	movw	r6, #65535	@ 0xffff
 8017700:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8017704:	ea43 12c2 	orr.w	r2, r3, r2, lsl #7
 8017708:	604a      	str	r2, [r1, #4]
 801770a:	688a      	ldr	r2, [r1, #8]
 801770c:	9b04      	ldr	r3, [sp, #16]
 801770e:	b292      	uxth	r2, r2
 8017710:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8017714:	608a      	str	r2, [r1, #8]
 8017716:	68ca      	ldr	r2, [r1, #12]
 8017718:	43b2      	bics	r2, r6
 801771a:	ea42 4213 	orr.w	r2, r2, r3, lsr #16
 801771e:	60ca      	str	r2, [r1, #12]
 8017720:	68ca      	ldr	r2, [r1, #12]
 8017722:	f362 000f 	bfi	r0, r2, #0, #16
 8017726:	60c8      	str	r0, [r1, #12]
 8017728:	9806      	ldr	r0, [sp, #24]
 801772a:	6108      	str	r0, [r1, #16]
 801772c:	6948      	ldr	r0, [r1, #20]
 801772e:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8017732:	f36f 000f 	bfc	r0, #0, #16
 8017736:	4410      	add	r0, r2
 8017738:	6148      	str	r0, [r1, #20]
 801773a:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 801773c:	f040 0004 	orr.w	r0, r0, #4
 8017740:	6538      	str	r0, [r7, #80]	@ 0x50
 8017742:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8017744:	f020 0004 	bic.w	r0, r0, #4
 8017748:	6538      	str	r0, [r7, #80]	@ 0x50
 801774a:	f008 f8cc 	bl	801f8e6 <os_enable_isr>
 801774e:	b009      	add	sp, #36	@ 0x24
 8017750:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017754 <llhwc_lw_isr>:
 8017754:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017758:	b082      	sub	sp, #8
 801775a:	2100      	movs	r1, #0
 801775c:	270c      	movs	r7, #12
 801775e:	f646 6a0c 	movw	sl, #28172	@ 0x6e0c
 8017762:	9101      	str	r1, [sp, #4]
 8017764:	f6c4 0702 	movt	r7, #18434	@ 0x4802
 8017768:	9100      	str	r1, [sp, #0]
 801776a:	f2c2 0a00 	movt	sl, #8192	@ 0x2000
 801776e:	f8d7 8800 	ldr.w	r8, [r7, #2048]	@ 0x800
 8017772:	f89a 1000 	ldrb.w	r1, [sl]
 8017776:	f640 0924 	movw	r9, #2084	@ 0x824
 801777a:	2901      	cmp	r1, #1
 801777c:	4605      	mov	r5, r0
 801777e:	f6c4 0902 	movt	r9, #18434	@ 0x4802
 8017782:	d12e      	bne.n	80177e2 <llhwc_lw_isr+0x8e>
 8017784:	f247 30d0 	movw	r0, #29648	@ 0x73d0
 8017788:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801778c:	7c80      	ldrb	r0, [r0, #18]
 801778e:	2118      	movs	r1, #24
 8017790:	f010 0f0c 	tst.w	r0, #12
 8017794:	f646 6008 	movw	r0, #28168	@ 0x6e08
 8017798:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801779c:	6800      	ldr	r0, [r0, #0]
 801779e:	bf08      	it	eq
 80177a0:	210b      	moveq	r1, #11
 80177a2:	466c      	mov	r4, sp
 80177a4:	9000      	str	r0, [sp, #0]
 80177a6:	4620      	mov	r0, r4
 80177a8:	2205      	movs	r2, #5
 80177aa:	f009 fe1d 	bl	80213e8 <ble_time_add_uint>
 80177ae:	f646 6604 	movw	r6, #28164	@ 0x6e04
 80177b2:	f2c2 0600 	movt	r6, #8192	@ 0x2000
 80177b6:	bf00      	nop
 80177b8:	4630      	mov	r0, r6
 80177ba:	f00a fe46 	bl	802244a <llhwc_slptmr_get>
 80177be:	6831      	ldr	r1, [r6, #0]
 80177c0:	4620      	mov	r0, r4
 80177c2:	f009 fef1 	bl	80215a8 <ble_time_cmp_raw_reading>
 80177c6:	2800      	cmp	r0, #0
 80177c8:	d4f6      	bmi.n	80177b8 <llhwc_lw_isr+0x64>
 80177ca:	2000      	movs	r0, #0
 80177cc:	f8c9 0004 	str.w	r0, [r9, #4]
 80177d0:	f8d9 1000 	ldr.w	r1, [r9]
 80177d4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80177d8:	4391      	bics	r1, r2
 80177da:	f8c9 1000 	str.w	r1, [r9]
 80177de:	f88a 0000 	strb.w	r0, [sl]
 80177e2:	7828      	ldrb	r0, [r5, #0]
 80177e4:	f008 041f 	and.w	r4, r8, #31
 80177e8:	f646 5648 	movw	r6, #27976	@ 0x6d48
 80177ec:	f247 3801 	movw	r8, #29441	@ 0x7301
 80177f0:	2800      	cmp	r0, #0
 80177f2:	f2c2 0600 	movt	r6, #8192	@ 0x2000
 80177f6:	f2c2 0800 	movt	r8, #8192	@ 0x2000
 80177fa:	d03f      	beq.n	801787c <llhwc_lw_isr+0x128>
 80177fc:	6838      	ldr	r0, [r7, #0]
 80177fe:	f020 0001 	bic.w	r0, r0, #1
 8017802:	6038      	str	r0, [r7, #0]
 8017804:	6838      	ldr	r0, [r7, #0]
 8017806:	f040 0080 	orr.w	r0, r0, #128	@ 0x80
 801780a:	6038      	str	r0, [r7, #0]
 801780c:	6838      	ldr	r0, [r7, #0]
 801780e:	f020 0080 	bic.w	r0, r0, #128	@ 0x80
 8017812:	6038      	str	r0, [r7, #0]
 8017814:	201b      	movs	r0, #27
 8017816:	f008 f84f 	bl	801f8b8 <bsp_debug_gpio_toggle>
 801781a:	2700      	movs	r7, #0
 801781c:	2010      	movs	r0, #16
 801781e:	f888 7000 	strb.w	r7, [r8]
 8017822:	702f      	strb	r7, [r5, #0]
 8017824:	e9c6 7008 	strd	r7, r0, [r6, #32]
 8017828:	2000      	movs	r0, #0
 801782a:	2101      	movs	r1, #1
 801782c:	2c18      	cmp	r4, #24
 801782e:	bf38      	it	cc
 8017830:	2001      	movcc	r0, #1
 8017832:	f007 fff6 	bl	801f822 <bsp_assert>
 8017836:	f641 0064 	movw	r0, #6244	@ 0x1864
 801783a:	f6c0 0003 	movt	r0, #2051	@ 0x803
 801783e:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8017842:	f886 7033 	strb.w	r7, [r6, #51]	@ 0x33
 8017846:	4780      	blx	r0
 8017848:	e9d6 0108 	ldrd	r0, r1, [r6, #32]
 801784c:	f081 0110 	eor.w	r1, r1, #16
 8017850:	4308      	orrs	r0, r1
 8017852:	d103      	bne.n	801785c <llhwc_lw_isr+0x108>
 8017854:	2001      	movs	r0, #1
 8017856:	2100      	movs	r1, #0
 8017858:	f008 fd48 	bl	80202ec <llhwc_phy_strt_stp>
 801785c:	e9d6 0108 	ldrd	r0, r1, [r6, #32]
 8017860:	f081 0110 	eor.w	r1, r1, #16
 8017864:	4308      	orrs	r0, r1
 8017866:	d103      	bne.n	8017870 <llhwc_lw_isr+0x11c>
 8017868:	2000      	movs	r0, #0
 801786a:	2100      	movs	r1, #0
 801786c:	f00c f9b0 	bl	8023bd0 <llhwc_cmn_control_aclk>
 8017870:	f8d9 0058 	ldr.w	r0, [r9, #88]	@ 0x58
 8017874:	f020 0008 	bic.w	r0, r0, #8
 8017878:	f8c9 0058 	str.w	r0, [r9, #88]	@ 0x58
 801787c:	f896 0034 	ldrb.w	r0, [r6, #52]	@ 0x34
 8017880:	f247 358c 	movw	r5, #29580	@ 0x738c
 8017884:	2802      	cmp	r0, #2
 8017886:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 801788a:	d10a      	bne.n	80178a2 <llhwc_lw_isr+0x14e>
 801788c:	f8d9 0050 	ldr.w	r0, [r9, #80]	@ 0x50
 8017890:	0700      	lsls	r0, r0, #28
 8017892:	d508      	bpl.n	80178a6 <llhwc_lw_isr+0x152>
 8017894:	2000      	movs	r0, #0
 8017896:	f888 0000 	strb.w	r0, [r8]
 801789a:	4620      	mov	r0, r4
 801789c:	f001 ffd0 	bl	8019840 <llhwc_sm_done_isr>
 80178a0:	e001      	b.n	80178a6 <llhwc_lw_isr+0x152>
 80178a2:	2000      	movs	r0, #0
 80178a4:	70a8      	strb	r0, [r5, #2]
 80178a6:	f898 0000 	ldrb.w	r0, [r8]
 80178aa:	7868      	ldrb	r0, [r5, #1]
 80178ac:	2801      	cmp	r0, #1
 80178ae:	d110      	bne.n	80178d2 <llhwc_lw_isr+0x17e>
 80178b0:	f896 003c 	ldrb.w	r0, [r6, #60]	@ 0x3c
 80178b4:	b968      	cbnz	r0, 80178d2 <llhwc_lw_isr+0x17e>
 80178b6:	2001      	movs	r0, #1
 80178b8:	f7fc f96e 	bl	8013b98 <evnt_util_set_prdc_clbr_exce_state>
 80178bc:	2000      	movs	r0, #0
 80178be:	f009 ffa2 	bl	8021806 <emngr_get_handle_events>
 80178c2:	b118      	cbz	r0, 80178cc <llhwc_lw_isr+0x178>
 80178c4:	2000      	movs	r0, #0
 80178c6:	f009 fff1 	bl	80218ac <emngr_handle_event>
 80178ca:	e7f7      	b.n	80178bc <llhwc_lw_isr+0x168>
 80178cc:	2000      	movs	r0, #0
 80178ce:	f7fc f963 	bl	8013b98 <evnt_util_set_prdc_clbr_exce_state>
 80178d2:	b002      	add	sp, #8
 80178d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080178d8 <llhwc_addr_rsln_en>:
 80178d8:	f646 5148 	movw	r1, #27976	@ 0x6d48
 80178dc:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 80178e0:	7688      	strb	r0, [r1, #26]
 80178e2:	f640 0140 	movw	r1, #2112	@ 0x840
 80178e6:	f6c4 0102 	movt	r1, #18434	@ 0x4802
 80178ea:	680a      	ldr	r2, [r1, #0]
 80178ec:	2801      	cmp	r0, #1
 80178ee:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80178f2:	bf18      	it	ne
 80178f4:	f502 4200 	addne.w	r2, r2, #32768	@ 0x8000
 80178f8:	600a      	str	r2, [r1, #0]
 80178fa:	4770      	bx	lr

080178fc <llhwc_reset>:
 80178fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017900:	f646 5548 	movw	r5, #27976	@ 0x6d48
 8017904:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 8017908:	692f      	ldr	r7, [r5, #16]
 801790a:	f640 087c 	movw	r8, #2172	@ 0x87c
 801790e:	f6c4 0802 	movt	r8, #18434	@ 0x4802
 8017912:	f007 ffe6 	bl	801f8e2 <os_disable_isr>
 8017916:	6c28      	ldr	r0, [r5, #64]	@ 0x40
 8017918:	6bae      	ldr	r6, [r5, #56]	@ 0x38
 801791a:	b148      	cbz	r0, 8017930 <llhwc_reset+0x34>
 801791c:	2000      	movs	r0, #0
 801791e:	87e8      	strh	r0, [r5, #62]	@ 0x3e
 8017920:	f105 0040 	add.w	r0, r5, #64	@ 0x40
 8017924:	f00a fc04 	bl	8022130 <os_timer_stop_free>
 8017928:	4604      	mov	r4, r0
 801792a:	2800      	cmp	r0, #0
 801792c:	f040 809b 	bne.w	8017a66 <llhwc_reset+0x16a>
 8017930:	4628      	mov	r0, r5
 8017932:	2100      	movs	r1, #0
 8017934:	2248      	movs	r2, #72	@ 0x48
 8017936:	2400      	movs	r4, #0
 8017938:	f00c fe56 	bl	80245e8 <ble_memset>
 801793c:	2010      	movs	r0, #16
 801793e:	63ae      	str	r6, [r5, #56]	@ 0x38
 8017940:	e9c5 4008 	strd	r4, r0, [r5, #32]
 8017944:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8017948:	e9c5 400a 	strd	r4, r0, [r5, #40]	@ 0x28
 801794c:	f247 3018 	movw	r0, #29464	@ 0x7318
 8017950:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8017954:	f885 4031 	strb.w	r4, [r5, #49]	@ 0x31
 8017958:	76ac      	strb	r4, [r5, #26]
 801795a:	f885 4033 	strb.w	r4, [r5, #51]	@ 0x33
 801795e:	f880 4050 	strb.w	r4, [r0, #80]	@ 0x50
 8017962:	f646 5490 	movw	r4, #28048	@ 0x6d90
 8017966:	f2c2 0400 	movt	r4, #8192	@ 0x2000
 801796a:	4620      	mov	r0, r4
 801796c:	2100      	movs	r1, #0
 801796e:	2208      	movs	r2, #8
 8017970:	612f      	str	r7, [r5, #16]
 8017972:	f00c fe39 	bl	80245e8 <ble_memset>
 8017976:	f646 5098 	movw	r0, #28056	@ 0x6d98
 801797a:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801797e:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 8017980:	227f      	movs	r2, #127	@ 0x7f
 8017982:	7122      	strb	r2, [r4, #4]
 8017984:	b129      	cbz	r1, 8017992 <llhwc_reset+0x96>
 8017986:	3058      	adds	r0, #88	@ 0x58
 8017988:	f00a fbd2 	bl	8022130 <os_timer_stop_free>
 801798c:	2000      	movs	r0, #0
 801798e:	f009 f9f1 	bl	8020d74 <llhwc_phy_read_and_stop_ed>
 8017992:	f640 050c 	movw	r5, #2060	@ 0x80c
 8017996:	f6c4 0502 	movt	r5, #18434	@ 0x4802
 801799a:	f008 fc5d 	bl	8020258 <llhwc_phy_set_cfg_time>
 801799e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80179a2:	f8c8 0000 	str.w	r0, [r8]
 80179a6:	f8d8 0000 	ldr.w	r0, [r8]
 80179aa:	f64f 475c 	movw	r7, #64604	@ 0xfc5c
 80179ae:	f040 0001 	orr.w	r0, r0, #1
 80179b2:	f8c8 0000 	str.w	r0, [r8]
 80179b6:	f8d8 0000 	ldr.w	r0, [r8]
 80179ba:	f6cf 77ff 	movt	r7, #65535	@ 0xffff
 80179be:	f040 0002 	orr.w	r0, r0, #2
 80179c2:	f8c8 0000 	str.w	r0, [r8]
 80179c6:	f8d8 0000 	ldr.w	r0, [r8]
 80179ca:	f020 0004 	bic.w	r0, r0, #4
 80179ce:	f8c8 0000 	str.w	r0, [r8]
 80179d2:	f8d8 0000 	ldr.w	r0, [r8]
 80179d6:	f020 0008 	bic.w	r0, r0, #8
 80179da:	f8c8 0000 	str.w	r0, [r8]
 80179de:	f64f 403c 	movw	r0, #64572	@ 0xfc3c
 80179e2:	f6cf 70ff 	movt	r0, #65535	@ 0xffff
 80179e6:	5829      	ldr	r1, [r5, r0]
 80179e8:	f021 0110 	bic.w	r1, r1, #16
 80179ec:	5029      	str	r1, [r5, r0]
 80179ee:	6b68      	ldr	r0, [r5, #52]	@ 0x34
 80179f0:	f440 4000 	orr.w	r0, r0, #32768	@ 0x8000
 80179f4:	6368      	str	r0, [r5, #52]	@ 0x34
 80179f6:	6828      	ldr	r0, [r5, #0]
 80179f8:	f020 5080 	bic.w	r0, r0, #268435456	@ 0x10000000
 80179fc:	6028      	str	r0, [r5, #0]
 80179fe:	6968      	ldr	r0, [r5, #20]
 8017a00:	f440 5000 	orr.w	r0, r0, #8192	@ 0x2000
 8017a04:	6168      	str	r0, [r5, #20]
 8017a06:	59e8      	ldr	r0, [r5, r7]
 8017a08:	f020 0018 	bic.w	r0, r0, #24
 8017a0c:	51e8      	str	r0, [r5, r7]
 8017a0e:	f000 f835 	bl	8017a7c <llhwc_updt_lst_ofsts>
 8017a12:	4604      	mov	r4, r0
 8017a14:	bb38      	cbnz	r0, 8017a66 <llhwc_reset+0x16a>
 8017a16:	2000      	movs	r0, #0
 8017a18:	2400      	movs	r4, #0
 8017a1a:	f000 f891 	bl	8017b40 <llhwc_lst_clr>
 8017a1e:	2001      	movs	r0, #1
 8017a20:	f000 f88e 	bl	8017b40 <llhwc_lst_clr>
 8017a24:	2002      	movs	r0, #2
 8017a26:	f000 f88b 	bl	8017b40 <llhwc_lst_clr>
 8017a2a:	2003      	movs	r0, #3
 8017a2c:	f000 f888 	bl	8017b40 <llhwc_lst_clr>
 8017a30:	2004      	movs	r0, #4
 8017a32:	f000 f885 	bl	8017b40 <llhwc_lst_clr>
 8017a36:	2005      	movs	r0, #5
 8017a38:	f000 f882 	bl	8017b40 <llhwc_lst_clr>
 8017a3c:	59e8      	ldr	r0, [r5, r7]
 8017a3e:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8017a42:	f020 0001 	bic.w	r0, r0, #1
 8017a46:	51e8      	str	r0, [r5, r7]
 8017a48:	f646 503c 	movw	r0, #27964	@ 0x6d3c
 8017a4c:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8017a50:	6004      	str	r4, [r0, #0]
 8017a52:	f646 5044 	movw	r0, #27972	@ 0x6d44
 8017a56:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8017a5a:	8004      	strh	r4, [r0, #0]
 8017a5c:	f240 1004 	movw	r0, #260	@ 0x104
 8017a60:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8017a64:	6001      	str	r1, [r0, #0]
 8017a66:	f8d8 0018 	ldr.w	r0, [r8, #24]
 8017a6a:	f020 4080 	bic.w	r0, r0, #1073741824	@ 0x40000000
 8017a6e:	f8c8 0018 	str.w	r0, [r8, #24]
 8017a72:	f007 ff38 	bl	801f8e6 <os_enable_isr>
 8017a76:	4620      	mov	r0, r4
 8017a78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017a7c <llhwc_updt_lst_ofsts>:
 8017a7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017a7e:	b087      	sub	sp, #28
 8017a80:	f00a ff0a 	bl	8022898 <llhwc_cmn_is_dp_slp_enabled>
 8017a84:	b120      	cbz	r0, 8017a90 <llhwc_updt_lst_ofsts+0x14>
 8017a86:	2043      	movs	r0, #67	@ 0x43
 8017a88:	f007 ff16 	bl	801f8b8 <bsp_debug_gpio_toggle>
 8017a8c:	240c      	movs	r4, #12
 8017a8e:	e054      	b.n	8017b3a <llhwc_updt_lst_ofsts+0xbe>
 8017a90:	201e      	movs	r0, #30
 8017a92:	f8ad 0008 	strh.w	r0, [sp, #8]
 8017a96:	2028      	movs	r0, #40	@ 0x28
 8017a98:	f8ad 000a 	strh.w	r0, [sp, #10]
 8017a9c:	2046      	movs	r0, #70	@ 0x46
 8017a9e:	f8ad 000c 	strh.w	r0, [sp, #12]
 8017aa2:	205a      	movs	r0, #90	@ 0x5a
 8017aa4:	f8ad 000e 	strh.w	r0, [sp, #14]
 8017aa8:	2064      	movs	r0, #100	@ 0x64
 8017aaa:	f8ad 0010 	strh.w	r0, [sp, #16]
 8017aae:	206e      	movs	r0, #110	@ 0x6e
 8017ab0:	f8ad 0012 	strh.w	r0, [sp, #18]
 8017ab4:	2001      	movs	r0, #1
 8017ab6:	f88d 0016 	strb.w	r0, [sp, #22]
 8017aba:	2002      	movs	r0, #2
 8017abc:	f88d 0017 	strb.w	r0, [sp, #23]
 8017ac0:	2003      	movs	r0, #3
 8017ac2:	f88d 0018 	strb.w	r0, [sp, #24]
 8017ac6:	2004      	movs	r0, #4
 8017ac8:	f88d 0019 	strb.w	r0, [sp, #25]
 8017acc:	2005      	movs	r0, #5
 8017ace:	f88d 001a 	strb.w	r0, [sp, #26]
 8017ad2:	2006      	movs	r0, #6
 8017ad4:	2400      	movs	r4, #0
 8017ad6:	f88d 001b 	strb.w	r0, [sp, #27]
 8017ada:	2001      	movs	r0, #1
 8017adc:	2103      	movs	r1, #3
 8017ade:	f8ad 4006 	strh.w	r4, [sp, #6]
 8017ae2:	f88d 4015 	strb.w	r4, [sp, #21]
 8017ae6:	f00c f873 	bl	8023bd0 <llhwc_cmn_control_aclk>
 8017aea:	f641 01c4 	movw	r1, #6340	@ 0x18c4
 8017aee:	2200      	movs	r2, #0
 8017af0:	f10d 0c15 	add.w	ip, sp, #21
 8017af4:	f6c0 0103 	movt	r1, #2051	@ 0x803
 8017af8:	f6c4 0202 	movt	r2, #18434	@ 0x4802
 8017afc:	f10d 0e06 	add.w	lr, sp, #6
 8017b00:	f81c 0004 	ldrb.w	r0, [ip, r4]
 8017b04:	3401      	adds	r4, #1
 8017b06:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 8017b0a:	2c07      	cmp	r4, #7
 8017b0c:	f851 5023 	ldr.w	r5, [r1, r3, lsl #2]
 8017b10:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8017b14:	58ae      	ldr	r6, [r5, r2]
 8017b16:	e9d3 7301 	ldrd	r7, r3, [r3, #4]
 8017b1a:	f83e 0010 	ldrh.w	r0, [lr, r0, lsl #1]
 8017b1e:	ea26 0607 	bic.w	r6, r6, r7
 8017b22:	fa00 f003 	lsl.w	r0, r0, r3
 8017b26:	ea00 0007 	and.w	r0, r0, r7
 8017b2a:	4430      	add	r0, r6
 8017b2c:	50a8      	str	r0, [r5, r2]
 8017b2e:	d1e7      	bne.n	8017b00 <llhwc_updt_lst_ofsts+0x84>
 8017b30:	2000      	movs	r0, #0
 8017b32:	2103      	movs	r1, #3
 8017b34:	2400      	movs	r4, #0
 8017b36:	f00c f84b 	bl	8023bd0 <llhwc_cmn_control_aclk>
 8017b3a:	4620      	mov	r0, r4
 8017b3c:	b007      	add	sp, #28
 8017b3e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08017b40 <llhwc_lst_clr>:
 8017b40:	b580      	push	{r7, lr}
 8017b42:	f641 1118 	movw	r1, #6424	@ 0x1918
 8017b46:	f6c0 0103 	movt	r1, #2051	@ 0x803
 8017b4a:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 8017b4e:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 8017b52:	6851      	ldr	r1, [r2, #4]
 8017b54:	0840      	lsrs	r0, r0, #1
 8017b56:	ebb0 0f51 	cmp.w	r0, r1, lsr #1
 8017b5a:	bf28      	it	cs
 8017b5c:	bd80      	popcs	{r7, pc}
 8017b5e:	f248 1ef8 	movw	lr, #33272	@ 0x81f8
 8017b62:	0849      	lsrs	r1, r1, #1
 8017b64:	f6c4 0e02 	movt	lr, #18434	@ 0x4802
 8017b68:	f04f 0c01 	mov.w	ip, #1
 8017b6c:	281f      	cmp	r0, #31
 8017b6e:	d809      	bhi.n	8017b84 <llhwc_lst_clr+0x44>
 8017b70:	f8de 3000 	ldr.w	r3, [lr]
 8017b74:	fa0c f200 	lsl.w	r2, ip, r0
 8017b78:	ea23 0202 	bic.w	r2, r3, r2
 8017b7c:	f8ce 2000 	str.w	r2, [lr]
 8017b80:	e009      	b.n	8017b96 <llhwc_lst_clr+0x56>
 8017b82:	bf00      	nop
 8017b84:	f8de 2004 	ldr.w	r2, [lr, #4]
 8017b88:	f1a0 0320 	sub.w	r3, r0, #32
 8017b8c:	fa0c f303 	lsl.w	r3, ip, r3
 8017b90:	439a      	bics	r2, r3
 8017b92:	f8ce 2004 	str.w	r2, [lr, #4]
 8017b96:	3001      	adds	r0, #1
 8017b98:	4281      	cmp	r1, r0
 8017b9a:	d1e7      	bne.n	8017b6c <llhwc_lst_clr+0x2c>
 8017b9c:	bd80      	pop	{r7, pc}
	...

08017ba0 <llhwc_get_ch_idx>:
 8017ba0:	b5b0      	push	{r4, r5, r7, lr}
 8017ba2:	f04f 0c00 	mov.w	ip, #0
 8017ba6:	2200      	movs	r2, #0
 8017ba8:	eb01 030c 	add.w	r3, r1, ip
 8017bac:	f893 e008 	ldrb.w	lr, [r3, #8]
 8017bb0:	2300      	movs	r3, #0
 8017bb2:	bf00      	nop
 8017bb4:	fa2e f403 	lsr.w	r4, lr, r3
 8017bb8:	07e4      	lsls	r4, r4, #31
 8017bba:	bf18      	it	ne
 8017bbc:	3201      	addne	r2, #1
 8017bbe:	3301      	adds	r3, #1
 8017bc0:	2b08      	cmp	r3, #8
 8017bc2:	d1f7      	bne.n	8017bb4 <llhwc_get_ch_idx+0x14>
 8017bc4:	f10c 0c01 	add.w	ip, ip, #1
 8017bc8:	f1bc 0f05 	cmp.w	ip, #5
 8017bcc:	d1ec      	bne.n	8017ba8 <llhwc_get_ch_idx+0x8>
 8017bce:	7803      	ldrb	r3, [r0, #0]
 8017bd0:	7884      	ldrb	r4, [r0, #2]
 8017bd2:	4423      	add	r3, r4
 8017bd4:	f641 34ad 	movw	r4, #7085	@ 0x1bad
 8017bd8:	fb03 f404 	mul.w	r4, r3, r4
 8017bdc:	ea4f 4c94 	mov.w	ip, r4, lsr #18
 8017be0:	2425      	movs	r4, #37	@ 0x25
 8017be2:	fb0c 3314 	mls	r3, ip, r4, r3
 8017be6:	b29c      	uxth	r4, r3
 8017be8:	7003      	strb	r3, [r0, #0]
 8017bea:	eb01 04d4 	add.w	r4, r1, r4, lsr #3
 8017bee:	7043      	strb	r3, [r0, #1]
 8017bf0:	f894 c008 	ldrb.w	ip, [r4, #8]
 8017bf4:	f003 0407 	and.w	r4, r3, #7
 8017bf8:	fa2c f404 	lsr.w	r4, ip, r4
 8017bfc:	07e4      	lsls	r4, r4, #31
 8017bfe:	d12b      	bne.n	8017c58 <llhwc_get_ch_idx+0xb8>
 8017c00:	b2db      	uxtb	r3, r3
 8017c02:	b2d2      	uxtb	r2, r2
 8017c04:	fbb3 f4f2 	udiv	r4, r3, r2
 8017c08:	f04f 0c00 	mov.w	ip, #0
 8017c0c:	fb04 3212 	mls	r2, r4, r2, r3
 8017c10:	2300      	movs	r3, #0
 8017c12:	7042      	strb	r2, [r0, #1]
 8017c14:	3201      	adds	r2, #1
 8017c16:	fa5f fe82 	uxtb.w	lr, r2
 8017c1a:	eb01 020c 	add.w	r2, r1, ip
 8017c1e:	7a14      	ldrb	r4, [r2, #8]
 8017c20:	2200      	movs	r2, #0
 8017c22:	bf00      	nop
 8017c24:	fa24 f502 	lsr.w	r5, r4, r2
 8017c28:	07ed      	lsls	r5, r5, #31
 8017c2a:	bf18      	it	ne
 8017c2c:	3301      	addne	r3, #1
 8017c2e:	b2dd      	uxtb	r5, r3
 8017c30:	45ae      	cmp	lr, r5
 8017c32:	d00a      	beq.n	8017c4a <llhwc_get_ch_idx+0xaa>
 8017c34:	3201      	adds	r2, #1
 8017c36:	2a08      	cmp	r2, #8
 8017c38:	d1f4      	bne.n	8017c24 <llhwc_get_ch_idx+0x84>
 8017c3a:	f10c 0401 	add.w	r4, ip, #1
 8017c3e:	f1bc 0f04 	cmp.w	ip, #4
 8017c42:	46a4      	mov	ip, r4
 8017c44:	d3e9      	bcc.n	8017c1a <llhwc_get_ch_idx+0x7a>
 8017c46:	2208      	movs	r2, #8
 8017c48:	e001      	b.n	8017c4e <llhwc_get_ch_idx+0xae>
 8017c4a:	f10c 0401 	add.w	r4, ip, #1
 8017c4e:	eb02 01c4 	add.w	r1, r2, r4, lsl #3
 8017c52:	f1a1 0308 	sub.w	r3, r1, #8
 8017c56:	7043      	strb	r3, [r0, #1]
 8017c58:	b2d8      	uxtb	r0, r3
 8017c5a:	bdb0      	pop	{r4, r5, r7, pc}

08017c5c <llhwc_get_ch_idx_algo_2>:
 8017c5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017c60:	b084      	sub	sp, #16
 8017c62:	4606      	mov	r6, r0
 8017c64:	f640 0754 	movw	r7, #2132	@ 0x854
 8017c68:	20a7      	movs	r0, #167	@ 0xa7
 8017c6a:	4690      	mov	r8, r2
 8017c6c:	460d      	mov	r5, r1
 8017c6e:	f6c4 0702 	movt	r7, #18434	@ 0x4802
 8017c72:	f007 fe1d 	bl	801f8b0 <bsp_debug_gpio_set>
 8017c76:	2001      	movs	r0, #1
 8017c78:	2104      	movs	r1, #4
 8017c7a:	2401      	movs	r4, #1
 8017c7c:	f00b ffa8 	bl	8023bd0 <llhwc_cmn_control_aclk>
 8017c80:	f64f 402c 	movw	r0, #64556	@ 0xfc2c
 8017c84:	f6cf 70ff 	movt	r0, #65535	@ 0xffff
 8017c88:	5839      	ldr	r1, [r7, r0]
 8017c8a:	2205      	movs	r2, #5
 8017c8c:	f364 0102 	bfi	r1, r4, #0, #3
 8017c90:	5039      	str	r1, [r7, r0]
 8017c92:	f106 0108 	add.w	r1, r6, #8
 8017c96:	a802      	add	r0, sp, #8
 8017c98:	f00c fc56 	bl	8024548 <ble_memcpy>
 8017c9c:	9802      	ldr	r0, [sp, #8]
 8017c9e:	2202      	movs	r2, #2
 8017ca0:	60f8      	str	r0, [r7, #12]
 8017ca2:	68b8      	ldr	r0, [r7, #8]
 8017ca4:	9903      	ldr	r1, [sp, #12]
 8017ca6:	0940      	lsrs	r0, r0, #5
 8017ca8:	f360 115f 	bfi	r1, r0, #5, #27
 8017cac:	60b9      	str	r1, [r7, #8]
 8017cae:	6870      	ldr	r0, [r6, #4]
 8017cb0:	2600      	movs	r6, #0
 8017cb2:	6038      	str	r0, [r7, #0]
 8017cb4:	68b8      	ldr	r0, [r7, #8]
 8017cb6:	f640 0174 	movw	r1, #2164	@ 0x874
 8017cba:	f36f 1054 	bfc	r0, #5, #16
 8017cbe:	ea40 1045 	orr.w	r0, r0, r5, lsl #5
 8017cc2:	2301      	movs	r3, #1
 8017cc4:	60b8      	str	r0, [r7, #8]
 8017cc6:	6878      	ldr	r0, [r7, #4]
 8017cc8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8017ccc:	6078      	str	r0, [r7, #4]
 8017cce:	69b8      	ldr	r0, [r7, #24]
 8017cd0:	f040 0001 	orr.w	r0, r0, #1
 8017cd4:	61b8      	str	r0, [r7, #24]
 8017cd6:	20c8      	movs	r0, #200	@ 0xc8
 8017cd8:	9600      	str	r6, [sp, #0]
 8017cda:	f00b f821 	bl	8022d20 <llhwc_polling>
 8017cde:	4605      	mov	r5, r0
 8017ce0:	b980      	cbnz	r0, 8017d04 <llhwc_get_ch_idx_algo_2+0xa8>
 8017ce2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8017ce4:	f040 0002 	orr.w	r0, r0, #2
 8017ce8:	6278      	str	r0, [r7, #36]	@ 0x24
 8017cea:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8017cec:	f020 0002 	bic.w	r0, r0, #2
 8017cf0:	6278      	str	r0, [r7, #36]	@ 0x24
 8017cf2:	69b8      	ldr	r0, [r7, #24]
 8017cf4:	f020 0001 	bic.w	r0, r0, #1
 8017cf8:	61b8      	str	r0, [r7, #24]
 8017cfa:	6878      	ldr	r0, [r7, #4]
 8017cfc:	f3c0 20c5 	ubfx	r0, r0, #11, #6
 8017d00:	f888 0000 	strb.w	r0, [r8]
 8017d04:	2000      	movs	r0, #0
 8017d06:	2104      	movs	r1, #4
 8017d08:	f00b ff62 	bl	8023bd0 <llhwc_cmn_control_aclk>
 8017d0c:	20a7      	movs	r0, #167	@ 0xa7
 8017d0e:	f007 fdd1 	bl	801f8b4 <bsp_debug_gpio_clear>
 8017d12:	4628      	mov	r0, r5
 8017d14:	b004      	add	sp, #16
 8017d16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017d1a <llhwc_lst_search>:
 8017d1a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017d1e:	b087      	sub	sp, #28
 8017d20:	f247 3518 	movw	r5, #29464	@ 0x7318
 8017d24:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 8017d28:	8fac      	ldrh	r4, [r5, #60]	@ 0x3c
 8017d2a:	8f6e      	ldrh	r6, [r5, #58]	@ 0x3a
 8017d2c:	4699      	mov	r9, r3
 8017d2e:	4617      	mov	r7, r2
 8017d30:	468b      	mov	fp, r1
 8017d32:	4682      	mov	sl, r0
 8017d34:	f007 fdd5 	bl	801f8e2 <os_disable_isr>
 8017d38:	f00a fdae 	bl	8022898 <llhwc_cmn_is_dp_slp_enabled>
 8017d3c:	b120      	cbz	r0, 8017d48 <llhwc_lst_search+0x2e>
 8017d3e:	2043      	movs	r0, #67	@ 0x43
 8017d40:	f007 fdba 	bl	801f8b8 <bsp_debug_gpio_toggle>
 8017d44:	240c      	movs	r4, #12
 8017d46:	e084      	b.n	8017e52 <llhwc_lst_search+0x138>
 8017d48:	f00b fbb4 	bl	80234b4 <get_pwr_domain>
 8017d4c:	4680      	mov	r8, r0
 8017d4e:	2805      	cmp	r0, #5
 8017d50:	d107      	bne.n	8017d62 <llhwc_lst_search+0x48>
 8017d52:	f00b fc2b 	bl	80235ac <llhwc_wait_for_evnt_on_air>
 8017d56:	fab0 f080 	clz	r0, r0
 8017d5a:	0940      	lsrs	r0, r0, #5
 8017d5c:	2101      	movs	r1, #1
 8017d5e:	f007 fd60 	bl	801f822 <bsp_assert>
 8017d62:	f895 0038 	ldrb.w	r0, [r5, #56]	@ 0x38
 8017d66:	2804      	cmp	r0, #4
 8017d68:	d117      	bne.n	8017d9a <llhwc_lst_search+0x80>
 8017d6a:	ea46 4004 	orr.w	r0, r6, r4, lsl #16
 8017d6e:	ae02      	add	r6, sp, #8
 8017d70:	f10d 021b 	add.w	r2, sp, #27
 8017d74:	f10d 031a 	add.w	r3, sp, #26
 8017d78:	2101      	movs	r1, #1
 8017d7a:	9600      	str	r6, [sp, #0]
 8017d7c:	f00b fbb2 	bl	80234e4 <llhwc_cmn_set_phy>
 8017d80:	f89d 001b 	ldrb.w	r0, [sp, #27]
 8017d84:	f89d 101a 	ldrb.w	r1, [sp, #26]
 8017d88:	f000 000f 	and.w	r0, r0, #15
 8017d8c:	ea40 1001 	orr.w	r0, r0, r1, lsl #4
 8017d90:	f247 31d0 	movw	r1, #29648	@ 0x73d0
 8017d94:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8017d98:	7448      	strb	r0, [r1, #17]
 8017d9a:	2002      	movs	r0, #2
 8017d9c:	f00a fd50 	bl	8022840 <llhwc_pwr_switch>
 8017da0:	4604      	mov	r4, r0
 8017da2:	2800      	cmp	r0, #0
 8017da4:	d155      	bne.n	8017e52 <llhwc_lst_search+0x138>
 8017da6:	f7ff fe69 	bl	8017a7c <llhwc_updt_lst_ofsts>
 8017daa:	4604      	mov	r4, r0
 8017dac:	2800      	cmp	r0, #0
 8017dae:	d150      	bne.n	8017e52 <llhwc_lst_search+0x138>
 8017db0:	f640 0540 	movw	r5, #2112	@ 0x840
 8017db4:	2001      	movs	r0, #1
 8017db6:	2103      	movs	r1, #3
 8017db8:	f6c4 0502 	movt	r5, #18434	@ 0x4802
 8017dbc:	f00b ff08 	bl	8023bd0 <llhwc_cmn_control_aclk>
 8017dc0:	f855 0c08 	ldr.w	r0, [r5, #-8]
 8017dc4:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8017dc8:	f36a 0002 	bfi	r0, sl, #0, #3
 8017dcc:	f845 0c08 	str.w	r0, [r5, #-8]
 8017dd0:	68e8      	ldr	r0, [r5, #12]
 8017dd2:	797a      	ldrb	r2, [r7, #5]
 8017dd4:	4388      	bics	r0, r1
 8017dd6:	7939      	ldrb	r1, [r7, #4]
 8017dd8:	2300      	movs	r3, #0
 8017dda:	4408      	add	r0, r1
 8017ddc:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 8017de0:	60e8      	str	r0, [r5, #12]
 8017de2:	7838      	ldrb	r0, [r7, #0]
 8017de4:	7879      	ldrb	r1, [r7, #1]
 8017de6:	78ba      	ldrb	r2, [r7, #2]
 8017de8:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
 8017dec:	78f9      	ldrb	r1, [r7, #3]
 8017dee:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8017df2:	2700      	movs	r7, #0
 8017df4:	ea40 6001 	orr.w	r0, r0, r1, lsl #24
 8017df8:	f640 0174 	movw	r1, #2164	@ 0x874
 8017dfc:	6128      	str	r0, [r5, #16]
 8017dfe:	68e8      	ldr	r0, [r5, #12]
 8017e00:	2201      	movs	r2, #1
 8017e02:	f36b 4010 	bfi	r0, fp, #16, #1
 8017e06:	60e8      	str	r0, [r5, #12]
 8017e08:	6828      	ldr	r0, [r5, #0]
 8017e0a:	f040 0080 	orr.w	r0, r0, #128	@ 0x80
 8017e0e:	6028      	str	r0, [r5, #0]
 8017e10:	20c8      	movs	r0, #200	@ 0xc8
 8017e12:	9700      	str	r7, [sp, #0]
 8017e14:	f00a ff84 	bl	8022d20 <llhwc_polling>
 8017e18:	b9b0      	cbnz	r0, 8017e48 <llhwc_lst_search+0x12e>
 8017e1a:	f1b9 0f00 	cmp.w	r9, #0
 8017e1e:	d004      	beq.n	8017e2a <llhwc_lst_search+0x110>
 8017e20:	6828      	ldr	r0, [r5, #0]
 8017e22:	f3c0 2006 	ubfx	r0, r0, #8, #7
 8017e26:	f889 0000 	strb.w	r0, [r9]
 8017e2a:	6828      	ldr	r0, [r5, #0]
 8017e2c:	f020 0080 	bic.w	r0, r0, #128	@ 0x80
 8017e30:	6028      	str	r0, [r5, #0]
 8017e32:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 8017e34:	f040 0001 	orr.w	r0, r0, #1
 8017e38:	63a8      	str	r0, [r5, #56]	@ 0x38
 8017e3a:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 8017e3c:	f020 0001 	bic.w	r0, r0, #1
 8017e40:	63a8      	str	r0, [r5, #56]	@ 0x38
 8017e42:	4640      	mov	r0, r8
 8017e44:	f00a fcfc 	bl	8022840 <llhwc_pwr_switch>
 8017e48:	4604      	mov	r4, r0
 8017e4a:	2000      	movs	r0, #0
 8017e4c:	2103      	movs	r1, #3
 8017e4e:	f00b febf 	bl	8023bd0 <llhwc_cmn_control_aclk>
 8017e52:	f007 fd48 	bl	801f8e6 <os_enable_isr>
 8017e56:	4620      	mov	r0, r4
 8017e58:	b007      	add	sp, #28
 8017e5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08017e60 <llhwc_lst_add_rmv_dev>:
 8017e60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017e64:	b087      	sub	sp, #28
 8017e66:	469a      	mov	sl, r3
 8017e68:	4693      	mov	fp, r2
 8017e6a:	460e      	mov	r6, r1
 8017e6c:	b1b8      	cbz	r0, 8017e9e <llhwc_lst_add_rmv_dev+0x3e>
 8017e6e:	f248 19b4 	movw	r9, #33204	@ 0x81b4
 8017e72:	f247 3518 	movw	r5, #29464	@ 0x7318
 8017e76:	f2c2 0900 	movt	r9, #8192	@ 0x2000
 8017e7a:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 8017e7e:	f8d9 0000 	ldr.w	r0, [r9]
 8017e82:	8faf      	ldrh	r7, [r5, #60]	@ 0x3c
 8017e84:	8f6c      	ldrh	r4, [r5, #58]	@ 0x3a
 8017e86:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8017e8a:	f007 fd2e 	bl	801f8ea <os_rcrsv_mutex_wait>
 8017e8e:	f00a fd03 	bl	8022898 <llhwc_cmn_is_dp_slp_enabled>
 8017e92:	b370      	cbz	r0, 8017ef2 <llhwc_lst_add_rmv_dev+0x92>
 8017e94:	2043      	movs	r0, #67	@ 0x43
 8017e96:	f007 fd0f 	bl	801f8b8 <bsp_debug_gpio_toggle>
 8017e9a:	270c      	movs	r7, #12
 8017e9c:	e0b2      	b.n	8018004 <llhwc_lst_add_rmv_dev+0x1a4>
 8017e9e:	f641 1118 	movw	r1, #6424	@ 0x1918
 8017ea2:	f6c0 0103 	movt	r1, #2051	@ 0x803
 8017ea6:	eb01 0286 	add.w	r2, r1, r6, lsl #2
 8017eaa:	f851 1026 	ldr.w	r1, [r1, r6, lsl #2]
 8017eae:	f248 0c00 	movw	ip, #32768	@ 0x8000
 8017eb2:	6852      	ldr	r2, [r2, #4]
 8017eb4:	f6c4 0c02 	movt	ip, #18434	@ 0x4802
 8017eb8:	0849      	lsrs	r1, r1, #1
 8017eba:	f8dc 31f8 	ldr.w	r3, [ip, #504]	@ 0x1f8
 8017ebe:	ebb1 0f52 	cmp.w	r1, r2, lsr #1
 8017ec2:	f8dc 01fc 	ldr.w	r0, [ip, #508]	@ 0x1fc
 8017ec6:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8017eca:	f080 80ab 	bcs.w	8018024 <llhwc_lst_add_rmv_dev+0x1c4>
 8017ece:	2501      	movs	r5, #1
 8017ed0:	f1b1 0420 	subs.w	r4, r1, #32
 8017ed4:	4607      	mov	r7, r0
 8017ed6:	bf3c      	itt	cc
 8017ed8:	461f      	movcc	r7, r3
 8017eda:	460c      	movcc	r4, r1
 8017edc:	fa05 f404 	lsl.w	r4, r5, r4
 8017ee0:	ea67 0704 	orn	r7, r7, r4
 8017ee4:	3701      	adds	r7, #1
 8017ee6:	f040 8092 	bne.w	801800e <llhwc_lst_add_rmv_dev+0x1ae>
 8017eea:	3101      	adds	r1, #1
 8017eec:	428a      	cmp	r2, r1
 8017eee:	d1ef      	bne.n	8017ed0 <llhwc_lst_add_rmv_dev+0x70>
 8017ef0:	e09a      	b.n	8018028 <llhwc_lst_add_rmv_dev+0x1c8>
 8017ef2:	f00b fb5b 	bl	80235ac <llhwc_wait_for_evnt_on_air>
 8017ef6:	fab0 f080 	clz	r0, r0
 8017efa:	0940      	lsrs	r0, r0, #5
 8017efc:	2101      	movs	r1, #1
 8017efe:	f007 fc90 	bl	801f822 <bsp_assert>
 8017f02:	f00b fad7 	bl	80234b4 <get_pwr_domain>
 8017f06:	4680      	mov	r8, r0
 8017f08:	2805      	cmp	r0, #5
 8017f0a:	d107      	bne.n	8017f1c <llhwc_lst_add_rmv_dev+0xbc>
 8017f0c:	f00b fb4e 	bl	80235ac <llhwc_wait_for_evnt_on_air>
 8017f10:	fab0 f080 	clz	r0, r0
 8017f14:	0940      	lsrs	r0, r0, #5
 8017f16:	2101      	movs	r1, #1
 8017f18:	f007 fc83 	bl	801f822 <bsp_assert>
 8017f1c:	f895 0038 	ldrb.w	r0, [r5, #56]	@ 0x38
 8017f20:	2804      	cmp	r0, #4
 8017f22:	d117      	bne.n	8017f54 <llhwc_lst_add_rmv_dev+0xf4>
 8017f24:	ea44 4007 	orr.w	r0, r4, r7, lsl #16
 8017f28:	af02      	add	r7, sp, #8
 8017f2a:	f10d 021b 	add.w	r2, sp, #27
 8017f2e:	f10d 031a 	add.w	r3, sp, #26
 8017f32:	2101      	movs	r1, #1
 8017f34:	9700      	str	r7, [sp, #0]
 8017f36:	f00b fad5 	bl	80234e4 <llhwc_cmn_set_phy>
 8017f3a:	f89d 001b 	ldrb.w	r0, [sp, #27]
 8017f3e:	f89d 101a 	ldrb.w	r1, [sp, #26]
 8017f42:	f000 000f 	and.w	r0, r0, #15
 8017f46:	ea40 1001 	orr.w	r0, r0, r1, lsl #4
 8017f4a:	f247 31d0 	movw	r1, #29648	@ 0x73d0
 8017f4e:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8017f52:	7448      	strb	r0, [r1, #17]
 8017f54:	2002      	movs	r0, #2
 8017f56:	f00a fc73 	bl	8022840 <llhwc_pwr_switch>
 8017f5a:	4607      	mov	r7, r0
 8017f5c:	2800      	cmp	r0, #0
 8017f5e:	d151      	bne.n	8018004 <llhwc_lst_add_rmv_dev+0x1a4>
 8017f60:	f7ff fd8c 	bl	8017a7c <llhwc_updt_lst_ofsts>
 8017f64:	4607      	mov	r7, r0
 8017f66:	2800      	cmp	r0, #0
 8017f68:	d14c      	bne.n	8018004 <llhwc_lst_add_rmv_dev+0x1a4>
 8017f6a:	f640 0438 	movw	r4, #2104	@ 0x838
 8017f6e:	2001      	movs	r0, #1
 8017f70:	2103      	movs	r1, #3
 8017f72:	f6c4 0402 	movt	r4, #18434	@ 0x4802
 8017f76:	f00b fe2b 	bl	8023bd0 <llhwc_cmn_control_aclk>
 8017f7a:	6820      	ldr	r0, [r4, #0]
 8017f7c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8017f80:	f366 0002 	bfi	r0, r6, #0, #3
 8017f84:	6020      	str	r0, [r4, #0]
 8017f86:	6960      	ldr	r0, [r4, #20]
 8017f88:	f89a 2005 	ldrb.w	r2, [sl, #5]
 8017f8c:	4388      	bics	r0, r1
 8017f8e:	f89a 1004 	ldrb.w	r1, [sl, #4]
 8017f92:	2700      	movs	r7, #0
 8017f94:	4408      	add	r0, r1
 8017f96:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 8017f9a:	2300      	movs	r3, #0
 8017f9c:	6160      	str	r0, [r4, #20]
 8017f9e:	f89a 0000 	ldrb.w	r0, [sl]
 8017fa2:	f89a 1001 	ldrb.w	r1, [sl, #1]
 8017fa6:	f89a 2002 	ldrb.w	r2, [sl, #2]
 8017faa:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
 8017fae:	f89a 1003 	ldrb.w	r1, [sl, #3]
 8017fb2:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8017fb6:	2201      	movs	r2, #1
 8017fb8:	ea40 6001 	orr.w	r0, r0, r1, lsl #24
 8017fbc:	f640 0174 	movw	r1, #2164	@ 0x874
 8017fc0:	61a0      	str	r0, [r4, #24]
 8017fc2:	6960      	ldr	r0, [r4, #20]
 8017fc4:	f36b 4010 	bfi	r0, fp, #16, #1
 8017fc8:	6160      	str	r0, [r4, #20]
 8017fca:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8017fcc:	f040 0002 	orr.w	r0, r0, #2
 8017fd0:	6360      	str	r0, [r4, #52]	@ 0x34
 8017fd2:	20c8      	movs	r0, #200	@ 0xc8
 8017fd4:	9700      	str	r7, [sp, #0]
 8017fd6:	f00a fea3 	bl	8022d20 <llhwc_polling>
 8017fda:	b970      	cbnz	r0, 8017ffa <llhwc_lst_add_rmv_dev+0x19a>
 8017fdc:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8017fde:	f040 0001 	orr.w	r0, r0, #1
 8017fe2:	6420      	str	r0, [r4, #64]	@ 0x40
 8017fe4:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8017fe6:	f020 0001 	bic.w	r0, r0, #1
 8017fea:	6420      	str	r0, [r4, #64]	@ 0x40
 8017fec:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8017fee:	f020 0002 	bic.w	r0, r0, #2
 8017ff2:	6360      	str	r0, [r4, #52]	@ 0x34
 8017ff4:	4640      	mov	r0, r8
 8017ff6:	f00a fc23 	bl	8022840 <llhwc_pwr_switch>
 8017ffa:	4607      	mov	r7, r0
 8017ffc:	2000      	movs	r0, #0
 8017ffe:	2103      	movs	r1, #3
 8018000:	f00b fde6 	bl	8023bd0 <llhwc_cmn_control_aclk>
 8018004:	f8d9 0000 	ldr.w	r0, [r9]
 8018008:	f007 fc75 	bl	801f8f6 <os_rcrsv_mutex_release>
 801800c:	e03b      	b.n	8018086 <llhwc_lst_add_rmv_dev+0x226>
 801800e:	f44f 70fe 	mov.w	r0, #508	@ 0x1fc
 8018012:	2920      	cmp	r1, #32
 8018014:	bf38      	it	cc
 8018016:	f44f 70fc 	movcc.w	r0, #504	@ 0x1f8
 801801a:	f85c 3000 	ldr.w	r3, [ip, r0]
 801801e:	4323      	orrs	r3, r4
 8018020:	f84c 3000 	str.w	r3, [ip, r0]
 8018024:	4291      	cmp	r1, r2
 8018026:	d104      	bne.n	8018032 <llhwc_lst_add_rmv_dev+0x1d2>
 8018028:	2042      	movs	r0, #66	@ 0x42
 801802a:	f007 fc45 	bl	801f8b8 <bsp_debug_gpio_toggle>
 801802e:	2707      	movs	r7, #7
 8018030:	e029      	b.n	8018086 <llhwc_lst_add_rmv_dev+0x226>
 8018032:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8018034:	2e06      	cmp	r6, #6
 8018036:	d100      	bne.n	801803a <llhwc_lst_add_rmv_dev+0x1da>
 8018038:	b91a      	cbnz	r2, 8018042 <llhwc_lst_add_rmv_dev+0x1e2>
 801803a:	1ef0      	subs	r0, r6, #3
 801803c:	2801      	cmp	r0, #1
 801803e:	d802      	bhi.n	8018046 <llhwc_lst_add_rmv_dev+0x1e6>
 8018040:	b10a      	cbz	r2, 8018046 <llhwc_lst_add_rmv_dev+0x1e6>
 8018042:	0048      	lsls	r0, r1, #1
 8018044:	7010      	strb	r0, [r2, #0]
 8018046:	f89a 0000 	ldrb.w	r0, [sl]
 801804a:	f89a 2001 	ldrb.w	r2, [sl, #1]
 801804e:	f89a 3002 	ldrb.w	r3, [sl, #2]
 8018052:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 8018056:	f89a 2003 	ldrb.w	r2, [sl, #3]
 801805a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 801805e:	f1bb 0f01 	cmp.w	fp, #1
 8018062:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 8018066:	f04f 0700 	mov.w	r7, #0
 801806a:	f84c 0031 	str.w	r0, [ip, r1, lsl #3]
 801806e:	f89a 0004 	ldrb.w	r0, [sl, #4]
 8018072:	f89a 2005 	ldrb.w	r2, [sl, #5]
 8018076:	eb0c 01c1 	add.w	r1, ip, r1, lsl #3
 801807a:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 801807e:	bf08      	it	eq
 8018080:	f500 3080 	addeq.w	r0, r0, #65536	@ 0x10000
 8018084:	6048      	str	r0, [r1, #4]
 8018086:	4638      	mov	r0, r7
 8018088:	b007      	add	sp, #28
 801808a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801808e <llhwc_lst_rmv_rand_add>:
 801808e:	b570      	push	{r4, r5, r6, lr}
 8018090:	b082      	sub	sp, #8
 8018092:	460e      	mov	r6, r1
 8018094:	4605      	mov	r5, r0
 8018096:	a801      	add	r0, sp, #4
 8018098:	2101      	movs	r1, #1
 801809a:	f007 fbe0 	bl	801f85e <gen_rnd_num>
 801809e:	2d02      	cmp	r5, #2
 80180a0:	d011      	beq.n	80180c6 <llhwc_lst_rmv_rand_add+0x38>
 80180a2:	2d03      	cmp	r5, #3
 80180a4:	d01e      	beq.n	80180e4 <llhwc_lst_rmv_rand_add+0x56>
 80180a6:	2d04      	cmp	r5, #4
 80180a8:	d12c      	bne.n	8018104 <llhwc_lst_rmv_rand_add+0x76>
 80180aa:	9801      	ldr	r0, [sp, #4]
 80180ac:	f64c 41cd 	movw	r1, #52429	@ 0xcccd
 80180b0:	f6cc 41cc 	movt	r1, #52428	@ 0xcccc
 80180b4:	fba0 1201 	umull	r1, r2, r0, r1
 80180b8:	0891      	lsrs	r1, r2, #2
 80180ba:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80180be:	1a40      	subs	r0, r0, r1
 80180c0:	f100 012d 	add.w	r1, r0, #45	@ 0x2d
 80180c4:	e01c      	b.n	8018100 <llhwc_lst_rmv_rand_add+0x72>
 80180c6:	9801      	ldr	r0, [sp, #4]
 80180c8:	f648 0189 	movw	r1, #34953	@ 0x8889
 80180cc:	f6c8 0188 	movt	r1, #34952	@ 0x8888
 80180d0:	fba0 1201 	umull	r1, r2, r0, r1
 80180d4:	08d1      	lsrs	r1, r2, #3
 80180d6:	0109      	lsls	r1, r1, #4
 80180d8:	eba1 01d2 	sub.w	r1, r1, r2, lsr #3
 80180dc:	1a40      	subs	r0, r0, r1
 80180de:	f100 0114 	add.w	r1, r0, #20
 80180e2:	e00d      	b.n	8018100 <llhwc_lst_rmv_rand_add+0x72>
 80180e4:	9801      	ldr	r0, [sp, #4]
 80180e6:	f64c 41cd 	movw	r1, #52429	@ 0xcccd
 80180ea:	f6cc 41cc 	movt	r1, #52428	@ 0xcccc
 80180ee:	fba0 1201 	umull	r1, r2, r0, r1
 80180f2:	08d1      	lsrs	r1, r2, #3
 80180f4:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80180f8:	eba0 0041 	sub.w	r0, r0, r1, lsl #1
 80180fc:	f100 0123 	add.w	r1, r0, #35	@ 0x23
 8018100:	2000      	movs	r0, #0
 8018102:	e001      	b.n	8018108 <llhwc_lst_rmv_rand_add+0x7a>
 8018104:	9901      	ldr	r1, [sp, #4]
 8018106:	201f      	movs	r0, #31
 8018108:	f248 13f8 	movw	r3, #33272	@ 0x81f8
 801810c:	f6c4 0302 	movt	r3, #18434	@ 0x4802
 8018110:	f011 02e0 	ands.w	r2, r1, #224	@ 0xe0
 8018114:	f103 0304 	add.w	r3, r3, #4
 8018118:	ea4f 0241 	mov.w	r2, r1, lsl #1
 801811c:	bf12      	itee	ne
 801811e:	31e0      	addne	r1, #224	@ 0xe0
 8018120:	f248 13f8 	movweq	r3, #33272	@ 0x81f8
 8018124:	f6c4 0302 	movteq	r3, #18434	@ 0x4802
 8018128:	681d      	ldr	r5, [r3, #0]
 801812a:	b2c9      	uxtb	r1, r1
 801812c:	2401      	movs	r4, #1
 801812e:	fa04 f101 	lsl.w	r1, r4, r1
 8018132:	ea25 0101 	bic.w	r1, r5, r1
 8018136:	6019      	str	r1, [r3, #0]
 8018138:	6032      	str	r2, [r6, #0]
 801813a:	b002      	add	sp, #8
 801813c:	bd70      	pop	{r4, r5, r6, pc}

0801813e <llhwc_gen_rnd_num>:
 801813e:	b580      	push	{r7, lr}
 8018140:	f007 fb8d 	bl	801f85e <gen_rnd_num>
 8018144:	2000      	movs	r0, #0
 8018146:	bd80      	pop	{r7, pc}

08018148 <llhwc_lst_rmv_by_loc>:
 8018148:	f248 12f8 	movw	r2, #33272	@ 0x81f8
 801814c:	f6c4 0202 	movt	r2, #18434	@ 0x4802
 8018150:	f1b0 0120 	subs.w	r1, r0, #32
 8018154:	f102 0204 	add.w	r2, r2, #4
 8018158:	bf3e      	ittt	cc
 801815a:	4601      	movcc	r1, r0
 801815c:	f248 12f8 	movwcc	r2, #33272	@ 0x81f8
 8018160:	f6c4 0202 	movtcc	r2, #18434	@ 0x4802
 8018164:	6810      	ldr	r0, [r2, #0]
 8018166:	b2c9      	uxtb	r1, r1
 8018168:	2301      	movs	r3, #1
 801816a:	fa03 f101 	lsl.w	r1, r3, r1
 801816e:	4388      	bics	r0, r1
 8018170:	6010      	str	r0, [r2, #0]
 8018172:	4770      	bx	lr

08018174 <llhwc_lst_read_indicators>:
 8018174:	f248 0104 	movw	r1, #32772	@ 0x8004
 8018178:	f6c4 0102 	movt	r1, #18434	@ 0x4802
 801817c:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 8018180:	f3c0 4043 	ubfx	r0, r0, #17, #4
 8018184:	4770      	bx	lr

08018186 <llhwc_lst_edit_indicators>:
 8018186:	b5b0      	push	{r4, r5, r7, lr}
 8018188:	f248 0c04 	movw	ip, #32772	@ 0x8004
 801818c:	f6c4 0c02 	movt	ip, #18434	@ 0x4802
 8018190:	f85c e021 	ldr.w	lr, [ip, r1, lsl #2]
 8018194:	f1c0 0313 	rsb	r3, r0, #19
 8018198:	2401      	movs	r4, #1
 801819a:	fa04 f503 	lsl.w	r5, r4, r3
 801819e:	4394      	bics	r4, r2
 80181a0:	ea2e 0505 	bic.w	r5, lr, r5
 80181a4:	fa04 f303 	lsl.w	r3, r4, r3
 80181a8:	432b      	orrs	r3, r5
 80181aa:	2806      	cmp	r0, #6
 80181ac:	f84c 3021 	str.w	r3, [ip, r1, lsl #2]
 80181b0:	bf18      	it	ne
 80181b2:	bdb0      	popne	{r4, r5, r7, pc}
 80181b4:	f85c 0021 	ldr.w	r0, [ip, r1, lsl #2]
 80181b8:	43d2      	mvns	r2, r2
 80181ba:	f362 5014 	bfi	r0, r2, #20, #1
 80181be:	f84c 0021 	str.w	r0, [ip, r1, lsl #2]
 80181c2:	bdb0      	pop	{r4, r5, r7, pc}

080181c4 <llhwc_init>:
 80181c4:	b5b0      	push	{r4, r5, r7, lr}
 80181c6:	f247 41a9 	movw	r1, #29865	@ 0x74a9
 80181ca:	f6c0 0101 	movt	r1, #2049	@ 0x801
 80181ce:	2001      	movs	r0, #1
 80181d0:	2501      	movs	r5, #1
 80181d2:	f00b f976 	bl	80234c2 <llhwc_cmn_reg_isr>
 80181d6:	f247 7155 	movw	r1, #30549	@ 0x7755
 80181da:	f6c0 0101 	movt	r1, #2049	@ 0x801
 80181de:	2002      	movs	r0, #2
 80181e0:	f00b f96f 	bl	80234c2 <llhwc_cmn_reg_isr>
 80181e4:	f646 5048 	movw	r0, #27976	@ 0x6d48
 80181e8:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80181ec:	2100      	movs	r1, #0
 80181ee:	6381      	str	r1, [r0, #56]	@ 0x38
 80181f0:	87c1      	strh	r1, [r0, #62]	@ 0x3e
 80181f2:	6401      	str	r1, [r0, #64]	@ 0x40
 80181f4:	f7ff fb82 	bl	80178fc <llhwc_reset>
 80181f8:	f247 3159 	movw	r1, #29529	@ 0x7359
 80181fc:	4604      	mov	r4, r0
 80181fe:	f6c0 0101 	movt	r1, #2049	@ 0x801
 8018202:	2000      	movs	r0, #0
 8018204:	f00b f9c3 	bl	802358e <llhwc_rgstr_func>
 8018208:	f248 212f 	movw	r1, #33327	@ 0x822f
 801820c:	f6c0 0101 	movt	r1, #2049	@ 0x801
 8018210:	2003      	movs	r0, #3
 8018212:	f00b f9bc 	bl	802358e <llhwc_rgstr_func>
 8018216:	f240 4080 	movw	r0, #1152	@ 0x480
 801821a:	f6c4 0002 	movt	r0, #18434	@ 0x4802
 801821e:	6801      	ldr	r1, [r0, #0]
 8018220:	f365 0102 	bfi	r1, r5, #0, #3
 8018224:	6001      	str	r1, [r0, #0]
 8018226:	f000 f855 	bl	80182d4 <llhwc_init_empty_pkts>
 801822a:	4620      	mov	r0, r4
 801822c:	bdb0      	pop	{r4, r5, r7, pc}

0801822e <llhwc_recover_from_dp_slp>:
 801822e:	b5b0      	push	{r4, r5, r7, lr}
 8018230:	f640 040c 	movw	r4, #2060	@ 0x80c
 8018234:	f6c4 0402 	movt	r4, #18434	@ 0x4802
 8018238:	f007 fb53 	bl	801f8e2 <os_disable_isr>
 801823c:	f008 f80c 	bl	8020258 <llhwc_phy_set_cfg_time>
 8018240:	f640 007c 	movw	r0, #2172	@ 0x87c
 8018244:	f6c4 0002 	movt	r0, #18434	@ 0x4802
 8018248:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 801824c:	6001      	str	r1, [r0, #0]
 801824e:	6801      	ldr	r1, [r0, #0]
 8018250:	f64f 455c 	movw	r5, #64604	@ 0xfc5c
 8018254:	f041 0101 	orr.w	r1, r1, #1
 8018258:	6001      	str	r1, [r0, #0]
 801825a:	6801      	ldr	r1, [r0, #0]
 801825c:	f6cf 75ff 	movt	r5, #65535	@ 0xffff
 8018260:	f041 0102 	orr.w	r1, r1, #2
 8018264:	6001      	str	r1, [r0, #0]
 8018266:	6801      	ldr	r1, [r0, #0]
 8018268:	f021 0104 	bic.w	r1, r1, #4
 801826c:	6001      	str	r1, [r0, #0]
 801826e:	6801      	ldr	r1, [r0, #0]
 8018270:	f021 0108 	bic.w	r1, r1, #8
 8018274:	6001      	str	r1, [r0, #0]
 8018276:	f64f 403c 	movw	r0, #64572	@ 0xfc3c
 801827a:	f6cf 70ff 	movt	r0, #65535	@ 0xffff
 801827e:	5821      	ldr	r1, [r4, r0]
 8018280:	f021 0110 	bic.w	r1, r1, #16
 8018284:	5021      	str	r1, [r4, r0]
 8018286:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8018288:	f440 4000 	orr.w	r0, r0, #32768	@ 0x8000
 801828c:	6360      	str	r0, [r4, #52]	@ 0x34
 801828e:	6820      	ldr	r0, [r4, #0]
 8018290:	f020 5080 	bic.w	r0, r0, #268435456	@ 0x10000000
 8018294:	6020      	str	r0, [r4, #0]
 8018296:	6960      	ldr	r0, [r4, #20]
 8018298:	f440 5000 	orr.w	r0, r0, #8192	@ 0x2000
 801829c:	6160      	str	r0, [r4, #20]
 801829e:	5960      	ldr	r0, [r4, r5]
 80182a0:	f020 0018 	bic.w	r0, r0, #24
 80182a4:	5160      	str	r0, [r4, r5]
 80182a6:	f7ff fbe9 	bl	8017a7c <llhwc_updt_lst_ofsts>
 80182aa:	b918      	cbnz	r0, 80182b4 <llhwc_recover_from_dp_slp+0x86>
 80182ac:	5960      	ldr	r0, [r4, r5]
 80182ae:	f020 0001 	bic.w	r0, r0, #1
 80182b2:	5160      	str	r0, [r4, r5]
 80182b4:	f007 fb17 	bl	801f8e6 <os_enable_isr>
 80182b8:	f646 5048 	movw	r0, #27976	@ 0x6d48
 80182bc:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80182c0:	7e80      	ldrb	r0, [r0, #26]
 80182c2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80182c4:	2801      	cmp	r0, #1
 80182c6:	f421 4100 	bic.w	r1, r1, #32768	@ 0x8000
 80182ca:	bf18      	it	ne
 80182cc:	f501 4100 	addne.w	r1, r1, #32768	@ 0x8000
 80182d0:	6361      	str	r1, [r4, #52]	@ 0x34
 80182d2:	bdb0      	pop	{r4, r5, r7, pc}

080182d4 <llhwc_init_empty_pkts>:
 80182d4:	b5b0      	push	{r4, r5, r7, lr}
 80182d6:	b082      	sub	sp, #8
 80182d8:	f248 2400 	movw	r4, #33280	@ 0x8200
 80182dc:	2001      	movs	r0, #1
 80182de:	f6c4 0402 	movt	r4, #18434	@ 0x4802
 80182e2:	9001      	str	r0, [sp, #4]
 80182e4:	4620      	mov	r0, r4
 80182e6:	2100      	movs	r1, #0
 80182e8:	2204      	movs	r2, #4
 80182ea:	f00c f97d 	bl	80245e8 <ble_memset>
 80182ee:	f248 2008 	movw	r0, #33288	@ 0x8208
 80182f2:	8020      	strh	r0, [r4, #0]
 80182f4:	78e0      	ldrb	r0, [r4, #3]
 80182f6:	ad01      	add	r5, sp, #4
 80182f8:	f040 0004 	orr.w	r0, r0, #4
 80182fc:	70e0      	strb	r0, [r4, #3]
 80182fe:	1d20      	adds	r0, r4, #4
 8018300:	4629      	mov	r1, r5
 8018302:	2204      	movs	r2, #4
 8018304:	f00c f920 	bl	8024548 <ble_memcpy>
 8018308:	f104 0008 	add.w	r0, r4, #8
 801830c:	2100      	movs	r1, #0
 801830e:	2204      	movs	r2, #4
 8018310:	f00c f96a 	bl	80245e8 <ble_memset>
 8018314:	f44f 4002 	mov.w	r0, #33280	@ 0x8200
 8018318:	8120      	strh	r0, [r4, #8]
 801831a:	7ae0      	ldrb	r0, [r4, #11]
 801831c:	4629      	mov	r1, r5
 801831e:	f040 0014 	orr.w	r0, r0, #20
 8018322:	72e0      	strb	r0, [r4, #11]
 8018324:	f104 000c 	add.w	r0, r4, #12
 8018328:	2204      	movs	r2, #4
 801832a:	f00c f90d 	bl	8024548 <ble_memcpy>
 801832e:	b002      	add	sp, #8
 8018330:	bdb0      	pop	{r4, r5, r7, pc}

08018332 <llhwc_rgstr_evnt_schdlr_cb>:
 8018332:	f646 5148 	movw	r1, #27976	@ 0x6d48
 8018336:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 801833a:	6108      	str	r0, [r1, #16]
 801833c:	4770      	bx	lr

0801833e <llhwc_128_encrypt>:
 801833e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018340:	b087      	sub	sp, #28
 8018342:	4614      	mov	r4, r2
 8018344:	460d      	mov	r5, r1
 8018346:	4601      	mov	r1, r0
 8018348:	4610      	mov	r0, r2
 801834a:	2210      	movs	r2, #16
 801834c:	2710      	movs	r7, #16
 801834e:	f00c f8fb 	bl	8024548 <ble_memcpy>
 8018352:	2002      	movs	r0, #2
 8018354:	2100      	movs	r1, #0
 8018356:	2601      	movs	r6, #1
 8018358:	e9cd 1700 	strd	r1, r7, [sp]
 801835c:	9004      	str	r0, [sp, #16]
 801835e:	4620      	mov	r0, r4
 8018360:	4629      	mov	r1, r5
 8018362:	2200      	movs	r2, #0
 8018364:	2300      	movs	r3, #0
 8018366:	e9cd 6602 	strd	r6, r6, [sp, #8]
 801836a:	9605      	str	r6, [sp, #20]
 801836c:	f00b f962 	bl	8023634 <llhwc_cmn_crypto>
 8018370:	b007      	add	sp, #28
 8018372:	bdf0      	pop	{r4, r5, r6, r7, pc}

08018374 <llhwc_is_dtm_enabled>:
 8018374:	f646 5048 	movw	r0, #27976	@ 0x6d48
 8018378:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801837c:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
 801837e:	f5b0 5080 	subs.w	r0, r0, #4096	@ 0x1000
 8018382:	bf18      	it	ne
 8018384:	2001      	movne	r0, #1
 8018386:	4770      	bx	lr

08018388 <llhwc_stp_dtm>:
 8018388:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801838c:	b084      	sub	sp, #16
 801838e:	f646 5548 	movw	r5, #27976	@ 0x6d48
 8018392:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 8018396:	4604      	mov	r4, r0
 8018398:	4628      	mov	r0, r5
 801839a:	f00b ff8b 	bl	80242b4 <llhwc_cmn_get_desc>
 801839e:	4606      	mov	r6, r0
 80183a0:	2000      	movs	r0, #0
 80183a2:	9003      	str	r0, [sp, #12]
 80183a4:	e9cd 0001 	strd	r0, r0, [sp, #4]
 80183a8:	4630      	mov	r0, r6
 80183aa:	2101      	movs	r1, #1
 80183ac:	2e00      	cmp	r6, #0
 80183ae:	bf18      	it	ne
 80183b0:	2001      	movne	r0, #1
 80183b2:	f007 fa36 	bl	801f822 <bsp_assert>
 80183b6:	f248 18b4 	movw	r8, #33204	@ 0x81b4
 80183ba:	f2c2 0800 	movt	r8, #8192	@ 0x2000
 80183be:	f8d8 0000 	ldr.w	r0, [r8]
 80183c2:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80183c6:	f007 fa90 	bl	801f8ea <os_rcrsv_mutex_wait>
 80183ca:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 80183cc:	f5b0 5f80 	cmp.w	r0, #4096	@ 0x1000
 80183d0:	d104      	bne.n	80183dc <llhwc_stp_dtm+0x54>
 80183d2:	2043      	movs	r0, #67	@ 0x43
 80183d4:	f007 fa70 	bl	801f8b8 <bsp_debug_gpio_toggle>
 80183d8:	270c      	movs	r7, #12
 80183da:	e050      	b.n	801847e <llhwc_stp_dtm+0xf6>
 80183dc:	8fe8      	ldrh	r0, [r5, #62]	@ 0x3e
 80183de:	b128      	cbz	r0, 80183ec <llhwc_stp_dtm+0x64>
 80183e0:	6c28      	ldr	r0, [r5, #64]	@ 0x40
 80183e2:	f009 fe27 	bl	8022034 <os_timer_stop>
 80183e6:	4607      	mov	r7, r0
 80183e8:	2800      	cmp	r0, #0
 80183ea:	d148      	bne.n	801847e <llhwc_stp_dtm+0xf6>
 80183ec:	f240 4004 	movw	r0, #1028	@ 0x404
 80183f0:	f6c4 0002 	movt	r0, #18434	@ 0x4802
 80183f4:	6801      	ldr	r1, [r0, #0]
 80183f6:	2700      	movs	r7, #0
 80183f8:	f041 0101 	orr.w	r1, r1, #1
 80183fc:	6001      	str	r1, [r0, #0]
 80183fe:	f44f 30e0 	mov.w	r0, #114688	@ 0x1c000
 8018402:	f640 0174 	movw	r1, #2164	@ 0x874
 8018406:	2208      	movs	r2, #8
 8018408:	2303      	movs	r3, #3
 801840a:	9700      	str	r7, [sp, #0]
 801840c:	f00a fc88 	bl	8022d20 <llhwc_polling>
 8018410:	4607      	mov	r7, r0
 8018412:	bba0      	cbnz	r0, 801847e <llhwc_stp_dtm+0xf6>
 8018414:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8018416:	8bf1      	ldrh	r1, [r6, #30]
 8018418:	f5b0 7000 	subs.w	r0, r0, #512	@ 0x200
 801841c:	bf18      	it	ne
 801841e:	4608      	movne	r0, r1
 8018420:	8020      	strh	r0, [r4, #0]
 8018422:	f008 fe4a 	bl	80210ba <llhwc_phy_read_rssi>
 8018426:	f646 5440 	movw	r4, #27968	@ 0x6d40
 801842a:	f2c2 0400 	movt	r4, #8192	@ 0x2000
 801842e:	6821      	ldr	r1, [r4, #0]
 8018430:	f646 5244 	movw	r2, #27972	@ 0x6d44
 8018434:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8018438:	8010      	strh	r0, [r2, #0]
 801843a:	b1e9      	cbz	r1, 8018478 <llhwc_stp_dtm+0xf0>
 801843c:	a801      	add	r0, sp, #4
 801843e:	f00a f804 	bl	802244a <llhwc_slptmr_get>
 8018442:	f646 553c 	movw	r5, #27964	@ 0x6d3c
 8018446:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 801844a:	6828      	ldr	r0, [r5, #0]
 801844c:	9901      	ldr	r1, [sp, #4]
 801844e:	9002      	str	r0, [sp, #8]
 8018450:	a802      	add	r0, sp, #8
 8018452:	f009 f8a9 	bl	80215a8 <ble_time_cmp_raw_reading>
 8018456:	2801      	cmp	r0, #1
 8018458:	db02      	blt.n	8018460 <llhwc_stp_dtm+0xd8>
 801845a:	9801      	ldr	r0, [sp, #4]
 801845c:	6829      	ldr	r1, [r5, #0]
 801845e:	e001      	b.n	8018464 <llhwc_stp_dtm+0xdc>
 8018460:	6828      	ldr	r0, [r5, #0]
 8018462:	9901      	ldr	r1, [sp, #4]
 8018464:	f009 f8c5 	bl	80215f2 <ble_time_overflow_diff>
 8018468:	ebc0 1140 	rsb	r1, r0, r0, lsl #5
 801846c:	eb01 0090 	add.w	r0, r1, r0, lsr #2
 8018470:	6821      	ldr	r1, [r4, #0]
 8018472:	fbb0 f0f1 	udiv	r0, r0, r1
 8018476:	6028      	str	r0, [r5, #0]
 8018478:	f7ff ff2c 	bl	80182d4 <llhwc_init_empty_pkts>
 801847c:	2700      	movs	r7, #0
 801847e:	f008 fe0e 	bl	802109e <llhwc_phy_reset_freq_correction_reg>
 8018482:	2001      	movs	r0, #1
 8018484:	f00b fe82 	bl	802418c <llhwc_cmn_evnt_notify>
 8018488:	f8d8 0000 	ldr.w	r0, [r8]
 801848c:	f007 fa33 	bl	801f8f6 <os_rcrsv_mutex_release>
 8018490:	4638      	mov	r0, r7
 8018492:	b004      	add	sp, #16
 8018494:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018498 <llhwc_get_sm_mode_from_event_type>:
 8018498:	b5f0      	push	{r4, r5, r6, r7, lr}
 801849a:	b081      	sub	sp, #4
 801849c:	4605      	mov	r5, r0
 801849e:	f1b0 7080 	subs.w	r0, r0, #16777216	@ 0x1000000
 80184a2:	f171 0000 	sbcs.w	r0, r1, #0
 80184a6:	460c      	mov	r4, r1
 80184a8:	f04f 0000 	mov.w	r0, #0
 80184ac:	f04f 0101 	mov.w	r1, #1
 80184b0:	bf38      	it	cc
 80184b2:	2001      	movcc	r0, #1
 80184b4:	2600      	movs	r6, #0
 80184b6:	2701      	movs	r7, #1
 80184b8:	f007 f9b3 	bl	801f822 <bsp_assert>
 80184bc:	fa07 f006 	lsl.w	r0, r7, r6
 80184c0:	4068      	eors	r0, r5
 80184c2:	4320      	orrs	r0, r4
 80184c4:	d003      	beq.n	80184ce <llhwc_get_sm_mode_from_event_type+0x36>
 80184c6:	3601      	adds	r6, #1
 80184c8:	2e18      	cmp	r6, #24
 80184ca:	d1f7      	bne.n	80184bc <llhwc_get_sm_mode_from_event_type+0x24>
 80184cc:	2600      	movs	r6, #0
 80184ce:	b2f0      	uxtb	r0, r6
 80184d0:	b001      	add	sp, #4
 80184d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080184d4 <llhwc_switch_rate>:
 80184d4:	b510      	push	{r4, lr}
 80184d6:	b086      	sub	sp, #24
 80184d8:	f247 34d0 	movw	r4, #29648	@ 0x73d0
 80184dc:	f2c2 0400 	movt	r4, #8192	@ 0x2000
 80184e0:	230c      	movs	r3, #12
 80184e2:	7ca1      	ldrb	r1, [r4, #18]
 80184e4:	f3c0 0241 	ubfx	r2, r0, #1, #2
 80184e8:	ea03 13d0 	and.w	r3, r3, r0, lsr #7
 80184ec:	f001 01f0 	and.w	r1, r1, #240	@ 0xf0
 80184f0:	441a      	add	r2, r3
 80184f2:	4411      	add	r1, r2
 80184f4:	74a1      	strb	r1, [r4, #18]
 80184f6:	f10d 0c04 	add.w	ip, sp, #4
 80184fa:	f10d 0217 	add.w	r2, sp, #23
 80184fe:	f10d 0316 	add.w	r3, sp, #22
 8018502:	2101      	movs	r1, #1
 8018504:	f8cd c000 	str.w	ip, [sp]
 8018508:	f00a ffec 	bl	80234e4 <llhwc_cmn_set_phy>
 801850c:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8018510:	f89d 1016 	ldrb.w	r1, [sp, #22]
 8018514:	f000 000f 	and.w	r0, r0, #15
 8018518:	ea40 1001 	orr.w	r0, r0, r1, lsl #4
 801851c:	ab01      	add	r3, sp, #4
 801851e:	7460      	strb	r0, [r4, #17]
 8018520:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8018522:	7661      	strb	r1, [r4, #25]
 8018524:	7620      	strb	r0, [r4, #24]
 8018526:	76a2      	strb	r2, [r4, #26]
 8018528:	76e3      	strb	r3, [r4, #27]
 801852a:	b006      	add	sp, #24
 801852c:	bd10      	pop	{r4, pc}
	...

08018530 <llhwc_set_adv_param>:
 8018530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018534:	b083      	sub	sp, #12
 8018536:	460e      	mov	r6, r1
 8018538:	e9d1 210a 	ldrd	r2, r1, [r1, #40]	@ 0x28
 801853c:	4682      	mov	sl, r0
 801853e:	4610      	mov	r0, r2
 8018540:	f7ff ffaa 	bl	8018498 <llhwc_get_sm_mode_from_event_type>
 8018544:	f646 5948 	movw	r9, #27976	@ 0x6d48
 8018548:	4605      	mov	r5, r0
 801854a:	f2c2 0900 	movt	r9, #8192	@ 0x2000
 801854e:	2002      	movs	r0, #2
 8018550:	f247 3bd0 	movw	fp, #29648	@ 0x73d0
 8018554:	f889 0034 	strb.w	r0, [r9, #52]	@ 0x34
 8018558:	20ff      	movs	r0, #255	@ 0xff
 801855a:	f2c2 0b00 	movt	fp, #8192	@ 0x2000
 801855e:	2400      	movs	r4, #0
 8018560:	f889 0030 	strb.w	r0, [r9, #48]	@ 0x30
 8018564:	4658      	mov	r0, fp
 8018566:	2100      	movs	r1, #0
 8018568:	2224      	movs	r2, #36	@ 0x24
 801856a:	f889 4033 	strb.w	r4, [r9, #51]	@ 0x33
 801856e:	f00c f83b 	bl	80245e8 <ble_memset>
 8018572:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8018576:	f649 615c 	movw	r1, #40540	@ 0x9e5c
 801857a:	f8ab 0000 	strh.w	r0, [fp]
 801857e:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8018582:	2000      	movs	r0, #0
 8018584:	f006 f943 	bl	801e80e <allocate_data_packet>
 8018588:	f646 51f4 	movw	r1, #28148	@ 0x6df4
 801858c:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8018590:	6008      	str	r0, [r1, #0]
 8018592:	b3c0      	cbz	r0, 8018606 <llhwc_set_adv_param+0xd6>
 8018594:	9502      	str	r5, [sp, #8]
 8018596:	6805      	ldr	r5, [r0, #0]
 8018598:	f64f 71fc 	movw	r1, #65532	@ 0xfffc
 801859c:	f2cb 71fd 	movt	r1, #47101	@ 0xb7fd
 80185a0:	8144      	strh	r4, [r0, #10]
 80185a2:	186c      	adds	r4, r5, r1
 80185a4:	4620      	mov	r0, r4
 80185a6:	f6c4 0002 	movt	r0, #18434	@ 0x4802
 80185aa:	2100      	movs	r1, #0
 80185ac:	2204      	movs	r2, #4
 80185ae:	f8ab 401e 	strh.w	r4, [fp, #30]
 80185b2:	f04f 0804 	mov.w	r8, #4
 80185b6:	f00c f817 	bl	80245e8 <ble_memset>
 80185ba:	f855 0c04 	ldr.w	r0, [r5, #-4]
 80185be:	f364 000f 	bfi	r0, r4, #0, #16
 80185c2:	f845 0c04 	str.w	r0, [r5, #-4]
 80185c6:	e9d6 120a 	ldrd	r1, r2, [r6, #40]	@ 0x28
 80185ca:	88b0      	ldrh	r0, [r6, #4]
 80185cc:	3804      	subs	r0, #4
 80185ce:	f8ab 001c 	strh.w	r0, [fp, #28]
 80185d2:	e9c9 1208 	strd	r1, r2, [r9, #32]
 80185d6:	f896 4034 	ldrb.w	r4, [r6, #52]	@ 0x34
 80185da:	2c03      	cmp	r4, #3
 80185dc:	bf04      	itt	eq
 80185de:	f886 8034 	strbeq.w	r8, [r6, #52]	@ 0x34
 80185e2:	2404      	moveq	r4, #4
 80185e4:	eb04 2004 	add.w	r0, r4, r4, lsl #8
 80185e8:	f500 3080 	add.w	r0, r0, #65536	@ 0x10000
 80185ec:	f7ff ff72 	bl	80184d4 <llhwc_switch_rate>
 80185f0:	f896 0034 	ldrb.w	r0, [r6, #52]	@ 0x34
 80185f4:	2804      	cmp	r0, #4
 80185f6:	d10b      	bne.n	8018610 <llhwc_set_adv_param+0xe0>
 80185f8:	f8db 0008 	ldr.w	r0, [fp, #8]
 80185fc:	f04f 4160 	mov.w	r1, #3758096384	@ 0xe0000000
 8018600:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8018604:	e012      	b.n	801862c <llhwc_set_adv_param+0xfc>
 8018606:	2042      	movs	r0, #66	@ 0x42
 8018608:	f007 f956 	bl	801f8b8 <bsp_debug_gpio_toggle>
 801860c:	2007      	movs	r0, #7
 801860e:	e10c      	b.n	801882a <llhwc_set_adv_param+0x2fa>
 8018610:	f641 015a 	movw	r1, #6234	@ 0x185a
 8018614:	f6c0 0103 	movt	r1, #2051	@ 0x803
 8018618:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
 801861c:	f8db 1008 	ldr.w	r1, [fp, #8]
 8018620:	f04f 52d8 	mov.w	r2, #452984832	@ 0x1b000000
 8018624:	eb02 6000 	add.w	r0, r2, r0, lsl #24
 8018628:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 801862c:	e9d6 230a 	ldrd	r2, r3, [r6, #40]	@ 0x28
 8018630:	4308      	orrs	r0, r1
 8018632:	3a01      	subs	r2, #1
 8018634:	f8cb 0008 	str.w	r0, [fp, #8]
 8018638:	f163 0300 	sbc.w	r3, r3, #0
 801863c:	f1d2 0507 	rsbs	r5, r2, #7
 8018640:	f04f 0500 	mov.w	r5, #0
 8018644:	eb75 0303 	sbcs.w	r3, r5, r3
 8018648:	d306      	bcc.n	8018658 <llhwc_set_adv_param+0x128>
 801864a:	a079      	add	r0, pc, #484	@ (adr r0, 8018830 <llhwc_set_adv_param+0x300>)
 801864c:	f850 1022 	ldr.w	r1, [r0, r2, lsl #2]
 8018650:	a07f      	add	r0, pc, #508	@ (adr r0, 8018850 <llhwc_set_adv_param+0x320>)
 8018652:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 8018656:	e006      	b.n	8018666 <llhwc_set_adv_param+0x136>
 8018658:	f247 1190 	movw	r1, #29072	@ 0x7190
 801865c:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8018660:	f101 000c 	add.w	r0, r1, #12
 8018664:	3108      	adds	r1, #8
 8018666:	6809      	ldr	r1, [r1, #0]
 8018668:	f240 0800 	movw	r8, #0
 801866c:	f88b 1013 	strb.w	r1, [fp, #19]
 8018670:	6800      	ldr	r0, [r0, #0]
 8018672:	f996 1040 	ldrsb.w	r1, [r6, #64]	@ 0x40
 8018676:	f640 070c 	movw	r7, #2060	@ 0x80c
 801867a:	f88b 0002 	strb.w	r0, [fp, #2]
 801867e:	2501      	movs	r5, #1
 8018680:	2001      	movs	r0, #1
 8018682:	2201      	movs	r2, #1
 8018684:	2301      	movs	r3, #1
 8018686:	f6c4 0802 	movt	r8, #18434	@ 0x4802
 801868a:	f6c4 0702 	movt	r7, #18434	@ 0x4802
 801868e:	9500      	str	r5, [sp, #0]
 8018690:	f009 fe83 	bl	802239a <ll_tx_pwr_if_tx_pwr_params_config>
 8018694:	f8db 0008 	ldr.w	r0, [fp, #8]
 8018698:	f245 5155 	movw	r1, #21845	@ 0x5555
 801869c:	f2c0 0155 	movt	r1, #85	@ 0x55
 80186a0:	f361 0017 	bfi	r0, r1, #0, #24
 80186a4:	f646 5190 	movw	r1, #28048	@ 0x6d90
 80186a8:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 80186ac:	794a      	ldrb	r2, [r1, #5]
 80186ae:	f64b 63d6 	movw	r3, #48854	@ 0xbed6
 80186b2:	f6c8 6389 	movt	r3, #36489	@ 0x8e89
 80186b6:	6809      	ldr	r1, [r1, #0]
 80186b8:	2a01      	cmp	r2, #1
 80186ba:	bf08      	it	eq
 80186bc:	460b      	moveq	r3, r1
 80186be:	e9cb 3001 	strd	r3, r0, [fp, #4]
 80186c2:	69b9      	ldr	r1, [r7, #24]
 80186c4:	6832      	ldr	r2, [r6, #0]
 80186c6:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80186ca:	7913      	ldrb	r3, [r2, #4]
 80186cc:	4381      	bics	r1, r0
 80186ce:	7955      	ldrb	r5, [r2, #5]
 80186d0:	4419      	add	r1, r3
 80186d2:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
 80186d6:	61b9      	str	r1, [r7, #24]
 80186d8:	7811      	ldrb	r1, [r2, #0]
 80186da:	7853      	ldrb	r3, [r2, #1]
 80186dc:	7895      	ldrb	r5, [r2, #2]
 80186de:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
 80186e2:	78d2      	ldrb	r2, [r2, #3]
 80186e4:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80186e8:	ea41 6102 	orr.w	r1, r1, r2, lsl #24
 80186ec:	61f9      	str	r1, [r7, #28]
 80186ee:	69b9      	ldr	r1, [r7, #24]
 80186f0:	f89a 2008 	ldrb.w	r2, [sl, #8]
 80186f4:	f362 4110 	bfi	r1, r2, #16, #1
 80186f8:	61b9      	str	r1, [r7, #24]
 80186fa:	e9d6 120a 	ldrd	r1, r2, [r6, #40]	@ 0x28
 80186fe:	f081 0102 	eor.w	r1, r1, #2
 8018702:	4311      	orrs	r1, r2
 8018704:	d119      	bne.n	801873a <llhwc_set_adv_param+0x20a>
 8018706:	6a39      	ldr	r1, [r7, #32]
 8018708:	f89a 2005 	ldrb.w	r2, [sl, #5]
 801870c:	ea21 0000 	bic.w	r0, r1, r0
 8018710:	f89a 1004 	ldrb.w	r1, [sl, #4]
 8018714:	4408      	add	r0, r1
 8018716:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 801871a:	6238      	str	r0, [r7, #32]
 801871c:	f89a 0000 	ldrb.w	r0, [sl]
 8018720:	f89a 1001 	ldrb.w	r1, [sl, #1]
 8018724:	f89a 2002 	ldrb.w	r2, [sl, #2]
 8018728:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
 801872c:	f89a 1003 	ldrb.w	r1, [sl, #3]
 8018730:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8018734:	ea40 6001 	orr.w	r0, r0, r1, lsl #24
 8018738:	6278      	str	r0, [r7, #36]	@ 0x24
 801873a:	6870      	ldr	r0, [r6, #4]
 801873c:	f8cd a004 	str.w	sl, [sp, #4]
 8018740:	2800      	cmp	r0, #0
 8018742:	d03f      	beq.n	80187c4 <llhwc_set_adv_param+0x294>
 8018744:	f247 30d0 	movw	r0, #29648	@ 0x73d0
 8018748:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801874c:	8b80      	ldrh	r0, [r0, #28]
 801874e:	f106 0a08 	add.w	sl, r6, #8
 8018752:	f04f 0b00 	mov.w	fp, #0
 8018756:	f64f 79ff 	movw	r9, #65535	@ 0xffff
 801875a:	bf00      	nop
 801875c:	eb00 0508 	add.w	r5, r0, r8
 8018760:	4628      	mov	r0, r5
 8018762:	2100      	movs	r1, #0
 8018764:	2204      	movs	r2, #4
 8018766:	f00b ff3f 	bl	80245e8 <ble_memset>
 801876a:	f85a 102b 	ldr.w	r1, [sl, fp, lsl #2]
 801876e:	4608      	mov	r0, r1
 8018770:	b901      	cbnz	r1, 8018774 <llhwc_set_adv_param+0x244>
 8018772:	6870      	ldr	r0, [r6, #4]
 8018774:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 8018778:	f2cb 72fd 	movt	r2, #47101	@ 0xb7fd
 801877c:	4410      	add	r0, r2
 801877e:	682a      	ldr	r2, [r5, #0]
 8018780:	b283      	uxth	r3, r0
 8018782:	ea22 0209 	bic.w	r2, r2, r9
 8018786:	441a      	add	r2, r3
 8018788:	2c04      	cmp	r4, #4
 801878a:	602a      	str	r2, [r5, #0]
 801878c:	d103      	bne.n	8018796 <llhwc_set_adv_param+0x266>
 801878e:	682a      	ldr	r2, [r5, #0]
 8018790:	f042 6200 	orr.w	r2, r2, #134217728	@ 0x8000000
 8018794:	602a      	str	r2, [r5, #0]
 8018796:	e9d6 320a 	ldrd	r3, r2, [r6, #40]	@ 0x28
 801879a:	f483 4700 	eor.w	r7, r3, #32768	@ 0x8000
 801879e:	4317      	orrs	r7, r2
 80187a0:	bf1c      	itt	ne
 80187a2:	f483 5300 	eorne.w	r3, r3, #8192	@ 0x2000
 80187a6:	ea52 0203 	orrsne.w	r2, r2, r3
 80187aa:	d105      	bne.n	80187b8 <llhwc_set_adv_param+0x288>
 80187ac:	682a      	ldr	r2, [r5, #0]
 80187ae:	f896 3032 	ldrb.w	r3, [r6, #50]	@ 0x32
 80187b2:	f363 4215 	bfi	r2, r3, #16, #6
 80187b6:	602a      	str	r2, [r5, #0]
 80187b8:	b121      	cbz	r1, 80187c4 <llhwc_set_adv_param+0x294>
 80187ba:	f1bb 0f06 	cmp.w	fp, #6
 80187be:	f10b 0b01 	add.w	fp, fp, #1
 80187c2:	d3cb      	bcc.n	801875c <llhwc_set_adv_param+0x22c>
 80187c4:	f640 050c 	movw	r5, #2060	@ 0x80c
 80187c8:	f6c4 0502 	movt	r5, #18434	@ 0x4802
 80187cc:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 80187ce:	9901      	ldr	r1, [sp, #4]
 80187d0:	7a49      	ldrb	r1, [r1, #9]
 80187d2:	f361 0002 	bfi	r0, r1, #0, #3
 80187d6:	6328      	str	r0, [r5, #48]	@ 0x30
 80187d8:	6869      	ldr	r1, [r5, #4]
 80187da:	f896 2032 	ldrb.w	r2, [r6, #50]	@ 0x32
 80187de:	f896 0033 	ldrb.w	r0, [r6, #51]	@ 0x33
 80187e2:	f362 0105 	bfi	r1, r2, #0, #6
 80187e6:	6069      	str	r1, [r5, #4]
 80187e8:	f008 faa2 	bl	8020d30 <llhwc_phy_set_ch_config_adv>
 80187ec:	f247 34d0 	movw	r4, #29648	@ 0x73d0
 80187f0:	2028      	movs	r0, #40	@ 0x28
 80187f2:	f2c2 0400 	movt	r4, #8192	@ 0x2000
 80187f6:	73e0      	strb	r0, [r4, #15]
 80187f8:	6828      	ldr	r0, [r5, #0]
 80187fa:	9902      	ldr	r1, [sp, #8]
 80187fc:	f361 0004 	bfi	r0, r1, #0, #5
 8018800:	6028      	str	r0, [r5, #0]
 8018802:	f646 5048 	movw	r0, #27976	@ 0x6d48
 8018806:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801880a:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 801880c:	2101      	movs	r1, #1
 801880e:	f00b f977 	bl	8023b00 <llhwc_cmn_alloc_desc>
 8018812:	4621      	mov	r1, r4
 8018814:	2230      	movs	r2, #48	@ 0x30
 8018816:	4605      	mov	r5, r0
 8018818:	f00b fe96 	bl	8024548 <ble_memcpy>
 801881c:	f8d8 0408 	ldr.w	r0, [r8, #1032]	@ 0x408
 8018820:	f365 000f 	bfi	r0, r5, #0, #16
 8018824:	f8c8 0408 	str.w	r0, [r8, #1032]	@ 0x408
 8018828:	2000      	movs	r0, #0
 801882a:	b003      	add	sp, #12
 801882c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018830:	20007190 	.word	0x20007190
 8018834:	20007190 	.word	0x20007190
 8018838:	20007198 	.word	0x20007198
 801883c:	20007190 	.word	0x20007190
 8018840:	20007198 	.word	0x20007198
 8018844:	20007198 	.word	0x20007198
 8018848:	20007198 	.word	0x20007198
 801884c:	20007190 	.word	0x20007190
 8018850:	20007194 	.word	0x20007194
 8018854:	20007194 	.word	0x20007194
 8018858:	2000719c 	.word	0x2000719c
 801885c:	20007194 	.word	0x20007194
 8018860:	2000719c 	.word	0x2000719c
 8018864:	2000719c 	.word	0x2000719c
 8018868:	2000719c 	.word	0x2000719c
 801886c:	20007194 	.word	0x20007194

08018870 <llhwc_get_access_adrs_time>:
 8018870:	b580      	push	{r7, lr}
 8018872:	f641 025a 	movw	r2, #6234	@ 0x185a
 8018876:	f6c0 0203 	movt	r2, #2051	@ 0x803
 801887a:	f832 e010 	ldrh.w	lr, [r2, r0, lsl #1]
 801887e:	f04f 0c0b 	mov.w	ip, #11
 8018882:	fb01 f30c 	mul.w	r3, r1, ip
 8018886:	222b      	movs	r2, #43	@ 0x2b
 8018888:	fb01 f202 	mul.w	r2, r1, r2
 801888c:	2804      	cmp	r0, #4
 801888e:	bf08      	it	eq
 8018890:	fb01 230c 	mlaeq	r3, r1, ip, r2
 8018894:	eb03 000e 	add.w	r0, r3, lr
 8018898:	bd80      	pop	{r7, pc}

0801889a <llhwc_set_scan_param>:
 801889a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801889e:	b085      	sub	sp, #20
 80188a0:	4617      	mov	r7, r2
 80188a2:	9104      	str	r1, [sp, #16]
 80188a4:	e9d2 2104 	ldrd	r2, r1, [r2, #16]
 80188a8:	4683      	mov	fp, r0
 80188aa:	f640 080c 	movw	r8, #2060	@ 0x80c
 80188ae:	4610      	mov	r0, r2
 80188b0:	9303      	str	r3, [sp, #12]
 80188b2:	f6c4 0802 	movt	r8, #18434	@ 0x4802
 80188b6:	f7ff fdef 	bl	8018498 <llhwc_get_sm_mode_from_event_type>
 80188ba:	f646 5548 	movw	r5, #27976	@ 0x6d48
 80188be:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 80188c2:	6929      	ldr	r1, [r5, #16]
 80188c4:	f247 34d0 	movw	r4, #29648	@ 0x73d0
 80188c8:	9002      	str	r0, [sp, #8]
 80188ca:	2900      	cmp	r1, #0
 80188cc:	bf18      	it	ne
 80188ce:	2101      	movne	r1, #1
 80188d0:	f2c2 0400 	movt	r4, #8192	@ 0x2000
 80188d4:	f885 1033 	strb.w	r1, [r5, #51]	@ 0x33
 80188d8:	2601      	movs	r6, #1
 80188da:	4620      	mov	r0, r4
 80188dc:	2100      	movs	r1, #0
 80188de:	2224      	movs	r2, #36	@ 0x24
 80188e0:	f885 6034 	strb.w	r6, [r5, #52]	@ 0x34
 80188e4:	f00b fe80 	bl	80245e8 <ble_memset>
 80188e8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80188ec:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80188f0:	f080 0010 	eor.w	r0, r0, #16
 80188f4:	8022      	strh	r2, [r4, #0]
 80188f6:	4308      	orrs	r0, r1
 80188f8:	fab0 f080 	clz	r0, r0
 80188fc:	f997 1009 	ldrsb.w	r1, [r7, #9]
 8018900:	0940      	lsrs	r0, r0, #5
 8018902:	2200      	movs	r2, #0
 8018904:	2301      	movs	r3, #1
 8018906:	9600      	str	r6, [sp, #0]
 8018908:	f009 fd47 	bl	802239a <ll_tx_pwr_if_tx_pwr_params_config>
 801890c:	7e39      	ldrb	r1, [r7, #24]
 801890e:	f641 0054 	movw	r0, #6228	@ 0x1854
 8018912:	f6c0 0003 	movt	r0, #2051	@ 0x803
 8018916:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 801891a:	f8d8 2004 	ldr.w	r2, [r8, #4]
 801891e:	f810 0c4a 	ldrb.w	r0, [r0, #-74]
 8018922:	f361 0205 	bfi	r2, r1, #0, #6
 8018926:	f8c8 2004 	str.w	r2, [r8, #4]
 801892a:	2101      	movs	r1, #1
 801892c:	2201      	movs	r2, #1
 801892e:	f008 f946 	bl	8020bbe <llhwc_phy_set_ch_config>
 8018932:	f649 615c 	movw	r1, #40540	@ 0x9e5c
 8018936:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 801893a:	2000      	movs	r0, #0
 801893c:	f005 ff67 	bl	801e80e <allocate_data_packet>
 8018940:	f646 56f8 	movw	r6, #28152	@ 0x6df8
 8018944:	f2c2 0600 	movt	r6, #8192	@ 0x2000
 8018948:	2800      	cmp	r0, #0
 801894a:	6030      	str	r0, [r6, #0]
 801894c:	d060      	beq.n	8018a10 <llhwc_set_scan_param+0x176>
 801894e:	8802      	ldrh	r2, [r0, #0]
 8018950:	2118      	movs	r1, #24
 8018952:	8141      	strh	r1, [r0, #10]
 8018954:	f102 0014 	add.w	r0, r2, #20
 8018958:	83e0      	strh	r0, [r4, #30]
 801895a:	f240 0900 	movw	r9, #0
 801895e:	f6c4 0002 	movt	r0, #18434	@ 0x4802
 8018962:	2100      	movs	r1, #0
 8018964:	2204      	movs	r2, #4
 8018966:	f6c4 0902 	movt	r9, #18434	@ 0x4802
 801896a:	f00b fe3d 	bl	80245e8 <ble_memset>
 801896e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8018972:	f080 0010 	eor.w	r0, r0, #16
 8018976:	4308      	orrs	r0, r1
 8018978:	d14e      	bne.n	8018a18 <llhwc_set_scan_param+0x17e>
 801897a:	6830      	ldr	r0, [r6, #0]
 801897c:	f649 615c 	movw	r1, #40540	@ 0x9e5c
 8018980:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8018984:	f005 ff43 	bl	801e80e <allocate_data_packet>
 8018988:	2800      	cmp	r0, #0
 801898a:	f000 8132 	beq.w	8018bf2 <llhwc_set_scan_param+0x358>
 801898e:	f8d0 9000 	ldr.w	r9, [r0]
 8018992:	2118      	movs	r1, #24
 8018994:	f109 0614 	add.w	r6, r9, #20
 8018998:	8141      	strh	r1, [r0, #10]
 801899a:	4630      	mov	r0, r6
 801899c:	2100      	movs	r1, #0
 801899e:	2204      	movs	r2, #4
 80189a0:	f8cd b004 	str.w	fp, [sp, #4]
 80189a4:	f00b fe20 	bl	80245e8 <ble_memset>
 80189a8:	8be0      	ldrh	r0, [r4, #30]
 80189aa:	f240 0a00 	movw	sl, #0
 80189ae:	f6c4 0a02 	movt	sl, #18434	@ 0x4802
 80189b2:	ea40 000a 	orr.w	r0, r0, sl
 80189b6:	6801      	ldr	r1, [r0, #0]
 80189b8:	2204      	movs	r2, #4
 80189ba:	f366 010f 	bfi	r1, r6, #0, #16
 80189be:	6001      	str	r1, [r0, #0]
 80189c0:	f8d9 0014 	ldr.w	r0, [r9, #20]
 80189c4:	f64f 76ff 	movw	r6, #65535	@ 0xffff
 80189c8:	4330      	orrs	r0, r6
 80189ca:	f8c9 0014 	str.w	r0, [r9, #20]
 80189ce:	8838      	ldrh	r0, [r7, #0]
 80189d0:	f8dd b004 	ldr.w	fp, [sp, #4]
 80189d4:	3804      	subs	r0, #4
 80189d6:	b281      	uxth	r1, r0
 80189d8:	83a0      	strh	r0, [r4, #28]
 80189da:	ea41 000a 	orr.w	r0, r1, sl
 80189de:	2100      	movs	r1, #0
 80189e0:	f00b fe02 	bl	80245e8 <ble_memset>
 80189e4:	8ba0      	ldrh	r0, [r4, #28]
 80189e6:	2206      	movs	r2, #6
 80189e8:	ea40 000a 	orr.w	r0, r0, sl
 80189ec:	6801      	ldr	r1, [r0, #0]
 80189ee:	4331      	orrs	r1, r6
 80189f0:	6001      	str	r1, [r0, #0]
 80189f2:	68f9      	ldr	r1, [r7, #12]
 80189f4:	4628      	mov	r0, r5
 80189f6:	f00b fda7 	bl	8024548 <ble_memcpy>
 80189fa:	6838      	ldr	r0, [r7, #0]
 80189fc:	78e1      	ldrb	r1, [r4, #3]
 80189fe:	7800      	ldrb	r0, [r0, #0]
 8018a00:	f3c0 1080 	ubfx	r0, r0, #6, #1
 8018a04:	60a8      	str	r0, [r5, #8]
 8018a06:	f001 00e0 	and.w	r0, r1, #224	@ 0xe0
 8018a0a:	3002      	adds	r0, #2
 8018a0c:	70e0      	strb	r0, [r4, #3]
 8018a0e:	e013      	b.n	8018a38 <llhwc_set_scan_param+0x19e>
 8018a10:	2042      	movs	r0, #66	@ 0x42
 8018a12:	f006 ff51 	bl	801f8b8 <bsp_debug_gpio_toggle>
 8018a16:	e0f2      	b.n	8018bfe <llhwc_set_scan_param+0x364>
 8018a18:	8be0      	ldrh	r0, [r4, #30]
 8018a1a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8018a1e:	ea40 0009 	orr.w	r0, r0, r9
 8018a22:	6801      	ldr	r1, [r0, #0]
 8018a24:	4311      	orrs	r1, r2
 8018a26:	6001      	str	r1, [r0, #0]
 8018a28:	78e0      	ldrb	r0, [r4, #3]
 8018a2a:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8018a2e:	f000 00e0 	and.w	r0, r0, #224	@ 0xe0
 8018a32:	3001      	adds	r0, #1
 8018a34:	70e0      	strb	r0, [r4, #3]
 8018a36:	83a1      	strh	r1, [r4, #28]
 8018a38:	e9d7 1004 	ldrd	r1, r0, [r7, #16]
 8018a3c:	e9c5 1008 	strd	r1, r0, [r5, #32]
 8018a40:	7e7e      	ldrb	r6, [r7, #25]
 8018a42:	7a38      	ldrb	r0, [r7, #8]
 8018a44:	ea46 2106 	orr.w	r1, r6, r6, lsl #8
 8018a48:	f885 0031 	strb.w	r0, [r5, #49]	@ 0x31
 8018a4c:	f501 3080 	add.w	r0, r1, #65536	@ 0x10000
 8018a50:	f7ff fd40 	bl	80184d4 <llhwc_switch_rate>
 8018a54:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8018a58:	f080 0010 	eor.w	r0, r0, #16
 8018a5c:	4308      	orrs	r0, r1
 8018a5e:	bf08      	it	eq
 8018a60:	2e04      	cmpeq	r6, #4
 8018a62:	d108      	bne.n	8018a76 <llhwc_set_scan_param+0x1dc>
 8018a64:	8ba0      	ldrh	r0, [r4, #28]
 8018a66:	2100      	movs	r1, #0
 8018a68:	f6c4 0102 	movt	r1, #18434	@ 0x4802
 8018a6c:	4308      	orrs	r0, r1
 8018a6e:	6801      	ldr	r1, [r0, #0]
 8018a70:	f041 6100 	orr.w	r1, r1, #134217728	@ 0x8000000
 8018a74:	6001      	str	r1, [r0, #0]
 8018a76:	7e78      	ldrb	r0, [r7, #25]
 8018a78:	9e04      	ldr	r6, [sp, #16]
 8018a7a:	2804      	cmp	r0, #4
 8018a7c:	d105      	bne.n	8018a8a <llhwc_set_scan_param+0x1f0>
 8018a7e:	68a0      	ldr	r0, [r4, #8]
 8018a80:	f04f 4160 	mov.w	r1, #3758096384	@ 0xe0000000
 8018a84:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8018a88:	e00c      	b.n	8018aa4 <llhwc_set_scan_param+0x20a>
 8018a8a:	f641 015a 	movw	r1, #6234	@ 0x185a
 8018a8e:	f6c0 0103 	movt	r1, #2051	@ 0x803
 8018a92:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
 8018a96:	68a1      	ldr	r1, [r4, #8]
 8018a98:	f04f 52d8 	mov.w	r2, #452984832	@ 0x1b000000
 8018a9c:	eb02 6000 	add.w	r0, r2, r0, lsl #24
 8018aa0:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8018aa4:	4308      	orrs	r0, r1
 8018aa6:	60a0      	str	r0, [r4, #8]
 8018aa8:	f89b 0000 	ldrb.w	r0, [fp]
 8018aac:	2801      	cmp	r0, #1
 8018aae:	d809      	bhi.n	8018ac4 <llhwc_set_scan_param+0x22a>
 8018ab0:	f8d8 0070 	ldr.w	r0, [r8, #112]	@ 0x70
 8018ab4:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8018ab8:	7628      	strb	r0, [r5, #24]
 8018aba:	f8d8 0070 	ldr.w	r0, [r8, #112]	@ 0x70
 8018abe:	f040 0004 	orr.w	r0, r0, #4
 8018ac2:	e00a      	b.n	8018ada <llhwc_set_scan_param+0x240>
 8018ac4:	2803      	cmp	r0, #3
 8018ac6:	d80a      	bhi.n	8018ade <llhwc_set_scan_param+0x244>
 8018ac8:	f8d8 0070 	ldr.w	r0, [r8, #112]	@ 0x70
 8018acc:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8018ad0:	7628      	strb	r0, [r5, #24]
 8018ad2:	f8d8 0070 	ldr.w	r0, [r8, #112]	@ 0x70
 8018ad6:	f020 0004 	bic.w	r0, r0, #4
 8018ada:	f8c8 0070 	str.w	r0, [r8, #112]	@ 0x70
 8018ade:	f247 1190 	movw	r1, #29072	@ 0x7190
 8018ae2:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8018ae6:	6888      	ldr	r0, [r1, #8]
 8018ae8:	68c9      	ldr	r1, [r1, #12]
 8018aea:	74e0      	strb	r0, [r4, #19]
 8018aec:	68f8      	ldr	r0, [r7, #12]
 8018aee:	70a1      	strb	r1, [r4, #2]
 8018af0:	b1f8      	cbz	r0, 8018b32 <llhwc_set_scan_param+0x298>
 8018af2:	f8d8 1018 	ldr.w	r1, [r8, #24]
 8018af6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8018afa:	4391      	bics	r1, r2
 8018afc:	7902      	ldrb	r2, [r0, #4]
 8018afe:	7943      	ldrb	r3, [r0, #5]
 8018b00:	4411      	add	r1, r2
 8018b02:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
 8018b06:	f8c8 1018 	str.w	r1, [r8, #24]
 8018b0a:	7801      	ldrb	r1, [r0, #0]
 8018b0c:	7842      	ldrb	r2, [r0, #1]
 8018b0e:	7883      	ldrb	r3, [r0, #2]
 8018b10:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
 8018b14:	78c0      	ldrb	r0, [r0, #3]
 8018b16:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8018b1a:	ea41 6000 	orr.w	r0, r1, r0, lsl #24
 8018b1e:	f8c8 001c 	str.w	r0, [r8, #28]
 8018b22:	f8d8 0018 	ldr.w	r0, [r8, #24]
 8018b26:	f89b 1000 	ldrb.w	r1, [fp]
 8018b2a:	f361 4010 	bfi	r0, r1, #16, #1
 8018b2e:	f8c8 0018 	str.w	r0, [r8, #24]
 8018b32:	6878      	ldr	r0, [r7, #4]
 8018b34:	f644 51d3 	movw	r1, #19923	@ 0x4dd3
 8018b38:	6160      	str	r0, [r4, #20]
 8018b3a:	6878      	ldr	r0, [r7, #4]
 8018b3c:	f2c1 0162 	movt	r1, #4194	@ 0x1062
 8018b40:	0080      	lsls	r0, r0, #2
 8018b42:	fba0 0101 	umull	r0, r1, r0, r1
 8018b46:	08c8      	lsrs	r0, r1, #3
 8018b48:	6831      	ldr	r1, [r6, #0]
 8018b4a:	6168      	str	r0, [r5, #20]
 8018b4c:	f247 3018 	movw	r0, #29464	@ 0x7318
 8018b50:	2900      	cmp	r1, #0
 8018b52:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8018b56:	f04f 0100 	mov.w	r1, #0
 8018b5a:	6281      	str	r1, [r0, #40]	@ 0x28
 8018b5c:	d006      	beq.n	8018b6c <llhwc_set_scan_param+0x2d2>
 8018b5e:	6870      	ldr	r0, [r6, #4]
 8018b60:	b120      	cbz	r0, 8018b6c <llhwc_set_scan_param+0x2d2>
 8018b62:	6060      	str	r0, [r4, #4]
 8018b64:	6830      	ldr	r0, [r6, #0]
 8018b66:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8018b6a:	e011      	b.n	8018b90 <llhwc_set_scan_param+0x2f6>
 8018b6c:	f646 5090 	movw	r0, #28048	@ 0x6d90
 8018b70:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8018b74:	7941      	ldrb	r1, [r0, #5]
 8018b76:	f64b 62d6 	movw	r2, #48854	@ 0xbed6
 8018b7a:	6800      	ldr	r0, [r0, #0]
 8018b7c:	f6c8 6289 	movt	r2, #36489	@ 0x8e89
 8018b80:	2901      	cmp	r1, #1
 8018b82:	bf08      	it	eq
 8018b84:	4602      	moveq	r2, r0
 8018b86:	f245 5055 	movw	r0, #21845	@ 0x5555
 8018b8a:	f2c0 0055 	movt	r0, #85	@ 0x55
 8018b8e:	6062      	str	r2, [r4, #4]
 8018b90:	7ae1      	ldrb	r1, [r4, #11]
 8018b92:	ea40 6001 	orr.w	r0, r0, r1, lsl #24
 8018b96:	60a0      	str	r0, [r4, #8]
 8018b98:	f8d8 0030 	ldr.w	r0, [r8, #48]	@ 0x30
 8018b9c:	f89b 1001 	ldrb.w	r1, [fp, #1]
 8018ba0:	f361 0002 	bfi	r0, r1, #0, #3
 8018ba4:	f8c8 0030 	str.w	r0, [r8, #48]	@ 0x30
 8018ba8:	f8d8 0000 	ldr.w	r0, [r8]
 8018bac:	9902      	ldr	r1, [sp, #8]
 8018bae:	f361 0004 	bfi	r0, r1, #0, #5
 8018bb2:	f8c8 0000 	str.w	r0, [r8]
 8018bb6:	9a03      	ldr	r2, [sp, #12]
 8018bb8:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8018bba:	2128      	movs	r1, #40	@ 0x28
 8018bbc:	73e1      	strb	r1, [r4, #15]
 8018bbe:	b112      	cbz	r2, 8018bc6 <llhwc_set_scan_param+0x32c>
 8018bc0:	f00b fb78 	bl	80242b4 <llhwc_cmn_get_desc>
 8018bc4:	e002      	b.n	8018bcc <llhwc_set_scan_param+0x332>
 8018bc6:	2101      	movs	r1, #1
 8018bc8:	f00a ff9a 	bl	8023b00 <llhwc_cmn_alloc_desc>
 8018bcc:	f247 31d0 	movw	r1, #29648	@ 0x73d0
 8018bd0:	2500      	movs	r5, #0
 8018bd2:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8018bd6:	2230      	movs	r2, #48	@ 0x30
 8018bd8:	4604      	mov	r4, r0
 8018bda:	f6c4 0502 	movt	r5, #18434	@ 0x4802
 8018bde:	f00b fcb3 	bl	8024548 <ble_memcpy>
 8018be2:	f8d5 0408 	ldr.w	r0, [r5, #1032]	@ 0x408
 8018be6:	f364 000f 	bfi	r0, r4, #0, #16
 8018bea:	f8c5 0408 	str.w	r0, [r5, #1032]	@ 0x408
 8018bee:	2000      	movs	r0, #0
 8018bf0:	e006      	b.n	8018c00 <llhwc_set_scan_param+0x366>
 8018bf2:	2042      	movs	r0, #66	@ 0x42
 8018bf4:	f006 fe60 	bl	801f8b8 <bsp_debug_gpio_toggle>
 8018bf8:	6830      	ldr	r0, [r6, #0]
 8018bfa:	f005 fe36 	bl	801e86a <free_buff_hdr>
 8018bfe:	2007      	movs	r0, #7
 8018c00:	b005      	add	sp, #20
 8018c02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018c06 <llhwc_set_init_param>:
 8018c06:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018c0a:	b083      	sub	sp, #12
 8018c0c:	460f      	mov	r7, r1
 8018c0e:	4606      	mov	r6, r0
 8018c10:	f640 040c 	movw	r4, #2060	@ 0x80c
 8018c14:	2001      	movs	r0, #1
 8018c16:	2101      	movs	r1, #1
 8018c18:	9201      	str	r2, [sp, #4]
 8018c1a:	f6c4 0402 	movt	r4, #18434	@ 0x4802
 8018c1e:	f04f 0a01 	mov.w	sl, #1
 8018c22:	f006 fdfe 	bl	801f822 <bsp_assert>
 8018c26:	f646 5948 	movw	r9, #27976	@ 0x6d48
 8018c2a:	f247 35d0 	movw	r5, #29648	@ 0x73d0
 8018c2e:	f2c2 0900 	movt	r9, #8192	@ 0x2000
 8018c32:	2002      	movs	r0, #2
 8018c34:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 8018c38:	f897 b00d 	ldrb.w	fp, [r7, #13]
 8018c3c:	f04f 0800 	mov.w	r8, #0
 8018c40:	f889 0034 	strb.w	r0, [r9, #52]	@ 0x34
 8018c44:	4628      	mov	r0, r5
 8018c46:	2100      	movs	r1, #0
 8018c48:	2224      	movs	r2, #36	@ 0x24
 8018c4a:	f88d 800b 	strb.w	r8, [sp, #11]
 8018c4e:	f889 8033 	strb.w	r8, [r9, #51]	@ 0x33
 8018c52:	f00b fcc9 	bl	80245e8 <ble_memset>
 8018c56:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8018c5a:	7b39      	ldrb	r1, [r7, #12]
 8018c5c:	8028      	strh	r0, [r5, #0]
 8018c5e:	f641 0054 	movw	r0, #6228	@ 0x1854
 8018c62:	f889 1030 	strb.w	r1, [r9, #48]	@ 0x30
 8018c66:	f6c0 0003 	movt	r0, #2051	@ 0x803
 8018c6a:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 8018c6e:	6862      	ldr	r2, [r4, #4]
 8018c70:	f810 0c4a 	ldrb.w	r0, [r0, #-74]
 8018c74:	f361 0205 	bfi	r2, r1, #0, #6
 8018c78:	6062      	str	r2, [r4, #4]
 8018c7a:	2101      	movs	r1, #1
 8018c7c:	2201      	movs	r2, #1
 8018c7e:	f007 ff9e 	bl	8020bbe <llhwc_phy_set_ch_config>
 8018c82:	f10d 000b 	add.w	r0, sp, #11
 8018c86:	f00d fb31 	bl	80262ec <db_get_tx_power_value>
 8018c8a:	f99d 100b 	ldrsb.w	r1, [sp, #11]
 8018c8e:	2001      	movs	r0, #1
 8018c90:	2200      	movs	r2, #0
 8018c92:	2301      	movs	r3, #1
 8018c94:	f8cd a000 	str.w	sl, [sp]
 8018c98:	f009 fb7f 	bl	802239a <ll_tx_pwr_if_tx_pwr_params_config>
 8018c9c:	f649 615c 	movw	r1, #40540	@ 0x9e5c
 8018ca0:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8018ca4:	2000      	movs	r0, #0
 8018ca6:	f005 fdb2 	bl	801e80e <allocate_data_packet>
 8018caa:	f646 51f8 	movw	r1, #28152	@ 0x6df8
 8018cae:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8018cb2:	6008      	str	r0, [r1, #0]
 8018cb4:	b380      	cbz	r0, 8018d18 <llhwc_set_init_param+0x112>
 8018cb6:	8801      	ldrh	r1, [r0, #0]
 8018cb8:	8940      	ldrh	r0, [r0, #10]
 8018cba:	f240 0a00 	movw	sl, #0
 8018cbe:	4408      	add	r0, r1
 8018cc0:	3804      	subs	r0, #4
 8018cc2:	83e8      	strh	r0, [r5, #30]
 8018cc4:	f6c4 0002 	movt	r0, #18434	@ 0x4802
 8018cc8:	2100      	movs	r1, #0
 8018cca:	2204      	movs	r2, #4
 8018ccc:	f6c4 0a02 	movt	sl, #18434	@ 0x4802
 8018cd0:	f00b fc8a 	bl	80245e8 <ble_memset>
 8018cd4:	78e8      	ldrb	r0, [r5, #3]
 8018cd6:	8be9      	ldrh	r1, [r5, #30]
 8018cd8:	f000 00e0 	and.w	r0, r0, #224	@ 0xe0
 8018cdc:	3001      	adds	r0, #1
 8018cde:	70e8      	strb	r0, [r5, #3]
 8018ce0:	f851 000a 	ldr.w	r0, [r1, sl]
 8018ce4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8018ce8:	4310      	orrs	r0, r2
 8018cea:	f841 000a 	str.w	r0, [r1, sl]
 8018cee:	2040      	movs	r0, #64	@ 0x40
 8018cf0:	e9c9 0808 	strd	r0, r8, [r9, #32]
 8018cf4:	7bb8      	ldrb	r0, [r7, #14]
 8018cf6:	ea4b 210b 	orr.w	r1, fp, fp, lsl #8
 8018cfa:	f889 0031 	strb.w	r0, [r9, #49]	@ 0x31
 8018cfe:	f501 3080 	add.w	r0, r1, #65536	@ 0x10000
 8018d02:	f7ff fbe7 	bl	80184d4 <llhwc_switch_rate>
 8018d06:	7b78      	ldrb	r0, [r7, #13]
 8018d08:	2804      	cmp	r0, #4
 8018d0a:	d10a      	bne.n	8018d22 <llhwc_set_init_param+0x11c>
 8018d0c:	68a8      	ldr	r0, [r5, #8]
 8018d0e:	f04f 4160 	mov.w	r1, #3758096384	@ 0xe0000000
 8018d12:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8018d16:	e011      	b.n	8018d3c <llhwc_set_init_param+0x136>
 8018d18:	2042      	movs	r0, #66	@ 0x42
 8018d1a:	f006 fdcd 	bl	801f8b8 <bsp_debug_gpio_toggle>
 8018d1e:	2007      	movs	r0, #7
 8018d20:	e0df      	b.n	8018ee2 <llhwc_set_init_param+0x2dc>
 8018d22:	f641 015a 	movw	r1, #6234	@ 0x185a
 8018d26:	f6c0 0103 	movt	r1, #2051	@ 0x803
 8018d2a:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
 8018d2e:	68a9      	ldr	r1, [r5, #8]
 8018d30:	f04f 52d8 	mov.w	r2, #452984832	@ 0x1b000000
 8018d34:	eb02 6000 	add.w	r0, r2, r0, lsl #24
 8018d38:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8018d3c:	4308      	orrs	r0, r1
 8018d3e:	60a8      	str	r0, [r5, #8]
 8018d40:	88b8      	ldrh	r0, [r7, #4]
 8018d42:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8018d46:	3804      	subs	r0, #4
 8018d48:	b281      	uxth	r1, r0
 8018d4a:	83a8      	strh	r0, [r5, #28]
 8018d4c:	ea41 000a 	orr.w	r0, r1, sl
 8018d50:	2100      	movs	r1, #0
 8018d52:	2204      	movs	r2, #4
 8018d54:	f00b fc48 	bl	80245e8 <ble_memset>
 8018d58:	8ba8      	ldrh	r0, [r5, #28]
 8018d5a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8018d5e:	ea40 000a 	orr.w	r0, r0, sl
 8018d62:	6801      	ldr	r1, [r0, #0]
 8018d64:	f1bb 0f04 	cmp.w	fp, #4
 8018d68:	ea41 0102 	orr.w	r1, r1, r2
 8018d6c:	6001      	str	r1, [r0, #0]
 8018d6e:	6878      	ldr	r0, [r7, #4]
 8018d70:	f646 51fc 	movw	r1, #28156	@ 0x6dfc
 8018d74:	f100 4036 	add.w	r0, r0, #3053453312	@ 0xb6000000
 8018d78:	f100 70ff 	add.w	r0, r0, #33423360	@ 0x1fe0000
 8018d7c:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8018d80:	6008      	str	r0, [r1, #0]
 8018d82:	d106      	bne.n	8018d92 <llhwc_set_init_param+0x18c>
 8018d84:	8ba8      	ldrh	r0, [r5, #28]
 8018d86:	ea40 000a 	orr.w	r0, r0, sl
 8018d8a:	6801      	ldr	r1, [r0, #0]
 8018d8c:	f041 6100 	orr.w	r1, r1, #134217728	@ 0x8000000
 8018d90:	6001      	str	r1, [r0, #0]
 8018d92:	7a70      	ldrb	r0, [r6, #9]
 8018d94:	f000 00fe 	and.w	r0, r0, #254	@ 0xfe
 8018d98:	2802      	cmp	r0, #2
 8018d9a:	d108      	bne.n	8018dae <llhwc_set_init_param+0x1a8>
 8018d9c:	6f20      	ldr	r0, [r4, #112]	@ 0x70
 8018d9e:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8018da2:	f889 0018 	strb.w	r0, [r9, #24]
 8018da6:	6f20      	ldr	r0, [r4, #112]	@ 0x70
 8018da8:	f020 0004 	bic.w	r0, r0, #4
 8018dac:	6720      	str	r0, [r4, #112]	@ 0x70
 8018dae:	f247 1090 	movw	r0, #29072	@ 0x7190
 8018db2:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8018db6:	e9d0 1002 	ldrd	r1, r0, [r0, #8]
 8018dba:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 8018dbe:	74e9      	strb	r1, [r5, #19]
 8018dc0:	70a8      	strb	r0, [r5, #2]
 8018dc2:	69a1      	ldr	r1, [r4, #24]
 8018dc4:	683a      	ldr	r2, [r7, #0]
 8018dc6:	ea21 010c 	bic.w	r1, r1, ip
 8018dca:	7913      	ldrb	r3, [r2, #4]
 8018dcc:	7950      	ldrb	r0, [r2, #5]
 8018dce:	4419      	add	r1, r3
 8018dd0:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
 8018dd4:	61a0      	str	r0, [r4, #24]
 8018dd6:	7810      	ldrb	r0, [r2, #0]
 8018dd8:	7851      	ldrb	r1, [r2, #1]
 8018dda:	7893      	ldrb	r3, [r2, #2]
 8018ddc:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
 8018de0:	78d1      	ldrb	r1, [r2, #3]
 8018de2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8018de6:	ea40 6001 	orr.w	r0, r0, r1, lsl #24
 8018dea:	61e0      	str	r0, [r4, #28]
 8018dec:	69a0      	ldr	r0, [r4, #24]
 8018dee:	7a71      	ldrb	r1, [r6, #9]
 8018df0:	7a32      	ldrb	r2, [r6, #8]
 8018df2:	f361 4010 	bfi	r0, r1, #16, #1
 8018df6:	2a05      	cmp	r2, #5
 8018df8:	61a0      	str	r0, [r4, #24]
 8018dfa:	d118      	bne.n	8018e2e <llhwc_set_init_param+0x228>
 8018dfc:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8018dfe:	7931      	ldrb	r1, [r6, #4]
 8018e00:	ea20 000c 	bic.w	r0, r0, ip
 8018e04:	7972      	ldrb	r2, [r6, #5]
 8018e06:	4408      	add	r0, r1
 8018e08:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 8018e0c:	63a0      	str	r0, [r4, #56]	@ 0x38
 8018e0e:	7830      	ldrb	r0, [r6, #0]
 8018e10:	7871      	ldrb	r1, [r6, #1]
 8018e12:	78b2      	ldrb	r2, [r6, #2]
 8018e14:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
 8018e18:	78f1      	ldrb	r1, [r6, #3]
 8018e1a:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8018e1e:	ea40 6001 	orr.w	r0, r0, r1, lsl #24
 8018e22:	63e0      	str	r0, [r4, #60]	@ 0x3c
 8018e24:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8018e26:	7ab1      	ldrb	r1, [r6, #10]
 8018e28:	f361 4010 	bfi	r0, r1, #16, #1
 8018e2c:	63a0      	str	r0, [r4, #56]	@ 0x38
 8018e2e:	68b8      	ldr	r0, [r7, #8]
 8018e30:	f644 51d3 	movw	r1, #19923	@ 0x4dd3
 8018e34:	6168      	str	r0, [r5, #20]
 8018e36:	68b8      	ldr	r0, [r7, #8]
 8018e38:	f2c1 0162 	movt	r1, #4194	@ 0x1062
 8018e3c:	0080      	lsls	r0, r0, #2
 8018e3e:	fba0 0101 	umull	r0, r1, r0, r1
 8018e42:	08c8      	lsrs	r0, r1, #3
 8018e44:	f8c9 0014 	str.w	r0, [r9, #20]
 8018e48:	f247 3018 	movw	r0, #29464	@ 0x7318
 8018e4c:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8018e50:	2100      	movs	r1, #0
 8018e52:	6281      	str	r1, [r0, #40]	@ 0x28
 8018e54:	f646 5090 	movw	r0, #28048	@ 0x6d90
 8018e58:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8018e5c:	7941      	ldrb	r1, [r0, #5]
 8018e5e:	f64b 62d6 	movw	r2, #48854	@ 0xbed6
 8018e62:	6800      	ldr	r0, [r0, #0]
 8018e64:	f6c8 6289 	movt	r2, #36489	@ 0x8e89
 8018e68:	2901      	cmp	r1, #1
 8018e6a:	bf08      	it	eq
 8018e6c:	4602      	moveq	r2, r0
 8018e6e:	68a8      	ldr	r0, [r5, #8]
 8018e70:	f245 5155 	movw	r1, #21845	@ 0x5555
 8018e74:	f2c0 0155 	movt	r1, #85	@ 0x55
 8018e78:	f361 0017 	bfi	r0, r1, #0, #24
 8018e7c:	606a      	str	r2, [r5, #4]
 8018e7e:	60a8      	str	r0, [r5, #8]
 8018e80:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8018e82:	7a31      	ldrb	r1, [r6, #8]
 8018e84:	f361 0002 	bfi	r0, r1, #0, #3
 8018e88:	6320      	str	r0, [r4, #48]	@ 0x30
 8018e8a:	6820      	ldr	r0, [r4, #0]
 8018e8c:	2106      	movs	r1, #6
 8018e8e:	f361 0004 	bfi	r0, r1, #0, #5
 8018e92:	6020      	str	r0, [r4, #0]
 8018e94:	f646 704c 	movw	r0, #28492	@ 0x6f4c
 8018e98:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8018e9c:	7800      	ldrb	r0, [r0, #0]
 8018e9e:	2801      	cmp	r0, #1
 8018ea0:	d103      	bne.n	8018eaa <llhwc_set_init_param+0x2a4>
 8018ea2:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8018ea4:	f440 4000 	orr.w	r0, r0, #32768	@ 0x8000
 8018ea8:	6360      	str	r0, [r4, #52]	@ 0x34
 8018eaa:	f8d9 0028 	ldr.w	r0, [r9, #40]	@ 0x28
 8018eae:	2128      	movs	r1, #40	@ 0x28
 8018eb0:	f1b8 0f00 	cmp.w	r8, #0
 8018eb4:	73e9      	strb	r1, [r5, #15]
 8018eb6:	d002      	beq.n	8018ebe <llhwc_set_init_param+0x2b8>
 8018eb8:	f00b f9fc 	bl	80242b4 <llhwc_cmn_get_desc>
 8018ebc:	e002      	b.n	8018ec4 <llhwc_set_init_param+0x2be>
 8018ebe:	2101      	movs	r1, #1
 8018ec0:	f00a fe1e 	bl	8023b00 <llhwc_cmn_alloc_desc>
 8018ec4:	f247 31d0 	movw	r1, #29648	@ 0x73d0
 8018ec8:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8018ecc:	2230      	movs	r2, #48	@ 0x30
 8018ece:	4604      	mov	r4, r0
 8018ed0:	f00b fb3a 	bl	8024548 <ble_memcpy>
 8018ed4:	f8da 0408 	ldr.w	r0, [sl, #1032]	@ 0x408
 8018ed8:	f364 000f 	bfi	r0, r4, #0, #16
 8018edc:	f8ca 0408 	str.w	r0, [sl, #1032]	@ 0x408
 8018ee0:	2000      	movs	r0, #0
 8018ee2:	b003      	add	sp, #12
 8018ee4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018ee8 <llhwc_set_conn_evnt_param>:
 8018ee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018eec:	b089      	sub	sp, #36	@ 0x24
 8018eee:	460f      	mov	r7, r1
 8018ef0:	4682      	mov	sl, r0
 8018ef2:	e9d2 0102 	ldrd	r0, r1, [r2, #8]
 8018ef6:	f248 2500 	movw	r5, #33280	@ 0x8200
 8018efa:	9207      	str	r2, [sp, #28]
 8018efc:	f6c4 0502 	movt	r5, #18434	@ 0x4802
 8018f00:	f64f 76ff 	movw	r6, #65535	@ 0xffff
 8018f04:	f7ff fac8 	bl	8018498 <llhwc_get_sm_mode_from_event_type>
 8018f08:	4681      	mov	r9, r0
 8018f0a:	f240 1004 	movw	r0, #260	@ 0x104
 8018f0e:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8018f12:	6006      	str	r6, [r0, #0]
 8018f14:	201e      	movs	r0, #30
 8018f16:	f006 fccb 	bl	801f8b0 <bsp_debug_gpio_set>
 8018f1a:	f247 36d0 	movw	r6, #29648	@ 0x73d0
 8018f1e:	f2c2 0600 	movt	r6, #8192	@ 0x2000
 8018f22:	4630      	mov	r0, r6
 8018f24:	2100      	movs	r1, #0
 8018f26:	2224      	movs	r2, #36	@ 0x24
 8018f28:	f00b fb5e 	bl	80245e8 <ble_memset>
 8018f2c:	f105 0010 	add.w	r0, r5, #16
 8018f30:	2100      	movs	r1, #0
 8018f32:	2214      	movs	r2, #20
 8018f34:	f00b fb58 	bl	80245e8 <ble_memset>
 8018f38:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8018f3c:	8030      	strh	r0, [r6, #0]
 8018f3e:	f248 2008 	movw	r0, #33288	@ 0x8208
 8018f42:	8028      	strh	r0, [r5, #0]
 8018f44:	f44f 4002 	mov.w	r0, #33280	@ 0x8200
 8018f48:	f646 5848 	movw	r8, #27976	@ 0x6d48
 8018f4c:	8128      	strh	r0, [r5, #8]
 8018f4e:	f2c2 0800 	movt	r8, #8192	@ 0x2000
 8018f52:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8018f56:	b110      	cbz	r0, 8018f5e <llhwc_set_conn_evnt_param+0x76>
 8018f58:	2001      	movs	r0, #1
 8018f5a:	f888 0033 	strb.w	r0, [r8, #51]	@ 0x33
 8018f5e:	78b8      	ldrb	r0, [r7, #2]
 8018f60:	2102      	movs	r1, #2
 8018f62:	1e42      	subs	r2, r0, #1
 8018f64:	f8d8 0028 	ldr.w	r0, [r8, #40]	@ 0x28
 8018f68:	2a01      	cmp	r2, #1
 8018f6a:	f888 1034 	strb.w	r1, [r8, #52]	@ 0x34
 8018f6e:	d80a      	bhi.n	8018f86 <llhwc_set_conn_evnt_param+0x9e>
 8018f70:	2102      	movs	r1, #2
 8018f72:	f00a fdc5 	bl	8023b00 <llhwc_cmn_alloc_desc>
 8018f76:	9002      	str	r0, [sp, #8]
 8018f78:	3030      	adds	r0, #48	@ 0x30
 8018f7a:	2100      	movs	r1, #0
 8018f7c:	2230      	movs	r2, #48	@ 0x30
 8018f7e:	8030      	strh	r0, [r6, #0]
 8018f80:	f00b fb32 	bl	80245e8 <ble_memset>
 8018f84:	e003      	b.n	8018f8e <llhwc_set_conn_evnt_param+0xa6>
 8018f86:	2101      	movs	r1, #1
 8018f88:	f00a fdba 	bl	8023b00 <llhwc_cmn_alloc_desc>
 8018f8c:	9002      	str	r0, [sp, #8]
 8018f8e:	7838      	ldrb	r0, [r7, #0]
 8018f90:	6a31      	ldr	r1, [r6, #32]
 8018f92:	f000 0001 	and.w	r0, r0, #1
 8018f96:	f021 7100 	bic.w	r1, r1, #33554432	@ 0x2000000
 8018f9a:	ea41 6040 	orr.w	r0, r1, r0, lsl #25
 8018f9e:	6230      	str	r0, [r6, #32]
 8018fa0:	7879      	ldrb	r1, [r7, #1]
 8018fa2:	f020 7080 	bic.w	r0, r0, #16777216	@ 0x1000000
 8018fa6:	f001 0101 	and.w	r1, r1, #1
 8018faa:	ea40 6001 	orr.w	r0, r0, r1, lsl #24
 8018fae:	6230      	str	r0, [r6, #32]
 8018fb0:	9807      	ldr	r0, [sp, #28]
 8018fb2:	f890 0021 	ldrb.w	r0, [r0, #33]	@ 0x21
 8018fb6:	2804      	cmp	r0, #4
 8018fb8:	d105      	bne.n	8018fc6 <llhwc_set_conn_evnt_param+0xde>
 8018fba:	68b0      	ldr	r0, [r6, #8]
 8018fbc:	f04f 4161 	mov.w	r1, #3774873600	@ 0xe1000000
 8018fc0:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8018fc4:	e00c      	b.n	8018fe0 <llhwc_set_conn_evnt_param+0xf8>
 8018fc6:	f641 015a 	movw	r1, #6234	@ 0x185a
 8018fca:	f6c0 0103 	movt	r1, #2051	@ 0x803
 8018fce:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
 8018fd2:	68b1      	ldr	r1, [r6, #8]
 8018fd4:	f04f 52e8 	mov.w	r2, #486539264	@ 0x1d000000
 8018fd8:	eb02 6000 	add.w	r0, r2, r0, lsl #24
 8018fdc:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8018fe0:	4308      	orrs	r0, r1
 8018fe2:	f247 1190 	movw	r1, #29072	@ 0x7190
 8018fe6:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8018fea:	e9d1 2102 	ldrd	r2, r1, [r1, #8]
 8018fee:	9c07      	ldr	r4, [sp, #28]
 8018ff0:	74f2      	strb	r2, [r6, #19]
 8018ff2:	6922      	ldr	r2, [r4, #16]
 8018ff4:	70b1      	strb	r1, [r6, #2]
 8018ff6:	1d91      	adds	r1, r2, #6
 8018ff8:	60b0      	str	r0, [r6, #8]
 8018ffa:	6171      	str	r1, [r6, #20]
 8018ffc:	f8da 1000 	ldr.w	r1, [sl]
 8019000:	0e00      	lsrs	r0, r0, #24
 8019002:	f360 611f 	bfi	r1, r0, #24, #8
 8019006:	60b1      	str	r1, [r6, #8]
 8019008:	f8da 0004 	ldr.w	r0, [sl, #4]
 801900c:	f640 010c 	movw	r1, #2060	@ 0x80c
 8019010:	6070      	str	r0, [r6, #4]
 8019012:	20fb      	movs	r0, #251	@ 0xfb
 8019014:	73f0      	strb	r0, [r6, #15]
 8019016:	7820      	ldrb	r0, [r4, #0]
 8019018:	f6c4 0102 	movt	r1, #18434	@ 0x4802
 801901c:	f888 0030 	strb.w	r0, [r8, #48]	@ 0x30
 8019020:	680a      	ldr	r2, [r1, #0]
 8019022:	280a      	cmp	r0, #10
 8019024:	f369 0204 	bfi	r2, r9, #0, #5
 8019028:	600a      	str	r2, [r1, #0]
 801902a:	684a      	ldr	r2, [r1, #4]
 801902c:	f240 0b00 	movw	fp, #0
 8019030:	f360 0205 	bfi	r2, r0, #0, #6
 8019034:	604a      	str	r2, [r1, #4]
 8019036:	f04f 0101 	mov.w	r1, #1
 801903a:	bf88      	it	hi
 801903c:	2102      	movhi	r1, #2
 801903e:	4408      	add	r0, r1
 8019040:	b2c0      	uxtb	r0, r0
 8019042:	2101      	movs	r1, #1
 8019044:	2201      	movs	r2, #1
 8019046:	2501      	movs	r5, #1
 8019048:	f6c4 0b02 	movt	fp, #18434	@ 0x4802
 801904c:	f007 fdb7 	bl	8020bbe <llhwc_phy_set_ch_config>
 8019050:	6a20      	ldr	r0, [r4, #32]
 8019052:	f7ff fa3f 	bl	80184d4 <llhwc_switch_rate>
 8019056:	f10d 0023 	add.w	r0, sp, #35	@ 0x23
 801905a:	f00d f947 	bl	80262ec <db_get_tx_power_value>
 801905e:	f99d 1023 	ldrsb.w	r1, [sp, #35]	@ 0x23
 8019062:	2001      	movs	r0, #1
 8019064:	2200      	movs	r2, #0
 8019066:	2301      	movs	r3, #1
 8019068:	9500      	str	r5, [sp, #0]
 801906a:	f009 f996 	bl	802239a <ll_tx_pwr_if_tx_pwr_params_config>
 801906e:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 8019072:	7d22      	ldrb	r2, [r4, #20]
 8019074:	f480 7080 	eor.w	r0, r0, #256	@ 0x100
 8019078:	2300      	movs	r3, #0
 801907a:	4308      	orrs	r0, r1
 801907c:	bf08      	it	eq
 801907e:	f04f 33ff 	moveq.w	r3, #4294967295	@ 0xffffffff
 8019082:	fab0 f180 	clz	r1, r0
 8019086:	0949      	lsrs	r1, r1, #5
 8019088:	428a      	cmp	r2, r1
 801908a:	9304      	str	r3, [sp, #16]
 801908c:	d10c      	bne.n	80190a8 <llhwc_set_conn_evnt_param+0x1c0>
 801908e:	f04f 0900 	mov.w	r9, #0
 8019092:	2800      	cmp	r0, #0
 8019094:	f04f 0a00 	mov.w	sl, #0
 8019098:	f04f 0000 	mov.w	r0, #0
 801909c:	f04f 0500 	mov.w	r5, #0
 80190a0:	9005      	str	r0, [sp, #20]
 80190a2:	f000 8181 	beq.w	80193a8 <llhwc_set_conn_evnt_param+0x4c0>
 80190a6:	e1ef      	b.n	8019488 <llhwc_set_conn_evnt_param+0x5a0>
 80190a8:	2000      	movs	r0, #0
 80190aa:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80190ae:	9006      	str	r0, [sp, #24]
 80190b0:	2500      	movs	r5, #0
 80190b2:	2000      	movs	r0, #0
 80190b4:	f04f 0a00 	mov.w	sl, #0
 80190b8:	f04f 0900 	mov.w	r9, #0
 80190bc:	2400      	movs	r4, #0
 80190be:	9005      	str	r0, [sp, #20]
 80190c0:	9703      	str	r7, [sp, #12]
 80190c2:	bf00      	nop
 80190c4:	9806      	ldr	r0, [sp, #24]
 80190c6:	b138      	cbz	r0, 80190d8 <llhwc_set_conn_evnt_param+0x1f0>
 80190c8:	f1b9 0f00 	cmp.w	r9, #0
 80190cc:	d00e      	beq.n	80190ec <llhwc_set_conn_evnt_param+0x204>
 80190ce:	f04f 0b00 	mov.w	fp, #0
 80190d2:	2001      	movs	r0, #1
 80190d4:	e02a      	b.n	801912c <llhwc_set_conn_evnt_param+0x244>
 80190d6:	bf00      	nop
 80190d8:	b1a4      	cbz	r4, 8019104 <llhwc_set_conn_evnt_param+0x21c>
 80190da:	f649 615c 	movw	r1, #40540	@ 0x9e5c
 80190de:	4620      	mov	r0, r4
 80190e0:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 80190e4:	f005 fb93 	bl	801e80e <allocate_data_packet>
 80190e8:	4604      	mov	r4, r0
 80190ea:	e018      	b.n	801911e <llhwc_set_conn_evnt_param+0x236>
 80190ec:	f646 51f8 	movw	r1, #28152	@ 0x6df8
 80190f0:	2000      	movs	r0, #0
 80190f2:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 80190f6:	6008      	str	r0, [r1, #0]
 80190f8:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80190fc:	83f0      	strh	r0, [r6, #30]
 80190fe:	2001      	movs	r0, #1
 8019100:	9006      	str	r0, [sp, #24]
 8019102:	e062      	b.n	80191ca <llhwc_set_conn_evnt_param+0x2e2>
 8019104:	f649 615c 	movw	r1, #40540	@ 0x9e5c
 8019108:	2000      	movs	r0, #0
 801910a:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 801910e:	f005 fb7e 	bl	801e80e <allocate_data_packet>
 8019112:	4604      	mov	r4, r0
 8019114:	f646 50f8 	movw	r0, #28152	@ 0x6df8
 8019118:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801911c:	6004      	str	r4, [r0, #0]
 801911e:	b374      	cbz	r4, 801917e <llhwc_set_conn_evnt_param+0x296>
 8019120:	f1b9 0f00 	cmp.w	r9, #0
 8019124:	d043      	beq.n	80191ae <llhwc_set_conn_evnt_param+0x2c6>
 8019126:	f04f 0b01 	mov.w	fp, #1
 801912a:	2000      	movs	r0, #0
 801912c:	9006      	str	r0, [sp, #24]
 801912e:	b2e8      	uxtb	r0, r5
 8019130:	2801      	cmp	r0, #1
 8019132:	d821      	bhi.n	8019178 <llhwc_set_conn_evnt_param+0x290>
 8019134:	9807      	ldr	r0, [sp, #28]
 8019136:	6980      	ldr	r0, [r0, #24]
 8019138:	f850 6029 	ldr.w	r6, [r0, r9, lsl #2]
 801913c:	f248 2000 	movw	r0, #33280	@ 0x8200
 8019140:	f6c4 0002 	movt	r0, #18434	@ 0x4802
 8019144:	4286      	cmp	r6, r0
 8019146:	d01c      	beq.n	8019182 <llhwc_set_conn_evnt_param+0x29a>
 8019148:	f64f 70fc 	movw	r0, #65532	@ 0xfffc
 801914c:	f2cb 70fd 	movt	r0, #47101	@ 0xb7fd
 8019150:	46a8      	mov	r8, r5
 8019152:	1835      	adds	r5, r6, r0
 8019154:	4627      	mov	r7, r4
 8019156:	f856 4d04 	ldr.w	r4, [r6, #-4]!
 801915a:	2100      	movs	r1, #0
 801915c:	2204      	movs	r2, #4
 801915e:	4630      	mov	r0, r6
 8019160:	f00b fa42 	bl	80245e8 <ble_memset>
 8019164:	6830      	ldr	r0, [r6, #0]
 8019166:	0ea1      	lsrs	r1, r4, #26
 8019168:	f361 609a 	bfi	r0, r1, #26, #1
 801916c:	6030      	str	r0, [r6, #0]
 801916e:	4646      	mov	r6, r8
 8019170:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8019174:	463c      	mov	r4, r7
 8019176:	e07e      	b.n	8019276 <llhwc_set_conn_evnt_param+0x38e>
 8019178:	462e      	mov	r6, r5
 801917a:	4655      	mov	r5, sl
 801917c:	e09e      	b.n	80192bc <llhwc_set_conn_evnt_param+0x3d4>
 801917e:	2400      	movs	r4, #0
 8019180:	e7a2      	b.n	80190c8 <llhwc_set_conn_evnt_param+0x1e0>
 8019182:	0628      	lsls	r0, r5, #24
 8019184:	4628      	mov	r0, r5
 8019186:	f248 2508 	movw	r5, #33288	@ 0x8208
 801918a:	bf08      	it	eq
 801918c:	f44f 4502 	moveq.w	r5, #33280	@ 0x8200
 8019190:	f5ba 4f02 	cmp.w	sl, #33280	@ 0x8200
 8019194:	f100 0601 	add.w	r6, r0, #1
 8019198:	d06d      	beq.n	8019276 <llhwc_set_conn_evnt_param+0x38e>
 801919a:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 801919e:	4582      	cmp	sl, r0
 80191a0:	d15a      	bne.n	8019258 <llhwc_set_conn_evnt_param+0x370>
 80191a2:	f240 1004 	movw	r0, #260	@ 0x104
 80191a6:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80191aa:	6800      	ldr	r0, [r0, #0]
 80191ac:	e05b      	b.n	8019266 <llhwc_set_conn_evnt_param+0x37e>
 80191ae:	8820      	ldrh	r0, [r4, #0]
 80191b0:	2204      	movs	r2, #4
 80191b2:	3804      	subs	r0, #4
 80191b4:	83f0      	strh	r0, [r6, #30]
 80191b6:	b280      	uxth	r0, r0
 80191b8:	8961      	ldrh	r1, [r4, #10]
 80191ba:	2300      	movs	r3, #0
 80191bc:	4408      	add	r0, r1
 80191be:	ea40 000b 	orr.w	r0, r0, fp
 80191c2:	2100      	movs	r1, #0
 80191c4:	9306      	str	r3, [sp, #24]
 80191c6:	f00b fa0f 	bl	80245e8 <ble_memset>
 80191ca:	9807      	ldr	r0, [sp, #28]
 80191cc:	f248 2100 	movw	r1, #33280	@ 0x8200
 80191d0:	6980      	ldr	r0, [r0, #24]
 80191d2:	f6c4 0102 	movt	r1, #18434	@ 0x4802
 80191d6:	6800      	ldr	r0, [r0, #0]
 80191d8:	46a0      	mov	r8, r4
 80191da:	4288      	cmp	r0, r1
 80191dc:	d018      	beq.n	8019210 <llhwc_set_conn_evnt_param+0x328>
 80191de:	3804      	subs	r0, #4
 80191e0:	b281      	uxth	r1, r0
 80191e2:	83b0      	strh	r0, [r6, #28]
 80191e4:	ea41 000b 	orr.w	r0, r1, fp
 80191e8:	463c      	mov	r4, r7
 80191ea:	462f      	mov	r7, r5
 80191ec:	6805      	ldr	r5, [r0, #0]
 80191ee:	2100      	movs	r1, #0
 80191f0:	2204      	movs	r2, #4
 80191f2:	f00b f9f9 	bl	80245e8 <ble_memset>
 80191f6:	8bb0      	ldrh	r0, [r6, #28]
 80191f8:	0eaa      	lsrs	r2, r5, #26
 80191fa:	ea40 000b 	orr.w	r0, r0, fp
 80191fe:	6801      	ldr	r1, [r0, #0]
 8019200:	463d      	mov	r5, r7
 8019202:	f362 619a 	bfi	r1, r2, #26, #1
 8019206:	6001      	str	r1, [r0, #0]
 8019208:	f8b6 a01c 	ldrh.w	sl, [r6, #28]
 801920c:	4627      	mov	r7, r4
 801920e:	e004      	b.n	801921a <llhwc_set_conn_evnt_param+0x332>
 8019210:	f44f 4a02 	mov.w	sl, #33280	@ 0x8200
 8019214:	3501      	adds	r5, #1
 8019216:	f8a6 a01c 	strh.w	sl, [r6, #28]
 801921a:	9807      	ldr	r0, [sp, #28]
 801921c:	8bf1      	ldrh	r1, [r6, #30]
 801921e:	f890 0020 	ldrb.w	r0, [r0, #32]
 8019222:	9105      	str	r1, [sp, #20]
 8019224:	2804      	cmp	r0, #4
 8019226:	d10c      	bne.n	8019242 <llhwc_set_conn_evnt_param+0x35a>
 8019228:	9807      	ldr	r0, [sp, #28]
 801922a:	4644      	mov	r4, r8
 801922c:	8c40      	ldrh	r0, [r0, #34]	@ 0x22
 801922e:	2801      	cmp	r0, #1
 8019230:	d009      	beq.n	8019246 <llhwc_set_conn_evnt_param+0x35e>
 8019232:	2802      	cmp	r0, #2
 8019234:	d10d      	bne.n	8019252 <llhwc_set_conn_evnt_param+0x36a>
 8019236:	ea4a 000b 	orr.w	r0, sl, fp
 801923a:	6801      	ldr	r1, [r0, #0]
 801923c:	f021 6100 	bic.w	r1, r1, #134217728	@ 0x8000000
 8019240:	e006      	b.n	8019250 <llhwc_set_conn_evnt_param+0x368>
 8019242:	4644      	mov	r4, r8
 8019244:	e005      	b.n	8019252 <llhwc_set_conn_evnt_param+0x36a>
 8019246:	ea4a 000b 	orr.w	r0, sl, fp
 801924a:	6801      	ldr	r1, [r0, #0]
 801924c:	f041 6100 	orr.w	r1, r1, #134217728	@ 0x8000000
 8019250:	6001      	str	r1, [r0, #0]
 8019252:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8019256:	e060      	b.n	801931a <llhwc_set_conn_evnt_param+0x432>
 8019258:	f240 1004 	movw	r0, #260	@ 0x104
 801925c:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8019260:	f8c0 a000 	str.w	sl, [r0]
 8019264:	4650      	mov	r0, sl
 8019266:	2100      	movs	r1, #0
 8019268:	f6c4 0102 	movt	r1, #18434	@ 0x4802
 801926c:	4408      	add	r0, r1
 801926e:	7901      	ldrb	r1, [r0, #4]
 8019270:	f001 01ef 	and.w	r1, r1, #239	@ 0xef
 8019274:	7101      	strb	r1, [r0, #4]
 8019276:	2100      	movs	r1, #0
 8019278:	f6c4 0102 	movt	r1, #18434	@ 0x4802
 801927c:	f85a 0001 	ldr.w	r0, [sl, r1]
 8019280:	f365 000f 	bfi	r0, r5, #0, #16
 8019284:	f84a 0001 	str.w	r0, [sl, r1]
 8019288:	9807      	ldr	r0, [sp, #28]
 801928a:	f890 0020 	ldrb.w	r0, [r0, #32]
 801928e:	2804      	cmp	r0, #4
 8019290:	d114      	bne.n	80192bc <llhwc_set_conn_evnt_param+0x3d4>
 8019292:	9807      	ldr	r0, [sp, #28]
 8019294:	8c40      	ldrh	r0, [r0, #34]	@ 0x22
 8019296:	2801      	cmp	r0, #1
 8019298:	d008      	beq.n	80192ac <llhwc_set_conn_evnt_param+0x3c4>
 801929a:	2802      	cmp	r0, #2
 801929c:	d10e      	bne.n	80192bc <llhwc_set_conn_evnt_param+0x3d4>
 801929e:	2100      	movs	r1, #0
 80192a0:	f6c4 0102 	movt	r1, #18434	@ 0x4802
 80192a4:	5868      	ldr	r0, [r5, r1]
 80192a6:	f020 6000 	bic.w	r0, r0, #134217728	@ 0x8000000
 80192aa:	e005      	b.n	80192b8 <llhwc_set_conn_evnt_param+0x3d0>
 80192ac:	2100      	movs	r1, #0
 80192ae:	f6c4 0102 	movt	r1, #18434	@ 0x4802
 80192b2:	5868      	ldr	r0, [r5, r1]
 80192b4:	f040 6000 	orr.w	r0, r0, #134217728	@ 0x8000000
 80192b8:	5068      	str	r0, [r5, r1]
 80192ba:	bf00      	nop
 80192bc:	f1bb 0f00 	cmp.w	fp, #0
 80192c0:	d020      	beq.n	8019304 <llhwc_set_conn_evnt_param+0x41c>
 80192c2:	6820      	ldr	r0, [r4, #0]
 80192c4:	f64f 71fc 	movw	r1, #65532	@ 0xfffc
 80192c8:	f2cb 71fd 	movt	r1, #47101	@ 0xb7fd
 80192cc:	4627      	mov	r7, r4
 80192ce:	1844      	adds	r4, r0, r1
 80192d0:	3804      	subs	r0, #4
 80192d2:	2100      	movs	r1, #0
 80192d4:	2204      	movs	r2, #4
 80192d6:	f00b f987 	bl	80245e8 <ble_memset>
 80192da:	f240 0b00 	movw	fp, #0
 80192de:	9905      	ldr	r1, [sp, #20]
 80192e0:	f6c4 0b02 	movt	fp, #18434	@ 0x4802
 80192e4:	f851 000b 	ldr.w	r0, [r1, fp]
 80192e8:	46aa      	mov	sl, r5
 80192ea:	f364 000f 	bfi	r0, r4, #0, #16
 80192ee:	f841 000b 	str.w	r0, [r1, fp]
 80192f2:	9405      	str	r4, [sp, #20]
 80192f4:	463c      	mov	r4, r7
 80192f6:	4635      	mov	r5, r6
 80192f8:	f247 36d0 	movw	r6, #29648	@ 0x73d0
 80192fc:	9f03      	ldr	r7, [sp, #12]
 80192fe:	f2c2 0600 	movt	r6, #8192	@ 0x2000
 8019302:	e00a      	b.n	801931a <llhwc_set_conn_evnt_param+0x432>
 8019304:	46aa      	mov	sl, r5
 8019306:	4635      	mov	r5, r6
 8019308:	f247 36d0 	movw	r6, #29648	@ 0x73d0
 801930c:	9f03      	ldr	r7, [sp, #12]
 801930e:	f240 0b00 	movw	fp, #0
 8019312:	f2c2 0600 	movt	r6, #8192	@ 0x2000
 8019316:	f6c4 0b02 	movt	fp, #18434	@ 0x4802
 801931a:	9807      	ldr	r0, [sp, #28]
 801931c:	6980      	ldr	r0, [r0, #24]
 801931e:	f850 0029 	ldr.w	r0, [r0, r9, lsl #2]
 8019322:	7801      	ldrb	r1, [r0, #0]
 8019324:	f001 0103 	and.w	r1, r1, #3
 8019328:	2903      	cmp	r1, #3
 801932a:	d10e      	bne.n	801934a <llhwc_set_conn_evnt_param+0x462>
 801932c:	7901      	ldrb	r1, [r0, #4]
 801932e:	f041 0120 	orr.w	r1, r1, #32
 8019332:	2922      	cmp	r1, #34	@ 0x22
 8019334:	d109      	bne.n	801934a <llhwc_set_conn_evnt_param+0x462>
 8019336:	f64f 71fc 	movw	r1, #65532	@ 0xfffc
 801933a:	f2cb 71fd 	movt	r1, #47101	@ 0xb7fd
 801933e:	4408      	add	r0, r1
 8019340:	f646 51fc 	movw	r1, #28156	@ 0x6dfc
 8019344:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8019348:	6008      	str	r0, [r1, #0]
 801934a:	78b8      	ldrb	r0, [r7, #2]
 801934c:	2801      	cmp	r0, #1
 801934e:	d115      	bne.n	801937c <llhwc_set_conn_evnt_param+0x494>
 8019350:	f10b 0004 	add.w	r0, fp, #4
 8019354:	f85a 1000 	ldr.w	r1, [sl, r0]
 8019358:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801935c:	b171      	cbz	r1, 801937c <llhwc_set_conn_evnt_param+0x494>
 801935e:	f85a 200b 	ldr.w	r2, [sl, fp]
 8019362:	0152      	lsls	r2, r2, #5
 8019364:	d40a      	bmi.n	801937c <llhwc_set_conn_evnt_param+0x494>
 8019366:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 801936a:	eb02 2101 	add.w	r1, r2, r1, lsl #8
 801936e:	f85a 2000 	ldr.w	r2, [sl, r0]
 8019372:	0a09      	lsrs	r1, r1, #8
 8019374:	f361 220f 	bfi	r2, r1, #8, #8
 8019378:	f84a 2000 	str.w	r2, [sl, r0]
 801937c:	9807      	ldr	r0, [sp, #28]
 801937e:	f109 0901 	add.w	r9, r9, #1
 8019382:	7d00      	ldrb	r0, [r0, #20]
 8019384:	4440      	add	r0, r8
 8019386:	4581      	cmp	r9, r0
 8019388:	f4ff ae9c 	bcc.w	80190c4 <llhwc_set_conn_evnt_param+0x1dc>
 801938c:	9807      	ldr	r0, [sp, #28]
 801938e:	e9d0 0102 	ldrd	r0, r1, [r0, #8]
 8019392:	f480 7080 	eor.w	r0, r0, #256	@ 0x100
 8019396:	4308      	orrs	r0, r1
 8019398:	d116      	bne.n	80193c8 <llhwc_set_conn_evnt_param+0x4e0>
 801939a:	b2e8      	uxtb	r0, r5
 801939c:	f646 5848 	movw	r8, #27976	@ 0x6d48
 80193a0:	2801      	cmp	r0, #1
 80193a2:	f2c2 0800 	movt	r8, #8192	@ 0x2000
 80193a6:	d84e      	bhi.n	8019446 <llhwc_set_conn_evnt_param+0x55e>
 80193a8:	9807      	ldr	r0, [sp, #28]
 80193aa:	f248 2100 	movw	r1, #33280	@ 0x8200
 80193ae:	6980      	ldr	r0, [r0, #24]
 80193b0:	f6c4 0102 	movt	r1, #18434	@ 0x4802
 80193b4:	f850 0029 	ldr.w	r0, [r0, r9, lsl #2]
 80193b8:	4288      	cmp	r0, r1
 80193ba:	d00a      	beq.n	80193d2 <llhwc_set_conn_evnt_param+0x4ea>
 80193bc:	f64f 71fc 	movw	r1, #65532	@ 0xfffc
 80193c0:	f2cb 71fd 	movt	r1, #47101	@ 0xb7fd
 80193c4:	4408      	add	r0, r1
 80193c6:	e021      	b.n	801940c <llhwc_set_conn_evnt_param+0x524>
 80193c8:	f646 5848 	movw	r8, #27976	@ 0x6d48
 80193cc:	f2c2 0800 	movt	r8, #8192	@ 0x2000
 80193d0:	e052      	b.n	8019478 <llhwc_set_conn_evnt_param+0x590>
 80193d2:	f5ba 4f02 	cmp.w	sl, #33280	@ 0x8200
 80193d6:	f105 0501 	add.w	r5, r5, #1
 80193da:	d015      	beq.n	8019408 <llhwc_set_conn_evnt_param+0x520>
 80193dc:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80193e0:	4582      	cmp	sl, r0
 80193e2:	d105      	bne.n	80193f0 <llhwc_set_conn_evnt_param+0x508>
 80193e4:	f240 1004 	movw	r0, #260	@ 0x104
 80193e8:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80193ec:	6800      	ldr	r0, [r0, #0]
 80193ee:	e006      	b.n	80193fe <llhwc_set_conn_evnt_param+0x516>
 80193f0:	f240 1004 	movw	r0, #260	@ 0x104
 80193f4:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80193f8:	f8c0 a000 	str.w	sl, [r0]
 80193fc:	4650      	mov	r0, sl
 80193fe:	4458      	add	r0, fp
 8019400:	7901      	ldrb	r1, [r0, #4]
 8019402:	f001 01ef 	and.w	r1, r1, #239	@ 0xef
 8019406:	7101      	strb	r1, [r0, #4]
 8019408:	f248 2008 	movw	r0, #33288	@ 0x8208
 801940c:	f85a 100b 	ldr.w	r1, [sl, fp]
 8019410:	f360 010f 	bfi	r1, r0, #0, #16
 8019414:	f84a 100b 	str.w	r1, [sl, fp]
 8019418:	9907      	ldr	r1, [sp, #28]
 801941a:	f891 1020 	ldrb.w	r1, [r1, #32]
 801941e:	2904      	cmp	r1, #4
 8019420:	d110      	bne.n	8019444 <llhwc_set_conn_evnt_param+0x55c>
 8019422:	9907      	ldr	r1, [sp, #28]
 8019424:	8c49      	ldrh	r1, [r1, #34]	@ 0x22
 8019426:	2901      	cmp	r1, #1
 8019428:	d006      	beq.n	8019438 <llhwc_set_conn_evnt_param+0x550>
 801942a:	2902      	cmp	r1, #2
 801942c:	d10a      	bne.n	8019444 <llhwc_set_conn_evnt_param+0x55c>
 801942e:	f850 100b 	ldr.w	r1, [r0, fp]
 8019432:	f021 6100 	bic.w	r1, r1, #134217728	@ 0x8000000
 8019436:	e003      	b.n	8019440 <llhwc_set_conn_evnt_param+0x558>
 8019438:	f850 100b 	ldr.w	r1, [r0, fp]
 801943c:	f041 6100 	orr.w	r1, r1, #134217728	@ 0x8000000
 8019440:	f840 100b 	str.w	r1, [r0, fp]
 8019444:	4682      	mov	sl, r0
 8019446:	78b8      	ldrb	r0, [r7, #2]
 8019448:	2801      	cmp	r0, #1
 801944a:	d115      	bne.n	8019478 <llhwc_set_conn_evnt_param+0x590>
 801944c:	f10b 0004 	add.w	r0, fp, #4
 8019450:	f85a 1000 	ldr.w	r1, [sl, r0]
 8019454:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8019458:	b171      	cbz	r1, 8019478 <llhwc_set_conn_evnt_param+0x590>
 801945a:	f85a 200b 	ldr.w	r2, [sl, fp]
 801945e:	0152      	lsls	r2, r2, #5
 8019460:	d40a      	bmi.n	8019478 <llhwc_set_conn_evnt_param+0x590>
 8019462:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8019466:	eb02 2101 	add.w	r1, r2, r1, lsl #8
 801946a:	f85a 2000 	ldr.w	r2, [sl, r0]
 801946e:	0a09      	lsrs	r1, r1, #8
 8019470:	f361 220f 	bfi	r2, r1, #8, #8
 8019474:	f84a 2000 	str.w	r2, [sl, r0]
 8019478:	0628      	lsls	r0, r5, #24
 801947a:	d005      	beq.n	8019488 <llhwc_set_conn_evnt_param+0x5a0>
 801947c:	b2e8      	uxtb	r0, r5
 801947e:	2801      	cmp	r0, #1
 8019480:	d109      	bne.n	8019496 <llhwc_set_conn_evnt_param+0x5ae>
 8019482:	f1b9 0f00 	cmp.w	r9, #0
 8019486:	d006      	beq.n	8019496 <llhwc_set_conn_evnt_param+0x5ae>
 8019488:	f85a 000b 	ldr.w	r0, [sl, fp]
 801948c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8019490:	4308      	orrs	r0, r1
 8019492:	f84a 000b 	str.w	r0, [sl, fp]
 8019496:	78b8      	ldrb	r0, [r7, #2]
 8019498:	2801      	cmp	r0, #1
 801949a:	d106      	bne.n	80194aa <llhwc_set_conn_evnt_param+0x5c2>
 801949c:	7bf0      	ldrb	r0, [r6, #15]
 801949e:	f04f 6180 	mov.w	r1, #67108864	@ 0x4000000
 80194a2:	eb01 6000 	add.w	r0, r1, r0, lsl #24
 80194a6:	0e00      	lsrs	r0, r0, #24
 80194a8:	73f0      	strb	r0, [r6, #15]
 80194aa:	9a05      	ldr	r2, [sp, #20]
 80194ac:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80194b0:	4282      	cmp	r2, r0
 80194b2:	d004      	beq.n	80194be <llhwc_set_conn_evnt_param+0x5d6>
 80194b4:	f852 100b 	ldr.w	r1, [r2, fp]
 80194b8:	4308      	orrs	r0, r1
 80194ba:	f842 000b 	str.w	r0, [r2, fp]
 80194be:	9a07      	ldr	r2, [sp, #28]
 80194c0:	78f0      	ldrb	r0, [r6, #3]
 80194c2:	e9d2 2302 	ldrd	r2, r3, [r2, #8]
 80194c6:	f009 011f 	and.w	r1, r9, #31
 80194ca:	f000 00e0 	and.w	r0, r0, #224	@ 0xe0
 80194ce:	4408      	add	r0, r1
 80194d0:	70f0      	strb	r0, [r6, #3]
 80194d2:	e9c8 2308 	strd	r2, r3, [r8, #32]
 80194d6:	8bb0      	ldrh	r0, [r6, #28]
 80194d8:	9c02      	ldr	r4, [sp, #8]
 80194da:	ea40 000b 	orr.w	r0, r0, fp
 80194de:	78c1      	ldrb	r1, [r0, #3]
 80194e0:	2230      	movs	r2, #48	@ 0x30
 80194e2:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 80194e6:	70c1      	strb	r1, [r0, #3]
 80194e8:	4620      	mov	r0, r4
 80194ea:	4631      	mov	r1, r6
 80194ec:	f00b f82c 	bl	8024548 <ble_memcpy>
 80194f0:	f8db 0408 	ldr.w	r0, [fp, #1032]	@ 0x408
 80194f4:	f364 000f 	bfi	r0, r4, #0, #16
 80194f8:	f8cb 0408 	str.w	r0, [fp, #1032]	@ 0x408
 80194fc:	201e      	movs	r0, #30
 80194fe:	f006 f9d9 	bl	801f8b4 <bsp_debug_gpio_clear>
 8019502:	2000      	movs	r0, #0
 8019504:	b009      	add	sp, #36	@ 0x24
 8019506:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801950a <llhwc_conn_evnt_en_encry>:
 801950a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801950e:	b081      	sub	sp, #4
 8019510:	468b      	mov	fp, r1
 8019512:	f646 5148 	movw	r1, #27976	@ 0x6d48
 8019516:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 801951a:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 801951c:	4680      	mov	r8, r0
 801951e:	4608      	mov	r0, r1
 8019520:	f00a fef8 	bl	8024314 <llhwc_cmn_get_enc_desc>
 8019524:	4604      	mov	r4, r0
 8019526:	e9db 0202 	ldrd	r0, r2, [fp, #8]
 801952a:	f89b 501e 	ldrb.w	r5, [fp, #30]
 801952e:	f080 0080 	eor.w	r0, r0, #128	@ 0x80
 8019532:	f8d8 c00c 	ldr.w	ip, [r8, #12]
 8019536:	4310      	orrs	r0, r2
 8019538:	f894 2020 	ldrb.w	r2, [r4, #32]
 801953c:	f104 0021 	add.w	r0, r4, #33	@ 0x21
 8019540:	d128      	bne.n	8019594 <llhwc_conn_evnt_en_encry+0x8a>
 8019542:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8019546:	f884 2020 	strb.w	r2, [r4, #32]
 801954a:	4602      	mov	r2, r0
 801954c:	f812 3f08 	ldrb.w	r3, [r2, #8]!
 8019550:	7a47      	ldrb	r7, [r0, #9]
 8019552:	7941      	ldrb	r1, [r0, #5]
 8019554:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 8019558:	7892      	ldrb	r2, [r2, #2]
 801955a:	f890 e000 	ldrb.w	lr, [r0]
 801955e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 8019562:	4603      	mov	r3, r0
 8019564:	f813 7f04 	ldrb.w	r7, [r3, #4]!
 8019568:	f890 9002 	ldrb.w	r9, [r0, #2]
 801956c:	ea47 2101 	orr.w	r1, r7, r1, lsl #8
 8019570:	f890 a003 	ldrb.w	sl, [r0, #3]
 8019574:	789f      	ldrb	r7, [r3, #2]
 8019576:	78db      	ldrb	r3, [r3, #3]
 8019578:	7846      	ldrb	r6, [r0, #1]
 801957a:	ea47 2303 	orr.w	r3, r7, r3, lsl #8
 801957e:	ea49 290a 	orr.w	r9, r9, sl, lsl #8
 8019582:	ea4e 2706 	orr.w	r7, lr, r6, lsl #8
 8019586:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 801958a:	ea47 4709 	orr.w	r7, r7, r9, lsl #16
 801958e:	f021 0380 	bic.w	r3, r1, #128	@ 0x80
 8019592:	e026      	b.n	80195e2 <llhwc_conn_evnt_en_encry+0xd8>
 8019594:	f002 017f 	and.w	r1, r2, #127	@ 0x7f
 8019598:	f884 1020 	strb.w	r1, [r4, #32]
 801959c:	4601      	mov	r1, r0
 801959e:	f811 2f08 	ldrb.w	r2, [r1, #8]!
 80195a2:	7a43      	ldrb	r3, [r0, #9]
 80195a4:	4606      	mov	r6, r0
 80195a6:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 80195aa:	7889      	ldrb	r1, [r1, #2]
 80195ac:	7943      	ldrb	r3, [r0, #5]
 80195ae:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80195b2:	f816 1f04 	ldrb.w	r1, [r6, #4]!
 80195b6:	f890 9002 	ldrb.w	r9, [r0, #2]
 80195ba:	78c7      	ldrb	r7, [r0, #3]
 80195bc:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
 80195c0:	78b3      	ldrb	r3, [r6, #2]
 80195c2:	78f6      	ldrb	r6, [r6, #3]
 80195c4:	f890 e000 	ldrb.w	lr, [r0]
 80195c8:	ea49 2907 	orr.w	r9, r9, r7, lsl #8
 80195cc:	7847      	ldrb	r7, [r0, #1]
 80195ce:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
 80195d2:	ea4e 2707 	orr.w	r7, lr, r7, lsl #8
 80195d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80195da:	ea47 4709 	orr.w	r7, r7, r9, lsl #16
 80195de:	f041 0380 	orr.w	r3, r1, #128	@ 0x80
 80195e2:	0e39      	lsrs	r1, r7, #24
 80195e4:	70c1      	strb	r1, [r0, #3]
 80195e6:	0c39      	lsrs	r1, r7, #16
 80195e8:	7081      	strb	r1, [r0, #2]
 80195ea:	0a39      	lsrs	r1, r7, #8
 80195ec:	7041      	strb	r1, [r0, #1]
 80195ee:	4601      	mov	r1, r0
 80195f0:	f801 3f04 	strb.w	r3, [r1, #4]!
 80195f4:	7007      	strb	r7, [r0, #0]
 80195f6:	0e1f      	lsrs	r7, r3, #24
 80195f8:	70cf      	strb	r7, [r1, #3]
 80195fa:	0c1f      	lsrs	r7, r3, #16
 80195fc:	708f      	strb	r7, [r1, #2]
 80195fe:	0a19      	lsrs	r1, r3, #8
 8019600:	7141      	strb	r1, [r0, #5]
 8019602:	0a11      	lsrs	r1, r2, #8
 8019604:	7241      	strb	r1, [r0, #9]
 8019606:	f800 2f08 	strb.w	r2, [r0, #8]!
 801960a:	0c11      	lsrs	r1, r2, #16
 801960c:	7081      	strb	r1, [r0, #2]
 801960e:	1d20      	adds	r0, r4, #4
 8019610:	f108 0110 	add.w	r1, r8, #16
 8019614:	2210      	movs	r2, #16
 8019616:	ea4f 691c 	mov.w	r9, ip, lsr #24
 801961a:	f00a ff95 	bl	8024548 <ble_memcpy>
 801961e:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8019622:	f89b 101c 	ldrb.w	r1, [fp, #28]
 8019626:	f894 2020 	ldrb.w	r2, [r4, #32]
 801962a:	4408      	add	r0, r1
 801962c:	61e0      	str	r0, [r4, #28]
 801962e:	f89b 001d 	ldrb.w	r0, [fp, #29]
 8019632:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8019636:	f000 017f 	and.w	r1, r0, #127	@ 0x7f
 801963a:	4620      	mov	r0, r4
 801963c:	f810 6f25 	ldrb.w	r6, [r0, #37]!
 8019640:	4411      	add	r1, r2
 8019642:	f894 3026 	ldrb.w	r3, [r4, #38]	@ 0x26
 8019646:	f884 1020 	strb.w	r1, [r4, #32]
 801964a:	7881      	ldrb	r1, [r0, #2]
 801964c:	78c2      	ldrb	r2, [r0, #3]
 801964e:	ea46 2303 	orr.w	r3, r6, r3, lsl #8
 8019652:	ea41 2202 	orr.w	r2, r1, r2, lsl #8
 8019656:	f8d8 e00c 	ldr.w	lr, [r8, #12]
 801965a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 801965e:	4671      	mov	r1, lr
 8019660:	4623      	mov	r3, r4
 8019662:	f369 611f 	bfi	r1, r9, #24, #8
 8019666:	f803 ef21 	strb.w	lr, [r3, #33]!
 801966a:	f365 0206 	bfi	r2, r5, #0, #7
 801966e:	0c0d      	lsrs	r5, r1, #16
 8019670:	0a09      	lsrs	r1, r1, #8
 8019672:	7002      	strb	r2, [r0, #0]
 8019674:	f883 9003 	strb.w	r9, [r3, #3]
 8019678:	709d      	strb	r5, [r3, #2]
 801967a:	f884 1022 	strb.w	r1, [r4, #34]	@ 0x22
 801967e:	f8d8 7000 	ldr.w	r7, [r8]
 8019682:	f247 3cd0 	movw	ip, #29648	@ 0x73d0
 8019686:	6167      	str	r7, [r4, #20]
 8019688:	f8d8 7004 	ldr.w	r7, [r8, #4]
 801968c:	f2c2 0c00 	movt	ip, #8192	@ 0x2000
 8019690:	61a7      	str	r7, [r4, #24]
 8019692:	f8bc 701c 	ldrh.w	r7, [ip, #28]
 8019696:	f894 602b 	ldrb.w	r6, [r4, #43]	@ 0x2b
 801969a:	8067      	strh	r7, [r4, #2]
 801969c:	f8bc 701e 	ldrh.w	r7, [ip, #30]
 80196a0:	f248 08ff 	movw	r8, #33023	@ 0x80ff
 80196a4:	8027      	strh	r7, [r4, #0]
 80196a6:	f44f 0760 	mov.w	r7, #14680064	@ 0xe00000
 80196aa:	f2c0 0880 	movt	r8, #128	@ 0x80
 80196ae:	ea4f 4c06 	mov.w	ip, r6, lsl #16
 80196b2:	ea07 4606 	and.w	r6, r7, r6, lsl #16
 80196b6:	ea02 0708 	and.w	r7, r2, r8
 80196ba:	f884 1022 	strb.w	r1, [r4, #34]	@ 0x22
 80196be:	0c39      	lsrs	r1, r7, #16
 80196c0:	f506 2880 	add.w	r8, r6, #262144	@ 0x40000
 80196c4:	f507 7680 	add.w	r6, r7, #256	@ 0x100
 80196c8:	7081      	strb	r1, [r0, #2]
 80196ca:	2100      	movs	r1, #0
 80196cc:	70c1      	strb	r1, [r0, #3]
 80196ce:	0a31      	lsrs	r1, r6, #8
 80196d0:	f884 1026 	strb.w	r1, [r4, #38]	@ 0x26
 80196d4:	ea4f 4118 	mov.w	r1, r8, lsr #16
 80196d8:	7002      	strb	r2, [r0, #0]
 80196da:	2001      	movs	r0, #1
 80196dc:	f884 102b 	strb.w	r1, [r4, #43]	@ 0x2b
 80196e0:	f240 4168 	movw	r1, #1128	@ 0x468
 80196e4:	709d      	strb	r5, [r3, #2]
 80196e6:	f883 9003 	strb.w	r9, [r3, #3]
 80196ea:	f883 e000 	strb.w	lr, [r3]
 80196ee:	f884 c029 	strb.w	ip, [r4, #41]	@ 0x29
 80196f2:	f884 002a 	strb.w	r0, [r4, #42]	@ 0x2a
 80196f6:	f6c4 0102 	movt	r1, #18434	@ 0x4802
 80196fa:	680a      	ldr	r2, [r1, #0]
 80196fc:	f022 0201 	bic.w	r2, r2, #1
 8019700:	600a      	str	r2, [r1, #0]
 8019702:	698a      	ldr	r2, [r1, #24]
 8019704:	f360 0202 	bfi	r2, r0, #0, #3
 8019708:	618a      	str	r2, [r1, #24]
 801970a:	680a      	ldr	r2, [r1, #0]
 801970c:	f022 0218 	bic.w	r2, r2, #24
 8019710:	600a      	str	r2, [r1, #0]
 8019712:	f8d1 23a0 	ldr.w	r2, [r1, #928]	@ 0x3a0
 8019716:	f360 0245 	bfi	r2, r0, #1, #5
 801971a:	2003      	movs	r0, #3
 801971c:	f8c1 23a0 	str.w	r2, [r1, #928]	@ 0x3a0
 8019720:	f009 ff67 	bl	80235f2 <llhwc_cmn_crypto_aes_start>
 8019724:	f640 007c 	movw	r0, #2172	@ 0x87c
 8019728:	f6c4 0002 	movt	r0, #18434	@ 0x4802
 801972c:	6801      	ldr	r1, [r0, #0]
 801972e:	f041 0108 	orr.w	r1, r1, #8
 8019732:	6001      	str	r1, [r0, #0]
 8019734:	b001      	add	sp, #4
 8019736:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801973a <llhwc_goto_sleep>:
 801973a:	f240 4144 	movw	r1, #1092	@ 0x444
 801973e:	f6c4 0102 	movt	r1, #18434	@ 0x4802
 8019742:	6808      	ldr	r0, [r1, #0]
 8019744:	f040 0002 	orr.w	r0, r0, #2
 8019748:	6008      	str	r0, [r1, #0]
 801974a:	6808      	ldr	r0, [r1, #0]
 801974c:	f020 0202 	bic.w	r2, r0, #2
 8019750:	2001      	movs	r0, #1
 8019752:	600a      	str	r2, [r1, #0]
 8019754:	f009 b874 	b.w	8022840 <llhwc_pwr_switch>

08019758 <llhwc_get_prdc_clbr_evnt_cfg_time>:
 8019758:	f006 bcdb 	b.w	8020112 <llhwc_phy_get_prdc_clbr_cfg_time>

0801975c <llhwc_get_num_of_prdc_clbr_chnls>:
 801975c:	f006 b907 	b.w	801f96e <llhwc_phy_get_num_of_prdc_clbr_chnls>

08019760 <llhwc_prdc_clbr_exec>:
 8019760:	f646 5298 	movw	r2, #28056	@ 0x6d98
 8019764:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8019768:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 801976a:	2a00      	cmp	r2, #0
 801976c:	bf18      	it	ne
 801976e:	4770      	bxne	lr
 8019770:	f007 b940 	b.w	80209f4 <llhwc_phy_hndl_runtime_clbr>

08019774 <llhwc_prdc_clbr_init>:
 8019774:	b510      	push	{r4, lr}
 8019776:	f646 5448 	movw	r4, #27976	@ 0x6d48
 801977a:	f2c2 0400 	movt	r4, #8192	@ 0x2000
 801977e:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8019780:	b100      	cbz	r0, 8019784 <llhwc_prdc_clbr_init+0x10>
 8019782:	bd10      	pop	{r4, pc}
 8019784:	2000      	movs	r0, #0
 8019786:	f006 f901 	bl	801f98c <llhwc_phy_set_phy_clbr_state>
 801978a:	f7f8 f9f6 	bl	8011b7a <evnt_schdlr_rgstr_prdc_clbr_evnt>
 801978e:	63a0      	str	r0, [r4, #56]	@ 0x38
 8019790:	bd10      	pop	{r4, pc}

08019792 <llhwc_prdc_clbr_deinit>:
 8019792:	b5b0      	push	{r4, r5, r7, lr}
 8019794:	f646 5448 	movw	r4, #27976	@ 0x6d48
 8019798:	f2c2 0400 	movt	r4, #8192	@ 0x2000
 801979c:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 801979e:	b168      	cbz	r0, 80197bc <llhwc_prdc_clbr_deinit+0x2a>
 80197a0:	2000      	movs	r0, #0
 80197a2:	2500      	movs	r5, #0
 80197a4:	f006 f8f2 	bl	801f98c <llhwc_phy_set_phy_clbr_state>
 80197a8:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80197aa:	f7f9 f91d 	bl	80129e8 <evnt_schdlr_unrgstr_evnt>
 80197ae:	fab0 f080 	clz	r0, r0
 80197b2:	0940      	lsrs	r0, r0, #5
 80197b4:	2101      	movs	r1, #1
 80197b6:	f006 f834 	bl	801f822 <bsp_assert>
 80197ba:	63a5      	str	r5, [r4, #56]	@ 0x38
 80197bc:	bdb0      	pop	{r4, r5, r7, pc}

080197be <llhwc_set_evnt_hndl>:
 80197be:	f646 5148 	movw	r1, #27976	@ 0x6d48
 80197c2:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 80197c6:	6288      	str	r0, [r1, #40]	@ 0x28
 80197c8:	4770      	bx	lr

080197ca <llhwc_reset_evnt_hndl>:
 80197ca:	f646 5048 	movw	r0, #27976	@ 0x6d48
 80197ce:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80197d2:	2100      	movs	r1, #0
 80197d4:	6281      	str	r1, [r0, #40]	@ 0x28
 80197d6:	4770      	bx	lr

080197d8 <llhwc_enable_augment_event>:
 80197d8:	f640 0120 	movw	r1, #2080	@ 0x820
 80197dc:	f6c4 0102 	movt	r1, #18434	@ 0x4802
 80197e0:	680a      	ldr	r2, [r1, #0]
 80197e2:	2801      	cmp	r0, #1
 80197e4:	d10b      	bne.n	80197fe <llhwc_enable_augment_event+0x26>
 80197e6:	f646 5090 	movw	r0, #28048	@ 0x6d90
 80197ea:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80197ee:	7900      	ldrb	r0, [r0, #4]
 80197f0:	f360 4298 	bfi	r2, r0, #18, #7
 80197f4:	600a      	str	r2, [r1, #0]
 80197f6:	6808      	ldr	r0, [r1, #0]
 80197f8:	f040 7000 	orr.w	r0, r0, #33554432	@ 0x2000000
 80197fc:	e001      	b.n	8019802 <llhwc_enable_augment_event+0x2a>
 80197fe:	f022 7000 	bic.w	r0, r2, #33554432	@ 0x2000000
 8019802:	6008      	str	r0, [r1, #0]
 8019804:	4770      	bx	lr

08019806 <llhwc_stop_augmented_mode>:
 8019806:	f646 5090 	movw	r0, #28048	@ 0x6d90
 801980a:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801980e:	2100      	movs	r1, #0
 8019810:	7141      	strb	r1, [r0, #5]
 8019812:	4770      	bx	lr

08019814 <llhwc_is_in_augmented_mode>:
 8019814:	f646 5090 	movw	r0, #28048	@ 0x6d90
 8019818:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801981c:	7940      	ldrb	r0, [r0, #5]
 801981e:	4770      	bx	lr

08019820 <llhwc_get_dtm_curr_mode>:
 8019820:	b510      	push	{r4, lr}
 8019822:	2101      	movs	r1, #1
 8019824:	4604      	mov	r4, r0
 8019826:	2800      	cmp	r0, #0
 8019828:	bf18      	it	ne
 801982a:	2001      	movne	r0, #1
 801982c:	f005 fff9 	bl	801f822 <bsp_assert>
 8019830:	f646 5048 	movw	r0, #27976	@ 0x6d48
 8019834:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8019838:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
 801983a:	6020      	str	r0, [r4, #0]
 801983c:	bd10      	pop	{r4, pc}
	...

08019840 <llhwc_sm_done_isr>:
 8019840:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019844:	270c      	movs	r7, #12
 8019846:	f6c4 0702 	movt	r7, #18434	@ 0x4802
 801984a:	6839      	ldr	r1, [r7, #0]
 801984c:	4604      	mov	r4, r0
 801984e:	f021 0001 	bic.w	r0, r1, #1
 8019852:	6038      	str	r0, [r7, #0]
 8019854:	2000      	movs	r0, #0
 8019856:	f240 4540 	movw	r5, #1088	@ 0x440
 801985a:	2101      	movs	r1, #1
 801985c:	f04f 0800 	mov.w	r8, #0
 8019860:	2c18      	cmp	r4, #24
 8019862:	bf38      	it	cc
 8019864:	2001      	movcc	r0, #1
 8019866:	f6c4 0502 	movt	r5, #18434	@ 0x4802
 801986a:	f005 ffda 	bl	801f822 <bsp_assert>
 801986e:	f646 5648 	movw	r6, #27976	@ 0x6d48
 8019872:	f2c2 0600 	movt	r6, #8192	@ 0x2000
 8019876:	2010      	movs	r0, #16
 8019878:	e9c6 8008 	strd	r8, r0, [r6, #32]
 801987c:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 801987e:	07c0      	lsls	r0, r0, #31
 8019880:	d003      	beq.n	801988a <llhwc_sm_done_isr+0x4a>
 8019882:	bf00      	nop
 8019884:	6828      	ldr	r0, [r5, #0]
 8019886:	0740      	lsls	r0, r0, #29
 8019888:	d5fc      	bpl.n	8019884 <llhwc_sm_done_isr+0x44>
 801988a:	f00b f836 	bl	80248fa <pta_ble_event_complete>
 801988e:	f8d5 0438 	ldr.w	r0, [r5, #1080]	@ 0x438
 8019892:	f641 0164 	movw	r1, #6244	@ 0x1864
 8019896:	f040 0008 	orr.w	r0, r0, #8
 801989a:	f8c5 0438 	str.w	r0, [r5, #1080]	@ 0x438
 801989e:	f8d5 0438 	ldr.w	r0, [r5, #1080]	@ 0x438
 80198a2:	f6c0 0103 	movt	r1, #2051	@ 0x803
 80198a6:	f020 0008 	bic.w	r0, r0, #8
 80198aa:	f8c5 0438 	str.w	r0, [r5, #1080]	@ 0x438
 80198ae:	f8d7 03f8 	ldr.w	r0, [r7, #1016]	@ 0x3f8
 80198b2:	f851 1024 	ldr.w	r1, [r1, r4, lsl #2]
 80198b6:	f020 0001 	bic.w	r0, r0, #1
 80198ba:	f8c7 03f8 	str.w	r0, [r7, #1016]	@ 0x3f8
 80198be:	4788      	blx	r1
 80198c0:	e9d6 0108 	ldrd	r0, r1, [r6, #32]
 80198c4:	f081 0110 	eor.w	r1, r1, #16
 80198c8:	4308      	orrs	r0, r1
 80198ca:	d106      	bne.n	80198da <llhwc_sm_done_isr+0x9a>
 80198cc:	6930      	ldr	r0, [r6, #16]
 80198ce:	b120      	cbz	r0, 80198da <llhwc_sm_done_isr+0x9a>
 80198d0:	f896 1033 	ldrb.w	r1, [r6, #51]	@ 0x33
 80198d4:	2901      	cmp	r1, #1
 80198d6:	bf08      	it	eq
 80198d8:	4780      	blxeq	r0
 80198da:	e9d6 0108 	ldrd	r0, r1, [r6, #32]
 80198de:	f081 0110 	eor.w	r1, r1, #16
 80198e2:	4308      	orrs	r0, r1
 80198e4:	d103      	bne.n	80198ee <llhwc_sm_done_isr+0xae>
 80198e6:	2001      	movs	r0, #1
 80198e8:	2100      	movs	r1, #0
 80198ea:	f006 fcff 	bl	80202ec <llhwc_phy_strt_stp>
 80198ee:	e9d6 0108 	ldrd	r0, r1, [r6, #32]
 80198f2:	f081 0110 	eor.w	r1, r1, #16
 80198f6:	4308      	orrs	r0, r1
 80198f8:	d103      	bne.n	8019902 <llhwc_sm_done_isr+0xc2>
 80198fa:	2000      	movs	r0, #0
 80198fc:	2100      	movs	r1, #0
 80198fe:	f00a f967 	bl	8023bd0 <llhwc_cmn_control_aclk>
 8019902:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8019904:	07c0      	lsls	r0, r0, #31
 8019906:	d107      	bne.n	8019918 <llhwc_sm_done_isr+0xd8>
 8019908:	f640 007c 	movw	r0, #2172	@ 0x87c
 801990c:	f6c4 0002 	movt	r0, #18434	@ 0x4802
 8019910:	6801      	ldr	r1, [r0, #0]
 8019912:	f021 0108 	bic.w	r1, r1, #8
 8019916:	6001      	str	r1, [r0, #0]
 8019918:	f8d5 0438 	ldr.w	r0, [r5, #1080]	@ 0x438
 801991c:	f040 0004 	orr.w	r0, r0, #4
 8019920:	f8c5 0438 	str.w	r0, [r5, #1080]	@ 0x438
 8019924:	f8d5 0438 	ldr.w	r0, [r5, #1080]	@ 0x438
 8019928:	f020 0004 	bic.w	r0, r0, #4
 801992c:	f8c5 0438 	str.w	r0, [r5, #1080]	@ 0x438
 8019930:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08019934 <llhwc_adv_done>:
 8019934:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019938:	f247 34d0 	movw	r4, #29648	@ 0x73d0
 801993c:	f2c2 0400 	movt	r4, #8192	@ 0x2000
 8019940:	8be0      	ldrh	r0, [r4, #30]
 8019942:	f646 5648 	movw	r6, #27976	@ 0x6d48
 8019946:	2500      	movs	r5, #0
 8019948:	f2c2 0600 	movt	r6, #8192	@ 0x2000
 801994c:	f6c4 0502 	movt	r5, #18434	@ 0x4802
 8019950:	f8d6 8028 	ldr.w	r8, [r6, #40]	@ 0x28
 8019954:	ea40 0705 	orr.w	r7, r0, r5
 8019958:	204d      	movs	r0, #77	@ 0x4d
 801995a:	f005 ffa9 	bl	801f8b0 <bsp_debug_gpio_set>
 801995e:	8be0      	ldrh	r0, [r4, #30]
 8019960:	4328      	orrs	r0, r5
 8019962:	6844      	ldr	r4, [r0, #4]
 8019964:	f248 10f8 	movw	r0, #33272	@ 0x81f8
 8019968:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801996c:	f008 f866 	bl	8021a3c <os_mem_pool_alloc>
 8019970:	78f9      	ldrb	r1, [r7, #3]
 8019972:	4605      	mov	r5, r0
 8019974:	f001 0103 	and.w	r1, r1, #3
 8019978:	2902      	cmp	r1, #2
 801997a:	d108      	bne.n	801998e <llhwc_adv_done+0x5a>
 801997c:	f004 000f 	and.w	r0, r4, #15
 8019980:	3803      	subs	r0, #3
 8019982:	f020 0002 	bic.w	r0, r0, #2
 8019986:	fab0 f080 	clz	r0, r0
 801998a:	0941      	lsrs	r1, r0, #5
 801998c:	e000      	b.n	8019990 <llhwc_adv_done+0x5c>
 801998e:	2100      	movs	r1, #0
 8019990:	f640 070c 	movw	r7, #2060	@ 0x80c
 8019994:	f6c4 0702 	movt	r7, #18434	@ 0x4802
 8019998:	b335      	cbz	r5, 80199e8 <llhwc_adv_done+0xb4>
 801999a:	6ab0      	ldr	r0, [r6, #40]	@ 0x28
 801999c:	2301      	movs	r3, #1
 801999e:	61a8      	str	r0, [r5, #24]
 80199a0:	2000      	movs	r0, #0
 80199a2:	62b0      	str	r0, [r6, #40]	@ 0x28
 80199a4:	683a      	ldr	r2, [r7, #0]
 80199a6:	f885 0021 	strb.w	r0, [r5, #33]	@ 0x21
 80199aa:	f002 021f 	and.w	r2, r2, #31
 80199ae:	fa03 f202 	lsl.w	r2, r3, r2
 80199b2:	e9c5 2004 	strd	r2, r0, [r5, #16]
 80199b6:	60a8      	str	r0, [r5, #8]
 80199b8:	f247 3418 	movw	r4, #29464	@ 0x7318
 80199bc:	f646 50f4 	movw	r0, #28148	@ 0x6df4
 80199c0:	f2c2 0400 	movt	r4, #8192	@ 0x2000
 80199c4:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80199c8:	f894 203a 	ldrb.w	r2, [r4, #58]	@ 0x3a
 80199cc:	6800      	ldr	r0, [r0, #0]
 80199ce:	f885 1020 	strb.w	r1, [r5, #32]
 80199d2:	f885 3024 	strb.w	r3, [r5, #36]	@ 0x24
 80199d6:	f885 202d 	strb.w	r2, [r5, #45]	@ 0x2d
 80199da:	b149      	cbz	r1, 80199f0 <llhwc_adv_done+0xbc>
 80199dc:	f646 51f8 	movw	r1, #28152	@ 0x6df8
 80199e0:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 80199e4:	6008      	str	r0, [r1, #0]
 80199e6:	e005      	b.n	80199f4 <llhwc_adv_done+0xc0>
 80199e8:	2000      	movs	r0, #0
 80199ea:	f886 0033 	strb.w	r0, [r6, #51]	@ 0x33
 80199ee:	e032      	b.n	8019a56 <llhwc_adv_done+0x122>
 80199f0:	f004 ff3b 	bl	801e86a <free_buff_hdr>
 80199f4:	68f8      	ldr	r0, [r7, #12]
 80199f6:	f3c0 0142 	ubfx	r1, r0, #1, #3
 80199fa:	f64f 4054 	movw	r0, #64596	@ 0xfc54
 80199fe:	f6cf 70ff 	movt	r0, #65535	@ 0xffff
 8019a02:	5838      	ldr	r0, [r7, r0]
 8019a04:	8b22      	ldrh	r2, [r4, #24]
 8019a06:	8a23      	ldrh	r3, [r4, #16]
 8019a08:	1a80      	subs	r0, r0, r2
 8019a0a:	18c2      	adds	r2, r0, r3
 8019a0c:	4628      	mov	r0, r5
 8019a0e:	f000 fd9f 	bl	801a550 <llhwc_evnt_done>
 8019a12:	f64f 4038 	movw	r0, #64568	@ 0xfc38
 8019a16:	f6cf 70ff 	movt	r0, #65535	@ 0xffff
 8019a1a:	5839      	ldr	r1, [r7, r0]
 8019a1c:	f041 0102 	orr.w	r1, r1, #2
 8019a20:	5039      	str	r1, [r7, r0]
 8019a22:	5839      	ldr	r1, [r7, r0]
 8019a24:	f021 0102 	bic.w	r1, r1, #2
 8019a28:	5039      	str	r1, [r7, r0]
 8019a2a:	2000      	movs	r0, #0
 8019a2c:	4629      	mov	r1, r5
 8019a2e:	f007 fe30 	bl	8021692 <emngr_post_event>
 8019a32:	b2c0      	uxtb	r0, r0
 8019a34:	284d      	cmp	r0, #77	@ 0x4d
 8019a36:	d106      	bne.n	8019a46 <llhwc_adv_done+0x112>
 8019a38:	2000      	movs	r0, #0
 8019a3a:	2101      	movs	r1, #1
 8019a3c:	f005 fef1 	bl	801f822 <bsp_assert>
 8019a40:	4628      	mov	r0, r5
 8019a42:	f007 fffd 	bl	8021a40 <os_mem_pool_free>
 8019a46:	2001      	movs	r0, #1
 8019a48:	f008 fefa 	bl	8022840 <llhwc_pwr_switch>
 8019a4c:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8019a4e:	7e31      	ldrb	r1, [r6, #24]
 8019a50:	f361 0082 	bfi	r0, r1, #2, #1
 8019a54:	6738      	str	r0, [r7, #112]	@ 0x70
 8019a56:	4640      	mov	r0, r8
 8019a58:	f00a f8fc 	bl	8023c54 <llhwc_cmn_free_desc>
 8019a5c:	204d      	movs	r0, #77	@ 0x4d
 8019a5e:	f005 ff29 	bl	801f8b4 <bsp_debug_gpio_clear>
 8019a62:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8019a66:	f020 4080 	bic.w	r0, r0, #1073741824	@ 0x40000000
 8019a6a:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
 8019a6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08019a72 <llhwc_scan_done>:
 8019a72:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019a76:	b093      	sub	sp, #76	@ 0x4c
 8019a78:	f247 3418 	movw	r4, #29464	@ 0x7318
 8019a7c:	f2c2 0400 	movt	r4, #8192	@ 0x2000
 8019a80:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8019a82:	f646 5748 	movw	r7, #27976	@ 0x6d48
 8019a86:	900a      	str	r0, [sp, #40]	@ 0x28
 8019a88:	f646 50f8 	movw	r0, #28152	@ 0x6df8
 8019a8c:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8019a90:	6800      	ldr	r0, [r0, #0]
 8019a92:	f2c2 0700 	movt	r7, #8192	@ 0x2000
 8019a96:	900c      	str	r0, [sp, #48]	@ 0x30
 8019a98:	f894 003a 	ldrb.w	r0, [r4, #58]	@ 0x3a
 8019a9c:	2100      	movs	r1, #0
 8019a9e:	9005      	str	r0, [sp, #20]
 8019aa0:	7e38      	ldrb	r0, [r7, #24]
 8019aa2:	f640 0a0c 	movw	sl, #2060	@ 0x80c
 8019aa6:	9007      	str	r0, [sp, #28]
 8019aa8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8019aaa:	f240 0900 	movw	r9, #0
 8019aae:	e9cd 1110 	strd	r1, r1, [sp, #64]	@ 0x40
 8019ab2:	f6c4 0a02 	movt	sl, #18434	@ 0x4802
 8019ab6:	f88d 1036 	strb.w	r1, [sp, #54]	@ 0x36
 8019aba:	f6c4 0902 	movt	r9, #18434	@ 0x4802
 8019abe:	f00a fbf9 	bl	80242b4 <llhwc_cmn_get_desc>
 8019ac2:	4605      	mov	r5, r0
 8019ac4:	f007 fbaf 	bl	8021226 <llhwc_phy_activate_scan_req>
 8019ac8:	204e      	movs	r0, #78	@ 0x4e
 8019aca:	f005 fef1 	bl	801f8b0 <bsp_debug_gpio_set>
 8019ace:	f248 10f8 	movw	r0, #33272	@ 0x81f8
 8019ad2:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8019ad6:	f007 ffb1 	bl	8021a3c <os_mem_pool_alloc>
 8019ada:	8bea      	ldrh	r2, [r5, #30]
 8019adc:	4680      	mov	r8, r0
 8019ade:	f10d 0136 	add.w	r1, sp, #54	@ 0x36
 8019ae2:	4610      	mov	r0, r2
 8019ae4:	4642      	mov	r2, r8
 8019ae6:	9509      	str	r5, [sp, #36]	@ 0x24
 8019ae8:	f000 fdcc 	bl	801a684 <llhwc_calc_num_rx_pkts>
 8019aec:	4606      	mov	r6, r0
 8019aee:	f64f 4054 	movw	r0, #64596	@ 0xfc54
 8019af2:	f6cf 70ff 	movt	r0, #65535	@ 0xffff
 8019af6:	f8da e00c 	ldr.w	lr, [sl, #12]
 8019afa:	f85a 0000 	ldr.w	r0, [sl, r0]
 8019afe:	f247 35d0 	movw	r5, #29648	@ 0x73d0
 8019b02:	9004      	str	r0, [sp, #16]
 8019b04:	0630      	lsls	r0, r6, #24
 8019b06:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 8019b0a:	d021      	beq.n	8019b50 <llhwc_scan_done+0xde>
 8019b0c:	f646 6000 	movw	r0, #28160	@ 0x6e00
 8019b10:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8019b14:	6801      	ldr	r1, [r0, #0]
 8019b16:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8019b1a:	3101      	adds	r1, #1
 8019b1c:	2b24      	cmp	r3, #36	@ 0x24
 8019b1e:	bf88      	it	hi
 8019b20:	2100      	movhi	r1, #0
 8019b22:	6001      	str	r1, [r0, #0]
 8019b24:	8b20      	ldrh	r0, [r4, #24]
 8019b26:	8a23      	ldrh	r3, [r4, #16]
 8019b28:	8be9      	ldrh	r1, [r5, #30]
 8019b2a:	1a1a      	subs	r2, r3, r0
 8019b2c:	eb09 0001 	add.w	r0, r9, r1
 8019b30:	6840      	ldr	r0, [r0, #4]
 8019b32:	b2f3      	uxtb	r3, r6
 8019b34:	2b01      	cmp	r3, #1
 8019b36:	f000 000f 	and.w	r0, r0, #15
 8019b3a:	9203      	str	r2, [sp, #12]
 8019b3c:	d00d      	beq.n	8019b5a <llhwc_scan_done+0xe8>
 8019b3e:	ea41 0109 	orr.w	r1, r1, r9
 8019b42:	6809      	ldr	r1, [r1, #0]
 8019b44:	b289      	uxth	r1, r1
 8019b46:	4449      	add	r1, r9
 8019b48:	6849      	ldr	r1, [r1, #4]
 8019b4a:	f001 020f 	and.w	r2, r1, #15
 8019b4e:	e005      	b.n	8019b5c <llhwc_scan_done+0xea>
 8019b50:	8b20      	ldrh	r0, [r4, #24]
 8019b52:	8a21      	ldrh	r1, [r4, #16]
 8019b54:	1a08      	subs	r0, r1, r0
 8019b56:	9003      	str	r0, [sp, #12]
 8019b58:	2000      	movs	r0, #0
 8019b5a:	2200      	movs	r2, #0
 8019b5c:	f8da 1000 	ldr.w	r1, [sl]
 8019b60:	f646 5348 	movw	r3, #27976	@ 0x6d48
 8019b64:	f001 071f 	and.w	r7, r1, #31
 8019b68:	f8da 1068 	ldr.w	r1, [sl, #104]	@ 0x68
 8019b6c:	f04f 0c01 	mov.w	ip, #1
 8019b70:	9102      	str	r1, [sp, #8]
 8019b72:	f8da 1068 	ldr.w	r1, [sl, #104]	@ 0x68
 8019b76:	f1b8 0f00 	cmp.w	r8, #0
 8019b7a:	9101      	str	r1, [sp, #4]
 8019b7c:	f8da 100c 	ldr.w	r1, [sl, #12]
 8019b80:	f04f 0500 	mov.w	r5, #0
 8019b84:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8019b88:	9100      	str	r1, [sp, #0]
 8019b8a:	d00e      	beq.n	8019baa <llhwc_scan_done+0x138>
 8019b8c:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8019b8e:	2807      	cmp	r0, #7
 8019b90:	f8c8 1018 	str.w	r1, [r8, #24]
 8019b94:	4631      	mov	r1, r6
 8019b96:	bf18      	it	ne
 8019b98:	2100      	movne	r1, #0
 8019b9a:	b2f4      	uxtb	r4, r6
 8019b9c:	2a07      	cmp	r2, #7
 8019b9e:	bf18      	it	ne
 8019ba0:	4631      	movne	r1, r6
 8019ba2:	2c01      	cmp	r4, #1
 8019ba4:	bf98      	it	ls
 8019ba6:	4631      	movls	r1, r6
 8019ba8:	e002      	b.n	8019bb0 <llhwc_scan_done+0x13e>
 8019baa:	f883 5033 	strb.w	r5, [r3, #51]	@ 0x33
 8019bae:	2100      	movs	r1, #0
 8019bb0:	f893 2031 	ldrb.w	r2, [r3, #49]	@ 0x31
 8019bb4:	f1b0 0907 	subs.w	r9, r0, #7
 8019bb8:	7e9e      	ldrb	r6, [r3, #26]
 8019bba:	bf18      	it	ne
 8019bbc:	4689      	movne	r9, r1
 8019bbe:	060c      	lsls	r4, r1, #24
 8019bc0:	bf08      	it	eq
 8019bc2:	4689      	moveq	r9, r1
 8019bc4:	f3ce 0b42 	ubfx	fp, lr, #1, #3
 8019bc8:	2a00      	cmp	r2, #0
 8019bca:	bf18      	it	ne
 8019bcc:	4689      	movne	r9, r1
 8019bce:	2e00      	cmp	r6, #0
 8019bd0:	fa0c f607 	lsl.w	r6, ip, r7
 8019bd4:	9706      	str	r7, [sp, #24]
 8019bd6:	d10f      	bne.n	8019bf8 <llhwc_scan_done+0x186>
 8019bd8:	f1ab 0101 	sub.w	r1, fp, #1
 8019bdc:	fab1 f181 	clz	r1, r1
 8019be0:	fa5f f389 	uxtb.w	r3, r9
 8019be4:	0949      	lsrs	r1, r1, #5
 8019be6:	2b00      	cmp	r3, #0
 8019be8:	bf18      	it	ne
 8019bea:	2301      	movne	r3, #1
 8019bec:	4019      	ands	r1, r3
 8019bee:	bf1c      	itt	ne
 8019bf0:	f04f 0b00 	movne.w	fp, #0
 8019bf4:	f04f 0900 	movne.w	r9, #0
 8019bf8:	f1bb 0f00 	cmp.w	fp, #0
 8019bfc:	d11e      	bne.n	8019c3c <llhwc_scan_done+0x1ca>
 8019bfe:	ea5f 6109 	movs.w	r1, r9, lsl #24
 8019c02:	4634      	mov	r4, r6
 8019c04:	d01b      	beq.n	8019c3e <llhwc_scan_done+0x1cc>
 8019c06:	f646 5148 	movw	r1, #27976	@ 0x6d48
 8019c0a:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8019c0e:	2a00      	cmp	r2, #0
 8019c10:	bf18      	it	ne
 8019c12:	2201      	movne	r2, #1
 8019c14:	f891 1030 	ldrb.w	r1, [r1, #48]	@ 0x30
 8019c18:	2300      	movs	r3, #0
 8019c1a:	2925      	cmp	r1, #37	@ 0x25
 8019c1c:	bf38      	it	cc
 8019c1e:	2301      	movcc	r3, #1
 8019c20:	401a      	ands	r2, r3
 8019c22:	fa5f f189 	uxtb.w	r1, r9
 8019c26:	f7f9 ff05 	bl	8013a34 <evnt_schdlr_backoff_prcdr>
 8019c2a:	4604      	mov	r4, r0
 8019c2c:	f081 0010 	eor.w	r0, r1, #16
 8019c30:	ea54 0500 	orrs.w	r5, r4, r0
 8019c34:	bf0c      	ite	eq
 8019c36:	4634      	moveq	r4, r6
 8019c38:	460d      	movne	r5, r1
 8019c3a:	e000      	b.n	8019c3e <llhwc_scan_done+0x1cc>
 8019c3c:	4634      	mov	r4, r6
 8019c3e:	950b      	str	r5, [sp, #44]	@ 0x2c
 8019c40:	f646 5548 	movw	r5, #27976	@ 0x6d48
 8019c44:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 8019c48:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
 8019c4c:	f080 0010 	eor.w	r0, r0, #16
 8019c50:	4308      	orrs	r0, r1
 8019c52:	d11c      	bne.n	8019c8e <llhwc_scan_done+0x21c>
 8019c54:	6828      	ldr	r0, [r5, #0]
 8019c56:	f247 31d0 	movw	r1, #29648	@ 0x73d0
 8019c5a:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8019c5e:	8b89      	ldrh	r1, [r1, #28]
 8019c60:	f8ca 001c 	str.w	r0, [sl, #28]
 8019c64:	f8da 0018 	ldr.w	r0, [sl, #24]
 8019c68:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8019c6c:	4390      	bics	r0, r2
 8019c6e:	792a      	ldrb	r2, [r5, #4]
 8019c70:	796b      	ldrb	r3, [r5, #5]
 8019c72:	4410      	add	r0, r2
 8019c74:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8019c78:	f8ca 0018 	str.w	r0, [sl, #24]
 8019c7c:	2000      	movs	r0, #0
 8019c7e:	f6c4 0002 	movt	r0, #18434	@ 0x4802
 8019c82:	4408      	add	r0, r1
 8019c84:	6841      	ldr	r1, [r0, #4]
 8019c86:	68aa      	ldr	r2, [r5, #8]
 8019c88:	f362 1186 	bfi	r1, r2, #6, #1
 8019c8c:	6041      	str	r1, [r0, #4]
 8019c8e:	ea5f 6709 	movs.w	r7, r9, lsl #24
 8019c92:	9408      	str	r4, [sp, #32]
 8019c94:	d02c      	beq.n	8019cf0 <llhwc_scan_done+0x27e>
 8019c96:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8019c98:	f016 0f30 	tst.w	r6, #48	@ 0x30
 8019c9c:	6808      	ldr	r0, [r1, #0]
 8019c9e:	8949      	ldrh	r1, [r1, #10]
 8019ca0:	eb01 0200 	add.w	r2, r1, r0
 8019ca4:	5809      	ldr	r1, [r1, r0]
 8019ca6:	6850      	ldr	r0, [r2, #4]
 8019ca8:	900e      	str	r0, [sp, #56]	@ 0x38
 8019caa:	6890      	ldr	r0, [r2, #8]
 8019cac:	b282      	uxth	r2, r0
 8019cae:	920f      	str	r2, [sp, #60]	@ 0x3c
 8019cb0:	d01e      	beq.n	8019cf0 <llhwc_scan_done+0x27e>
 8019cb2:	fa5f f289 	uxtb.w	r2, r9
 8019cb6:	2a01      	cmp	r2, #1
 8019cb8:	d11a      	bne.n	8019cf0 <llhwc_scan_done+0x27e>
 8019cba:	f3c1 1180 	ubfx	r1, r1, #6, #1
 8019cbe:	b1b9      	cbz	r1, 8019cf0 <llhwc_scan_done+0x27e>
 8019cc0:	f400 4040 	and.w	r0, r0, #49152	@ 0xc000
 8019cc4:	f5b0 4f80 	cmp.w	r0, #16384	@ 0x4000
 8019cc8:	d112      	bne.n	8019cf0 <llhwc_scan_done+0x27e>
 8019cca:	aa0e      	add	r2, sp, #56	@ 0x38
 8019ccc:	f10d 0337 	add.w	r3, sp, #55	@ 0x37
 8019cd0:	2003      	movs	r0, #3
 8019cd2:	f7fe f822 	bl	8017d1a <llhwc_lst_search>
 8019cd6:	b128      	cbz	r0, 8019ce4 <llhwc_scan_done+0x272>
 8019cd8:	f640 060c 	movw	r6, #2060	@ 0x80c
 8019cdc:	2700      	movs	r7, #0
 8019cde:	f6c4 0602 	movt	r6, #18434	@ 0x4802
 8019ce2:	e10b      	b.n	8019efc <llhwc_scan_done+0x48a>
 8019ce4:	f89d 0037 	ldrb.w	r0, [sp, #55]	@ 0x37
 8019ce8:	07c0      	lsls	r0, r0, #31
 8019cea:	bf1c      	itt	ne
 8019cec:	2001      	movne	r0, #1
 8019cee:	7668      	strbne	r0, [r5, #25]
 8019cf0:	46b2      	mov	sl, r6
 8019cf2:	ae10      	add	r6, sp, #64	@ 0x40
 8019cf4:	4630      	mov	r0, r6
 8019cf6:	f008 fba8 	bl	802244a <llhwc_slptmr_get>
 8019cfa:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8019cfc:	4630      	mov	r0, r6
 8019cfe:	4621      	mov	r1, r4
 8019d00:	f007 fc52 	bl	80215a8 <ble_time_cmp_raw_reading>
 8019d04:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8019d06:	463e      	mov	r6, r7
 8019d08:	f1b0 3fff 	cmp.w	r0, #4294967295	@ 0xffffffff
 8019d0c:	bfce      	itee	gt
 8019d0e:	4620      	movgt	r0, r4
 8019d10:	4608      	movle	r0, r1
 8019d12:	4621      	movle	r1, r4
 8019d14:	f007 fc6d 	bl	80215f2 <ble_time_overflow_diff>
 8019d18:	6969      	ldr	r1, [r5, #20]
 8019d1a:	3012      	adds	r0, #18
 8019d1c:	1a0f      	subs	r7, r1, r0
 8019d1e:	bf28      	it	cs
 8019d20:	2f12      	cmpcs	r7, #18
 8019d22:	d26f      	bcs.n	8019e04 <llhwc_scan_done+0x392>
 8019d24:	f247 3118 	movw	r1, #29464	@ 0x7318
 8019d28:	2000      	movs	r0, #0
 8019d2a:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8019d2e:	970a      	str	r7, [sp, #40]	@ 0x28
 8019d30:	7668      	strb	r0, [r5, #25]
 8019d32:	6288      	str	r0, [r1, #40]	@ 0x28
 8019d34:	2701      	movs	r7, #1
 8019d36:	f1b8 0f00 	cmp.w	r8, #0
 8019d3a:	d028      	beq.n	8019d8e <llhwc_scan_done+0x31c>
 8019d3c:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 8019d40:	9b01      	ldr	r3, [sp, #4]
 8019d42:	2600      	movs	r6, #0
 8019d44:	f3c3 2340 	ubfx	r3, r3, #9, #1
 8019d48:	180a      	adds	r2, r1, r0
 8019d4a:	9800      	ldr	r0, [sp, #0]
 8019d4c:	f888 7024 	strb.w	r7, [r8, #36]	@ 0x24
 8019d50:	f3c0 0142 	ubfx	r1, r0, #1, #3
 8019d54:	9802      	ldr	r0, [sp, #8]
 8019d56:	f888 6025 	strb.w	r6, [r8, #37]	@ 0x25
 8019d5a:	f3c0 1040 	ubfx	r0, r0, #5, #1
 8019d5e:	f888 3026 	strb.w	r3, [r8, #38]	@ 0x26
 8019d62:	f888 0029 	strb.w	r0, [r8, #41]	@ 0x29
 8019d66:	fa5f f089 	uxtb.w	r0, r9
 8019d6a:	e9c8 a604 	strd	sl, r6, [r8, #16]
 8019d6e:	f888 9020 	strb.w	r9, [r8, #32]
 8019d72:	f888 6021 	strb.w	r6, [r8, #33]	@ 0x21
 8019d76:	2800      	cmp	r0, #0
 8019d78:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8019d7a:	bf18      	it	ne
 8019d7c:	4618      	movne	r0, r3
 8019d7e:	f8c8 0008 	str.w	r0, [r8, #8]
 8019d82:	9805      	ldr	r0, [sp, #20]
 8019d84:	f888 002d 	strb.w	r0, [r8, #45]	@ 0x2d
 8019d88:	4640      	mov	r0, r8
 8019d8a:	f000 fbe1 	bl	801a550 <llhwc_evnt_done>
 8019d8e:	2000      	movs	r0, #0
 8019d90:	4641      	mov	r1, r8
 8019d92:	2400      	movs	r4, #0
 8019d94:	f007 fc7d 	bl	8021692 <emngr_post_event>
 8019d98:	b2c0      	uxtb	r0, r0
 8019d9a:	f640 060c 	movw	r6, #2060	@ 0x80c
 8019d9e:	f247 3a18 	movw	sl, #29464	@ 0x7318
 8019da2:	f247 3bd0 	movw	fp, #29648	@ 0x73d0
 8019da6:	284d      	cmp	r0, #77	@ 0x4d
 8019da8:	f6c4 0602 	movt	r6, #18434	@ 0x4802
 8019dac:	f2c2 0a00 	movt	sl, #8192	@ 0x2000
 8019db0:	f2c2 0b00 	movt	fp, #8192	@ 0x2000
 8019db4:	d10f      	bne.n	8019dd6 <llhwc_scan_done+0x364>
 8019db6:	2000      	movs	r0, #0
 8019db8:	2101      	movs	r1, #1
 8019dba:	2701      	movs	r7, #1
 8019dbc:	f005 fd31 	bl	801f822 <bsp_assert>
 8019dc0:	f1b8 0f00 	cmp.w	r8, #0
 8019dc4:	f8ca 4028 	str.w	r4, [sl, #40]	@ 0x28
 8019dc8:	d003      	beq.n	8019dd2 <llhwc_scan_done+0x360>
 8019dca:	4640      	mov	r0, r8
 8019dcc:	f007 fe38 	bl	8021a40 <os_mem_pool_free>
 8019dd0:	2701      	movs	r7, #1
 8019dd2:	f04f 0900 	mov.w	r9, #0
 8019dd6:	b33f      	cbz	r7, 8019e28 <llhwc_scan_done+0x3b6>
 8019dd8:	fa5f f089 	uxtb.w	r0, r9
 8019ddc:	2801      	cmp	r0, #1
 8019dde:	d823      	bhi.n	8019e28 <llhwc_scan_done+0x3b6>
 8019de0:	9806      	ldr	r0, [sp, #24]
 8019de2:	2804      	cmp	r0, #4
 8019de4:	d105      	bne.n	8019df2 <llhwc_scan_done+0x380>
 8019de6:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8019de8:	6860      	ldr	r0, [r4, #4]
 8019dea:	f004 fd3e 	bl	801e86a <free_buff_hdr>
 8019dee:	2000      	movs	r0, #0
 8019df0:	6060      	str	r0, [r4, #4]
 8019df2:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 8019df4:	ea5f 6009 	movs.w	r0, r9, lsl #24
 8019df8:	f040 8088 	bne.w	8019f0c <llhwc_scan_done+0x49a>
 8019dfc:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8019dfe:	f004 fd34 	bl	801e86a <free_buff_hdr>
 8019e02:	e083      	b.n	8019f0c <llhwc_scan_done+0x49a>
 8019e04:	f1bb 0f01 	cmp.w	fp, #1
 8019e08:	d08c      	beq.n	8019d24 <llhwc_scan_done+0x2b2>
 8019e0a:	7e68      	ldrb	r0, [r5, #25]
 8019e0c:	2801      	cmp	r0, #1
 8019e0e:	f43f af89 	beq.w	8019d24 <llhwc_scan_done+0x2b2>
 8019e12:	f247 3118 	movw	r1, #29464	@ 0x7318
 8019e16:	2001      	movs	r0, #1
 8019e18:	2e00      	cmp	r6, #0
 8019e1a:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8019e1e:	6288      	str	r0, [r1, #40]	@ 0x28
 8019e20:	d062      	beq.n	8019ee8 <llhwc_scan_done+0x476>
 8019e22:	970a      	str	r7, [sp, #40]	@ 0x28
 8019e24:	2700      	movs	r7, #0
 8019e26:	e786      	b.n	8019d36 <llhwc_scan_done+0x2c4>
 8019e28:	ea5f 6009 	movs.w	r0, r9, lsl #24
 8019e2c:	d05a      	beq.n	8019ee4 <llhwc_scan_done+0x472>
 8019e2e:	2f00      	cmp	r7, #0
 8019e30:	d158      	bne.n	8019ee4 <llhwc_scan_done+0x472>
 8019e32:	fa5f f089 	uxtb.w	r0, r9
 8019e36:	f646 54f8 	movw	r4, #28152	@ 0x6df8
 8019e3a:	2801      	cmp	r0, #1
 8019e3c:	f2c2 0400 	movt	r4, #8192	@ 0x2000
 8019e40:	d809      	bhi.n	8019e56 <llhwc_scan_done+0x3e4>
 8019e42:	9806      	ldr	r0, [sp, #24]
 8019e44:	2804      	cmp	r0, #4
 8019e46:	d106      	bne.n	8019e56 <llhwc_scan_done+0x3e4>
 8019e48:	6820      	ldr	r0, [r4, #0]
 8019e4a:	6840      	ldr	r0, [r0, #4]
 8019e4c:	f004 fd0d 	bl	801e86a <free_buff_hdr>
 8019e50:	6820      	ldr	r0, [r4, #0]
 8019e52:	2100      	movs	r1, #0
 8019e54:	6041      	str	r1, [r0, #4]
 8019e56:	f649 615c 	movw	r1, #40540	@ 0x9e5c
 8019e5a:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8019e5e:	2000      	movs	r0, #0
 8019e60:	f04f 0900 	mov.w	r9, #0
 8019e64:	f004 fcd3 	bl	801e80e <allocate_data_packet>
 8019e68:	2800      	cmp	r0, #0
 8019e6a:	6020      	str	r0, [r4, #0]
 8019e6c:	f000 8091 	beq.w	8019f92 <llhwc_scan_done+0x520>
 8019e70:	6802      	ldr	r2, [r0, #0]
 8019e72:	2118      	movs	r1, #24
 8019e74:	f102 0714 	add.w	r7, r2, #20
 8019e78:	8141      	strh	r1, [r0, #10]
 8019e7a:	4638      	mov	r0, r7
 8019e7c:	2100      	movs	r1, #0
 8019e7e:	2204      	movs	r2, #4
 8019e80:	f00a fbb2 	bl	80245e8 <ble_memset>
 8019e84:	9808      	ldr	r0, [sp, #32]
 8019e86:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8019e88:	f080 0010 	eor.w	r0, r0, #16
 8019e8c:	4308      	orrs	r0, r1
 8019e8e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8019e90:	f8ab 701e 	strh.w	r7, [fp, #30]
 8019e94:	83c7      	strh	r7, [r0, #30]
 8019e96:	d13b      	bne.n	8019f10 <llhwc_scan_done+0x49e>
 8019e98:	6820      	ldr	r0, [r4, #0]
 8019e9a:	f649 615c 	movw	r1, #40540	@ 0x9e5c
 8019e9e:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8019ea2:	f004 fcb4 	bl	801e80e <allocate_data_packet>
 8019ea6:	2800      	cmp	r0, #0
 8019ea8:	d06e      	beq.n	8019f88 <llhwc_scan_done+0x516>
 8019eaa:	6804      	ldr	r4, [r0, #0]
 8019eac:	2118      	movs	r1, #24
 8019eae:	f104 0514 	add.w	r5, r4, #20
 8019eb2:	8141      	strh	r1, [r0, #10]
 8019eb4:	4628      	mov	r0, r5
 8019eb6:	2100      	movs	r1, #0
 8019eb8:	2204      	movs	r2, #4
 8019eba:	f00a fb95 	bl	80245e8 <ble_memset>
 8019ebe:	f8bb 001e 	ldrh.w	r0, [fp, #30]
 8019ec2:	2100      	movs	r1, #0
 8019ec4:	f6c4 0102 	movt	r1, #18434	@ 0x4802
 8019ec8:	4308      	orrs	r0, r1
 8019eca:	6801      	ldr	r1, [r0, #0]
 8019ecc:	f365 010f 	bfi	r1, r5, #0, #16
 8019ed0:	6001      	str	r1, [r0, #0]
 8019ed2:	6960      	ldr	r0, [r4, #20]
 8019ed4:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8019ed8:	f646 5548 	movw	r5, #27976	@ 0x6d48
 8019edc:	4308      	orrs	r0, r1
 8019ede:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 8019ee2:	6160      	str	r0, [r4, #20]
 8019ee4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8019ee6:	e018      	b.n	8019f1a <llhwc_scan_done+0x4a8>
 8019ee8:	f640 060c 	movw	r6, #2060	@ 0x80c
 8019eec:	f1b8 0f00 	cmp.w	r8, #0
 8019ef0:	f6c4 0602 	movt	r6, #18434	@ 0x4802
 8019ef4:	d03e      	beq.n	8019f74 <llhwc_scan_done+0x502>
 8019ef6:	4640      	mov	r0, r8
 8019ef8:	f007 fda2 	bl	8021a40 <os_mem_pool_free>
 8019efc:	f247 3a18 	movw	sl, #29464	@ 0x7318
 8019f00:	f247 3bd0 	movw	fp, #29648	@ 0x73d0
 8019f04:	f2c2 0a00 	movt	sl, #8192	@ 0x2000
 8019f08:	f2c2 0b00 	movt	fp, #8192	@ 0x2000
 8019f0c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8019f0e:	e005      	b.n	8019f1c <llhwc_scan_done+0x4aa>
 8019f10:	6838      	ldr	r0, [r7, #0]
 8019f12:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8019f16:	4310      	orrs	r0, r2
 8019f18:	6038      	str	r0, [r7, #0]
 8019f1a:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 8019f1c:	f8da 0028 	ldr.w	r0, [sl, #40]	@ 0x28
 8019f20:	2801      	cmp	r0, #1
 8019f22:	d13b      	bne.n	8019f9c <llhwc_scan_done+0x52a>
 8019f24:	9808      	ldr	r0, [sp, #32]
 8019f26:	f64f 4338 	movw	r3, #64568	@ 0xfc38
 8019f2a:	e9c5 0108 	strd	r0, r1, [r5, #32]
 8019f2e:	f6cf 73ff 	movt	r3, #65535	@ 0xffff
 8019f32:	58f2      	ldr	r2, [r6, r3]
 8019f34:	f042 0202 	orr.w	r2, r2, #2
 8019f38:	50f2      	str	r2, [r6, r3]
 8019f3a:	58f2      	ldr	r2, [r6, r3]
 8019f3c:	f022 0202 	bic.w	r2, r2, #2
 8019f40:	50f2      	str	r2, [r6, r3]
 8019f42:	6834      	ldr	r4, [r6, #0]
 8019f44:	f7fe faa8 	bl	8018498 <llhwc_get_sm_mode_from_event_type>
 8019f48:	f360 0404 	bfi	r4, r0, #0, #5
 8019f4c:	1e78      	subs	r0, r7, #1
 8019f4e:	ebc0 1140 	rsb	r1, r0, r0, lsl #5
 8019f52:	6034      	str	r4, [r6, #0]
 8019f54:	eb01 0090 	add.w	r0, r1, r0, lsr #2
 8019f58:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8019f5a:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8019f5c:	6150      	str	r0, [r2, #20]
 8019f5e:	f101 0012 	add.w	r0, r1, #18
 8019f62:	f8bb 101e 	ldrh.w	r1, [fp, #30]
 8019f66:	9010      	str	r0, [sp, #64]	@ 0x40
 8019f68:	83d1      	strh	r1, [r2, #30]
 8019f6a:	a910      	add	r1, sp, #64	@ 0x40
 8019f6c:	2000      	movs	r0, #0
 8019f6e:	f008 fef7 	bl	8022d60 <llhwc_slptmr_set>
 8019f72:	e018      	b.n	8019fa6 <llhwc_scan_done+0x534>
 8019f74:	f247 3a18 	movw	sl, #29464	@ 0x7318
 8019f78:	f247 3bd0 	movw	fp, #29648	@ 0x73d0
 8019f7c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8019f7e:	f2c2 0a00 	movt	sl, #8192	@ 0x2000
 8019f82:	f2c2 0b00 	movt	fp, #8192	@ 0x2000
 8019f86:	e7cd      	b.n	8019f24 <llhwc_scan_done+0x4b2>
 8019f88:	6820      	ldr	r0, [r4, #0]
 8019f8a:	f004 fc6e 	bl	801e86a <free_buff_hdr>
 8019f8e:	2000      	movs	r0, #0
 8019f90:	6020      	str	r0, [r4, #0]
 8019f92:	2001      	movs	r0, #1
 8019f94:	f888 0024 	strb.w	r0, [r8, #36]	@ 0x24
 8019f98:	f8ca 9028 	str.w	r9, [sl, #40]	@ 0x28
 8019f9c:	6f30      	ldr	r0, [r6, #112]	@ 0x70
 8019f9e:	9907      	ldr	r1, [sp, #28]
 8019fa0:	f361 0082 	bfi	r0, r1, #2, #1
 8019fa4:	6730      	str	r0, [r6, #112]	@ 0x70
 8019fa6:	f8da 0028 	ldr.w	r0, [sl, #40]	@ 0x28
 8019faa:	b9b8      	cbnz	r0, 8019fdc <llhwc_scan_done+0x56a>
 8019fac:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8019fae:	f009 fe51 	bl	8023c54 <llhwc_cmn_free_desc>
 8019fb2:	f8da 0028 	ldr.w	r0, [sl, #40]	@ 0x28
 8019fb6:	b988      	cbnz	r0, 8019fdc <llhwc_scan_done+0x56a>
 8019fb8:	f895 0033 	ldrb.w	r0, [r5, #51]	@ 0x33
 8019fbc:	b970      	cbnz	r0, 8019fdc <llhwc_scan_done+0x56a>
 8019fbe:	f64f 4038 	movw	r0, #64568	@ 0xfc38
 8019fc2:	f6cf 70ff 	movt	r0, #65535	@ 0xffff
 8019fc6:	5831      	ldr	r1, [r6, r0]
 8019fc8:	f041 0102 	orr.w	r1, r1, #2
 8019fcc:	5031      	str	r1, [r6, r0]
 8019fce:	5831      	ldr	r1, [r6, r0]
 8019fd0:	f021 0102 	bic.w	r1, r1, #2
 8019fd4:	5031      	str	r1, [r6, r0]
 8019fd6:	2001      	movs	r0, #1
 8019fd8:	f008 fc32 	bl	8022840 <llhwc_pwr_switch>
 8019fdc:	204e      	movs	r0, #78	@ 0x4e
 8019fde:	f005 fc69 	bl	801f8b4 <bsp_debug_gpio_clear>
 8019fe2:	b013      	add	sp, #76	@ 0x4c
 8019fe4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019fe8 <llhwc_init_done>:
 8019fe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019fec:	b08d      	sub	sp, #52	@ 0x34
 8019fee:	f247 3718 	movw	r7, #29464	@ 0x7318
 8019ff2:	f2c2 0700 	movt	r7, #8192	@ 0x2000
 8019ff6:	2400      	movs	r4, #0
 8019ff8:	f646 50f8 	movw	r0, #28152	@ 0x6df8
 8019ffc:	f8d7 b024 	ldr.w	fp, [r7, #36]	@ 0x24
 801a000:	940c      	str	r4, [sp, #48]	@ 0x30
 801a002:	940b      	str	r4, [sp, #44]	@ 0x2c
 801a004:	940a      	str	r4, [sp, #40]	@ 0x28
 801a006:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801a00a:	6800      	ldr	r0, [r0, #0]
 801a00c:	f646 5a48 	movw	sl, #27976	@ 0x6d48
 801a010:	f2c2 0a00 	movt	sl, #8192	@ 0x2000
 801a014:	9006      	str	r0, [sp, #24]
 801a016:	f8da 0028 	ldr.w	r0, [sl, #40]	@ 0x28
 801a01a:	f640 0618 	movw	r6, #2072	@ 0x818
 801a01e:	f240 4844 	movw	r8, #1092	@ 0x444
 801a022:	9409      	str	r4, [sp, #36]	@ 0x24
 801a024:	f6c4 0602 	movt	r6, #18434	@ 0x4802
 801a028:	f6c4 0802 	movt	r8, #18434	@ 0x4802
 801a02c:	9408      	str	r4, [sp, #32]
 801a02e:	f00a f941 	bl	80242b4 <llhwc_cmn_get_desc>
 801a032:	4605      	mov	r5, r0
 801a034:	204f      	movs	r0, #79	@ 0x4f
 801a036:	f005 fc3b 	bl	801f8b0 <bsp_debug_gpio_set>
 801a03a:	9501      	str	r5, [sp, #4]
 801a03c:	8bed      	ldrh	r5, [r5, #30]
 801a03e:	6830      	ldr	r0, [r6, #0]
 801a040:	f64f 31c0 	movw	r1, #64448	@ 0xfbc0
 801a044:	f3c0 0042 	ubfx	r0, r0, #1, #3
 801a048:	f6cf 71ff 	movt	r1, #65535	@ 0xffff
 801a04c:	900a      	str	r0, [sp, #40]	@ 0x28
 801a04e:	f64f 4048 	movw	r0, #64584	@ 0xfc48
 801a052:	f6cf 70ff 	movt	r0, #65535	@ 0xffff
 801a056:	5830      	ldr	r0, [r6, r0]
 801a058:	9004      	str	r0, [sp, #16]
 801a05a:	8b38      	ldrh	r0, [r7, #24]
 801a05c:	9003      	str	r0, [sp, #12]
 801a05e:	8a38      	ldrh	r0, [r7, #16]
 801a060:	9002      	str	r0, [sp, #8]
 801a062:	6830      	ldr	r0, [r6, #0]
 801a064:	9005      	str	r0, [sp, #20]
 801a066:	f247 30d0 	movw	r0, #29648	@ 0x73d0
 801a06a:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801a06e:	8bc0      	ldrh	r0, [r0, #30]
 801a070:	4440      	add	r0, r8
 801a072:	5847      	ldr	r7, [r0, r1]
 801a074:	f248 10f8 	movw	r0, #33272	@ 0x81f8
 801a078:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801a07c:	f007 fcde 	bl	8021a3c <os_mem_pool_alloc>
 801a080:	4606      	mov	r6, r0
 801a082:	46d1      	mov	r9, sl
 801a084:	b118      	cbz	r0, 801a08e <llhwc_init_done+0xa6>
 801a086:	f8da 0028 	ldr.w	r0, [sl, #40]	@ 0x28
 801a08a:	61b0      	str	r0, [r6, #24]
 801a08c:	e001      	b.n	801a092 <llhwc_init_done+0xaa>
 801a08e:	f88a 4033 	strb.w	r4, [sl, #51]	@ 0x33
 801a092:	f10d 011f 	add.w	r1, sp, #31
 801a096:	4628      	mov	r0, r5
 801a098:	4632      	mov	r2, r6
 801a09a:	f007 0a0f 	and.w	sl, r7, #15
 801a09e:	f000 faf1 	bl	801a684 <llhwc_calc_num_rx_pkts>
 801a0a2:	ac08      	add	r4, sp, #32
 801a0a4:	4605      	mov	r5, r0
 801a0a6:	4620      	mov	r0, r4
 801a0a8:	f008 f9cf 	bl	802244a <llhwc_slptmr_get>
 801a0ac:	4620      	mov	r0, r4
 801a0ae:	4659      	mov	r1, fp
 801a0b0:	f007 fa7a 	bl	80215a8 <ble_time_cmp_raw_reading>
 801a0b4:	9908      	ldr	r1, [sp, #32]
 801a0b6:	f1b0 3fff 	cmp.w	r0, #4294967295	@ 0xffffffff
 801a0ba:	bfce      	itee	gt
 801a0bc:	4658      	movgt	r0, fp
 801a0be:	4608      	movle	r0, r1
 801a0c0:	4659      	movle	r1, fp
 801a0c2:	f007 fa96 	bl	80215f2 <ble_time_overflow_diff>
 801a0c6:	900c      	str	r0, [sp, #48]	@ 0x30
 801a0c8:	980c      	ldr	r0, [sp, #48]	@ 0x30
 801a0ca:	f1ba 0407 	subs.w	r4, sl, #7
 801a0ce:	f100 0012 	add.w	r0, r0, #18
 801a0d2:	900c      	str	r0, [sp, #48]	@ 0x30
 801a0d4:	f8d9 0014 	ldr.w	r0, [r9, #20]
 801a0d8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801a0da:	464f      	mov	r7, r9
 801a0dc:	eba0 0001 	sub.w	r0, r0, r1
 801a0e0:	900b      	str	r0, [sp, #44]	@ 0x2c
 801a0e2:	f8d8 0000 	ldr.w	r0, [r8]
 801a0e6:	f085 0101 	eor.w	r1, r5, #1
 801a0ea:	f040 0002 	orr.w	r0, r0, #2
 801a0ee:	f8c8 0000 	str.w	r0, [r8]
 801a0f2:	f8d8 0000 	ldr.w	r0, [r8]
 801a0f6:	f020 0002 	bic.w	r0, r0, #2
 801a0fa:	f8c8 0000 	str.w	r0, [r8]
 801a0fe:	f899 0031 	ldrb.w	r0, [r9, #49]	@ 0x31
 801a102:	bf18      	it	ne
 801a104:	462c      	movne	r4, r5
 801a106:	4308      	orrs	r0, r1
 801a108:	f899 001a 	ldrb.w	r0, [r9, #26]
 801a10c:	bf18      	it	ne
 801a10e:	462c      	movne	r4, r5
 801a110:	b120      	cbz	r0, 801a11c <llhwc_init_done+0x134>
 801a112:	f247 3a18 	movw	sl, #29464	@ 0x7318
 801a116:	f2c2 0a00 	movt	sl, #8192	@ 0x2000
 801a11a:	e009      	b.n	801a130 <llhwc_init_done+0x148>
 801a11c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801a11e:	f247 3a18 	movw	sl, #29464	@ 0x7318
 801a122:	2801      	cmp	r0, #1
 801a124:	f2c2 0a00 	movt	sl, #8192	@ 0x2000
 801a128:	d102      	bne.n	801a130 <llhwc_init_done+0x148>
 801a12a:	b10c      	cbz	r4, 801a130 <llhwc_init_done+0x148>
 801a12c:	2400      	movs	r4, #0
 801a12e:	940a      	str	r4, [sp, #40]	@ 0x28
 801a130:	980c      	ldr	r0, [sp, #48]	@ 0x30
 801a132:	6979      	ldr	r1, [r7, #20]
 801a134:	4288      	cmp	r0, r1
 801a136:	d802      	bhi.n	801a13e <llhwc_init_done+0x156>
 801a138:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 801a13a:	2811      	cmp	r0, #17
 801a13c:	d859      	bhi.n	801a1f2 <llhwc_init_done+0x20a>
 801a13e:	2000      	movs	r0, #0
 801a140:	f8ca 0028 	str.w	r0, [sl, #40]	@ 0x28
 801a144:	fab4 f084 	clz	r0, r4
 801a148:	ea4f 1850 	mov.w	r8, r0, lsr #5
 801a14c:	f04f 0901 	mov.w	r9, #1
 801a150:	b326      	cbz	r6, 801a19c <llhwc_init_done+0x1b4>
 801a152:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 801a156:	f886 4020 	strb.w	r4, [r6, #32]
 801a15a:	f1b8 0f00 	cmp.w	r8, #0
 801a15e:	eba0 0001 	sub.w	r0, r0, r1
 801a162:	9902      	ldr	r1, [sp, #8]
 801a164:	eb00 0201 	add.w	r2, r0, r1
 801a168:	f04f 0001 	mov.w	r0, #1
 801a16c:	f886 0024 	strb.w	r0, [r6, #36]	@ 0x24
 801a170:	f04f 0000 	mov.w	r0, #0
 801a174:	f04f 0140 	mov.w	r1, #64	@ 0x40
 801a178:	e9c6 1004 	strd	r1, r0, [r6, #16]
 801a17c:	f886 0021 	strb.w	r0, [r6, #33]	@ 0x21
 801a180:	9806      	ldr	r0, [sp, #24]
 801a182:	bf18      	it	ne
 801a184:	2000      	movne	r0, #0
 801a186:	60b0      	str	r0, [r6, #8]
 801a188:	9905      	ldr	r1, [sp, #20]
 801a18a:	f89a 003b 	ldrb.w	r0, [sl, #59]	@ 0x3b
 801a18e:	f3c1 0142 	ubfx	r1, r1, #1, #3
 801a192:	f886 002d 	strb.w	r0, [r6, #45]	@ 0x2d
 801a196:	4630      	mov	r0, r6
 801a198:	f000 f9da 	bl	801a550 <llhwc_evnt_done>
 801a19c:	2000      	movs	r0, #0
 801a19e:	4631      	mov	r1, r6
 801a1a0:	2500      	movs	r5, #0
 801a1a2:	f007 fa76 	bl	8021692 <emngr_post_event>
 801a1a6:	b2c0      	uxtb	r0, r0
 801a1a8:	284d      	cmp	r0, #77	@ 0x4d
 801a1aa:	d107      	bne.n	801a1bc <llhwc_init_done+0x1d4>
 801a1ac:	2000      	movs	r0, #0
 801a1ae:	2101      	movs	r1, #1
 801a1b0:	f005 fb37 	bl	801f822 <bsp_assert>
 801a1b4:	b116      	cbz	r6, 801a1bc <llhwc_init_done+0x1d4>
 801a1b6:	4630      	mov	r0, r6
 801a1b8:	f007 fc42 	bl	8021a40 <os_mem_pool_free>
 801a1bc:	2001      	movs	r0, #1
 801a1be:	f008 fb3f 	bl	8022840 <llhwc_pwr_switch>
 801a1c2:	2c01      	cmp	r4, #1
 801a1c4:	bf88      	it	hi
 801a1c6:	2501      	movhi	r5, #1
 801a1c8:	f089 0001 	eor.w	r0, r9, #1
 801a1cc:	4328      	orrs	r0, r5
 801a1ce:	d12b      	bne.n	801a228 <llhwc_init_done+0x240>
 801a1d0:	f897 0031 	ldrb.w	r0, [r7, #49]	@ 0x31
 801a1d4:	2801      	cmp	r0, #1
 801a1d6:	d105      	bne.n	801a1e4 <llhwc_init_done+0x1fc>
 801a1d8:	9c06      	ldr	r4, [sp, #24]
 801a1da:	6860      	ldr	r0, [r4, #4]
 801a1dc:	f004 fb45 	bl	801e86a <free_buff_hdr>
 801a1e0:	2000      	movs	r0, #0
 801a1e2:	6060      	str	r0, [r4, #4]
 801a1e4:	f1b8 0f00 	cmp.w	r8, #0
 801a1e8:	d01e      	beq.n	801a228 <llhwc_init_done+0x240>
 801a1ea:	9806      	ldr	r0, [sp, #24]
 801a1ec:	f004 fb3d 	bl	801e86a <free_buff_hdr>
 801a1f0:	e01a      	b.n	801a228 <llhwc_init_done+0x240>
 801a1f2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801a1f4:	1e61      	subs	r1, r4, #1
 801a1f6:	3801      	subs	r0, #1
 801a1f8:	fab0 f080 	clz	r0, r0
 801a1fc:	0940      	lsrs	r0, r0, #5
 801a1fe:	2200      	movs	r2, #0
 801a200:	2902      	cmp	r1, #2
 801a202:	bf38      	it	cc
 801a204:	2201      	movcc	r2, #1
 801a206:	ea50 0902 	orrs.w	r9, r0, r2
 801a20a:	fab4 f184 	clz	r1, r4
 801a20e:	f089 0001 	eor.w	r0, r9, #1
 801a212:	ea4f 1851 	mov.w	r8, r1, lsr #5
 801a216:	f8ca 0028 	str.w	r0, [sl, #40]	@ 0x28
 801a21a:	bf08      	it	eq
 801a21c:	2c00      	cmpeq	r4, #0
 801a21e:	d197      	bne.n	801a150 <llhwc_init_done+0x168>
 801a220:	b126      	cbz	r6, 801a22c <llhwc_init_done+0x244>
 801a222:	4630      	mov	r0, r6
 801a224:	f007 fc0c 	bl	8021a40 <os_mem_pool_free>
 801a228:	f8da 0028 	ldr.w	r0, [sl, #40]	@ 0x28
 801a22c:	2801      	cmp	r0, #1
 801a22e:	d11f      	bne.n	801a270 <llhwc_init_done+0x288>
 801a230:	2000      	movs	r0, #0
 801a232:	2140      	movs	r1, #64	@ 0x40
 801a234:	e9c7 1008 	strd	r1, r0, [r7, #32]
 801a238:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 801a23a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801a23c:	ebc0 1040 	rsb	r0, r0, r0, lsl #5
 801a240:	3901      	subs	r1, #1
 801a242:	eb00 0091 	add.w	r0, r0, r1, lsr #2
 801a246:	9908      	ldr	r1, [sp, #32]
 801a248:	9a01      	ldr	r2, [sp, #4]
 801a24a:	381f      	subs	r0, #31
 801a24c:	6150      	str	r0, [r2, #20]
 801a24e:	f101 0012 	add.w	r0, r1, #18
 801a252:	f247 31d0 	movw	r1, #29648	@ 0x73d0
 801a256:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 801a25a:	8bc9      	ldrh	r1, [r1, #30]
 801a25c:	9008      	str	r0, [sp, #32]
 801a25e:	83d1      	strh	r1, [r2, #30]
 801a260:	a908      	add	r1, sp, #32
 801a262:	2000      	movs	r0, #0
 801a264:	f008 fd7c 	bl	8022d60 <llhwc_slptmr_set>
 801a268:	f8da 0028 	ldr.w	r0, [sl, #40]	@ 0x28
 801a26c:	2801      	cmp	r0, #1
 801a26e:	d01d      	beq.n	801a2ac <llhwc_init_done+0x2c4>
 801a270:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801a272:	f009 fcef 	bl	8023c54 <llhwc_cmn_free_desc>
 801a276:	f8da 0028 	ldr.w	r0, [sl, #40]	@ 0x28
 801a27a:	b9b8      	cbnz	r0, 801a2ac <llhwc_init_done+0x2c4>
 801a27c:	f640 007c 	movw	r0, #2172	@ 0x87c
 801a280:	f6c4 0002 	movt	r0, #18434	@ 0x4802
 801a284:	6801      	ldr	r1, [r0, #0]
 801a286:	7e3a      	ldrb	r2, [r7, #24]
 801a288:	f362 0182 	bfi	r1, r2, #2, #1
 801a28c:	6001      	str	r1, [r0, #0]
 801a28e:	f646 704c 	movw	r0, #28492	@ 0x6f4c
 801a292:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801a296:	7800      	ldrb	r0, [r0, #0]
 801a298:	2801      	cmp	r0, #1
 801a29a:	d107      	bne.n	801a2ac <llhwc_init_done+0x2c4>
 801a29c:	f640 0118 	movw	r1, #2072	@ 0x818
 801a2a0:	f6c4 0102 	movt	r1, #18434	@ 0x4802
 801a2a4:	6a88      	ldr	r0, [r1, #40]	@ 0x28
 801a2a6:	f420 4000 	bic.w	r0, r0, #32768	@ 0x8000
 801a2aa:	6288      	str	r0, [r1, #40]	@ 0x28
 801a2ac:	204f      	movs	r0, #79	@ 0x4f
 801a2ae:	f005 fb01 	bl	801f8b4 <bsp_debug_gpio_clear>
 801a2b2:	b00d      	add	sp, #52	@ 0x34
 801a2b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a2b8 <llhwc_conn_evnt_done>:
 801a2b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a2bc:	b081      	sub	sp, #4
 801a2be:	f646 50f8 	movw	r0, #28152	@ 0x6df8
 801a2c2:	f646 5a48 	movw	sl, #27976	@ 0x6d48
 801a2c6:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801a2ca:	f2c2 0a00 	movt	sl, #8192	@ 0x2000
 801a2ce:	6806      	ldr	r6, [r0, #0]
 801a2d0:	f8da 0028 	ldr.w	r0, [sl, #40]	@ 0x28
 801a2d4:	f640 0b0c 	movw	fp, #2060	@ 0x80c
 801a2d8:	f240 0900 	movw	r9, #0
 801a2dc:	f6c4 0b02 	movt	fp, #18434	@ 0x4802
 801a2e0:	f6c4 0902 	movt	r9, #18434	@ 0x4802
 801a2e4:	f009 ffe6 	bl	80242b4 <llhwc_cmn_get_desc>
 801a2e8:	4605      	mov	r5, r0
 801a2ea:	2050      	movs	r0, #80	@ 0x50
 801a2ec:	f005 fae0 	bl	801f8b0 <bsp_debug_gpio_set>
 801a2f0:	f248 10f8 	movw	r0, #33272	@ 0x81f8
 801a2f4:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801a2f8:	f007 fba0 	bl	8021a3c <os_mem_pool_alloc>
 801a2fc:	2101      	movs	r1, #1
 801a2fe:	4604      	mov	r4, r0
 801a300:	2800      	cmp	r0, #0
 801a302:	bf18      	it	ne
 801a304:	2001      	movne	r0, #1
 801a306:	f04f 0801 	mov.w	r8, #1
 801a30a:	f005 fa8a 	bl	801f822 <bsp_assert>
 801a30e:	f8da 0028 	ldr.w	r0, [sl, #40]	@ 0x28
 801a312:	2700      	movs	r7, #0
 801a314:	61a0      	str	r0, [r4, #24]
 801a316:	f8ca 7028 	str.w	r7, [sl, #40]	@ 0x28
 801a31a:	60a7      	str	r7, [r4, #8]
 801a31c:	f8db 0000 	ldr.w	r0, [fp]
 801a320:	f000 001f 	and.w	r0, r0, #31
 801a324:	fa08 f000 	lsl.w	r0, r8, r0
 801a328:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801a32c:	6a28      	ldr	r0, [r5, #32]
 801a32e:	0ec0      	lsrs	r0, r0, #27
 801a330:	7760      	strb	r0, [r4, #29]
 801a332:	77a0      	strb	r0, [r4, #30]
 801a334:	8be9      	ldrh	r1, [r5, #30]
 801a336:	8ba8      	ldrh	r0, [r5, #28]
 801a338:	9100      	str	r1, [sp, #0]
 801a33a:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 801a33e:	4288      	cmp	r0, r1
 801a340:	d010      	beq.n	801a364 <llhwc_conn_evnt_done+0xac>
 801a342:	f240 1004 	movw	r0, #260	@ 0x104
 801a346:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801a34a:	6800      	ldr	r0, [r0, #0]
 801a34c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 801a350:	4288      	cmp	r0, r1
 801a352:	d007      	beq.n	801a364 <llhwc_conn_evnt_done+0xac>
 801a354:	4448      	add	r0, r9
 801a356:	78c1      	ldrb	r1, [r0, #3]
 801a358:	0789      	lsls	r1, r1, #30
 801a35a:	d103      	bne.n	801a364 <llhwc_conn_evnt_done+0xac>
 801a35c:	7901      	ldrb	r1, [r0, #4]
 801a35e:	f041 0110 	orr.w	r1, r1, #16
 801a362:	7101      	strb	r1, [r0, #4]
 801a364:	9800      	ldr	r0, [sp, #0]
 801a366:	f104 012a 	add.w	r1, r4, #42	@ 0x2a
 801a36a:	4622      	mov	r2, r4
 801a36c:	f000 f98a 	bl	801a684 <llhwc_calc_num_rx_pkts>
 801a370:	f884 0020 	strb.w	r0, [r4, #32]
 801a374:	f8db 1068 	ldr.w	r1, [fp, #104]	@ 0x68
 801a378:	f8db 3068 	ldr.w	r3, [fp, #104]	@ 0x68
 801a37c:	2202      	movs	r2, #2
 801a37e:	ea02 1191 	and.w	r1, r2, r1, lsr #6
 801a382:	f3c3 2200 	ubfx	r2, r3, #8, #1
 801a386:	f8db 3068 	ldr.w	r3, [fp, #104]	@ 0x68
 801a38a:	4411      	add	r1, r2
 801a38c:	f003 0210 	and.w	r2, r3, #16
 801a390:	fab0 f080 	clz	r0, r0
 801a394:	4411      	add	r1, r2
 801a396:	0940      	lsrs	r0, r0, #5
 801a398:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
 801a39c:	77e0      	strb	r0, [r4, #31]
 801a39e:	f884 7021 	strb.w	r7, [r4, #33]	@ 0x21
 801a3a2:	f884 7027 	strb.w	r7, [r4, #39]	@ 0x27
 801a3a6:	6a28      	ldr	r0, [r5, #32]
 801a3a8:	f247 3218 	movw	r2, #29464	@ 0x7318
 801a3ac:	f3c0 6040 	ubfx	r0, r0, #25, #1
 801a3b0:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 801a3b4:	f884 0024 	strb.w	r0, [r4, #36]	@ 0x24
 801a3b8:	f895 0023 	ldrb.w	r0, [r5, #35]	@ 0x23
 801a3bc:	f000 0001 	and.w	r0, r0, #1
 801a3c0:	f884 0025 	strb.w	r0, [r4, #37]	@ 0x25
 801a3c4:	f8db 0004 	ldr.w	r0, [fp, #4]
 801a3c8:	f000 003f 	and.w	r0, r0, #63	@ 0x3f
 801a3cc:	f884 0028 	strb.w	r0, [r4, #40]	@ 0x28
 801a3d0:	f8db 000c 	ldr.w	r0, [fp, #12]
 801a3d4:	f3c0 0142 	ubfx	r1, r0, #1, #3
 801a3d8:	f64f 4054 	movw	r0, #64596	@ 0xfc54
 801a3dc:	f6cf 70ff 	movt	r0, #65535	@ 0xffff
 801a3e0:	f85b 0000 	ldr.w	r0, [fp, r0]
 801a3e4:	8b13      	ldrh	r3, [r2, #24]
 801a3e6:	8a12      	ldrh	r2, [r2, #16]
 801a3e8:	1ac0      	subs	r0, r0, r3
 801a3ea:	4402      	add	r2, r0
 801a3ec:	4620      	mov	r0, r4
 801a3ee:	f000 f8af 	bl	801a550 <llhwc_evnt_done>
 801a3f2:	f89a 0033 	ldrb.w	r0, [sl, #51]	@ 0x33
 801a3f6:	2801      	cmp	r0, #1
 801a3f8:	d117      	bne.n	801a42a <llhwc_conn_evnt_done+0x172>
 801a3fa:	f646 50fc 	movw	r0, #28156	@ 0x6dfc
 801a3fe:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801a402:	6801      	ldr	r1, [r0, #0]
 801a404:	b189      	cbz	r1, 801a42a <llhwc_conn_evnt_done+0x172>
 801a406:	f247 33d0 	movw	r3, #29648	@ 0x73d0
 801a40a:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 801a40e:	8baa      	ldrh	r2, [r5, #28]
 801a410:	331c      	adds	r3, #28
 801a412:	bf00      	nop
 801a414:	881b      	ldrh	r3, [r3, #0]
 801a416:	4293      	cmp	r3, r2
 801a418:	d007      	beq.n	801a42a <llhwc_conn_evnt_done+0x172>
 801a41a:	4299      	cmp	r1, r3
 801a41c:	ea43 0309 	orr.w	r3, r3, r9
 801a420:	d1f8      	bne.n	801a414 <llhwc_conn_evnt_done+0x15c>
 801a422:	2100      	movs	r1, #0
 801a424:	f88a 1033 	strb.w	r1, [sl, #51]	@ 0x33
 801a428:	6001      	str	r1, [r0, #0]
 801a42a:	78e8      	ldrb	r0, [r5, #3]
 801a42c:	f010 071f 	ands.w	r7, r0, #31
 801a430:	bf18      	it	ne
 801a432:	2e00      	cmpne	r6, #0
 801a434:	d029      	beq.n	801a48a <llhwc_conn_evnt_done+0x1d2>
 801a436:	f894 0020 	ldrb.w	r0, [r4, #32]
 801a43a:	f894 1021 	ldrb.w	r1, [r4, #33]	@ 0x21
 801a43e:	f04f 0a00 	mov.w	sl, #0
 801a442:	4408      	add	r0, r1
 801a444:	eba7 0900 	sub.w	r9, r7, r0
 801a448:	0601      	lsls	r1, r0, #24
 801a44a:	d003      	beq.n	801a454 <llhwc_conn_evnt_done+0x19c>
 801a44c:	46b2      	mov	sl, r6
 801a44e:	6876      	ldr	r6, [r6, #4]
 801a450:	3801      	subs	r0, #1
 801a452:	e00f      	b.n	801a474 <llhwc_conn_evnt_done+0x1bc>
 801a454:	ea5f 6009 	movs.w	r0, r9, lsl #24
 801a458:	d009      	beq.n	801a46e <llhwc_conn_evnt_done+0x1b6>
 801a45a:	f8d6 8004 	ldr.w	r8, [r6, #4]
 801a45e:	4630      	mov	r0, r6
 801a460:	f004 fa03 	bl	801e86a <free_buff_hdr>
 801a464:	f1a9 0901 	sub.w	r9, r9, #1
 801a468:	2000      	movs	r0, #0
 801a46a:	4646      	mov	r6, r8
 801a46c:	e002      	b.n	801a474 <llhwc_conn_evnt_done+0x1bc>
 801a46e:	f04f 0900 	mov.w	r9, #0
 801a472:	2000      	movs	r0, #0
 801a474:	3f01      	subs	r7, #1
 801a476:	0639      	lsls	r1, r7, #24
 801a478:	bf18      	it	ne
 801a47a:	2e00      	cmpne	r6, #0
 801a47c:	d1e4      	bne.n	801a448 <llhwc_conn_evnt_done+0x190>
 801a47e:	f1ba 0f00 	cmp.w	sl, #0
 801a482:	bf1c      	itt	ne
 801a484:	2000      	movne	r0, #0
 801a486:	f8ca 0004 	strne.w	r0, [sl, #4]
 801a48a:	7f60      	ldrb	r0, [r4, #29]
 801a48c:	b128      	cbz	r0, 801a49a <llhwc_conn_evnt_done+0x1e2>
 801a48e:	f894 0020 	ldrb.w	r0, [r4, #32]
 801a492:	b910      	cbnz	r0, 801a49a <llhwc_conn_evnt_done+0x1e2>
 801a494:	f894 0021 	ldrb.w	r0, [r4, #33]	@ 0x21
 801a498:	b140      	cbz	r0, 801a4ac <llhwc_conn_evnt_done+0x1f4>
 801a49a:	f895 0022 	ldrb.w	r0, [r5, #34]	@ 0x22
 801a49e:	0780      	lsls	r0, r0, #30
 801a4a0:	d507      	bpl.n	801a4b2 <llhwc_conn_evnt_done+0x1fa>
 801a4a2:	9900      	ldr	r1, [sp, #0]
 801a4a4:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 801a4a8:	4281      	cmp	r1, r0
 801a4aa:	d102      	bne.n	801a4b2 <llhwc_conn_evnt_done+0x1fa>
 801a4ac:	2001      	movs	r0, #1
 801a4ae:	f884 0021 	strb.w	r0, [r4, #33]	@ 0x21
 801a4b2:	2000      	movs	r0, #0
 801a4b4:	4621      	mov	r1, r4
 801a4b6:	f007 f8ec 	bl	8021692 <emngr_post_event>
 801a4ba:	f009 f8aa 	bl	8023612 <llhwc_cmn_crypto_aes_done>
 801a4be:	f646 5048 	movw	r0, #27976	@ 0x6d48
 801a4c2:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801a4c6:	f890 0033 	ldrb.w	r0, [r0, #51]	@ 0x33
 801a4ca:	b990      	cbnz	r0, 801a4f2 <llhwc_conn_evnt_done+0x23a>
 801a4cc:	f64f 4038 	movw	r0, #64568	@ 0xfc38
 801a4d0:	f6cf 70ff 	movt	r0, #65535	@ 0xffff
 801a4d4:	f85b 1000 	ldr.w	r1, [fp, r0]
 801a4d8:	f041 0102 	orr.w	r1, r1, #2
 801a4dc:	f84b 1000 	str.w	r1, [fp, r0]
 801a4e0:	f85b 1000 	ldr.w	r1, [fp, r0]
 801a4e4:	f021 0102 	bic.w	r1, r1, #2
 801a4e8:	f84b 1000 	str.w	r1, [fp, r0]
 801a4ec:	2001      	movs	r0, #1
 801a4ee:	f008 f9a7 	bl	8022840 <llhwc_pwr_switch>
 801a4f2:	69a0      	ldr	r0, [r4, #24]
 801a4f4:	f009 fbae 	bl	8023c54 <llhwc_cmn_free_desc>
 801a4f8:	f8db 0088 	ldr.w	r0, [fp, #136]	@ 0x88
 801a4fc:	f020 4180 	bic.w	r1, r0, #1073741824	@ 0x40000000
 801a500:	2050      	movs	r0, #80	@ 0x50
 801a502:	f8cb 1088 	str.w	r1, [fp, #136]	@ 0x88
 801a506:	b001      	add	sp, #4
 801a508:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a50c:	f005 b9d2 	b.w	801f8b4 <bsp_debug_gpio_clear>

0801a510 <llhwc_dtm_done>:
 801a510:	b510      	push	{r4, lr}
 801a512:	f646 5448 	movw	r4, #27976	@ 0x6d48
 801a516:	f2c2 0400 	movt	r4, #8192	@ 0x2000
 801a51a:	4620      	mov	r0, r4
 801a51c:	f009 fb9a 	bl	8023c54 <llhwc_cmn_free_desc>
 801a520:	f240 4004 	movw	r0, #1028	@ 0x404
 801a524:	f6c4 0002 	movt	r0, #18434	@ 0x4802
 801a528:	6801      	ldr	r1, [r0, #0]
 801a52a:	f021 0101 	bic.w	r1, r1, #1
 801a52e:	6001      	str	r1, [r0, #0]
 801a530:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 801a532:	f041 0102 	orr.w	r1, r1, #2
 801a536:	6401      	str	r1, [r0, #64]	@ 0x40
 801a538:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 801a53a:	f021 0102 	bic.w	r1, r1, #2
 801a53e:	6401      	str	r1, [r0, #64]	@ 0x40
 801a540:	2001      	movs	r0, #1
 801a542:	f008 f97d 	bl	8022840 <llhwc_pwr_switch>
 801a546:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 801a54a:	62e0      	str	r0, [r4, #44]	@ 0x2c
 801a54c:	bd10      	pop	{r4, pc}
	...

0801a550 <llhwc_evnt_done>:
 801a550:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a552:	b081      	sub	sp, #4
 801a554:	4604      	mov	r4, r0
 801a556:	e9d0 0304 	ldrd	r0, r3, [r0, #16]
 801a55a:	f894 5020 	ldrb.w	r5, [r4, #32]
 801a55e:	f1b0 0780 	subs.w	r7, r0, #128	@ 0x80
 801a562:	f173 0700 	sbcs.w	r7, r3, #0
 801a566:	d305      	bcc.n	801a574 <llhwc_evnt_done+0x24>
 801a568:	f410 47c0 	ands.w	r7, r0, #24576	@ 0x6000
 801a56c:	bf18      	it	ne
 801a56e:	f884 102b 	strbne.w	r1, [r4, #43]	@ 0x2b
 801a572:	e001      	b.n	801a578 <llhwc_evnt_done+0x28>
 801a574:	f884 102b 	strb.w	r1, [r4, #43]	@ 0x2b
 801a578:	f247 3118 	movw	r1, #29464	@ 0x7318
 801a57c:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 801a580:	b16d      	cbz	r5, 801a59e <llhwc_evnt_done+0x4e>
 801a582:	68a7      	ldr	r7, [r4, #8]
 801a584:	b92f      	cbnz	r7, 801a592 <llhwc_evnt_done+0x42>
 801a586:	f646 57f8 	movw	r7, #28152	@ 0x6df8
 801a58a:	f2c2 0700 	movt	r7, #8192	@ 0x2000
 801a58e:	683f      	ldr	r7, [r7, #0]
 801a590:	60a7      	str	r7, [r4, #8]
 801a592:	683e      	ldr	r6, [r7, #0]
 801a594:	897f      	ldrh	r7, [r7, #10]
 801a596:	5dbf      	ldrb	r7, [r7, r6]
 801a598:	f007 070f 	and.w	r7, r7, #15
 801a59c:	e004      	b.n	801a5a8 <llhwc_evnt_done+0x58>
 801a59e:	f894 702c 	ldrb.w	r7, [r4, #44]	@ 0x2c
 801a5a2:	07bf      	lsls	r7, r7, #30
 801a5a4:	d513      	bpl.n	801a5ce <llhwc_evnt_done+0x7e>
 801a5a6:	2700      	movs	r7, #0
 801a5a8:	f410 7fb8 	tst.w	r0, #368	@ 0x170
 801a5ac:	d009      	beq.n	801a5c2 <llhwc_evnt_done+0x72>
 801a5ae:	f891 003b 	ldrb.w	r0, [r1, #59]	@ 0x3b
 801a5b2:	f641 035a 	movw	r3, #6234	@ 0x185a
 801a5b6:	f6c0 0303 	movt	r3, #2051	@ 0x803
 801a5ba:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 801a5be:	1a12      	subs	r2, r2, r0
 801a5c0:	e005      	b.n	801a5ce <llhwc_evnt_done+0x7e>
 801a5c2:	f480 5000 	eor.w	r0, r0, #8192	@ 0x2000
 801a5c6:	4318      	orrs	r0, r3
 801a5c8:	bf08      	it	eq
 801a5ca:	2f03      	cmpeq	r7, #3
 801a5cc:	d056      	beq.n	801a67c <llhwc_evnt_done+0x12c>
 801a5ce:	e9d1 0103 	ldrd	r0, r1, [r1, #12]
 801a5d2:	e9c4 0100 	strd	r0, r1, [r4]
 801a5d6:	2000      	movs	r0, #0
 801a5d8:	80a0      	strh	r0, [r4, #4]
 801a5da:	4620      	mov	r0, r4
 801a5dc:	4611      	mov	r1, r2
 801a5de:	2201      	movs	r2, #1
 801a5e0:	f006 ff02 	bl	80213e8 <ble_time_add_uint>
 801a5e4:	2d00      	cmp	r5, #0
 801a5e6:	d047      	beq.n	801a678 <llhwc_evnt_done+0x128>
 801a5e8:	4620      	mov	r0, r4
 801a5ea:	f850 1f08 	ldr.w	r1, [r0, #8]!
 801a5ee:	b929      	cbnz	r1, 801a5fc <llhwc_evnt_done+0xac>
 801a5f0:	f646 51f8 	movw	r1, #28152	@ 0x6df8
 801a5f4:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 801a5f8:	6809      	ldr	r1, [r1, #0]
 801a5fa:	6001      	str	r1, [r0, #0]
 801a5fc:	f646 5e48 	movw	lr, #27976	@ 0x6d48
 801a600:	f04f 0c00 	mov.w	ip, #0
 801a604:	2200      	movs	r2, #0
 801a606:	f2c2 0e00 	movt	lr, #8192	@ 0x2000
 801a60a:	2100      	movs	r1, #0
 801a60c:	6800      	ldr	r0, [r0, #0]
 801a60e:	6803      	ldr	r3, [r0, #0]
 801a610:	8946      	ldrh	r6, [r0, #10]
 801a612:	18f7      	adds	r7, r6, r3
 801a614:	787b      	ldrb	r3, [r7, #1]
 801a616:	6926      	ldr	r6, [r4, #16]
 801a618:	f406 76c0 	and.w	r6, r6, #384	@ 0x180
 801a61c:	b153      	cbz	r3, 801a634 <llhwc_evnt_done+0xe4>
 801a61e:	b1ee      	cbz	r6, 801a65c <llhwc_evnt_done+0x10c>
 801a620:	f894 602a 	ldrb.w	r6, [r4, #42]	@ 0x2a
 801a624:	b16e      	cbz	r6, 801a642 <llhwc_evnt_done+0xf2>
 801a626:	3b04      	subs	r3, #4
 801a628:	707b      	strb	r3, [r7, #1]
 801a62a:	6926      	ldr	r6, [r4, #16]
 801a62c:	2700      	movs	r7, #0
 801a62e:	f406 76c0 	and.w	r6, r6, #384	@ 0x180
 801a632:	e004      	b.n	801a63e <llhwc_evnt_done+0xee>
 801a634:	2700      	movs	r7, #0
 801a636:	2e00      	cmp	r6, #0
 801a638:	bf18      	it	ne
 801a63a:	3101      	addne	r1, #1
 801a63c:	2300      	movs	r3, #0
 801a63e:	433e      	orrs	r6, r7
 801a640:	d00c      	beq.n	801a65c <llhwc_evnt_done+0x10c>
 801a642:	6806      	ldr	r6, [r0, #0]
 801a644:	7837      	ldrb	r7, [r6, #0]
 801a646:	f007 0703 	and.w	r7, r7, #3
 801a64a:	2f03      	cmp	r7, #3
 801a64c:	d106      	bne.n	801a65c <llhwc_evnt_done+0x10c>
 801a64e:	7936      	ldrb	r6, [r6, #4]
 801a650:	f046 0620 	orr.w	r6, r6, #32
 801a654:	2e22      	cmp	r6, #34	@ 0x22
 801a656:	bf08      	it	eq
 801a658:	f88e c033 	strbeq.w	ip, [lr, #51]	@ 0x33
 801a65c:	3304      	adds	r3, #4
 801a65e:	3201      	adds	r2, #1
 801a660:	8183      	strh	r3, [r0, #12]
 801a662:	42aa      	cmp	r2, r5
 801a664:	f100 0004 	add.w	r0, r0, #4
 801a668:	d3d0      	bcc.n	801a60c <llhwc_evnt_done+0xbc>
 801a66a:	f894 0020 	ldrb.w	r0, [r4, #32]
 801a66e:	f884 1021 	strb.w	r1, [r4, #33]	@ 0x21
 801a672:	1a40      	subs	r0, r0, r1
 801a674:	f884 0020 	strb.w	r0, [r4, #32]
 801a678:	b001      	add	sp, #4
 801a67a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a67c:	2d00      	cmp	r5, #0
 801a67e:	d196      	bne.n	801a5ae <llhwc_evnt_done+0x5e>
 801a680:	e7a5      	b.n	801a5ce <llhwc_evnt_done+0x7e>
	...

0801a684 <llhwc_calc_num_rx_pkts>:
 801a684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a688:	b089      	sub	sp, #36	@ 0x24
 801a68a:	4604      	mov	r4, r0
 801a68c:	f247 30d0 	movw	r0, #29648	@ 0x73d0
 801a690:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801a694:	4688      	mov	r8, r1
 801a696:	8bc1      	ldrh	r1, [r0, #30]
 801a698:	f247 3018 	movw	r0, #29464	@ 0x7318
 801a69c:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801a6a0:	f890 603b 	ldrb.w	r6, [r0, #59]	@ 0x3b
 801a6a4:	f640 000c 	movw	r0, #2060	@ 0x80c
 801a6a8:	f6c4 0002 	movt	r0, #18434	@ 0x4802
 801a6ac:	6800      	ldr	r0, [r0, #0]
 801a6ae:	42a1      	cmp	r1, r4
 801a6b0:	d102      	bne.n	801a6b8 <llhwc_calc_num_rx_pkts+0x34>
 801a6b2:	2700      	movs	r7, #0
 801a6b4:	2500      	movs	r5, #0
 801a6b6:	e099      	b.n	801a7ec <llhwc_calc_num_rx_pkts+0x168>
 801a6b8:	f000 031d 	and.w	r3, r0, #29
 801a6bc:	f646 57f8 	movw	r7, #28152	@ 0x6df8
 801a6c0:	f646 55f4 	movw	r5, #28148	@ 0x6df4
 801a6c4:	f2c2 0700 	movt	r7, #8192	@ 0x2000
 801a6c8:	2b0d      	cmp	r3, #13
 801a6ca:	f8cd 8004 	str.w	r8, [sp, #4]
 801a6ce:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 801a6d2:	bf08      	it	eq
 801a6d4:	462f      	moveq	r7, r5
 801a6d6:	f010 0f1c 	tst.w	r0, #28
 801a6da:	bf08      	it	eq
 801a6dc:	462f      	moveq	r7, r5
 801a6de:	2000      	movs	r0, #0
 801a6e0:	f8d7 8000 	ldr.w	r8, [r7]
 801a6e4:	9005      	str	r0, [sp, #20]
 801a6e6:	2000      	movs	r0, #0
 801a6e8:	9004      	str	r0, [sp, #16]
 801a6ea:	2000      	movs	r0, #0
 801a6ec:	9003      	str	r0, [sp, #12]
 801a6ee:	2000      	movs	r0, #0
 801a6f0:	2300      	movs	r3, #0
 801a6f2:	f04f 0b00 	mov.w	fp, #0
 801a6f6:	9006      	str	r0, [sp, #24]
 801a6f8:	2000      	movs	r0, #0
 801a6fa:	2500      	movs	r5, #0
 801a6fc:	f6c4 0302 	movt	r3, #18434	@ 0x4802
 801a700:	2700      	movs	r7, #0
 801a702:	9207      	str	r2, [sp, #28]
 801a704:	9402      	str	r4, [sp, #8]
 801a706:	bf00      	nop
 801a708:	ea41 0a03 	orr.w	sl, r1, r3
 801a70c:	f89a 1003 	ldrb.w	r1, [sl, #3]
 801a710:	2a00      	cmp	r2, #0
 801a712:	f3c1 0180 	ubfx	r1, r1, #2, #1
 801a716:	440d      	add	r5, r1
 801a718:	d040      	beq.n	801a79c <llhwc_calc_num_rx_pkts+0x118>
 801a71a:	f1b8 0f00 	cmp.w	r8, #0
 801a71e:	d03d      	beq.n	801a79c <llhwc_calc_num_rx_pkts+0x118>
 801a720:	f8d8 0000 	ldr.w	r0, [r8]
 801a724:	f8b8 100a 	ldrh.w	r1, [r8, #10]
 801a728:	9508      	str	r5, [sp, #32]
 801a72a:	4408      	add	r0, r1
 801a72c:	f247 31d0 	movw	r1, #29648	@ 0x73d0
 801a730:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 801a734:	8bc9      	ldrh	r1, [r1, #30]
 801a736:	7844      	ldrb	r4, [r0, #1]
 801a738:	4319      	orrs	r1, r3
 801a73a:	062b      	lsls	r3, r5, #24
 801a73c:	f04f 0307 	mov.w	r3, #7
 801a740:	f891 9003 	ldrb.w	r9, [r1, #3]
 801a744:	6911      	ldr	r1, [r2, #16]
 801a746:	bf18      	it	ne
 801a748:	230b      	movne	r3, #11
 801a74a:	2c00      	cmp	r4, #0
 801a74c:	f04f 0207 	mov.w	r2, #7
 801a750:	bf08      	it	eq
 801a752:	4613      	moveq	r3, r2
 801a754:	f411 7fc0 	tst.w	r1, #384	@ 0x180
 801a758:	bf08      	it	eq
 801a75a:	4613      	moveq	r3, r2
 801a75c:	1919      	adds	r1, r3, r4
 801a75e:	f021 0103 	bic.w	r1, r1, #3
 801a762:	5808      	ldr	r0, [r1, r0]
 801a764:	f006 fbf5 	bl	8020f52 <llhwc_phy_get_rssi_value>
 801a768:	2e04      	cmp	r6, #4
 801a76a:	bf08      	it	eq
 801a76c:	f019 0108 	andseq.w	r1, r9, #8
 801a770:	d006      	beq.n	801a780 <llhwc_calc_num_rx_pkts+0xfc>
 801a772:	9906      	ldr	r1, [sp, #24]
 801a774:	4401      	add	r1, r0
 801a776:	9106      	str	r1, [sp, #24]
 801a778:	9904      	ldr	r1, [sp, #16]
 801a77a:	3101      	adds	r1, #1
 801a77c:	9104      	str	r1, [sp, #16]
 801a77e:	e005      	b.n	801a78c <llhwc_calc_num_rx_pkts+0x108>
 801a780:	9903      	ldr	r1, [sp, #12]
 801a782:	4401      	add	r1, r0
 801a784:	9103      	str	r1, [sp, #12]
 801a786:	9905      	ldr	r1, [sp, #20]
 801a788:	3101      	adds	r1, #1
 801a78a:	9105      	str	r1, [sp, #20]
 801a78c:	e9dd 2507 	ldrd	r2, r5, [sp, #28]
 801a790:	9c02      	ldr	r4, [sp, #8]
 801a792:	f8d8 8004 	ldr.w	r8, [r8, #4]
 801a796:	2300      	movs	r3, #0
 801a798:	f6c4 0302 	movt	r3, #18434	@ 0x4802
 801a79c:	f8ba 1000 	ldrh.w	r1, [sl]
 801a7a0:	f10b 0b01 	add.w	fp, fp, #1
 801a7a4:	42a1      	cmp	r1, r4
 801a7a6:	f107 0701 	add.w	r7, r7, #1
 801a7aa:	d1ad      	bne.n	801a708 <llhwc_calc_num_rx_pkts+0x84>
 801a7ac:	b138      	cbz	r0, 801a7be <llhwc_calc_num_rx_pkts+0x13a>
 801a7ae:	f006 fbd0 	bl	8020f52 <llhwc_phy_get_rssi_value>
 801a7b2:	9a07      	ldr	r2, [sp, #28]
 801a7b4:	f646 5144 	movw	r1, #27972	@ 0x6d44
 801a7b8:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 801a7bc:	8008      	strh	r0, [r1, #0]
 801a7be:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801a7c2:	b19a      	cbz	r2, 801a7ec <llhwc_calc_num_rx_pkts+0x168>
 801a7c4:	0638      	lsls	r0, r7, #24
 801a7c6:	d011      	beq.n	801a7ec <llhwc_calc_num_rx_pkts+0x168>
 801a7c8:	1e70      	subs	r0, r6, #1
 801a7ca:	2802      	cmp	r0, #2
 801a7cc:	d303      	bcc.n	801a7d6 <llhwc_calc_num_rx_pkts+0x152>
 801a7ce:	2e04      	cmp	r6, #4
 801a7d0:	d112      	bne.n	801a7f8 <llhwc_calc_num_rx_pkts+0x174>
 801a7d2:	9805      	ldr	r0, [sp, #20]
 801a7d4:	b980      	cbnz	r0, 801a7f8 <llhwc_calc_num_rx_pkts+0x174>
 801a7d6:	9806      	ldr	r0, [sp, #24]
 801a7d8:	fb90 f0fb 	sdiv	r0, r0, fp
 801a7dc:	f006 fbb9 	bl	8020f52 <llhwc_phy_get_rssi_value>
 801a7e0:	9907      	ldr	r1, [sp, #28]
 801a7e2:	f881 0022 	strb.w	r0, [r1, #34]	@ 0x22
 801a7e6:	207f      	movs	r0, #127	@ 0x7f
 801a7e8:	f881 0023 	strb.w	r0, [r1, #35]	@ 0x23
 801a7ec:	b2f8      	uxtb	r0, r7
 801a7ee:	f888 5000 	strb.w	r5, [r8]
 801a7f2:	b009      	add	sp, #36	@ 0x24
 801a7f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a7f8:	9804      	ldr	r0, [sp, #16]
 801a7fa:	2e04      	cmp	r6, #4
 801a7fc:	bf08      	it	eq
 801a7fe:	2800      	cmpeq	r0, #0
 801a800:	d013      	beq.n	801a82a <llhwc_calc_num_rx_pkts+0x1a6>
 801a802:	2e04      	cmp	r6, #4
 801a804:	d1f2      	bne.n	801a7ec <llhwc_calc_num_rx_pkts+0x168>
 801a806:	2800      	cmp	r0, #0
 801a808:	d0f0      	beq.n	801a7ec <llhwc_calc_num_rx_pkts+0x168>
 801a80a:	9e05      	ldr	r6, [sp, #20]
 801a80c:	2e00      	cmp	r6, #0
 801a80e:	d0ed      	beq.n	801a7ec <llhwc_calc_num_rx_pkts+0x168>
 801a810:	9906      	ldr	r1, [sp, #24]
 801a812:	fb91 f0f0 	sdiv	r0, r1, r0
 801a816:	f006 fb9c 	bl	8020f52 <llhwc_phy_get_rssi_value>
 801a81a:	9903      	ldr	r1, [sp, #12]
 801a81c:	9a07      	ldr	r2, [sp, #28]
 801a81e:	fb91 f1f6 	sdiv	r1, r1, r6
 801a822:	f882 0022 	strb.w	r0, [r2, #34]	@ 0x22
 801a826:	4608      	mov	r0, r1
 801a828:	e005      	b.n	801a836 <llhwc_calc_num_rx_pkts+0x1b2>
 801a82a:	9803      	ldr	r0, [sp, #12]
 801a82c:	217f      	movs	r1, #127	@ 0x7f
 801a82e:	fb90 f0fb 	sdiv	r0, r0, fp
 801a832:	f882 1022 	strb.w	r1, [r2, #34]	@ 0x22
 801a836:	f006 fb8c 	bl	8020f52 <llhwc_phy_get_rssi_value>
 801a83a:	9907      	ldr	r1, [sp, #28]
 801a83c:	e7d4      	b.n	801a7e8 <llhwc_calc_num_rx_pkts+0x164>
	...

0801a840 <evnt_schdlr_choose_suitable_intrv>:
 801a840:	b5b0      	push	{r4, r5, r7, lr}
 801a842:	f646 6410 	movw	r4, #28176	@ 0x6e10
 801a846:	f2c2 0400 	movt	r4, #8192	@ 0x2000
 801a84a:	f8d4 e034 	ldr.w	lr, [r4, #52]	@ 0x34
 801a84e:	4684      	mov	ip, r0
 801a850:	f1be 0f00 	cmp.w	lr, #0
 801a854:	d00f      	beq.n	801a876 <evnt_schdlr_choose_suitable_intrv+0x36>
 801a856:	f894 0038 	ldrb.w	r0, [r4, #56]	@ 0x38
 801a85a:	2801      	cmp	r0, #1
 801a85c:	d104      	bne.n	801a868 <evnt_schdlr_choose_suitable_intrv+0x28>
 801a85e:	6820      	ldr	r0, [r4, #0]
 801a860:	b110      	cbz	r0, 801a868 <evnt_schdlr_choose_suitable_intrv+0x28>
 801a862:	6e40      	ldr	r0, [r0, #100]	@ 0x64
 801a864:	3001      	adds	r0, #1
 801a866:	d006      	beq.n	801a876 <evnt_schdlr_choose_suitable_intrv+0x36>
 801a868:	45e6      	cmp	lr, ip
 801a86a:	d30e      	bcc.n	801a88a <evnt_schdlr_choose_suitable_intrv+0x4a>
 801a86c:	458e      	cmp	lr, r1
 801a86e:	d80c      	bhi.n	801a88a <evnt_schdlr_choose_suitable_intrv+0x4a>
 801a870:	2000      	movs	r0, #0
 801a872:	46f4      	mov	ip, lr
 801a874:	e039      	b.n	801a8ea <evnt_schdlr_choose_suitable_intrv+0xaa>
 801a876:	1e58      	subs	r0, r3, #1
 801a878:	b280      	uxth	r0, r0
 801a87a:	4563      	cmp	r3, ip
 801a87c:	bf88      	it	hi
 801a87e:	469c      	movhi	ip, r3
 801a880:	4288      	cmp	r0, r1
 801a882:	bf28      	it	cs
 801a884:	468c      	movcs	ip, r1
 801a886:	2000      	movs	r0, #0
 801a888:	e02f      	b.n	801a8ea <evnt_schdlr_choose_suitable_intrv+0xaa>
 801a88a:	458e      	cmp	lr, r1
 801a88c:	d20c      	bcs.n	801a8a8 <evnt_schdlr_choose_suitable_intrv+0x68>
 801a88e:	ea4f 044e 	mov.w	r4, lr, lsl #1
 801a892:	2000      	movs	r0, #0
 801a894:	1825      	adds	r5, r4, r0
 801a896:	4565      	cmp	r5, ip
 801a898:	d301      	bcc.n	801a89e <evnt_schdlr_choose_suitable_intrv+0x5e>
 801a89a:	428d      	cmp	r5, r1
 801a89c:	d920      	bls.n	801a8e0 <evnt_schdlr_choose_suitable_intrv+0xa0>
 801a89e:	4470      	add	r0, lr
 801a8a0:	eb0e 0500 	add.w	r5, lr, r0
 801a8a4:	428d      	cmp	r5, r1
 801a8a6:	d3f5      	bcc.n	801a894 <evnt_schdlr_choose_suitable_intrv+0x54>
 801a8a8:	45e6      	cmp	lr, ip
 801a8aa:	d90f      	bls.n	801a8cc <evnt_schdlr_choose_suitable_intrv+0x8c>
 801a8ac:	2002      	movs	r0, #2
 801a8ae:	bf00      	nop
 801a8b0:	fbbe f4f0 	udiv	r4, lr, r0
 801a8b4:	4564      	cmp	r4, ip
 801a8b6:	d305      	bcc.n	801a8c4 <evnt_schdlr_choose_suitable_intrv+0x84>
 801a8b8:	428c      	cmp	r4, r1
 801a8ba:	d803      	bhi.n	801a8c4 <evnt_schdlr_choose_suitable_intrv+0x84>
 801a8bc:	fb04 f500 	mul.w	r5, r4, r0
 801a8c0:	4575      	cmp	r5, lr
 801a8c2:	d010      	beq.n	801a8e6 <evnt_schdlr_choose_suitable_intrv+0xa6>
 801a8c4:	4564      	cmp	r4, ip
 801a8c6:	f100 0001 	add.w	r0, r0, #1
 801a8ca:	d8f1      	bhi.n	801a8b0 <evnt_schdlr_choose_suitable_intrv+0x70>
 801a8cc:	1e58      	subs	r0, r3, #1
 801a8ce:	b280      	uxth	r0, r0
 801a8d0:	4563      	cmp	r3, ip
 801a8d2:	bf88      	it	hi
 801a8d4:	469c      	movhi	ip, r3
 801a8d6:	4288      	cmp	r0, r1
 801a8d8:	bf28      	it	cs
 801a8da:	468c      	movcs	ip, r1
 801a8dc:	201f      	movs	r0, #31
 801a8de:	e004      	b.n	801a8ea <evnt_schdlr_choose_suitable_intrv+0xaa>
 801a8e0:	eb00 0c4e 	add.w	ip, r0, lr, lsl #1
 801a8e4:	e7cf      	b.n	801a886 <evnt_schdlr_choose_suitable_intrv+0x46>
 801a8e6:	2000      	movs	r0, #0
 801a8e8:	46a4      	mov	ip, r4
 801a8ea:	f8a2 c000 	strh.w	ip, [r2]
 801a8ee:	bdb0      	pop	{r4, r5, r7, pc}

0801a8f0 <extend_gnrc_evnt_durn_chk>:
 801a8f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a8f4:	b081      	sub	sp, #4
 801a8f6:	4614      	mov	r4, r2
 801a8f8:	4688      	mov	r8, r1
 801a8fa:	4605      	mov	r5, r0
 801a8fc:	f000 f88c 	bl	801aa18 <get_priority>
 801a900:	f646 6910 	movw	r9, #28176	@ 0x6e10
 801a904:	f2c2 0900 	movt	r9, #8192	@ 0x2000
 801a908:	f8d9 6000 	ldr.w	r6, [r9]
 801a90c:	4607      	mov	r7, r0
 801a90e:	f004 ffe8 	bl	801f8e2 <os_disable_isr>
 801a912:	f240 0aec 	movw	sl, #236	@ 0xec
 801a916:	f646 4b68 	movw	fp, #27752	@ 0x6c68
 801a91a:	f1b8 0f00 	cmp.w	r8, #0
 801a91e:	f2c2 0a00 	movt	sl, #8192	@ 0x2000
 801a922:	f2c2 0b00 	movt	fp, #8192	@ 0x2000
 801a926:	d116      	bne.n	801a956 <extend_gnrc_evnt_durn_chk+0x66>
 801a928:	f895 008d 	ldrb.w	r0, [r5, #141]	@ 0x8d
 801a92c:	b900      	cbnz	r0, 801a930 <extend_gnrc_evnt_durn_chk+0x40>
 801a92e:	6fae      	ldr	r6, [r5, #120]	@ 0x78
 801a930:	b17e      	cbz	r6, 801a952 <extend_gnrc_evnt_durn_chk+0x62>
 801a932:	f8da 0000 	ldr.w	r0, [sl]
 801a936:	f8db 1008 	ldr.w	r1, [fp, #8]
 801a93a:	6d32      	ldr	r2, [r6, #80]	@ 0x50
 801a93c:	4408      	add	r0, r1
 801a93e:	1a10      	subs	r0, r2, r0
 801a940:	42a0      	cmp	r0, r4
 801a942:	d206      	bcs.n	801a952 <extend_gnrc_evnt_durn_chk+0x62>
 801a944:	4630      	mov	r0, r6
 801a946:	f000 f867 	bl	801aa18 <get_priority>
 801a94a:	42b8      	cmp	r0, r7
 801a94c:	d357      	bcc.n	801a9fe <extend_gnrc_evnt_durn_chk+0x10e>
 801a94e:	6fb6      	ldr	r6, [r6, #120]	@ 0x78
 801a950:	e7ee      	b.n	801a930 <extend_gnrc_evnt_durn_chk+0x40>
 801a952:	f8d9 6000 	ldr.w	r6, [r9]
 801a956:	2e00      	cmp	r6, #0
 801a958:	d046      	beq.n	801a9e8 <extend_gnrc_evnt_durn_chk+0xf8>
 801a95a:	42ae      	cmp	r6, r5
 801a95c:	d102      	bne.n	801a964 <extend_gnrc_evnt_durn_chk+0x74>
 801a95e:	6fa8      	ldr	r0, [r5, #120]	@ 0x78
 801a960:	2800      	cmp	r0, #0
 801a962:	d041      	beq.n	801a9e8 <extend_gnrc_evnt_durn_chk+0xf8>
 801a964:	f895 008d 	ldrb.w	r0, [r5, #141]	@ 0x8d
 801a968:	b908      	cbnz	r0, 801a96e <extend_gnrc_evnt_durn_chk+0x7e>
 801a96a:	6fae      	ldr	r6, [r5, #120]	@ 0x78
 801a96c:	b3e6      	cbz	r6, 801a9e8 <extend_gnrc_evnt_durn_chk+0xf8>
 801a96e:	f8cd 8000 	str.w	r8, [sp]
 801a972:	f04f 0801 	mov.w	r8, #1
 801a976:	bf00      	nop
 801a978:	f8da 0000 	ldr.w	r0, [sl]
 801a97c:	f8db 1008 	ldr.w	r1, [fp, #8]
 801a980:	6d32      	ldr	r2, [r6, #80]	@ 0x50
 801a982:	4408      	add	r0, r1
 801a984:	1a10      	subs	r0, r2, r0
 801a986:	42a0      	cmp	r0, r4
 801a988:	d22e      	bcs.n	801a9e8 <extend_gnrc_evnt_durn_chk+0xf8>
 801a98a:	4630      	mov	r0, r6
 801a98c:	f000 f844 	bl	801aa18 <get_priority>
 801a990:	42b8      	cmp	r0, r7
 801a992:	d313      	bcc.n	801a9bc <extend_gnrc_evnt_durn_chk+0xcc>
 801a994:	f895 008d 	ldrb.w	r0, [r5, #141]	@ 0x8d
 801a998:	b960      	cbnz	r0, 801a9b4 <extend_gnrc_evnt_durn_chk+0xc4>
 801a99a:	200d      	movs	r0, #13
 801a99c:	f004 ff88 	bl	801f8b0 <bsp_debug_gpio_set>
 801a9a0:	f899 003a 	ldrb.w	r0, [r9, #58]	@ 0x3a
 801a9a4:	f886 809a 	strb.w	r8, [r6, #154]	@ 0x9a
 801a9a8:	3001      	adds	r0, #1
 801a9aa:	f889 003a 	strb.w	r0, [r9, #58]	@ 0x3a
 801a9ae:	200d      	movs	r0, #13
 801a9b0:	f004 ff80 	bl	801f8b4 <bsp_debug_gpio_clear>
 801a9b4:	6fb6      	ldr	r6, [r6, #120]	@ 0x78
 801a9b6:	2e00      	cmp	r6, #0
 801a9b8:	d1de      	bne.n	801a978 <extend_gnrc_evnt_durn_chk+0x88>
 801a9ba:	e016      	b.n	801a9ea <extend_gnrc_evnt_durn_chk+0xfa>
 801a9bc:	9800      	ldr	r0, [sp, #0]
 801a9be:	2101      	movs	r1, #1
 801a9c0:	3801      	subs	r0, #1
 801a9c2:	fab0 f080 	clz	r0, r0
 801a9c6:	0940      	lsrs	r0, r0, #5
 801a9c8:	f004 ff2b 	bl	801f822 <bsp_assert>
 801a9cc:	e9d6 0124 	ldrd	r0, r1, [r6, #144]	@ 0x90
 801a9d0:	f081 0108 	eor.w	r1, r1, #8
 801a9d4:	4308      	orrs	r0, r1
 801a9d6:	4650      	mov	r0, sl
 801a9d8:	bf08      	it	eq
 801a9da:	4658      	moveq	r0, fp
 801a9dc:	f8db 1008 	ldr.w	r1, [fp, #8]
 801a9e0:	6800      	ldr	r0, [r0, #0]
 801a9e2:	6d32      	ldr	r2, [r6, #80]	@ 0x50
 801a9e4:	4408      	add	r0, r1
 801a9e6:	1a14      	subs	r4, r2, r0
 801a9e8:	b14c      	cbz	r4, 801a9fe <extend_gnrc_evnt_durn_chk+0x10e>
 801a9ea:	6d28      	ldr	r0, [r5, #80]	@ 0x50
 801a9ec:	f8da 1000 	ldr.w	r1, [sl]
 801a9f0:	f8db 2008 	ldr.w	r2, [fp, #8]
 801a9f4:	1a20      	subs	r0, r4, r0
 801a9f6:	4408      	add	r0, r1
 801a9f8:	4410      	add	r0, r2
 801a9fa:	6628      	str	r0, [r5, #96]	@ 0x60
 801a9fc:	e000      	b.n	801aa00 <extend_gnrc_evnt_durn_chk+0x110>
 801a9fe:	2400      	movs	r4, #0
 801aa00:	f899 003a 	ldrb.w	r0, [r9, #58]	@ 0x3a
 801aa04:	b108      	cbz	r0, 801aa0a <extend_gnrc_evnt_durn_chk+0x11a>
 801aa06:	f000 f8f9 	bl	801abfc <recheck_conflicting>
 801aa0a:	f004 ff6c 	bl	801f8e6 <os_enable_isr>
 801aa0e:	4620      	mov	r0, r4
 801aa10:	b001      	add	sp, #4
 801aa12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801aa18 <get_priority>:
 801aa18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801aa1c:	e9d0 2124 	ldrd	r2, r1, [r0, #144]	@ 0x90
 801aa20:	4604      	mov	r4, r0
 801aa22:	f1d2 003f 	rsbs	r0, r2, #63	@ 0x3f
 801aa26:	f04f 0300 	mov.w	r3, #0
 801aa2a:	eb73 0001 	sbcs.w	r0, r3, r1
 801aa2e:	f04f 000b 	mov.w	r0, #11
 801aa32:	db1a      	blt.n	801aa6a <get_priority+0x52>
 801aa34:	1e56      	subs	r6, r2, #1
 801aa36:	f161 0700 	sbc.w	r7, r1, #0
 801aa3a:	f1d6 051f 	rsbs	r5, r6, #31
 801aa3e:	41bb      	sbcs	r3, r7
 801aa40:	f0c0 80d8 	bcc.w	801abf4 <get_priority+0x1dc>
 801aa44:	2301      	movs	r3, #1
 801aa46:	40b3      	lsls	r3, r6
 801aa48:	f013 0f8b 	tst.w	r3, #139	@ 0x8b
 801aa4c:	d018      	beq.n	801aa80 <get_priority+0x68>
 801aa4e:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 801aa50:	f082 0202 	eor.w	r2, r2, #2
 801aa54:	4311      	orrs	r1, r2
 801aa56:	d102      	bne.n	801aa5e <get_priority+0x46>
 801aa58:	7e42      	ldrb	r2, [r0, #25]
 801aa5a:	2a01      	cmp	r2, #1
 801aa5c:	d077      	beq.n	801ab4e <get_priority+0x136>
 801aa5e:	f894 2099 	ldrb.w	r2, [r4, #153]	@ 0x99
 801aa62:	2a02      	cmp	r2, #2
 801aa64:	d925      	bls.n	801aab2 <get_priority+0x9a>
 801aa66:	2006      	movs	r0, #6
 801aa68:	e0c4      	b.n	801abf4 <get_priority+0x1dc>
 801aa6a:	f1d2 07ff 	rsbs	r7, r2, #255	@ 0xff
 801aa6e:	418b      	sbcs	r3, r1
 801aa70:	db11      	blt.n	801aa96 <get_priority+0x7e>
 801aa72:	f082 0340 	eor.w	r3, r2, #64	@ 0x40
 801aa76:	430b      	orrs	r3, r1
 801aa78:	d025      	beq.n	801aac6 <get_priority+0xae>
 801aa7a:	f082 0280 	eor.w	r2, r2, #128	@ 0x80
 801aa7e:	e010      	b.n	801aaa2 <get_priority+0x8a>
 801aa80:	f013 2f80 	tst.w	r3, #2147516416	@ 0x80008000
 801aa84:	f000 80b6 	beq.w	801abf4 <get_priority+0x1dc>
 801aa88:	f894 1099 	ldrb.w	r1, [r4, #153]	@ 0x99
 801aa8c:	2009      	movs	r0, #9
 801aa8e:	2909      	cmp	r1, #9
 801aa90:	bf88      	it	hi
 801aa92:	2005      	movhi	r0, #5
 801aa94:	e0ae      	b.n	801abf4 <get_priority+0x1dc>
 801aa96:	f081 0308 	eor.w	r3, r1, #8
 801aa9a:	4313      	orrs	r3, r2
 801aa9c:	d023      	beq.n	801aae6 <get_priority+0xce>
 801aa9e:	f482 7280 	eor.w	r2, r2, #256	@ 0x100
 801aaa2:	4311      	orrs	r1, r2
 801aaa4:	f040 80a6 	bne.w	801abf4 <get_priority+0x1dc>
 801aaa8:	7e60      	ldrb	r0, [r4, #25]
 801aaaa:	2801      	cmp	r0, #1
 801aaac:	d127      	bne.n	801aafe <get_priority+0xe6>
 801aaae:	2000      	movs	r0, #0
 801aab0:	e0a0      	b.n	801abf4 <get_priority+0x1dc>
 801aab2:	6942      	ldr	r2, [r0, #20]
 801aab4:	200a      	movs	r0, #10
 801aab6:	2900      	cmp	r1, #0
 801aab8:	bf08      	it	eq
 801aaba:	2007      	moveq	r0, #7
 801aabc:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 801aac0:	bf88      	it	hi
 801aac2:	2006      	movhi	r0, #6
 801aac4:	e096      	b.n	801abf4 <get_priority+0x1dc>
 801aac6:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 801aac8:	2101      	movs	r1, #1
 801aaca:	f8b0 8008 	ldrh.w	r8, [r0, #8]
 801aace:	2001      	movs	r0, #1
 801aad0:	f004 fea7 	bl	801f822 <bsp_assert>
 801aad4:	68a0      	ldr	r0, [r4, #8]
 801aad6:	b3e0      	cbz	r0, 801ab52 <get_priority+0x13a>
 801aad8:	f894 1099 	ldrb.w	r1, [r4, #153]	@ 0x99
 801aadc:	200b      	movs	r0, #11
 801aade:	2903      	cmp	r1, #3
 801aae0:	bf88      	it	hi
 801aae2:	2009      	movhi	r0, #9
 801aae4:	e086      	b.n	801abf4 <get_priority+0x1dc>
 801aae6:	f894 0020 	ldrb.w	r0, [r4, #32]
 801aaea:	2801      	cmp	r0, #1
 801aaec:	d0bb      	beq.n	801aa66 <get_priority+0x4e>
 801aaee:	2802      	cmp	r0, #2
 801aaf0:	d02d      	beq.n	801ab4e <get_priority+0x136>
 801aaf2:	f894 0099 	ldrb.w	r0, [r4, #153]	@ 0x99
 801aaf6:	2806      	cmp	r0, #6
 801aaf8:	d2b5      	bcs.n	801aa66 <get_priority+0x4e>
 801aafa:	200a      	movs	r0, #10
 801aafc:	e07a      	b.n	801abf4 <get_priority+0x1dc>
 801aafe:	f894 008c 	ldrb.w	r0, [r4, #140]	@ 0x8c
 801ab02:	2800      	cmp	r0, #0
 801ab04:	d06e      	beq.n	801abe4 <get_priority+0x1cc>
 801ab06:	6f25      	ldr	r5, [r4, #112]	@ 0x70
 801ab08:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 801ab0c:	f105 0108 	add.w	r1, r5, #8
 801ab10:	f006 fbe2 	bl	80212d8 <ble_time_diff_us>
 801ab14:	8b69      	ldrh	r1, [r5, #26]
 801ab16:	f24a 1220 	movw	r2, #41248	@ 0xa120
 801ab1a:	f2c0 0207 	movt	r2, #7
 801ab1e:	fb01 f102 	mul.w	r1, r1, r2
 801ab22:	f248 521f 	movw	r2, #34079	@ 0x851f
 801ab26:	f2c5 12eb 	movt	r2, #20971	@ 0x51eb
 801ab2a:	fb81 1202 	smull	r1, r2, r1, r2
 801ab2e:	1151      	asrs	r1, r2, #5
 801ab30:	eb01 71d2 	add.w	r1, r1, r2, lsr #31
 801ab34:	4281      	cmp	r1, r0
 801ab36:	d959      	bls.n	801abec <get_priority+0x1d4>
 801ab38:	f894 0099 	ldrb.w	r0, [r4, #153]	@ 0x99
 801ab3c:	f894 109b 	ldrb.w	r1, [r4, #155]	@ 0x9b
 801ab40:	2802      	cmp	r0, #2
 801ab42:	bf98      	it	ls
 801ab44:	2903      	cmpls	r1, #3
 801ab46:	d34f      	bcc.n	801abe8 <get_priority+0x1d0>
 801ab48:	4408      	add	r0, r1
 801ab4a:	2805      	cmp	r0, #5
 801ab4c:	d950      	bls.n	801abf0 <get_priority+0x1d8>
 801ab4e:	2003      	movs	r0, #3
 801ab50:	e050      	b.n	801abf4 <get_priority+0x1dc>
 801ab52:	f646 6010 	movw	r0, #28176	@ 0x6e10
 801ab56:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801ab5a:	f890 1038 	ldrb.w	r1, [r0, #56]	@ 0x38
 801ab5e:	2900      	cmp	r1, #0
 801ab60:	d042      	beq.n	801abe8 <get_priority+0x1d0>
 801ab62:	ea4f 1c18 	mov.w	ip, r8, lsr #4
 801ab66:	f100 0308 	add.w	r3, r0, #8
 801ab6a:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 801ab6e:	bf00      	nop
 801ab70:	681d      	ldr	r5, [r3, #0]
 801ab72:	b1bd      	cbz	r5, 801aba4 <get_priority+0x18c>
 801ab74:	e9d5 7624 	ldrd	r7, r6, [r5, #144]	@ 0x90
 801ab78:	f487 7280 	eor.w	r2, r7, #256	@ 0x100
 801ab7c:	4332      	orrs	r2, r6
 801ab7e:	bf1c      	itt	ne
 801ab80:	f087 0280 	eorne.w	r2, r7, #128	@ 0x80
 801ab84:	ea52 0206 	orrsne.w	r2, r2, r6
 801ab88:	d108      	bne.n	801ab9c <get_priority+0x184>
 801ab8a:	6f6a      	ldr	r2, [r5, #116]	@ 0x74
 801ab8c:	4670      	mov	r0, lr
 801ab8e:	8b52      	ldrh	r2, [r2, #26]
 801ab90:	4596      	cmp	lr, r2
 801ab92:	bf88      	it	hi
 801ab94:	4610      	movhi	r0, r2
 801ab96:	4594      	cmp	ip, r2
 801ab98:	bf88      	it	hi
 801ab9a:	4686      	movhi	lr, r0
 801ab9c:	3901      	subs	r1, #1
 801ab9e:	f103 0304 	add.w	r3, r3, #4
 801aba2:	d1e5      	bne.n	801ab70 <get_priority+0x158>
 801aba4:	f11e 0001 	adds.w	r0, lr, #1
 801aba8:	d01e      	beq.n	801abe8 <get_priority+0x1d0>
 801abaa:	f64f 71f0 	movw	r1, #65520	@ 0xfff0
 801abae:	ea01 01ce 	and.w	r1, r1, lr, lsl #3
 801abb2:	f240 02ec 	movw	r2, #236	@ 0xec
 801abb6:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 801abba:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 801abbe:	6812      	ldr	r2, [r2, #0]
 801abc0:	f8c4 8008 	str.w	r8, [r4, #8]
 801abc4:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 801abc8:	f646 4268 	movw	r2, #27752	@ 0x6c68
 801abcc:	f06f 0008 	mvn.w	r0, #8
 801abd0:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 801abd4:	ea00 00ce 	and.w	r0, r0, lr, lsl #3
 801abd8:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 801abda:	6892      	ldr	r2, [r2, #8]
 801abdc:	8118      	strh	r0, [r3, #8]
 801abde:	1888      	adds	r0, r1, r2
 801abe0:	6620      	str	r0, [r4, #96]	@ 0x60
 801abe2:	e779      	b.n	801aad8 <get_priority+0xc0>
 801abe4:	2001      	movs	r0, #1
 801abe6:	e005      	b.n	801abf4 <get_priority+0x1dc>
 801abe8:	2008      	movs	r0, #8
 801abea:	e003      	b.n	801abf4 <get_priority+0x1dc>
 801abec:	2002      	movs	r0, #2
 801abee:	e001      	b.n	801abf4 <get_priority+0x1dc>
 801abf0:	f1c0 0008 	rsb	r0, r0, #8
 801abf4:	b2c0      	uxtb	r0, r0
 801abf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0801abfc <recheck_conflicting>:
 801abfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ac00:	b081      	sub	sp, #4
 801ac02:	f646 6b10 	movw	fp, #28176	@ 0x6e10
 801ac06:	f2c2 0b00 	movt	fp, #8192	@ 0x2000
 801ac0a:	f89b 003a 	ldrb.w	r0, [fp, #58]	@ 0x3a
 801ac0e:	2800      	cmp	r0, #0
 801ac10:	d03c      	beq.n	801ac8c <recheck_conflicting+0x90>
 801ac12:	f04f 0800 	mov.w	r8, #0
 801ac16:	f04f 0901 	mov.w	r9, #1
 801ac1a:	f04f 0a00 	mov.w	sl, #0
 801ac1e:	bf00      	nop
 801ac20:	eb0b 008a 	add.w	r0, fp, sl, lsl #2
 801ac24:	6884      	ldr	r4, [r0, #8]
 801ac26:	b35c      	cbz	r4, 801ac80 <recheck_conflicting+0x84>
 801ac28:	e9d4 7624 	ldrd	r7, r6, [r4, #144]	@ 0x90
 801ac2c:	f894 009a 	ldrb.w	r0, [r4, #154]	@ 0x9a
 801ac30:	2801      	cmp	r0, #1
 801ac32:	d120      	bne.n	801ac76 <recheck_conflicting+0x7a>
 801ac34:	4620      	mov	r0, r4
 801ac36:	2101      	movs	r1, #1
 801ac38:	f8cb 903c 	str.w	r9, [fp, #60]	@ 0x3c
 801ac3c:	f000 fb38 	bl	801b2b0 <schedule_event>
 801ac40:	b190      	cbz	r0, 801ac68 <recheck_conflicting+0x6c>
 801ac42:	f894 1099 	ldrb.w	r1, [r4, #153]	@ 0x99
 801ac46:	f086 0008 	eor.w	r0, r6, #8
 801ac4a:	ea47 0500 	orr.w	r5, r7, r0
 801ac4e:	1c48      	adds	r0, r1, #1
 801ac50:	f8db 103c 	ldr.w	r1, [fp, #60]	@ 0x3c
 801ac54:	f884 0099 	strb.w	r0, [r4, #153]	@ 0x99
 801ac58:	4620      	mov	r0, r4
 801ac5a:	f000 fc65 	bl	801b528 <add_intrvl_to_evnt_time_stamp>
 801ac5e:	2d00      	cmp	r5, #0
 801ac60:	d1e4      	bne.n	801ac2c <recheck_conflicting+0x30>
 801ac62:	2800      	cmp	r0, #0
 801ac64:	d0e2      	beq.n	801ac2c <recheck_conflicting+0x30>
 801ac66:	e006      	b.n	801ac76 <recheck_conflicting+0x7a>
 801ac68:	f89b 003a 	ldrb.w	r0, [fp, #58]	@ 0x3a
 801ac6c:	f884 809a 	strb.w	r8, [r4, #154]	@ 0x9a
 801ac70:	3801      	subs	r0, #1
 801ac72:	f88b 003a 	strb.w	r0, [fp, #58]	@ 0x3a
 801ac76:	f10a 0a01 	add.w	sl, sl, #1
 801ac7a:	f1ba 0f0b 	cmp.w	sl, #11
 801ac7e:	d1cf      	bne.n	801ac20 <recheck_conflicting+0x24>
 801ac80:	f89b 003a 	ldrb.w	r0, [fp, #58]	@ 0x3a
 801ac84:	f04f 0a00 	mov.w	sl, #0
 801ac88:	2800      	cmp	r0, #0
 801ac8a:	d1c9      	bne.n	801ac20 <recheck_conflicting+0x24>
 801ac8c:	b001      	add	sp, #4
 801ac8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801ac94 <evnt_schdlr_check_if_evnt_exist>:
 801ac94:	b180      	cbz	r0, 801acb8 <evnt_schdlr_check_if_evnt_exist+0x24>
 801ac96:	f646 6210 	movw	r2, #28176	@ 0x6e10
 801ac9a:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 801ac9e:	f892 1038 	ldrb.w	r1, [r2, #56]	@ 0x38
 801aca2:	b149      	cbz	r1, 801acb8 <evnt_schdlr_check_if_evnt_exist+0x24>
 801aca4:	3208      	adds	r2, #8
 801aca6:	bf00      	nop
 801aca8:	6813      	ldr	r3, [r2, #0]
 801acaa:	4283      	cmp	r3, r0
 801acac:	bf08      	it	eq
 801acae:	4770      	bxeq	lr
 801acb0:	3901      	subs	r1, #1
 801acb2:	f102 0204 	add.w	r2, r2, #4
 801acb6:	d1f7      	bne.n	801aca8 <evnt_schdlr_check_if_evnt_exist+0x14>
 801acb8:	2000      	movs	r0, #0
 801acba:	4770      	bx	lr

0801acbc <evnt_schdlr_get_master_conn_anchor_point>:
 801acbc:	b5b0      	push	{r4, r5, r7, lr}
 801acbe:	f240 2271 	movw	r2, #625	@ 0x271
 801acc2:	fb01 f102 	mul.w	r1, r1, r2
 801acc6:	f240 42fa 	movw	r2, #1274	@ 0x4fa
 801acca:	4291      	cmp	r1, r2
 801accc:	bf38      	it	cc
 801acce:	460a      	movcc	r2, r1
 801acd0:	237d      	movs	r3, #125	@ 0x7d
 801acd2:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 801acd6:	f240 6325 	movw	r3, #1573	@ 0x625
 801acda:	fb02 f303 	mul.w	r3, r2, r3
 801acde:	29b2      	cmp	r1, #178	@ 0xb2
 801ace0:	eba2 4213 	sub.w	r2, r2, r3, lsr #16
 801ace4:	f240 01ec 	movw	r1, #236	@ 0xec
 801ace8:	b292      	uxth	r2, r2
 801acea:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 801acee:	ea4f 0252 	mov.w	r2, r2, lsr #1
 801acf2:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 801acf6:	f646 4368 	movw	r3, #27752	@ 0x6c68
 801acfa:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 801acfe:	6809      	ldr	r1, [r1, #0]
 801ad00:	689b      	ldr	r3, [r3, #8]
 801ad02:	ea4f 1292 	mov.w	r2, r2, lsr #6
 801ad06:	440b      	add	r3, r1
 801ad08:	bf38      	it	cc
 801ad0a:	2206      	movcc	r2, #6
 801ad0c:	f646 6110 	movw	r1, #28176	@ 0x6e10
 801ad10:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 801ad14:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 801ad16:	441a      	add	r2, r3
 801ad18:	eb01 0481 	add.w	r4, r1, r1, lsl #2
 801ad1c:	4611      	mov	r1, r2
 801ad1e:	2ab2      	cmp	r2, #178	@ 0xb2
 801ad20:	bf88      	it	hi
 801ad22:	ebc3 01c4 	rsbhi	r1, r3, r4, lsl #3
 801ad26:	ebb2 0fc4 	cmp.w	r2, r4, lsl #3
 801ad2a:	bf98      	it	ls
 801ad2c:	4611      	movls	r1, r2
 801ad2e:	4604      	mov	r4, r0
 801ad30:	4608      	mov	r0, r1
 801ad32:	2100      	movs	r1, #0
 801ad34:	2500      	movs	r5, #0
 801ad36:	f000 f803 	bl	801ad40 <get_slot_offset>
 801ad3a:	6020      	str	r0, [r4, #0]
 801ad3c:	80a5      	strh	r5, [r4, #4]
 801ad3e:	bdb0      	pop	{r4, r5, r7, pc}

0801ad40 <get_slot_offset>:
 801ad40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ad44:	f646 6c10 	movw	ip, #28176	@ 0x6e10
 801ad48:	f2c2 0c00 	movt	ip, #8192	@ 0x2000
 801ad4c:	f8dc 2034 	ldr.w	r2, [ip, #52]	@ 0x34
 801ad50:	f04f 0900 	mov.w	r9, #0
 801ad54:	b3da      	cbz	r2, 801adce <get_slot_offset+0x8e>
 801ad56:	f89c 8038 	ldrb.w	r8, [ip, #56]	@ 0x38
 801ad5a:	f04f 0e00 	mov.w	lr, #0
 801ad5e:	f1b8 0f00 	cmp.w	r8, #0
 801ad62:	f000 80ae 	beq.w	801aec2 <get_slot_offset+0x182>
 801ad66:	eb02 0e82 	add.w	lr, r2, r2, lsl #2
 801ad6a:	ea4f 0bce 	mov.w	fp, lr, lsl #3
 801ad6e:	4583      	cmp	fp, r0
 801ad70:	d328      	bcc.n	801adc4 <get_slot_offset+0x84>
 801ad72:	f10c 0608 	add.w	r6, ip, #8
 801ad76:	f04f 0a00 	mov.w	sl, #0
 801ad7a:	4642      	mov	r2, r8
 801ad7c:	6835      	ldr	r5, [r6, #0]
 801ad7e:	b1ad      	cbz	r5, 801adac <get_slot_offset+0x6c>
 801ad80:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801ad82:	1c5f      	adds	r7, r3, #1
 801ad84:	d012      	beq.n	801adac <get_slot_offset+0x6c>
 801ad86:	6e2f      	ldr	r7, [r5, #96]	@ 0x60
 801ad88:	443b      	add	r3, r7
 801ad8a:	455b      	cmp	r3, fp
 801ad8c:	d90a      	bls.n	801ada4 <get_slot_offset+0x64>
 801ad8e:	f1ba 0f00 	cmp.w	sl, #0
 801ad92:	d006      	beq.n	801ada2 <get_slot_offset+0x62>
 801ad94:	e9da 7418 	ldrd	r7, r4, [sl, #96]	@ 0x60
 801ad98:	443c      	add	r4, r7
 801ad9a:	42a3      	cmp	r3, r4
 801ad9c:	bf88      	it	hi
 801ad9e:	46aa      	movhi	sl, r5
 801ada0:	e000      	b.n	801ada4 <get_slot_offset+0x64>
 801ada2:	46aa      	mov	sl, r5
 801ada4:	3a01      	subs	r2, #1
 801ada6:	f106 0604 	add.w	r6, r6, #4
 801adaa:	d1e7      	bne.n	801ad7c <get_slot_offset+0x3c>
 801adac:	f1ba 0f00 	cmp.w	sl, #0
 801adb0:	d010      	beq.n	801add4 <get_slot_offset+0x94>
 801adb2:	e9da 2418 	ldrd	r2, r4, [sl, #96]	@ 0x60
 801adb6:	f1ce 0300 	rsb	r3, lr, #0
 801adba:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 801adbe:	4413      	add	r3, r2
 801adc0:	42a3      	cmp	r3, r4
 801adc2:	d90f      	bls.n	801ade4 <get_slot_offset+0xa4>
 801adc4:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 801adc8:	f04f 0900 	mov.w	r9, #0
 801adcc:	e079      	b.n	801aec2 <get_slot_offset+0x182>
 801adce:	f04f 0e00 	mov.w	lr, #0
 801add2:	e076      	b.n	801aec2 <get_slot_offset+0x182>
 801add4:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801add8:	f04f 0800 	mov.w	r8, #0
 801addc:	e9d2 2318 	ldrd	r2, r3, [r2, #96]	@ 0x60
 801ade0:	4413      	add	r3, r2
 801ade2:	e01e      	b.n	801ae22 <get_slot_offset+0xe2>
 801ade4:	2200      	movs	r2, #0
 801ade6:	bf00      	nop
 801ade8:	eb0c 0782 	add.w	r7, ip, r2, lsl #2
 801adec:	68bf      	ldr	r7, [r7, #8]
 801adee:	b19f      	cbz	r7, 801ae18 <get_slot_offset+0xd8>
 801adf0:	6e7e      	ldr	r6, [r7, #100]	@ 0x64
 801adf2:	1c75      	adds	r5, r6, #1
 801adf4:	d010      	beq.n	801ae18 <get_slot_offset+0xd8>
 801adf6:	6e3f      	ldr	r7, [r7, #96]	@ 0x60
 801adf8:	4437      	add	r7, r6
 801adfa:	455f      	cmp	r7, fp
 801adfc:	bf84      	itt	hi
 801adfe:	fbb7 f5fb 	udivhi	r5, r7, fp
 801ae02:	fb05 771b 	mlshi	r7, r5, fp, r7
 801ae06:	42b3      	cmp	r3, r6
 801ae08:	d906      	bls.n	801ae18 <get_slot_offset+0xd8>
 801ae0a:	42bb      	cmp	r3, r7
 801ae0c:	d307      	bcc.n	801ae1e <get_slot_offset+0xde>
 801ae0e:	3201      	adds	r2, #1
 801ae10:	4590      	cmp	r8, r2
 801ae12:	d1e9      	bne.n	801ade8 <get_slot_offset+0xa8>
 801ae14:	2300      	movs	r3, #0
 801ae16:	e004      	b.n	801ae22 <get_slot_offset+0xe2>
 801ae18:	f1a2 0801 	sub.w	r8, r2, #1
 801ae1c:	e001      	b.n	801ae22 <get_slot_offset+0xe2>
 801ae1e:	463b      	mov	r3, r7
 801ae20:	4690      	mov	r8, r2
 801ae22:	f242 0400 	movw	r4, #8192	@ 0x2000
 801ae26:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 801ae2a:	2700      	movs	r7, #0
 801ae2c:	f2c0 2400 	movt	r4, #512	@ 0x200
 801ae30:	f04f 0900 	mov.w	r9, #0
 801ae34:	4287      	cmp	r7, r0
 801ae36:	da44      	bge.n	801aec2 <get_slot_offset+0x182>
 801ae38:	eb0c 0288 	add.w	r2, ip, r8, lsl #2
 801ae3c:	68d6      	ldr	r6, [r2, #12]
 801ae3e:	b366      	cbz	r6, 801ae9a <get_slot_offset+0x15a>
 801ae40:	6e77      	ldr	r7, [r6, #100]	@ 0x64
 801ae42:	1c7d      	adds	r5, r7, #1
 801ae44:	d029      	beq.n	801ae9a <get_slot_offset+0x15a>
 801ae46:	6e32      	ldr	r2, [r6, #96]	@ 0x60
 801ae48:	19d5      	adds	r5, r2, r7
 801ae4a:	455d      	cmp	r5, fp
 801ae4c:	462a      	mov	r2, r5
 801ae4e:	eba7 0703 	sub.w	r7, r7, r3
 801ae52:	bf84      	itt	hi
 801ae54:	fbb5 f2fb 	udivhi	r2, r5, fp
 801ae58:	fb02 521b 	mlshi	r2, r2, fp, r5
 801ae5c:	2f00      	cmp	r7, #0
 801ae5e:	dc09      	bgt.n	801ae74 <get_slot_offset+0x134>
 801ae60:	4293      	cmp	r3, r2
 801ae62:	bf98      	it	ls
 801ae64:	4613      	movls	r3, r2
 801ae66:	f108 0801 	add.w	r8, r8, #1
 801ae6a:	4556      	cmp	r6, sl
 801ae6c:	f04f 0700 	mov.w	r7, #0
 801ae70:	d1e0      	bne.n	801ae34 <get_slot_offset+0xf4>
 801ae72:	e026      	b.n	801aec2 <get_slot_offset+0x182>
 801ae74:	f8d6 2090 	ldr.w	r2, [r6, #144]	@ 0x90
 801ae78:	4022      	ands	r2, r4
 801ae7a:	bf1c      	itt	ne
 801ae7c:	eb03 0357 	addne.w	r3, r3, r7, lsr #1
 801ae80:	087f      	lsrne	r7, r7, #1
 801ae82:	454f      	cmp	r7, r9
 801ae84:	bfc4      	itt	gt
 801ae86:	46b9      	movgt	r9, r7
 801ae88:	469e      	movgt	lr, r3
 801ae8a:	4556      	cmp	r6, sl
 801ae8c:	d019      	beq.n	801aec2 <get_slot_offset+0x182>
 801ae8e:	f108 0801 	add.w	r8, r8, #1
 801ae92:	455d      	cmp	r5, fp
 801ae94:	462b      	mov	r3, r5
 801ae96:	d9cd      	bls.n	801ae34 <get_slot_offset+0xf4>
 801ae98:	e013      	b.n	801aec2 <get_slot_offset+0x182>
 801ae9a:	f8dc 7008 	ldr.w	r7, [ip, #8]
 801ae9e:	6892      	ldr	r2, [r2, #8]
 801aea0:	6e7f      	ldr	r7, [r7, #100]	@ 0x64
 801aea2:	f8d2 2090 	ldr.w	r2, [r2, #144]	@ 0x90
 801aea6:	ebab 0603 	sub.w	r6, fp, r3
 801aeaa:	4437      	add	r7, r6
 801aeac:	4022      	ands	r2, r4
 801aeae:	eb07 76d7 	add.w	r6, r7, r7, lsr #31
 801aeb2:	bf1c      	itt	ne
 801aeb4:	eb03 0366 	addne.w	r3, r3, r6, asr #1
 801aeb8:	1077      	asrne	r7, r6, #1
 801aeba:	454f      	cmp	r7, r9
 801aebc:	bfc4      	itt	gt
 801aebe:	46b9      	movgt	r9, r7
 801aec0:	469e      	movgt	lr, r3
 801aec2:	b131      	cbz	r1, 801aed2 <get_slot_offset+0x192>
 801aec4:	780a      	ldrb	r2, [r1, #0]
 801aec6:	b922      	cbnz	r2, 801aed2 <get_slot_offset+0x192>
 801aec8:	2200      	movs	r2, #0
 801aeca:	4581      	cmp	r9, r0
 801aecc:	bfb8      	it	lt
 801aece:	2201      	movlt	r2, #1
 801aed0:	700a      	strb	r2, [r1, #0]
 801aed2:	4670      	mov	r0, lr
 801aed4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801aed8 <optm_conn_param>:
 801aed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aedc:	b081      	sub	sp, #4
 801aede:	6f46      	ldr	r6, [r0, #116]	@ 0x74
 801aee0:	4682      	mov	sl, r0
 801aee2:	4689      	mov	r9, r1
 801aee4:	2200      	movs	r2, #0
 801aee6:	f8b6 007c 	ldrh.w	r0, [r6, #124]	@ 0x7c
 801aeea:	f8b6 107e 	ldrh.w	r1, [r6, #126]	@ 0x7e
 801aeee:	f8b6 808c 	ldrh.w	r8, [r6, #140]	@ 0x8c
 801aef2:	f8ad 2002 	strh.w	r2, [sp, #2]
 801aef6:	f10d 0202 	add.w	r2, sp, #2
 801aefa:	2320      	movs	r3, #32
 801aefc:	f7ff fca0 	bl	801a840 <evnt_schdlr_choose_suitable_intrv>
 801af00:	f896 009c 	ldrb.w	r0, [r6, #156]	@ 0x9c
 801af04:	f646 6b10 	movw	fp, #28176	@ 0x6e10
 801af08:	f2c2 0b00 	movt	fp, #8192	@ 0x2000
 801af0c:	b328      	cbz	r0, 801af5a <optm_conn_param+0x82>
 801af0e:	f89b 1038 	ldrb.w	r1, [fp, #56]	@ 0x38
 801af12:	2902      	cmp	r1, #2
 801af14:	d30f      	bcc.n	801af36 <optm_conn_param+0x5e>
 801af16:	f8db 2034 	ldr.w	r2, [fp, #52]	@ 0x34
 801af1a:	b162      	cbz	r2, 801af36 <optm_conn_param+0x5e>
 801af1c:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 801af20:	b28b      	uxth	r3, r1
 801af22:	fbb3 f5f2 	udiv	r5, r3, r2
 801af26:	fb05 3512 	mls	r5, r5, r2, r3
 801af2a:	b1c5      	cbz	r5, 801af5e <optm_conn_param+0x86>
 801af2c:	fbb2 f5f3 	udiv	r5, r2, r3
 801af30:	fb05 2213 	mls	r2, r5, r3, r2
 801af34:	b19a      	cbz	r2, 801af5e <optm_conn_param+0x86>
 801af36:	f8b6 107e 	ldrh.w	r1, [r6, #126]	@ 0x7e
 801af3a:	b28a      	uxth	r2, r1
 801af3c:	fbb2 f3f0 	udiv	r3, r2, r0
 801af40:	fb03 f000 	mul.w	r0, r3, r0
 801af44:	f8b6 307c 	ldrh.w	r3, [r6, #124]	@ 0x7c
 801af48:	1a80      	subs	r0, r0, r2
 801af4a:	4408      	add	r0, r1
 801af4c:	b282      	uxth	r2, r0
 801af4e:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 801af52:	429a      	cmp	r2, r3
 801af54:	bf28      	it	cs
 801af56:	4601      	movcs	r1, r0
 801af58:	e001      	b.n	801af5e <optm_conn_param+0x86>
 801af5a:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 801af5e:	f8b6 0088 	ldrh.w	r0, [r6, #136]	@ 0x88
 801af62:	f8a6 108e 	strh.w	r1, [r6, #142]	@ 0x8e
 801af66:	2800      	cmp	r0, #0
 801af68:	d074      	beq.n	801b054 <optm_conn_param+0x17c>
 801af6a:	b288      	uxth	r0, r1
 801af6c:	f8da 1060 	ldr.w	r1, [sl, #96]	@ 0x60
 801af70:	f000 f896 	bl	801b0a0 <get_intrv_slot_period>
 801af74:	2800      	cmp	r0, #0
 801af76:	d06b      	beq.n	801b050 <optm_conn_param+0x178>
 801af78:	f8b6 00da 	ldrh.w	r0, [r6, #218]	@ 0xda
 801af7c:	f8b6 108c 	ldrh.w	r1, [r6, #140]	@ 0x8c
 801af80:	1a0a      	subs	r2, r1, r0
 801af82:	1a40      	subs	r0, r0, r1
 801af84:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801af88:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801af8c:	ea4f 01c2 	mov.w	r1, r2, lsl #3
 801af90:	f1c0 0000 	rsb	r0, r0, #0
 801af94:	bf88      	it	hi
 801af96:	00c1      	lslhi	r1, r0, #3
 801af98:	f646 600d 	movw	r0, #28173	@ 0x6e0d
 801af9c:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801afa0:	7800      	ldrb	r0, [r0, #0]
 801afa2:	f8da 3060 	ldr.w	r3, [sl, #96]	@ 0x60
 801afa6:	2802      	cmp	r0, #2
 801afa8:	d10c      	bne.n	801afc4 <optm_conn_param+0xec>
 801afaa:	f240 00ec 	movw	r0, #236	@ 0xec
 801afae:	f646 4268 	movw	r2, #27752	@ 0x6c68
 801afb2:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801afb6:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 801afba:	6800      	ldr	r0, [r0, #0]
 801afbc:	6892      	ldr	r2, [r2, #8]
 801afbe:	4410      	add	r0, r2
 801afc0:	1a18      	subs	r0, r3, r0
 801afc2:	1dc3      	adds	r3, r0, #7
 801afc4:	f89b 0038 	ldrb.w	r0, [fp, #56]	@ 0x38
 801afc8:	2800      	cmp	r0, #0
 801afca:	d041      	beq.n	801b050 <optm_conn_param+0x178>
 801afcc:	8af2      	ldrh	r2, [r6, #22]
 801afce:	f8da 5050 	ldr.w	r5, [sl, #80]	@ 0x50
 801afd2:	f8b6 4088 	ldrh.w	r4, [r6, #136]	@ 0x88
 801afd6:	f8db 7034 	ldr.w	r7, [fp, #52]	@ 0x34
 801afda:	fb01 5102 	mla	r1, r1, r2, r5
 801afde:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 801afe2:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 801afe6:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 801afea:	00f9      	lsls	r1, r7, #3
 801afec:	fbb2 f7f1 	udiv	r7, r2, r1
 801aff0:	fb07 2c11 	mls	ip, r7, r1, r2
 801aff4:	f10b 0708 	add.w	r7, fp, #8
 801aff8:	4463      	add	r3, ip
 801affa:	bf00      	nop
 801affc:	683d      	ldr	r5, [r7, #0]
 801affe:	b33d      	cbz	r5, 801b050 <optm_conn_param+0x178>
 801b000:	6e6c      	ldr	r4, [r5, #100]	@ 0x64
 801b002:	1c62      	adds	r2, r4, #1
 801b004:	d024      	beq.n	801b050 <optm_conn_param+0x178>
 801b006:	4555      	cmp	r5, sl
 801b008:	d01e      	beq.n	801b048 <optm_conn_param+0x170>
 801b00a:	6e2a      	ldr	r2, [r5, #96]	@ 0x60
 801b00c:	4564      	cmp	r4, ip
 801b00e:	eb02 0504 	add.w	r5, r2, r4
 801b012:	d801      	bhi.n	801b018 <optm_conn_param+0x140>
 801b014:	4565      	cmp	r5, ip
 801b016:	d23c      	bcs.n	801b092 <optm_conn_param+0x1ba>
 801b018:	42a3      	cmp	r3, r4
 801b01a:	d301      	bcc.n	801b020 <optm_conn_param+0x148>
 801b01c:	42ab      	cmp	r3, r5
 801b01e:	d938      	bls.n	801b092 <optm_conn_param+0x1ba>
 801b020:	4564      	cmp	r4, ip
 801b022:	bf28      	it	cs
 801b024:	42ab      	cmpcs	r3, r5
 801b026:	d234      	bcs.n	801b092 <optm_conn_param+0x1ba>
 801b028:	428d      	cmp	r5, r1
 801b02a:	d305      	bcc.n	801b038 <optm_conn_param+0x160>
 801b02c:	fbb5 f2f1 	udiv	r2, r5, r1
 801b030:	fb02 5211 	mls	r2, r2, r1, r5
 801b034:	4562      	cmp	r2, ip
 801b036:	d22c      	bcs.n	801b092 <optm_conn_param+0x1ba>
 801b038:	428b      	cmp	r3, r1
 801b03a:	d305      	bcc.n	801b048 <optm_conn_param+0x170>
 801b03c:	fbb3 f2f1 	udiv	r2, r3, r1
 801b040:	fb02 3211 	mls	r2, r2, r1, r3
 801b044:	4294      	cmp	r4, r2
 801b046:	d924      	bls.n	801b092 <optm_conn_param+0x1ba>
 801b048:	3801      	subs	r0, #1
 801b04a:	f107 0704 	add.w	r7, r7, #4
 801b04e:	d1d5      	bne.n	801affc <optm_conn_param+0x124>
 801b050:	45c8      	cmp	r8, r9
 801b052:	d101      	bne.n	801b058 <optm_conn_param+0x180>
 801b054:	2000      	movs	r0, #0
 801b056:	e020      	b.n	801b09a <optm_conn_param+0x1c2>
 801b058:	8af1      	ldrh	r1, [r6, #22]
 801b05a:	f8b6 2088 	ldrh.w	r2, [r6, #136]	@ 0x88
 801b05e:	f8b6 008e 	ldrh.w	r0, [r6, #142]	@ 0x8e
 801b062:	45c8      	cmp	r8, r9
 801b064:	d904      	bls.n	801b070 <optm_conn_param+0x198>
 801b066:	eba8 0309 	sub.w	r3, r8, r9
 801b06a:	fb03 2101 	mla	r1, r3, r1, r2
 801b06e:	e00a      	b.n	801b086 <optm_conn_param+0x1ae>
 801b070:	eba9 0308 	sub.w	r3, r9, r8
 801b074:	fb03 f101 	mul.w	r1, r3, r1
 801b078:	1a89      	subs	r1, r1, r2
 801b07a:	fb91 f2f0 	sdiv	r2, r1, r0
 801b07e:	fb02 1110 	mls	r1, r2, r0, r1
 801b082:	b289      	uxth	r1, r1
 801b084:	1a41      	subs	r1, r0, r1
 801b086:	fb91 f2f0 	sdiv	r2, r1, r0
 801b08a:	fb02 1110 	mls	r1, r2, r0, r1
 801b08e:	2000      	movs	r0, #0
 801b090:	e001      	b.n	801b096 <optm_conn_param+0x1be>
 801b092:	2020      	movs	r0, #32
 801b094:	2100      	movs	r1, #0
 801b096:	f8a6 1088 	strh.w	r1, [r6, #136]	@ 0x88
 801b09a:	b001      	add	sp, #4
 801b09c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b0a0 <get_intrv_slot_period>:
 801b0a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b0a4:	f646 6c10 	movw	ip, #28176	@ 0x6e10
 801b0a8:	f2c2 0c00 	movt	ip, #8192	@ 0x2000
 801b0ac:	f8dc 3034 	ldr.w	r3, [ip, #52]	@ 0x34
 801b0b0:	4680      	mov	r8, r0
 801b0b2:	b3db      	cbz	r3, 801b12c <get_intrv_slot_period+0x8c>
 801b0b4:	4543      	cmp	r3, r8
 801b0b6:	d03b      	beq.n	801b130 <get_intrv_slot_period+0x90>
 801b0b8:	d20c      	bcs.n	801b0d4 <get_intrv_slot_period+0x34>
 801b0ba:	eba8 0243 	sub.w	r2, r8, r3, lsl #1
 801b0be:	2002      	movs	r0, #2
 801b0c0:	2500      	movs	r5, #0
 801b0c2:	bf00      	nop
 801b0c4:	42aa      	cmp	r2, r5
 801b0c6:	d034      	beq.n	801b132 <get_intrv_slot_period+0x92>
 801b0c8:	441d      	add	r5, r3
 801b0ca:	195e      	adds	r6, r3, r5
 801b0cc:	4546      	cmp	r6, r8
 801b0ce:	f100 0001 	add.w	r0, r0, #1
 801b0d2:	d3f7      	bcc.n	801b0c4 <get_intrv_slot_period+0x24>
 801b0d4:	ebb3 0f48 	cmp.w	r3, r8, lsl #1
 801b0d8:	d309      	bcc.n	801b0ee <get_intrv_slot_period+0x4e>
 801b0da:	ea4f 0248 	mov.w	r2, r8, lsl #1
 801b0de:	2002      	movs	r0, #2
 801b0e0:	4293      	cmp	r3, r2
 801b0e2:	d029      	beq.n	801b138 <get_intrv_slot_period+0x98>
 801b0e4:	4442      	add	r2, r8
 801b0e6:	429a      	cmp	r2, r3
 801b0e8:	f100 0001 	add.w	r0, r0, #1
 801b0ec:	d9f8      	bls.n	801b0e0 <get_intrv_slot_period+0x40>
 801b0ee:	f1b8 0f00 	cmp.w	r8, #0
 801b0f2:	461d      	mov	r5, r3
 801b0f4:	d009      	beq.n	801b10a <get_intrv_slot_period+0x6a>
 801b0f6:	4640      	mov	r0, r8
 801b0f8:	461a      	mov	r2, r3
 801b0fa:	bf00      	nop
 801b0fc:	1a15      	subs	r5, r2, r0
 801b0fe:	bf9c      	itt	ls
 801b100:	4615      	movls	r5, r2
 801b102:	1a80      	subls	r0, r0, r2
 801b104:	2800      	cmp	r0, #0
 801b106:	462a      	mov	r2, r5
 801b108:	d1f8      	bne.n	801b0fc <get_intrv_slot_period+0x5c>
 801b10a:	f89c 2038 	ldrb.w	r2, [ip, #56]	@ 0x38
 801b10e:	b1da      	cbz	r2, 801b148 <get_intrv_slot_period+0xa8>
 801b110:	f10c 0408 	add.w	r4, ip, #8
 801b114:	2000      	movs	r0, #0
 801b116:	bf00      	nop
 801b118:	6826      	ldr	r6, [r4, #0]
 801b11a:	3404      	adds	r4, #4
 801b11c:	6e77      	ldr	r7, [r6, #100]	@ 0x64
 801b11e:	3701      	adds	r7, #1
 801b120:	bf1c      	itt	ne
 801b122:	6e37      	ldrne	r7, [r6, #96]	@ 0x60
 801b124:	4438      	addne	r0, r7
 801b126:	3a01      	subs	r2, #1
 801b128:	d1f6      	bne.n	801b118 <get_intrv_slot_period+0x78>
 801b12a:	e00e      	b.n	801b14a <get_intrv_slot_period+0xaa>
 801b12c:	f8cc 8034 	str.w	r8, [ip, #52]	@ 0x34
 801b130:	2001      	movs	r0, #1
 801b132:	b280      	uxth	r0, r0
 801b134:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b138:	fbb3 f1f0 	udiv	r1, r3, r0
 801b13c:	b280      	uxth	r0, r0
 801b13e:	f8cc 1034 	str.w	r1, [ip, #52]	@ 0x34
 801b142:	f000 fcdd 	bl	801bb00 <update_slot_period>
 801b146:	e7f3      	b.n	801b130 <get_intrv_slot_period+0x90>
 801b148:	2000      	movs	r0, #0
 801b14a:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 801b14e:	4408      	add	r0, r1
 801b150:	00d1      	lsls	r1, r2, #3
 801b152:	4281      	cmp	r1, r0
 801b154:	d201      	bcs.n	801b15a <get_intrv_slot_period+0xba>
 801b156:	2000      	movs	r0, #0
 801b158:	e7eb      	b.n	801b132 <get_intrv_slot_period+0x92>
 801b15a:	fbb3 f0f5 	udiv	r0, r3, r5
 801b15e:	f8cc 5034 	str.w	r5, [ip, #52]	@ 0x34
 801b162:	b280      	uxth	r0, r0
 801b164:	f000 fccc 	bl	801bb00 <update_slot_period>
 801b168:	fbb8 f0f5 	udiv	r0, r8, r5
 801b16c:	e7e1      	b.n	801b132 <get_intrv_slot_period+0x92>

0801b16e <evnt_schdlr_multi_role_instance>:
 801b16e:	f641 1038 	movw	r0, #6456	@ 0x1938
 801b172:	f6c0 0003 	movt	r0, #2051	@ 0x803
 801b176:	4770      	bx	lr

0801b178 <evnt_schdlr_update_master_conn_params>:
 801b178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b17c:	b081      	sub	sp, #4
 801b17e:	468b      	mov	fp, r1
 801b180:	4606      	mov	r6, r0
 801b182:	e9dd 100a 	ldrd	r1, r0, [sp, #40]	@ 0x28
 801b186:	4615      	mov	r5, r2
 801b188:	3a03      	subs	r2, #3
 801b18a:	b2d2      	uxtb	r2, r2
 801b18c:	f640 17c4 	movw	r7, #2500	@ 0x9c4
 801b190:	2a02      	cmp	r2, #2
 801b192:	bf38      	it	cc
 801b194:	f640 67a6 	movwcc	r7, #3750	@ 0xea6
 801b198:	461c      	mov	r4, r3
 801b19a:	2925      	cmp	r1, #37	@ 0x25
 801b19c:	bf28      	it	cs
 801b19e:	f240 47e2 	movwcs	r7, #1250	@ 0x4e2
 801b1a2:	f003 fb2f 	bl	801e804 <pdu_trnsprt_hndlr_get_payload_lngth>
 801b1a6:	4629      	mov	r1, r5
 801b1a8:	2201      	movs	r2, #1
 801b1aa:	f7f8 f916 	bl	80133da <evnt_schdlr_get_pckt_durn_on_air>
 801b1ae:	f646 412c 	movw	r1, #27692	@ 0x6c2c
 801b1b2:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 801b1b6:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 801b1b8:	4681      	mov	r9, r0
 801b1ba:	6f49      	ldr	r1, [r1, #116]	@ 0x74
 801b1bc:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801b1be:	2907      	cmp	r1, #7
 801b1c0:	bf8f      	iteee	hi
 801b1c2:	2500      	movhi	r5, #0
 801b1c4:	f649 6064 	movwls	r0, #40548	@ 0x9e64
 801b1c8:	f2c2 0000 	movtls	r0, #8192	@ 0x2000
 801b1cc:	f850 5021 	ldrls.w	r5, [r0, r1, lsl #2]
 801b1d0:	4628      	mov	r0, r5
 801b1d2:	2101      	movs	r1, #1
 801b1d4:	2d00      	cmp	r5, #0
 801b1d6:	bf18      	it	ne
 801b1d8:	2001      	movne	r0, #1
 801b1da:	f004 fb22 	bl	801f822 <bsp_assert>
 801b1de:	8ae8      	ldrh	r0, [r5, #22]
 801b1e0:	f105 0a38 	add.w	sl, r5, #56	@ 0x38
 801b1e4:	eb00 0180 	add.w	r1, r0, r0, lsl #2
 801b1e8:	1e60      	subs	r0, r4, #1
 801b1ea:	b2c2      	uxtb	r2, r0
 801b1ec:	9400      	str	r4, [sp, #0]
 801b1ee:	2a04      	cmp	r2, #4
 801b1f0:	ea4f 04c1 	mov.w	r4, r1, lsl #3
 801b1f4:	d204      	bcs.n	801b200 <evnt_schdlr_update_master_conn_params+0x88>
 801b1f6:	b240      	sxtb	r0, r0
 801b1f8:	a127      	add	r1, pc, #156	@ (adr r1, 801b298 <evnt_schdlr_update_master_conn_params+0x120>)
 801b1fa:	f851 8020 	ldr.w	r8, [r1, r0, lsl #2]
 801b1fe:	e005      	b.n	801b20c <evnt_schdlr_update_master_conn_params+0x94>
 801b200:	2000      	movs	r0, #0
 801b202:	2101      	movs	r1, #1
 801b204:	f04f 0800 	mov.w	r8, #0
 801b208:	f004 fb0b 	bl	801f822 <bsp_assert>
 801b20c:	a026      	add	r0, pc, #152	@ (adr r0, 801b2a8 <conn_req_time_us>)
 801b20e:	f830 0018 	ldrh.w	r0, [r0, r8, lsl #1]
 801b212:	2201      	movs	r2, #1
 801b214:	4448      	add	r0, r9
 801b216:	f100 0198 	add.w	r1, r0, #152	@ 0x98
 801b21a:	4630      	mov	r0, r6
 801b21c:	f006 f8e4 	bl	80213e8 <ble_time_add_uint>
 801b220:	6830      	ldr	r0, [r6, #0]
 801b222:	6ba9      	ldr	r1, [r5, #56]	@ 0x38
 801b224:	1a40      	subs	r0, r0, r1
 801b226:	fbb0 f2f4 	udiv	r2, r0, r4
 801b22a:	4421      	add	r1, r4
 801b22c:	fb02 f204 	mul.w	r2, r2, r4
 801b230:	1a12      	subs	r2, r2, r0
 801b232:	4411      	add	r1, r2
 801b234:	4408      	add	r0, r1
 801b236:	63a8      	str	r0, [r5, #56]	@ 0x38
 801b238:	2000      	movs	r0, #0
 801b23a:	87a8      	strh	r0, [r5, #60]	@ 0x3c
 801b23c:	4650      	mov	r0, sl
 801b23e:	4631      	mov	r1, r6
 801b240:	f006 f84a 	bl	80212d8 <ble_time_diff_us>
 801b244:	f8cb 0000 	str.w	r0, [fp]
 801b248:	9800      	ldr	r0, [sp, #0]
 801b24a:	2100      	movs	r1, #0
 801b24c:	f008 f969 	bl	8023522 <llhwc_get_hw_setup_time>
 801b250:	f8db 1000 	ldr.w	r1, [fp]
 801b254:	4408      	add	r0, r1
 801b256:	f207 41e2 	addw	r1, r7, #1250	@ 0x4e2
 801b25a:	4288      	cmp	r0, r1
 801b25c:	d20b      	bcs.n	801b276 <evnt_schdlr_update_master_conn_params+0xfe>
 801b25e:	8ae9      	ldrh	r1, [r5, #22]
 801b260:	f240 42e2 	movw	r2, #1250	@ 0x4e2
 801b264:	fb01 0002 	mla	r0, r1, r2, r0
 801b268:	f8cb 0000 	str.w	r0, [fp]
 801b26c:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 801b26e:	4420      	add	r0, r4
 801b270:	63a8      	str	r0, [r5, #56]	@ 0x38
 801b272:	f8db 0000 	ldr.w	r0, [fp]
 801b276:	1bc0      	subs	r0, r0, r7
 801b278:	f241 7159 	movw	r1, #5977	@ 0x1759
 801b27c:	f2a0 208a 	subw	r0, r0, #650	@ 0x28a
 801b280:	f2cd 11b7 	movt	r1, #53687	@ 0xd1b7
 801b284:	fba0 0101 	umull	r0, r1, r0, r1
 801b288:	0a88      	lsrs	r0, r1, #10
 801b28a:	f8cb 0000 	str.w	r0, [fp]
 801b28e:	8228      	strh	r0, [r5, #16]
 801b290:	b001      	add	sp, #4
 801b292:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b296:	bf00      	nop
 801b298:	00000000 	.word	0x00000000
 801b29c:	00000001 	.word	0x00000001
 801b2a0:	00000003 	.word	0x00000003
 801b2a4:	00000002 	.word	0x00000002

0801b2a8 <conn_req_time_us>:
 801b2a8:	00b40160 	.word	0x00b40160
 801b2ac:	0b5003ee 	.word	0x0b5003ee

0801b2b0 <schedule_event>:
 801b2b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b2b4:	b087      	sub	sp, #28
 801b2b6:	2800      	cmp	r0, #0
 801b2b8:	9101      	str	r1, [sp, #4]
 801b2ba:	f000 8131 	beq.w	801b520 <schedule_event+0x270>
 801b2be:	f646 6710 	movw	r7, #28176	@ 0x6e10
 801b2c2:	f2c2 0700 	movt	r7, #8192	@ 0x2000
 801b2c6:	4604      	mov	r4, r0
 801b2c8:	6838      	ldr	r0, [r7, #0]
 801b2ca:	2800      	cmp	r0, #0
 801b2cc:	f000 8127 	beq.w	801b51e <schedule_event+0x26e>
 801b2d0:	f104 0150 	add.w	r1, r4, #80	@ 0x50
 801b2d4:	f04f 0900 	mov.w	r9, #0
 801b2d8:	9100      	str	r1, [sp, #0]
 801b2da:	4606      	mov	r6, r0
 801b2dc:	2001      	movs	r0, #1
 801b2de:	2101      	movs	r1, #1
 801b2e0:	46ba      	mov	sl, r7
 801b2e2:	f004 fa9e 	bl	801f822 <bsp_assert>
 801b2e6:	2001      	movs	r0, #1
 801b2e8:	2101      	movs	r1, #1
 801b2ea:	f004 fa9a 	bl	801f822 <bsp_assert>
 801b2ee:	4637      	mov	r7, r6
 801b2f0:	f857 0f50 	ldr.w	r0, [r7, #80]!
 801b2f4:	f8b6 1060 	ldrh.w	r1, [r6, #96]	@ 0x60
 801b2f8:	f10d 0b10 	add.w	fp, sp, #16
 801b2fc:	f8b4 5060 	ldrh.w	r5, [r4, #96]	@ 0x60
 801b300:	687a      	ldr	r2, [r7, #4]
 801b302:	e9cd 0204 	strd	r0, r2, [sp, #16]
 801b306:	e9d4 2014 	ldrd	r2, r0, [r4, #80]	@ 0x50
 801b30a:	e9cd 2002 	strd	r2, r0, [sp, #8]
 801b30e:	4658      	mov	r0, fp
 801b310:	2205      	movs	r2, #5
 801b312:	f006 f869 	bl	80213e8 <ble_time_add_uint>
 801b316:	f10d 0808 	add.w	r8, sp, #8
 801b31a:	4640      	mov	r0, r8
 801b31c:	4629      	mov	r1, r5
 801b31e:	2205      	movs	r2, #5
 801b320:	f006 f862 	bl	80213e8 <ble_time_add_uint>
 801b324:	9900      	ldr	r1, [sp, #0]
 801b326:	4658      	mov	r0, fp
 801b328:	f005 ffbc 	bl	80212a4 <ble_time_comp>
 801b32c:	2800      	cmp	r0, #0
 801b32e:	f340 80cf 	ble.w	801b4d0 <schedule_event+0x220>
 801b332:	4640      	mov	r0, r8
 801b334:	4639      	mov	r1, r7
 801b336:	f005 ffb5 	bl	80212a4 <ble_time_comp>
 801b33a:	2800      	cmp	r0, #0
 801b33c:	f340 80de 	ble.w	801b4fc <schedule_event+0x24c>
 801b340:	9801      	ldr	r0, [sp, #4]
 801b342:	2801      	cmp	r0, #1
 801b344:	f000 80e3 	beq.w	801b50e <schedule_event+0x25e>
 801b348:	e9d4 0124 	ldrd	r0, r1, [r4, #144]	@ 0x90
 801b34c:	4657      	mov	r7, sl
 801b34e:	f080 0080 	eor.w	r0, r0, #128	@ 0x80
 801b352:	4308      	orrs	r0, r1
 801b354:	bf1e      	ittt	ne
 801b356:	e9d6 1224 	ldrdne	r1, r2, [r6, #144]	@ 0x90
 801b35a:	f081 0180 	eorne.w	r1, r1, #128	@ 0x80
 801b35e:	ea51 0102 	orrsne.w	r1, r1, r2
 801b362:	d111      	bne.n	801b388 <schedule_event+0xd8>
 801b364:	f646 610d 	movw	r1, #28173	@ 0x6e0d
 801b368:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 801b36c:	7809      	ldrb	r1, [r1, #0]
 801b36e:	2900      	cmp	r1, #0
 801b370:	f04f 0100 	mov.w	r1, #0
 801b374:	f88d 1010 	strb.w	r1, [sp, #16]
 801b378:	d106      	bne.n	801b388 <schedule_event+0xd8>
 801b37a:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 801b37c:	3101      	adds	r1, #1
 801b37e:	bf1c      	itt	ne
 801b380:	6e71      	ldrne	r1, [r6, #100]	@ 0x64
 801b382:	f111 0101 	addsne.w	r1, r1, #1
 801b386:	d127      	bne.n	801b3d8 <schedule_event+0x128>
 801b388:	4630      	mov	r0, r6
 801b38a:	f7ff fb45 	bl	801aa18 <get_priority>
 801b38e:	4605      	mov	r5, r0
 801b390:	4620      	mov	r0, r4
 801b392:	f7ff fb41 	bl	801aa18 <get_priority>
 801b396:	4285      	cmp	r5, r0
 801b398:	f0c0 80a1 	bcc.w	801b4de <schedule_event+0x22e>
 801b39c:	f000 809f 	beq.w	801b4de <schedule_event+0x22e>
 801b3a0:	2000      	movs	r0, #0
 801b3a2:	6fb5      	ldr	r5, [r6, #120]	@ 0x78
 801b3a4:	f1b9 0f00 	cmp.w	r9, #0
 801b3a8:	bf14      	ite	ne
 801b3aa:	f8c9 5078 	strne.w	r5, [r9, #120]	@ 0x78
 801b3ae:	603d      	streq	r5, [r7, #0]
 801b3b0:	67b0      	str	r0, [r6, #120]	@ 0x78
 801b3b2:	200d      	movs	r0, #13
 801b3b4:	f004 fa7c 	bl	801f8b0 <bsp_debug_gpio_set>
 801b3b8:	f897 003a 	ldrb.w	r0, [r7, #58]	@ 0x3a
 801b3bc:	2101      	movs	r1, #1
 801b3be:	3001      	adds	r0, #1
 801b3c0:	f887 003a 	strb.w	r0, [r7, #58]	@ 0x3a
 801b3c4:	200d      	movs	r0, #13
 801b3c6:	f886 109a 	strb.w	r1, [r6, #154]	@ 0x9a
 801b3ca:	f004 fa73 	bl	801f8b4 <bsp_debug_gpio_clear>
 801b3ce:	2d00      	cmp	r5, #0
 801b3d0:	462e      	mov	r6, r5
 801b3d2:	f47f af83 	bne.w	801b2dc <schedule_event+0x2c>
 801b3d6:	e09c      	b.n	801b512 <schedule_event+0x262>
 801b3d8:	46a0      	mov	r8, r4
 801b3da:	2800      	cmp	r0, #0
 801b3dc:	bf08      	it	eq
 801b3de:	46b0      	moveq	r8, r6
 801b3e0:	e9d8 0124 	ldrd	r0, r1, [r8, #144]	@ 0x90
 801b3e4:	4635      	mov	r5, r6
 801b3e6:	bf08      	it	eq
 801b3e8:	4625      	moveq	r5, r4
 801b3ea:	f8d5 a074 	ldr.w	sl, [r5, #116]	@ 0x74
 801b3ee:	f480 3000 	eor.w	r0, r0, #131072	@ 0x20000
 801b3f2:	4308      	orrs	r0, r1
 801b3f4:	d016      	beq.n	801b424 <schedule_event+0x174>
 801b3f6:	f895 109c 	ldrb.w	r1, [r5, #156]	@ 0x9c
 801b3fa:	1c48      	adds	r0, r1, #1
 801b3fc:	f885 009c 	strb.w	r0, [r5, #156]	@ 0x9c
 801b400:	b111      	cbz	r1, 801b408 <schedule_event+0x158>
 801b402:	f895 109d 	ldrb.w	r1, [r5, #157]	@ 0x9d
 801b406:	e002      	b.n	801b40e <schedule_event+0x15e>
 801b408:	2100      	movs	r1, #0
 801b40a:	f885 109d 	strb.w	r1, [r5, #157]	@ 0x9d
 801b40e:	b2c0      	uxtb	r0, r0
 801b410:	4408      	add	r0, r1
 801b412:	2864      	cmp	r0, #100	@ 0x64
 801b414:	d33a      	bcc.n	801b48c <schedule_event+0x1dc>
 801b416:	2264      	movs	r2, #100	@ 0x64
 801b418:	fb01 f102 	mul.w	r1, r1, r2
 801b41c:	fbb1 f0f0 	udiv	r0, r1, r0
 801b420:	2846      	cmp	r0, #70	@ 0x46
 801b422:	d833      	bhi.n	801b48c <schedule_event+0x1dc>
 801b424:	6e28      	ldr	r0, [r5, #96]	@ 0x60
 801b426:	a904      	add	r1, sp, #16
 801b428:	3028      	adds	r0, #40	@ 0x28
 801b42a:	f7ff fc89 	bl	801ad40 <get_slot_offset>
 801b42e:	f89d 1010 	ldrb.w	r1, [sp, #16]
 801b432:	bb59      	cbnz	r1, 801b48c <schedule_event+0x1dc>
 801b434:	1c41      	adds	r1, r0, #1
 801b436:	d029      	beq.n	801b48c <schedule_event+0x1dc>
 801b438:	6e69      	ldr	r1, [r5, #100]	@ 0x64
 801b43a:	4288      	cmp	r0, r1
 801b43c:	d901      	bls.n	801b442 <schedule_event+0x192>
 801b43e:	1a41      	subs	r1, r0, r1
 801b440:	e005      	b.n	801b44e <schedule_event+0x19e>
 801b442:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801b444:	1a41      	subs	r1, r0, r1
 801b446:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801b44a:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 801b44e:	f64c 42cd 	movw	r2, #52429	@ 0xcccd
 801b452:	f6cc 42cc 	movt	r2, #52428	@ 0xcccc
 801b456:	fba1 2302 	umull	r2, r3, r1, r2
 801b45a:	095a      	lsrs	r2, r3, #5
 801b45c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801b460:	ebc1 01c2 	rsb	r1, r1, r2, lsl #3
 801b464:	4408      	add	r0, r1
 801b466:	f646 610d 	movw	r1, #28173	@ 0x6e0d
 801b46a:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 801b46e:	7809      	ldrb	r1, [r1, #0]
 801b470:	3028      	adds	r0, #40	@ 0x28
 801b472:	f8ca 0074 	str.w	r0, [sl, #116]	@ 0x74
 801b476:	b929      	cbnz	r1, 801b484 <schedule_event+0x1d4>
 801b478:	f646 610d 	movw	r1, #28173	@ 0x6e0d
 801b47c:	2001      	movs	r0, #1
 801b47e:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 801b482:	7008      	strb	r0, [r1, #0]
 801b484:	2003      	movs	r0, #3
 801b486:	4651      	mov	r1, sl
 801b488:	f006 f903 	bl	8021692 <emngr_post_event>
 801b48c:	e9d8 0124 	ldrd	r0, r1, [r8, #144]	@ 0x90
 801b490:	f480 3000 	eor.w	r0, r0, #131072	@ 0x20000
 801b494:	4308      	orrs	r0, r1
 801b496:	f43f af77 	beq.w	801b388 <schedule_event+0xd8>
 801b49a:	f895 009c 	ldrb.w	r0, [r5, #156]	@ 0x9c
 801b49e:	f895 109d 	ldrb.w	r1, [r5, #157]	@ 0x9d
 801b4a2:	4408      	add	r0, r1
 801b4a4:	2864      	cmp	r0, #100	@ 0x64
 801b4a6:	f4ff af6f 	bcc.w	801b388 <schedule_event+0xd8>
 801b4aa:	e9d4 0124 	ldrd	r0, r1, [r4, #144]	@ 0x90
 801b4ae:	f080 0080 	eor.w	r0, r0, #128	@ 0x80
 801b4b2:	4308      	orrs	r0, r1
 801b4b4:	bf04      	itt	eq
 801b4b6:	2000      	moveq	r0, #0
 801b4b8:	f8a4 009c 	strheq.w	r0, [r4, #156]	@ 0x9c
 801b4bc:	e9d6 0124 	ldrd	r0, r1, [r6, #144]	@ 0x90
 801b4c0:	f080 0080 	eor.w	r0, r0, #128	@ 0x80
 801b4c4:	4308      	orrs	r0, r1
 801b4c6:	bf04      	itt	eq
 801b4c8:	2000      	moveq	r0, #0
 801b4ca:	f8a6 009c 	strheq.w	r0, [r6, #156]	@ 0x9c
 801b4ce:	e75b      	b.n	801b388 <schedule_event+0xd8>
 801b4d0:	6fb0      	ldr	r0, [r6, #120]	@ 0x78
 801b4d2:	46b1      	mov	r9, r6
 801b4d4:	2800      	cmp	r0, #0
 801b4d6:	4657      	mov	r7, sl
 801b4d8:	f47f aeff 	bne.w	801b2da <schedule_event+0x2a>
 801b4dc:	e01d      	b.n	801b51a <schedule_event+0x26a>
 801b4de:	200d      	movs	r0, #13
 801b4e0:	f004 f9e6 	bl	801f8b0 <bsp_debug_gpio_set>
 801b4e4:	f897 103a 	ldrb.w	r1, [r7, #58]	@ 0x3a
 801b4e8:	2001      	movs	r0, #1
 801b4ea:	f884 009a 	strb.w	r0, [r4, #154]	@ 0x9a
 801b4ee:	1c48      	adds	r0, r1, #1
 801b4f0:	f887 003a 	strb.w	r0, [r7, #58]	@ 0x3a
 801b4f4:	200d      	movs	r0, #13
 801b4f6:	f004 f9dd 	bl	801f8b4 <bsp_debug_gpio_clear>
 801b4fa:	e011      	b.n	801b520 <schedule_event+0x270>
 801b4fc:	f1b9 0f00 	cmp.w	r9, #0
 801b500:	bf0c      	ite	eq
 801b502:	f8ca 4000 	streq.w	r4, [sl]
 801b506:	f8c9 4078 	strne.w	r4, [r9, #120]	@ 0x78
 801b50a:	67a6      	str	r6, [r4, #120]	@ 0x78
 801b50c:	e008      	b.n	801b520 <schedule_event+0x270>
 801b50e:	201f      	movs	r0, #31
 801b510:	e007      	b.n	801b522 <schedule_event+0x272>
 801b512:	f1b9 0f00 	cmp.w	r9, #0
 801b516:	464e      	mov	r6, r9
 801b518:	d001      	beq.n	801b51e <schedule_event+0x26e>
 801b51a:	67b4      	str	r4, [r6, #120]	@ 0x78
 801b51c:	e000      	b.n	801b520 <schedule_event+0x270>
 801b51e:	603c      	str	r4, [r7, #0]
 801b520:	2000      	movs	r0, #0
 801b522:	b007      	add	sp, #28
 801b524:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b528 <add_intrvl_to_evnt_time_stamp>:
 801b528:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b52c:	b082      	sub	sp, #8
 801b52e:	f248 19b4 	movw	r9, #33204	@ 0x81b4
 801b532:	f2c2 0900 	movt	r9, #8192	@ 0x2000
 801b536:	4604      	mov	r4, r0
 801b538:	6f47      	ldr	r7, [r0, #116]	@ 0x74
 801b53a:	f8d9 0000 	ldr.w	r0, [r9]
 801b53e:	468a      	mov	sl, r1
 801b540:	2500      	movs	r5, #0
 801b542:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 801b546:	9500      	str	r5, [sp, #0]
 801b548:	f004 f9cf 	bl	801f8ea <os_rcrsv_mutex_wait>
 801b54c:	e9d4 1024 	ldrd	r1, r0, [r4, #144]	@ 0x90
 801b550:	261f      	movs	r6, #31
 801b552:	f1d1 023f 	rsbs	r2, r1, #63	@ 0x3f
 801b556:	eb75 0200 	sbcs.w	r2, r5, r0
 801b55a:	db12      	blt.n	801b582 <add_intrvl_to_evnt_time_stamp+0x5a>
 801b55c:	3901      	subs	r1, #1
 801b55e:	f160 0000 	sbc.w	r0, r0, #0
 801b562:	f1d1 021f 	rsbs	r2, r1, #31
 801b566:	eb75 0000 	sbcs.w	r0, r5, r0
 801b56a:	d36b      	bcc.n	801b644 <add_intrvl_to_evnt_time_stamp+0x11c>
 801b56c:	2001      	movs	r0, #1
 801b56e:	4088      	lsls	r0, r1
 801b570:	f010 0f8b 	tst.w	r0, #139	@ 0x8b
 801b574:	d017      	beq.n	801b5a6 <add_intrvl_to_evnt_time_stamp+0x7e>
 801b576:	7e78      	ldrb	r0, [r7, #25]
 801b578:	2801      	cmp	r0, #1
 801b57a:	d140      	bne.n	801b5fe <add_intrvl_to_evnt_time_stamp+0xd6>
 801b57c:	2000      	movs	r0, #0
 801b57e:	2600      	movs	r6, #0
 801b580:	e04c      	b.n	801b61c <add_intrvl_to_evnt_time_stamp+0xf4>
 801b582:	f1d1 02ff 	rsbs	r2, r1, #255	@ 0xff
 801b586:	eb75 0200 	sbcs.w	r2, r5, r0
 801b58a:	db1e      	blt.n	801b5ca <add_intrvl_to_evnt_time_stamp+0xa2>
 801b58c:	f081 0240 	eor.w	r2, r1, #64	@ 0x40
 801b590:	4302      	orrs	r2, r0
 801b592:	d04d      	beq.n	801b630 <add_intrvl_to_evnt_time_stamp+0x108>
 801b594:	f081 0180 	eor.w	r1, r1, #128	@ 0x80
 801b598:	4308      	orrs	r0, r1
 801b59a:	d153      	bne.n	801b644 <add_intrvl_to_evnt_time_stamp+0x11c>
 801b59c:	4620      	mov	r0, r4
 801b59e:	4651      	mov	r1, sl
 801b5a0:	f7f8 f8be 	bl	8013720 <evnt_schdlr_update_master_conn_timers>
 801b5a4:	e04d      	b.n	801b642 <add_intrvl_to_evnt_time_stamp+0x11a>
 801b5a6:	f010 2f80 	tst.w	r0, #2147516416	@ 0x80008000
 801b5aa:	d04b      	beq.n	801b644 <add_intrvl_to_evnt_time_stamp+0x11c>
 801b5ac:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 801b5ae:	2202      	movs	r2, #2
 801b5b0:	8900      	ldrh	r0, [r0, #8]
 801b5b2:	fb00 f10a 	mul.w	r1, r0, sl
 801b5b6:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 801b5ba:	f005 ff15 	bl	80213e8 <ble_time_add_uint>
 801b5be:	f8b4 0088 	ldrh.w	r0, [r4, #136]	@ 0x88
 801b5c2:	3001      	adds	r0, #1
 801b5c4:	f8a4 0088 	strh.w	r0, [r4, #136]	@ 0x88
 801b5c8:	e03b      	b.n	801b642 <add_intrvl_to_evnt_time_stamp+0x11a>
 801b5ca:	f481 7280 	eor.w	r2, r1, #256	@ 0x100
 801b5ce:	4302      	orrs	r2, r0
 801b5d0:	d040      	beq.n	801b654 <add_intrvl_to_evnt_time_stamp+0x12c>
 801b5d2:	f080 0008 	eor.w	r0, r0, #8
 801b5d6:	4308      	orrs	r0, r1
 801b5d8:	d134      	bne.n	801b644 <add_intrvl_to_evnt_time_stamp+0x11c>
 801b5da:	f646 6810 	movw	r8, #28176	@ 0x6e10
 801b5de:	f2c2 0800 	movt	r8, #8192	@ 0x2000
 801b5e2:	f8d8 6000 	ldr.w	r6, [r8]
 801b5e6:	a801      	add	r0, sp, #4
 801b5e8:	f006 ff2f 	bl	802244a <llhwc_slptmr_get>
 801b5ec:	68a0      	ldr	r0, [r4, #8]
 801b5ee:	b3b8      	cbz	r0, 801b660 <add_intrvl_to_evnt_time_stamp+0x138>
 801b5f0:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 801b5f2:	fa5f f28a 	uxtb.w	r2, sl
 801b5f6:	fb00 1002 	mla	r0, r0, r2, r1
 801b5fa:	6520      	str	r0, [r4, #80]	@ 0x50
 801b5fc:	e021      	b.n	801b642 <add_intrvl_to_evnt_time_stamp+0x11a>
 801b5fe:	4668      	mov	r0, sp
 801b600:	2101      	movs	r1, #1
 801b602:	f7fc fd9c 	bl	801813e <llhwc_gen_rnd_num>
 801b606:	4606      	mov	r6, r0
 801b608:	fab0 f080 	clz	r0, r0
 801b60c:	0940      	lsrs	r0, r0, #5
 801b60e:	2101      	movs	r1, #1
 801b610:	f004 f907 	bl	801f822 <bsp_assert>
 801b614:	9800      	ldr	r0, [sp, #0]
 801b616:	f000 000f 	and.w	r0, r0, #15
 801b61a:	9000      	str	r0, [sp, #0]
 801b61c:	6979      	ldr	r1, [r7, #20]
 801b61e:	2202      	movs	r2, #2
 801b620:	4408      	add	r0, r1
 801b622:	fb00 f10a 	mul.w	r1, r0, sl
 801b626:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 801b62a:	f005 fedd 	bl	80213e8 <ble_time_add_uint>
 801b62e:	e009      	b.n	801b644 <add_intrvl_to_evnt_time_stamp+0x11c>
 801b630:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 801b632:	2202      	movs	r2, #2
 801b634:	8900      	ldrh	r0, [r0, #8]
 801b636:	fb00 f10a 	mul.w	r1, r0, sl
 801b63a:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 801b63e:	f005 fed3 	bl	80213e8 <ble_time_add_uint>
 801b642:	2600      	movs	r6, #0
 801b644:	f8d9 0000 	ldr.w	r0, [r9]
 801b648:	f004 f955 	bl	801f8f6 <os_rcrsv_mutex_release>
 801b64c:	4630      	mov	r0, r6
 801b64e:	b002      	add	sp, #8
 801b650:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b654:	4620      	mov	r0, r4
 801b656:	4651      	mov	r1, sl
 801b658:	f7f7 ff86 	bl	8013568 <evnt_schdlr_update_slave_conn_timers>
 801b65c:	4606      	mov	r6, r0
 801b65e:	e7f1      	b.n	801b644 <add_intrvl_to_evnt_time_stamp+0x11c>
 801b660:	6921      	ldr	r1, [r4, #16]
 801b662:	9801      	ldr	r0, [sp, #4]
 801b664:	b1b9      	cbz	r1, 801b696 <add_intrvl_to_evnt_time_stamp+0x16e>
 801b666:	4288      	cmp	r0, r1
 801b668:	d315      	bcc.n	801b696 <add_intrvl_to_evnt_time_stamp+0x16e>
 801b66a:	2501      	movs	r5, #1
 801b66c:	f894 609a 	ldrb.w	r6, [r4, #154]	@ 0x9a
 801b670:	4620      	mov	r0, r4
 801b672:	f000 f881 	bl	801b778 <rmv_evnt>
 801b676:	2e01      	cmp	r6, #1
 801b678:	d104      	bne.n	801b684 <add_intrvl_to_evnt_time_stamp+0x15c>
 801b67a:	f898 003a 	ldrb.w	r0, [r8, #58]	@ 0x3a
 801b67e:	3801      	subs	r0, #1
 801b680:	f888 003a 	strb.w	r0, [r8, #58]	@ 0x3a
 801b684:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 801b686:	b109      	cbz	r1, 801b68c <add_intrvl_to_evnt_time_stamp+0x164>
 801b688:	4628      	mov	r0, r5
 801b68a:	4788      	blx	r1
 801b68c:	4620      	mov	r0, r4
 801b68e:	f7f7 fd3f 	bl	8013110 <evnt_schdlr_free_evnt>
 801b692:	261f      	movs	r6, #31
 801b694:	e7d6      	b.n	801b644 <add_intrvl_to_evnt_time_stamp+0x11c>
 801b696:	4625      	mov	r5, r4
 801b698:	f855 2f50 	ldr.w	r2, [r5, #80]!
 801b69c:	4611      	mov	r1, r2
 801b69e:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 801b6a0:	b183      	cbz	r3, 801b6c4 <add_intrvl_to_evnt_time_stamp+0x19c>
 801b6a2:	e9d3 1324 	ldrd	r1, r3, [r3, #144]	@ 0x90
 801b6a6:	f240 07ec 	movw	r7, #236	@ 0xec
 801b6aa:	f646 4c68 	movw	ip, #27752	@ 0x6c68
 801b6ae:	f2c2 0700 	movt	r7, #8192	@ 0x2000
 801b6b2:	f083 0308 	eor.w	r3, r3, #8
 801b6b6:	4319      	orrs	r1, r3
 801b6b8:	f2c2 0c00 	movt	ip, #8192	@ 0x2000
 801b6bc:	bf08      	it	eq
 801b6be:	4667      	moveq	r7, ip
 801b6c0:	6839      	ldr	r1, [r7, #0]
 801b6c2:	1a51      	subs	r1, r2, r1
 801b6c4:	b17e      	cbz	r6, 801b6e6 <add_intrvl_to_evnt_time_stamp+0x1be>
 801b6c6:	4288      	cmp	r0, r1
 801b6c8:	d30d      	bcc.n	801b6e6 <add_intrvl_to_evnt_time_stamp+0x1be>
 801b6ca:	6d31      	ldr	r1, [r6, #80]	@ 0x50
 801b6cc:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 801b6ce:	1a09      	subs	r1, r1, r0
 801b6d0:	4299      	cmp	r1, r3
 801b6d2:	d909      	bls.n	801b6e8 <add_intrvl_to_evnt_time_stamp+0x1c0>
 801b6d4:	f646 4168 	movw	r1, #27752	@ 0x6c68
 801b6d8:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 801b6dc:	6809      	ldr	r1, [r1, #0]
 801b6de:	6028      	str	r0, [r5, #0]
 801b6e0:	4628      	mov	r0, r5
 801b6e2:	2205      	movs	r2, #5
 801b6e4:	e7ab      	b.n	801b63e <add_intrvl_to_evnt_time_stamp+0x116>
 801b6e6:	b146      	cbz	r6, 801b6fa <add_intrvl_to_evnt_time_stamp+0x1d2>
 801b6e8:	4631      	mov	r1, r6
 801b6ea:	f851 7f50 	ldr.w	r7, [r1, #80]!
 801b6ee:	690b      	ldr	r3, [r1, #16]
 801b6f0:	441f      	add	r7, r3
 801b6f2:	42ba      	cmp	r2, r7
 801b6f4:	d307      	bcc.n	801b706 <add_intrvl_to_evnt_time_stamp+0x1de>
 801b6f6:	6fb6      	ldr	r6, [r6, #120]	@ 0x78
 801b6f8:	e7f5      	b.n	801b6e6 <add_intrvl_to_evnt_time_stamp+0x1be>
 801b6fa:	f646 4668 	movw	r6, #27752	@ 0x6c68
 801b6fe:	6028      	str	r0, [r5, #0]
 801b700:	f2c2 0600 	movt	r6, #8192	@ 0x2000
 801b704:	e015      	b.n	801b732 <add_intrvl_to_evnt_time_stamp+0x20a>
 801b706:	e9d6 0224 	ldrd	r0, r2, [r6, #144]	@ 0x90
 801b70a:	3660      	adds	r6, #96	@ 0x60
 801b70c:	f080 0010 	eor.w	r0, r0, #16
 801b710:	4310      	orrs	r0, r2
 801b712:	d10b      	bne.n	801b72c <add_intrvl_to_evnt_time_stamp+0x204>
 801b714:	f240 501b 	movw	r0, #1307	@ 0x51b
 801b718:	4283      	cmp	r3, r0
 801b71a:	d307      	bcc.n	801b72c <add_intrvl_to_evnt_time_stamp+0x204>
 801b71c:	f894 2099 	ldrb.w	r2, [r4, #153]	@ 0x99
 801b720:	2001      	movs	r0, #1
 801b722:	f884 0020 	strb.w	r0, [r4, #32]
 801b726:	1c50      	adds	r0, r2, #1
 801b728:	f884 0099 	strb.w	r0, [r4, #153]	@ 0x99
 801b72c:	4628      	mov	r0, r5
 801b72e:	f005 fe36 	bl	802139e <ble_time_set>
 801b732:	6831      	ldr	r1, [r6, #0]
 801b734:	4628      	mov	r0, r5
 801b736:	2205      	movs	r2, #5
 801b738:	f005 fe56 	bl	80213e8 <ble_time_add_uint>
 801b73c:	6920      	ldr	r0, [r4, #16]
 801b73e:	b118      	cbz	r0, 801b748 <add_intrvl_to_evnt_time_stamp+0x220>
 801b740:	6829      	ldr	r1, [r5, #0]
 801b742:	4281      	cmp	r1, r0
 801b744:	f63f af91 	bhi.w	801b66a <add_intrvl_to_evnt_time_stamp+0x142>
 801b748:	69e0      	ldr	r0, [r4, #28]
 801b74a:	2800      	cmp	r0, #0
 801b74c:	f43f af79 	beq.w	801b642 <add_intrvl_to_evnt_time_stamp+0x11a>
 801b750:	f240 03ec 	movw	r3, #236	@ 0xec
 801b754:	f646 4768 	movw	r7, #27752	@ 0x6c68
 801b758:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 801b75c:	f2c2 0700 	movt	r7, #8192	@ 0x2000
 801b760:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 801b762:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 801b764:	681b      	ldr	r3, [r3, #0]
 801b766:	68bf      	ldr	r7, [r7, #8]
 801b768:	4411      	add	r1, r2
 801b76a:	19da      	adds	r2, r3, r7
 801b76c:	1a89      	subs	r1, r1, r2
 801b76e:	4281      	cmp	r1, r0
 801b770:	f67f af67 	bls.w	801b642 <add_intrvl_to_evnt_time_stamp+0x11a>
 801b774:	2504      	movs	r5, #4
 801b776:	e779      	b.n	801b66c <add_intrvl_to_evnt_time_stamp+0x144>

0801b778 <rmv_evnt>:
 801b778:	b570      	push	{r4, r5, r6, lr}
 801b77a:	e9d0 1224 	ldrd	r1, r2, [r0, #144]	@ 0x90
 801b77e:	f082 0202 	eor.w	r2, r2, #2
 801b782:	4311      	orrs	r1, r2
 801b784:	d111      	bne.n	801b7aa <rmv_evnt+0x32>
 801b786:	f646 6110 	movw	r1, #28176	@ 0x6e10
 801b78a:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 801b78e:	684b      	ldr	r3, [r1, #4]
 801b790:	4283      	cmp	r3, r0
 801b792:	d03e      	beq.n	801b812 <rmv_evnt+0x9a>
 801b794:	2b00      	cmp	r3, #0
 801b796:	d03e      	beq.n	801b816 <rmv_evnt+0x9e>
 801b798:	461a      	mov	r2, r3
 801b79a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801b79c:	4283      	cmp	r3, r0
 801b79e:	d1f9      	bne.n	801b794 <rmv_evnt+0x1c>
 801b7a0:	6f83      	ldr	r3, [r0, #120]	@ 0x78
 801b7a2:	6793      	str	r3, [r2, #120]	@ 0x78
 801b7a4:	2200      	movs	r2, #0
 801b7a6:	6782      	str	r2, [r0, #120]	@ 0x78
 801b7a8:	e035      	b.n	801b816 <rmv_evnt+0x9e>
 801b7aa:	f646 6610 	movw	r6, #28176	@ 0x6e10
 801b7ae:	f2c2 0600 	movt	r6, #8192	@ 0x2000
 801b7b2:	f896 1038 	ldrb.w	r1, [r6, #56]	@ 0x38
 801b7b6:	f8b0 c08a 	ldrh.w	ip, [r0, #138]	@ 0x8a
 801b7ba:	f8d0 e064 	ldr.w	lr, [r0, #100]	@ 0x64
 801b7be:	2300      	movs	r3, #0
 801b7c0:	b149      	cbz	r1, 801b7d6 <rmv_evnt+0x5e>
 801b7c2:	bf00      	nop
 801b7c4:	eb06 0483 	add.w	r4, r6, r3, lsl #2
 801b7c8:	68a4      	ldr	r4, [r4, #8]
 801b7ca:	4284      	cmp	r4, r0
 801b7cc:	d003      	beq.n	801b7d6 <rmv_evnt+0x5e>
 801b7ce:	3301      	adds	r3, #1
 801b7d0:	4299      	cmp	r1, r3
 801b7d2:	d1f7      	bne.n	801b7c4 <rmv_evnt+0x4c>
 801b7d4:	e011      	b.n	801b7fa <rmv_evnt+0x82>
 801b7d6:	428b      	cmp	r3, r1
 801b7d8:	d20f      	bcs.n	801b7fa <rmv_evnt+0x82>
 801b7da:	1c5c      	adds	r4, r3, #1
 801b7dc:	428c      	cmp	r4, r1
 801b7de:	d008      	beq.n	801b7f2 <rmv_evnt+0x7a>
 801b7e0:	3901      	subs	r1, #1
 801b7e2:	bf00      	nop
 801b7e4:	eb06 0483 	add.w	r4, r6, r3, lsl #2
 801b7e8:	3301      	adds	r3, #1
 801b7ea:	68e2      	ldr	r2, [r4, #12]
 801b7ec:	4299      	cmp	r1, r3
 801b7ee:	60a2      	str	r2, [r4, #8]
 801b7f0:	d1f8      	bne.n	801b7e4 <rmv_evnt+0x6c>
 801b7f2:	eb06 0183 	add.w	r1, r6, r3, lsl #2
 801b7f6:	2300      	movs	r3, #0
 801b7f8:	608b      	str	r3, [r1, #8]
 801b7fa:	6833      	ldr	r3, [r6, #0]
 801b7fc:	4283      	cmp	r3, r0
 801b7fe:	d010      	beq.n	801b822 <rmv_evnt+0xaa>
 801b800:	b1a3      	cbz	r3, 801b82c <rmv_evnt+0xb4>
 801b802:	4619      	mov	r1, r3
 801b804:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801b806:	4283      	cmp	r3, r0
 801b808:	d1fa      	bne.n	801b800 <rmv_evnt+0x88>
 801b80a:	f850 2f78 	ldr.w	r2, [r0, #120]!
 801b80e:	678a      	str	r2, [r1, #120]	@ 0x78
 801b810:	e00a      	b.n	801b828 <rmv_evnt+0xb0>
 801b812:	6f80      	ldr	r0, [r0, #120]	@ 0x78
 801b814:	6048      	str	r0, [r1, #4]
 801b816:	f891 0039 	ldrb.w	r0, [r1, #57]	@ 0x39
 801b81a:	3801      	subs	r0, #1
 801b81c:	f881 0039 	strb.w	r0, [r1, #57]	@ 0x39
 801b820:	e042      	b.n	801b8a8 <rmv_evnt+0x130>
 801b822:	f850 1f78 	ldr.w	r1, [r0, #120]!
 801b826:	6031      	str	r1, [r6, #0]
 801b828:	2100      	movs	r1, #0
 801b82a:	6001      	str	r1, [r0, #0]
 801b82c:	f896 0038 	ldrb.w	r0, [r6, #56]	@ 0x38
 801b830:	f896 1039 	ldrb.w	r1, [r6, #57]	@ 0x39
 801b834:	3801      	subs	r0, #1
 801b836:	4301      	orrs	r1, r0
 801b838:	0609      	lsls	r1, r1, #24
 801b83a:	f886 0038 	strb.w	r0, [r6, #56]	@ 0x38
 801b83e:	d102      	bne.n	801b846 <rmv_evnt+0xce>
 801b840:	f000 f834 	bl	801b8ac <multi_reset>
 801b844:	e030      	b.n	801b8a8 <rmv_evnt+0x130>
 801b846:	f11e 0101 	adds.w	r1, lr, #1
 801b84a:	d102      	bne.n	801b852 <rmv_evnt+0xda>
 801b84c:	b2c1      	uxtb	r1, r0
 801b84e:	2901      	cmp	r1, #1
 801b850:	d104      	bne.n	801b85c <rmv_evnt+0xe4>
 801b852:	4660      	mov	r0, ip
 801b854:	f000 f846 	bl	801b8e4 <update_radio_period_after_rmv_evnt>
 801b858:	f896 0038 	ldrb.w	r0, [r6, #56]	@ 0x38
 801b85c:	0601      	lsls	r1, r0, #24
 801b85e:	d023      	beq.n	801b8a8 <rmv_evnt+0x130>
 801b860:	f04f 0c00 	mov.w	ip, #0
 801b864:	2200      	movs	r2, #0
 801b866:	bf00      	nop
 801b868:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 801b86c:	688b      	ldr	r3, [r1, #8]
 801b86e:	b1db      	cbz	r3, 801b8a8 <rmv_evnt+0x130>
 801b870:	e9d3 4124 	ldrd	r4, r1, [r3, #144]	@ 0x90
 801b874:	f084 4500 	eor.w	r5, r4, #2147483648	@ 0x80000000
 801b878:	430d      	orrs	r5, r1
 801b87a:	bf1c      	itt	ne
 801b87c:	f084 0540 	eorne.w	r5, r4, #64	@ 0x40
 801b880:	ea51 0105 	orrsne.w	r1, r1, r5
 801b884:	d10c      	bne.n	801b8a0 <rmv_evnt+0x128>
 801b886:	6899      	ldr	r1, [r3, #8]
 801b888:	b151      	cbz	r1, 801b8a0 <rmv_evnt+0x128>
 801b88a:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 801b88c:	8101      	strh	r1, [r0, #8]
 801b88e:	6898      	ldr	r0, [r3, #8]
 801b890:	f8c3 c008 	str.w	ip, [r3, #8]
 801b894:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801b898:	0081      	lsls	r1, r0, #2
 801b89a:	f896 0038 	ldrb.w	r0, [r6, #56]	@ 0x38
 801b89e:	6619      	str	r1, [r3, #96]	@ 0x60
 801b8a0:	3201      	adds	r2, #1
 801b8a2:	b2c1      	uxtb	r1, r0
 801b8a4:	428a      	cmp	r2, r1
 801b8a6:	d3df      	bcc.n	801b868 <rmv_evnt+0xf0>
 801b8a8:	2000      	movs	r0, #0
 801b8aa:	bd70      	pop	{r4, r5, r6, pc}

0801b8ac <multi_reset>:
 801b8ac:	b570      	push	{r4, r5, r6, lr}
 801b8ae:	f646 6410 	movw	r4, #28176	@ 0x6e10
 801b8b2:	2502      	movs	r5, #2
 801b8b4:	f2c2 0400 	movt	r4, #8192	@ 0x2000
 801b8b8:	2600      	movs	r6, #0
 801b8ba:	bf00      	nop
 801b8bc:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
 801b8c0:	b118      	cbz	r0, 801b8ca <multi_reset+0x1e>
 801b8c2:	f7f7 fc25 	bl	8013110 <evnt_schdlr_free_evnt>
 801b8c6:	f844 6025 	str.w	r6, [r4, r5, lsl #2]
 801b8ca:	3501      	adds	r5, #1
 801b8cc:	2d0d      	cmp	r5, #13
 801b8ce:	d1f5      	bne.n	801b8bc <multi_reset+0x10>
 801b8d0:	4620      	mov	r0, r4
 801b8d2:	2100      	movs	r1, #0
 801b8d4:	2240      	movs	r2, #64	@ 0x40
 801b8d6:	2500      	movs	r5, #0
 801b8d8:	f008 fe86 	bl	80245e8 <ble_memset>
 801b8dc:	2000      	movs	r0, #0
 801b8de:	6365      	str	r5, [r4, #52]	@ 0x34
 801b8e0:	bd70      	pop	{r4, r5, r6, pc}
	...

0801b8e4 <update_radio_period_after_rmv_evnt>:
 801b8e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b8e6:	b081      	sub	sp, #4
 801b8e8:	f646 6710 	movw	r7, #28176	@ 0x6e10
 801b8ec:	f2c2 0700 	movt	r7, #8192	@ 0x2000
 801b8f0:	f897 1038 	ldrb.w	r1, [r7, #56]	@ 0x38
 801b8f4:	b1b1      	cbz	r1, 801b924 <update_radio_period_after_rmv_evnt+0x40>
 801b8f6:	2901      	cmp	r1, #1
 801b8f8:	d117      	bne.n	801b92a <update_radio_period_after_rmv_evnt+0x46>
 801b8fa:	68b8      	ldr	r0, [r7, #8]
 801b8fc:	2300      	movs	r3, #0
 801b8fe:	e9d0 2124 	ldrd	r2, r1, [r0, #144]	@ 0x90
 801b902:	637b      	str	r3, [r7, #52]	@ 0x34
 801b904:	f082 0610 	eor.w	r6, r2, #16
 801b908:	430e      	orrs	r6, r1
 801b90a:	bf1c      	itt	ne
 801b90c:	f082 0320 	eorne.w	r3, r2, #32
 801b910:	ea53 0301 	orrsne.w	r3, r3, r1
 801b914:	d156      	bne.n	801b9c4 <update_radio_period_after_rmv_evnt+0xe0>
 801b916:	6f41      	ldr	r1, [r0, #116]	@ 0x74
 801b918:	f101 0008 	add.w	r0, r1, #8
 801b91c:	310a      	adds	r1, #10
 801b91e:	f000 f873 	bl	801ba08 <get_scan_intrv_slot_period>
 801b922:	e058      	b.n	801b9d6 <update_radio_period_after_rmv_evnt+0xf2>
 801b924:	2000      	movs	r0, #0
 801b926:	6378      	str	r0, [r7, #52]	@ 0x34
 801b928:	e063      	b.n	801b9f2 <update_radio_period_after_rmv_evnt+0x10e>
 801b92a:	68bd      	ldr	r5, [r7, #8]
 801b92c:	2d00      	cmp	r5, #0
 801b92e:	d060      	beq.n	801b9f2 <update_radio_period_after_rmv_evnt+0x10e>
 801b930:	f107 040c 	add.w	r4, r7, #12
 801b934:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 801b938:	4622      	mov	r2, r4
 801b93a:	4629      	mov	r1, r5
 801b93c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801b940:	6e4e      	ldr	r6, [r1, #100]	@ 0x64
 801b942:	3601      	adds	r6, #1
 801b944:	d00b      	beq.n	801b95e <update_radio_period_after_rmv_evnt+0x7a>
 801b946:	f8b1 608a 	ldrh.w	r6, [r1, #138]	@ 0x8a
 801b94a:	4286      	cmp	r6, r0
 801b94c:	d951      	bls.n	801b9f2 <update_radio_period_after_rmv_evnt+0x10e>
 801b94e:	b29b      	uxth	r3, r3
 801b950:	f852 1b04 	ldr.w	r1, [r2], #4
 801b954:	429e      	cmp	r6, r3
 801b956:	bf38      	it	cc
 801b958:	4633      	movcc	r3, r6
 801b95a:	2900      	cmp	r1, #0
 801b95c:	d1f0      	bne.n	801b940 <update_radio_period_after_rmv_evnt+0x5c>
 801b95e:	b298      	uxth	r0, r3
 801b960:	4560      	cmp	r0, ip
 801b962:	d046      	beq.n	801b9f2 <update_radio_period_after_rmv_evnt+0x10e>
 801b964:	2d00      	cmp	r5, #0
 801b966:	d046      	beq.n	801b9f6 <update_radio_period_after_rmv_evnt+0x112>
 801b968:	4622      	mov	r2, r4
 801b96a:	4629      	mov	r1, r5
 801b96c:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 801b96e:	3301      	adds	r3, #1
 801b970:	d00b      	beq.n	801b98a <update_radio_period_after_rmv_evnt+0xa6>
 801b972:	f8b1 108a 	ldrh.w	r1, [r1, #138]	@ 0x8a
 801b976:	b289      	uxth	r1, r1
 801b978:	fbb1 f3f0 	udiv	r3, r1, r0
 801b97c:	fb03 1110 	mls	r1, r3, r0, r1
 801b980:	bbb9      	cbnz	r1, 801b9f2 <update_radio_period_after_rmv_evnt+0x10e>
 801b982:	f852 1b04 	ldr.w	r1, [r2], #4
 801b986:	2900      	cmp	r1, #0
 801b988:	d1f0      	bne.n	801b96c <update_radio_period_after_rmv_evnt+0x88>
 801b98a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801b98c:	fb01 f100 	mul.w	r1, r1, r0
 801b990:	6379      	str	r1, [r7, #52]	@ 0x34
 801b992:	b3a5      	cbz	r5, 801b9fe <update_radio_period_after_rmv_evnt+0x11a>
 801b994:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 801b998:	00ca      	lsls	r2, r1, #3
 801b99a:	bf00      	nop
 801b99c:	6e69      	ldr	r1, [r5, #100]	@ 0x64
 801b99e:	3101      	adds	r1, #1
 801b9a0:	d027      	beq.n	801b9f2 <update_radio_period_after_rmv_evnt+0x10e>
 801b9a2:	6d29      	ldr	r1, [r5, #80]	@ 0x50
 801b9a4:	f8b5 308a 	ldrh.w	r3, [r5, #138]	@ 0x8a
 801b9a8:	fbb1 f7f2 	udiv	r7, r1, r2
 801b9ac:	fbb3 f3f0 	udiv	r3, r3, r0
 801b9b0:	fb07 1112 	mls	r1, r7, r2, r1
 801b9b4:	f8a5 308a 	strh.w	r3, [r5, #138]	@ 0x8a
 801b9b8:	6669      	str	r1, [r5, #100]	@ 0x64
 801b9ba:	f854 5b04 	ldr.w	r5, [r4], #4
 801b9be:	2d00      	cmp	r5, #0
 801b9c0:	d1ec      	bne.n	801b99c <update_radio_period_after_rmv_evnt+0xb8>
 801b9c2:	e01c      	b.n	801b9fe <update_radio_period_after_rmv_evnt+0x11a>
 801b9c4:	f082 0280 	eor.w	r2, r2, #128	@ 0x80
 801b9c8:	4311      	orrs	r1, r2
 801b9ca:	d112      	bne.n	801b9f2 <update_radio_period_after_rmv_evnt+0x10e>
 801b9cc:	6f02      	ldr	r2, [r0, #112]	@ 0x70
 801b9ce:	6e01      	ldr	r1, [r0, #96]	@ 0x60
 801b9d0:	8ad0      	ldrh	r0, [r2, #22]
 801b9d2:	f7ff fb65 	bl	801b0a0 <get_intrv_slot_period>
 801b9d6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801b9d8:	68b9      	ldr	r1, [r7, #8]
 801b9da:	f8a1 008a 	strh.w	r0, [r1, #138]	@ 0x8a
 801b9de:	b142      	cbz	r2, 801b9f2 <update_radio_period_after_rmv_evnt+0x10e>
 801b9e0:	eb02 0082 	add.w	r0, r2, r2, lsl #2
 801b9e4:	6d0a      	ldr	r2, [r1, #80]	@ 0x50
 801b9e6:	00c0      	lsls	r0, r0, #3
 801b9e8:	fbb2 f3f0 	udiv	r3, r2, r0
 801b9ec:	fb03 2010 	mls	r0, r3, r0, r2
 801b9f0:	6648      	str	r0, [r1, #100]	@ 0x64
 801b9f2:	b001      	add	sp, #4
 801b9f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b9f6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801b9f8:	fb01 f000 	mul.w	r0, r1, r0
 801b9fc:	6378      	str	r0, [r7, #52]	@ 0x34
 801b9fe:	b001      	add	sp, #4
 801ba00:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801ba04:	f000 b856 	b.w	801bab4 <sort_events_table>

0801ba08 <get_scan_intrv_slot_period>:
 801ba08:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ba0a:	b081      	sub	sp, #4
 801ba0c:	f646 6c10 	movw	ip, #28176	@ 0x6e10
 801ba10:	f2c2 0c00 	movt	ip, #8192	@ 0x2000
 801ba14:	f8dc 4034 	ldr.w	r4, [ip, #52]	@ 0x34
 801ba18:	f8b0 e000 	ldrh.w	lr, [r0]
 801ba1c:	ea4f 035e 	mov.w	r3, lr, lsr #1
 801ba20:	b1bc      	cbz	r4, 801ba52 <get_scan_intrv_slot_period+0x4a>
 801ba22:	f89c 2038 	ldrb.w	r2, [ip, #56]	@ 0x38
 801ba26:	b122      	cbz	r2, 801ba32 <get_scan_intrv_slot_period+0x2a>
 801ba28:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801ba2c:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 801ba2e:	3201      	adds	r2, #1
 801ba30:	d00f      	beq.n	801ba52 <get_scan_intrv_slot_period+0x4a>
 801ba32:	429c      	cmp	r4, r3
 801ba34:	d00f      	beq.n	801ba56 <get_scan_intrv_slot_period+0x4e>
 801ba36:	d215      	bcs.n	801ba64 <get_scan_intrv_slot_period+0x5c>
 801ba38:	eba3 0544 	sub.w	r5, r3, r4, lsl #1
 801ba3c:	2202      	movs	r2, #2
 801ba3e:	2600      	movs	r6, #0
 801ba40:	42b5      	cmp	r5, r6
 801ba42:	d021      	beq.n	801ba88 <get_scan_intrv_slot_period+0x80>
 801ba44:	4426      	add	r6, r4
 801ba46:	19a7      	adds	r7, r4, r6
 801ba48:	429f      	cmp	r7, r3
 801ba4a:	f102 0201 	add.w	r2, r2, #1
 801ba4e:	d3f7      	bcc.n	801ba40 <get_scan_intrv_slot_period+0x38>
 801ba50:	e00a      	b.n	801ba68 <get_scan_intrv_slot_period+0x60>
 801ba52:	f8cc 3034 	str.w	r3, [ip, #52]	@ 0x34
 801ba56:	f02e 0101 	bic.w	r1, lr, #1
 801ba5a:	8001      	strh	r1, [r0, #0]
 801ba5c:	2201      	movs	r2, #1
 801ba5e:	b290      	uxth	r0, r2
 801ba60:	b001      	add	sp, #4
 801ba62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ba64:	2202      	movs	r2, #2
 801ba66:	4627      	mov	r7, r4
 801ba68:	429f      	cmp	r7, r3
 801ba6a:	d90b      	bls.n	801ba84 <get_scan_intrv_slot_period+0x7c>
 801ba6c:	1e55      	subs	r5, r2, #1
 801ba6e:	fb03 f505 	mul.w	r5, r3, r5
 801ba72:	1b2d      	subs	r5, r5, r4
 801ba74:	fbb4 f6f2 	udiv	r6, r4, r2
 801ba78:	18ed      	adds	r5, r5, r3
 801ba7a:	d00d      	beq.n	801ba98 <get_scan_intrv_slot_period+0x90>
 801ba7c:	429e      	cmp	r6, r3
 801ba7e:	f102 0201 	add.w	r2, r2, #1
 801ba82:	d8f7      	bhi.n	801ba74 <get_scan_intrv_slot_period+0x6c>
 801ba84:	2200      	movs	r2, #0
 801ba86:	e7ea      	b.n	801ba5e <get_scan_intrv_slot_period+0x56>
 801ba88:	880b      	ldrh	r3, [r1, #0]
 801ba8a:	4573      	cmp	r3, lr
 801ba8c:	f02e 0301 	bic.w	r3, lr, #1
 801ba90:	bf08      	it	eq
 801ba92:	800b      	strheq	r3, [r1, #0]
 801ba94:	8003      	strh	r3, [r0, #0]
 801ba96:	e7e2      	b.n	801ba5e <get_scan_intrv_slot_period+0x56>
 801ba98:	880b      	ldrh	r3, [r1, #0]
 801ba9a:	f8cc 6034 	str.w	r6, [ip, #52]	@ 0x34
 801ba9e:	4573      	cmp	r3, lr
 801baa0:	f02e 0301 	bic.w	r3, lr, #1
 801baa4:	bf08      	it	eq
 801baa6:	800b      	strheq	r3, [r1, #0]
 801baa8:	8003      	strh	r3, [r0, #0]
 801baaa:	b290      	uxth	r0, r2
 801baac:	f000 f828 	bl	801bb00 <update_slot_period>
 801bab0:	e7d4      	b.n	801ba5c <get_scan_intrv_slot_period+0x54>
	...

0801bab4 <sort_events_table>:
 801bab4:	b570      	push	{r4, r5, r6, lr}
 801bab6:	f646 6c10 	movw	ip, #28176	@ 0x6e10
 801baba:	2200      	movs	r2, #0
 801babc:	f2c2 0c00 	movt	ip, #8192	@ 0x2000
 801bac0:	f04f 0e00 	mov.w	lr, #0
 801bac4:	f8dc 0008 	ldr.w	r0, [ip, #8]
 801bac8:	2300      	movs	r3, #0
 801baca:	bf00      	nop
 801bacc:	b170      	cbz	r0, 801baec <sort_events_table+0x38>
 801bace:	eb0c 0183 	add.w	r1, ip, r3, lsl #2
 801bad2:	68cc      	ldr	r4, [r1, #12]
 801bad4:	b154      	cbz	r4, 801baec <sort_events_table+0x38>
 801bad6:	6e45      	ldr	r5, [r0, #100]	@ 0x64
 801bad8:	6e66      	ldr	r6, [r4, #100]	@ 0x64
 801bada:	3301      	adds	r3, #1
 801badc:	42b5      	cmp	r5, r6
 801bade:	bf86      	itte	hi
 801bae0:	e9c1 4002 	strdhi	r4, r0, [r1, #8]
 801bae4:	2201      	movhi	r2, #1
 801bae6:	4620      	movls	r0, r4
 801bae8:	2b0a      	cmp	r3, #10
 801baea:	d1ef      	bne.n	801bacc <sort_events_table+0x18>
 801baec:	b132      	cbz	r2, 801bafc <sort_events_table+0x48>
 801baee:	f10e 0e01 	add.w	lr, lr, #1
 801baf2:	f1be 0f0b 	cmp.w	lr, #11
 801baf6:	f04f 0201 	mov.w	r2, #1
 801bafa:	d1e3      	bne.n	801bac4 <sort_events_table+0x10>
 801bafc:	bd70      	pop	{r4, r5, r6, pc}
	...

0801bb00 <update_slot_period>:
 801bb00:	b5b0      	push	{r4, r5, r7, lr}
 801bb02:	f646 6210 	movw	r2, #28176	@ 0x6e10
 801bb06:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 801bb0a:	f892 1038 	ldrb.w	r1, [r2, #56]	@ 0x38
 801bb0e:	b1d9      	cbz	r1, 801bb48 <update_slot_period+0x48>
 801bb10:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 801bb12:	3208      	adds	r2, #8
 801bb14:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801bb18:	ea4f 0cc3 	mov.w	ip, r3, lsl #3
 801bb1c:	6813      	ldr	r3, [r2, #0]
 801bb1e:	b17b      	cbz	r3, 801bb40 <update_slot_period+0x40>
 801bb20:	f8b3 408a 	ldrh.w	r4, [r3, #138]	@ 0x8a
 801bb24:	f8d3 e064 	ldr.w	lr, [r3, #100]	@ 0x64
 801bb28:	fb04 f400 	mul.w	r4, r4, r0
 801bb2c:	f11e 0501 	adds.w	r5, lr, #1
 801bb30:	f8a3 408a 	strh.w	r4, [r3, #138]	@ 0x8a
 801bb34:	d004      	beq.n	801bb40 <update_slot_period+0x40>
 801bb36:	fbbe f4fc 	udiv	r4, lr, ip
 801bb3a:	fb04 e51c 	mls	r5, r4, ip, lr
 801bb3e:	665d      	str	r5, [r3, #100]	@ 0x64
 801bb40:	3901      	subs	r1, #1
 801bb42:	f102 0204 	add.w	r2, r2, #4
 801bb46:	d1e9      	bne.n	801bb1c <update_slot_period+0x1c>
 801bb48:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 801bb4c:	f7ff bfb2 	b.w	801bab4 <sort_events_table>

0801bb50 <multi_init>:
 801bb50:	b5b0      	push	{r4, r5, r7, lr}
 801bb52:	f646 6410 	movw	r4, #28176	@ 0x6e10
 801bb56:	f2c2 0400 	movt	r4, #8192	@ 0x2000
 801bb5a:	4620      	mov	r0, r4
 801bb5c:	2100      	movs	r1, #0
 801bb5e:	2240      	movs	r2, #64	@ 0x40
 801bb60:	2500      	movs	r5, #0
 801bb62:	f008 fd41 	bl	80245e8 <ble_memset>
 801bb66:	2000      	movs	r0, #0
 801bb68:	6365      	str	r5, [r4, #52]	@ 0x34
 801bb6a:	bdb0      	pop	{r4, r5, r7, pc}

0801bb6c <get_nxt_evnt>:
 801bb6c:	f646 6010 	movw	r0, #28176	@ 0x6e10
 801bb70:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801bb74:	6800      	ldr	r0, [r0, #0]
 801bb76:	4770      	bx	lr

0801bb78 <get_nxt_when_idle_evnt>:
 801bb78:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bb7a:	b081      	sub	sp, #4
 801bb7c:	f646 6510 	movw	r5, #28176	@ 0x6e10
 801bb80:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 801bb84:	686c      	ldr	r4, [r5, #4]
 801bb86:	2801      	cmp	r0, #1
 801bb88:	d02d      	beq.n	801bbe6 <get_nxt_when_idle_evnt+0x6e>
 801bb8a:	4668      	mov	r0, sp
 801bb8c:	f006 fc5d 	bl	802244a <llhwc_slptmr_get>
 801bb90:	f04f 0600 	mov.w	r6, #0
 801bb94:	b334      	cbz	r4, 801bbe4 <get_nxt_when_idle_evnt+0x6c>
 801bb96:	f247 3790 	movw	r7, #29584	@ 0x7390
 801bb9a:	f2c2 0700 	movt	r7, #8192	@ 0x2000
 801bb9e:	bf00      	nop
 801bba0:	3601      	adds	r6, #1
 801bba2:	f895 0039 	ldrb.w	r0, [r5, #57]	@ 0x39
 801bba6:	b2f1      	uxtb	r1, r6
 801bba8:	4281      	cmp	r1, r0
 801bbaa:	f04f 0000 	mov.w	r0, #0
 801bbae:	f04f 0101 	mov.w	r1, #1
 801bbb2:	bf98      	it	ls
 801bbb4:	2001      	movls	r0, #1
 801bbb6:	f003 fe34 	bl	801f822 <bsp_assert>
 801bbba:	f894 0046 	ldrb.w	r0, [r4, #70]	@ 0x46
 801bbbe:	2801      	cmp	r0, #1
 801bbc0:	d10d      	bne.n	801bbde <get_nxt_when_idle_evnt+0x66>
 801bbc2:	78b8      	ldrb	r0, [r7, #2]
 801bbc4:	2801      	cmp	r0, #1
 801bbc6:	d103      	bne.n	801bbd0 <get_nxt_when_idle_evnt+0x58>
 801bbc8:	78f8      	ldrb	r0, [r7, #3]
 801bbca:	07c0      	lsls	r0, r0, #31
 801bbcc:	d007      	beq.n	801bbde <get_nxt_when_idle_evnt+0x66>
 801bbce:	e00a      	b.n	801bbe6 <get_nxt_when_idle_evnt+0x6e>
 801bbd0:	9900      	ldr	r1, [sp, #0]
 801bbd2:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 801bbd6:	f005 fce7 	bl	80215a8 <ble_time_cmp_raw_reading>
 801bbda:	2800      	cmp	r0, #0
 801bbdc:	dc03      	bgt.n	801bbe6 <get_nxt_when_idle_evnt+0x6e>
 801bbde:	6fa4      	ldr	r4, [r4, #120]	@ 0x78
 801bbe0:	2c00      	cmp	r4, #0
 801bbe2:	d1dd      	bne.n	801bba0 <get_nxt_when_idle_evnt+0x28>
 801bbe4:	2400      	movs	r4, #0
 801bbe6:	4620      	mov	r0, r4
 801bbe8:	b001      	add	sp, #4
 801bbea:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801bbec <evnt_on_air>:
 801bbec:	b570      	push	{r4, r5, r6, lr}
 801bbee:	f646 6510 	movw	r5, #28176	@ 0x6e10
 801bbf2:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 801bbf6:	6829      	ldr	r1, [r5, #0]
 801bbf8:	4604      	mov	r4, r0
 801bbfa:	2900      	cmp	r1, #0
 801bbfc:	bf18      	it	ne
 801bbfe:	2101      	movne	r1, #1
 801bc00:	4608      	mov	r0, r1
 801bc02:	2101      	movs	r1, #1
 801bc04:	2601      	movs	r6, #1
 801bc06:	f003 fe0c 	bl	801f822 <bsp_assert>
 801bc0a:	6828      	ldr	r0, [r5, #0]
 801bc0c:	2101      	movs	r1, #1
 801bc0e:	1b00      	subs	r0, r0, r4
 801bc10:	fab0 f080 	clz	r0, r0
 801bc14:	0940      	lsrs	r0, r0, #5
 801bc16:	f003 fe04 	bl	801f822 <bsp_assert>
 801bc1a:	6828      	ldr	r0, [r5, #0]
 801bc1c:	2100      	movs	r1, #0
 801bc1e:	6f80      	ldr	r0, [r0, #120]	@ 0x78
 801bc20:	f884 608d 	strb.w	r6, [r4, #141]	@ 0x8d
 801bc24:	6028      	str	r0, [r5, #0]
 801bc26:	2000      	movs	r0, #0
 801bc28:	67a1      	str	r1, [r4, #120]	@ 0x78
 801bc2a:	bd70      	pop	{r4, r5, r6, pc}

0801bc2c <hndl_missed_evnt>:
 801bc2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bc30:	b084      	sub	sp, #16
 801bc32:	4604      	mov	r4, r0
 801bc34:	200e      	movs	r0, #14
 801bc36:	f003 fe3b 	bl	801f8b0 <bsp_debug_gpio_set>
 801bc3a:	4625      	mov	r5, r4
 801bc3c:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 801bc3e:	f855 1f50 	ldr.w	r1, [r5, #80]!
 801bc42:	f646 6810 	movw	r8, #28176	@ 0x6e10
 801bc46:	f2c2 0800 	movt	r8, #8192	@ 0x2000
 801bc4a:	e9cd 1000 	strd	r1, r0, [sp]
 801bc4e:	f8d8 0000 	ldr.w	r0, [r8]
 801bc52:	2700      	movs	r7, #0
 801bc54:	2101      	movs	r1, #1
 801bc56:	9702      	str	r7, [sp, #8]
 801bc58:	2800      	cmp	r0, #0
 801bc5a:	bf18      	it	ne
 801bc5c:	2001      	movne	r0, #1
 801bc5e:	f003 fde0 	bl	801f822 <bsp_assert>
 801bc62:	f8d8 0000 	ldr.w	r0, [r8]
 801bc66:	2101      	movs	r1, #1
 801bc68:	1b00      	subs	r0, r0, r4
 801bc6a:	fab0 f080 	clz	r0, r0
 801bc6e:	0940      	lsrs	r0, r0, #5
 801bc70:	f003 fdd7 	bl	801f822 <bsp_assert>
 801bc74:	f894 0098 	ldrb.w	r0, [r4, #152]	@ 0x98
 801bc78:	2101      	movs	r1, #1
 801bc7a:	3802      	subs	r0, #2
 801bc7c:	bf18      	it	ne
 801bc7e:	2001      	movne	r0, #1
 801bc80:	f003 fdcf 	bl	801f822 <bsp_assert>
 801bc84:	f8d8 0000 	ldr.w	r0, [r8]
 801bc88:	6f80      	ldr	r0, [r0, #120]	@ 0x78
 801bc8a:	f884 708d 	strb.w	r7, [r4, #141]	@ 0x8d
 801bc8e:	f8c8 0000 	str.w	r0, [r8]
 801bc92:	6826      	ldr	r6, [r4, #0]
 801bc94:	67a7      	str	r7, [r4, #120]	@ 0x78
 801bc96:	b156      	cbz	r6, 801bcae <hndl_missed_evnt+0x82>
 801bc98:	e9d4 1024 	ldrd	r1, r0, [r4, #144]	@ 0x90
 801bc9c:	f481 2280 	eor.w	r2, r1, #262144	@ 0x40000
 801bca0:	4302      	orrs	r2, r0
 801bca2:	bf1c      	itt	ne
 801bca4:	f481 1280 	eorne.w	r2, r1, #1048576	@ 0x100000
 801bca8:	ea52 0200 	orrsne.w	r2, r2, r0
 801bcac:	d142      	bne.n	801bd34 <hndl_missed_evnt+0x108>
 801bcae:	a802      	add	r0, sp, #8
 801bcb0:	f006 fbcb 	bl	802244a <llhwc_slptmr_get>
 801bcb4:	e9d4 0124 	ldrd	r0, r1, [r4, #144]	@ 0x90
 801bcb8:	f081 0108 	eor.w	r1, r1, #8
 801bcbc:	4308      	orrs	r0, r1
 801bcbe:	d008      	beq.n	801bcd2 <hndl_missed_evnt+0xa6>
 801bcc0:	f240 00ec 	movw	r0, #236	@ 0xec
 801bcc4:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801bcc8:	6801      	ldr	r1, [r0, #0]
 801bcca:	4668      	mov	r0, sp
 801bccc:	2205      	movs	r2, #5
 801bcce:	f005 fc2d 	bl	802152c <ble_time_rmv_uint>
 801bcd2:	9902      	ldr	r1, [sp, #8]
 801bcd4:	4668      	mov	r0, sp
 801bcd6:	f005 fc67 	bl	80215a8 <ble_time_cmp_raw_reading>
 801bcda:	2801      	cmp	r0, #1
 801bcdc:	db1b      	blt.n	801bd16 <hndl_missed_evnt+0xea>
 801bcde:	e9d4 1024 	ldrd	r1, r0, [r4, #144]	@ 0x90
 801bce2:	2200      	movs	r2, #0
 801bce4:	6f65      	ldr	r5, [r4, #116]	@ 0x74
 801bce6:	f1d1 033f 	rsbs	r3, r1, #63	@ 0x3f
 801bcea:	eb72 0300 	sbcs.w	r3, r2, r0
 801bcee:	9203      	str	r2, [sp, #12]
 801bcf0:	db13      	blt.n	801bd1a <hndl_missed_evnt+0xee>
 801bcf2:	3901      	subs	r1, #1
 801bcf4:	f160 0000 	sbc.w	r0, r0, #0
 801bcf8:	f1d1 031f 	rsbs	r3, r1, #31
 801bcfc:	eb72 0000 	sbcs.w	r0, r2, r0
 801bd00:	d366      	bcc.n	801bdd0 <hndl_missed_evnt+0x1a4>
 801bd02:	2001      	movs	r0, #1
 801bd04:	4088      	lsls	r0, r1
 801bd06:	f010 0f8b 	tst.w	r0, #139	@ 0x8b
 801bd0a:	d02a      	beq.n	801bd62 <hndl_missed_evnt+0x136>
 801bd0c:	7e68      	ldrb	r0, [r5, #25]
 801bd0e:	2801      	cmp	r0, #1
 801bd10:	d144      	bne.n	801bd9c <hndl_missed_evnt+0x170>
 801bd12:	2000      	movs	r0, #0
 801bd14:	e049      	b.n	801bdaa <hndl_missed_evnt+0x17e>
 801bd16:	2501      	movs	r5, #1
 801bd18:	e063      	b.n	801bde2 <hndl_missed_evnt+0x1b6>
 801bd1a:	f1d1 03ff 	rsbs	r3, r1, #255	@ 0xff
 801bd1e:	4182      	sbcs	r2, r0
 801bd20:	db24      	blt.n	801bd6c <hndl_missed_evnt+0x140>
 801bd22:	f081 0240 	eor.w	r2, r1, #64	@ 0x40
 801bd26:	4302      	orrs	r2, r0
 801bd28:	d01e      	beq.n	801bd68 <hndl_missed_evnt+0x13c>
 801bd2a:	f081 0180 	eor.w	r1, r1, #128	@ 0x80
 801bd2e:	4308      	orrs	r0, r1
 801bd30:	d041      	beq.n	801bdb6 <hndl_missed_evnt+0x18a>
 801bd32:	e04d      	b.n	801bdd0 <hndl_missed_evnt+0x1a4>
 801bd34:	f411 0f20 	tst.w	r1, #10485760	@ 0xa00000
 801bd38:	d1b9      	bne.n	801bcae <hndl_missed_evnt+0x82>
 801bd3a:	f481 7180 	eor.w	r1, r1, #256	@ 0x100
 801bd3e:	4308      	orrs	r0, r1
 801bd40:	f04f 0000 	mov.w	r0, #0
 801bd44:	bf04      	itt	eq
 801bd46:	6f60      	ldreq	r0, [r4, #116]	@ 0x74
 801bd48:	f890 012d 	ldrbeq.w	r0, [r0, #301]	@ 0x12d
 801bd4c:	2103      	movs	r1, #3
 801bd4e:	2700      	movs	r7, #0
 801bd50:	f007 fbe7 	bl	8023522 <llhwc_get_hw_setup_time>
 801bd54:	1981      	adds	r1, r0, r6
 801bd56:	4628      	mov	r0, r5
 801bd58:	2201      	movs	r2, #1
 801bd5a:	f005 fb45 	bl	80213e8 <ble_time_add_uint>
 801bd5e:	6027      	str	r7, [r4, #0]
 801bd60:	e7a5      	b.n	801bcae <hndl_missed_evnt+0x82>
 801bd62:	f010 2f80 	tst.w	r0, #2147516416	@ 0x80008000
 801bd66:	d033      	beq.n	801bdd0 <hndl_missed_evnt+0x1a4>
 801bd68:	8928      	ldrh	r0, [r5, #8]
 801bd6a:	e020      	b.n	801bdae <hndl_missed_evnt+0x182>
 801bd6c:	f481 7280 	eor.w	r2, r1, #256	@ 0x100
 801bd70:	4302      	orrs	r2, r0
 801bd72:	d020      	beq.n	801bdb6 <hndl_missed_evnt+0x18a>
 801bd74:	f080 0008 	eor.w	r0, r0, #8
 801bd78:	4308      	orrs	r0, r1
 801bd7a:	d129      	bne.n	801bdd0 <hndl_missed_evnt+0x1a4>
 801bd7c:	68a5      	ldr	r5, [r4, #8]
 801bd7e:	b9fd      	cbnz	r5, 801bdc0 <hndl_missed_evnt+0x194>
 801bd80:	f240 00ec 	movw	r0, #236	@ 0xec
 801bd84:	f646 4168 	movw	r1, #27752	@ 0x6c68
 801bd88:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801bd8c:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 801bd90:	6800      	ldr	r0, [r0, #0]
 801bd92:	6889      	ldr	r1, [r1, #8]
 801bd94:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 801bd96:	4408      	add	r0, r1
 801bd98:	1a15      	subs	r5, r2, r0
 801bd9a:	e010      	b.n	801bdbe <hndl_missed_evnt+0x192>
 801bd9c:	a803      	add	r0, sp, #12
 801bd9e:	2101      	movs	r1, #1
 801bda0:	f7fc f9cd 	bl	801813e <llhwc_gen_rnd_num>
 801bda4:	9803      	ldr	r0, [sp, #12]
 801bda6:	f000 000f 	and.w	r0, r0, #15
 801bdaa:	6969      	ldr	r1, [r5, #20]
 801bdac:	4408      	add	r0, r1
 801bdae:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801bdb2:	0085      	lsls	r5, r0, #2
 801bdb4:	e003      	b.n	801bdbe <hndl_missed_evnt+0x192>
 801bdb6:	8ae8      	ldrh	r0, [r5, #22]
 801bdb8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801bdbc:	00c5      	lsls	r5, r0, #3
 801bdbe:	b15d      	cbz	r5, 801bdd8 <hndl_missed_evnt+0x1ac>
 801bdc0:	9802      	ldr	r0, [sp, #8]
 801bdc2:	9900      	ldr	r1, [sp, #0]
 801bdc4:	f005 fc15 	bl	80215f2 <ble_time_overflow_diff>
 801bdc8:	fbb0 f0f5 	udiv	r0, r0, r5
 801bdcc:	1c45      	adds	r5, r0, #1
 801bdce:	e008      	b.n	801bde2 <hndl_missed_evnt+0x1b6>
 801bdd0:	2000      	movs	r0, #0
 801bdd2:	2101      	movs	r1, #1
 801bdd4:	f003 fd25 	bl	801f822 <bsp_assert>
 801bdd8:	2000      	movs	r0, #0
 801bdda:	2101      	movs	r1, #1
 801bddc:	2500      	movs	r5, #0
 801bdde:	f003 fd20 	bl	801f822 <bsp_assert>
 801bde2:	f8b4 0090 	ldrh.w	r0, [r4, #144]	@ 0x90
 801bde6:	f410 7fc0 	tst.w	r0, #384	@ 0x180
 801bdea:	d009      	beq.n	801be00 <hndl_missed_evnt+0x1d4>
 801bdec:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 801bdee:	f8b1 0070 	ldrh.w	r0, [r1, #112]	@ 0x70
 801bdf2:	b128      	cbz	r0, 801be00 <hndl_missed_evnt+0x1d4>
 801bdf4:	f8b1 10da 	ldrh.w	r1, [r1, #218]	@ 0xda
 801bdf8:	186a      	adds	r2, r5, r1
 801bdfa:	4282      	cmp	r2, r0
 801bdfc:	bf28      	it	cs
 801bdfe:	1a45      	subcs	r5, r0, r1
 801be00:	f894 0099 	ldrb.w	r0, [r4, #153]	@ 0x99
 801be04:	4629      	mov	r1, r5
 801be06:	4428      	add	r0, r5
 801be08:	f884 0099 	strb.w	r0, [r4, #153]	@ 0x99
 801be0c:	4620      	mov	r0, r4
 801be0e:	f7ff fb8b 	bl	801b528 <add_intrvl_to_evnt_time_stamp>
 801be12:	4605      	mov	r5, r0
 801be14:	b940      	cbnz	r0, 801be28 <hndl_missed_evnt+0x1fc>
 801be16:	4620      	mov	r0, r4
 801be18:	2100      	movs	r1, #0
 801be1a:	f7ff fa49 	bl	801b2b0 <schedule_event>
 801be1e:	f898 003a 	ldrb.w	r0, [r8, #58]	@ 0x3a
 801be22:	b108      	cbz	r0, 801be28 <hndl_missed_evnt+0x1fc>
 801be24:	f7fe feea 	bl	801abfc <recheck_conflicting>
 801be28:	200e      	movs	r0, #14
 801be2a:	f003 fd43 	bl	801f8b4 <bsp_debug_gpio_clear>
 801be2e:	4628      	mov	r0, r5
 801be30:	b004      	add	sp, #16
 801be32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0801be38 <add_evnt>:
 801be38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801be3c:	b083      	sub	sp, #12
 801be3e:	f248 17b4 	movw	r7, #33204	@ 0x81b4
 801be42:	f2c2 0700 	movt	r7, #8192	@ 0x2000
 801be46:	4683      	mov	fp, r0
 801be48:	e9d0 9a24 	ldrd	r9, sl, [r0, #144]	@ 0x90
 801be4c:	6838      	ldr	r0, [r7, #0]
 801be4e:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 801be52:	f003 fd4a 	bl	801f8ea <os_rcrsv_mutex_wait>
 801be56:	f08a 0002 	eor.w	r0, sl, #2
 801be5a:	ea50 0009 	orrs.w	r0, r0, r9
 801be5e:	d148      	bne.n	801bef2 <add_evnt+0xba>
 801be60:	e9db 0124 	ldrd	r0, r1, [fp, #144]	@ 0x90
 801be64:	2501      	movs	r5, #1
 801be66:	f081 0102 	eor.w	r1, r1, #2
 801be6a:	4308      	orrs	r0, r1
 801be6c:	fab0 f080 	clz	r0, r0
 801be70:	0940      	lsrs	r0, r0, #5
 801be72:	2101      	movs	r1, #1
 801be74:	f003 fcd5 	bl	801f822 <bsp_assert>
 801be78:	f89b 0046 	ldrb.w	r0, [fp, #70]	@ 0x46
 801be7c:	2801      	cmp	r0, #1
 801be7e:	d11f      	bne.n	801bec0 <add_evnt+0x88>
 801be80:	f10b 0038 	add.w	r0, fp, #56	@ 0x38
 801be84:	f10b 0134 	add.w	r1, fp, #52	@ 0x34
 801be88:	f10b 023c 	add.w	r2, fp, #60	@ 0x3c
 801be8c:	f7fd fc64 	bl	8019758 <llhwc_get_prdc_clbr_evnt_cfg_time>
 801be90:	f247 3090 	movw	r0, #29584	@ 0x7390
 801be94:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801be98:	7880      	ldrb	r0, [r0, #2]
 801be9a:	f88b 5048 	strb.w	r5, [fp, #72]	@ 0x48
 801be9e:	b978      	cbnz	r0, 801bec0 <add_evnt+0x88>
 801bea0:	f646 402c 	movw	r0, #27692	@ 0x6c2c
 801bea4:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801bea8:	6b41      	ldr	r1, [r0, #52]	@ 0x34
 801beaa:	4658      	mov	r0, fp
 801beac:	f840 1f50 	str.w	r1, [r0, #80]!
 801beb0:	f646 4184 	movw	r1, #27780	@ 0x6c84
 801beb4:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 801beb8:	6809      	ldr	r1, [r1, #0]
 801beba:	2205      	movs	r2, #5
 801bebc:	f005 fa94 	bl	80213e8 <ble_time_add_uint>
 801bec0:	f646 6010 	movw	r0, #28176	@ 0x6e10
 801bec4:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801bec8:	1d03      	adds	r3, r0, #4
 801beca:	2100      	movs	r1, #0
 801becc:	460a      	mov	r2, r1
 801bece:	6819      	ldr	r1, [r3, #0]
 801bed0:	2900      	cmp	r1, #0
 801bed2:	f101 0378 	add.w	r3, r1, #120	@ 0x78
 801bed6:	d1f9      	bne.n	801becc <add_evnt+0x94>
 801bed8:	2a00      	cmp	r2, #0
 801beda:	bf14      	ite	ne
 801bedc:	f8c2 b078 	strne.w	fp, [r2, #120]	@ 0x78
 801bee0:	f8c0 b004 	streq.w	fp, [r0, #4]
 801bee4:	f890 1039 	ldrb.w	r1, [r0, #57]	@ 0x39
 801bee8:	3101      	adds	r1, #1
 801beea:	f880 1039 	strb.w	r1, [r0, #57]	@ 0x39
 801beee:	2500      	movs	r5, #0
 801bef0:	e008      	b.n	801bf04 <add_evnt+0xcc>
 801bef2:	f646 6810 	movw	r8, #28176	@ 0x6e10
 801bef6:	f2c2 0800 	movt	r8, #8192	@ 0x2000
 801befa:	f898 0038 	ldrb.w	r0, [r8, #56]	@ 0x38
 801befe:	280a      	cmp	r0, #10
 801bf00:	d907      	bls.n	801bf12 <add_evnt+0xda>
 801bf02:	251f      	movs	r5, #31
 801bf04:	6838      	ldr	r0, [r7, #0]
 801bf06:	f003 fcf6 	bl	801f8f6 <os_rcrsv_mutex_release>
 801bf0a:	4628      	mov	r0, r5
 801bf0c:	b003      	add	sp, #12
 801bf0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bf12:	2001      	movs	r0, #1
 801bf14:	2101      	movs	r1, #1
 801bf16:	f003 fc84 	bl	801f822 <bsp_assert>
 801bf1a:	e9db 1024 	ldrd	r1, r0, [fp, #144]	@ 0x90
 801bf1e:	f8db 6074 	ldr.w	r6, [fp, #116]	@ 0x74
 801bf22:	f1d1 023f 	rsbs	r2, r1, #63	@ 0x3f
 801bf26:	f04f 0200 	mov.w	r2, #0
 801bf2a:	eb72 0300 	sbcs.w	r3, r2, r0
 801bf2e:	f04f 051f 	mov.w	r5, #31
 801bf32:	db5b      	blt.n	801bfec <add_evnt+0x1b4>
 801bf34:	3901      	subs	r1, #1
 801bf36:	f160 0000 	sbc.w	r0, r0, #0
 801bf3a:	f1d1 031f 	rsbs	r3, r1, #31
 801bf3e:	eb72 0000 	sbcs.w	r0, r2, r0
 801bf42:	f0c0 81c5 	bcc.w	801c2d0 <add_evnt+0x498>
 801bf46:	2001      	movs	r0, #1
 801bf48:	4088      	lsls	r0, r1
 801bf4a:	f010 0f8b 	tst.w	r0, #139	@ 0x8b
 801bf4e:	f000 8087 	beq.w	801c060 <add_evnt+0x228>
 801bf52:	4658      	mov	r0, fp
 801bf54:	2101      	movs	r1, #1
 801bf56:	f7f7 fd0b 	bl	8013970 <evnt_schdlr_calc_prim_adv_durn_on_air>
 801bf5a:	217d      	movs	r1, #125	@ 0x7d
 801bf5c:	f240 06ec 	movw	r6, #236	@ 0xec
 801bf60:	f646 4268 	movw	r2, #27752	@ 0x6c68
 801bf64:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 801bf68:	f2c2 0600 	movt	r6, #8192	@ 0x2000
 801bf6c:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 801bf70:	f644 53d3 	movw	r3, #19923	@ 0x4dd3
 801bf74:	6831      	ldr	r1, [r6, #0]
 801bf76:	f2c1 0362 	movt	r3, #4194	@ 0x1062
 801bf7a:	6892      	ldr	r2, [r2, #8]
 801bf7c:	fba0 0303 	umull	r0, r3, r0, r3
 801bf80:	1850      	adds	r0, r2, r1
 801bf82:	eb00 00d3 	add.w	r0, r0, r3, lsr #3
 801bf86:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 801bf8a:	e9cb 0118 	strd	r0, r1, [fp, #96]	@ 0x60
 801bf8e:	4658      	mov	r0, fp
 801bf90:	f000 fdbc 	bl	801cb0c <set_evnt_start_time>
 801bf94:	f7f4 fed8 	bl	8010d48 <evnt_schdlr_get_prdc_clbr_evnt_hndl>
 801bf98:	2800      	cmp	r0, #0
 801bf9a:	f000 81a3 	beq.w	801c2e4 <add_evnt+0x4ac>
 801bf9e:	4605      	mov	r5, r0
 801bfa0:	e9d0 0114 	ldrd	r0, r1, [r0, #80]	@ 0x50
 801bfa4:	2205      	movs	r2, #5
 801bfa6:	9000      	str	r0, [sp, #0]
 801bfa8:	4668      	mov	r0, sp
 801bfaa:	9101      	str	r1, [sp, #4]
 801bfac:	6831      	ldr	r1, [r6, #0]
 801bfae:	f501 517a 	add.w	r1, r1, #16000	@ 0x3e80
 801bfb2:	f005 fa19 	bl	80213e8 <ble_time_add_uint>
 801bfb6:	6d28      	ldr	r0, [r5, #80]	@ 0x50
 801bfb8:	2800      	cmp	r0, #0
 801bfba:	f000 8193 	beq.w	801c2e4 <add_evnt+0x4ac>
 801bfbe:	f10b 0650 	add.w	r6, fp, #80	@ 0x50
 801bfc2:	4668      	mov	r0, sp
 801bfc4:	4631      	mov	r1, r6
 801bfc6:	f005 f96d 	bl	80212a4 <ble_time_comp>
 801bfca:	f1b0 3fff 	cmp.w	r0, #4294967295	@ 0xffffffff
 801bfce:	f300 8189 	bgt.w	801c2e4 <add_evnt+0x4ac>
 801bfd2:	6b6c      	ldr	r4, [r5, #52]	@ 0x34
 801bfd4:	f7fd fbc2 	bl	801975c <llhwc_get_num_of_prdc_clbr_chnls>
 801bfd8:	e9d5 120e 	ldrd	r1, r2, [r5, #56]	@ 0x38
 801bfdc:	fb04 1000 	mla	r0, r4, r0, r1
 801bfe0:	1881      	adds	r1, r0, r2
 801bfe2:	4630      	mov	r0, r6
 801bfe4:	2201      	movs	r2, #1
 801bfe6:	f005 f9ff 	bl	80213e8 <ble_time_add_uint>
 801bfea:	e17b      	b.n	801c2e4 <add_evnt+0x4ac>
 801bfec:	f1d1 03ff 	rsbs	r3, r1, #255	@ 0xff
 801bff0:	4182      	sbcs	r2, r0
 801bff2:	db70      	blt.n	801c0d6 <add_evnt+0x29e>
 801bff4:	f081 0240 	eor.w	r2, r1, #64	@ 0x40
 801bff8:	4302      	orrs	r2, r0
 801bffa:	f000 80ce 	beq.w	801c19a <add_evnt+0x362>
 801bffe:	f081 0180 	eor.w	r1, r1, #128	@ 0x80
 801c002:	4308      	orrs	r0, r1
 801c004:	f040 8164 	bne.w	801c2d0 <add_evnt+0x498>
 801c008:	f10b 0050 	add.w	r0, fp, #80	@ 0x50
 801c00c:	f106 0138 	add.w	r1, r6, #56	@ 0x38
 801c010:	f005 f9c5 	bl	802139e <ble_time_set>
 801c014:	4630      	mov	r0, r6
 801c016:	2100      	movs	r1, #0
 801c018:	f7f7 fa01 	bl	801341e <evnt_schdlr_calc_conn_duration>
 801c01c:	f240 01ec 	movw	r1, #236	@ 0xec
 801c020:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 801c024:	f646 4268 	movw	r2, #27752	@ 0x6c68
 801c028:	6809      	ldr	r1, [r1, #0]
 801c02a:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 801c02e:	6892      	ldr	r2, [r2, #8]
 801c030:	4408      	add	r0, r1
 801c032:	1881      	adds	r1, r0, r2
 801c034:	8af0      	ldrh	r0, [r6, #22]
 801c036:	f8cb 1060 	str.w	r1, [fp, #96]	@ 0x60
 801c03a:	f7ff f831 	bl	801b0a0 <get_intrv_slot_period>
 801c03e:	2800      	cmp	r0, #0
 801c040:	f8ab 008a 	strh.w	r0, [fp, #138]	@ 0x8a
 801c044:	f000 80f4 	beq.w	801c230 <add_evnt+0x3f8>
 801c048:	f8d8 0034 	ldr.w	r0, [r8, #52]	@ 0x34
 801c04c:	f8db 1050 	ldr.w	r1, [fp, #80]	@ 0x50
 801c050:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801c054:	00c0      	lsls	r0, r0, #3
 801c056:	fbb1 f2f0 	udiv	r2, r1, r0
 801c05a:	fb02 1010 	mls	r0, r2, r0, r1
 801c05e:	e0e9      	b.n	801c234 <add_evnt+0x3fc>
 801c060:	f010 2f80 	tst.w	r0, #2147516416	@ 0x80008000
 801c064:	f000 8134 	beq.w	801c2d0 <add_evnt+0x498>
 801c068:	f106 070a 	add.w	r7, r6, #10
 801c06c:	f106 0008 	add.w	r0, r6, #8
 801c070:	4639      	mov	r1, r7
 801c072:	f7ff fcc9 	bl	801ba08 <get_scan_intrv_slot_period>
 801c076:	f240 03ec 	movw	r3, #236	@ 0xec
 801c07a:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 801c07e:	681b      	ldr	r3, [r3, #0]
 801c080:	f64c 4ccd 	movw	ip, #52429	@ 0xcccd
 801c084:	f6cc 4ccc 	movt	ip, #52428	@ 0xcccc
 801c088:	8932      	ldrh	r2, [r6, #8]
 801c08a:	8971      	ldrh	r1, [r6, #10]
 801c08c:	fba3 650c 	umull	r6, r5, r3, ip
 801c090:	f3c5 160f 	ubfx	r6, r5, #4, #16
 801c094:	f646 4568 	movw	r5, #27752	@ 0x6c68
 801c098:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 801c09c:	68ad      	ldr	r5, [r5, #8]
 801c09e:	1a54      	subs	r4, r2, r1
 801c0a0:	42b4      	cmp	r4, r6
 801c0a2:	442b      	add	r3, r5
 801c0a4:	f8ab 008a 	strh.w	r0, [fp, #138]	@ 0x8a
 801c0a8:	dc05      	bgt.n	801c0b6 <add_evnt+0x27e>
 801c0aa:	fba3 160c 	umull	r1, r6, r3, ip
 801c0ae:	eba2 1216 	sub.w	r2, r2, r6, lsr #4
 801c0b2:	b291      	uxth	r1, r2
 801c0b4:	803a      	strh	r2, [r7, #0]
 801c0b6:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 801c0ba:	2800      	cmp	r0, #0
 801c0bc:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 801c0c0:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 801c0c4:	f8cb 1060 	str.w	r1, [fp, #96]	@ 0x60
 801c0c8:	f000 80a1 	beq.w	801c20e <add_evnt+0x3d6>
 801c0cc:	4608      	mov	r0, r1
 801c0ce:	2100      	movs	r1, #0
 801c0d0:	f7fe fe36 	bl	801ad40 <get_slot_offset>
 801c0d4:	e09d      	b.n	801c212 <add_evnt+0x3da>
 801c0d6:	f481 7280 	eor.w	r2, r1, #256	@ 0x100
 801c0da:	4302      	orrs	r2, r0
 801c0dc:	f000 808e 	beq.w	801c1fc <add_evnt+0x3c4>
 801c0e0:	f080 0008 	eor.w	r0, r0, #8
 801c0e4:	4308      	orrs	r0, r1
 801c0e6:	f040 80f3 	bne.w	801c2d0 <add_evnt+0x498>
 801c0ea:	2001      	movs	r0, #1
 801c0ec:	2101      	movs	r1, #1
 801c0ee:	f003 fb98 	bl	801f822 <bsp_assert>
 801c0f2:	f240 04ec 	movw	r4, #236	@ 0xec
 801c0f6:	f2c2 0400 	movt	r4, #8192	@ 0x2000
 801c0fa:	f646 4668 	movw	r6, #27752	@ 0x6c68
 801c0fe:	f8db 1014 	ldr.w	r1, [fp, #20]
 801c102:	6822      	ldr	r2, [r4, #0]
 801c104:	f2c2 0600 	movt	r6, #8192	@ 0x2000
 801c108:	f8db 0008 	ldr.w	r0, [fp, #8]
 801c10c:	68b3      	ldr	r3, [r6, #8]
 801c10e:	4411      	add	r1, r2
 801c110:	4419      	add	r1, r3
 801c112:	2800      	cmp	r0, #0
 801c114:	f8cb 1060 	str.w	r1, [fp, #96]	@ 0x60
 801c118:	f000 808f 	beq.w	801c23a <add_evnt+0x402>
 801c11c:	f64c 42cd 	movw	r2, #52429	@ 0xcccd
 801c120:	f6cc 42cc 	movt	r2, #52428	@ 0xcccc
 801c124:	fba0 0202 	umull	r0, r2, r0, r2
 801c128:	0950      	lsrs	r0, r2, #5
 801c12a:	f7fe ffb9 	bl	801b0a0 <get_intrv_slot_period>
 801c12e:	2800      	cmp	r0, #0
 801c130:	f8ab 008a 	strh.w	r0, [fp, #138]	@ 0x8a
 801c134:	f000 80b3 	beq.w	801c29e <add_evnt+0x466>
 801c138:	f8db 0060 	ldr.w	r0, [fp, #96]	@ 0x60
 801c13c:	2100      	movs	r1, #0
 801c13e:	2500      	movs	r5, #0
 801c140:	f7fe fdfe 	bl	801ad40 <get_slot_offset>
 801c144:	f8cb 0064 	str.w	r0, [fp, #100]	@ 0x64
 801c148:	a802      	add	r0, sp, #8
 801c14a:	f006 f97e 	bl	802244a <llhwc_slptmr_get>
 801c14e:	f8d8 0034 	ldr.w	r0, [r8, #52]	@ 0x34
 801c152:	9e02      	ldr	r6, [sp, #8]
 801c154:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 801c158:	f8db 4064 	ldr.w	r4, [fp, #100]	@ 0x64
 801c15c:	00d8      	lsls	r0, r3, #3
 801c15e:	fbb6 f1f0 	udiv	r1, r6, r0
 801c162:	f8db 200c 	ldr.w	r2, [fp, #12]
 801c166:	fb01 4100 	mla	r1, r1, r0, r4
 801c16a:	3605      	adds	r6, #5
 801c16c:	428e      	cmp	r6, r1
 801c16e:	bf88      	it	hi
 801c170:	eb01 01c3 	addhi.w	r1, r1, r3, lsl #3
 801c174:	2a00      	cmp	r2, #0
 801c176:	f8cb 1050 	str.w	r1, [fp, #80]	@ 0x50
 801c17a:	f000 80a8 	beq.w	801c2ce <add_evnt+0x496>
 801c17e:	428a      	cmp	r2, r1
 801c180:	f240 80a5 	bls.w	801c2ce <add_evnt+0x496>
 801c184:	4402      	add	r2, r0
 801c186:	43cb      	mvns	r3, r1
 801c188:	441a      	add	r2, r3
 801c18a:	fbb2 f2f0 	udiv	r2, r2, r0
 801c18e:	b292      	uxth	r2, r2
 801c190:	fb02 1000 	mla	r0, r2, r0, r1
 801c194:	f8cb 0050 	str.w	r0, [fp, #80]	@ 0x50
 801c198:	e098      	b.n	801c2cc <add_evnt+0x494>
 801c19a:	f240 02ec 	movw	r2, #236	@ 0xec
 801c19e:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 801c1a2:	6812      	ldr	r2, [r2, #0]
 801c1a4:	f64c 4ccd 	movw	ip, #52429	@ 0xcccd
 801c1a8:	f6cc 4ccc 	movt	ip, #52428	@ 0xcccc
 801c1ac:	fba2 430c 	umull	r4, r3, r2, ip
 801c1b0:	f646 4468 	movw	r4, #27752	@ 0x6c68
 801c1b4:	8931      	ldrh	r1, [r6, #8]
 801c1b6:	8970      	ldrh	r0, [r6, #10]
 801c1b8:	f2c2 0400 	movt	r4, #8192	@ 0x2000
 801c1bc:	f3c3 130f 	ubfx	r3, r3, #4, #16
 801c1c0:	68a4      	ldr	r4, [r4, #8]
 801c1c2:	1a0d      	subs	r5, r1, r0
 801c1c4:	429d      	cmp	r5, r3
 801c1c6:	4422      	add	r2, r4
 801c1c8:	dc05      	bgt.n	801c1d6 <add_evnt+0x39e>
 801c1ca:	fba2 030c 	umull	r0, r3, r2, ip
 801c1ce:	eba1 1113 	sub.w	r1, r1, r3, lsr #4
 801c1d2:	b288      	uxth	r0, r1
 801c1d4:	8171      	strh	r1, [r6, #10]
 801c1d6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801c1da:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 801c1de:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 801c1e2:	2500      	movs	r5, #0
 801c1e4:	e9cb 0418 	strd	r0, r4, [fp, #96]	@ 0x60
 801c1e8:	4658      	mov	r0, fp
 801c1ea:	f8ab 508a 	strh.w	r5, [fp, #138]	@ 0x8a
 801c1ee:	f000 fc8d 	bl	801cb0c <set_evnt_start_time>
 801c1f2:	f8ab 400e 	strh.w	r4, [fp, #14]
 801c1f6:	f8ab 5088 	strh.w	r5, [fp, #136]	@ 0x88
 801c1fa:	e073      	b.n	801c2e4 <add_evnt+0x4ac>
 801c1fc:	4658      	mov	r0, fp
 801c1fe:	f7f7 f843 	bl	8013288 <evnt_schdlr_set_slave_conn_timers>
 801c202:	4605      	mov	r5, r0
 801c204:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801c208:	f8cb 0064 	str.w	r0, [fp, #100]	@ 0x64
 801c20c:	e05f      	b.n	801c2ce <add_evnt+0x496>
 801c20e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801c212:	f248 17b4 	movw	r7, #33204	@ 0x81b4
 801c216:	f8cb 0064 	str.w	r0, [fp, #100]	@ 0x64
 801c21a:	4658      	mov	r0, fp
 801c21c:	f2c2 0700 	movt	r7, #8192	@ 0x2000
 801c220:	f000 fc74 	bl	801cb0c <set_evnt_start_time>
 801c224:	2000      	movs	r0, #0
 801c226:	f8ab 500e 	strh.w	r5, [fp, #14]
 801c22a:	f8ab 0088 	strh.w	r0, [fp, #136]	@ 0x88
 801c22e:	e059      	b.n	801c2e4 <add_evnt+0x4ac>
 801c230:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801c234:	f8cb 0064 	str.w	r0, [fp, #100]	@ 0x64
 801c238:	e054      	b.n	801c2e4 <add_evnt+0x4ac>
 801c23a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801c23e:	f8cb 0064 	str.w	r0, [fp, #100]	@ 0x64
 801c242:	a802      	add	r0, sp, #8
 801c244:	f006 f901 	bl	802244a <llhwc_slptmr_get>
 801c248:	9802      	ldr	r0, [sp, #8]
 801c24a:	465d      	mov	r5, fp
 801c24c:	f845 0f50 	str.w	r0, [r5, #80]!
 801c250:	2105      	movs	r1, #5
 801c252:	4628      	mov	r0, r5
 801c254:	2205      	movs	r2, #5
 801c256:	f005 f8c7 	bl	80213e8 <ble_time_add_uint>
 801c25a:	f855 0c44 	ldr.w	r0, [r5, #-68]
 801c25e:	b118      	cbz	r0, 801c268 <add_evnt+0x430>
 801c260:	6829      	ldr	r1, [r5, #0]
 801c262:	4281      	cmp	r1, r0
 801c264:	bf38      	it	cc
 801c266:	6028      	strcc	r0, [r5, #0]
 801c268:	f8db 0010 	ldr.w	r0, [fp, #16]
 801c26c:	b120      	cbz	r0, 801c278 <add_evnt+0x440>
 801c26e:	6829      	ldr	r1, [r5, #0]
 801c270:	4281      	cmp	r1, r0
 801c272:	d901      	bls.n	801c278 <add_evnt+0x440>
 801c274:	2003      	movs	r0, #3
 801c276:	e00e      	b.n	801c296 <add_evnt+0x45e>
 801c278:	f8db 001c 	ldr.w	r0, [fp, #28]
 801c27c:	b330      	cbz	r0, 801c2cc <add_evnt+0x494>
 801c27e:	f8db 1050 	ldr.w	r1, [fp, #80]	@ 0x50
 801c282:	f8db 2060 	ldr.w	r2, [fp, #96]	@ 0x60
 801c286:	6823      	ldr	r3, [r4, #0]
 801c288:	68b6      	ldr	r6, [r6, #8]
 801c28a:	4411      	add	r1, r2
 801c28c:	199a      	adds	r2, r3, r6
 801c28e:	1a89      	subs	r1, r1, r2
 801c290:	4281      	cmp	r1, r0
 801c292:	d91b      	bls.n	801c2cc <add_evnt+0x494>
 801c294:	2004      	movs	r0, #4
 801c296:	f88b 0021 	strb.w	r0, [fp, #33]	@ 0x21
 801c29a:	251f      	movs	r5, #31
 801c29c:	e017      	b.n	801c2ce <add_evnt+0x496>
 801c29e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801c2a2:	f8cb 0064 	str.w	r0, [fp, #100]	@ 0x64
 801c2a6:	a802      	add	r0, sp, #8
 801c2a8:	f006 f8cf 	bl	802244a <llhwc_slptmr_get>
 801c2ac:	9802      	ldr	r0, [sp, #8]
 801c2ae:	465d      	mov	r5, fp
 801c2b0:	f845 0f50 	str.w	r0, [r5, #80]!
 801c2b4:	2105      	movs	r1, #5
 801c2b6:	4628      	mov	r0, r5
 801c2b8:	2205      	movs	r2, #5
 801c2ba:	f005 f895 	bl	80213e8 <ble_time_add_uint>
 801c2be:	f855 0c44 	ldr.w	r0, [r5, #-68]
 801c2c2:	b118      	cbz	r0, 801c2cc <add_evnt+0x494>
 801c2c4:	6829      	ldr	r1, [r5, #0]
 801c2c6:	4281      	cmp	r1, r0
 801c2c8:	bf38      	it	cc
 801c2ca:	6028      	strcc	r0, [r5, #0]
 801c2cc:	2500      	movs	r5, #0
 801c2ce:	b14d      	cbz	r5, 801c2e4 <add_evnt+0x4ac>
 801c2d0:	f08a 0008 	eor.w	r0, sl, #8
 801c2d4:	ea50 0009 	orrs.w	r0, r0, r9
 801c2d8:	f47f ae14 	bne.w	801bf04 <add_evnt+0xcc>
 801c2dc:	4658      	mov	r0, fp
 801c2de:	f7f6 ff17 	bl	8013110 <evnt_schdlr_free_evnt>
 801c2e2:	e60f      	b.n	801bf04 <add_evnt+0xcc>
 801c2e4:	f898 0038 	ldrb.w	r0, [r8, #56]	@ 0x38
 801c2e8:	1c41      	adds	r1, r0, #1
 801c2ea:	b2c8      	uxtb	r0, r1
 801c2ec:	4288      	cmp	r0, r1
 801c2ee:	f888 1038 	strb.w	r1, [r8, #56]	@ 0x38
 801c2f2:	d024      	beq.n	801c33e <add_evnt+0x506>
 801c2f4:	e9db 0124 	ldrd	r0, r1, [fp, #144]	@ 0x90
 801c2f8:	f480 2080 	eor.w	r0, r0, #262144	@ 0x40000
 801c2fc:	4308      	orrs	r0, r1
 801c2fe:	d003      	beq.n	801c308 <add_evnt+0x4d0>
 801c300:	4658      	mov	r0, fp
 801c302:	2100      	movs	r1, #0
 801c304:	f7fe ffd4 	bl	801b2b0 <schedule_event>
 801c308:	f898 003a 	ldrb.w	r0, [r8, #58]	@ 0x3a
 801c30c:	b108      	cbz	r0, 801c312 <add_evnt+0x4da>
 801c30e:	f7fe fc75 	bl	801abfc <recheck_conflicting>
 801c312:	f08a 0008 	eor.w	r0, sl, #8
 801c316:	ea50 0009 	orrs.w	r0, r0, r9
 801c31a:	f47f ade8 	bne.w	801beee <add_evnt+0xb6>
 801c31e:	f898 0038 	ldrb.w	r0, [r8, #56]	@ 0x38
 801c322:	2800      	cmp	r0, #0
 801c324:	f43f aded 	beq.w	801bf02 <add_evnt+0xca>
 801c328:	f108 0108 	add.w	r1, r8, #8
 801c32c:	680a      	ldr	r2, [r1, #0]
 801c32e:	455a      	cmp	r2, fp
 801c330:	f43f addd 	beq.w	801beee <add_evnt+0xb6>
 801c334:	3801      	subs	r0, #1
 801c336:	f101 0104 	add.w	r1, r1, #4
 801c33a:	d1f7      	bne.n	801c32c <add_evnt+0x4f4>
 801c33c:	e5e1      	b.n	801bf02 <add_evnt+0xca>
 801c33e:	f8db 5064 	ldr.w	r5, [fp, #100]	@ 0x64
 801c342:	2300      	movs	r3, #0
 801c344:	465c      	mov	r4, fp
 801c346:	b2db      	uxtb	r3, r3
 801c348:	eb08 0683 	add.w	r6, r8, r3, lsl #2
 801c34c:	68b2      	ldr	r2, [r6, #8]
 801c34e:	b90a      	cbnz	r2, 801c354 <add_evnt+0x51c>
 801c350:	4622      	mov	r2, r4
 801c352:	60b4      	str	r4, [r6, #8]
 801c354:	6e51      	ldr	r1, [r2, #100]	@ 0x64
 801c356:	42a9      	cmp	r1, r5
 801c358:	d803      	bhi.n	801c362 <add_evnt+0x52a>
 801c35a:	3301      	adds	r3, #1
 801c35c:	4283      	cmp	r3, r0
 801c35e:	d3f3      	bcc.n	801c348 <add_evnt+0x510>
 801c360:	e7c8      	b.n	801c2f4 <add_evnt+0x4bc>
 801c362:	3301      	adds	r3, #1
 801c364:	60b4      	str	r4, [r6, #8]
 801c366:	b2de      	uxtb	r6, r3
 801c368:	4286      	cmp	r6, r0
 801c36a:	460d      	mov	r5, r1
 801c36c:	4614      	mov	r4, r2
 801c36e:	d3ea      	bcc.n	801c346 <add_evnt+0x50e>
 801c370:	e7c0      	b.n	801c2f4 <add_evnt+0x4bc>
	...

0801c374 <update_slot_durations>:
 801c374:	b570      	push	{r4, r5, r6, lr}
 801c376:	4601      	mov	r1, r0
 801c378:	6800      	ldr	r0, [r0, #0]
 801c37a:	684a      	ldr	r2, [r1, #4]
 801c37c:	f646 6410 	movw	r4, #28176	@ 0x6e10
 801c380:	f2c2 0400 	movt	r4, #8192	@ 0x2000
 801c384:	4410      	add	r0, r2
 801c386:	f894 2038 	ldrb.w	r2, [r4, #56]	@ 0x38
 801c38a:	f100 0e0e 	add.w	lr, r0, #14
 801c38e:	f240 0cec 	movw	ip, #236	@ 0xec
 801c392:	f646 4068 	movw	r0, #27752	@ 0x6c68
 801c396:	f2c2 0c00 	movt	ip, #8192	@ 0x2000
 801c39a:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801c39e:	b18a      	cbz	r2, 801c3c4 <update_slot_durations+0x50>
 801c3a0:	6889      	ldr	r1, [r1, #8]
 801c3a2:	f8dc 3000 	ldr.w	r3, [ip]
 801c3a6:	6885      	ldr	r5, [r0, #8]
 801c3a8:	4471      	add	r1, lr
 801c3aa:	442b      	add	r3, r5
 801c3ac:	3408      	adds	r4, #8
 801c3ae:	bf00      	nop
 801c3b0:	6825      	ldr	r5, [r4, #0]
 801c3b2:	b11d      	cbz	r5, 801c3bc <update_slot_durations+0x48>
 801c3b4:	6e2e      	ldr	r6, [r5, #96]	@ 0x60
 801c3b6:	440e      	add	r6, r1
 801c3b8:	1af6      	subs	r6, r6, r3
 801c3ba:	662e      	str	r6, [r5, #96]	@ 0x60
 801c3bc:	3a01      	subs	r2, #1
 801c3be:	f104 0404 	add.w	r4, r4, #4
 801c3c2:	d1f5      	bne.n	801c3b0 <update_slot_durations+0x3c>
 801c3c4:	f100 010c 	add.w	r1, r0, #12
 801c3c8:	220c      	movs	r2, #12
 801c3ca:	f8cc e000 	str.w	lr, [ip]
 801c3ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c3d2:	f008 b8b9 	b.w	8024548 <ble_memcpy>

0801c3d6 <events_count>:
 801c3d6:	f646 6010 	movw	r0, #28176	@ 0x6e10
 801c3da:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801c3de:	f890 0038 	ldrb.w	r0, [r0, #56]	@ 0x38
 801c3e2:	4770      	bx	lr

0801c3e4 <events_when_idle_count>:
 801c3e4:	f646 6010 	movw	r0, #28176	@ 0x6e10
 801c3e8:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801c3ec:	f890 0039 	ldrb.w	r0, [r0, #57]	@ 0x39
 801c3f0:	4770      	bx	lr

0801c3f2 <schdlr_nxt_cycle>:
 801c3f2:	b510      	push	{r4, lr}
 801c3f4:	4604      	mov	r4, r0
 801c3f6:	6f80      	ldr	r0, [r0, #120]	@ 0x78
 801c3f8:	2101      	movs	r1, #1
 801c3fa:	fab0 f080 	clz	r0, r0
 801c3fe:	0940      	lsrs	r0, r0, #5
 801c400:	f003 fa0f 	bl	801f822 <bsp_assert>
 801c404:	f894 0098 	ldrb.w	r0, [r4, #152]	@ 0x98
 801c408:	2101      	movs	r1, #1
 801c40a:	3802      	subs	r0, #2
 801c40c:	bf18      	it	ne
 801c40e:	2001      	movne	r0, #1
 801c410:	f003 fa07 	bl	801f822 <bsp_assert>
 801c414:	2000      	movs	r0, #0
 801c416:	f884 008d 	strb.w	r0, [r4, #141]	@ 0x8d
 801c41a:	4620      	mov	r0, r4
 801c41c:	2101      	movs	r1, #1
 801c41e:	f7ff f883 	bl	801b528 <add_intrvl_to_evnt_time_stamp>
 801c422:	b100      	cbz	r0, 801c426 <schdlr_nxt_cycle+0x34>
 801c424:	bd10      	pop	{r4, pc}
 801c426:	4620      	mov	r0, r4
 801c428:	2100      	movs	r1, #0
 801c42a:	f7fe ff41 	bl	801b2b0 <schedule_event>
 801c42e:	f646 6010 	movw	r0, #28176	@ 0x6e10
 801c432:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801c436:	f890 003a 	ldrb.w	r0, [r0, #58]	@ 0x3a
 801c43a:	2800      	cmp	r0, #0
 801c43c:	d0f2      	beq.n	801c424 <schdlr_nxt_cycle+0x32>
 801c43e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c442:	f7fe bbdb 	b.w	801abfc <recheck_conflicting>

0801c446 <updt_conn_evnt_durn>:
 801c446:	f240 02ec 	movw	r2, #236	@ 0xec
 801c44a:	f646 4368 	movw	r3, #27752	@ 0x6c68
 801c44e:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 801c452:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 801c456:	f8d2 c000 	ldr.w	ip, [r2]
 801c45a:	689b      	ldr	r3, [r3, #8]
 801c45c:	f240 22d5 	movw	r2, #725	@ 0x2d5
 801c460:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 801c464:	449c      	add	ip, r3
 801c466:	f644 53d3 	movw	r3, #19923	@ 0x4dd3
 801c46a:	f2c1 0362 	movt	r3, #4194	@ 0x1062
 801c46e:	fba1 1303 	umull	r1, r3, r1, r3
 801c472:	f890 209e 	ldrb.w	r2, [r0, #158]	@ 0x9e
 801c476:	2107      	movs	r1, #7
 801c478:	eb01 01d3 	add.w	r1, r1, r3, lsr #3
 801c47c:	2a00      	cmp	r2, #0
 801c47e:	bf08      	it	eq
 801c480:	eb0c 01d3 	addeq.w	r1, ip, r3, lsr #3
 801c484:	6e02      	ldr	r2, [r0, #96]	@ 0x60
 801c486:	4291      	cmp	r1, r2
 801c488:	bf88      	it	hi
 801c48a:	6601      	strhi	r1, [r0, #96]	@ 0x60
 801c48c:	4770      	bx	lr
	...

0801c490 <calculate_max_pkts_to_send>:
 801c490:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c494:	2101      	movs	r1, #1
 801c496:	4605      	mov	r5, r0
 801c498:	2800      	cmp	r0, #0
 801c49a:	bf18      	it	ne
 801c49c:	2001      	movne	r0, #1
 801c49e:	f003 f9c0 	bl	801f822 <bsp_assert>
 801c4a2:	f646 6010 	movw	r0, #28176	@ 0x6e10
 801c4a6:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801c4aa:	f890 0038 	ldrb.w	r0, [r0, #56]	@ 0x38
 801c4ae:	f8d5 8074 	ldr.w	r8, [r5, #116]	@ 0x74
 801c4b2:	2801      	cmp	r0, #1
 801c4b4:	d106      	bne.n	801c4c4 <calculate_max_pkts_to_send+0x34>
 801c4b6:	f8b8 0016 	ldrh.w	r0, [r8, #22]
 801c4ba:	f240 41e2 	movw	r1, #1250	@ 0x4e2
 801c4be:	fb00 f601 	mul.w	r6, r0, r1
 801c4c2:	e010      	b.n	801c4e6 <calculate_max_pkts_to_send+0x56>
 801c4c4:	f646 402c 	movw	r0, #27692	@ 0x6c2c
 801c4c8:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801c4cc:	f890 0039 	ldrb.w	r0, [r0, #57]	@ 0x39
 801c4d0:	2800      	cmp	r0, #0
 801c4d2:	d170      	bne.n	801c5b6 <calculate_max_pkts_to_send+0x126>
 801c4d4:	6fa8      	ldr	r0, [r5, #120]	@ 0x78
 801c4d6:	2800      	cmp	r0, #0
 801c4d8:	d06d      	beq.n	801c5b6 <calculate_max_pkts_to_send+0x126>
 801c4da:	3050      	adds	r0, #80	@ 0x50
 801c4dc:	f105 0150 	add.w	r1, r5, #80	@ 0x50
 801c4e0:	f004 ff3d 	bl	802135e <ble_time_ordered_diff_us>
 801c4e4:	4606      	mov	r6, r0
 801c4e6:	f895 009e 	ldrb.w	r0, [r5, #158]	@ 0x9e
 801c4ea:	b148      	cbz	r0, 801c500 <calculate_max_pkts_to_send+0x70>
 801c4ec:	2000      	movs	r0, #0
 801c4ee:	2101      	movs	r1, #1
 801c4f0:	2eda      	cmp	r6, #218	@ 0xda
 801c4f2:	bf88      	it	hi
 801c4f4:	2001      	movhi	r0, #1
 801c4f6:	f003 f994 	bl	801f822 <bsp_assert>
 801c4fa:	f1a6 04da 	sub.w	r4, r6, #218	@ 0xda
 801c4fe:	e01d      	b.n	801c53c <calculate_max_pkts_to_send+0xac>
 801c500:	f240 04ec 	movw	r4, #236	@ 0xec
 801c504:	f646 4768 	movw	r7, #27752	@ 0x6c68
 801c508:	f2c2 0400 	movt	r4, #8192	@ 0x2000
 801c50c:	f2c2 0700 	movt	r7, #8192	@ 0x2000
 801c510:	6820      	ldr	r0, [r4, #0]
 801c512:	68b9      	ldr	r1, [r7, #8]
 801c514:	4408      	add	r0, r1
 801c516:	ebc0 1140 	rsb	r1, r0, r0, lsl #5
 801c51a:	eb01 0190 	add.w	r1, r1, r0, lsr #2
 801c51e:	2000      	movs	r0, #0
 801c520:	428e      	cmp	r6, r1
 801c522:	bf88      	it	hi
 801c524:	2001      	movhi	r0, #1
 801c526:	2101      	movs	r1, #1
 801c528:	f003 f97b 	bl	801f822 <bsp_assert>
 801c52c:	6820      	ldr	r0, [r4, #0]
 801c52e:	68b9      	ldr	r1, [r7, #8]
 801c530:	4408      	add	r0, r1
 801c532:	eba0 1140 	sub.w	r1, r0, r0, lsl #5
 801c536:	eba6 0090 	sub.w	r0, r6, r0, lsr #2
 801c53a:	1844      	adds	r4, r0, r1
 801c53c:	f8b8 001e 	ldrh.w	r0, [r8, #30]
 801c540:	f240 2171 	movw	r1, #625	@ 0x271
 801c544:	fb00 f601 	mul.w	r6, r0, r1
 801c548:	f8b8 10ac 	ldrh.w	r1, [r8, #172]	@ 0xac
 801c54c:	4640      	mov	r0, r8
 801c54e:	f7f7 f97b 	bl	8013848 <evnt_utils_calc_conn_tx_rx_durn_per_pkt>
 801c552:	3096      	adds	r0, #150	@ 0x96
 801c554:	42a6      	cmp	r6, r4
 801c556:	4627      	mov	r7, r4
 801c558:	f105 090c 	add.w	r9, r5, #12
 801c55c:	bf38      	it	cc
 801c55e:	4637      	movcc	r7, r6
 801c560:	4286      	cmp	r6, r0
 801c562:	bf98      	it	ls
 801c564:	4627      	movls	r7, r4
 801c566:	4648      	mov	r0, r9
 801c568:	f7f7 fa4b 	bl	8013a02 <packet_get_frst_pkt>
 801c56c:	b31f      	cbz	r7, 801c5b6 <calculate_max_pkts_to_send+0x126>
 801c56e:	f240 0af0 	movw	sl, #240	@ 0xf0
 801c572:	4606      	mov	r6, r0
 801c574:	2400      	movs	r4, #0
 801c576:	f2c2 0a00 	movt	sl, #8192	@ 0x2000
 801c57a:	2500      	movs	r5, #0
 801c57c:	2e00      	cmp	r6, #0
 801c57e:	bf08      	it	eq
 801c580:	4656      	moveq	r6, sl
 801c582:	89b0      	ldrh	r0, [r6, #12]
 801c584:	3804      	subs	r0, #4
 801c586:	b281      	uxth	r1, r0
 801c588:	4640      	mov	r0, r8
 801c58a:	f7f7 f95d 	bl	8013848 <evnt_utils_calc_conn_tx_rx_durn_per_pkt>
 801c58e:	4420      	add	r0, r4
 801c590:	f100 0496 	add.w	r4, r0, #150	@ 0x96
 801c594:	42bc      	cmp	r4, r7
 801c596:	d80c      	bhi.n	801c5b2 <calculate_max_pkts_to_send+0x122>
 801c598:	4556      	cmp	r6, sl
 801c59a:	4649      	mov	r1, r9
 801c59c:	bf18      	it	ne
 801c59e:	1d31      	addne	r1, r6, #4
 801c5a0:	2d05      	cmp	r5, #5
 801c5a2:	f105 0001 	add.w	r0, r5, #1
 801c5a6:	d807      	bhi.n	801c5b8 <calculate_max_pkts_to_send+0x128>
 801c5a8:	680e      	ldr	r6, [r1, #0]
 801c5aa:	42a7      	cmp	r7, r4
 801c5ac:	4605      	mov	r5, r0
 801c5ae:	d8e5      	bhi.n	801c57c <calculate_max_pkts_to_send+0xec>
 801c5b0:	e002      	b.n	801c5b8 <calculate_max_pkts_to_send+0x128>
 801c5b2:	4628      	mov	r0, r5
 801c5b4:	b905      	cbnz	r5, 801c5b8 <calculate_max_pkts_to_send+0x128>
 801c5b6:	2001      	movs	r0, #1
 801c5b8:	b2c0      	uxtb	r0, r0
 801c5ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0801c5c0 <chk_when_idle_evnt_priority>:
 801c5c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c5c4:	b081      	sub	sp, #4
 801c5c6:	4688      	mov	r8, r1
 801c5c8:	4683      	mov	fp, r0
 801c5ca:	f7fd f8c7 	bl	801975c <llhwc_get_num_of_prdc_clbr_chnls>
 801c5ce:	f1bb 0f00 	cmp.w	fp, #0
 801c5d2:	d055      	beq.n	801c680 <chk_when_idle_evnt_priority+0xc0>
 801c5d4:	4604      	mov	r4, r0
 801c5d6:	f646 6010 	movw	r0, #28176	@ 0x6e10
 801c5da:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801c5de:	6806      	ldr	r6, [r0, #0]
 801c5e0:	4668      	mov	r0, sp
 801c5e2:	f005 ff32 	bl	802244a <llhwc_slptmr_get>
 801c5e6:	f89b 0046 	ldrb.w	r0, [fp, #70]	@ 0x46
 801c5ea:	2700      	movs	r7, #0
 801c5ec:	2801      	cmp	r0, #1
 801c5ee:	d149      	bne.n	801c684 <chk_when_idle_evnt_priority+0xc4>
 801c5f0:	f89b 0047 	ldrb.w	r0, [fp, #71]	@ 0x47
 801c5f4:	2101      	movs	r1, #1
 801c5f6:	4284      	cmp	r4, r0
 801c5f8:	bf28      	it	cs
 801c5fa:	2701      	movcs	r7, #1
 801c5fc:	4638      	mov	r0, r7
 801c5fe:	f003 f910 	bl	801f822 <bsp_assert>
 801c602:	f247 3590 	movw	r5, #29584	@ 0x7390
 801c606:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 801c60a:	78a8      	ldrb	r0, [r5, #2]
 801c60c:	f89b 9047 	ldrb.w	r9, [fp, #71]	@ 0x47
 801c610:	2801      	cmp	r0, #1
 801c612:	bf04      	itt	eq
 801c614:	78e8      	ldrbeq	r0, [r5, #3]
 801c616:	ea5f 70c0 	movseq.w	r0, r0, lsl #31
 801c61a:	d031      	beq.n	801c680 <chk_when_idle_evnt_priority+0xc0>
 801c61c:	9900      	ldr	r1, [sp, #0]
 801c61e:	f10b 0750 	add.w	r7, fp, #80	@ 0x50
 801c622:	4638      	mov	r0, r7
 801c624:	f004 ffc0 	bl	80215a8 <ble_time_cmp_raw_reading>
 801c628:	2800      	cmp	r0, #0
 801c62a:	d429      	bmi.n	801c680 <chk_when_idle_evnt_priority+0xc0>
 801c62c:	78a8      	ldrb	r0, [r5, #2]
 801c62e:	2801      	cmp	r0, #1
 801c630:	d109      	bne.n	801c646 <chk_when_idle_evnt_priority+0x86>
 801c632:	6838      	ldr	r0, [r7, #0]
 801c634:	b938      	cbnz	r0, 801c646 <chk_when_idle_evnt_priority+0x86>
 801c636:	9800      	ldr	r0, [sp, #0]
 801c638:	f44f 517a 	mov.w	r1, #16000	@ 0x3e80
 801c63c:	6038      	str	r0, [r7, #0]
 801c63e:	4638      	mov	r0, r7
 801c640:	2205      	movs	r2, #5
 801c642:	f004 ff73 	bl	802152c <ble_time_rmv_uint>
 801c646:	9800      	ldr	r0, [sp, #0]
 801c648:	6839      	ldr	r1, [r7, #0]
 801c64a:	eba4 0409 	sub.w	r4, r4, r9
 801c64e:	4288      	cmp	r0, r1
 801c650:	d91b      	bls.n	801c68a <chk_when_idle_evnt_priority+0xca>
 801c652:	f004 ffce 	bl	80215f2 <ble_time_overflow_diff>
 801c656:	f644 51d3 	movw	r1, #19923	@ 0x4dd3
 801c65a:	f2c1 0162 	movt	r1, #4194	@ 0x1062
 801c65e:	fba0 0101 	umull	r0, r1, r0, r1
 801c662:	f3c1 2087 	ubfx	r0, r1, #10, #8
 801c666:	f1c0 090d 	rsb	r9, r0, #13
 801c66a:	f1b9 0f03 	cmp.w	r9, #3
 801c66e:	bfd8      	it	le
 801c670:	f04f 0903 	movle.w	r9, #3
 801c674:	280a      	cmp	r0, #10
 801c676:	bf24      	itt	cs
 801c678:	2001      	movcs	r0, #1
 801c67a:	f88b 0045 	strbcs.w	r0, [fp, #69]	@ 0x45
 801c67e:	e006      	b.n	801c68e <chk_when_idle_evnt_priority+0xce>
 801c680:	2400      	movs	r4, #0
 801c682:	e08a      	b.n	801c79a <chk_when_idle_evnt_priority+0x1da>
 801c684:	f04f 090d 	mov.w	r9, #13
 801c688:	e022      	b.n	801c6d0 <chk_when_idle_evnt_priority+0x110>
 801c68a:	f04f 090d 	mov.w	r9, #13
 801c68e:	f89b 0048 	ldrb.w	r0, [fp, #72]	@ 0x48
 801c692:	213c      	movs	r1, #60	@ 0x3c
 801c694:	2801      	cmp	r0, #1
 801c696:	bf08      	it	eq
 801c698:	2138      	moveq	r1, #56	@ 0x38
 801c69a:	f85b 0001 	ldr.w	r0, [fp, r1]
 801c69e:	f8db 1034 	ldr.w	r1, [fp, #52]	@ 0x34
 801c6a2:	b2e2      	uxtb	r2, r4
 801c6a4:	fb01 0002 	mla	r0, r1, r2, r0
 801c6a8:	217d      	movs	r1, #125	@ 0x7d
 801c6aa:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 801c6ae:	f644 52d3 	movw	r2, #19923	@ 0x4dd3
 801c6b2:	f240 01ec 	movw	r1, #236	@ 0xec
 801c6b6:	f2c1 0262 	movt	r2, #4194	@ 0x1062
 801c6ba:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 801c6be:	fba0 0202 	umull	r0, r2, r0, r2
 801c6c2:	6809      	ldr	r1, [r1, #0]
 801c6c4:	9800      	ldr	r0, [sp, #0]
 801c6c6:	ebb1 0fd2 	cmp.w	r1, r2, lsr #3
 801c6ca:	bf38      	it	cc
 801c6cc:	08d1      	lsrcc	r1, r2, #3
 801c6ce:	180f      	adds	r7, r1, r0
 801c6d0:	b1e6      	cbz	r6, 801c70c <chk_when_idle_evnt_priority+0x14c>
 801c6d2:	f240 04ec 	movw	r4, #236	@ 0xec
 801c6d6:	f2c2 0400 	movt	r4, #8192	@ 0x2000
 801c6da:	fa5f f589 	uxtb.w	r5, r9
 801c6de:	bf00      	nop
 801c6e0:	6d30      	ldr	r0, [r6, #80]	@ 0x50
 801c6e2:	6821      	ldr	r1, [r4, #0]
 801c6e4:	1a40      	subs	r0, r0, r1
 801c6e6:	42b8      	cmp	r0, r7
 801c6e8:	d219      	bcs.n	801c71e <chk_when_idle_evnt_priority+0x15e>
 801c6ea:	4630      	mov	r0, r6
 801c6ec:	f7fe f994 	bl	801aa18 <get_priority>
 801c6f0:	42a8      	cmp	r0, r5
 801c6f2:	d310      	bcc.n	801c716 <chk_when_idle_evnt_priority+0x156>
 801c6f4:	f89b 0046 	ldrb.w	r0, [fp, #70]	@ 0x46
 801c6f8:	2801      	cmp	r0, #1
 801c6fa:	d104      	bne.n	801c706 <chk_when_idle_evnt_priority+0x146>
 801c6fc:	f896 0092 	ldrb.w	r0, [r6, #146]	@ 0x92
 801c700:	f010 0f1e 	tst.w	r0, #30
 801c704:	d107      	bne.n	801c716 <chk_when_idle_evnt_priority+0x156>
 801c706:	6fb6      	ldr	r6, [r6, #120]	@ 0x78
 801c708:	2e00      	cmp	r6, #0
 801c70a:	d1e9      	bne.n	801c6e0 <chk_when_idle_evnt_priority+0x120>
 801c70c:	f04f 0a01 	mov.w	sl, #1
 801c710:	2600      	movs	r6, #0
 801c712:	2401      	movs	r4, #1
 801c714:	e006      	b.n	801c724 <chk_when_idle_evnt_priority+0x164>
 801c716:	f04f 0a00 	mov.w	sl, #0
 801c71a:	2400      	movs	r4, #0
 801c71c:	e002      	b.n	801c724 <chk_when_idle_evnt_priority+0x164>
 801c71e:	2401      	movs	r4, #1
 801c720:	f04f 0a00 	mov.w	sl, #0
 801c724:	f89b 0046 	ldrb.w	r0, [fp, #70]	@ 0x46
 801c728:	2801      	cmp	r0, #1
 801c72a:	d136      	bne.n	801c79a <chk_when_idle_evnt_priority+0x1da>
 801c72c:	4640      	mov	r0, r8
 801c72e:	2101      	movs	r1, #1
 801c730:	f1b8 0f00 	cmp.w	r8, #0
 801c734:	bf18      	it	ne
 801c736:	2001      	movne	r0, #1
 801c738:	f003 f873 	bl	801f822 <bsp_assert>
 801c73c:	b124      	cbz	r4, 801c748 <chk_when_idle_evnt_priority+0x188>
 801c73e:	9800      	ldr	r0, [sp, #0]
 801c740:	1a38      	subs	r0, r7, r0
 801c742:	f8c8 0000 	str.w	r0, [r8]
 801c746:	e028      	b.n	801c79a <chk_when_idle_evnt_priority+0x1da>
 801c748:	f1ba 0f00 	cmp.w	sl, #0
 801c74c:	d125      	bne.n	801c79a <chk_when_idle_evnt_priority+0x1da>
 801c74e:	f240 05ec 	movw	r5, #236	@ 0xec
 801c752:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 801c756:	9800      	ldr	r0, [sp, #0]
 801c758:	6829      	ldr	r1, [r5, #0]
 801c75a:	3650      	adds	r6, #80	@ 0x50
 801c75c:	4401      	add	r1, r0
 801c75e:	4630      	mov	r0, r6
 801c760:	f004 ff22 	bl	80215a8 <ble_time_cmp_raw_reading>
 801c764:	f1b0 3fff 	cmp.w	r0, #4294967295	@ 0xffffffff
 801c768:	dc17      	bgt.n	801c79a <chk_when_idle_evnt_priority+0x1da>
 801c76a:	f1b9 0f0a 	cmp.w	r9, #10
 801c76e:	d814      	bhi.n	801c79a <chk_when_idle_evnt_priority+0x1da>
 801c770:	9800      	ldr	r0, [sp, #0]
 801c772:	6829      	ldr	r1, [r5, #0]
 801c774:	6832      	ldr	r2, [r6, #0]
 801c776:	4408      	add	r0, r1
 801c778:	f8db 1038 	ldr.w	r1, [fp, #56]	@ 0x38
 801c77c:	237d      	movs	r3, #125	@ 0x7d
 801c77e:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 801c782:	1a10      	subs	r0, r2, r0
 801c784:	f644 52d3 	movw	r2, #19923	@ 0x4dd3
 801c788:	f2c1 0262 	movt	r2, #4194	@ 0x1062
 801c78c:	fba1 1202 	umull	r1, r2, r1, r2
 801c790:	ebb0 0fd2 	cmp.w	r0, r2, lsr #3
 801c794:	d901      	bls.n	801c79a <chk_when_idle_evnt_priority+0x1da>
 801c796:	2401      	movs	r4, #1
 801c798:	e7d3      	b.n	801c742 <chk_when_idle_evnt_priority+0x182>
 801c79a:	4620      	mov	r0, r4
 801c79c:	b001      	add	sp, #4
 801c79e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801c7a4 <resume_scan>:
 801c7a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c7a8:	b087      	sub	sp, #28
 801c7aa:	f646 6a10 	movw	sl, #28176	@ 0x6e10
 801c7ae:	f2c2 0a00 	movt	sl, #8192	@ 0x2000
 801c7b2:	f8da b000 	ldr.w	fp, [sl]
 801c7b6:	4681      	mov	r9, r0
 801c7b8:	2001      	movs	r0, #1
 801c7ba:	f1bb 0f00 	cmp.w	fp, #0
 801c7be:	9001      	str	r0, [sp, #4]
 801c7c0:	d008      	beq.n	801c7d4 <resume_scan+0x30>
 801c7c2:	465c      	mov	r4, fp
 801c7c4:	f894 0090 	ldrb.w	r0, [r4, #144]	@ 0x90
 801c7c8:	f010 0f70 	tst.w	r0, #112	@ 0x70
 801c7cc:	d104      	bne.n	801c7d8 <resume_scan+0x34>
 801c7ce:	6fa4      	ldr	r4, [r4, #120]	@ 0x78
 801c7d0:	2c00      	cmp	r4, #0
 801c7d2:	d1f7      	bne.n	801c7c4 <resume_scan+0x20>
 801c7d4:	201f      	movs	r0, #31
 801c7d6:	e0ce      	b.n	801c976 <resume_scan+0x1d2>
 801c7d8:	a801      	add	r0, sp, #4
 801c7da:	9100      	str	r1, [sp, #0]
 801c7dc:	f005 fe35 	bl	802244a <llhwc_slptmr_get>
 801c7e0:	4627      	mov	r7, r4
 801c7e2:	f857 0f50 	ldr.w	r0, [r7, #80]!
 801c7e6:	f240 06ec 	movw	r6, #236	@ 0xec
 801c7ea:	f2c2 0600 	movt	r6, #8192	@ 0x2000
 801c7ee:	6831      	ldr	r1, [r6, #0]
 801c7f0:	687a      	ldr	r2, [r7, #4]
 801c7f2:	ad04      	add	r5, sp, #16
 801c7f4:	9004      	str	r0, [sp, #16]
 801c7f6:	9205      	str	r2, [sp, #20]
 801c7f8:	4628      	mov	r0, r5
 801c7fa:	2205      	movs	r2, #5
 801c7fc:	f004 fe96 	bl	802152c <ble_time_rmv_uint>
 801c800:	9901      	ldr	r1, [sp, #4]
 801c802:	4628      	mov	r0, r5
 801c804:	f004 fed0 	bl	80215a8 <ble_time_cmp_raw_reading>
 801c808:	f1b0 3fff 	cmp.w	r0, #4294967295	@ 0xffffffff
 801c80c:	dd47      	ble.n	801c89e <resume_scan+0xfa>
 801c80e:	68a0      	ldr	r0, [r4, #8]
 801c810:	f646 4568 	movw	r5, #27752	@ 0x6c68
 801c814:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 801c818:	2800      	cmp	r0, #0
 801c81a:	bf1a      	itte	ne
 801c81c:	eb00 0080 	addne.w	r0, r0, r0, lsl #2
 801c820:	0080      	lslne	r0, r0, #2
 801c822:	6e20      	ldreq	r0, [r4, #96]	@ 0x60
 801c824:	6831      	ldr	r1, [r6, #0]
 801c826:	68aa      	ldr	r2, [r5, #8]
 801c828:	e9d4 3714 	ldrd	r3, r7, [r4, #80]	@ 0x50
 801c82c:	4411      	add	r1, r2
 801c82e:	1a41      	subs	r1, r0, r1
 801c830:	a802      	add	r0, sp, #8
 801c832:	2205      	movs	r2, #5
 801c834:	e9cd 3702 	strd	r3, r7, [sp, #8]
 801c838:	f004 fdd6 	bl	80213e8 <ble_time_add_uint>
 801c83c:	f8da 0000 	ldr.w	r0, [sl]
 801c840:	4284      	cmp	r4, r0
 801c842:	d023      	beq.n	801c88c <resume_scan+0xe8>
 801c844:	4602      	mov	r2, r0
 801c846:	bf00      	nop
 801c848:	b13a      	cbz	r2, 801c85a <resume_scan+0xb6>
 801c84a:	4611      	mov	r1, r2
 801c84c:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 801c84e:	42a2      	cmp	r2, r4
 801c850:	d1fa      	bne.n	801c848 <resume_scan+0xa4>
 801c852:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 801c854:	678a      	str	r2, [r1, #120]	@ 0x78
 801c856:	2100      	movs	r1, #0
 801c858:	67a1      	str	r1, [r4, #120]	@ 0x78
 801c85a:	67a0      	str	r0, [r4, #120]	@ 0x78
 801c85c:	e9d0 0114 	ldrd	r0, r1, [r0, #80]	@ 0x50
 801c860:	68aa      	ldr	r2, [r5, #8]
 801c862:	ad04      	add	r5, sp, #16
 801c864:	9004      	str	r0, [sp, #16]
 801c866:	9105      	str	r1, [sp, #20]
 801c868:	6831      	ldr	r1, [r6, #0]
 801c86a:	4628      	mov	r0, r5
 801c86c:	4411      	add	r1, r2
 801c86e:	2205      	movs	r2, #5
 801c870:	f8ca 4000 	str.w	r4, [sl]
 801c874:	f004 fe5a 	bl	802152c <ble_time_rmv_uint>
 801c878:	a802      	add	r0, sp, #8
 801c87a:	4629      	mov	r1, r5
 801c87c:	f004 fd12 	bl	80212a4 <ble_time_comp>
 801c880:	2801      	cmp	r0, #1
 801c882:	bfa4      	itt	ge
 801c884:	e9dd 1004 	ldrdge	r1, r0, [sp, #16]
 801c888:	e9cd 1002 	strdge	r1, r0, [sp, #8]
 801c88c:	9901      	ldr	r1, [sp, #4]
 801c88e:	a802      	add	r0, sp, #8
 801c890:	f004 fe8a 	bl	80215a8 <ble_time_cmp_raw_reading>
 801c894:	f1b0 3fff 	cmp.w	r0, #4294967295	@ 0xffffffff
 801c898:	dd37      	ble.n	801c90a <resume_scan+0x166>
 801c89a:	2500      	movs	r5, #0
 801c89c:	e03a      	b.n	801c914 <resume_scan+0x170>
 801c89e:	f248 18b4 	movw	r8, #33204	@ 0x81b4
 801c8a2:	f2c2 0800 	movt	r8, #8192	@ 0x2000
 801c8a6:	ad04      	add	r5, sp, #16
 801c8a8:	f8d8 0000 	ldr.w	r0, [r8]
 801c8ac:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 801c8b0:	f003 f81b 	bl	801f8ea <os_rcrsv_mutex_wait>
 801c8b4:	e9d4 1024 	ldrd	r1, r0, [r4, #144]	@ 0x90
 801c8b8:	f081 0210 	eor.w	r2, r1, #16
 801c8bc:	4302      	orrs	r2, r0
 801c8be:	bf1c      	itt	ne
 801c8c0:	f081 0240 	eorne.w	r2, r1, #64	@ 0x40
 801c8c4:	ea52 0200 	orrsne.w	r2, r2, r0
 801c8c8:	d11a      	bne.n	801c900 <resume_scan+0x15c>
 801c8ca:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 801c8cc:	2202      	movs	r2, #2
 801c8ce:	3008      	adds	r0, #8
 801c8d0:	8801      	ldrh	r1, [r0, #0]
 801c8d2:	4638      	mov	r0, r7
 801c8d4:	f004 fe2a 	bl	802152c <ble_time_rmv_uint>
 801c8d8:	f8d8 0000 	ldr.w	r0, [r8]
 801c8dc:	f003 f80b 	bl	801f8f6 <os_rcrsv_mutex_release>
 801c8e0:	e9d7 0100 	ldrd	r0, r1, [r7]
 801c8e4:	2205      	movs	r2, #5
 801c8e6:	9004      	str	r0, [sp, #16]
 801c8e8:	4628      	mov	r0, r5
 801c8ea:	9105      	str	r1, [sp, #20]
 801c8ec:	6831      	ldr	r1, [r6, #0]
 801c8ee:	f004 fe1d 	bl	802152c <ble_time_rmv_uint>
 801c8f2:	9901      	ldr	r1, [sp, #4]
 801c8f4:	4628      	mov	r0, r5
 801c8f6:	f004 fe57 	bl	80215a8 <ble_time_cmp_raw_reading>
 801c8fa:	2800      	cmp	r0, #0
 801c8fc:	d4d4      	bmi.n	801c8a8 <resume_scan+0x104>
 801c8fe:	e786      	b.n	801c80e <resume_scan+0x6a>
 801c900:	f081 0120 	eor.w	r1, r1, #32
 801c904:	4308      	orrs	r0, r1
 801c906:	d0e0      	beq.n	801c8ca <resume_scan+0x126>
 801c908:	e7e6      	b.n	801c8d8 <resume_scan+0x134>
 801c90a:	e9dd 1001 	ldrd	r1, r0, [sp, #4]
 801c90e:	f004 fe70 	bl	80215f2 <ble_time_overflow_diff>
 801c912:	4605      	mov	r5, r0
 801c914:	9901      	ldr	r1, [sp, #4]
 801c916:	a802      	add	r0, sp, #8
 801c918:	f004 fe46 	bl	80215a8 <ble_time_cmp_raw_reading>
 801c91c:	f1b0 3fff 	cmp.w	r0, #4294967295	@ 0xffffffff
 801c920:	dc09      	bgt.n	801c936 <resume_scan+0x192>
 801c922:	6830      	ldr	r0, [r6, #0]
 801c924:	3010      	adds	r0, #16
 801c926:	4285      	cmp	r5, r0
 801c928:	d905      	bls.n	801c936 <resume_scan+0x192>
 801c92a:	9800      	ldr	r0, [sp, #0]
 801c92c:	f8c9 4000 	str.w	r4, [r9]
 801c930:	6005      	str	r5, [r0, #0]
 801c932:	2000      	movs	r0, #0
 801c934:	e01f      	b.n	801c976 <resume_scan+0x1d2>
 801c936:	f8da 1000 	ldr.w	r1, [sl]
 801c93a:	42a1      	cmp	r1, r4
 801c93c:	d00a      	beq.n	801c954 <resume_scan+0x1b0>
 801c93e:	bf00      	nop
 801c940:	b179      	cbz	r1, 801c962 <resume_scan+0x1be>
 801c942:	4608      	mov	r0, r1
 801c944:	6f89      	ldr	r1, [r1, #120]	@ 0x78
 801c946:	42a1      	cmp	r1, r4
 801c948:	d1fa      	bne.n	801c940 <resume_scan+0x19c>
 801c94a:	4621      	mov	r1, r4
 801c94c:	f851 2f78 	ldr.w	r2, [r1, #120]!
 801c950:	6782      	str	r2, [r0, #120]	@ 0x78
 801c952:	e004      	b.n	801c95e <resume_scan+0x1ba>
 801c954:	4621      	mov	r1, r4
 801c956:	f851 0f78 	ldr.w	r0, [r1, #120]!
 801c95a:	f8ca 0000 	str.w	r0, [sl]
 801c95e:	2000      	movs	r0, #0
 801c960:	6008      	str	r0, [r1, #0]
 801c962:	4620      	mov	r0, r4
 801c964:	f7ff fd45 	bl	801c3f2 <schdlr_nxt_cycle>
 801c968:	f8da 1000 	ldr.w	r1, [sl]
 801c96c:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 801c970:	458b      	cmp	fp, r1
 801c972:	bf08      	it	eq
 801c974:	203a      	moveq	r0, #58	@ 0x3a
 801c976:	b007      	add	sp, #28
 801c978:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c97c <updt_radio_period>:
 801c97c:	b5b0      	push	{r4, r5, r7, lr}
 801c97e:	f646 6210 	movw	r2, #28176	@ 0x6e10
 801c982:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 801c986:	6894      	ldr	r4, [r2, #8]
 801c988:	4605      	mov	r5, r0
 801c98a:	b184      	cbz	r4, 801c9ae <updt_radio_period+0x32>
 801c98c:	2000      	movs	r0, #0
 801c98e:	4623      	mov	r3, r4
 801c990:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801c992:	3301      	adds	r3, #1
 801c994:	d006      	beq.n	801c9a4 <updt_radio_period+0x28>
 801c996:	3001      	adds	r0, #1
 801c998:	b2c3      	uxtb	r3, r0
 801c99a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801c99e:	689b      	ldr	r3, [r3, #8]
 801c9a0:	2b00      	cmp	r3, #0
 801c9a2:	d1f5      	bne.n	801c990 <updt_radio_period+0x14>
 801c9a4:	b2c0      	uxtb	r0, r0
 801c9a6:	2801      	cmp	r0, #1
 801c9a8:	bf08      	it	eq
 801c9aa:	42ac      	cmpeq	r4, r5
 801c9ac:	d003      	beq.n	801c9b6 <updt_radio_period+0x3a>
 801c9ae:	6b50      	ldr	r0, [r2, #52]	@ 0x34
 801c9b0:	b108      	cbz	r0, 801c9b6 <updt_radio_period+0x3a>
 801c9b2:	4288      	cmp	r0, r1
 801c9b4:	d110      	bne.n	801c9d8 <updt_radio_period+0x5c>
 801c9b6:	eb01 0081 	add.w	r0, r1, r1, lsl #2
 801c9ba:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 801c9bc:	00c0      	lsls	r0, r0, #3
 801c9be:	fbb3 f4f0 	udiv	r4, r3, r0
 801c9c2:	6351      	str	r1, [r2, #52]	@ 0x34
 801c9c4:	fb04 3010 	mls	r0, r4, r0, r3
 801c9c8:	6668      	str	r0, [r5, #100]	@ 0x64
 801c9ca:	2001      	movs	r0, #1
 801c9cc:	f8a5 008a 	strh.w	r0, [r5, #138]	@ 0x8a
 801c9d0:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 801c9d4:	f7ff b86e 	b.w	801bab4 <sort_events_table>
 801c9d8:	4288      	cmp	r0, r1
 801c9da:	d90d      	bls.n	801c9f8 <updt_radio_period+0x7c>
 801c9dc:	fbb0 f3f1 	udiv	r3, r0, r1
 801c9e0:	fb03 f401 	mul.w	r4, r3, r1
 801c9e4:	42a0      	cmp	r0, r4
 801c9e6:	d107      	bne.n	801c9f8 <updt_radio_period+0x7c>
 801c9e8:	b2d8      	uxtb	r0, r3
 801c9ea:	6351      	str	r1, [r2, #52]	@ 0x34
 801c9ec:	f7ff f888 	bl	801bb00 <update_slot_period>
 801c9f0:	2001      	movs	r0, #1
 801c9f2:	f8a5 008a 	strh.w	r0, [r5, #138]	@ 0x8a
 801c9f6:	bdb0      	pop	{r4, r5, r7, pc}
 801c9f8:	4288      	cmp	r0, r1
 801c9fa:	d212      	bcs.n	801ca22 <updt_radio_period+0xa6>
 801c9fc:	fbb1 f2f0 	udiv	r2, r1, r0
 801ca00:	fb02 f300 	mul.w	r3, r2, r0
 801ca04:	428b      	cmp	r3, r1
 801ca06:	d10c      	bne.n	801ca22 <updt_radio_period+0xa6>
 801ca08:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801ca0c:	6d29      	ldr	r1, [r5, #80]	@ 0x50
 801ca0e:	00c0      	lsls	r0, r0, #3
 801ca10:	fbb1 f3f0 	udiv	r3, r1, r0
 801ca14:	fb03 1010 	mls	r0, r3, r0, r1
 801ca18:	b2d1      	uxtb	r1, r2
 801ca1a:	f8a5 108a 	strh.w	r1, [r5, #138]	@ 0x8a
 801ca1e:	6668      	str	r0, [r5, #100]	@ 0x64
 801ca20:	e7d6      	b.n	801c9d0 <updt_radio_period+0x54>
 801ca22:	2000      	movs	r0, #0
 801ca24:	f8a5 008a 	strh.w	r0, [r5, #138]	@ 0x8a
 801ca28:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801ca2c:	6668      	str	r0, [r5, #100]	@ 0x64
 801ca2e:	f7ff f841 	bl	801bab4 <sort_events_table>
 801ca32:	f8b5 008a 	ldrh.w	r0, [r5, #138]	@ 0x8a
 801ca36:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 801ca3a:	f7fe bf53 	b.w	801b8e4 <update_radio_period_after_rmv_evnt>

0801ca3e <conn_param_req>:
 801ca3e:	b5b0      	push	{r4, r5, r7, lr}
 801ca40:	6f45      	ldr	r5, [r0, #116]	@ 0x74
 801ca42:	4604      	mov	r4, r0
 801ca44:	f8b5 007c 	ldrh.w	r0, [r5, #124]	@ 0x7c
 801ca48:	f8b5 107e 	ldrh.w	r1, [r5, #126]	@ 0x7e
 801ca4c:	f105 028e 	add.w	r2, r5, #142	@ 0x8e
 801ca50:	2320      	movs	r3, #32
 801ca52:	f7fd fef5 	bl	801a840 <evnt_schdlr_choose_suitable_intrv>
 801ca56:	f8b5 108e 	ldrh.w	r1, [r5, #142]	@ 0x8e
 801ca5a:	f8a5 107c 	strh.w	r1, [r5, #124]	@ 0x7c
 801ca5e:	f8a5 107e 	strh.w	r1, [r5, #126]	@ 0x7e
 801ca62:	b910      	cbnz	r0, 801ca6a <conn_param_req+0x2c>
 801ca64:	6e60      	ldr	r0, [r4, #100]	@ 0x64
 801ca66:	3001      	adds	r0, #1
 801ca68:	d000      	beq.n	801ca6c <conn_param_req+0x2e>
 801ca6a:	bdb0      	pop	{r4, r5, r7, pc}
 801ca6c:	e9d4 0124 	ldrd	r0, r1, [r4, #144]	@ 0x90
 801ca70:	f480 7080 	eor.w	r0, r0, #256	@ 0x100
 801ca74:	4308      	orrs	r0, r1
 801ca76:	d0f8      	beq.n	801ca6a <conn_param_req+0x2c>
 801ca78:	f646 6010 	movw	r0, #28176	@ 0x6e10
 801ca7c:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801ca80:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 801ca82:	2800      	cmp	r0, #0
 801ca84:	d0f1      	beq.n	801ca6a <conn_param_req+0x2c>
 801ca86:	6e20      	ldr	r0, [r4, #96]	@ 0x60
 801ca88:	2100      	movs	r1, #0
 801ca8a:	3028      	adds	r0, #40	@ 0x28
 801ca8c:	f7fe f958 	bl	801ad40 <get_slot_offset>
 801ca90:	f100 0128 	add.w	r1, r0, #40	@ 0x28
 801ca94:	4620      	mov	r0, r4
 801ca96:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 801ca9a:	f000 b800 	b.w	801ca9e <calc_win_offset>

0801ca9e <calc_win_offset>:
 801ca9e:	b5f0      	push	{r4, r5, r6, r7, lr}
 801caa0:	b081      	sub	sp, #4
 801caa2:	6f45      	ldr	r5, [r0, #116]	@ 0x74
 801caa4:	460c      	mov	r4, r1
 801caa6:	f8b5 108c 	ldrh.w	r1, [r5, #140]	@ 0x8c
 801caaa:	f8b5 20da 	ldrh.w	r2, [r5, #218]	@ 0xda
 801caae:	8aeb      	ldrh	r3, [r5, #22]
 801cab0:	1a89      	subs	r1, r1, r2
 801cab2:	fb03 f101 	mul.w	r1, r3, r1
 801cab6:	f646 6610 	movw	r6, #28176	@ 0x6e10
 801caba:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 801cabc:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 801cac0:	f2c2 0600 	movt	r6, #8192	@ 0x2000
 801cac4:	6b70      	ldr	r0, [r6, #52]	@ 0x34
 801cac6:	eb02 07c1 	add.w	r7, r2, r1, lsl #3
 801caca:	2101      	movs	r1, #1
 801cacc:	2800      	cmp	r0, #0
 801cace:	bf18      	it	ne
 801cad0:	2001      	movne	r0, #1
 801cad2:	f002 fea6 	bl	801f822 <bsp_assert>
 801cad6:	6b70      	ldr	r0, [r6, #52]	@ 0x34
 801cad8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801cadc:	00c1      	lsls	r1, r0, #3
 801cade:	fbb7 f2f1 	udiv	r2, r7, r1
 801cae2:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 801cae6:	fb02 f201 	mul.w	r2, r2, r1
 801caea:	1bd2      	subs	r2, r2, r7
 801caec:	4410      	add	r0, r2
 801caee:	fbb0 f2f1 	udiv	r2, r0, r1
 801caf2:	fb02 0011 	mls	r0, r2, r1, r0
 801caf6:	f64c 41cd 	movw	r1, #52429	@ 0xcccd
 801cafa:	f6cc 41cc 	movt	r1, #52428	@ 0xcccc
 801cafe:	fba0 0101 	umull	r0, r1, r0, r1
 801cb02:	0948      	lsrs	r0, r1, #5
 801cb04:	f8a5 0088 	strh.w	r0, [r5, #136]	@ 0x88
 801cb08:	b001      	add	sp, #4
 801cb0a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801cb0c <set_evnt_start_time>:
 801cb0c:	b570      	push	{r4, r5, r6, lr}
 801cb0e:	b082      	sub	sp, #8
 801cb10:	f646 6110 	movw	r1, #28176	@ 0x6e10
 801cb14:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 801cb18:	4604      	mov	r4, r0
 801cb1a:	6b48      	ldr	r0, [r1, #52]	@ 0x34
 801cb1c:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
 801cb20:	2330      	movs	r3, #48	@ 0x30
 801cb22:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801cb26:	f6c0 0300 	movt	r3, #2048	@ 0x800
 801cb2a:	421a      	tst	r2, r3
 801cb2c:	f04f 0600 	mov.w	r6, #0
 801cb30:	d006      	beq.n	801cb40 <set_evnt_start_time+0x34>
 801cb32:	6889      	ldr	r1, [r1, #8]
 801cb34:	b921      	cbnz	r1, 801cb40 <set_evnt_start_time+0x34>
 801cb36:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 801cb38:	f1b1 36ff 	subs.w	r6, r1, #4294967295	@ 0xffffffff
 801cb3c:	bf18      	it	ne
 801cb3e:	2601      	movne	r6, #1
 801cb40:	00c5      	lsls	r5, r0, #3
 801cb42:	a801      	add	r0, sp, #4
 801cb44:	f005 fc81 	bl	802244a <llhwc_slptmr_get>
 801cb48:	9901      	ldr	r1, [sp, #4]
 801cb4a:	b99e      	cbnz	r6, 801cb74 <set_evnt_start_time+0x68>
 801cb4c:	6e60      	ldr	r0, [r4, #100]	@ 0x64
 801cb4e:	1c42      	adds	r2, r0, #1
 801cb50:	d010      	beq.n	801cb74 <set_evnt_start_time+0x68>
 801cb52:	f240 03ec 	movw	r3, #236	@ 0xec
 801cb56:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 801cb5a:	fbb1 f2f5 	udiv	r2, r1, r5
 801cb5e:	681b      	ldr	r3, [r3, #0]
 801cb60:	fb02 0005 	mla	r0, r2, r5, r0
 801cb64:	4419      	add	r1, r3
 801cb66:	3105      	adds	r1, #5
 801cb68:	4281      	cmp	r1, r0
 801cb6a:	6520      	str	r0, [r4, #80]	@ 0x50
 801cb6c:	bf84      	itt	hi
 801cb6e:	4428      	addhi	r0, r5
 801cb70:	6520      	strhi	r0, [r4, #80]	@ 0x50
 801cb72:	e012      	b.n	801cb9a <set_evnt_start_time+0x8e>
 801cb74:	f240 02ec 	movw	r2, #236	@ 0xec
 801cb78:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 801cb7c:	4620      	mov	r0, r4
 801cb7e:	6812      	ldr	r2, [r2, #0]
 801cb80:	f840 1f50 	str.w	r1, [r0, #80]!
 801cb84:	1d51      	adds	r1, r2, #5
 801cb86:	2205      	movs	r2, #5
 801cb88:	f004 fc2e 	bl	80213e8 <ble_time_add_uint>
 801cb8c:	b12e      	cbz	r6, 801cb9a <set_evnt_start_time+0x8e>
 801cb8e:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 801cb90:	fbb0 f1f5 	udiv	r1, r0, r5
 801cb94:	fb01 0015 	mls	r0, r1, r5, r0
 801cb98:	6660      	str	r0, [r4, #100]	@ 0x64
 801cb9a:	2000      	movs	r0, #0
 801cb9c:	f8a4 0054 	strh.w	r0, [r4, #84]	@ 0x54
 801cba0:	b002      	add	sp, #8
 801cba2:	bd70      	pop	{r4, r5, r6, pc}

0801cba4 <non_conn_mngr_reset>:
 801cba4:	b570      	push	{r4, r5, r6, lr}
 801cba6:	f646 6550 	movw	r5, #28240	@ 0x6e50
 801cbaa:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 801cbae:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 801cbb0:	b118      	cbz	r0, 801cbba <non_conn_mngr_reset+0x16>
 801cbb2:	f7f5 ff19 	bl	80129e8 <evnt_schdlr_unrgstr_evnt>
 801cbb6:	2000      	movs	r0, #0
 801cbb8:	6268      	str	r0, [r5, #36]	@ 0x24
 801cbba:	6928      	ldr	r0, [r5, #16]
 801cbbc:	b120      	cbz	r0, 801cbc8 <non_conn_mngr_reset+0x24>
 801cbbe:	3804      	subs	r0, #4
 801cbc0:	f004 ff3e 	bl	8021a40 <os_mem_pool_free>
 801cbc4:	2000      	movs	r0, #0
 801cbc6:	6128      	str	r0, [r5, #16]
 801cbc8:	4628      	mov	r0, r5
 801cbca:	2100      	movs	r1, #0
 801cbcc:	2258      	movs	r2, #88	@ 0x58
 801cbce:	2600      	movs	r6, #0
 801cbd0:	f007 fd0a 	bl	80245e8 <ble_memset>
 801cbd4:	20ff      	movs	r0, #255	@ 0xff
 801cbd6:	f646 64a8 	movw	r4, #28328	@ 0x6ea8
 801cbda:	7328      	strb	r0, [r5, #12]
 801cbdc:	2001      	movs	r0, #1
 801cbde:	f2c2 0400 	movt	r4, #8192	@ 0x2000
 801cbe2:	f885 0029 	strb.w	r0, [r5, #41]	@ 0x29
 801cbe6:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 801cbe8:	f04f 1110 	mov.w	r1, #1048592	@ 0x100010
 801cbec:	60a9      	str	r1, [r5, #8]
 801cbee:	b110      	cbz	r0, 801cbf6 <non_conn_mngr_reset+0x52>
 801cbf0:	f7f5 fefa 	bl	80129e8 <evnt_schdlr_unrgstr_evnt>
 801cbf4:	62e6      	str	r6, [r4, #44]	@ 0x2c
 801cbf6:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 801cbf8:	b110      	cbz	r0, 801cc00 <non_conn_mngr_reset+0x5c>
 801cbfa:	3804      	subs	r0, #4
 801cbfc:	f004 ff20 	bl	8021a40 <os_mem_pool_free>
 801cc00:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 801cc02:	b110      	cbz	r0, 801cc0a <non_conn_mngr_reset+0x66>
 801cc04:	3804      	subs	r0, #4
 801cc06:	f004 ff1b 	bl	8021a40 <os_mem_pool_free>
 801cc0a:	4620      	mov	r0, r4
 801cc0c:	2100      	movs	r1, #0
 801cc0e:	2260      	movs	r2, #96	@ 0x60
 801cc10:	2600      	movs	r6, #0
 801cc12:	f007 fce9 	bl	80245e8 <ble_memset>
 801cc16:	2001      	movs	r0, #1
 801cc18:	f646 7508 	movw	r5, #28424	@ 0x6f08
 801cc1c:	f884 0034 	strb.w	r0, [r4, #52]	@ 0x34
 801cc20:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 801cc24:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 801cc28:	e9c4 0004 	strd	r0, r0, [r4, #16]
 801cc2c:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 801cc2e:	2107      	movs	r1, #7
 801cc30:	7621      	strb	r1, [r4, #24]
 801cc32:	b110      	cbz	r0, 801cc3a <non_conn_mngr_reset+0x96>
 801cc34:	f7f5 fed8 	bl	80129e8 <evnt_schdlr_unrgstr_evnt>
 801cc38:	632e      	str	r6, [r5, #48]	@ 0x30
 801cc3a:	69a8      	ldr	r0, [r5, #24]
 801cc3c:	b110      	cbz	r0, 801cc44 <non_conn_mngr_reset+0xa0>
 801cc3e:	3804      	subs	r0, #4
 801cc40:	f004 fefe 	bl	8021a40 <os_mem_pool_free>
 801cc44:	4628      	mov	r0, r5
 801cc46:	2100      	movs	r1, #0
 801cc48:	2244      	movs	r2, #68	@ 0x44
 801cc4a:	f007 fccd 	bl	80245e8 <ble_memset>
 801cc4e:	2001      	movs	r0, #1
 801cc50:	f885 0034 	strb.w	r0, [r5, #52]	@ 0x34
 801cc54:	bd70      	pop	{r4, r5, r6, pc}

0801cc56 <non_conn_mngr_add_rmv_clr_device_white_list>:
 801cc56:	b570      	push	{r4, r5, r6, lr}
 801cc58:	b084      	sub	sp, #16
 801cc5a:	4604      	mov	r4, r0
 801cc5c:	4615      	mov	r5, r2
 801cc5e:	460e      	mov	r6, r1
 801cc60:	2000      	movs	r0, #0
 801cc62:	9003      	str	r0, [sp, #12]
 801cc64:	b91c      	cbnz	r4, 801cc6e <non_conn_mngr_add_rmv_clr_device_white_list+0x18>
 801cc66:	2d02      	cmp	r5, #2
 801cc68:	d001      	beq.n	801cc6e <non_conn_mngr_add_rmv_clr_device_white_list+0x18>
 801cc6a:	2611      	movs	r6, #17
 801cc6c:	e05d      	b.n	801cd2a <non_conn_mngr_add_rmv_clr_device_white_list+0xd4>
 801cc6e:	f646 6050 	movw	r0, #28240	@ 0x6e50
 801cc72:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801cc76:	f890 1029 	ldrb.w	r1, [r0, #41]	@ 0x29
 801cc7a:	b911      	cbnz	r1, 801cc82 <non_conn_mngr_add_rmv_clr_device_white_list+0x2c>
 801cc7c:	7bc0      	ldrb	r0, [r0, #15]
 801cc7e:	2801      	cmp	r0, #1
 801cc80:	d04f      	beq.n	801cd22 <non_conn_mngr_add_rmv_clr_device_white_list+0xcc>
 801cc82:	f646 60a8 	movw	r0, #28328	@ 0x6ea8
 801cc86:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801cc8a:	f890 1034 	ldrb.w	r1, [r0, #52]	@ 0x34
 801cc8e:	b379      	cbz	r1, 801ccf0 <non_conn_mngr_add_rmv_clr_device_white_list+0x9a>
 801cc90:	f646 7008 	movw	r0, #28424	@ 0x6f08
 801cc94:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801cc98:	f890 1034 	ldrb.w	r1, [r0, #52]	@ 0x34
 801cc9c:	b911      	cbnz	r1, 801cca4 <non_conn_mngr_add_rmv_clr_device_white_list+0x4e>
 801cc9e:	7d40      	ldrb	r0, [r0, #21]
 801cca0:	2801      	cmp	r0, #1
 801cca2:	d03e      	beq.n	801cd22 <non_conn_mngr_add_rmv_clr_device_white_list+0xcc>
 801cca4:	2d02      	cmp	r5, #2
 801cca6:	d235      	bcs.n	801cd14 <non_conn_mngr_add_rmv_clr_device_white_list+0xbe>
 801cca8:	f04f 0c00 	mov.w	ip, #0
 801ccac:	4628      	mov	r0, r5
 801ccae:	2100      	movs	r1, #0
 801ccb0:	4632      	mov	r2, r6
 801ccb2:	4623      	mov	r3, r4
 801ccb4:	f8cd c000 	str.w	ip, [sp]
 801ccb8:	f7fb f8d2 	bl	8017e60 <llhwc_lst_add_rmv_dev>
 801ccbc:	2e01      	cmp	r6, #1
 801ccbe:	4606      	mov	r6, r0
 801ccc0:	bf08      	it	eq
 801ccc2:	2e00      	cmpeq	r6, #0
 801ccc4:	d131      	bne.n	801cd2a <non_conn_mngr_add_rmv_clr_device_white_list+0xd4>
 801ccc6:	7960      	ldrb	r0, [r4, #5]
 801ccc8:	f000 00c0 	and.w	r0, r0, #192	@ 0xc0
 801cccc:	2840      	cmp	r0, #64	@ 0x40
 801ccce:	d10d      	bne.n	801ccec <non_conn_mngr_add_rmv_clr_device_white_list+0x96>
 801ccd0:	aa03      	add	r2, sp, #12
 801ccd2:	2002      	movs	r0, #2
 801ccd4:	4621      	mov	r1, r4
 801ccd6:	2300      	movs	r3, #0
 801ccd8:	f002 fa16 	bl	801f108 <prvcy_mngr_srch_fw_reslvng_list>
 801ccdc:	9803      	ldr	r0, [sp, #12]
 801ccde:	b338      	cbz	r0, 801cd30 <non_conn_mngr_add_rmv_clr_device_white_list+0xda>
 801cce0:	6800      	ldr	r0, [r0, #0]
 801cce2:	2d01      	cmp	r5, #1
 801cce4:	d145      	bne.n	801cd72 <non_conn_mngr_add_rmv_clr_device_white_list+0x11c>
 801cce6:	b2c0      	uxtb	r0, r0
 801cce8:	f7fb fa2e 	bl	8018148 <llhwc_lst_rmv_by_loc>
 801ccec:	2600      	movs	r6, #0
 801ccee:	e01c      	b.n	801cd2a <non_conn_mngr_add_rmv_clr_device_white_list+0xd4>
 801ccf0:	f890 0024 	ldrb.w	r0, [r0, #36]	@ 0x24
 801ccf4:	3801      	subs	r0, #1
 801ccf6:	2803      	cmp	r0, #3
 801ccf8:	d313      	bcc.n	801cd22 <non_conn_mngr_add_rmv_clr_device_white_list+0xcc>
 801ccfa:	f646 7050 	movw	r0, #28496	@ 0x6f50
 801ccfe:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801cd02:	f890 1036 	ldrb.w	r1, [r0, #54]	@ 0x36
 801cd06:	2900      	cmp	r1, #0
 801cd08:	d0c2      	beq.n	801cc90 <non_conn_mngr_add_rmv_clr_device_white_list+0x3a>
 801cd0a:	f890 0034 	ldrb.w	r0, [r0, #52]	@ 0x34
 801cd0e:	2803      	cmp	r0, #3
 801cd10:	d007      	beq.n	801cd22 <non_conn_mngr_add_rmv_clr_device_white_list+0xcc>
 801cd12:	e7bd      	b.n	801cc90 <non_conn_mngr_add_rmv_clr_device_white_list+0x3a>
 801cd14:	2d02      	cmp	r5, #2
 801cd16:	d104      	bne.n	801cd22 <non_conn_mngr_add_rmv_clr_device_white_list+0xcc>
 801cd18:	2000      	movs	r0, #0
 801cd1a:	2600      	movs	r6, #0
 801cd1c:	f7fa ff10 	bl	8017b40 <llhwc_lst_clr>
 801cd20:	e003      	b.n	801cd2a <non_conn_mngr_add_rmv_clr_device_white_list+0xd4>
 801cd22:	2043      	movs	r0, #67	@ 0x43
 801cd24:	f002 fdc8 	bl	801f8b8 <bsp_debug_gpio_toggle>
 801cd28:	260c      	movs	r6, #12
 801cd2a:	4630      	mov	r0, r6
 801cd2c:	b004      	add	sp, #16
 801cd2e:	bd70      	pop	{r4, r5, r6, pc}
 801cd30:	f10d 050b 	add.w	r5, sp, #11
 801cd34:	2000      	movs	r0, #0
 801cd36:	2103      	movs	r1, #3
 801cd38:	2201      	movs	r2, #1
 801cd3a:	4623      	mov	r3, r4
 801cd3c:	9500      	str	r5, [sp, #0]
 801cd3e:	f7fb f88f 	bl	8017e60 <llhwc_lst_add_rmv_dev>
 801cd42:	b190      	cbz	r0, 801cd6a <non_conn_mngr_add_rmv_clr_device_white_list+0x114>
 801cd44:	4606      	mov	r6, r0
 801cd46:	2807      	cmp	r0, #7
 801cd48:	d1ef      	bne.n	801cd2a <non_conn_mngr_add_rmv_clr_device_white_list+0xd4>
 801cd4a:	2003      	movs	r0, #3
 801cd4c:	f000 f818 	bl	801cd80 <non_conn_mngr_remove_random_addr_list>
 801cd50:	4606      	mov	r6, r0
 801cd52:	2800      	cmp	r0, #0
 801cd54:	d1e9      	bne.n	801cd2a <non_conn_mngr_add_rmv_clr_device_white_list+0xd4>
 801cd56:	2000      	movs	r0, #0
 801cd58:	2103      	movs	r1, #3
 801cd5a:	2201      	movs	r2, #1
 801cd5c:	4623      	mov	r3, r4
 801cd5e:	9500      	str	r5, [sp, #0]
 801cd60:	f7fb f87e 	bl	8017e60 <llhwc_lst_add_rmv_dev>
 801cd64:	4606      	mov	r6, r0
 801cd66:	2800      	cmp	r0, #0
 801cd68:	d1df      	bne.n	801cd2a <non_conn_mngr_add_rmv_clr_device_white_list+0xd4>
 801cd6a:	f89d 100b 	ldrb.w	r1, [sp, #11]
 801cd6e:	2000      	movs	r0, #0
 801cd70:	e001      	b.n	801cd76 <non_conn_mngr_add_rmv_clr_device_white_list+0x120>
 801cd72:	b2c1      	uxtb	r1, r0
 801cd74:	2003      	movs	r0, #3
 801cd76:	2200      	movs	r2, #0
 801cd78:	2600      	movs	r6, #0
 801cd7a:	f7fb fa04 	bl	8018186 <llhwc_lst_edit_indicators>
 801cd7e:	e7d4      	b.n	801cd2a <non_conn_mngr_add_rmv_clr_device_white_list+0xd4>

0801cd80 <non_conn_mngr_remove_random_addr_list>:
 801cd80:	b510      	push	{r4, lr}
 801cd82:	b082      	sub	sp, #8
 801cd84:	2100      	movs	r1, #0
 801cd86:	9101      	str	r1, [sp, #4]
 801cd88:	a901      	add	r1, sp, #4
 801cd8a:	f7fb f980 	bl	801808e <llhwc_lst_rmv_rand_add>
 801cd8e:	4604      	mov	r4, r0
 801cd90:	b918      	cbnz	r0, 801cd9a <non_conn_mngr_remove_random_addr_list+0x1a>
 801cd92:	f89d 0004 	ldrb.w	r0, [sp, #4]
 801cd96:	f002 fbd5 	bl	801f544 <prvcy_mngr_clean_hwpostn_fw_lst>
 801cd9a:	4620      	mov	r0, r4
 801cd9c:	b002      	add	sp, #8
 801cd9e:	bd10      	pop	{r4, pc}

0801cda0 <non_conn_mngr_interrupt>:
 801cda0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cda4:	b087      	sub	sp, #28
 801cda6:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	@ 0x40
 801cdaa:	4604      	mov	r4, r0
 801cdac:	460f      	mov	r7, r1
 801cdae:	f084 0110 	eor.w	r1, r4, #16
 801cdb2:	461e      	mov	r6, r3
 801cdb4:	4692      	mov	sl, r2
 801cdb6:	2000      	movs	r0, #0
 801cdb8:	ea51 0b07 	orrs.w	fp, r1, r7
 801cdbc:	9006      	str	r0, [sp, #24]
 801cdbe:	9004      	str	r0, [sp, #16]
 801cdc0:	e9cd 0002 	strd	r0, r0, [sp, #8]
 801cdc4:	9001      	str	r0, [sp, #4]
 801cdc6:	d108      	bne.n	801cdda <non_conn_mngr_interrupt+0x3a>
 801cdc8:	f646 6150 	movw	r1, #28240	@ 0x6e50
 801cdcc:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 801cdd0:	7b8d      	ldrb	r5, [r1, #14]
 801cdd2:	f889 5000 	strb.w	r5, [r9]
 801cdd6:	7b88      	ldrb	r0, [r1, #14]
 801cdd8:	e007      	b.n	801cdea <non_conn_mngr_interrupt+0x4a>
 801cdda:	f646 7108 	movw	r1, #28424	@ 0x6f08
 801cdde:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 801cde2:	7d8d      	ldrb	r5, [r1, #22]
 801cde4:	f889 5000 	strb.w	r5, [r9]
 801cde8:	7d88      	ldrb	r0, [r1, #22]
 801cdea:	f000 00fe 	and.w	r0, r0, #254	@ 0xfe
 801cdee:	2802      	cmp	r0, #2
 801cdf0:	bf04      	itt	eq
 801cdf2:	1ea8      	subeq	r0, r5, #2
 801cdf4:	f889 0000 	strbeq.w	r0, [r9]
 801cdf8:	4640      	mov	r0, r8
 801cdfa:	2206      	movs	r2, #6
 801cdfc:	f007 fba4 	bl	8024548 <ble_memcpy>
 801ce00:	b13e      	cbz	r6, 801ce12 <non_conn_mngr_interrupt+0x72>
 801ce02:	2e01      	cmp	r6, #1
 801ce04:	d10e      	bne.n	801ce24 <non_conn_mngr_interrupt+0x84>
 801ce06:	f89a 0005 	ldrb.w	r0, [sl, #5]
 801ce0a:	3040      	adds	r0, #64	@ 0x40
 801ce0c:	b240      	sxtb	r0, r0
 801ce0e:	2800      	cmp	r0, #0
 801ce10:	d408      	bmi.n	801ce24 <non_conn_mngr_interrupt+0x84>
 801ce12:	f1bb 0f00 	cmp.w	fp, #0
 801ce16:	d129      	bne.n	801ce6c <non_conn_mngr_interrupt+0xcc>
 801ce18:	f646 6050 	movw	r0, #28240	@ 0x6e50
 801ce1c:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801ce20:	7b80      	ldrb	r0, [r0, #14]
 801ce22:	e02c      	b.n	801ce7e <non_conn_mngr_interrupt+0xde>
 801ce24:	f10d 0317 	add.w	r3, sp, #23
 801ce28:	2003      	movs	r0, #3
 801ce2a:	4631      	mov	r1, r6
 801ce2c:	4652      	mov	r2, sl
 801ce2e:	f7fa ff74 	bl	8017d1a <llhwc_lst_search>
 801ce32:	bb80      	cbnz	r0, 801ce96 <non_conn_mngr_interrupt+0xf6>
 801ce34:	f89d 0017 	ldrb.w	r0, [sp, #23]
 801ce38:	07c0      	lsls	r0, r0, #31
 801ce3a:	d130      	bne.n	801ce9e <non_conn_mngr_interrupt+0xfe>
 801ce3c:	f005 00fe 	and.w	r0, r5, #254	@ 0xfe
 801ce40:	2802      	cmp	r0, #2
 801ce42:	d128      	bne.n	801ce96 <non_conn_mngr_interrupt+0xf6>
 801ce44:	f10d 0117 	add.w	r1, sp, #23
 801ce48:	aa06      	add	r2, sp, #24
 801ce4a:	2004      	movs	r0, #4
 801ce4c:	2300      	movs	r3, #0
 801ce4e:	f002 f95b 	bl	801f108 <prvcy_mngr_srch_fw_reslvng_list>
 801ce52:	9806      	ldr	r0, [sp, #24]
 801ce54:	b1b8      	cbz	r0, 801ce86 <non_conn_mngr_interrupt+0xe6>
 801ce56:	a901      	add	r1, sp, #4
 801ce58:	2206      	movs	r2, #6
 801ce5a:	f007 fbfd 	bl	8024658 <ble_memcmp>
 801ce5e:	b1d0      	cbz	r0, 801ce96 <non_conn_mngr_interrupt+0xf6>
 801ce60:	9906      	ldr	r1, [sp, #24]
 801ce62:	4640      	mov	r0, r8
 801ce64:	2206      	movs	r2, #6
 801ce66:	f007 fb6f 	bl	8024548 <ble_memcpy>
 801ce6a:	e011      	b.n	801ce90 <non_conn_mngr_interrupt+0xf0>
 801ce6c:	f084 0040 	eor.w	r0, r4, #64	@ 0x40
 801ce70:	4338      	orrs	r0, r7
 801ce72:	d110      	bne.n	801ce96 <non_conn_mngr_interrupt+0xf6>
 801ce74:	f646 7008 	movw	r0, #28424	@ 0x6f08
 801ce78:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801ce7c:	7d80      	ldrb	r0, [r0, #22]
 801ce7e:	f000 00fe 	and.w	r0, r0, #254	@ 0xfe
 801ce82:	2802      	cmp	r0, #2
 801ce84:	d107      	bne.n	801ce96 <non_conn_mngr_interrupt+0xf6>
 801ce86:	4650      	mov	r0, sl
 801ce88:	4641      	mov	r1, r8
 801ce8a:	f002 fa47 	bl	801f31c <prvcy_mngr_get_local_rpa>
 801ce8e:	b910      	cbnz	r0, 801ce96 <non_conn_mngr_interrupt+0xf6>
 801ce90:	2001      	movs	r0, #1
 801ce92:	f889 0000 	strb.w	r0, [r9]
 801ce96:	2000      	movs	r0, #0
 801ce98:	b007      	add	sp, #28
 801ce9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ce9e:	2001      	movs	r0, #1
 801cea0:	e7fa      	b.n	801ce98 <non_conn_mngr_interrupt+0xf8>

0801cea2 <non_conn_mngr_scan_enable>:
 801cea2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cea6:	b084      	sub	sp, #16
 801cea8:	f646 6450 	movw	r4, #28240	@ 0x6e50
 801ceac:	f2c2 0400 	movt	r4, #8192	@ 0x2000
 801ceb0:	7ba5      	ldrb	r5, [r4, #14]
 801ceb2:	f005 02fe 	and.w	r2, r5, #254	@ 0xfe
 801ceb6:	2a02      	cmp	r2, #2
 801ceb8:	f240 1201 	movw	r2, #257	@ 0x101
 801cebc:	f8a4 2048 	strh.w	r2, [r4, #72]	@ 0x48
 801cec0:	d106      	bne.n	801ced0 <non_conn_mngr_scan_enable+0x2e>
 801cec2:	f646 7250 	movw	r2, #28496	@ 0x6f50
 801cec6:	3d02      	subs	r5, #2
 801cec8:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 801cecc:	f882 5027 	strb.w	r5, [r2, #39]	@ 0x27
 801ced0:	f894 2029 	ldrb.w	r2, [r4, #41]	@ 0x29
 801ced4:	f884 1028 	strb.w	r1, [r4, #40]	@ 0x28
 801ced8:	b390      	cbz	r0, 801cf40 <non_conn_mngr_scan_enable+0x9e>
 801ceda:	2a01      	cmp	r2, #1
 801cedc:	d034      	beq.n	801cf48 <non_conn_mngr_scan_enable+0xa6>
 801cede:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 801cee0:	f7f5 fd82 	bl	80129e8 <evnt_schdlr_unrgstr_evnt>
 801cee4:	4605      	mov	r5, r0
 801cee6:	bb80      	cbnz	r0, 801cf4a <non_conn_mngr_scan_enable+0xa8>
 801cee8:	6920      	ldr	r0, [r4, #16]
 801ceea:	2500      	movs	r5, #0
 801ceec:	6265      	str	r5, [r4, #36]	@ 0x24
 801ceee:	b118      	cbz	r0, 801cef8 <non_conn_mngr_scan_enable+0x56>
 801cef0:	3804      	subs	r0, #4
 801cef2:	f004 fda5 	bl	8021a40 <os_mem_pool_free>
 801cef6:	6125      	str	r5, [r4, #16]
 801cef8:	6a20      	ldr	r0, [r4, #32]
 801cefa:	2100      	movs	r1, #0
 801cefc:	f002 fc18 	bl	801f730 <state_mngr_update_state>
 801cf00:	4605      	mov	r5, r0
 801cf02:	bb10      	cbnz	r0, 801cf4a <non_conn_mngr_scan_enable+0xa8>
 801cf04:	f646 7050 	movw	r0, #28496	@ 0x6f50
 801cf08:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801cf0c:	f890 0036 	ldrb.w	r0, [r0, #54]	@ 0x36
 801cf10:	2801      	cmp	r0, #1
 801cf12:	bf04      	itt	eq
 801cf14:	2003      	moveq	r0, #3
 801cf16:	f7fa fe13 	bleq	8017b40 <llhwc_lst_clr>
 801cf1a:	2002      	movs	r0, #2
 801cf1c:	f7fa fe10 	bl	8017b40 <llhwc_lst_clr>
 801cf20:	2001      	movs	r0, #1
 801cf22:	f24d 4393 	movw	r3, #54419	@ 0xd493
 801cf26:	f884 0029 	strb.w	r0, [r4, #41]	@ 0x29
 801cf2a:	f88d 000c 	strb.w	r0, [sp, #12]
 801cf2e:	aa03      	add	r2, sp, #12
 801cf30:	2008      	movs	r0, #8
 801cf32:	2100      	movs	r1, #0
 801cf34:	f6c0 0301 	movt	r3, #2049	@ 0x801
 801cf38:	2500      	movs	r5, #0
 801cf3a:	f004 fd29 	bl	8021990 <emngr_remove_conditional_event>
 801cf3e:	e004      	b.n	801cf4a <non_conn_mngr_scan_enable+0xa8>
 801cf40:	b112      	cbz	r2, 801cf48 <non_conn_mngr_scan_enable+0xa6>
 801cf42:	f7fb fa17 	bl	8018374 <llhwc_is_dtm_enabled>
 801cf46:	b120      	cbz	r0, 801cf52 <non_conn_mngr_scan_enable+0xb0>
 801cf48:	2500      	movs	r5, #0
 801cf4a:	4628      	mov	r0, r5
 801cf4c:	b004      	add	sp, #16
 801cf4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cf52:	2003      	movs	r0, #3
 801cf54:	f002 fb74 	bl	801f640 <state_mngr_alloc_state_mchn>
 801cf58:	2101      	movs	r1, #1
 801cf5a:	6220      	str	r0, [r4, #32]
 801cf5c:	2800      	cmp	r0, #0
 801cf5e:	bf18      	it	ne
 801cf60:	2001      	movne	r0, #1
 801cf62:	f002 fc5e 	bl	801f822 <bsp_assert>
 801cf66:	b2ee      	uxtb	r6, r5
 801cf68:	4630      	mov	r0, r6
 801cf6a:	4621      	mov	r1, r4
 801cf6c:	f009 f95d 	bl	802622a <db_get_src_address>
 801cf70:	4605      	mov	r5, r0
 801cf72:	2800      	cmp	r0, #0
 801cf74:	d1e9      	bne.n	801cf4a <non_conn_mngr_scan_enable+0xa8>
 801cf76:	7b20      	ldrb	r0, [r4, #12]
 801cf78:	f04f 0800 	mov.w	r8, #0
 801cf7c:	2801      	cmp	r0, #1
 801cf7e:	d11a      	bne.n	801cfb6 <non_conn_mngr_scan_enable+0x114>
 801cf80:	6921      	ldr	r1, [r4, #16]
 801cf82:	2004      	movs	r0, #4
 801cf84:	8360      	strh	r0, [r4, #26]
 801cf86:	f8a4 801c 	strh.w	r8, [r4, #28]
 801cf8a:	b931      	cbnz	r1, 801cf9a <non_conn_mngr_scan_enable+0xf8>
 801cf8c:	f649 604c 	movw	r0, #40524	@ 0x9e4c
 801cf90:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801cf94:	f004 fd56 	bl	8021a44 <os_shrd_mem_alloc>
 801cf98:	6120      	str	r0, [r4, #16]
 801cf9a:	2700      	movs	r7, #0
 801cf9c:	f104 0110 	add.w	r1, r4, #16
 801cfa0:	4630      	mov	r0, r6
 801cfa2:	2203      	movs	r2, #3
 801cfa4:	2300      	movs	r3, #0
 801cfa6:	9700      	str	r7, [sp, #0]
 801cfa8:	f001 f882 	bl	801e0b0 <pdu_trnsprt_hndlr_form_nconn_scan>
 801cfac:	4605      	mov	r5, r0
 801cfae:	2800      	cmp	r0, #0
 801cfb0:	d1cb      	bne.n	801cf4a <non_conn_mngr_scan_enable+0xa8>
 801cfb2:	2010      	movs	r0, #16
 801cfb4:	e001      	b.n	801cfba <non_conn_mngr_scan_enable+0x118>
 801cfb6:	2020      	movs	r0, #32
 801cfb8:	2700      	movs	r7, #0
 801cfba:	f64c 73ed 	movw	r3, #53229	@ 0xcfed
 801cfbe:	4639      	mov	r1, r7
 801cfc0:	f6c0 0301 	movt	r3, #2049	@ 0x801
 801cfc4:	4622      	mov	r2, r4
 801cfc6:	e9cd 8800 	strd	r8, r8, [sp]
 801cfca:	f8cd 8008 	str.w	r8, [sp, #8]
 801cfce:	f7f4 ff66 	bl	8011e9e <evnt_schdlr_rgstr_evnt>
 801cfd2:	2101      	movs	r1, #1
 801cfd4:	6260      	str	r0, [r4, #36]	@ 0x24
 801cfd6:	2800      	cmp	r0, #0
 801cfd8:	bf18      	it	ne
 801cfda:	2001      	movne	r0, #1
 801cfdc:	f002 fc21 	bl	801f822 <bsp_assert>
 801cfe0:	f884 803c 	strb.w	r8, [r4, #60]	@ 0x3c
 801cfe4:	f884 8029 	strb.w	r8, [r4, #41]	@ 0x29
 801cfe8:	e7ae      	b.n	801cf48 <non_conn_mngr_scan_enable+0xa6>
	...

0801cfec <non_conn_mngr_scan_cbk>:
 801cfec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cff0:	b09b      	sub	sp, #108	@ 0x6c
 801cff2:	207f      	movs	r0, #127	@ 0x7f
 801cff4:	4688      	mov	r8, r1
 801cff6:	f002 fc5b 	bl	801f8b0 <bsp_debug_gpio_set>
 801cffa:	4640      	mov	r0, r8
 801cffc:	2101      	movs	r1, #1
 801cffe:	f1b8 0f00 	cmp.w	r8, #0
 801d002:	bf18      	it	ne
 801d004:	2001      	movne	r0, #1
 801d006:	f002 fc0c 	bl	801f822 <bsp_assert>
 801d00a:	f898 4020 	ldrb.w	r4, [r8, #32]
 801d00e:	2c00      	cmp	r4, #0
 801d010:	f000 8217 	beq.w	801d442 <non_conn_mngr_scan_cbk+0x456>
 801d014:	f898 002b 	ldrb.w	r0, [r8, #43]	@ 0x2b
 801d018:	ae18      	add	r6, sp, #96	@ 0x60
 801d01a:	9002      	str	r0, [sp, #8]
 801d01c:	4630      	mov	r0, r6
 801d01e:	2100      	movs	r1, #0
 801d020:	2208      	movs	r2, #8
 801d022:	f007 fae1 	bl	80245e8 <ble_memset>
 801d026:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
 801d02a:	f8d8 0008 	ldr.w	r0, [r8, #8]
 801d02e:	ea4f 0a81 	mov.w	sl, r1, lsl #2
 801d032:	f646 7150 	movw	r1, #28496	@ 0x6f50
 801d036:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 801d03a:	3108      	adds	r1, #8
 801d03c:	f10d 0b13 	add.w	fp, sp, #19
 801d040:	f04f 0900 	mov.w	r9, #0
 801d044:	2700      	movs	r7, #0
 801d046:	9103      	str	r1, [sp, #12]
 801d048:	2101      	movs	r1, #1
 801d04a:	2800      	cmp	r0, #0
 801d04c:	bf18      	it	ne
 801d04e:	2001      	movne	r0, #1
 801d050:	f002 fbe7 	bl	801f822 <bsp_assert>
 801d054:	a90a      	add	r1, sp, #40	@ 0x28
 801d056:	f8d8 0008 	ldr.w	r0, [r8, #8]
 801d05a:	eb01 0509 	add.w	r5, r1, r9
 801d05e:	9a03      	ldr	r2, [sp, #12]
 801d060:	4629      	mov	r1, r5
 801d062:	465b      	mov	r3, fp
 801d064:	9700      	str	r7, [sp, #0]
 801d066:	f000 ff41 	bl	801deec <pdu_trnsprt_hndlr_parse_nconn_adv>
 801d06a:	f89d 1013 	ldrb.w	r1, [sp, #19]
 801d06e:	2800      	cmp	r0, #0
 801d070:	f646 7050 	movw	r0, #28496	@ 0x6f50
 801d074:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801d078:	f880 1027 	strb.w	r1, [r0, #39]	@ 0x27
 801d07c:	f040 81e1 	bne.w	801d442 <non_conn_mngr_scan_cbk+0x456>
 801d080:	f8d8 0008 	ldr.w	r0, [r8, #8]
 801d084:	f898 1022 	ldrb.w	r1, [r8, #34]	@ 0x22
 801d088:	f846 0b04 	str.w	r0, [r6], #4
 801d08c:	7629      	strb	r1, [r5, #24]
 801d08e:	f001 fc0a 	bl	801e8a6 <get_nxt_data_packet>
 801d092:	f109 091c 	add.w	r9, r9, #28
 801d096:	45ca      	cmp	sl, r9
 801d098:	f8c8 0008 	str.w	r0, [r8, #8]
 801d09c:	d1d4      	bne.n	801d048 <non_conn_mngr_scan_cbk+0x5c>
 801d09e:	f89d 2041 	ldrb.w	r2, [sp, #65]	@ 0x41
 801d0a2:	f646 7050 	movw	r0, #28496	@ 0x6f50
 801d0a6:	2103      	movs	r1, #3
 801d0a8:	2a03      	cmp	r2, #3
 801d0aa:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801d0ae:	f880 1028 	strb.w	r1, [r0, #40]	@ 0x28
 801d0b2:	f200 81c6 	bhi.w	801d442 <non_conn_mngr_scan_cbk+0x456>
 801d0b6:	f240 1100 	movw	r1, #256	@ 0x100
 801d0ba:	00d2      	lsls	r2, r2, #3
 801d0bc:	f2c0 2106 	movt	r1, #518	@ 0x206
 801d0c0:	40d1      	lsrs	r1, r2
 801d0c2:	ad0a      	add	r5, sp, #40	@ 0x28
 801d0c4:	f880 1029 	strb.w	r1, [r0, #41]	@ 0x29
 801d0c8:	4629      	mov	r1, r5
 801d0ca:	2206      	movs	r2, #6
 801d0cc:	f007 fa3c 	bl	8024548 <ble_memcpy>
 801d0d0:	f646 7350 	movw	r3, #28496	@ 0x6f50
 801d0d4:	f89d 0042 	ldrb.w	r0, [sp, #66]	@ 0x42
 801d0d8:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 801d0dc:	f646 6b50 	movw	fp, #28240	@ 0x6e50
 801d0e0:	f883 0025 	strb.w	r0, [r3, #37]	@ 0x25
 801d0e4:	f883 0026 	strb.w	r0, [r3, #38]	@ 0x26
 801d0e8:	f2c2 0b00 	movt	fp, #8192	@ 0x2000
 801d0ec:	f893 0036 	ldrb.w	r0, [r3, #54]	@ 0x36
 801d0f0:	f89b 100d 	ldrb.w	r1, [fp, #13]
 801d0f4:	2801      	cmp	r0, #1
 801d0f6:	621b      	str	r3, [r3, #32]
 801d0f8:	f883 1035 	strb.w	r1, [r3, #53]	@ 0x35
 801d0fc:	d136      	bne.n	801d16c <non_conn_mngr_scan_cbk+0x180>
 801d0fe:	9802      	ldr	r0, [sp, #8]
 801d100:	f001 fd06 	bl	801eb10 <prvcy_mngr_addr_hndlr>
 801d104:	f646 7150 	movw	r1, #28496	@ 0x6f50
 801d108:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 801d10c:	2800      	cmp	r0, #0
 801d10e:	f040 8198 	bne.w	801d442 <non_conn_mngr_scan_cbk+0x456>
 801d112:	6a08      	ldr	r0, [r1, #32]
 801d114:	2101      	movs	r1, #1
 801d116:	2800      	cmp	r0, #0
 801d118:	bf18      	it	ne
 801d11a:	2001      	movne	r0, #1
 801d11c:	f002 fb81 	bl	801f822 <bsp_assert>
 801d120:	f646 7050 	movw	r0, #28496	@ 0x6f50
 801d124:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801d128:	f646 7150 	movw	r1, #28496	@ 0x6f50
 801d12c:	f890 0026 	ldrb.w	r0, [r0, #38]	@ 0x26
 801d130:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 801d134:	6a09      	ldr	r1, [r1, #32]
 801d136:	ae0a      	add	r6, sp, #40	@ 0x28
 801d138:	f88d 0042 	strb.w	r0, [sp, #66]	@ 0x42
 801d13c:	4630      	mov	r0, r6
 801d13e:	2206      	movs	r2, #6
 801d140:	f007 fa02 	bl	8024548 <ble_memcpy>
 801d144:	f646 7350 	movw	r3, #28496	@ 0x6f50
 801d148:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 801d14c:	2c02      	cmp	r4, #2
 801d14e:	d10d      	bne.n	801d16c <non_conn_mngr_scan_cbk+0x180>
 801d150:	f893 2026 	ldrb.w	r2, [r3, #38]	@ 0x26
 801d154:	6a19      	ldr	r1, [r3, #32]
 801d156:	f106 001c 	add.w	r0, r6, #28
 801d15a:	f88d 205e 	strb.w	r2, [sp, #94]	@ 0x5e
 801d15e:	2206      	movs	r2, #6
 801d160:	f007 f9f2 	bl	8024548 <ble_memcpy>
 801d164:	f646 7350 	movw	r3, #28496	@ 0x6f50
 801d168:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 801d16c:	9802      	ldr	r0, [sp, #8]
 801d16e:	b110      	cbz	r0, 801d176 <non_conn_mngr_scan_cbk+0x18a>
 801d170:	f04f 0a00 	mov.w	sl, #0
 801d174:	e123      	b.n	801d3be <non_conn_mngr_scan_cbk+0x3d2>
 801d176:	f89b 0028 	ldrb.w	r0, [fp, #40]	@ 0x28
 801d17a:	2801      	cmp	r0, #1
 801d17c:	d168      	bne.n	801d250 <non_conn_mngr_scan_cbk+0x264>
 801d17e:	f89b 000c 	ldrb.w	r0, [fp, #12]
 801d182:	f084 0102 	eor.w	r1, r4, #2
 801d186:	4308      	orrs	r0, r1
 801d188:	f04f 0101 	mov.w	r1, #1
 801d18c:	bf18      	it	ne
 801d18e:	2001      	movne	r0, #1
 801d190:	2601      	movs	r6, #1
 801d192:	f002 fb46 	bl	801f822 <bsp_assert>
 801d196:	f89b 000c 	ldrb.w	r0, [fp, #12]
 801d19a:	f04f 0a01 	mov.w	sl, #1
 801d19e:	2801      	cmp	r0, #1
 801d1a0:	d107      	bne.n	801d1b2 <non_conn_mngr_scan_cbk+0x1c6>
 801d1a2:	f89d 0041 	ldrb.w	r0, [sp, #65]	@ 0x41
 801d1a6:	f04f 0a01 	mov.w	sl, #1
 801d1aa:	f040 0002 	orr.w	r0, r0, #2
 801d1ae:	2803      	cmp	r0, #3
 801d1b0:	d179      	bne.n	801d2a6 <non_conn_mngr_scan_cbk+0x2ba>
 801d1b2:	f646 7750 	movw	r7, #28496	@ 0x6f50
 801d1b6:	f89d 102d 	ldrb.w	r1, [sp, #45]	@ 0x2d
 801d1ba:	f2c2 0700 	movt	r7, #8192	@ 0x2000
 801d1be:	f89d 2042 	ldrb.w	r2, [sp, #66]	@ 0x42
 801d1c2:	f897 0036 	ldrb.w	r0, [r7, #54]	@ 0x36
 801d1c6:	f001 01c0 	and.w	r1, r1, #192	@ 0xc0
 801d1ca:	ea26 0302 	bic.w	r3, r6, r2
 801d1ce:	3940      	subs	r1, #64	@ 0x40
 801d1d0:	bf18      	it	ne
 801d1d2:	2101      	movne	r1, #1
 801d1d4:	2801      	cmp	r0, #1
 801d1d6:	ea43 0601 	orr.w	r6, r3, r1
 801d1da:	d13c      	bne.n	801d256 <non_conn_mngr_scan_cbk+0x26a>
 801d1dc:	f897 1025 	ldrb.w	r1, [r7, #37]	@ 0x25
 801d1e0:	2901      	cmp	r1, #1
 801d1e2:	d138      	bne.n	801d256 <non_conn_mngr_scan_cbk+0x26a>
 801d1e4:	7979      	ldrb	r1, [r7, #5]
 801d1e6:	f001 01c0 	and.w	r1, r1, #192	@ 0xc0
 801d1ea:	2940      	cmp	r1, #64	@ 0x40
 801d1ec:	d133      	bne.n	801d256 <non_conn_mngr_scan_cbk+0x26a>
 801d1ee:	f646 7750 	movw	r7, #28496	@ 0x6f50
 801d1f2:	f2c2 0700 	movt	r7, #8192	@ 0x2000
 801d1f6:	f10d 036b 	add.w	r3, sp, #107	@ 0x6b
 801d1fa:	2003      	movs	r0, #3
 801d1fc:	2101      	movs	r1, #1
 801d1fe:	463a      	mov	r2, r7
 801d200:	f7fa fd8b 	bl	8017d1a <llhwc_lst_search>
 801d204:	2800      	cmp	r0, #0
 801d206:	f040 811c 	bne.w	801d442 <non_conn_mngr_scan_cbk+0x456>
 801d20a:	f89d 106b 	ldrb.w	r1, [sp, #107]	@ 0x6b
 801d20e:	2002      	movs	r0, #2
 801d210:	2200      	movs	r2, #0
 801d212:	f7fa ffb8 	bl	8018186 <llhwc_lst_edit_indicators>
 801d216:	f897 0036 	ldrb.w	r0, [r7, #54]	@ 0x36
 801d21a:	b130      	cbz	r0, 801d22a <non_conn_mngr_scan_cbk+0x23e>
 801d21c:	3801      	subs	r0, #1
 801d21e:	fab0 f080 	clz	r0, r0
 801d222:	0940      	lsrs	r0, r0, #5
 801d224:	4030      	ands	r0, r6
 801d226:	f000 80c6 	beq.w	801d3b6 <non_conn_mngr_scan_cbk+0x3ca>
 801d22a:	f89d 1042 	ldrb.w	r1, [sp, #66]	@ 0x42
 801d22e:	aa0a      	add	r2, sp, #40	@ 0x28
 801d230:	f10d 036b 	add.w	r3, sp, #107	@ 0x6b
 801d234:	2002      	movs	r0, #2
 801d236:	f7fa fd70 	bl	8017d1a <llhwc_lst_search>
 801d23a:	2800      	cmp	r0, #0
 801d23c:	f040 8101 	bne.w	801d442 <non_conn_mngr_scan_cbk+0x456>
 801d240:	f89d 006b 	ldrb.w	r0, [sp, #107]	@ 0x6b
 801d244:	07c0      	lsls	r0, r0, #31
 801d246:	f000 8097 	beq.w	801d378 <non_conn_mngr_scan_cbk+0x38c>
 801d24a:	f89d 2042 	ldrb.w	r2, [sp, #66]	@ 0x42
 801d24e:	e00a      	b.n	801d266 <non_conn_mngr_scan_cbk+0x27a>
 801d250:	f04f 0a01 	mov.w	sl, #1
 801d254:	e0b3      	b.n	801d3be <non_conn_mngr_scan_cbk+0x3d2>
 801d256:	b130      	cbz	r0, 801d266 <non_conn_mngr_scan_cbk+0x27a>
 801d258:	3801      	subs	r0, #1
 801d25a:	fab0 f080 	clz	r0, r0
 801d25e:	0940      	lsrs	r0, r0, #5
 801d260:	4030      	ands	r0, r6
 801d262:	f000 80a8 	beq.w	801d3b6 <non_conn_mngr_scan_cbk+0x3ca>
 801d266:	2700      	movs	r7, #0
 801d268:	ab0a      	add	r3, sp, #40	@ 0x28
 801d26a:	2000      	movs	r0, #0
 801d26c:	2102      	movs	r1, #2
 801d26e:	9700      	str	r7, [sp, #0]
 801d270:	f7fa fdf6 	bl	8017e60 <llhwc_lst_add_rmv_dev>
 801d274:	2800      	cmp	r0, #0
 801d276:	f000 809e 	beq.w	801d3b6 <non_conn_mngr_scan_cbk+0x3ca>
 801d27a:	2807      	cmp	r0, #7
 801d27c:	f040 80e1 	bne.w	801d442 <non_conn_mngr_scan_cbk+0x456>
 801d280:	2002      	movs	r0, #2
 801d282:	f7ff fd7d 	bl	801cd80 <non_conn_mngr_remove_random_addr_list>
 801d286:	2800      	cmp	r0, #0
 801d288:	f040 80db 	bne.w	801d442 <non_conn_mngr_scan_cbk+0x456>
 801d28c:	f89d 2042 	ldrb.w	r2, [sp, #66]	@ 0x42
 801d290:	2700      	movs	r7, #0
 801d292:	ab0a      	add	r3, sp, #40	@ 0x28
 801d294:	2000      	movs	r0, #0
 801d296:	2102      	movs	r1, #2
 801d298:	9700      	str	r7, [sp, #0]
 801d29a:	f7fa fde1 	bl	8017e60 <llhwc_lst_add_rmv_dev>
 801d29e:	2800      	cmp	r0, #0
 801d2a0:	f040 80cf 	bne.w	801d442 <non_conn_mngr_scan_cbk+0x456>
 801d2a4:	e087      	b.n	801d3b6 <non_conn_mngr_scan_cbk+0x3ca>
 801d2a6:	f89d 0042 	ldrb.w	r0, [sp, #66]	@ 0x42
 801d2aa:	f89b 103c 	ldrb.w	r1, [fp, #60]	@ 0x3c
 801d2ae:	f000 0201 	and.w	r2, r0, #1
 801d2b2:	f10b 062a 	add.w	r6, fp, #42	@ 0x2a
 801d2b6:	2000      	movs	r0, #0
 801d2b8:	2501      	movs	r5, #1
 801d2ba:	fa0a f900 	lsl.w	r9, sl, r0
 801d2be:	4607      	mov	r7, r0
 801d2c0:	ea19 0f01 	tst.w	r9, r1
 801d2c4:	d013      	beq.n	801d2ee <non_conn_mngr_scan_cbk+0x302>
 801d2c6:	f89b 003d 	ldrb.w	r0, [fp, #61]	@ 0x3d
 801d2ca:	40f8      	lsrs	r0, r7
 801d2cc:	f000 0001 	and.w	r0, r0, #1
 801d2d0:	4290      	cmp	r0, r2
 801d2d2:	d10c      	bne.n	801d2ee <non_conn_mngr_scan_cbk+0x302>
 801d2d4:	4692      	mov	sl, r2
 801d2d6:	a80a      	add	r0, sp, #40	@ 0x28
 801d2d8:	4631      	mov	r1, r6
 801d2da:	2206      	movs	r2, #6
 801d2dc:	f007 f9bc 	bl	8024658 <ble_memcmp>
 801d2e0:	f89b 103c 	ldrb.w	r1, [fp, #60]	@ 0x3c
 801d2e4:	2800      	cmp	r0, #0
 801d2e6:	d03e      	beq.n	801d366 <non_conn_mngr_scan_cbk+0x37a>
 801d2e8:	4652      	mov	r2, sl
 801d2ea:	f04f 0a01 	mov.w	sl, #1
 801d2ee:	1c78      	adds	r0, r7, #1
 801d2f0:	2f02      	cmp	r7, #2
 801d2f2:	f04f 0500 	mov.w	r5, #0
 801d2f6:	bf38      	it	cc
 801d2f8:	2501      	movcc	r5, #1
 801d2fa:	2803      	cmp	r0, #3
 801d2fc:	f106 0606 	add.w	r6, r6, #6
 801d300:	d1db      	bne.n	801d2ba <non_conn_mngr_scan_cbk+0x2ce>
 801d302:	f1b4 0a01 	subs.w	sl, r4, #1
 801d306:	bf18      	it	ne
 801d308:	f04f 0a01 	movne.w	sl, #1
 801d30c:	2c01      	cmp	r4, #1
 801d30e:	d14d      	bne.n	801d3ac <non_conn_mngr_scan_cbk+0x3c0>
 801d310:	2f02      	cmp	r7, #2
 801d312:	ad0a      	add	r5, sp, #40	@ 0x28
 801d314:	f04f 0601 	mov.w	r6, #1
 801d318:	d34a      	bcc.n	801d3b0 <non_conn_mngr_scan_cbk+0x3c4>
 801d31a:	2000      	movs	r0, #0
 801d31c:	2701      	movs	r7, #1
 801d31e:	fa07 f300 	lsl.w	r3, r7, r0
 801d322:	420b      	tst	r3, r1
 801d324:	d02b      	beq.n	801d37e <non_conn_mngr_scan_cbk+0x392>
 801d326:	3001      	adds	r0, #1
 801d328:	2803      	cmp	r0, #3
 801d32a:	d1f8      	bne.n	801d31e <non_conn_mngr_scan_cbk+0x332>
 801d32c:	a805      	add	r0, sp, #20
 801d32e:	2101      	movs	r1, #1
 801d330:	4617      	mov	r7, r2
 801d332:	f04f 0901 	mov.w	r9, #1
 801d336:	f7fa ff02 	bl	801813e <llhwc_gen_rnd_num>
 801d33a:	0600      	lsls	r0, r0, #24
 801d33c:	f040 8081 	bne.w	801d442 <non_conn_mngr_scan_cbk+0x456>
 801d340:	9805      	ldr	r0, [sp, #20]
 801d342:	f64a 21ab 	movw	r1, #43691	@ 0xaaab
 801d346:	f6ca 21aa 	movt	r1, #43690	@ 0xaaaa
 801d34a:	fba0 1201 	umull	r1, r2, r0, r1
 801d34e:	0851      	lsrs	r1, r2, #1
 801d350:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801d354:	1a40      	subs	r0, r0, r1
 801d356:	f89b 103d 	ldrb.w	r1, [fp, #61]	@ 0x3d
 801d35a:	fa09 f200 	lsl.w	r2, r9, r0
 801d35e:	4391      	bics	r1, r2
 801d360:	463a      	mov	r2, r7
 801d362:	9005      	str	r0, [sp, #20]
 801d364:	e012      	b.n	801d38c <non_conn_mngr_scan_cbk+0x3a0>
 801d366:	2c01      	cmp	r4, #1
 801d368:	f040 8086 	bne.w	801d478 <non_conn_mngr_scan_cbk+0x48c>
 801d36c:	07e8      	lsls	r0, r5, #31
 801d36e:	ad0a      	add	r5, sp, #40	@ 0x28
 801d370:	f04f 0601 	mov.w	r6, #1
 801d374:	4652      	mov	r2, sl
 801d376:	d0d0      	beq.n	801d31a <non_conn_mngr_scan_cbk+0x32e>
 801d378:	f04f 0a00 	mov.w	sl, #0
 801d37c:	e01b      	b.n	801d3b6 <non_conn_mngr_scan_cbk+0x3ca>
 801d37e:	f89b 703d 	ldrb.w	r7, [fp, #61]	@ 0x3d
 801d382:	4319      	orrs	r1, r3
 801d384:	f88b 103c 	strb.w	r1, [fp, #60]	@ 0x3c
 801d388:	ea27 0103 	bic.w	r1, r7, r3
 801d38c:	4082      	lsls	r2, r0
 801d38e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801d392:	4311      	orrs	r1, r2
 801d394:	eb0b 0040 	add.w	r0, fp, r0, lsl #1
 801d398:	f88b 103d 	strb.w	r1, [fp, #61]	@ 0x3d
 801d39c:	302a      	adds	r0, #42	@ 0x2a
 801d39e:	a90a      	add	r1, sp, #40	@ 0x28
 801d3a0:	2206      	movs	r2, #6
 801d3a2:	f007 f8d1 	bl	8024548 <ble_memcpy>
 801d3a6:	f04f 0a01 	mov.w	sl, #1
 801d3aa:	e001      	b.n	801d3b0 <non_conn_mngr_scan_cbk+0x3c4>
 801d3ac:	ad0a      	add	r5, sp, #40	@ 0x28
 801d3ae:	2601      	movs	r6, #1
 801d3b0:	2c01      	cmp	r4, #1
 801d3b2:	f47f aefe 	bne.w	801d1b2 <non_conn_mngr_scan_cbk+0x1c6>
 801d3b6:	f646 7350 	movw	r3, #28496	@ 0x6f50
 801d3ba:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 801d3be:	f893 0037 	ldrb.w	r0, [r3, #55]	@ 0x37
 801d3c2:	2801      	cmp	r0, #1
 801d3c4:	d129      	bne.n	801d41a <non_conn_mngr_scan_cbk+0x42e>
 801d3c6:	f89d 0042 	ldrb.w	r0, [sp, #66]	@ 0x42
 801d3ca:	f89d 1040 	ldrb.w	r1, [sp, #64]	@ 0x40
 801d3ce:	f88d 0026 	strb.w	r0, [sp, #38]	@ 0x26
 801d3d2:	2001      	movs	r0, #1
 801d3d4:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 801d3d8:	ad05      	add	r5, sp, #20
 801d3da:	9903      	ldr	r1, [sp, #12]
 801d3dc:	f88d 0027 	strb.w	r0, [sp, #39]	@ 0x27
 801d3e0:	f88d 0025 	strb.w	r0, [sp, #37]	@ 0x25
 801d3e4:	f105 0008 	add.w	r0, r5, #8
 801d3e8:	2206      	movs	r2, #6
 801d3ea:	f007 f8ad 	bl	8024548 <ble_memcpy>
 801d3ee:	a90a      	add	r1, sp, #40	@ 0x28
 801d3f0:	4628      	mov	r0, r5
 801d3f2:	2206      	movs	r2, #6
 801d3f4:	f007 f8a8 	bl	8024548 <ble_memcpy>
 801d3f8:	f646 5038 	movw	r0, #27960	@ 0x6d38
 801d3fc:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801d400:	6800      	ldr	r0, [r0, #0]
 801d402:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 801d404:	b109      	cbz	r1, 801d40a <non_conn_mngr_scan_cbk+0x41e>
 801d406:	a805      	add	r0, sp, #20
 801d408:	4788      	blx	r1
 801d40a:	f646 7150 	movw	r1, #28496	@ 0x6f50
 801d40e:	2000      	movs	r0, #0
 801d410:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 801d414:	f881 0037 	strb.w	r0, [r1, #55]	@ 0x37
 801d418:	e013      	b.n	801d442 <non_conn_mngr_scan_cbk+0x456>
 801d41a:	f646 5038 	movw	r0, #27960	@ 0x6d38
 801d41e:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801d422:	6800      	ldr	r0, [r0, #0]
 801d424:	6a02      	ldr	r2, [r0, #32]
 801d426:	b162      	cbz	r2, 801d442 <non_conn_mngr_scan_cbk+0x456>
 801d428:	f1ba 0f02 	cmp.w	sl, #2
 801d42c:	d005      	beq.n	801d43a <non_conn_mngr_scan_cbk+0x44e>
 801d42e:	f1ba 0f01 	cmp.w	sl, #1
 801d432:	d106      	bne.n	801d442 <non_conn_mngr_scan_cbk+0x456>
 801d434:	a80a      	add	r0, sp, #40	@ 0x28
 801d436:	4621      	mov	r1, r4
 801d438:	e002      	b.n	801d440 <non_conn_mngr_scan_cbk+0x454>
 801d43a:	f105 001c 	add.w	r0, r5, #28
 801d43e:	2101      	movs	r1, #1
 801d440:	4790      	blx	r2
 801d442:	f898 0024 	ldrb.w	r0, [r8, #36]	@ 0x24
 801d446:	2801      	cmp	r0, #1
 801d448:	d106      	bne.n	801d458 <non_conn_mngr_scan_cbk+0x46c>
 801d44a:	f646 6050 	movw	r0, #28240	@ 0x6e50
 801d44e:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801d452:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 801d454:	f7f5 fc26 	bl	8012ca4 <evnt_schdlr_evnt_updtd>
 801d458:	b144      	cbz	r4, 801d46c <non_conn_mngr_scan_cbk+0x480>
 801d45a:	ad18      	add	r5, sp, #96	@ 0x60
 801d45c:	6828      	ldr	r0, [r5, #0]
 801d45e:	b108      	cbz	r0, 801d464 <non_conn_mngr_scan_cbk+0x478>
 801d460:	f001 fa03 	bl	801e86a <free_buff_hdr>
 801d464:	3c01      	subs	r4, #1
 801d466:	f105 0504 	add.w	r5, r5, #4
 801d46a:	d1f7      	bne.n	801d45c <non_conn_mngr_scan_cbk+0x470>
 801d46c:	207f      	movs	r0, #127	@ 0x7f
 801d46e:	f002 fa21 	bl	801f8b4 <bsp_debug_gpio_clear>
 801d472:	b01b      	add	sp, #108	@ 0x6c
 801d474:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d478:	07e8      	lsls	r0, r5, #31
 801d47a:	bf0f      	iteee	eq
 801d47c:	f04f 0a01 	moveq.w	sl, #1
 801d480:	ea21 0009 	bicne.w	r0, r1, r9
 801d484:	f88b 003c 	strbne.w	r0, [fp, #60]	@ 0x3c
 801d488:	f04f 0a02 	movne.w	sl, #2
 801d48c:	ad0a      	add	r5, sp, #40	@ 0x28
 801d48e:	2601      	movs	r6, #1
 801d490:	e68f      	b.n	801d1b2 <non_conn_mngr_scan_cbk+0x1c6>

0801d492 <non_conn_mngr_remove_conditional_event>:
 801d492:	b510      	push	{r4, lr}
 801d494:	6802      	ldr	r2, [r0, #0]
 801d496:	780b      	ldrb	r3, [r1, #0]
 801d498:	8944      	ldrh	r4, [r0, #10]
 801d49a:	2b02      	cmp	r3, #2
 801d49c:	4422      	add	r2, r4
 801d49e:	d013      	beq.n	801d4c8 <non_conn_mngr_remove_conditional_event+0x36>
 801d4a0:	2b01      	cmp	r3, #1
 801d4a2:	d008      	beq.n	801d4b6 <non_conn_mngr_remove_conditional_event+0x24>
 801d4a4:	b9ab      	cbnz	r3, 801d4d2 <non_conn_mngr_remove_conditional_event+0x40>
 801d4a6:	7813      	ldrb	r3, [r2, #0]
 801d4a8:	7852      	ldrb	r2, [r2, #1]
 801d4aa:	8849      	ldrh	r1, [r1, #2]
 801d4ac:	f362 230b 	bfi	r3, r2, #8, #4
 801d4b0:	428b      	cmp	r3, r1
 801d4b2:	d005      	beq.n	801d4c0 <non_conn_mngr_remove_conditional_event+0x2e>
 801d4b4:	e00b      	b.n	801d4ce <non_conn_mngr_remove_conditional_event+0x3c>
 801d4b6:	7891      	ldrb	r1, [r2, #2]
 801d4b8:	2902      	cmp	r1, #2
 801d4ba:	d001      	beq.n	801d4c0 <non_conn_mngr_remove_conditional_event+0x2e>
 801d4bc:	290b      	cmp	r1, #11
 801d4be:	d106      	bne.n	801d4ce <non_conn_mngr_remove_conditional_event+0x3c>
 801d4c0:	f7f7 fb8e 	bl	8014be0 <ll_intf_free_ll_pkt_hndlr>
 801d4c4:	2401      	movs	r4, #1
 801d4c6:	e009      	b.n	801d4dc <non_conn_mngr_remove_conditional_event+0x4a>
 801d4c8:	7891      	ldrb	r1, [r2, #2]
 801d4ca:	290d      	cmp	r1, #13
 801d4cc:	d0f8      	beq.n	801d4c0 <non_conn_mngr_remove_conditional_event+0x2e>
 801d4ce:	2400      	movs	r4, #0
 801d4d0:	e004      	b.n	801d4dc <non_conn_mngr_remove_conditional_event+0x4a>
 801d4d2:	2000      	movs	r0, #0
 801d4d4:	2101      	movs	r1, #1
 801d4d6:	2400      	movs	r4, #0
 801d4d8:	f002 f9a3 	bl	801f822 <bsp_assert>
 801d4dc:	4620      	mov	r0, r4
 801d4de:	bd10      	pop	{r4, pc}

0801d4e0 <non_conn_mngr_set_adv_params>:
 801d4e0:	b5b0      	push	{r4, r5, r7, lr}
 801d4e2:	b330      	cbz	r0, 801d532 <non_conn_mngr_set_adv_params+0x52>
 801d4e4:	f646 65a8 	movw	r5, #28328	@ 0x6ea8
 801d4e8:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 801d4ec:	4601      	mov	r1, r0
 801d4ee:	f895 0034 	ldrb.w	r0, [r5, #52]	@ 0x34
 801d4f2:	b300      	cbz	r0, 801d536 <non_conn_mngr_set_adv_params+0x56>
 801d4f4:	7c48      	ldrb	r0, [r1, #17]
 801d4f6:	f105 0408 	add.w	r4, r5, #8
 801d4fa:	2804      	cmp	r0, #4
 801d4fc:	bf12      	itee	ne
 801d4fe:	2801      	cmpne	r0, #1
 801d500:	2000      	moveq	r0, #0
 801d502:	7708      	strbeq	r0, [r1, #28]
 801d504:	2220      	movs	r2, #32
 801d506:	4620      	mov	r0, r4
 801d508:	f007 f81e 	bl	8024548 <ble_memcpy>
 801d50c:	7ea8      	ldrb	r0, [r5, #26]
 801d50e:	f895 2023 	ldrb.w	r2, [r5, #35]	@ 0x23
 801d512:	f895 3024 	ldrb.w	r3, [r5, #36]	@ 0x24
 801d516:	f105 011b 	add.w	r1, r5, #27
 801d51a:	f885 2030 	strb.w	r2, [r5, #48]	@ 0x30
 801d51e:	f885 0031 	strb.w	r0, [r5, #49]	@ 0x31
 801d522:	4620      	mov	r0, r4
 801d524:	2206      	movs	r2, #6
 801d526:	f885 3032 	strb.w	r3, [r5, #50]	@ 0x32
 801d52a:	f007 f80d 	bl	8024548 <ble_memcpy>
 801d52e:	2000      	movs	r0, #0
 801d530:	bdb0      	pop	{r4, r5, r7, pc}
 801d532:	2012      	movs	r0, #18
 801d534:	bdb0      	pop	{r4, r5, r7, pc}
 801d536:	2043      	movs	r0, #67	@ 0x43
 801d538:	f002 f9be 	bl	801f8b8 <bsp_debug_gpio_toggle>
 801d53c:	200c      	movs	r0, #12
 801d53e:	bdb0      	pop	{r4, r5, r7, pc}

0801d540 <non_conn_mngr_set_adv_data>:
 801d540:	b570      	push	{r4, r5, r6, lr}
 801d542:	b330      	cbz	r0, 801d592 <non_conn_mngr_set_adv_data+0x52>
 801d544:	f646 64a8 	movw	r4, #28328	@ 0x6ea8
 801d548:	f2c2 0400 	movt	r4, #8192	@ 0x2000
 801d54c:	4605      	mov	r5, r0
 801d54e:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 801d550:	460e      	mov	r6, r1
 801d552:	b930      	cbnz	r0, 801d562 <non_conn_mngr_set_adv_data+0x22>
 801d554:	f649 604c 	movw	r0, #40524	@ 0x9e4c
 801d558:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801d55c:	f004 fa72 	bl	8021a44 <os_shrd_mem_alloc>
 801d560:	63a0      	str	r0, [r4, #56]	@ 0x38
 801d562:	f894 1037 	ldrb.w	r1, [r4, #55]	@ 0x37
 801d566:	2004      	movs	r0, #4
 801d568:	f8a4 0042 	strh.w	r0, [r4, #66]	@ 0x42
 801d56c:	07c8      	lsls	r0, r1, #31
 801d56e:	f8a4 6048 	strh.w	r6, [r4, #72]	@ 0x48
 801d572:	f8a4 6044 	strh.w	r6, [r4, #68]	@ 0x44
 801d576:	d10e      	bne.n	801d596 <non_conn_mngr_set_adv_data+0x56>
 801d578:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 801d57a:	f8b4 1042 	ldrh.w	r1, [r4, #66]	@ 0x42
 801d57e:	4632      	mov	r2, r6
 801d580:	4408      	add	r0, r1
 801d582:	4629      	mov	r1, r5
 801d584:	f006 ffe0 	bl	8024548 <ble_memcpy>
 801d588:	f894 0034 	ldrb.w	r0, [r4, #52]	@ 0x34
 801d58c:	b3a8      	cbz	r0, 801d5fa <non_conn_mngr_set_adv_data+0xba>
 801d58e:	2000      	movs	r0, #0
 801d590:	e032      	b.n	801d5f8 <non_conn_mngr_set_adv_data+0xb8>
 801d592:	2012      	movs	r0, #18
 801d594:	bd70      	pop	{r4, r5, r6, pc}
 801d596:	f894 0030 	ldrb.w	r0, [r4, #48]	@ 0x30
 801d59a:	f000 00fe 	and.w	r0, r0, #254	@ 0xfe
 801d59e:	2802      	cmp	r0, #2
 801d5a0:	d11c      	bne.n	801d5dc <non_conn_mngr_set_adv_data+0x9c>
 801d5a2:	f104 0108 	add.w	r1, r4, #8
 801d5a6:	2000      	movs	r0, #0
 801d5a8:	4622      	mov	r2, r4
 801d5aa:	f001 ff34 	bl	801f416 <prvcy_mngr_RPA_Regeneration>
 801d5ae:	bb18      	cbnz	r0, 801d5f8 <non_conn_mngr_set_adv_data+0xb8>
 801d5b0:	f646 7050 	movw	r0, #28496	@ 0x6f50
 801d5b4:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801d5b8:	f890 0038 	ldrb.w	r0, [r0, #56]	@ 0x38
 801d5bc:	f646 718c 	movw	r1, #28556	@ 0x6f8c
 801d5c0:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801d5c4:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 801d5c8:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 801d5cc:	f646 61a8 	movw	r1, #28328	@ 0x6ea8
 801d5d0:	3008      	adds	r0, #8
 801d5d2:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 801d5d6:	2206      	movs	r2, #6
 801d5d8:	f006 ffb6 	bl	8024548 <ble_memcpy>
 801d5dc:	7e60      	ldrb	r0, [r4, #25]
 801d5de:	2804      	cmp	r0, #4
 801d5e0:	bf18      	it	ne
 801d5e2:	2801      	cmpne	r0, #1
 801d5e4:	d1c8      	bne.n	801d578 <non_conn_mngr_set_adv_data+0x38>
 801d5e6:	f104 0108 	add.w	r1, r4, #8
 801d5ea:	f104 021b 	add.w	r2, r4, #27
 801d5ee:	2001      	movs	r0, #1
 801d5f0:	f001 ff11 	bl	801f416 <prvcy_mngr_RPA_Regeneration>
 801d5f4:	2800      	cmp	r0, #0
 801d5f6:	d0bf      	beq.n	801d578 <non_conn_mngr_set_adv_data+0x38>
 801d5f8:	bd70      	pop	{r4, r5, r6, pc}
 801d5fa:	f104 0008 	add.w	r0, r4, #8
 801d5fe:	f104 0338 	add.w	r3, r4, #56	@ 0x38
 801d602:	2100      	movs	r1, #0
 801d604:	2200      	movs	r2, #0
 801d606:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801d60a:	f000 bbd3 	b.w	801ddb4 <pdu_trnsprt_hndlr_form_nconn_adv>
	...

0801d610 <non_conn_mngr_adv_enable>:
 801d610:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d614:	b088      	sub	sp, #32
 801d616:	f646 64a8 	movw	r4, #28328	@ 0x6ea8
 801d61a:	f2c2 0400 	movt	r4, #8192	@ 0x2000
 801d61e:	f894 2030 	ldrb.w	r2, [r4, #48]	@ 0x30
 801d622:	f894 3031 	ldrb.w	r3, [r4, #49]	@ 0x31
 801d626:	f894 7032 	ldrb.w	r7, [r4, #50]	@ 0x32
 801d62a:	4606      	mov	r6, r0
 801d62c:	f104 001b 	add.w	r0, r4, #27
 801d630:	f104 0108 	add.w	r1, r4, #8
 801d634:	f894 8023 	ldrb.w	r8, [r4, #35]	@ 0x23
 801d638:	2500      	movs	r5, #0
 801d63a:	f884 2023 	strb.w	r2, [r4, #35]	@ 0x23
 801d63e:	2206      	movs	r2, #6
 801d640:	9507      	str	r5, [sp, #28]
 801d642:	e9cd 5505 	strd	r5, r5, [sp, #20]
 801d646:	e9cd 5503 	strd	r5, r5, [sp, #12]
 801d64a:	f884 7024 	strb.w	r7, [r4, #36]	@ 0x24
 801d64e:	76a3      	strb	r3, [r4, #26]
 801d650:	f006 ff7a 	bl	8024548 <ble_memcpy>
 801d654:	f104 0035 	add.w	r0, r4, #53	@ 0x35
 801d658:	f008 fe48 	bl	80262ec <db_get_tx_power_value>
 801d65c:	f894 1023 	ldrb.w	r1, [r4, #35]	@ 0x23
 801d660:	f001 00fe 	and.w	r0, r1, #254	@ 0xfe
 801d664:	2802      	cmp	r0, #2
 801d666:	f646 7050 	movw	r0, #28496	@ 0x6f50
 801d66a:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801d66e:	bf04      	itt	eq
 801d670:	f1a1 0802 	subeq.w	r8, r1, #2
 801d674:	f880 8027 	strbeq.w	r8, [r0, #39]	@ 0x27
 801d678:	f890 2036 	ldrb.w	r2, [r0, #54]	@ 0x36
 801d67c:	f894 1024 	ldrb.w	r1, [r4, #36]	@ 0x24
 801d680:	2a01      	cmp	r2, #1
 801d682:	f884 1033 	strb.w	r1, [r4, #51]	@ 0x33
 801d686:	f880 1034 	strb.w	r1, [r0, #52]	@ 0x34
 801d68a:	d108      	bne.n	801d69e <non_conn_mngr_adv_enable+0x8e>
 801d68c:	2903      	cmp	r1, #3
 801d68e:	d003      	beq.n	801d698 <non_conn_mngr_adv_enable+0x88>
 801d690:	2901      	cmp	r1, #1
 801d692:	d104      	bne.n	801d69e <non_conn_mngr_adv_enable+0x8e>
 801d694:	2002      	movs	r0, #2
 801d696:	e000      	b.n	801d69a <non_conn_mngr_adv_enable+0x8a>
 801d698:	2000      	movs	r0, #0
 801d69a:	f884 0024 	strb.w	r0, [r4, #36]	@ 0x24
 801d69e:	7e60      	ldrb	r0, [r4, #25]
 801d6a0:	2804      	cmp	r0, #4
 801d6a2:	d813      	bhi.n	801d6cc <non_conn_mngr_adv_enable+0xbc>
 801d6a4:	2500      	movs	r5, #0
 801d6a6:	f04f 0901 	mov.w	r9, #1
 801d6aa:	f04f 0a00 	mov.w	sl, #0
 801d6ae:	2701      	movs	r7, #1
 801d6b0:	e8df f000 	tbb	[pc, r0]
 801d6b4:	120e0318 	.word	0x120e0318
 801d6b8:	0005      	.short	0x0005
 801d6ba:	2006      	movs	r0, #6
 801d6bc:	6160      	str	r0, [r4, #20]
 801d6be:	f04f 0a00 	mov.w	sl, #0
 801d6c2:	f04f 0902 	mov.w	r9, #2
 801d6c6:	2501      	movs	r5, #1
 801d6c8:	2701      	movs	r7, #1
 801d6ca:	e00b      	b.n	801d6e4 <non_conn_mngr_adv_enable+0xd4>
 801d6cc:	2711      	movs	r7, #17
 801d6ce:	e0d3      	b.n	801d878 <non_conn_mngr_adv_enable+0x268>
 801d6d0:	2500      	movs	r5, #0
 801d6d2:	f04f 0908 	mov.w	r9, #8
 801d6d6:	e002      	b.n	801d6de <non_conn_mngr_adv_enable+0xce>
 801d6d8:	2500      	movs	r5, #0
 801d6da:	f04f 0904 	mov.w	r9, #4
 801d6de:	2702      	movs	r7, #2
 801d6e0:	f04f 0a00 	mov.w	sl, #0
 801d6e4:	b12e      	cbz	r6, 801d6f2 <non_conn_mngr_adv_enable+0xe2>
 801d6e6:	f894 0034 	ldrb.w	r0, [r4, #52]	@ 0x34
 801d6ea:	2801      	cmp	r0, #1
 801d6ec:	d109      	bne.n	801d702 <non_conn_mngr_adv_enable+0xf2>
 801d6ee:	2700      	movs	r7, #0
 801d6f0:	e0c2      	b.n	801d878 <non_conn_mngr_adv_enable+0x268>
 801d6f2:	f7fa fe3f 	bl	8018374 <llhwc_is_dtm_enabled>
 801d6f6:	b1c8      	cbz	r0, 801d72c <non_conn_mngr_adv_enable+0x11c>
 801d6f8:	2043      	movs	r0, #67	@ 0x43
 801d6fa:	f002 f8dd 	bl	801f8b8 <bsp_debug_gpio_toggle>
 801d6fe:	270c      	movs	r7, #12
 801d700:	e0ba      	b.n	801d878 <non_conn_mngr_adv_enable+0x268>
 801d702:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 801d704:	f7f5 f970 	bl	80129e8 <evnt_schdlr_unrgstr_evnt>
 801d708:	4607      	mov	r7, r0
 801d70a:	2800      	cmp	r0, #0
 801d70c:	f040 80b4 	bne.w	801d878 <non_conn_mngr_adv_enable+0x268>
 801d710:	2100      	movs	r1, #0
 801d712:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 801d714:	62e1      	str	r1, [r4, #44]	@ 0x2c
 801d716:	2100      	movs	r1, #0
 801d718:	f002 f80a 	bl	801f730 <state_mngr_update_state>
 801d71c:	4607      	mov	r7, r0
 801d71e:	2800      	cmp	r0, #0
 801d720:	f040 80aa 	bne.w	801d878 <non_conn_mngr_adv_enable+0x268>
 801d724:	2001      	movs	r0, #1
 801d726:	f884 0034 	strb.w	r0, [r4, #52]	@ 0x34
 801d72a:	e7e0      	b.n	801d6ee <non_conn_mngr_adv_enable+0xde>
 801d72c:	f894 0034 	ldrb.w	r0, [r4, #52]	@ 0x34
 801d730:	2800      	cmp	r0, #0
 801d732:	d0dc      	beq.n	801d6ee <non_conn_mngr_adv_enable+0xde>
 801d734:	4638      	mov	r0, r7
 801d736:	f001 ff83 	bl	801f640 <state_mngr_alloc_state_mchn>
 801d73a:	62a0      	str	r0, [r4, #40]	@ 0x28
 801d73c:	b3b0      	cbz	r0, 801d7ac <non_conn_mngr_adv_enable+0x19c>
 801d73e:	f646 66a8 	movw	r6, #28328	@ 0x6ea8
 801d742:	f2c2 0600 	movt	r6, #8192	@ 0x2000
 801d746:	fa5f f088 	uxtb.w	r0, r8
 801d74a:	4631      	mov	r1, r6
 801d74c:	f008 fd6d 	bl	802622a <db_get_src_address>
 801d750:	4607      	mov	r7, r0
 801d752:	2800      	cmp	r0, #0
 801d754:	f040 8090 	bne.w	801d878 <non_conn_mngr_adv_enable+0x268>
 801d758:	f896 0023 	ldrb.w	r0, [r6, #35]	@ 0x23
 801d75c:	f000 00fe 	and.w	r0, r0, #254	@ 0xfe
 801d760:	2802      	cmp	r0, #2
 801d762:	d108      	bne.n	801d776 <non_conn_mngr_adv_enable+0x166>
 801d764:	f106 0008 	add.w	r0, r6, #8
 801d768:	4631      	mov	r1, r6
 801d76a:	f001 fdd7 	bl	801f31c <prvcy_mngr_get_local_rpa>
 801d76e:	b910      	cbnz	r0, 801d776 <non_conn_mngr_adv_enable+0x166>
 801d770:	2001      	movs	r0, #1
 801d772:	f886 0023 	strb.w	r0, [r6, #35]	@ 0x23
 801d776:	b33d      	cbz	r5, 801d7c8 <non_conn_mngr_adv_enable+0x1b8>
 801d778:	f106 0708 	add.w	r7, r6, #8
 801d77c:	aa07      	add	r2, sp, #28
 801d77e:	2001      	movs	r0, #1
 801d780:	4639      	mov	r1, r7
 801d782:	2300      	movs	r3, #0
 801d784:	f001 fcc0 	bl	801f108 <prvcy_mngr_srch_fw_reslvng_list>
 801d788:	9807      	ldr	r0, [sp, #28]
 801d78a:	b1e8      	cbz	r0, 801d7c8 <non_conn_mngr_adv_enable+0x1b8>
 801d78c:	a903      	add	r1, sp, #12
 801d78e:	2210      	movs	r2, #16
 801d790:	f006 ff62 	bl	8024658 <ble_memcmp>
 801d794:	b1c0      	cbz	r0, 801d7c8 <non_conn_mngr_adv_enable+0x1b8>
 801d796:	f106 081b 	add.w	r8, r6, #27
 801d79a:	4638      	mov	r0, r7
 801d79c:	4641      	mov	r1, r8
 801d79e:	2206      	movs	r2, #6
 801d7a0:	f006 ff5a 	bl	8024658 <ble_memcmp>
 801d7a4:	b138      	cbz	r0, 801d7b6 <non_conn_mngr_adv_enable+0x1a6>
 801d7a6:	2001      	movs	r0, #1
 801d7a8:	76b0      	strb	r0, [r6, #26]
 801d7aa:	e00d      	b.n	801d7c8 <non_conn_mngr_adv_enable+0x1b8>
 801d7ac:	2042      	movs	r0, #66	@ 0x42
 801d7ae:	f002 f883 	bl	801f8b8 <bsp_debug_gpio_toggle>
 801d7b2:	2707      	movs	r7, #7
 801d7b4:	e060      	b.n	801d878 <non_conn_mngr_adv_enable+0x268>
 801d7b6:	9807      	ldr	r0, [sp, #28]
 801d7b8:	4641      	mov	r1, r8
 801d7ba:	f001 fddf 	bl	801f37c <prvcy_mngr_addr_gen>
 801d7be:	4607      	mov	r7, r0
 801d7c0:	2001      	movs	r0, #1
 801d7c2:	2f00      	cmp	r7, #0
 801d7c4:	76b0      	strb	r0, [r6, #26]
 801d7c6:	d157      	bne.n	801d878 <non_conn_mngr_adv_enable+0x268>
 801d7c8:	7e71      	ldrb	r1, [r6, #25]
 801d7ca:	2004      	movs	r0, #4
 801d7cc:	f8a6 0042 	strh.w	r0, [r6, #66]	@ 0x42
 801d7d0:	2901      	cmp	r1, #1
 801d7d2:	f04f 0000 	mov.w	r0, #0
 801d7d6:	bf1c      	itt	ne
 801d7d8:	2904      	cmpne	r1, #4
 801d7da:	f8b6 0048 	ldrhne.w	r0, [r6, #72]	@ 0x48
 801d7de:	6bb1      	ldr	r1, [r6, #56]	@ 0x38
 801d7e0:	f8a6 0044 	strh.w	r0, [r6, #68]	@ 0x44
 801d7e4:	b931      	cbnz	r1, 801d7f4 <non_conn_mngr_adv_enable+0x1e4>
 801d7e6:	f649 604c 	movw	r0, #40524	@ 0x9e4c
 801d7ea:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801d7ee:	f004 f929 	bl	8021a44 <os_shrd_mem_alloc>
 801d7f2:	63b0      	str	r0, [r6, #56]	@ 0x38
 801d7f4:	f106 0008 	add.w	r0, r6, #8
 801d7f8:	f106 0338 	add.w	r3, r6, #56	@ 0x38
 801d7fc:	2100      	movs	r1, #0
 801d7fe:	2200      	movs	r2, #0
 801d800:	f000 fad8 	bl	801ddb4 <pdu_trnsprt_hndlr_form_nconn_adv>
 801d804:	4607      	mov	r7, r0
 801d806:	bbb8      	cbnz	r0, 801d878 <non_conn_mngr_adv_enable+0x268>
 801d808:	7e70      	ldrb	r0, [r6, #25]
 801d80a:	f010 0ffd 	tst.w	r0, #253	@ 0xfd
 801d80e:	d016      	beq.n	801d83e <non_conn_mngr_adv_enable+0x22e>
 801d810:	f64d 0381 	movw	r3, #55425	@ 0xd881
 801d814:	2700      	movs	r7, #0
 801d816:	4648      	mov	r0, r9
 801d818:	4651      	mov	r1, sl
 801d81a:	f6c0 0301 	movt	r3, #2049	@ 0x801
 801d81e:	4632      	mov	r2, r6
 801d820:	e9cd 7700 	strd	r7, r7, [sp]
 801d824:	9702      	str	r7, [sp, #8]
 801d826:	f7f4 fb3a 	bl	8011e9e <evnt_schdlr_rgstr_evnt>
 801d82a:	2101      	movs	r1, #1
 801d82c:	62f0      	str	r0, [r6, #44]	@ 0x2c
 801d82e:	2800      	cmp	r0, #0
 801d830:	bf18      	it	ne
 801d832:	2001      	movne	r0, #1
 801d834:	f001 fff5 	bl	801f822 <bsp_assert>
 801d838:	f886 7034 	strb.w	r7, [r6, #52]	@ 0x34
 801d83c:	e01c      	b.n	801d878 <non_conn_mngr_adv_enable+0x268>
 801d83e:	2004      	movs	r0, #4
 801d840:	f8a6 0056 	strh.w	r0, [r6, #86]	@ 0x56
 801d844:	6cf0      	ldr	r0, [r6, #76]	@ 0x4c
 801d846:	f8b6 105c 	ldrh.w	r1, [r6, #92]	@ 0x5c
 801d84a:	f8a6 1058 	strh.w	r1, [r6, #88]	@ 0x58
 801d84e:	b930      	cbnz	r0, 801d85e <non_conn_mngr_adv_enable+0x24e>
 801d850:	f649 604c 	movw	r0, #40524	@ 0x9e4c
 801d854:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801d858:	f004 f8f4 	bl	8021a44 <os_shrd_mem_alloc>
 801d85c:	64f0      	str	r0, [r6, #76]	@ 0x4c
 801d85e:	f896 0023 	ldrb.w	r0, [r6, #35]	@ 0x23
 801d862:	2700      	movs	r7, #0
 801d864:	f106 014c 	add.w	r1, r6, #76	@ 0x4c
 801d868:	2204      	movs	r2, #4
 801d86a:	2300      	movs	r3, #0
 801d86c:	9700      	str	r7, [sp, #0]
 801d86e:	f000 fc1f 	bl	801e0b0 <pdu_trnsprt_hndlr_form_nconn_scan>
 801d872:	4607      	mov	r7, r0
 801d874:	2800      	cmp	r0, #0
 801d876:	d0cb      	beq.n	801d810 <non_conn_mngr_adv_enable+0x200>
 801d878:	4638      	mov	r0, r7
 801d87a:	b008      	add	sp, #32
 801d87c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0801d880 <non_conn_mngr_adv_cbk>:
 801d880:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801d884:	b09b      	sub	sp, #108	@ 0x6c
 801d886:	f891 702b 	ldrb.w	r7, [r1, #43]	@ 0x2b
 801d88a:	2080      	movs	r0, #128	@ 0x80
 801d88c:	460c      	mov	r4, r1
 801d88e:	f002 f80f 	bl	801f8b0 <bsp_debug_gpio_set>
 801d892:	4620      	mov	r0, r4
 801d894:	2101      	movs	r1, #1
 801d896:	2c00      	cmp	r4, #0
 801d898:	bf18      	it	ne
 801d89a:	2001      	movne	r0, #1
 801d89c:	f001 ffc1 	bl	801f822 <bsp_assert>
 801d8a0:	a80d      	add	r0, sp, #52	@ 0x34
 801d8a2:	2100      	movs	r1, #0
 801d8a4:	2238      	movs	r2, #56	@ 0x38
 801d8a6:	f006 fe9f 	bl	80245e8 <ble_memset>
 801d8aa:	f894 0020 	ldrb.w	r0, [r4, #32]
 801d8ae:	2800      	cmp	r0, #0
 801d8b0:	d044      	beq.n	801d93c <non_conn_mngr_adv_cbk+0xbc>
 801d8b2:	2801      	cmp	r0, #1
 801d8b4:	f040 8157 	bne.w	801db66 <non_conn_mngr_adv_cbk+0x2e6>
 801d8b8:	68a0      	ldr	r0, [r4, #8]
 801d8ba:	f000 fb75 	bl	801dfa8 <pdu_trnsprt_hndlr_get_pdu_type>
 801d8be:	4606      	mov	r6, r0
 801d8c0:	2803      	cmp	r0, #3
 801d8c2:	d16d      	bne.n	801d9a0 <non_conn_mngr_adv_cbk+0x120>
 801d8c4:	f646 69a8 	movw	r9, #28328	@ 0x6ea8
 801d8c8:	f2c2 0900 	movt	r9, #8192	@ 0x2000
 801d8cc:	f899 0019 	ldrb.w	r0, [r9, #25]
 801d8d0:	f646 7550 	movw	r5, #28496	@ 0x6f50
 801d8d4:	1e41      	subs	r1, r0, #1
 801d8d6:	3804      	subs	r0, #4
 801d8d8:	fab1 f181 	clz	r1, r1
 801d8dc:	fab0 f080 	clz	r0, r0
 801d8e0:	0949      	lsrs	r1, r1, #5
 801d8e2:	0940      	lsrs	r0, r0, #5
 801d8e4:	4308      	orrs	r0, r1
 801d8e6:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 801d8ea:	2f00      	cmp	r7, #0
 801d8ec:	f885 0028 	strb.w	r0, [r5, #40]	@ 0x28
 801d8f0:	d074      	beq.n	801d9dc <non_conn_mngr_adv_cbk+0x15c>
 801d8f2:	2f01      	cmp	r7, #1
 801d8f4:	f040 809a 	bne.w	801da2c <non_conn_mngr_adv_cbk+0x1ac>
 801d8f8:	2e03      	cmp	r6, #3
 801d8fa:	f040 808f 	bne.w	801da1c <non_conn_mngr_adv_cbk+0x19c>
 801d8fe:	68a0      	ldr	r0, [r4, #8]
 801d900:	2206      	movs	r2, #6
 801d902:	6800      	ldr	r0, [r0, #0]
 801d904:	1d01      	adds	r1, r0, #4
 801d906:	4628      	mov	r0, r5
 801d908:	f006 fe1e 	bl	8024548 <ble_memcpy>
 801d90c:	68a0      	ldr	r0, [r4, #8]
 801d90e:	6800      	ldr	r0, [r0, #0]
 801d910:	7800      	ldrb	r0, [r0, #0]
 801d912:	622d      	str	r5, [r5, #32]
 801d914:	f3c0 1080 	ubfx	r0, r0, #6, #1
 801d918:	f885 0025 	strb.w	r0, [r5, #37]	@ 0x25
 801d91c:	f885 0026 	strb.w	r0, [r5, #38]	@ 0x26
 801d920:	f895 0036 	ldrb.w	r0, [r5, #54]	@ 0x36
 801d924:	2801      	cmp	r0, #1
 801d926:	f04f 0003 	mov.w	r0, #3
 801d92a:	f885 0029 	strb.w	r0, [r5, #41]	@ 0x29
 801d92e:	d175      	bne.n	801da1c <non_conn_mngr_adv_cbk+0x19c>
 801d930:	f899 1033 	ldrb.w	r1, [r9, #51]	@ 0x33
 801d934:	2001      	movs	r0, #1
 801d936:	f001 f8eb 	bl	801eb10 <prvcy_mngr_addr_hndlr>
 801d93a:	e06f      	b.n	801da1c <non_conn_mngr_adv_cbk+0x19c>
 801d93c:	f646 64a8 	movw	r4, #28328	@ 0x6ea8
 801d940:	f2c2 0400 	movt	r4, #8192	@ 0x2000
 801d944:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 801d946:	f7f5 f84f 	bl	80129e8 <evnt_schdlr_unrgstr_evnt>
 801d94a:	2800      	cmp	r0, #0
 801d94c:	f040 8101 	bne.w	801db52 <non_conn_mngr_adv_cbk+0x2d2>
 801d950:	2100      	movs	r1, #0
 801d952:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 801d954:	62e1      	str	r1, [r4, #44]	@ 0x2c
 801d956:	2100      	movs	r1, #0
 801d958:	f001 feea 	bl	801f730 <state_mngr_update_state>
 801d95c:	2800      	cmp	r0, #0
 801d95e:	f040 80f8 	bne.w	801db52 <non_conn_mngr_adv_cbk+0x2d2>
 801d962:	f646 5038 	movw	r0, #27960	@ 0x6d38
 801d966:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801d96a:	6800      	ldr	r0, [r0, #0]
 801d96c:	6881      	ldr	r1, [r0, #8]
 801d96e:	b199      	cbz	r1, 801d998 <non_conn_mngr_adv_cbk+0x118>
 801d970:	223c      	movs	r2, #60	@ 0x3c
 801d972:	7ea3      	ldrb	r3, [r4, #26]
 801d974:	2100      	movs	r1, #0
 801d976:	9206      	str	r2, [sp, #24]
 801d978:	2201      	movs	r2, #1
 801d97a:	910c      	str	r1, [sp, #48]	@ 0x30
 801d97c:	e9cd 110a 	strd	r1, r1, [sp, #40]	@ 0x28
 801d980:	f88d 2028 	strb.w	r2, [sp, #40]	@ 0x28
 801d984:	f88d 3032 	strb.w	r3, [sp, #50]	@ 0x32
 801d988:	e9cd 1108 	strd	r1, r1, [sp, #32]
 801d98c:	6881      	ldr	r1, [r0, #8]
 801d98e:	f104 021b 	add.w	r2, r4, #27
 801d992:	a806      	add	r0, sp, #24
 801d994:	9207      	str	r2, [sp, #28]
 801d996:	4788      	blx	r1
 801d998:	2001      	movs	r0, #1
 801d99a:	f884 0034 	strb.w	r0, [r4, #52]	@ 0x34
 801d99e:	e0e2      	b.n	801db66 <non_conn_mngr_adv_cbk+0x2e6>
 801d9a0:	68a0      	ldr	r0, [r4, #8]
 801d9a2:	2e05      	cmp	r6, #5
 801d9a4:	d113      	bne.n	801d9ce <non_conn_mngr_adv_cbk+0x14e>
 801d9a6:	f10d 0834 	add.w	r8, sp, #52	@ 0x34
 801d9aa:	4641      	mov	r1, r8
 801d9ac:	2205      	movs	r2, #5
 801d9ae:	f000 fb10 	bl	801dfd2 <pdu_trnsprt_hndlr_parse_conn_req>
 801d9b2:	4605      	mov	r5, r0
 801d9b4:	4640      	mov	r0, r8
 801d9b6:	f000 f9a7 	bl	801dd08 <non_conn_mngr_check_conn_params>
 801d9ba:	b110      	cbz	r0, 801d9c2 <non_conn_mngr_adv_cbk+0x142>
 801d9bc:	2d00      	cmp	r5, #0
 801d9be:	f43f af81 	beq.w	801d8c4 <non_conn_mngr_adv_cbk+0x44>
 801d9c2:	f646 60a8 	movw	r0, #28328	@ 0x6ea8
 801d9c6:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801d9ca:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
 801d9cc:	e028      	b.n	801da20 <non_conn_mngr_adv_cbk+0x1a0>
 801d9ce:	f000 ff4c 	bl	801e86a <free_buff_hdr>
 801d9d2:	2000      	movs	r0, #0
 801d9d4:	2101      	movs	r1, #1
 801d9d6:	f001 ff24 	bl	801f822 <bsp_assert>
 801d9da:	e0ba      	b.n	801db52 <non_conn_mngr_adv_cbk+0x2d2>
 801d9dc:	2e05      	cmp	r6, #5
 801d9de:	d11d      	bne.n	801da1c <non_conn_mngr_adv_cbk+0x19c>
 801d9e0:	2005      	movs	r0, #5
 801d9e2:	f885 0029 	strb.w	r0, [r5, #41]	@ 0x29
 801d9e6:	68a0      	ldr	r0, [r4, #8]
 801d9e8:	2206      	movs	r2, #6
 801d9ea:	6800      	ldr	r0, [r0, #0]
 801d9ec:	1d01      	adds	r1, r0, #4
 801d9ee:	4628      	mov	r0, r5
 801d9f0:	f006 fdaa 	bl	8024548 <ble_memcpy>
 801d9f4:	68a0      	ldr	r0, [r4, #8]
 801d9f6:	f895 1036 	ldrb.w	r1, [r5, #54]	@ 0x36
 801d9fa:	6800      	ldr	r0, [r0, #0]
 801d9fc:	2901      	cmp	r1, #1
 801d9fe:	7800      	ldrb	r0, [r0, #0]
 801da00:	622d      	str	r5, [r5, #32]
 801da02:	f3c0 1080 	ubfx	r0, r0, #6, #1
 801da06:	f885 0025 	strb.w	r0, [r5, #37]	@ 0x25
 801da0a:	f885 0026 	strb.w	r0, [r5, #38]	@ 0x26
 801da0e:	d10d      	bne.n	801da2c <non_conn_mngr_adv_cbk+0x1ac>
 801da10:	f899 1033 	ldrb.w	r1, [r9, #51]	@ 0x33
 801da14:	2000      	movs	r0, #0
 801da16:	f001 f87b 	bl	801eb10 <prvcy_mngr_addr_hndlr>
 801da1a:	b138      	cbz	r0, 801da2c <non_conn_mngr_adv_cbk+0x1ac>
 801da1c:	f8d9 002c 	ldr.w	r0, [r9, #44]	@ 0x2c
 801da20:	f7f5 f940 	bl	8012ca4 <evnt_schdlr_evnt_updtd>
 801da24:	68a0      	ldr	r0, [r4, #8]
 801da26:	f000 ff20 	bl	801e86a <free_buff_hdr>
 801da2a:	e09c      	b.n	801db66 <non_conn_mngr_adv_cbk+0x2e6>
 801da2c:	f895 0026 	ldrb.w	r0, [r5, #38]	@ 0x26
 801da30:	6a29      	ldr	r1, [r5, #32]
 801da32:	f10d 0834 	add.w	r8, sp, #52	@ 0x34
 801da36:	f88d 0057 	strb.w	r0, [sp, #87]	@ 0x57
 801da3a:	4640      	mov	r0, r8
 801da3c:	2206      	movs	r2, #6
 801da3e:	f006 fd83 	bl	8024548 <ble_memcpy>
 801da42:	f895 0036 	ldrb.w	r0, [r5, #54]	@ 0x36
 801da46:	2801      	cmp	r0, #1
 801da48:	d120      	bne.n	801da8c <non_conn_mngr_adv_cbk+0x20c>
 801da4a:	f895 1026 	ldrb.w	r1, [r5, #38]	@ 0x26
 801da4e:	6a2a      	ldr	r2, [r5, #32]
 801da50:	ab06      	add	r3, sp, #24
 801da52:	2001      	movs	r0, #1
 801da54:	f7fa f961 	bl	8017d1a <llhwc_lst_search>
 801da58:	2800      	cmp	r0, #0
 801da5a:	d17a      	bne.n	801db52 <non_conn_mngr_adv_cbk+0x2d2>
 801da5c:	f89d 0018 	ldrb.w	r0, [sp, #24]
 801da60:	07c0      	lsls	r0, r0, #31
 801da62:	d113      	bne.n	801da8c <non_conn_mngr_adv_cbk+0x20c>
 801da64:	f646 7250 	movw	r2, #28496	@ 0x6f50
 801da68:	ab06      	add	r3, sp, #24
 801da6a:	2003      	movs	r0, #3
 801da6c:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 801da70:	2101      	movs	r1, #1
 801da72:	f7fa f952 	bl	8017d1a <llhwc_lst_search>
 801da76:	2800      	cmp	r0, #0
 801da78:	d16b      	bne.n	801db52 <non_conn_mngr_adv_cbk+0x2d2>
 801da7a:	f89d 1018 	ldrb.w	r1, [sp, #24]
 801da7e:	07c8      	lsls	r0, r1, #31
 801da80:	d1cc      	bne.n	801da1c <non_conn_mngr_adv_cbk+0x19c>
 801da82:	2001      	movs	r0, #1
 801da84:	2200      	movs	r2, #0
 801da86:	f7fa fb7e 	bl	8018186 <llhwc_lst_edit_indicators>
 801da8a:	e7c7      	b.n	801da1c <non_conn_mngr_adv_cbk+0x19c>
 801da8c:	68a0      	ldr	r0, [r4, #8]
 801da8e:	f000 feec 	bl	801e86a <free_buff_hdr>
 801da92:	2e05      	cmp	r6, #5
 801da94:	d128      	bne.n	801dae8 <non_conn_mngr_adv_cbk+0x268>
 801da96:	f899 0019 	ldrb.w	r0, [r9, #25]
 801da9a:	2804      	cmp	r0, #4
 801da9c:	bf18      	it	ne
 801da9e:	2801      	cmpne	r0, #1
 801daa0:	d127      	bne.n	801daf2 <non_conn_mngr_adv_cbk+0x272>
 801daa2:	f109 061b 	add.w	r6, r9, #27
 801daa6:	a90d      	add	r1, sp, #52	@ 0x34
 801daa8:	4630      	mov	r0, r6
 801daaa:	2206      	movs	r2, #6
 801daac:	f006 fdd4 	bl	8024658 <ble_memcmp>
 801dab0:	b928      	cbnz	r0, 801dabe <non_conn_mngr_adv_cbk+0x23e>
 801dab2:	f899 0031 	ldrb.w	r0, [r9, #49]	@ 0x31
 801dab6:	f89d 1057 	ldrb.w	r1, [sp, #87]	@ 0x57
 801daba:	4288      	cmp	r0, r1
 801dabc:	d019      	beq.n	801daf2 <non_conn_mngr_adv_cbk+0x272>
 801dabe:	f895 0036 	ldrb.w	r0, [r5, #54]	@ 0x36
 801dac2:	b188      	cbz	r0, 801dae8 <non_conn_mngr_adv_cbk+0x268>
 801dac4:	f89d 1057 	ldrb.w	r1, [sp, #87]	@ 0x57
 801dac8:	f899 0031 	ldrb.w	r0, [r9, #49]	@ 0x31
 801dacc:	1e8a      	subs	r2, r1, #2
 801dace:	4282      	cmp	r2, r0
 801dad0:	d106      	bne.n	801dae0 <non_conn_mngr_adv_cbk+0x260>
 801dad2:	a80d      	add	r0, sp, #52	@ 0x34
 801dad4:	4631      	mov	r1, r6
 801dad6:	f001 fcdb 	bl	801f490 <prvcy_mngr_chck_rpa>
 801dada:	b150      	cbz	r0, 801daf2 <non_conn_mngr_adv_cbk+0x272>
 801dadc:	f89d 1057 	ldrb.w	r1, [sp, #87]	@ 0x57
 801dae0:	a80d      	add	r0, sp, #52	@ 0x34
 801dae2:	f001 fcf3 	bl	801f4cc <prvcy_mngr_chck_dev_prvcy_mode>
 801dae6:	b120      	cbz	r0, 801daf2 <non_conn_mngr_adv_cbk+0x272>
 801dae8:	f8d9 002c 	ldr.w	r0, [r9, #44]	@ 0x2c
 801daec:	f7f5 f8da 	bl	8012ca4 <evnt_schdlr_evnt_updtd>
 801daf0:	e039      	b.n	801db66 <non_conn_mngr_adv_cbk+0x2e6>
 801daf2:	f8d9 0028 	ldr.w	r0, [r9, #40]	@ 0x28
 801daf6:	2105      	movs	r1, #5
 801daf8:	f001 fe1a 	bl	801f730 <state_mngr_update_state>
 801dafc:	bb48      	cbnz	r0, 801db52 <non_conn_mngr_adv_cbk+0x2d2>
 801dafe:	f108 0008 	add.w	r0, r8, #8
 801db02:	4621      	mov	r1, r4
 801db04:	f003 fc4b 	bl	802139e <ble_time_set>
 801db08:	2001      	movs	r0, #1
 801db0a:	2401      	movs	r4, #1
 801db0c:	f7f5 f9f8 	bl	8012f00 <evnt_schdlr_set_pndg_evnts>
 801db10:	f8d9 002c 	ldr.w	r0, [r9, #44]	@ 0x2c
 801db14:	f7f4 ff68 	bl	80129e8 <evnt_schdlr_unrgstr_evnt>
 801db18:	b9d8      	cbnz	r0, 801db52 <non_conn_mngr_adv_cbk+0x2d2>
 801db1a:	f899 2023 	ldrb.w	r2, [r9, #35]	@ 0x23
 801db1e:	2100      	movs	r1, #0
 801db20:	f8d9 0028 	ldr.w	r0, [r9, #40]	@ 0x28
 801db24:	f895 3036 	ldrb.w	r3, [r5, #54]	@ 0x36
 801db28:	f8c9 102c 	str.w	r1, [r9, #44]	@ 0x2c
 801db2c:	f899 6030 	ldrb.w	r6, [r9, #48]	@ 0x30
 801db30:	f889 4034 	strb.w	r4, [r9, #52]	@ 0x34
 801db34:	f240 44e2 	movw	r4, #1250	@ 0x4e2
 801db38:	e88d 0244 	stmia.w	sp, {r2, r6, r9}
 801db3c:	9103      	str	r1, [sp, #12]
 801db3e:	a90d      	add	r1, sp, #52	@ 0x34
 801db40:	462a      	mov	r2, r5
 801db42:	9404      	str	r4, [sp, #16]
 801db44:	f007 fcb4 	bl	80254b0 <conn_mngr_slave_start_connection>
 801db48:	4604      	mov	r4, r0
 801db4a:	2000      	movs	r0, #0
 801db4c:	f7f5 f9d8 	bl	8012f00 <evnt_schdlr_set_pndg_evnts>
 801db50:	b17c      	cbz	r4, 801db72 <non_conn_mngr_adv_cbk+0x2f2>
 801db52:	b947      	cbnz	r7, 801db66 <non_conn_mngr_adv_cbk+0x2e6>
 801db54:	f646 5038 	movw	r0, #27960	@ 0x6d38
 801db58:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801db5c:	6800      	ldr	r0, [r0, #0]
 801db5e:	6801      	ldr	r1, [r0, #0]
 801db60:	b109      	cbz	r1, 801db66 <non_conn_mngr_adv_cbk+0x2e6>
 801db62:	2003      	movs	r0, #3
 801db64:	4788      	blx	r1
 801db66:	2080      	movs	r0, #128	@ 0x80
 801db68:	f001 fea4 	bl	801f8b4 <bsp_debug_gpio_clear>
 801db6c:	b01b      	add	sp, #108	@ 0x6c
 801db6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801db72:	2001      	movs	r0, #1
 801db74:	f889 0034 	strb.w	r0, [r9, #52]	@ 0x34
 801db78:	e7f5      	b.n	801db66 <non_conn_mngr_adv_cbk+0x2e6>

0801db7a <non_conn_mngr_event_status_check>:
 801db7a:	b580      	push	{r7, lr}
 801db7c:	f646 60a8 	movw	r0, #28328	@ 0x6ea8
 801db80:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801db84:	f890 0034 	ldrb.w	r0, [r0, #52]	@ 0x34
 801db88:	b178      	cbz	r0, 801dbaa <non_conn_mngr_event_status_check+0x30>
 801db8a:	f646 6050 	movw	r0, #28240	@ 0x6e50
 801db8e:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801db92:	f890 0029 	ldrb.w	r0, [r0, #41]	@ 0x29
 801db96:	b140      	cbz	r0, 801dbaa <non_conn_mngr_event_status_check+0x30>
 801db98:	f646 7008 	movw	r0, #28424	@ 0x6f08
 801db9c:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801dba0:	f890 0034 	ldrb.w	r0, [r0, #52]	@ 0x34
 801dba4:	b108      	cbz	r0, 801dbaa <non_conn_mngr_event_status_check+0x30>
 801dba6:	2000      	movs	r0, #0
 801dba8:	bd80      	pop	{r7, pc}
 801dbaa:	2043      	movs	r0, #67	@ 0x43
 801dbac:	f001 fe84 	bl	801f8b8 <bsp_debug_gpio_toggle>
 801dbb0:	200c      	movs	r0, #12
 801dbb2:	bd80      	pop	{r7, pc}

0801dbb4 <non_conn_mngr_update_rpa_src_addr>:
 801dbb4:	b5b0      	push	{r4, r5, r7, lr}
 801dbb6:	b086      	sub	sp, #24
 801dbb8:	f646 64a8 	movw	r4, #28328	@ 0x6ea8
 801dbbc:	f2c2 0400 	movt	r4, #8192	@ 0x2000
 801dbc0:	f894 0034 	ldrb.w	r0, [r4, #52]	@ 0x34
 801dbc4:	2800      	cmp	r0, #0
 801dbc6:	f04f 0000 	mov.w	r0, #0
 801dbca:	9005      	str	r0, [sp, #20]
 801dbcc:	e9cd 0003 	strd	r0, r0, [sp, #12]
 801dbd0:	e9cd 0001 	strd	r0, r0, [sp, #4]
 801dbd4:	d10c      	bne.n	801dbf0 <non_conn_mngr_update_rpa_src_addr+0x3c>
 801dbd6:	f894 0030 	ldrb.w	r0, [r4, #48]	@ 0x30
 801dbda:	f000 00fe 	and.w	r0, r0, #254	@ 0xfe
 801dbde:	2802      	cmp	r0, #2
 801dbe0:	d106      	bne.n	801dbf0 <non_conn_mngr_update_rpa_src_addr+0x3c>
 801dbe2:	f104 0508 	add.w	r5, r4, #8
 801dbe6:	4628      	mov	r0, r5
 801dbe8:	4621      	mov	r1, r4
 801dbea:	f001 fb97 	bl	801f31c <prvcy_mngr_get_local_rpa>
 801dbee:	b110      	cbz	r0, 801dbf6 <non_conn_mngr_update_rpa_src_addr+0x42>
 801dbf0:	2000      	movs	r0, #0
 801dbf2:	b006      	add	sp, #24
 801dbf4:	bdb0      	pop	{r4, r5, r7, pc}
 801dbf6:	7e60      	ldrb	r0, [r4, #25]
 801dbf8:	2804      	cmp	r0, #4
 801dbfa:	bf18      	it	ne
 801dbfc:	2801      	cmpne	r0, #1
 801dbfe:	d1f7      	bne.n	801dbf0 <non_conn_mngr_update_rpa_src_addr+0x3c>
 801dc00:	aa05      	add	r2, sp, #20
 801dc02:	2001      	movs	r0, #1
 801dc04:	4629      	mov	r1, r5
 801dc06:	2300      	movs	r3, #0
 801dc08:	f001 fa7e 	bl	801f108 <prvcy_mngr_srch_fw_reslvng_list>
 801dc0c:	9805      	ldr	r0, [sp, #20]
 801dc0e:	2800      	cmp	r0, #0
 801dc10:	d0ee      	beq.n	801dbf0 <non_conn_mngr_update_rpa_src_addr+0x3c>
 801dc12:	a901      	add	r1, sp, #4
 801dc14:	2210      	movs	r2, #16
 801dc16:	f006 fd1f 	bl	8024658 <ble_memcmp>
 801dc1a:	2800      	cmp	r0, #0
 801dc1c:	d0e8      	beq.n	801dbf0 <non_conn_mngr_update_rpa_src_addr+0x3c>
 801dc1e:	9805      	ldr	r0, [sp, #20]
 801dc20:	f104 011b 	add.w	r1, r4, #27
 801dc24:	f001 fbaa 	bl	801f37c <prvcy_mngr_addr_gen>
 801dc28:	e7e2      	b.n	801dbf0 <non_conn_mngr_update_rpa_src_addr+0x3c>

0801dc2a <non_conn_mngr_set_random_address>:
 801dc2a:	b580      	push	{r7, lr}
 801dc2c:	f646 61a8 	movw	r1, #28328	@ 0x6ea8
 801dc30:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 801dc34:	f891 1034 	ldrb.w	r1, [r1, #52]	@ 0x34
 801dc38:	b189      	cbz	r1, 801dc5e <non_conn_mngr_set_random_address+0x34>
 801dc3a:	f646 6150 	movw	r1, #28240	@ 0x6e50
 801dc3e:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 801dc42:	f891 1029 	ldrb.w	r1, [r1, #41]	@ 0x29
 801dc46:	b151      	cbz	r1, 801dc5e <non_conn_mngr_set_random_address+0x34>
 801dc48:	f646 7108 	movw	r1, #28424	@ 0x6f08
 801dc4c:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 801dc50:	f891 1034 	ldrb.w	r1, [r1, #52]	@ 0x34
 801dc54:	b119      	cbz	r1, 801dc5e <non_conn_mngr_set_random_address+0x34>
 801dc56:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801dc5a:	f008 bc0f 	b.w	802647c <db_set_random_address>
 801dc5e:	2043      	movs	r0, #67	@ 0x43
 801dc60:	f001 fe2a 	bl	801f8b8 <bsp_debug_gpio_toggle>
 801dc64:	200c      	movs	r0, #12
 801dc66:	bd80      	pop	{r7, pc}

0801dc68 <non_conn_mngr_get_link_status>:
 801dc68:	b570      	push	{r4, r5, r6, lr}
 801dc6a:	4614      	mov	r4, r2
 801dc6c:	f646 62a8 	movw	r2, #28328	@ 0x6ea8
 801dc70:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 801dc74:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 801dc78:	460d      	mov	r5, r1
 801dc7a:	4606      	mov	r6, r0
 801dc7c:	b9ea      	cbnz	r2, 801dcba <non_conn_mngr_get_link_status+0x52>
 801dc7e:	e00b      	b.n	801dc98 <non_conn_mngr_get_link_status+0x30>
 801dc80:	3001      	adds	r0, #1
 801dc82:	b2c1      	uxtb	r1, r0
 801dc84:	7020      	strb	r0, [r4, #0]
 801dc86:	290a      	cmp	r1, #10
 801dc88:	f04f 0000 	mov.w	r0, #0
 801dc8c:	f04f 0101 	mov.w	r1, #1
 801dc90:	bf38      	it	cc
 801dc92:	2001      	movcc	r0, #1
 801dc94:	f001 fdc5 	bl	801f822 <bsp_assert>
 801dc98:	7820      	ldrb	r0, [r4, #0]
 801dc9a:	5c31      	ldrb	r1, [r6, r0]
 801dc9c:	2900      	cmp	r1, #0
 801dc9e:	d1ef      	bne.n	801dc80 <non_conn_mngr_get_link_status+0x18>
 801dca0:	2101      	movs	r1, #1
 801dca2:	5431      	strb	r1, [r6, r0]
 801dca4:	7820      	ldrb	r0, [r4, #0]
 801dca6:	21ff      	movs	r1, #255	@ 0xff
 801dca8:	f805 1010 	strb.w	r1, [r5, r0, lsl #1]
 801dcac:	7820      	ldrb	r0, [r4, #0]
 801dcae:	eb05 0040 	add.w	r0, r5, r0, lsl #1
 801dcb2:	7041      	strb	r1, [r0, #1]
 801dcb4:	7820      	ldrb	r0, [r4, #0]
 801dcb6:	3001      	adds	r0, #1
 801dcb8:	7020      	strb	r0, [r4, #0]
 801dcba:	f646 6050 	movw	r0, #28240	@ 0x6e50
 801dcbe:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801dcc2:	f890 0029 	ldrb.w	r0, [r0, #41]	@ 0x29
 801dcc6:	2800      	cmp	r0, #0
 801dcc8:	bf18      	it	ne
 801dcca:	bd70      	popne	{r4, r5, r6, pc}
 801dccc:	7820      	ldrb	r0, [r4, #0]
 801dcce:	5c31      	ldrb	r1, [r6, r0]
 801dcd0:	b161      	cbz	r1, 801dcec <non_conn_mngr_get_link_status+0x84>
 801dcd2:	3001      	adds	r0, #1
 801dcd4:	b2c1      	uxtb	r1, r0
 801dcd6:	7020      	strb	r0, [r4, #0]
 801dcd8:	290a      	cmp	r1, #10
 801dcda:	f04f 0000 	mov.w	r0, #0
 801dcde:	f04f 0101 	mov.w	r1, #1
 801dce2:	bf38      	it	cc
 801dce4:	2001      	movcc	r0, #1
 801dce6:	f001 fd9c 	bl	801f822 <bsp_assert>
 801dcea:	e7ef      	b.n	801dccc <non_conn_mngr_get_link_status+0x64>
 801dcec:	2103      	movs	r1, #3
 801dcee:	5431      	strb	r1, [r6, r0]
 801dcf0:	7820      	ldrb	r0, [r4, #0]
 801dcf2:	21ff      	movs	r1, #255	@ 0xff
 801dcf4:	f805 1010 	strb.w	r1, [r5, r0, lsl #1]
 801dcf8:	7820      	ldrb	r0, [r4, #0]
 801dcfa:	eb05 0040 	add.w	r0, r5, r0, lsl #1
 801dcfe:	7041      	strb	r1, [r0, #1]
 801dd00:	7820      	ldrb	r0, [r4, #0]
 801dd02:	3001      	adds	r0, #1
 801dd04:	7020      	strb	r0, [r4, #0]
 801dd06:	bd70      	pop	{r4, r5, r6, pc}

0801dd08 <non_conn_mngr_check_conn_params>:
 801dd08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801dd0c:	8b42      	ldrh	r2, [r0, #26]
 801dd0e:	f640 4377 	movw	r3, #3191	@ 0xc77
 801dd12:	3a0a      	subs	r2, #10
 801dd14:	429a      	cmp	r2, r3
 801dd16:	8ac3      	ldrh	r3, [r0, #22]
 801dd18:	f04f 0200 	mov.w	r2, #0
 801dd1c:	f1a3 0106 	sub.w	r1, r3, #6
 801dd20:	b289      	uxth	r1, r1
 801dd22:	f640 447b 	movw	r4, #3195	@ 0xc7b
 801dd26:	f8b0 c018 	ldrh.w	ip, [r0, #24]
 801dd2a:	bf38      	it	cc
 801dd2c:	2201      	movcc	r2, #1
 801dd2e:	42a1      	cmp	r1, r4
 801dd30:	f04f 0100 	mov.w	r1, #0
 801dd34:	bf38      	it	cc
 801dd36:	2101      	movcc	r1, #1
 801dd38:	f890 4020 	ldrb.w	r4, [r0, #32]
 801dd3c:	f890 6026 	ldrb.w	r6, [r0, #38]	@ 0x26
 801dd40:	f104 07ff 	add.w	r7, r4, #255	@ 0xff
 801dd44:	b2fd      	uxtb	r5, r7
 801dd46:	1bef      	subs	r7, r5, r7
 801dd48:	f8b0 e010 	ldrh.w	lr, [r0, #16]
 801dd4c:	bf18      	it	ne
 801dd4e:	2701      	movne	r7, #1
 801dd50:	42a3      	cmp	r3, r4
 801dd52:	f04f 0400 	mov.w	r4, #0
 801dd56:	bf88      	it	hi
 801dd58:	2401      	movhi	r4, #1
 801dd5a:	2d08      	cmp	r5, #8
 801dd5c:	f04f 0500 	mov.w	r5, #0
 801dd60:	f1a6 0605 	sub.w	r6, r6, #5
 801dd64:	bf38      	it	cc
 801dd66:	2501      	movcc	r5, #1
 801dd68:	2e0c      	cmp	r6, #12
 801dd6a:	f04f 0600 	mov.w	r6, #0
 801dd6e:	ea04 0407 	and.w	r4, r4, r7
 801dd72:	bf38      	it	cc
 801dd74:	2601      	movcc	r6, #1
 801dd76:	459e      	cmp	lr, r3
 801dd78:	f04f 0300 	mov.w	r3, #0
 801dd7c:	f04f 0700 	mov.w	r7, #0
 801dd80:	bf98      	it	ls
 801dd82:	2301      	movls	r3, #1
 801dd84:	f5bc 7ffa 	cmp.w	ip, #500	@ 0x1f4
 801dd88:	bf38      	it	cc
 801dd8a:	2701      	movcc	r7, #1
 801dd8c:	403a      	ands	r2, r7
 801dd8e:	4011      	ands	r1, r2
 801dd90:	4019      	ands	r1, r3
 801dd92:	4021      	ands	r1, r4
 801dd94:	4029      	ands	r1, r5
 801dd96:	3030      	adds	r0, #48	@ 0x30
 801dd98:	f04f 0800 	mov.w	r8, #0
 801dd9c:	ea06 0401 	and.w	r4, r6, r1
 801dda0:	f007 fd8a 	bl	80258b8 <conn_mngr_calc_num_of_used_data_chnls>
 801dda4:	2801      	cmp	r0, #1
 801dda6:	bf88      	it	hi
 801dda8:	f04f 0801 	movhi.w	r8, #1
 801ddac:	ea08 0004 	and.w	r0, r8, r4
 801ddb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801ddb4 <pdu_trnsprt_hndlr_form_nconn_adv>:
 801ddb4:	b570      	push	{r4, r5, r6, lr}
 801ddb6:	b082      	sub	sp, #8
 801ddb8:	4605      	mov	r5, r0
 801ddba:	2b00      	cmp	r3, #0
 801ddbc:	4618      	mov	r0, r3
 801ddbe:	4629      	mov	r1, r5
 801ddc0:	bf18      	it	ne
 801ddc2:	2001      	movne	r0, #1
 801ddc4:	2d00      	cmp	r5, #0
 801ddc6:	bf18      	it	ne
 801ddc8:	2101      	movne	r1, #1
 801ddca:	4008      	ands	r0, r1
 801ddcc:	2101      	movs	r1, #1
 801ddce:	461c      	mov	r4, r3
 801ddd0:	2601      	movs	r6, #1
 801ddd2:	f001 fd26 	bl	801f822 <bsp_assert>
 801ddd6:	6820      	ldr	r0, [r4, #0]
 801ddd8:	2101      	movs	r1, #1
 801ddda:	2800      	cmp	r0, #0
 801dddc:	bf18      	it	ne
 801ddde:	2001      	movne	r0, #1
 801dde0:	f001 fd1f 	bl	801f822 <bsp_assert>
 801dde4:	7c68      	ldrb	r0, [r5, #17]
 801dde6:	2804      	cmp	r0, #4
 801dde8:	d807      	bhi.n	801ddfa <pdu_trnsprt_hndlr_form_nconn_adv+0x46>
 801ddea:	210c      	movs	r1, #12
 801ddec:	e8df f000 	tbb	[pc, r0]
 801ddf0:	07030b08 	.word	0x07030b08
 801ddf4:	000b      	.short	0x000b
 801ddf6:	2006      	movs	r0, #6
 801ddf8:	e002      	b.n	801de00 <pdu_trnsprt_hndlr_form_nconn_adv+0x4c>
 801ddfa:	201f      	movs	r0, #31
 801ddfc:	e00c      	b.n	801de18 <pdu_trnsprt_hndlr_form_nconn_adv+0x64>
 801ddfe:	2002      	movs	r0, #2
 801de00:	89a1      	ldrh	r1, [r4, #12]
 801de02:	4606      	mov	r6, r0
 801de04:	3106      	adds	r1, #6
 801de06:	7ca8      	ldrb	r0, [r5, #18]
 801de08:	7eeb      	ldrb	r3, [r5, #27]
 801de0a:	2500      	movs	r5, #0
 801de0c:	9000      	str	r0, [sp, #0]
 801de0e:	4620      	mov	r0, r4
 801de10:	4632      	mov	r2, r6
 801de12:	9501      	str	r5, [sp, #4]
 801de14:	f000 f802 	bl	801de1c <pdu_trnsprt_hndlr_form_adv_PDU_Hdr>
 801de18:	b002      	add	sp, #8
 801de1a:	bd70      	pop	{r4, r5, r6, pc}

0801de1c <pdu_trnsprt_hndlr_form_adv_PDU_Hdr>:
 801de1c:	b570      	push	{r4, r5, r6, lr}
 801de1e:	1e4d      	subs	r5, r1, #1
 801de20:	2d27      	cmp	r5, #39	@ 0x27
 801de22:	d81d      	bhi.n	801de60 <pdu_trnsprt_hndlr_form_adv_PDU_Hdr+0x44>
 801de24:	6804      	ldr	r4, [r0, #0]
 801de26:	f8b0 c00c 	ldrh.w	ip, [r0, #12]
 801de2a:	46a6      	mov	lr, r4
 801de2c:	f1bc 0f00 	cmp.w	ip, #0
 801de30:	bf1e      	ittt	ne
 801de32:	8945      	ldrhne	r5, [r0, #10]
 801de34:	4425      	addne	r5, r4
 801de36:	f1a5 0e04 	subne.w	lr, r5, #4
 801de3a:	2a06      	cmp	r2, #6
 801de3c:	d810      	bhi.n	801de60 <pdu_trnsprt_hndlr_form_adv_PDU_Hdr+0x44>
 801de3e:	2501      	movs	r5, #1
 801de40:	4095      	lsls	r5, r2
 801de42:	f015 0f5c 	tst.w	r5, #92	@ 0x5c
 801de46:	d001      	beq.n	801de4c <pdu_trnsprt_hndlr_form_adv_PDU_Hdr+0x30>
 801de48:	2500      	movs	r5, #0
 801de4a:	e007      	b.n	801de5c <pdu_trnsprt_hndlr_form_adv_PDU_Hdr+0x40>
 801de4c:	07ad      	lsls	r5, r5, #30
 801de4e:	d001      	beq.n	801de54 <pdu_trnsprt_hndlr_form_adv_PDU_Hdr+0x38>
 801de50:	2520      	movs	r5, #32
 801de52:	e003      	b.n	801de5c <pdu_trnsprt_hndlr_form_adv_PDU_Hdr+0x40>
 801de54:	9d05      	ldr	r5, [sp, #20]
 801de56:	2620      	movs	r6, #32
 801de58:	ea06 1545 	and.w	r5, r6, r5, lsl #5
 801de5c:	45a6      	cmp	lr, r4
 801de5e:	d201      	bcs.n	801de64 <pdu_trnsprt_hndlr_form_adv_PDU_Hdr+0x48>
 801de60:	201f      	movs	r0, #31
 801de62:	bd70      	pop	{r4, r5, r6, pc}
 801de64:	9c04      	ldr	r4, [sp, #16]
 801de66:	f88e 1001 	strb.w	r1, [lr, #1]
 801de6a:	01e4      	lsls	r4, r4, #7
 801de6c:	f363 1486 	bfi	r4, r3, #6, #1
 801de70:	192b      	adds	r3, r5, r4
 801de72:	431a      	orrs	r2, r3
 801de74:	f88e 2000 	strb.w	r2, [lr]
 801de78:	8981      	ldrh	r1, [r0, #12]
 801de7a:	f10c 0203 	add.w	r2, ip, #3
 801de7e:	2900      	cmp	r1, #0
 801de80:	f022 0103 	bic.w	r1, r2, #3
 801de84:	bf1a      	itte	ne
 801de86:	8942      	ldrhne	r2, [r0, #10]
 801de88:	3a04      	subne	r2, #4
 801de8a:	2200      	moveq	r2, #0
 801de8c:	3104      	adds	r1, #4
 801de8e:	8142      	strh	r2, [r0, #10]
 801de90:	8181      	strh	r1, [r0, #12]
 801de92:	2000      	movs	r0, #0
 801de94:	bd70      	pop	{r4, r5, r6, pc}

0801de96 <pdu_trnsprt_hndlr_nconn_init_patch>:
 801de96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801de9a:	460e      	mov	r6, r1
 801de9c:	f8dd 8018 	ldr.w	r8, [sp, #24]
 801dea0:	2101      	movs	r1, #1
 801dea2:	461c      	mov	r4, r3
 801dea4:	4615      	mov	r5, r2
 801dea6:	4607      	mov	r7, r0
 801dea8:	2800      	cmp	r0, #0
 801deaa:	bf18      	it	ne
 801deac:	2001      	movne	r0, #1
 801deae:	f001 fcb8 	bl	801f822 <bsp_assert>
 801deb2:	6838      	ldr	r0, [r7, #0]
 801deb4:	2101      	movs	r1, #1
 801deb6:	2800      	cmp	r0, #0
 801deb8:	bf18      	it	ne
 801deba:	2001      	movne	r0, #1
 801debc:	f001 fcb1 	bl	801f822 <bsp_assert>
 801dec0:	6838      	ldr	r0, [r7, #0]
 801dec2:	f008 0201 	and.w	r2, r8, #1
 801dec6:	7801      	ldrb	r1, [r0, #0]
 801dec8:	f001 01df 	and.w	r1, r1, #223	@ 0xdf
 801decc:	ea41 1142 	orr.w	r1, r1, r2, lsl #5
 801ded0:	0a22      	lsrs	r2, r4, #8
 801ded2:	7001      	strb	r1, [r0, #0]
 801ded4:	6839      	ldr	r1, [r7, #0]
 801ded6:	0a30      	lsrs	r0, r6, #8
 801ded8:	73c8      	strb	r0, [r1, #15]
 801deda:	0a28      	lsrs	r0, r5, #8
 801dedc:	7448      	strb	r0, [r1, #17]
 801dede:	2000      	movs	r0, #0
 801dee0:	738e      	strb	r6, [r1, #14]
 801dee2:	740d      	strb	r5, [r1, #16]
 801dee4:	748c      	strb	r4, [r1, #18]
 801dee6:	74ca      	strb	r2, [r1, #19]
 801dee8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801deec <pdu_trnsprt_hndlr_parse_nconn_adv>:
 801deec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801def0:	460d      	mov	r5, r1
 801def2:	2101      	movs	r1, #1
 801def4:	4698      	mov	r8, r3
 801def6:	4616      	mov	r6, r2
 801def8:	4607      	mov	r7, r0
 801defa:	2800      	cmp	r0, #0
 801defc:	bf18      	it	ne
 801defe:	2001      	movne	r0, #1
 801df00:	f001 fc8f 	bl	801f822 <bsp_assert>
 801df04:	6838      	ldr	r0, [r7, #0]
 801df06:	2101      	movs	r1, #1
 801df08:	2800      	cmp	r0, #0
 801df0a:	bf18      	it	ne
 801df0c:	2001      	movne	r0, #1
 801df0e:	f001 fc88 	bl	801f822 <bsp_assert>
 801df12:	6838      	ldr	r0, [r7, #0]
 801df14:	8979      	ldrh	r1, [r7, #10]
 801df16:	eb00 0701 	add.w	r7, r0, r1
 801df1a:	5c40      	ldrb	r0, [r0, r1]
 801df1c:	f000 040f 	and.w	r4, r0, #15
 801df20:	b136      	cbz	r6, 801df30 <pdu_trnsprt_hndlr_parse_nconn_adv+0x44>
 801df22:	f107 010a 	add.w	r1, r7, #10
 801df26:	4630      	mov	r0, r6
 801df28:	2206      	movs	r2, #6
 801df2a:	f006 fb0d 	bl	8024548 <ble_memcpy>
 801df2e:	7838      	ldrb	r0, [r7, #0]
 801df30:	f3c0 1080 	ubfx	r0, r0, #6, #1
 801df34:	1d39      	adds	r1, r7, #4
 801df36:	76a8      	strb	r0, [r5, #26]
 801df38:	7878      	ldrb	r0, [r7, #1]
 801df3a:	2206      	movs	r2, #6
 801df3c:	3806      	subs	r0, #6
 801df3e:	82a8      	strh	r0, [r5, #20]
 801df40:	f107 000a 	add.w	r0, r7, #10
 801df44:	60a8      	str	r0, [r5, #8]
 801df46:	2000      	movs	r0, #0
 801df48:	8268      	strh	r0, [r5, #18]
 801df4a:	4628      	mov	r0, r5
 801df4c:	f006 fafc 	bl	8024548 <ble_memcpy>
 801df50:	2c06      	cmp	r4, #6
 801df52:	f04f 001f 	mov.w	r0, #31
 801df56:	d81c      	bhi.n	801df92 <pdu_trnsprt_hndlr_parse_nconn_adv+0xa6>
 801df58:	9906      	ldr	r1, [sp, #24]
 801df5a:	e8df f004 	tbb	[pc, r4]
 801df5e:	0804      	.short	0x0804
 801df60:	1a151a13 	.word	0x1a151a13
 801df64:	0017      	.short	0x0017
 801df66:	2000      	movs	r0, #0
 801df68:	7668      	strb	r0, [r5, #25]
 801df6a:	b931      	cbnz	r1, 801df7a <pdu_trnsprt_hndlr_parse_nconn_adv+0x8e>
 801df6c:	e011      	b.n	801df92 <pdu_trnsprt_hndlr_parse_nconn_adv+0xa6>
 801df6e:	2001      	movs	r0, #1
 801df70:	7668      	strb	r0, [r5, #25]
 801df72:	2000      	movs	r0, #0
 801df74:	82a8      	strh	r0, [r5, #20]
 801df76:	60a8      	str	r0, [r5, #8]
 801df78:	b159      	cbz	r1, 801df92 <pdu_trnsprt_hndlr_parse_nconn_adv+0xa6>
 801df7a:	7838      	ldrb	r0, [r7, #0]
 801df7c:	f3c0 1040 	ubfx	r0, r0, #5, #1
 801df80:	7008      	strb	r0, [r1, #0]
 801df82:	e005      	b.n	801df90 <pdu_trnsprt_hndlr_parse_nconn_adv+0xa4>
 801df84:	2003      	movs	r0, #3
 801df86:	e002      	b.n	801df8e <pdu_trnsprt_hndlr_parse_nconn_adv+0xa2>
 801df88:	2004      	movs	r0, #4
 801df8a:	e000      	b.n	801df8e <pdu_trnsprt_hndlr_parse_nconn_adv+0xa2>
 801df8c:	2002      	movs	r0, #2
 801df8e:	7668      	strb	r0, [r5, #25]
 801df90:	2000      	movs	r0, #0
 801df92:	f1b8 0f00 	cmp.w	r8, #0
 801df96:	bf08      	it	eq
 801df98:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
 801df9c:	7839      	ldrb	r1, [r7, #0]
 801df9e:	09c9      	lsrs	r1, r1, #7
 801dfa0:	f888 1000 	strb.w	r1, [r8]
 801dfa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801dfa8 <pdu_trnsprt_hndlr_get_pdu_type>:
 801dfa8:	b510      	push	{r4, lr}
 801dfaa:	2101      	movs	r1, #1
 801dfac:	4604      	mov	r4, r0
 801dfae:	2800      	cmp	r0, #0
 801dfb0:	bf18      	it	ne
 801dfb2:	2001      	movne	r0, #1
 801dfb4:	f001 fc35 	bl	801f822 <bsp_assert>
 801dfb8:	6820      	ldr	r0, [r4, #0]
 801dfba:	2101      	movs	r1, #1
 801dfbc:	2800      	cmp	r0, #0
 801dfbe:	bf18      	it	ne
 801dfc0:	2001      	movne	r0, #1
 801dfc2:	f001 fc2e 	bl	801f822 <bsp_assert>
 801dfc6:	6820      	ldr	r0, [r4, #0]
 801dfc8:	8961      	ldrh	r1, [r4, #10]
 801dfca:	5c40      	ldrb	r0, [r0, r1]
 801dfcc:	f000 000f 	and.w	r0, r0, #15
 801dfd0:	bd10      	pop	{r4, pc}

0801dfd2 <pdu_trnsprt_hndlr_parse_conn_req>:
 801dfd2:	b570      	push	{r4, r5, r6, lr}
 801dfd4:	4606      	mov	r6, r0
 801dfd6:	460c      	mov	r4, r1
 801dfd8:	2900      	cmp	r1, #0
 801dfda:	4608      	mov	r0, r1
 801dfdc:	4631      	mov	r1, r6
 801dfde:	bf18      	it	ne
 801dfe0:	2001      	movne	r0, #1
 801dfe2:	2e00      	cmp	r6, #0
 801dfe4:	bf18      	it	ne
 801dfe6:	2101      	movne	r1, #1
 801dfe8:	4008      	ands	r0, r1
 801dfea:	2101      	movs	r1, #1
 801dfec:	4615      	mov	r5, r2
 801dfee:	f001 fc18 	bl	801f822 <bsp_assert>
 801dff2:	6830      	ldr	r0, [r6, #0]
 801dff4:	2101      	movs	r1, #1
 801dff6:	2800      	cmp	r0, #0
 801dff8:	bf18      	it	ne
 801dffa:	2001      	movne	r0, #1
 801dffc:	f001 fc11 	bl	801f822 <bsp_assert>
 801e000:	6830      	ldr	r0, [r6, #0]
 801e002:	8971      	ldrh	r1, [r6, #10]
 801e004:	2d05      	cmp	r5, #5
 801e006:	d105      	bne.n	801e014 <pdu_trnsprt_hndlr_parse_conn_req+0x42>
 801e008:	1842      	adds	r2, r0, r1
 801e00a:	7852      	ldrb	r2, [r2, #1]
 801e00c:	2a22      	cmp	r2, #34	@ 0x22
 801e00e:	bf1c      	itt	ne
 801e010:	201f      	movne	r0, #31
 801e012:	bd70      	popne	{r4, r5, r6, pc}
 801e014:	5c42      	ldrb	r2, [r0, r1]
 801e016:	1845      	adds	r5, r0, r1
 801e018:	f3c2 1240 	ubfx	r2, r2, #5, #1
 801e01c:	f884 2022 	strb.w	r2, [r4, #34]	@ 0x22
 801e020:	5c42      	ldrb	r2, [r0, r1]
 801e022:	1d29      	adds	r1, r5, #4
 801e024:	f3c2 1280 	ubfx	r2, r2, #6, #1
 801e028:	4620      	mov	r0, r4
 801e02a:	f884 2023 	strb.w	r2, [r4, #35]	@ 0x23
 801e02e:	2206      	movs	r2, #6
 801e030:	f006 fa8a 	bl	8024548 <ble_memcpy>
 801e034:	7c28      	ldrb	r0, [r5, #16]
 801e036:	7c69      	ldrb	r1, [r5, #17]
 801e038:	7caa      	ldrb	r2, [r5, #18]
 801e03a:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
 801e03e:	7ce9      	ldrb	r1, [r5, #19]
 801e040:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 801e044:	ea40 6001 	orr.w	r0, r0, r1, lsl #24
 801e048:	62e0      	str	r0, [r4, #44]	@ 0x2c
 801e04a:	7d28      	ldrb	r0, [r5, #20]
 801e04c:	7d69      	ldrb	r1, [r5, #21]
 801e04e:	7daa      	ldrb	r2, [r5, #22]
 801e050:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
 801e054:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 801e058:	2205      	movs	r2, #5
 801e05a:	62a0      	str	r0, [r4, #40]	@ 0x28
 801e05c:	7de8      	ldrb	r0, [r5, #23]
 801e05e:	f884 0020 	strb.w	r0, [r4, #32]
 801e062:	7e28      	ldrb	r0, [r5, #24]
 801e064:	7e69      	ldrb	r1, [r5, #25]
 801e066:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
 801e06a:	8220      	strh	r0, [r4, #16]
 801e06c:	7ea8      	ldrb	r0, [r5, #26]
 801e06e:	7ee9      	ldrb	r1, [r5, #27]
 801e070:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
 801e074:	82e0      	strh	r0, [r4, #22]
 801e076:	7f28      	ldrb	r0, [r5, #28]
 801e078:	7f69      	ldrb	r1, [r5, #29]
 801e07a:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
 801e07e:	8320      	strh	r0, [r4, #24]
 801e080:	7fa8      	ldrb	r0, [r5, #30]
 801e082:	7fe9      	ldrb	r1, [r5, #31]
 801e084:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
 801e088:	f105 0120 	add.w	r1, r5, #32
 801e08c:	8360      	strh	r0, [r4, #26]
 801e08e:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 801e092:	f006 fa59 	bl	8024548 <ble_memcpy>
 801e096:	f895 0025 	ldrb.w	r0, [r5, #37]	@ 0x25
 801e09a:	f000 001f 	and.w	r0, r0, #31
 801e09e:	f884 0026 	strb.w	r0, [r4, #38]	@ 0x26
 801e0a2:	f895 0025 	ldrb.w	r0, [r5, #37]	@ 0x25
 801e0a6:	0940      	lsrs	r0, r0, #5
 801e0a8:	f884 0021 	strb.w	r0, [r4, #33]	@ 0x21
 801e0ac:	2000      	movs	r0, #0
 801e0ae:	bd70      	pop	{r4, r5, r6, pc}

0801e0b0 <pdu_trnsprt_hndlr_form_nconn_scan>:
 801e0b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e0b2:	b083      	sub	sp, #12
 801e0b4:	460e      	mov	r6, r1
 801e0b6:	4607      	mov	r7, r0
 801e0b8:	2900      	cmp	r1, #0
 801e0ba:	4608      	mov	r0, r1
 801e0bc:	f04f 0101 	mov.w	r1, #1
 801e0c0:	bf18      	it	ne
 801e0c2:	2001      	movne	r0, #1
 801e0c4:	4614      	mov	r4, r2
 801e0c6:	f001 fbac 	bl	801f822 <bsp_assert>
 801e0ca:	6830      	ldr	r0, [r6, #0]
 801e0cc:	2101      	movs	r1, #1
 801e0ce:	2800      	cmp	r0, #0
 801e0d0:	bf18      	it	ne
 801e0d2:	2001      	movne	r0, #1
 801e0d4:	f001 fba5 	bl	801f822 <bsp_assert>
 801e0d8:	2100      	movs	r1, #0
 801e0da:	2c03      	cmp	r4, #3
 801e0dc:	bf08      	it	eq
 801e0de:	210c      	moveq	r1, #12
 801e0e0:	2c04      	cmp	r4, #4
 801e0e2:	bf04      	itt	eq
 801e0e4:	89b0      	ldrheq	r0, [r6, #12]
 801e0e6:	1d81      	addeq	r1, r0, #6
 801e0e8:	2500      	movs	r5, #0
 801e0ea:	4630      	mov	r0, r6
 801e0ec:	4622      	mov	r2, r4
 801e0ee:	463b      	mov	r3, r7
 801e0f0:	9500      	str	r5, [sp, #0]
 801e0f2:	9501      	str	r5, [sp, #4]
 801e0f4:	f7ff fe92 	bl	801de1c <pdu_trnsprt_hndlr_form_adv_PDU_Hdr>
 801e0f8:	b003      	add	sp, #12
 801e0fa:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801e0fc <pdu_trnsprt_hndlr_form_data_pdu>:
 801e0fc:	b570      	push	{r4, r5, r6, lr}
 801e0fe:	2101      	movs	r1, #1
 801e100:	4604      	mov	r4, r0
 801e102:	2800      	cmp	r0, #0
 801e104:	bf18      	it	ne
 801e106:	2001      	movne	r0, #1
 801e108:	f001 fb8b 	bl	801f822 <bsp_assert>
 801e10c:	6820      	ldr	r0, [r4, #0]
 801e10e:	2101      	movs	r1, #1
 801e110:	2800      	cmp	r0, #0
 801e112:	bf18      	it	ne
 801e114:	2001      	movne	r0, #1
 801e116:	f001 fb84 	bl	801f822 <bsp_assert>
 801e11a:	6820      	ldr	r0, [r4, #0]
 801e11c:	8961      	ldrh	r1, [r4, #10]
 801e11e:	89a5      	ldrh	r5, [r4, #12]
 801e120:	4408      	add	r0, r1
 801e122:	3808      	subs	r0, #8
 801e124:	2100      	movs	r1, #0
 801e126:	2204      	movs	r2, #4
 801e128:	2600      	movs	r6, #0
 801e12a:	f006 fa5d 	bl	80245e8 <ble_memset>
 801e12e:	6820      	ldr	r0, [r4, #0]
 801e130:	8961      	ldrh	r1, [r4, #10]
 801e132:	4408      	add	r0, r1
 801e134:	f800 6d04 	strb.w	r6, [r0, #-4]!
 801e138:	70c6      	strb	r6, [r0, #3]
 801e13a:	7086      	strb	r6, [r0, #2]
 801e13c:	7046      	strb	r6, [r0, #1]
 801e13e:	7ba1      	ldrb	r1, [r4, #14]
 801e140:	07c9      	lsls	r1, r1, #31
 801e142:	f04f 0112 	mov.w	r1, #18
 801e146:	bf08      	it	eq
 801e148:	2111      	moveq	r1, #17
 801e14a:	7001      	strb	r1, [r0, #0]
 801e14c:	7045      	strb	r5, [r0, #1]
 801e14e:	8960      	ldrh	r0, [r4, #10]
 801e150:	3804      	subs	r0, #4
 801e152:	8160      	strh	r0, [r4, #10]
 801e154:	1ce8      	adds	r0, r5, #3
 801e156:	f020 0003 	bic.w	r0, r0, #3
 801e15a:	1d01      	adds	r1, r0, #4
 801e15c:	2000      	movs	r0, #0
 801e15e:	81a1      	strh	r1, [r4, #12]
 801e160:	bd70      	pop	{r4, r5, r6, pc}
	...

0801e164 <pdu_trnsprt_hndlr_form_cntrl_pdu>:
 801e164:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e168:	460e      	mov	r6, r1
 801e16a:	4604      	mov	r4, r0
 801e16c:	4610      	mov	r0, r2
 801e16e:	2101      	movs	r1, #1
 801e170:	4615      	mov	r5, r2
 801e172:	2a00      	cmp	r2, #0
 801e174:	bf18      	it	ne
 801e176:	2001      	movne	r0, #1
 801e178:	f001 fb53 	bl	801f822 <bsp_assert>
 801e17c:	6828      	ldr	r0, [r5, #0]
 801e17e:	2101      	movs	r1, #1
 801e180:	2800      	cmp	r0, #0
 801e182:	bf18      	it	ne
 801e184:	2001      	movne	r0, #1
 801e186:	f001 fb4c 	bl	801f822 <bsp_assert>
 801e18a:	2c19      	cmp	r4, #25
 801e18c:	f200 8088 	bhi.w	801e2a0 <pdu_trnsprt_hndlr_form_cntrl_pdu+0x13c>
 801e190:	e8df f014 	tbh	[pc, r4, lsl #1]
 801e194:	00aa0088 	.word	0x00aa0088
 801e198:	00c800c2 	.word	0x00c800c2
 801e19c:	010900ee 	.word	0x010900ee
 801e1a0:	010f010c 	.word	0x010f010c
 801e1a4:	0113001a 	.word	0x0113001a
 801e1a8:	0120011d 	.word	0x0120011d
 801e1ac:	01390123 	.word	0x01390123
 801e1b0:	0022001a 	.word	0x0022001a
 801e1b4:	01400022 	.word	0x01400022
 801e1b8:	014b0148 	.word	0x014b0148
 801e1bc:	00640064 	.word	0x00640064
 801e1c0:	007f007f 	.word	0x007f007f
 801e1c4:	015e0150 	.word	0x015e0150
 801e1c8:	6828      	ldr	r0, [r5, #0]
 801e1ca:	4631      	mov	r1, r6
 801e1cc:	7104      	strb	r4, [r0, #4]
 801e1ce:	3005      	adds	r0, #5
 801e1d0:	2208      	movs	r2, #8
 801e1d2:	f006 f9b9 	bl	8024548 <ble_memcpy>
 801e1d6:	e05a      	b.n	801e28e <pdu_trnsprt_hndlr_form_cntrl_pdu+0x12a>
 801e1d8:	4630      	mov	r0, r6
 801e1da:	2101      	movs	r1, #1
 801e1dc:	2e00      	cmp	r6, #0
 801e1de:	bf18      	it	ne
 801e1e0:	2001      	movne	r0, #1
 801e1e2:	f001 fb1e 	bl	801f822 <bsp_assert>
 801e1e6:	6828      	ldr	r0, [r5, #0]
 801e1e8:	2718      	movs	r7, #24
 801e1ea:	7104      	strb	r4, [r0, #4]
 801e1ec:	7a31      	ldrb	r1, [r6, #8]
 801e1ee:	7141      	strb	r1, [r0, #5]
 801e1f0:	7a71      	ldrb	r1, [r6, #9]
 801e1f2:	7181      	strb	r1, [r0, #6]
 801e1f4:	7ab1      	ldrb	r1, [r6, #10]
 801e1f6:	71c1      	strb	r1, [r0, #7]
 801e1f8:	7af1      	ldrb	r1, [r6, #11]
 801e1fa:	7201      	strb	r1, [r0, #8]
 801e1fc:	7b31      	ldrb	r1, [r6, #12]
 801e1fe:	7241      	strb	r1, [r0, #9]
 801e200:	7b71      	ldrb	r1, [r6, #13]
 801e202:	7281      	strb	r1, [r0, #10]
 801e204:	7bb1      	ldrb	r1, [r6, #14]
 801e206:	72c1      	strb	r1, [r0, #11]
 801e208:	7bf1      	ldrb	r1, [r6, #15]
 801e20a:	7301      	strb	r1, [r0, #12]
 801e20c:	f896 1028 	ldrb.w	r1, [r6, #40]	@ 0x28
 801e210:	7341      	strb	r1, [r0, #13]
 801e212:	7e31      	ldrb	r1, [r6, #24]
 801e214:	7381      	strb	r1, [r0, #14]
 801e216:	7e71      	ldrb	r1, [r6, #25]
 801e218:	73c1      	strb	r1, [r0, #15]
 801e21a:	7d31      	ldrb	r1, [r6, #20]
 801e21c:	7401      	strb	r1, [r0, #16]
 801e21e:	7d71      	ldrb	r1, [r6, #21]
 801e220:	7441      	strb	r1, [r0, #17]
 801e222:	7fb1      	ldrb	r1, [r6, #30]
 801e224:	7481      	strb	r1, [r0, #18]
 801e226:	7ff1      	ldrb	r1, [r6, #31]
 801e228:	74c1      	strb	r1, [r0, #19]
 801e22a:	f896 1020 	ldrb.w	r1, [r6, #32]
 801e22e:	7501      	strb	r1, [r0, #20]
 801e230:	f896 1021 	ldrb.w	r1, [r6, #33]	@ 0x21
 801e234:	7541      	strb	r1, [r0, #21]
 801e236:	f896 1022 	ldrb.w	r1, [r6, #34]	@ 0x22
 801e23a:	7581      	strb	r1, [r0, #22]
 801e23c:	f896 1023 	ldrb.w	r1, [r6, #35]	@ 0x23
 801e240:	75c1      	strb	r1, [r0, #23]
 801e242:	f896 1024 	ldrb.w	r1, [r6, #36]	@ 0x24
 801e246:	7601      	strb	r1, [r0, #24]
 801e248:	f896 1025 	ldrb.w	r1, [r6, #37]	@ 0x25
 801e24c:	7641      	strb	r1, [r0, #25]
 801e24e:	f896 1026 	ldrb.w	r1, [r6, #38]	@ 0x26
 801e252:	7681      	strb	r1, [r0, #26]
 801e254:	f896 1027 	ldrb.w	r1, [r6, #39]	@ 0x27
 801e258:	76c1      	strb	r1, [r0, #27]
 801e25a:	e087      	b.n	801e36c <pdu_trnsprt_hndlr_form_cntrl_pdu+0x208>
 801e25c:	4630      	mov	r0, r6
 801e25e:	2101      	movs	r1, #1
 801e260:	2e00      	cmp	r6, #0
 801e262:	bf18      	it	ne
 801e264:	2001      	movne	r0, #1
 801e266:	f001 fadc 	bl	801f822 <bsp_assert>
 801e26a:	6828      	ldr	r0, [r5, #0]
 801e26c:	7104      	strb	r4, [r0, #4]
 801e26e:	7831      	ldrb	r1, [r6, #0]
 801e270:	7141      	strb	r1, [r0, #5]
 801e272:	7871      	ldrb	r1, [r6, #1]
 801e274:	7181      	strb	r1, [r0, #6]
 801e276:	78b1      	ldrb	r1, [r6, #2]
 801e278:	71c1      	strb	r1, [r0, #7]
 801e27a:	78f1      	ldrb	r1, [r6, #3]
 801e27c:	7201      	strb	r1, [r0, #8]
 801e27e:	7931      	ldrb	r1, [r6, #4]
 801e280:	7241      	strb	r1, [r0, #9]
 801e282:	7971      	ldrb	r1, [r6, #5]
 801e284:	7281      	strb	r1, [r0, #10]
 801e286:	79b1      	ldrb	r1, [r6, #6]
 801e288:	72c1      	strb	r1, [r0, #11]
 801e28a:	79f1      	ldrb	r1, [r6, #7]
 801e28c:	7301      	strb	r1, [r0, #12]
 801e28e:	2709      	movs	r7, #9
 801e290:	e09b      	b.n	801e3ca <pdu_trnsprt_hndlr_form_cntrl_pdu+0x266>
 801e292:	6830      	ldr	r0, [r6, #0]
 801e294:	6829      	ldr	r1, [r5, #0]
 801e296:	0a02      	lsrs	r2, r0, #8
 801e298:	710c      	strb	r4, [r1, #4]
 801e29a:	7148      	strb	r0, [r1, #5]
 801e29c:	718a      	strb	r2, [r1, #6]
 801e29e:	e0e5      	b.n	801e46c <pdu_trnsprt_hndlr_form_cntrl_pdu+0x308>
 801e2a0:	261f      	movs	r6, #31
 801e2a2:	e10b      	b.n	801e4bc <pdu_trnsprt_hndlr_form_cntrl_pdu+0x358>
 801e2a4:	4630      	mov	r0, r6
 801e2a6:	2101      	movs	r1, #1
 801e2a8:	2e00      	cmp	r6, #0
 801e2aa:	bf18      	it	ne
 801e2ac:	2001      	movne	r0, #1
 801e2ae:	f001 fab8 	bl	801f822 <bsp_assert>
 801e2b2:	6828      	ldr	r0, [r5, #0]
 801e2b4:	2100      	movs	r1, #0
 801e2b6:	7101      	strb	r1, [r0, #4]
 801e2b8:	7f31      	ldrb	r1, [r6, #28]
 801e2ba:	270c      	movs	r7, #12
 801e2bc:	7141      	strb	r1, [r0, #5]
 801e2be:	7d31      	ldrb	r1, [r6, #20]
 801e2c0:	7181      	strb	r1, [r0, #6]
 801e2c2:	7d71      	ldrb	r1, [r6, #21]
 801e2c4:	71c1      	strb	r1, [r0, #7]
 801e2c6:	7eb1      	ldrb	r1, [r6, #26]
 801e2c8:	7201      	strb	r1, [r0, #8]
 801e2ca:	7ef1      	ldrb	r1, [r6, #27]
 801e2cc:	7241      	strb	r1, [r0, #9]
 801e2ce:	7b31      	ldrb	r1, [r6, #12]
 801e2d0:	7281      	strb	r1, [r0, #10]
 801e2d2:	7b71      	ldrb	r1, [r6, #13]
 801e2d4:	72c1      	strb	r1, [r0, #11]
 801e2d6:	7bb1      	ldrb	r1, [r6, #14]
 801e2d8:	7301      	strb	r1, [r0, #12]
 801e2da:	7bf1      	ldrb	r1, [r6, #15]
 801e2dc:	7341      	strb	r1, [r0, #13]
 801e2de:	7e31      	ldrb	r1, [r6, #24]
 801e2e0:	7381      	strb	r1, [r0, #14]
 801e2e2:	7e71      	ldrb	r1, [r6, #25]
 801e2e4:	73c1      	strb	r1, [r0, #15]
 801e2e6:	e070      	b.n	801e3ca <pdu_trnsprt_hndlr_form_cntrl_pdu+0x266>
 801e2e8:	4630      	mov	r0, r6
 801e2ea:	2101      	movs	r1, #1
 801e2ec:	2e00      	cmp	r6, #0
 801e2ee:	bf18      	it	ne
 801e2f0:	2001      	movne	r0, #1
 801e2f2:	f04f 0801 	mov.w	r8, #1
 801e2f6:	f001 fa94 	bl	801f822 <bsp_assert>
 801e2fa:	682f      	ldr	r7, [r5, #0]
 801e2fc:	1cb1      	adds	r1, r6, #2
 801e2fe:	1d78      	adds	r0, r7, #5
 801e300:	2205      	movs	r2, #5
 801e302:	f887 8004 	strb.w	r8, [r7, #4]
 801e306:	f006 f91f 	bl	8024548 <ble_memcpy>
 801e30a:	7830      	ldrb	r0, [r6, #0]
 801e30c:	72b8      	strb	r0, [r7, #10]
 801e30e:	7870      	ldrb	r0, [r6, #1]
 801e310:	72f8      	strb	r0, [r7, #11]
 801e312:	2008      	movs	r0, #8
 801e314:	2708      	movs	r7, #8
 801e316:	e0ab      	b.n	801e470 <pdu_trnsprt_hndlr_form_cntrl_pdu+0x30c>
 801e318:	7830      	ldrb	r0, [r6, #0]
 801e31a:	6829      	ldr	r1, [r5, #0]
 801e31c:	2702      	movs	r7, #2
 801e31e:	710f      	strb	r7, [r1, #4]
 801e320:	7148      	strb	r0, [r1, #5]
 801e322:	e0a4      	b.n	801e46e <pdu_trnsprt_hndlr_form_cntrl_pdu+0x30a>
 801e324:	4630      	mov	r0, r6
 801e326:	2101      	movs	r1, #1
 801e328:	2e00      	cmp	r6, #0
 801e32a:	bf18      	it	ne
 801e32c:	2001      	movne	r0, #1
 801e32e:	f001 fa78 	bl	801f822 <bsp_assert>
 801e332:	682f      	ldr	r7, [r5, #0]
 801e334:	2003      	movs	r0, #3
 801e336:	7138      	strb	r0, [r7, #4]
 801e338:	1d78      	adds	r0, r7, #5
 801e33a:	4631      	mov	r1, r6
 801e33c:	2208      	movs	r2, #8
 801e33e:	f006 f903 	bl	8024548 <ble_memcpy>
 801e342:	7d30      	ldrb	r0, [r6, #20]
 801e344:	f106 0108 	add.w	r1, r6, #8
 801e348:	7378      	strb	r0, [r7, #13]
 801e34a:	7d70      	ldrb	r0, [r6, #21]
 801e34c:	2208      	movs	r2, #8
 801e34e:	73b8      	strb	r0, [r7, #14]
 801e350:	f107 000f 	add.w	r0, r7, #15
 801e354:	f006 f8f8 	bl	8024548 <ble_memcpy>
 801e358:	6930      	ldr	r0, [r6, #16]
 801e35a:	75f8      	strb	r0, [r7, #23]
 801e35c:	6930      	ldr	r0, [r6, #16]
 801e35e:	0a00      	lsrs	r0, r0, #8
 801e360:	7638      	strb	r0, [r7, #24]
 801e362:	8a70      	ldrh	r0, [r6, #18]
 801e364:	7678      	strb	r0, [r7, #25]
 801e366:	7cf0      	ldrb	r0, [r6, #19]
 801e368:	76b8      	strb	r0, [r7, #26]
 801e36a:	2717      	movs	r7, #23
 801e36c:	2018      	movs	r0, #24
 801e36e:	e07f      	b.n	801e470 <pdu_trnsprt_hndlr_form_cntrl_pdu+0x30c>
 801e370:	4630      	mov	r0, r6
 801e372:	2101      	movs	r1, #1
 801e374:	2e00      	cmp	r6, #0
 801e376:	bf18      	it	ne
 801e378:	2001      	movne	r0, #1
 801e37a:	f001 fa52 	bl	801f822 <bsp_assert>
 801e37e:	682f      	ldr	r7, [r5, #0]
 801e380:	2004      	movs	r0, #4
 801e382:	7138      	strb	r0, [r7, #4]
 801e384:	1d78      	adds	r0, r7, #5
 801e386:	1d31      	adds	r1, r6, #4
 801e388:	2208      	movs	r2, #8
 801e38a:	f006 f8dd 	bl	8024548 <ble_memcpy>
 801e38e:	6830      	ldr	r0, [r6, #0]
 801e390:	7378      	strb	r0, [r7, #13]
 801e392:	6830      	ldr	r0, [r6, #0]
 801e394:	0a00      	lsrs	r0, r0, #8
 801e396:	73b8      	strb	r0, [r7, #14]
 801e398:	8870      	ldrh	r0, [r6, #2]
 801e39a:	73f8      	strb	r0, [r7, #15]
 801e39c:	78f0      	ldrb	r0, [r6, #3]
 801e39e:	7438      	strb	r0, [r7, #16]
 801e3a0:	270d      	movs	r7, #13
 801e3a2:	2010      	movs	r0, #16
 801e3a4:	e064      	b.n	801e470 <pdu_trnsprt_hndlr_form_cntrl_pdu+0x30c>
 801e3a6:	6828      	ldr	r0, [r5, #0]
 801e3a8:	2105      	movs	r1, #5
 801e3aa:	e040      	b.n	801e42e <pdu_trnsprt_hndlr_form_cntrl_pdu+0x2ca>
 801e3ac:	6828      	ldr	r0, [r5, #0]
 801e3ae:	2106      	movs	r1, #6
 801e3b0:	e03d      	b.n	801e42e <pdu_trnsprt_hndlr_form_cntrl_pdu+0x2ca>
 801e3b2:	7830      	ldrb	r0, [r6, #0]
 801e3b4:	6829      	ldr	r1, [r5, #0]
 801e3b6:	2207      	movs	r2, #7
 801e3b8:	e028      	b.n	801e40c <pdu_trnsprt_hndlr_form_cntrl_pdu+0x2a8>
 801e3ba:	6828      	ldr	r0, [r5, #0]
 801e3bc:	2709      	movs	r7, #9
 801e3be:	7107      	strb	r7, [r0, #4]
 801e3c0:	3005      	adds	r0, #5
 801e3c2:	4631      	mov	r1, r6
 801e3c4:	2208      	movs	r2, #8
 801e3c6:	f006 f8bf 	bl	8024548 <ble_memcpy>
 801e3ca:	200c      	movs	r0, #12
 801e3cc:	e050      	b.n	801e470 <pdu_trnsprt_hndlr_form_cntrl_pdu+0x30c>
 801e3ce:	6828      	ldr	r0, [r5, #0]
 801e3d0:	210a      	movs	r1, #10
 801e3d2:	e02c      	b.n	801e42e <pdu_trnsprt_hndlr_form_cntrl_pdu+0x2ca>
 801e3d4:	6828      	ldr	r0, [r5, #0]
 801e3d6:	210b      	movs	r1, #11
 801e3d8:	e029      	b.n	801e42e <pdu_trnsprt_hndlr_form_cntrl_pdu+0x2ca>
 801e3da:	4630      	mov	r0, r6
 801e3dc:	2101      	movs	r1, #1
 801e3de:	2e00      	cmp	r6, #0
 801e3e0:	bf18      	it	ne
 801e3e2:	2001      	movne	r0, #1
 801e3e4:	f001 fa1d 	bl	801f822 <bsp_assert>
 801e3e8:	6828      	ldr	r0, [r5, #0]
 801e3ea:	210c      	movs	r1, #12
 801e3ec:	7101      	strb	r1, [r0, #4]
 801e3ee:	7931      	ldrb	r1, [r6, #4]
 801e3f0:	2706      	movs	r7, #6
 801e3f2:	7141      	strb	r1, [r0, #5]
 801e3f4:	7831      	ldrb	r1, [r6, #0]
 801e3f6:	7181      	strb	r1, [r0, #6]
 801e3f8:	7871      	ldrb	r1, [r6, #1]
 801e3fa:	71c1      	strb	r1, [r0, #7]
 801e3fc:	78b1      	ldrb	r1, [r6, #2]
 801e3fe:	7201      	strb	r1, [r0, #8]
 801e400:	78f1      	ldrb	r1, [r6, #3]
 801e402:	7241      	strb	r1, [r0, #9]
 801e404:	e022      	b.n	801e44c <pdu_trnsprt_hndlr_form_cntrl_pdu+0x2e8>
 801e406:	7830      	ldrb	r0, [r6, #0]
 801e408:	6829      	ldr	r1, [r5, #0]
 801e40a:	220d      	movs	r2, #13
 801e40c:	710a      	strb	r2, [r1, #4]
 801e40e:	7148      	strb	r0, [r1, #5]
 801e410:	2702      	movs	r7, #2
 801e412:	e02c      	b.n	801e46e <pdu_trnsprt_hndlr_form_cntrl_pdu+0x30a>
 801e414:	7830      	ldrb	r0, [r6, #0]
 801e416:	7871      	ldrb	r1, [r6, #1]
 801e418:	682a      	ldr	r2, [r5, #0]
 801e41a:	2311      	movs	r3, #17
 801e41c:	7113      	strb	r3, [r2, #4]
 801e41e:	7150      	strb	r0, [r2, #5]
 801e420:	7191      	strb	r1, [r2, #6]
 801e422:	e023      	b.n	801e46c <pdu_trnsprt_hndlr_form_cntrl_pdu+0x308>
 801e424:	6828      	ldr	r0, [r5, #0]
 801e426:	2112      	movs	r1, #18
 801e428:	e001      	b.n	801e42e <pdu_trnsprt_hndlr_form_cntrl_pdu+0x2ca>
 801e42a:	6828      	ldr	r0, [r5, #0]
 801e42c:	2113      	movs	r1, #19
 801e42e:	7101      	strb	r1, [r0, #4]
 801e430:	2701      	movs	r7, #1
 801e432:	e01c      	b.n	801e46e <pdu_trnsprt_hndlr_form_cntrl_pdu+0x30a>
 801e434:	6830      	ldr	r0, [r6, #0]
 801e436:	682b      	ldr	r3, [r5, #0]
 801e438:	0a01      	lsrs	r1, r0, #8
 801e43a:	0c02      	lsrs	r2, r0, #16
 801e43c:	2718      	movs	r7, #24
 801e43e:	7158      	strb	r0, [r3, #5]
 801e440:	0e00      	lsrs	r0, r0, #24
 801e442:	711f      	strb	r7, [r3, #4]
 801e444:	7199      	strb	r1, [r3, #6]
 801e446:	71da      	strb	r2, [r3, #7]
 801e448:	7218      	strb	r0, [r3, #8]
 801e44a:	2705      	movs	r7, #5
 801e44c:	2008      	movs	r0, #8
 801e44e:	e00f      	b.n	801e470 <pdu_trnsprt_hndlr_form_cntrl_pdu+0x30c>
 801e450:	4630      	mov	r0, r6
 801e452:	2101      	movs	r1, #1
 801e454:	2e00      	cmp	r6, #0
 801e456:	bf18      	it	ne
 801e458:	2001      	movne	r0, #1
 801e45a:	f001 f9e2 	bl	801f822 <bsp_assert>
 801e45e:	6828      	ldr	r0, [r5, #0]
 801e460:	2119      	movs	r1, #25
 801e462:	7101      	strb	r1, [r0, #4]
 801e464:	7831      	ldrb	r1, [r6, #0]
 801e466:	7141      	strb	r1, [r0, #5]
 801e468:	7871      	ldrb	r1, [r6, #1]
 801e46a:	7181      	strb	r1, [r0, #6]
 801e46c:	2703      	movs	r7, #3
 801e46e:	2004      	movs	r0, #4
 801e470:	2104      	movs	r1, #4
 801e472:	8169      	strh	r1, [r5, #10]
 801e474:	6829      	ldr	r1, [r5, #0]
 801e476:	81a8      	strh	r0, [r5, #12]
 801e478:	1f08      	subs	r0, r1, #4
 801e47a:	2100      	movs	r1, #0
 801e47c:	2204      	movs	r2, #4
 801e47e:	2600      	movs	r6, #0
 801e480:	f006 f8b2 	bl	80245e8 <ble_memset>
 801e484:	6828      	ldr	r0, [r5, #0]
 801e486:	8969      	ldrh	r1, [r5, #10]
 801e488:	2c02      	cmp	r4, #2
 801e48a:	4408      	add	r0, r1
 801e48c:	f04f 0113 	mov.w	r1, #19
 801e490:	bf08      	it	eq
 801e492:	2103      	moveq	r1, #3
 801e494:	f800 1c04 	strb.w	r1, [r0, #-4]
 801e498:	f800 7c03 	strb.w	r7, [r0, #-3]
 801e49c:	8968      	ldrh	r0, [r5, #10]
 801e49e:	89a9      	ldrh	r1, [r5, #12]
 801e4a0:	3804      	subs	r0, #4
 801e4a2:	8168      	strh	r0, [r5, #10]
 801e4a4:	3104      	adds	r1, #4
 801e4a6:	682a      	ldr	r2, [r5, #0]
 801e4a8:	b280      	uxth	r0, r0
 801e4aa:	81a9      	strh	r1, [r5, #12]
 801e4ac:	b289      	uxth	r1, r1
 801e4ae:	4410      	add	r0, r2
 801e4b0:	4408      	add	r0, r1
 801e4b2:	7104      	strb	r4, [r0, #4]
 801e4b4:	2001      	movs	r0, #1
 801e4b6:	2101      	movs	r1, #1
 801e4b8:	f001 f9b3 	bl	801f822 <bsp_assert>
 801e4bc:	4630      	mov	r0, r6
 801e4be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0801e4c4 <pdu_trnsprt_hndlr_parse_data_cntrl>:
 801e4c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e4c6:	b081      	sub	sp, #4
 801e4c8:	4607      	mov	r7, r0
 801e4ca:	2b00      	cmp	r3, #0
 801e4cc:	4618      	mov	r0, r3
 801e4ce:	4614      	mov	r4, r2
 801e4d0:	bf18      	it	ne
 801e4d2:	2001      	movne	r0, #1
 801e4d4:	460e      	mov	r6, r1
 801e4d6:	2900      	cmp	r1, #0
 801e4d8:	bf18      	it	ne
 801e4da:	2101      	movne	r1, #1
 801e4dc:	463a      	mov	r2, r7
 801e4de:	2f00      	cmp	r7, #0
 801e4e0:	bf18      	it	ne
 801e4e2:	2201      	movne	r2, #1
 801e4e4:	4011      	ands	r1, r2
 801e4e6:	4008      	ands	r0, r1
 801e4e8:	4621      	mov	r1, r4
 801e4ea:	2c00      	cmp	r4, #0
 801e4ec:	bf18      	it	ne
 801e4ee:	2101      	movne	r1, #1
 801e4f0:	4008      	ands	r0, r1
 801e4f2:	2101      	movs	r1, #1
 801e4f4:	461d      	mov	r5, r3
 801e4f6:	f001 f994 	bl	801f822 <bsp_assert>
 801e4fa:	6828      	ldr	r0, [r5, #0]
 801e4fc:	2101      	movs	r1, #1
 801e4fe:	2800      	cmp	r0, #0
 801e500:	bf18      	it	ne
 801e502:	2001      	movne	r0, #1
 801e504:	f001 f98d 	bl	801f822 <bsp_assert>
 801e508:	6828      	ldr	r0, [r5, #0]
 801e50a:	8969      	ldrh	r1, [r5, #10]
 801e50c:	5c42      	ldrb	r2, [r0, r1]
 801e50e:	f002 0203 	and.w	r2, r2, #3
 801e512:	2a03      	cmp	r2, #3
 801e514:	703a      	strb	r2, [r7, #0]
 801e516:	d12e      	bne.n	801e576 <pdu_trnsprt_hndlr_parse_data_cntrl+0xb2>
 801e518:	4408      	add	r0, r1
 801e51a:	7901      	ldrb	r1, [r0, #4]
 801e51c:	2919      	cmp	r1, #25
 801e51e:	7031      	strb	r1, [r6, #0]
 801e520:	d829      	bhi.n	801e576 <pdu_trnsprt_hndlr_parse_data_cntrl+0xb2>
 801e522:	2000      	movs	r0, #0
 801e524:	e8df f011 	tbh	[pc, r1, lsl #1]
 801e528:	00c4009e 	.word	0x00c4009e
 801e52c:	00d9001a 	.word	0x00d9001a
 801e530:	016c0100 	.word	0x016c0100
 801e534:	001a016c 	.word	0x001a016c
 801e538:	00290029 	.word	0x00290029
 801e53c:	016c016c 	.word	0x016c016c
 801e540:	001a0119 	.word	0x001a0119
 801e544:	00360029 	.word	0x00360029
 801e548:	012d0036 	.word	0x012d0036
 801e54c:	016c016c 	.word	0x016c016c
 801e550:	007b007b 	.word	0x007b007b
 801e554:	009a009a 	.word	0x009a009a
 801e558:	014e013a 	.word	0x014e013a
 801e55c:	4620      	mov	r0, r4
 801e55e:	2101      	movs	r1, #1
 801e560:	2c00      	cmp	r4, #0
 801e562:	bf18      	it	ne
 801e564:	2001      	movne	r0, #1
 801e566:	f001 f95c 	bl	801f822 <bsp_assert>
 801e56a:	6828      	ldr	r0, [r5, #0]
 801e56c:	8969      	ldrh	r1, [r5, #10]
 801e56e:	4408      	add	r0, r1
 801e570:	7940      	ldrb	r0, [r0, #5]
 801e572:	7020      	strb	r0, [r4, #0]
 801e574:	e143      	b.n	801e7fe <pdu_trnsprt_hndlr_parse_data_cntrl+0x33a>
 801e576:	201f      	movs	r0, #31
 801e578:	e142      	b.n	801e800 <pdu_trnsprt_hndlr_parse_data_cntrl+0x33c>
 801e57a:	4620      	mov	r0, r4
 801e57c:	2101      	movs	r1, #1
 801e57e:	2c00      	cmp	r4, #0
 801e580:	bf18      	it	ne
 801e582:	2001      	movne	r0, #1
 801e584:	f001 f94d 	bl	801f822 <bsp_assert>
 801e588:	6828      	ldr	r0, [r5, #0]
 801e58a:	8969      	ldrh	r1, [r5, #10]
 801e58c:	2208      	movs	r2, #8
 801e58e:	4408      	add	r0, r1
 801e590:	1d41      	adds	r1, r0, #5
 801e592:	e0de      	b.n	801e752 <pdu_trnsprt_hndlr_parse_data_cntrl+0x28e>
 801e594:	4620      	mov	r0, r4
 801e596:	2101      	movs	r1, #1
 801e598:	2c00      	cmp	r4, #0
 801e59a:	bf18      	it	ne
 801e59c:	2001      	movne	r0, #1
 801e59e:	f001 f940 	bl	801f822 <bsp_assert>
 801e5a2:	6828      	ldr	r0, [r5, #0]
 801e5a4:	8969      	ldrh	r1, [r5, #10]
 801e5a6:	4408      	add	r0, r1
 801e5a8:	7941      	ldrb	r1, [r0, #5]
 801e5aa:	7982      	ldrb	r2, [r0, #6]
 801e5ac:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
 801e5b0:	8121      	strh	r1, [r4, #8]
 801e5b2:	79c1      	ldrb	r1, [r0, #7]
 801e5b4:	7a02      	ldrb	r2, [r0, #8]
 801e5b6:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
 801e5ba:	8161      	strh	r1, [r4, #10]
 801e5bc:	7a41      	ldrb	r1, [r0, #9]
 801e5be:	7a82      	ldrb	r2, [r0, #10]
 801e5c0:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
 801e5c4:	81a1      	strh	r1, [r4, #12]
 801e5c6:	7ac1      	ldrb	r1, [r0, #11]
 801e5c8:	7b02      	ldrb	r2, [r0, #12]
 801e5ca:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
 801e5ce:	81e1      	strh	r1, [r4, #14]
 801e5d0:	7b41      	ldrb	r1, [r0, #13]
 801e5d2:	f884 1028 	strb.w	r1, [r4, #40]	@ 0x28
 801e5d6:	7b81      	ldrb	r1, [r0, #14]
 801e5d8:	7bc2      	ldrb	r2, [r0, #15]
 801e5da:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
 801e5de:	8321      	strh	r1, [r4, #24]
 801e5e0:	7c01      	ldrb	r1, [r0, #16]
 801e5e2:	7c42      	ldrb	r2, [r0, #17]
 801e5e4:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
 801e5e8:	82a1      	strh	r1, [r4, #20]
 801e5ea:	7c81      	ldrb	r1, [r0, #18]
 801e5ec:	7cc2      	ldrb	r2, [r0, #19]
 801e5ee:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
 801e5f2:	83e1      	strh	r1, [r4, #30]
 801e5f4:	7d01      	ldrb	r1, [r0, #20]
 801e5f6:	7d42      	ldrb	r2, [r0, #21]
 801e5f8:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
 801e5fc:	8421      	strh	r1, [r4, #32]
 801e5fe:	7d81      	ldrb	r1, [r0, #22]
 801e600:	7dc2      	ldrb	r2, [r0, #23]
 801e602:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
 801e606:	8461      	strh	r1, [r4, #34]	@ 0x22
 801e608:	7e01      	ldrb	r1, [r0, #24]
 801e60a:	7e42      	ldrb	r2, [r0, #25]
 801e60c:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
 801e610:	84a1      	strh	r1, [r4, #36]	@ 0x24
 801e612:	7e81      	ldrb	r1, [r0, #26]
 801e614:	7ec0      	ldrb	r0, [r0, #27]
 801e616:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
 801e61a:	84e0      	strh	r0, [r4, #38]	@ 0x26
 801e61c:	e0ef      	b.n	801e7fe <pdu_trnsprt_hndlr_parse_data_cntrl+0x33a>
 801e61e:	4620      	mov	r0, r4
 801e620:	2101      	movs	r1, #1
 801e622:	2c00      	cmp	r4, #0
 801e624:	bf18      	it	ne
 801e626:	2001      	movne	r0, #1
 801e628:	f001 f8fb 	bl	801f822 <bsp_assert>
 801e62c:	6828      	ldr	r0, [r5, #0]
 801e62e:	8969      	ldrh	r1, [r5, #10]
 801e630:	4408      	add	r0, r1
 801e632:	7941      	ldrb	r1, [r0, #5]
 801e634:	7982      	ldrb	r2, [r0, #6]
 801e636:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
 801e63a:	8021      	strh	r1, [r4, #0]
 801e63c:	79c1      	ldrb	r1, [r0, #7]
 801e63e:	7a02      	ldrb	r2, [r0, #8]
 801e640:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
 801e644:	8061      	strh	r1, [r4, #2]
 801e646:	7a41      	ldrb	r1, [r0, #9]
 801e648:	7a82      	ldrb	r2, [r0, #10]
 801e64a:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
 801e64e:	80a1      	strh	r1, [r4, #4]
 801e650:	7ac1      	ldrb	r1, [r0, #11]
 801e652:	7b00      	ldrb	r0, [r0, #12]
 801e654:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
 801e658:	80e0      	strh	r0, [r4, #6]
 801e65a:	e0d0      	b.n	801e7fe <pdu_trnsprt_hndlr_parse_data_cntrl+0x33a>
 801e65c:	4620      	mov	r0, r4
 801e65e:	2101      	movs	r1, #1
 801e660:	2c00      	cmp	r4, #0
 801e662:	e0c1      	b.n	801e7e8 <pdu_trnsprt_hndlr_parse_data_cntrl+0x324>
 801e664:	4620      	mov	r0, r4
 801e666:	2101      	movs	r1, #1
 801e668:	2c00      	cmp	r4, #0
 801e66a:	bf18      	it	ne
 801e66c:	2001      	movne	r0, #1
 801e66e:	f001 f8d8 	bl	801f822 <bsp_assert>
 801e672:	6828      	ldr	r0, [r5, #0]
 801e674:	8969      	ldrh	r1, [r5, #10]
 801e676:	4408      	add	r0, r1
 801e678:	7941      	ldrb	r1, [r0, #5]
 801e67a:	7721      	strb	r1, [r4, #28]
 801e67c:	7981      	ldrb	r1, [r0, #6]
 801e67e:	79c2      	ldrb	r2, [r0, #7]
 801e680:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
 801e684:	82a1      	strh	r1, [r4, #20]
 801e686:	7a01      	ldrb	r1, [r0, #8]
 801e688:	7a42      	ldrb	r2, [r0, #9]
 801e68a:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
 801e68e:	8361      	strh	r1, [r4, #26]
 801e690:	7a81      	ldrb	r1, [r0, #10]
 801e692:	7ac2      	ldrb	r2, [r0, #11]
 801e694:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
 801e698:	81a1      	strh	r1, [r4, #12]
 801e69a:	7b01      	ldrb	r1, [r0, #12]
 801e69c:	7b42      	ldrb	r2, [r0, #13]
 801e69e:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
 801e6a2:	81e1      	strh	r1, [r4, #14]
 801e6a4:	7b81      	ldrb	r1, [r0, #14]
 801e6a6:	7bc0      	ldrb	r0, [r0, #15]
 801e6a8:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
 801e6ac:	8320      	strh	r0, [r4, #24]
 801e6ae:	e0a6      	b.n	801e7fe <pdu_trnsprt_hndlr_parse_data_cntrl+0x33a>
 801e6b0:	4620      	mov	r0, r4
 801e6b2:	2101      	movs	r1, #1
 801e6b4:	2c00      	cmp	r4, #0
 801e6b6:	bf18      	it	ne
 801e6b8:	2001      	movne	r0, #1
 801e6ba:	f001 f8b2 	bl	801f822 <bsp_assert>
 801e6be:	6828      	ldr	r0, [r5, #0]
 801e6c0:	8969      	ldrh	r1, [r5, #10]
 801e6c2:	2205      	movs	r2, #5
 801e6c4:	1845      	adds	r5, r0, r1
 801e6c6:	1d69      	adds	r1, r5, #5
 801e6c8:	1ca0      	adds	r0, r4, #2
 801e6ca:	f005 ff3d 	bl	8024548 <ble_memcpy>
 801e6ce:	7aa8      	ldrb	r0, [r5, #10]
 801e6d0:	7ae9      	ldrb	r1, [r5, #11]
 801e6d2:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
 801e6d6:	8020      	strh	r0, [r4, #0]
 801e6d8:	e091      	b.n	801e7fe <pdu_trnsprt_hndlr_parse_data_cntrl+0x33a>
 801e6da:	4620      	mov	r0, r4
 801e6dc:	2101      	movs	r1, #1
 801e6de:	2c00      	cmp	r4, #0
 801e6e0:	bf18      	it	ne
 801e6e2:	2001      	movne	r0, #1
 801e6e4:	f001 f89d 	bl	801f822 <bsp_assert>
 801e6e8:	6828      	ldr	r0, [r5, #0]
 801e6ea:	8969      	ldrh	r1, [r5, #10]
 801e6ec:	2208      	movs	r2, #8
 801e6ee:	1845      	adds	r5, r0, r1
 801e6f0:	1d69      	adds	r1, r5, #5
 801e6f2:	4620      	mov	r0, r4
 801e6f4:	f005 ff28 	bl	8024548 <ble_memcpy>
 801e6f8:	7b68      	ldrb	r0, [r5, #13]
 801e6fa:	7ba9      	ldrb	r1, [r5, #14]
 801e6fc:	2208      	movs	r2, #8
 801e6fe:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
 801e702:	f105 010f 	add.w	r1, r5, #15
 801e706:	82a0      	strh	r0, [r4, #20]
 801e708:	f104 0008 	add.w	r0, r4, #8
 801e70c:	f005 ff1c 	bl	8024548 <ble_memcpy>
 801e710:	7de8      	ldrb	r0, [r5, #23]
 801e712:	7e29      	ldrb	r1, [r5, #24]
 801e714:	7e6a      	ldrb	r2, [r5, #25]
 801e716:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
 801e71a:	7ea9      	ldrb	r1, [r5, #26]
 801e71c:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 801e720:	ea40 6001 	orr.w	r0, r0, r1, lsl #24
 801e724:	6120      	str	r0, [r4, #16]
 801e726:	e06a      	b.n	801e7fe <pdu_trnsprt_hndlr_parse_data_cntrl+0x33a>
 801e728:	4620      	mov	r0, r4
 801e72a:	2101      	movs	r1, #1
 801e72c:	2c00      	cmp	r4, #0
 801e72e:	bf18      	it	ne
 801e730:	2001      	movne	r0, #1
 801e732:	f001 f876 	bl	801f822 <bsp_assert>
 801e736:	6829      	ldr	r1, [r5, #0]
 801e738:	896a      	ldrh	r2, [r5, #10]
 801e73a:	1d20      	adds	r0, r4, #4
 801e73c:	4411      	add	r1, r2
 801e73e:	3105      	adds	r1, #5
 801e740:	2208      	movs	r2, #8
 801e742:	f005 ff01 	bl	8024548 <ble_memcpy>
 801e746:	6828      	ldr	r0, [r5, #0]
 801e748:	8969      	ldrh	r1, [r5, #10]
 801e74a:	2204      	movs	r2, #4
 801e74c:	4408      	add	r0, r1
 801e74e:	f100 010d 	add.w	r1, r0, #13
 801e752:	4620      	mov	r0, r4
 801e754:	f005 fef8 	bl	8024548 <ble_memcpy>
 801e758:	e051      	b.n	801e7fe <pdu_trnsprt_hndlr_parse_data_cntrl+0x33a>
 801e75a:	4620      	mov	r0, r4
 801e75c:	2101      	movs	r1, #1
 801e75e:	2c00      	cmp	r4, #0
 801e760:	bf18      	it	ne
 801e762:	2001      	movne	r0, #1
 801e764:	f001 f85d 	bl	801f822 <bsp_assert>
 801e768:	6828      	ldr	r0, [r5, #0]
 801e76a:	8969      	ldrh	r1, [r5, #10]
 801e76c:	4408      	add	r0, r1
 801e76e:	7941      	ldrb	r1, [r0, #5]
 801e770:	7121      	strb	r1, [r4, #4]
 801e772:	7981      	ldrb	r1, [r0, #6]
 801e774:	79c2      	ldrb	r2, [r0, #7]
 801e776:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
 801e77a:	8021      	strh	r1, [r4, #0]
 801e77c:	7a01      	ldrb	r1, [r0, #8]
 801e77e:	7a40      	ldrb	r0, [r0, #9]
 801e780:	e01c      	b.n	801e7bc <pdu_trnsprt_hndlr_parse_data_cntrl+0x2f8>
 801e782:	2001      	movs	r0, #1
 801e784:	2101      	movs	r1, #1
 801e786:	f001 f84c 	bl	801f822 <bsp_assert>
 801e78a:	6828      	ldr	r0, [r5, #0]
 801e78c:	8969      	ldrh	r1, [r5, #10]
 801e78e:	4408      	add	r0, r1
 801e790:	7940      	ldrb	r0, [r0, #5]
 801e792:	7020      	strb	r0, [r4, #0]
 801e794:	6828      	ldr	r0, [r5, #0]
 801e796:	8969      	ldrh	r1, [r5, #10]
 801e798:	4408      	add	r0, r1
 801e79a:	e02e      	b.n	801e7fa <pdu_trnsprt_hndlr_parse_data_cntrl+0x336>
 801e79c:	4620      	mov	r0, r4
 801e79e:	2101      	movs	r1, #1
 801e7a0:	2c00      	cmp	r4, #0
 801e7a2:	bf18      	it	ne
 801e7a4:	2001      	movne	r0, #1
 801e7a6:	f001 f83c 	bl	801f822 <bsp_assert>
 801e7aa:	6828      	ldr	r0, [r5, #0]
 801e7ac:	8969      	ldrh	r1, [r5, #10]
 801e7ae:	4408      	add	r0, r1
 801e7b0:	7941      	ldrb	r1, [r0, #5]
 801e7b2:	7021      	strb	r1, [r4, #0]
 801e7b4:	7981      	ldrb	r1, [r0, #6]
 801e7b6:	7061      	strb	r1, [r4, #1]
 801e7b8:	79c1      	ldrb	r1, [r0, #7]
 801e7ba:	7a00      	ldrb	r0, [r0, #8]
 801e7bc:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
 801e7c0:	8060      	strh	r0, [r4, #2]
 801e7c2:	e01c      	b.n	801e7fe <pdu_trnsprt_hndlr_parse_data_cntrl+0x33a>
 801e7c4:	2c00      	cmp	r4, #0
 801e7c6:	4620      	mov	r0, r4
 801e7c8:	462e      	mov	r6, r5
 801e7ca:	bf18      	it	ne
 801e7cc:	2001      	movne	r0, #1
 801e7ce:	2101      	movs	r1, #1
 801e7d0:	2d00      	cmp	r5, #0
 801e7d2:	bf18      	it	ne
 801e7d4:	2601      	movne	r6, #1
 801e7d6:	f001 f824 	bl	801f822 <bsp_assert>
 801e7da:	4630      	mov	r0, r6
 801e7dc:	2101      	movs	r1, #1
 801e7de:	f001 f820 	bl	801f822 <bsp_assert>
 801e7e2:	6828      	ldr	r0, [r5, #0]
 801e7e4:	2101      	movs	r1, #1
 801e7e6:	2800      	cmp	r0, #0
 801e7e8:	bf18      	it	ne
 801e7ea:	2001      	movne	r0, #1
 801e7ec:	f001 f819 	bl	801f822 <bsp_assert>
 801e7f0:	6828      	ldr	r0, [r5, #0]
 801e7f2:	8969      	ldrh	r1, [r5, #10]
 801e7f4:	4408      	add	r0, r1
 801e7f6:	7941      	ldrb	r1, [r0, #5]
 801e7f8:	7021      	strb	r1, [r4, #0]
 801e7fa:	7980      	ldrb	r0, [r0, #6]
 801e7fc:	7060      	strb	r0, [r4, #1]
 801e7fe:	2000      	movs	r0, #0
 801e800:	b001      	add	sp, #4
 801e802:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801e804 <pdu_trnsprt_hndlr_get_payload_lngth>:
 801e804:	6801      	ldr	r1, [r0, #0]
 801e806:	8940      	ldrh	r0, [r0, #10]
 801e808:	4408      	add	r0, r1
 801e80a:	7840      	ldrb	r0, [r0, #1]
 801e80c:	4770      	bx	lr

0801e80e <allocate_data_packet>:
 801e80e:	b570      	push	{r4, r5, r6, lr}
 801e810:	4605      	mov	r5, r0
 801e812:	f249 4060 	movw	r0, #37984	@ 0x9460
 801e816:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801e81a:	460e      	mov	r6, r1
 801e81c:	f003 f90e 	bl	8021a3c <os_mem_pool_alloc>
 801e820:	2101      	movs	r1, #1
 801e822:	4604      	mov	r4, r0
 801e824:	2800      	cmp	r0, #0
 801e826:	bf18      	it	ne
 801e828:	2001      	movne	r0, #1
 801e82a:	f000 fffa 	bl	801f822 <bsp_assert>
 801e82e:	b17c      	cbz	r4, 801e850 <allocate_data_packet+0x42>
 801e830:	4620      	mov	r0, r4
 801e832:	2100      	movs	r1, #0
 801e834:	2210      	movs	r2, #16
 801e836:	f005 fed7 	bl	80245e8 <ble_memset>
 801e83a:	4630      	mov	r0, r6
 801e83c:	f003 f902 	bl	8021a44 <os_shrd_mem_alloc>
 801e840:	6020      	str	r0, [r4, #0]
 801e842:	b110      	cbz	r0, 801e84a <allocate_data_packet+0x3c>
 801e844:	6830      	ldr	r0, [r6, #0]
 801e846:	8120      	strh	r0, [r4, #8]
 801e848:	e003      	b.n	801e852 <allocate_data_packet+0x44>
 801e84a:	4620      	mov	r0, r4
 801e84c:	f003 f8f8 	bl	8021a40 <os_mem_pool_free>
 801e850:	2400      	movs	r4, #0
 801e852:	b105      	cbz	r5, 801e856 <allocate_data_packet+0x48>
 801e854:	606c      	str	r4, [r5, #4]
 801e856:	b134      	cbz	r4, 801e866 <allocate_data_packet+0x58>
 801e858:	6820      	ldr	r0, [r4, #0]
 801e85a:	b120      	cbz	r0, 801e866 <allocate_data_packet+0x58>
 801e85c:	3804      	subs	r0, #4
 801e85e:	2100      	movs	r1, #0
 801e860:	2204      	movs	r2, #4
 801e862:	f005 fec1 	bl	80245e8 <ble_memset>
 801e866:	4620      	mov	r0, r4
 801e868:	bd70      	pop	{r4, r5, r6, pc}

0801e86a <free_buff_hdr>:
 801e86a:	b5b0      	push	{r4, r5, r7, lr}
 801e86c:	2101      	movs	r1, #1
 801e86e:	4604      	mov	r4, r0
 801e870:	2800      	cmp	r0, #0
 801e872:	bf18      	it	ne
 801e874:	2001      	movne	r0, #1
 801e876:	f000 ffd4 	bl	801f822 <bsp_assert>
 801e87a:	7ba0      	ldrb	r0, [r4, #14]
 801e87c:	0740      	lsls	r0, r0, #29
 801e87e:	d40c      	bmi.n	801e89a <free_buff_hdr+0x30>
 801e880:	6820      	ldr	r0, [r4, #0]
 801e882:	2101      	movs	r1, #1
 801e884:	2800      	cmp	r0, #0
 801e886:	bf18      	it	ne
 801e888:	2001      	movne	r0, #1
 801e88a:	2501      	movs	r5, #1
 801e88c:	f000 ffc9 	bl	801f822 <bsp_assert>
 801e890:	6820      	ldr	r0, [r4, #0]
 801e892:	3804      	subs	r0, #4
 801e894:	f003 f8d4 	bl	8021a40 <os_mem_pool_free>
 801e898:	e000      	b.n	801e89c <free_buff_hdr+0x32>
 801e89a:	2500      	movs	r5, #0
 801e89c:	4620      	mov	r0, r4
 801e89e:	f003 f8cf 	bl	8021a40 <os_mem_pool_free>
 801e8a2:	4628      	mov	r0, r5
 801e8a4:	bdb0      	pop	{r4, r5, r7, pc}

0801e8a6 <get_nxt_data_packet>:
 801e8a6:	6840      	ldr	r0, [r0, #4]
 801e8a8:	4770      	bx	lr

0801e8aa <prvcy_mngr_reset>:
 801e8aa:	b5b0      	push	{r4, r5, r7, lr}
 801e8ac:	b082      	sub	sp, #8
 801e8ae:	f646 7450 	movw	r4, #28496	@ 0x6f50
 801e8b2:	f2c2 0400 	movt	r4, #8192	@ 0x2000
 801e8b6:	20aa      	movs	r0, #170	@ 0xaa
 801e8b8:	2500      	movs	r5, #0
 801e8ba:	f884 0038 	strb.w	r0, [r4, #56]	@ 0x38
 801e8be:	f104 0018 	add.w	r0, r4, #24
 801e8c2:	2100      	movs	r1, #0
 801e8c4:	2206      	movs	r2, #6
 801e8c6:	86e5      	strh	r5, [r4, #54]	@ 0x36
 801e8c8:	f005 fe8e 	bl	80245e8 <ble_memset>
 801e8cc:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801e8d0:	8620      	strh	r0, [r4, #48]	@ 0x30
 801e8d2:	2002      	movs	r0, #2
 801e8d4:	2100      	movs	r1, #0
 801e8d6:	2200      	movs	r2, #0
 801e8d8:	2300      	movs	r3, #0
 801e8da:	f884 503a 	strb.w	r5, [r4, #58]	@ 0x3a
 801e8de:	9500      	str	r5, [sp, #0]
 801e8e0:	f000 f802 	bl	801e8e8 <prvcy_mngr_add_rmv_clr_fw_reslvng_list>
 801e8e4:	b002      	add	sp, #8
 801e8e6:	bdb0      	pop	{r4, r5, r7, pc}

0801e8e8 <prvcy_mngr_add_rmv_clr_fw_reslvng_list>:
 801e8e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e8ec:	b089      	sub	sp, #36	@ 0x24
 801e8ee:	f646 7650 	movw	r6, #28496	@ 0x6f50
 801e8f2:	f2c2 0600 	movt	r6, #8192	@ 0x2000
 801e8f6:	4689      	mov	r9, r1
 801e8f8:	f896 1036 	ldrb.w	r1, [r6, #54]	@ 0x36
 801e8fc:	469b      	mov	fp, r3
 801e8fe:	4614      	mov	r4, r2
 801e900:	4607      	mov	r7, r0
 801e902:	2901      	cmp	r1, #1
 801e904:	f04f 0000 	mov.w	r0, #0
 801e908:	e9cd 0003 	strd	r0, r0, [sp, #12]
 801e90c:	e9cd 0001 	strd	r0, r0, [sp, #4]
 801e910:	d103      	bne.n	801e91a <prvcy_mngr_add_rmv_clr_fw_reslvng_list+0x32>
 801e912:	f7ff f932 	bl	801db7a <non_conn_mngr_event_status_check>
 801e916:	4605      	mov	r5, r0
 801e918:	b918      	cbnz	r0, 801e922 <prvcy_mngr_add_rmv_clr_fw_reslvng_list+0x3a>
 801e91a:	2f02      	cmp	r7, #2
 801e91c:	d005      	beq.n	801e92a <prvcy_mngr_add_rmv_clr_fw_reslvng_list+0x42>
 801e91e:	b924      	cbnz	r4, 801e92a <prvcy_mngr_add_rmv_clr_fw_reslvng_list+0x42>
 801e920:	2511      	movs	r5, #17
 801e922:	4628      	mov	r0, r5
 801e924:	b009      	add	sp, #36	@ 0x24
 801e926:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e92a:	b1f7      	cbz	r7, 801e96a <prvcy_mngr_add_rmv_clr_fw_reslvng_list+0x82>
 801e92c:	2f02      	cmp	r7, #2
 801e92e:	d06f      	beq.n	801ea10 <prvcy_mngr_add_rmv_clr_fw_reslvng_list+0x128>
 801e930:	2f01      	cmp	r7, #1
 801e932:	f040 8085 	bne.w	801ea40 <prvcy_mngr_add_rmv_clr_fw_reslvng_list+0x158>
 801e936:	f646 778c 	movw	r7, #28556	@ 0x6f8c
 801e93a:	2600      	movs	r6, #0
 801e93c:	f2c2 0700 	movt	r7, #8192	@ 0x2000
 801e940:	19bd      	adds	r5, r7, r6
 801e942:	4620      	mov	r0, r4
 801e944:	4629      	mov	r1, r5
 801e946:	2206      	movs	r2, #6
 801e948:	f005 fe86 	bl	8024658 <ble_memcmp>
 801e94c:	f88d 0014 	strb.w	r0, [sp, #20]
 801e950:	f89d 0014 	ldrb.w	r0, [sp, #20]
 801e954:	b918      	cbnz	r0, 801e95e <prvcy_mngr_add_rmv_clr_fw_reslvng_list+0x76>
 801e956:	7e68      	ldrb	r0, [r5, #25]
 801e958:	4548      	cmp	r0, r9
 801e95a:	f000 80a2 	beq.w	801eaa2 <prvcy_mngr_add_rmv_clr_fw_reslvng_list+0x1ba>
 801e95e:	3644      	adds	r6, #68	@ 0x44
 801e960:	f5b6 7faa 	cmp.w	r6, #340	@ 0x154
 801e964:	d1ec      	bne.n	801e940 <prvcy_mngr_add_rmv_clr_fw_reslvng_list+0x58>
 801e966:	2502      	movs	r5, #2
 801e968:	e7db      	b.n	801e922 <prvcy_mngr_add_rmv_clr_fw_reslvng_list+0x3a>
 801e96a:	6af0      	ldr	r0, [r6, #44]	@ 0x2c
 801e96c:	b9a0      	cbnz	r0, 801e998 <prvcy_mngr_add_rmv_clr_fw_reslvng_list+0xb0>
 801e96e:	f24f 50b1 	movw	r0, #62897	@ 0xf5b1
 801e972:	f6c0 0001 	movt	r0, #2049	@ 0x801
 801e976:	2101      	movs	r1, #1
 801e978:	2200      	movs	r2, #0
 801e97a:	f003 fa27 	bl	8021dcc <os_timer_create>
 801e97e:	2800      	cmp	r0, #0
 801e980:	62f0      	str	r0, [r6, #44]	@ 0x2c
 801e982:	d040      	beq.n	801ea06 <prvcy_mngr_add_rmv_clr_fw_reslvng_list+0x11e>
 801e984:	f003 fb56 	bl	8022034 <os_timer_stop>
 801e988:	8e31      	ldrh	r1, [r6, #48]	@ 0x30
 801e98a:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 801e98e:	6af0      	ldr	r0, [r6, #44]	@ 0x2c
 801e990:	fb01 f102 	mul.w	r1, r1, r2
 801e994:	f003 fa93 	bl	8021ebe <os_timer_start>
 801e998:	f8dd 8048 	ldr.w	r8, [sp, #72]	@ 0x48
 801e99c:	f646 758c 	movw	r5, #28556	@ 0x6f8c
 801e9a0:	2600      	movs	r6, #0
 801e9a2:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 801e9a6:	f10d 0a14 	add.w	sl, sp, #20
 801e9aa:	e9cd 6607 	strd	r6, r6, [sp, #28]
 801e9ae:	e9cd 6605 	strd	r6, r6, [sp, #20]
 801e9b2:	bf00      	nop
 801e9b4:	19af      	adds	r7, r5, r6
 801e9b6:	7e38      	ldrb	r0, [r7, #24]
 801e9b8:	2801      	cmp	r0, #1
 801e9ba:	d117      	bne.n	801e9ec <prvcy_mngr_add_rmv_clr_fw_reslvng_list+0x104>
 801e9bc:	4620      	mov	r0, r4
 801e9be:	4639      	mov	r1, r7
 801e9c0:	2206      	movs	r2, #6
 801e9c2:	f005 fe49 	bl	8024658 <ble_memcmp>
 801e9c6:	b918      	cbnz	r0, 801e9d0 <prvcy_mngr_add_rmv_clr_fw_reslvng_list+0xe8>
 801e9c8:	7e78      	ldrb	r0, [r7, #25]
 801e9ca:	4548      	cmp	r0, r9
 801e9cc:	f000 8081 	beq.w	801ead2 <prvcy_mngr_add_rmv_clr_fw_reslvng_list+0x1ea>
 801e9d0:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 801e9d4:	4658      	mov	r0, fp
 801e9d6:	2210      	movs	r2, #16
 801e9d8:	f005 fe3e 	bl	8024658 <ble_memcmp>
 801e9dc:	b930      	cbnz	r0, 801e9ec <prvcy_mngr_add_rmv_clr_fw_reslvng_list+0x104>
 801e9de:	4658      	mov	r0, fp
 801e9e0:	4651      	mov	r1, sl
 801e9e2:	2210      	movs	r2, #16
 801e9e4:	f005 fe38 	bl	8024658 <ble_memcmp>
 801e9e8:	2800      	cmp	r0, #0
 801e9ea:	d172      	bne.n	801ead2 <prvcy_mngr_add_rmv_clr_fw_reslvng_list+0x1ea>
 801e9ec:	3644      	adds	r6, #68	@ 0x44
 801e9ee:	f5b6 7faa 	cmp.w	r6, #340	@ 0x154
 801e9f2:	d1df      	bne.n	801e9b4 <prvcy_mngr_add_rmv_clr_fw_reslvng_list+0xcc>
 801e9f4:	2000      	movs	r0, #0
 801e9f6:	bf00      	nop
 801e9f8:	182f      	adds	r7, r5, r0
 801e9fa:	7e39      	ldrb	r1, [r7, #24]
 801e9fc:	b329      	cbz	r1, 801ea4a <prvcy_mngr_add_rmv_clr_fw_reslvng_list+0x162>
 801e9fe:	3044      	adds	r0, #68	@ 0x44
 801ea00:	f5b0 7faa 	cmp.w	r0, #340	@ 0x154
 801ea04:	d1f8      	bne.n	801e9f8 <prvcy_mngr_add_rmv_clr_fw_reslvng_list+0x110>
 801ea06:	2042      	movs	r0, #66	@ 0x42
 801ea08:	f000 ff56 	bl	801f8b8 <bsp_debug_gpio_toggle>
 801ea0c:	2507      	movs	r5, #7
 801ea0e:	e788      	b.n	801e922 <prvcy_mngr_add_rmv_clr_fw_reslvng_list+0x3a>
 801ea10:	f646 708c 	movw	r0, #28556	@ 0x6f8c
 801ea14:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801ea18:	2100      	movs	r1, #0
 801ea1a:	f44f 72aa 	mov.w	r2, #340	@ 0x154
 801ea1e:	2500      	movs	r5, #0
 801ea20:	f005 fde2 	bl	80245e8 <ble_memset>
 801ea24:	2003      	movs	r0, #3
 801ea26:	f7f9 f88b 	bl	8017b40 <llhwc_lst_clr>
 801ea2a:	2004      	movs	r0, #4
 801ea2c:	f7f9 f888 	bl	8017b40 <llhwc_lst_clr>
 801ea30:	f247 00e0 	movw	r0, #28896	@ 0x70e0
 801ea34:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801ea38:	7005      	strb	r5, [r0, #0]
 801ea3a:	f000 fcd9 	bl	801f3f0 <prvcy_mngr_free_tmr>
 801ea3e:	e770      	b.n	801e922 <prvcy_mngr_add_rmv_clr_fw_reslvng_list+0x3a>
 801ea40:	2043      	movs	r0, #67	@ 0x43
 801ea42:	f000 ff39 	bl	801f8b8 <bsp_debug_gpio_toggle>
 801ea46:	250c      	movs	r5, #12
 801ea48:	e76b      	b.n	801e922 <prvcy_mngr_add_rmv_clr_fw_reslvng_list+0x3a>
 801ea4a:	4638      	mov	r0, r7
 801ea4c:	4621      	mov	r1, r4
 801ea4e:	2206      	movs	r2, #6
 801ea50:	f887 9019 	strb.w	r9, [r7, #25]
 801ea54:	f005 fd78 	bl	8024548 <ble_memcpy>
 801ea58:	f107 0420 	add.w	r4, r7, #32
 801ea5c:	4620      	mov	r0, r4
 801ea5e:	4641      	mov	r1, r8
 801ea60:	2210      	movs	r2, #16
 801ea62:	f005 fd71 	bl	8024548 <ble_memcpy>
 801ea66:	f107 0530 	add.w	r5, r7, #48	@ 0x30
 801ea6a:	4628      	mov	r0, r5
 801ea6c:	4659      	mov	r1, fp
 801ea6e:	2210      	movs	r2, #16
 801ea70:	f005 fd6a 	bl	8024548 <ble_memcpy>
 801ea74:	2601      	movs	r6, #1
 801ea76:	a901      	add	r1, sp, #4
 801ea78:	4628      	mov	r0, r5
 801ea7a:	2210      	movs	r2, #16
 801ea7c:	763e      	strb	r6, [r7, #24]
 801ea7e:	f005 fdeb 	bl	8024658 <ble_memcmp>
 801ea82:	b340      	cbz	r0, 801ead6 <prvcy_mngr_add_rmv_clr_fw_reslvng_list+0x1ee>
 801ea84:	7e7a      	ldrb	r2, [r7, #25]
 801ea86:	2600      	movs	r6, #0
 801ea88:	2000      	movs	r0, #0
 801ea8a:	2105      	movs	r1, #5
 801ea8c:	463b      	mov	r3, r7
 801ea8e:	f887 6040 	strb.w	r6, [r7, #64]	@ 0x40
 801ea92:	9600      	str	r6, [sp, #0]
 801ea94:	f7f9 f9e4 	bl	8017e60 <llhwc_lst_add_rmv_dev>
 801ea98:	4605      	mov	r5, r0
 801ea9a:	2800      	cmp	r0, #0
 801ea9c:	f47f af41 	bne.w	801e922 <prvcy_mngr_add_rmv_clr_fw_reslvng_list+0x3a>
 801eaa0:	e01b      	b.n	801eada <prvcy_mngr_add_rmv_clr_fw_reslvng_list+0x1f2>
 801eaa2:	f247 04e0 	movw	r4, #28896	@ 0x70e0
 801eaa6:	f2c2 0400 	movt	r4, #8192	@ 0x2000
 801eaaa:	7821      	ldrb	r1, [r4, #0]
 801eaac:	2000      	movs	r0, #0
 801eaae:	7628      	strb	r0, [r5, #24]
 801eab0:	1e48      	subs	r0, r1, #1
 801eab2:	7020      	strb	r0, [r4, #0]
 801eab4:	4628      	mov	r0, r5
 801eab6:	2100      	movs	r1, #0
 801eab8:	2244      	movs	r2, #68	@ 0x44
 801eaba:	f005 fd95 	bl	80245e8 <ble_memset>
 801eabe:	7820      	ldrb	r0, [r4, #0]
 801eac0:	b908      	cbnz	r0, 801eac6 <prvcy_mngr_add_rmv_clr_fw_reslvng_list+0x1de>
 801eac2:	f000 fc95 	bl	801f3f0 <prvcy_mngr_free_tmr>
 801eac6:	f5b6 7faa 	cmp.w	r6, #340	@ 0x154
 801eaca:	f43f af4c 	beq.w	801e966 <prvcy_mngr_add_rmv_clr_fw_reslvng_list+0x7e>
 801eace:	2500      	movs	r5, #0
 801ead0:	e727      	b.n	801e922 <prvcy_mngr_add_rmv_clr_fw_reslvng_list+0x3a>
 801ead2:	2512      	movs	r5, #18
 801ead4:	e725      	b.n	801e922 <prvcy_mngr_add_rmv_clr_fw_reslvng_list+0x3a>
 801ead6:	f887 6040 	strb.w	r6, [r7, #64]	@ 0x40
 801eada:	f247 00e0 	movw	r0, #28896	@ 0x70e0
 801eade:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801eae2:	7801      	ldrb	r1, [r0, #0]
 801eae4:	2210      	movs	r2, #16
 801eae6:	3101      	adds	r1, #1
 801eae8:	7001      	strb	r1, [r0, #0]
 801eaea:	a901      	add	r1, sp, #4
 801eaec:	4620      	mov	r0, r4
 801eaee:	f005 fdb3 	bl	8024658 <ble_memcmp>
 801eaf2:	f107 0108 	add.w	r1, r7, #8
 801eaf6:	b120      	cbz	r0, 801eb02 <prvcy_mngr_add_rmv_clr_fw_reslvng_list+0x21a>
 801eaf8:	4620      	mov	r0, r4
 801eafa:	f000 fc3f 	bl	801f37c <prvcy_mngr_addr_gen>
 801eafe:	4605      	mov	r5, r0
 801eb00:	e70f      	b.n	801e922 <prvcy_mngr_add_rmv_clr_fw_reslvng_list+0x3a>
 801eb02:	4608      	mov	r0, r1
 801eb04:	2100      	movs	r1, #0
 801eb06:	2206      	movs	r2, #6
 801eb08:	2500      	movs	r5, #0
 801eb0a:	f005 fd6d 	bl	80245e8 <ble_memset>
 801eb0e:	e708      	b.n	801e922 <prvcy_mngr_add_rmv_clr_fw_reslvng_list+0x3a>

0801eb10 <prvcy_mngr_addr_hndlr>:
 801eb10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eb14:	b083      	sub	sp, #12
 801eb16:	f646 7850 	movw	r8, #28496	@ 0x6f50
 801eb1a:	f2c2 0800 	movt	r8, #8192	@ 0x2000
 801eb1e:	4683      	mov	fp, r0
 801eb20:	f898 0025 	ldrb.w	r0, [r8, #37]	@ 0x25
 801eb24:	468a      	mov	sl, r1
 801eb26:	2700      	movs	r7, #0
 801eb28:	2801      	cmp	r0, #1
 801eb2a:	f04f 0001 	mov.w	r0, #1
 801eb2e:	9702      	str	r7, [sp, #8]
 801eb30:	f040 811f 	bne.w	801ed72 <prvcy_mngr_addr_hndlr+0x262>
 801eb34:	f898 1005 	ldrb.w	r1, [r8, #5]
 801eb38:	f001 01c0 	and.w	r1, r1, #192	@ 0xc0
 801eb3c:	2940      	cmp	r1, #64	@ 0x40
 801eb3e:	f040 8118 	bne.w	801ed72 <prvcy_mngr_addr_hndlr+0x262>
 801eb42:	2001      	movs	r0, #1
 801eb44:	f888 0024 	strb.w	r0, [r8, #36]	@ 0x24
 801eb48:	f10d 0306 	add.w	r3, sp, #6
 801eb4c:	2003      	movs	r0, #3
 801eb4e:	2101      	movs	r1, #1
 801eb50:	4642      	mov	r2, r8
 801eb52:	f7f9 f8e2 	bl	8017d1a <llhwc_lst_search>
 801eb56:	4607      	mov	r7, r0
 801eb58:	2800      	cmp	r0, #0
 801eb5a:	f040 817b 	bne.w	801ee54 <prvcy_mngr_addr_hndlr+0x344>
 801eb5e:	f89d 0006 	ldrb.w	r0, [sp, #6]
 801eb62:	07c1      	lsls	r1, r0, #31
 801eb64:	d134      	bne.n	801ebd0 <prvcy_mngr_addr_hndlr+0xc0>
 801eb66:	f898 1029 	ldrb.w	r1, [r8, #41]	@ 0x29
 801eb6a:	2905      	cmp	r1, #5
 801eb6c:	d10a      	bne.n	801eb84 <prvcy_mngr_addr_hndlr+0x74>
 801eb6e:	f898 1034 	ldrb.w	r1, [r8, #52]	@ 0x34
 801eb72:	f001 01fd 	and.w	r1, r1, #253	@ 0xfd
 801eb76:	2901      	cmp	r1, #1
 801eb78:	d104      	bne.n	801eb84 <prvcy_mngr_addr_hndlr+0x74>
 801eb7a:	f7f9 fafb 	bl	8018174 <llhwc_lst_read_indicators>
 801eb7e:	0740      	lsls	r0, r0, #29
 801eb80:	f140 8167 	bpl.w	801ee52 <prvcy_mngr_addr_hndlr+0x342>
 801eb84:	f10d 0106 	add.w	r1, sp, #6
 801eb88:	aa02      	add	r2, sp, #8
 801eb8a:	f10d 0307 	add.w	r3, sp, #7
 801eb8e:	2003      	movs	r0, #3
 801eb90:	f000 faba 	bl	801f108 <prvcy_mngr_srch_fw_reslvng_list>
 801eb94:	9a02      	ldr	r2, [sp, #8]
 801eb96:	2a00      	cmp	r2, #0
 801eb98:	d073      	beq.n	801ec82 <prvcy_mngr_addr_hndlr+0x172>
 801eb9a:	f89d 1007 	ldrb.w	r1, [sp, #7]
 801eb9e:	f10d 0306 	add.w	r3, sp, #6
 801eba2:	1c88      	adds	r0, r1, #2
 801eba4:	f888 0026 	strb.w	r0, [r8, #38]	@ 0x26
 801eba8:	2006      	movs	r0, #6
 801ebaa:	f8c8 2020 	str.w	r2, [r8, #32]
 801ebae:	f7f9 f8b4 	bl	8017d1a <llhwc_lst_search>
 801ebb2:	4607      	mov	r7, r0
 801ebb4:	2800      	cmp	r0, #0
 801ebb6:	f040 814d 	bne.w	801ee54 <prvcy_mngr_addr_hndlr+0x344>
 801ebba:	f89d 1006 	ldrb.w	r1, [sp, #6]
 801ebbe:	07c8      	lsls	r0, r1, #31
 801ebc0:	d165      	bne.n	801ec8e <prvcy_mngr_addr_hndlr+0x17e>
 801ebc2:	2006      	movs	r0, #6
 801ebc4:	2200      	movs	r2, #0
 801ebc6:	2700      	movs	r7, #0
 801ebc8:	f7f9 fadd 	bl	8018186 <llhwc_lst_edit_indicators>
 801ebcc:	2001      	movs	r0, #1
 801ebce:	e0d0      	b.n	801ed72 <prvcy_mngr_addr_hndlr+0x262>
 801ebd0:	f646 728c 	movw	r2, #28556	@ 0x6f8c
 801ebd4:	f646 7350 	movw	r3, #28496	@ 0x6f50
 801ebd8:	2500      	movs	r5, #0
 801ebda:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 801ebde:	2000      	movs	r0, #0
 801ebe0:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 801ebe4:	2700      	movs	r7, #0
 801ebe6:	eb05 1105 	add.w	r1, r5, r5, lsl #4
 801ebea:	eb02 0681 	add.w	r6, r2, r1, lsl #2
 801ebee:	bf00      	nop
 801ebf0:	7e31      	ldrb	r1, [r6, #24]
 801ebf2:	2901      	cmp	r1, #1
 801ebf4:	d005      	beq.n	801ec02 <prvcy_mngr_addr_hndlr+0xf2>
 801ebf6:	3501      	adds	r5, #1
 801ebf8:	2d05      	cmp	r5, #5
 801ebfa:	f106 0644 	add.w	r6, r6, #68	@ 0x44
 801ebfe:	d1f7      	bne.n	801ebf0 <prvcy_mngr_addr_hndlr+0xe0>
 801ec00:	e014      	b.n	801ec2c <prvcy_mngr_addr_hndlr+0x11c>
 801ec02:	f106 0030 	add.w	r0, r6, #48	@ 0x30
 801ec06:	4619      	mov	r1, r3
 801ec08:	4691      	mov	r9, r2
 801ec0a:	461c      	mov	r4, r3
 801ec0c:	f000 f945 	bl	801ee9a <prvcy_mngr_addr_rsln>
 801ec10:	280f      	cmp	r0, #15
 801ec12:	f040 808c 	bne.w	801ed2e <prvcy_mngr_addr_hndlr+0x21e>
 801ec16:	2d04      	cmp	r5, #4
 801ec18:	f105 0501 	add.w	r5, r5, #1
 801ec1c:	f04f 070f 	mov.w	r7, #15
 801ec20:	f04f 0001 	mov.w	r0, #1
 801ec24:	4623      	mov	r3, r4
 801ec26:	464a      	mov	r2, r9
 801ec28:	d1dd      	bne.n	801ebe6 <prvcy_mngr_addr_hndlr+0xd6>
 801ec2a:	e002      	b.n	801ec32 <prvcy_mngr_addr_hndlr+0x122>
 801ec2c:	07c0      	lsls	r0, r0, #31
 801ec2e:	f000 8094 	beq.w	801ed5a <prvcy_mngr_addr_hndlr+0x24a>
 801ec32:	f1bb 0f00 	cmp.w	fp, #0
 801ec36:	d02d      	beq.n	801ec94 <prvcy_mngr_addr_hndlr+0x184>
 801ec38:	f893 2025 	ldrb.w	r2, [r3, #37]	@ 0x25
 801ec3c:	2000      	movs	r0, #0
 801ec3e:	2103      	movs	r1, #3
 801ec40:	f10d 0506 	add.w	r5, sp, #6
 801ec44:	461c      	mov	r4, r3
 801ec46:	9500      	str	r5, [sp, #0]
 801ec48:	f7f9 f90a 	bl	8017e60 <llhwc_lst_add_rmv_dev>
 801ec4c:	b3b0      	cbz	r0, 801ecbc <prvcy_mngr_addr_hndlr+0x1ac>
 801ec4e:	4607      	mov	r7, r0
 801ec50:	2807      	cmp	r0, #7
 801ec52:	f040 80ff 	bne.w	801ee54 <prvcy_mngr_addr_hndlr+0x344>
 801ec56:	2003      	movs	r0, #3
 801ec58:	f7fe f892 	bl	801cd80 <non_conn_mngr_remove_random_addr_list>
 801ec5c:	4607      	mov	r7, r0
 801ec5e:	2800      	cmp	r0, #0
 801ec60:	f040 80f8 	bne.w	801ee54 <prvcy_mngr_addr_hndlr+0x344>
 801ec64:	f894 2025 	ldrb.w	r2, [r4, #37]	@ 0x25
 801ec68:	4623      	mov	r3, r4
 801ec6a:	2000      	movs	r0, #0
 801ec6c:	2103      	movs	r1, #3
 801ec6e:	9500      	str	r5, [sp, #0]
 801ec70:	f7f9 f8f6 	bl	8017e60 <llhwc_lst_add_rmv_dev>
 801ec74:	b310      	cbz	r0, 801ecbc <prvcy_mngr_addr_hndlr+0x1ac>
 801ec76:	4607      	mov	r7, r0
 801ec78:	2000      	movs	r0, #0
 801ec7a:	2101      	movs	r1, #1
 801ec7c:	f000 fdd1 	bl	801f822 <bsp_assert>
 801ec80:	e0e8      	b.n	801ee54 <prvcy_mngr_addr_hndlr+0x344>
 801ec82:	f898 0025 	ldrb.w	r0, [r8, #37]	@ 0x25
 801ec86:	f8c8 8020 	str.w	r8, [r8, #32]
 801ec8a:	f888 0026 	strb.w	r0, [r8, #38]	@ 0x26
 801ec8e:	2001      	movs	r0, #1
 801ec90:	2700      	movs	r7, #0
 801ec92:	e06e      	b.n	801ed72 <prvcy_mngr_addr_hndlr+0x262>
 801ec94:	f893 0029 	ldrb.w	r0, [r3, #41]	@ 0x29
 801ec98:	f10d 0506 	add.w	r5, sp, #6
 801ec9c:	2805      	cmp	r0, #5
 801ec9e:	d115      	bne.n	801eccc <prvcy_mngr_addr_hndlr+0x1bc>
 801eca0:	f893 0034 	ldrb.w	r0, [r3, #52]	@ 0x34
 801eca4:	270f      	movs	r7, #15
 801eca6:	f000 00fd 	and.w	r0, r0, #253	@ 0xfd
 801ecaa:	2801      	cmp	r0, #1
 801ecac:	f000 80d2 	beq.w	801ee54 <prvcy_mngr_addr_hndlr+0x344>
 801ecb0:	f893 0028 	ldrb.w	r0, [r3, #40]	@ 0x28
 801ecb4:	4619      	mov	r1, r3
 801ecb6:	2801      	cmp	r0, #1
 801ecb8:	d110      	bne.n	801ecdc <prvcy_mngr_addr_hndlr+0x1cc>
 801ecba:	e0cb      	b.n	801ee54 <prvcy_mngr_addr_hndlr+0x344>
 801ecbc:	f89d 1006 	ldrb.w	r1, [sp, #6]
 801ecc0:	2000      	movs	r0, #0
 801ecc2:	2201      	movs	r2, #1
 801ecc4:	2700      	movs	r7, #0
 801ecc6:	f7f9 fa5e 	bl	8018186 <llhwc_lst_edit_indicators>
 801ecca:	e045      	b.n	801ed58 <prvcy_mngr_addr_hndlr+0x248>
 801eccc:	4619      	mov	r1, r3
 801ecce:	2809      	cmp	r0, #9
 801ecd0:	d104      	bne.n	801ecdc <prvcy_mngr_addr_hndlr+0x1cc>
 801ecd2:	f891 0028 	ldrb.w	r0, [r1, #40]	@ 0x28
 801ecd6:	2809      	cmp	r0, #9
 801ecd8:	f000 80bb 	beq.w	801ee52 <prvcy_mngr_addr_hndlr+0x342>
 801ecdc:	f891 2025 	ldrb.w	r2, [r1, #37]	@ 0x25
 801ece0:	460b      	mov	r3, r1
 801ece2:	6209      	str	r1, [r1, #32]
 801ece4:	f881 2026 	strb.w	r2, [r1, #38]	@ 0x26
 801ece8:	2000      	movs	r0, #0
 801ecea:	2103      	movs	r1, #3
 801ecec:	461c      	mov	r4, r3
 801ecee:	9500      	str	r5, [sp, #0]
 801ecf0:	f7f9 f8b6 	bl	8017e60 <llhwc_lst_add_rmv_dev>
 801ecf4:	4607      	mov	r7, r0
 801ecf6:	b378      	cbz	r0, 801ed58 <prvcy_mngr_addr_hndlr+0x248>
 801ecf8:	2f07      	cmp	r7, #7
 801ecfa:	f040 80ab 	bne.w	801ee54 <prvcy_mngr_addr_hndlr+0x344>
 801ecfe:	2003      	movs	r0, #3
 801ed00:	f7fe f83e 	bl	801cd80 <non_conn_mngr_remove_random_addr_list>
 801ed04:	4607      	mov	r7, r0
 801ed06:	2800      	cmp	r0, #0
 801ed08:	f040 80a4 	bne.w	801ee54 <prvcy_mngr_addr_hndlr+0x344>
 801ed0c:	f894 2025 	ldrb.w	r2, [r4, #37]	@ 0x25
 801ed10:	2000      	movs	r0, #0
 801ed12:	2103      	movs	r1, #3
 801ed14:	4623      	mov	r3, r4
 801ed16:	9500      	str	r5, [sp, #0]
 801ed18:	2700      	movs	r7, #0
 801ed1a:	f7f9 f8a1 	bl	8017e60 <llhwc_lst_add_rmv_dev>
 801ed1e:	b1d8      	cbz	r0, 801ed58 <prvcy_mngr_addr_hndlr+0x248>
 801ed20:	4605      	mov	r5, r0
 801ed22:	2000      	movs	r0, #0
 801ed24:	2101      	movs	r1, #1
 801ed26:	f000 fd7c 	bl	801f822 <bsp_assert>
 801ed2a:	462f      	mov	r7, r5
 801ed2c:	e092      	b.n	801ee54 <prvcy_mngr_addr_hndlr+0x344>
 801ed2e:	4607      	mov	r7, r0
 801ed30:	2800      	cmp	r0, #0
 801ed32:	f040 808f 	bne.w	801ee54 <prvcy_mngr_addr_hndlr+0x344>
 801ed36:	7e77      	ldrb	r7, [r6, #25]
 801ed38:	b2ea      	uxtb	r2, r5
 801ed3a:	1cb8      	adds	r0, r7, #2
 801ed3c:	f884 0026 	strb.w	r0, [r4, #38]	@ 0x26
 801ed40:	4650      	mov	r0, sl
 801ed42:	4659      	mov	r1, fp
 801ed44:	4633      	mov	r3, r6
 801ed46:	6226      	str	r6, [r4, #32]
 801ed48:	9700      	str	r7, [sp, #0]
 801ed4a:	f000 f8d2 	bl	801eef2 <prvcy_mngr_add_rmv_hw_reslvng_list>
 801ed4e:	4607      	mov	r7, r0
 801ed50:	2800      	cmp	r0, #0
 801ed52:	f040 807f 	bne.w	801ee54 <prvcy_mngr_addr_hndlr+0x344>
 801ed56:	2700      	movs	r7, #0
 801ed58:	4623      	mov	r3, r4
 801ed5a:	f893 0028 	ldrb.w	r0, [r3, #40]	@ 0x28
 801ed5e:	f893 1029 	ldrb.w	r1, [r3, #41]	@ 0x29
 801ed62:	f080 0003 	eor.w	r0, r0, #3
 801ed66:	f081 0101 	eor.w	r1, r1, #1
 801ed6a:	4308      	orrs	r0, r1
 801ed6c:	fab0 f080 	clz	r0, r0
 801ed70:	0940      	lsrs	r0, r0, #5
 801ed72:	f898 1028 	ldrb.w	r1, [r8, #40]	@ 0x28
 801ed76:	2903      	cmp	r1, #3
 801ed78:	f04f 0100 	mov.w	r1, #0
 801ed7c:	d10b      	bne.n	801ed96 <prvcy_mngr_addr_hndlr+0x286>
 801ed7e:	f898 2029 	ldrb.w	r2, [r8, #41]	@ 0x29
 801ed82:	2a01      	cmp	r2, #1
 801ed84:	d107      	bne.n	801ed96 <prvcy_mngr_addr_hndlr+0x286>
 801ed86:	f898 1035 	ldrb.w	r1, [r8, #53]	@ 0x35
 801ed8a:	f001 01fe 	and.w	r1, r1, #254	@ 0xfe
 801ed8e:	3902      	subs	r1, #2
 801ed90:	fab1 f181 	clz	r1, r1
 801ed94:	0949      	lsrs	r1, r1, #5
 801ed96:	f898 300d 	ldrb.w	r3, [r8, #13]
 801ed9a:	f898 2027 	ldrb.w	r2, [r8, #39]	@ 0x27
 801ed9e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 801eda2:	f082 0201 	eor.w	r2, r2, #1
 801eda6:	f083 0340 	eor.w	r3, r3, #64	@ 0x40
 801edaa:	431a      	orrs	r2, r3
 801edac:	fab2 f282 	clz	r2, r2
 801edb0:	0952      	lsrs	r2, r2, #5
 801edb2:	4010      	ands	r0, r2
 801edb4:	2801      	cmp	r0, #1
 801edb6:	d14d      	bne.n	801ee54 <prvcy_mngr_addr_hndlr+0x344>
 801edb8:	f1bb 0201 	subs.w	r2, fp, #1
 801edbc:	f081 0101 	eor.w	r1, r1, #1
 801edc0:	bf18      	it	ne
 801edc2:	2201      	movne	r2, #1
 801edc4:	2000      	movs	r0, #0
 801edc6:	420a      	tst	r2, r1
 801edc8:	f888 0024 	strb.w	r0, [r8, #36]	@ 0x24
 801edcc:	d142      	bne.n	801ee54 <prvcy_mngr_addr_hndlr+0x344>
 801edce:	f646 708c 	movw	r0, #28556	@ 0x6f8c
 801edd2:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801edd6:	f100 0520 	add.w	r5, r0, #32
 801edda:	2400      	movs	r4, #0
 801eddc:	f108 0608 	add.w	r6, r8, #8
 801ede0:	4628      	mov	r0, r5
 801ede2:	4631      	mov	r1, r6
 801ede4:	f000 f859 	bl	801ee9a <prvcy_mngr_addr_rsln>
 801ede8:	280f      	cmp	r0, #15
 801edea:	d122      	bne.n	801ee32 <prvcy_mngr_addr_hndlr+0x322>
 801edec:	3401      	adds	r4, #1
 801edee:	2c05      	cmp	r4, #5
 801edf0:	f105 0544 	add.w	r5, r5, #68	@ 0x44
 801edf4:	d1f4      	bne.n	801ede0 <prvcy_mngr_addr_hndlr+0x2d0>
 801edf6:	f898 0028 	ldrb.w	r0, [r8, #40]	@ 0x28
 801edfa:	2803      	cmp	r0, #3
 801edfc:	d129      	bne.n	801ee52 <prvcy_mngr_addr_hndlr+0x342>
 801edfe:	f898 0035 	ldrb.w	r0, [r8, #53]	@ 0x35
 801ee02:	f000 00fe 	and.w	r0, r0, #254	@ 0xfe
 801ee06:	2802      	cmp	r0, #2
 801ee08:	d123      	bne.n	801ee52 <prvcy_mngr_addr_hndlr+0x342>
 801ee0a:	f898 1027 	ldrb.w	r1, [r8, #39]	@ 0x27
 801ee0e:	f10d 0506 	add.w	r5, sp, #6
 801ee12:	2004      	movs	r0, #4
 801ee14:	4632      	mov	r2, r6
 801ee16:	462b      	mov	r3, r5
 801ee18:	f7f8 ff7f 	bl	8017d1a <llhwc_lst_search>
 801ee1c:	4607      	mov	r7, r0
 801ee1e:	b9c8      	cbnz	r0, 801ee54 <prvcy_mngr_addr_hndlr+0x344>
 801ee20:	f89d 0006 	ldrb.w	r0, [sp, #6]
 801ee24:	07c0      	lsls	r0, r0, #31
 801ee26:	d119      	bne.n	801ee5c <prvcy_mngr_addr_hndlr+0x34c>
 801ee28:	2001      	movs	r0, #1
 801ee2a:	2700      	movs	r7, #0
 801ee2c:	f888 0037 	strb.w	r0, [r8, #55]	@ 0x37
 801ee30:	e010      	b.n	801ee54 <prvcy_mngr_addr_hndlr+0x344>
 801ee32:	4607      	mov	r7, r0
 801ee34:	b970      	cbnz	r0, 801ee54 <prvcy_mngr_addr_hndlr+0x344>
 801ee36:	f898 7027 	ldrb.w	r7, [r8, #39]	@ 0x27
 801ee3a:	b2e2      	uxtb	r2, r4
 801ee3c:	4650      	mov	r0, sl
 801ee3e:	4659      	mov	r1, fp
 801ee40:	4633      	mov	r3, r6
 801ee42:	9700      	str	r7, [sp, #0]
 801ee44:	f000 f855 	bl	801eef2 <prvcy_mngr_add_rmv_hw_reslvng_list>
 801ee48:	4607      	mov	r7, r0
 801ee4a:	2800      	cmp	r0, #0
 801ee4c:	bf08      	it	eq
 801ee4e:	2700      	moveq	r7, #0
 801ee50:	e000      	b.n	801ee54 <prvcy_mngr_addr_hndlr+0x344>
 801ee52:	270f      	movs	r7, #15
 801ee54:	4638      	mov	r0, r7
 801ee56:	b003      	add	sp, #12
 801ee58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ee5c:	f898 2027 	ldrb.w	r2, [r8, #39]	@ 0x27
 801ee60:	2000      	movs	r0, #0
 801ee62:	2104      	movs	r1, #4
 801ee64:	4633      	mov	r3, r6
 801ee66:	9500      	str	r5, [sp, #0]
 801ee68:	f7f8 fffa 	bl	8017e60 <llhwc_lst_add_rmv_dev>
 801ee6c:	b198      	cbz	r0, 801ee96 <prvcy_mngr_addr_hndlr+0x386>
 801ee6e:	4607      	mov	r7, r0
 801ee70:	2807      	cmp	r0, #7
 801ee72:	d1ef      	bne.n	801ee54 <prvcy_mngr_addr_hndlr+0x344>
 801ee74:	2004      	movs	r0, #4
 801ee76:	f7fd ff83 	bl	801cd80 <non_conn_mngr_remove_random_addr_list>
 801ee7a:	4607      	mov	r7, r0
 801ee7c:	2800      	cmp	r0, #0
 801ee7e:	d1e9      	bne.n	801ee54 <prvcy_mngr_addr_hndlr+0x344>
 801ee80:	f898 2027 	ldrb.w	r2, [r8, #39]	@ 0x27
 801ee84:	2000      	movs	r0, #0
 801ee86:	2104      	movs	r1, #4
 801ee88:	4633      	mov	r3, r6
 801ee8a:	9500      	str	r5, [sp, #0]
 801ee8c:	f7f8 ffe8 	bl	8017e60 <llhwc_lst_add_rmv_dev>
 801ee90:	2800      	cmp	r0, #0
 801ee92:	f47f aef0 	bne.w	801ec76 <prvcy_mngr_addr_hndlr+0x166>
 801ee96:	271f      	movs	r7, #31
 801ee98:	e7dc      	b.n	801ee54 <prvcy_mngr_addr_hndlr+0x344>

0801ee9a <prvcy_mngr_addr_rsln>:
 801ee9a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ee9c:	b08b      	sub	sp, #44	@ 0x2c
 801ee9e:	ae03      	add	r6, sp, #12
 801eea0:	460c      	mov	r4, r1
 801eea2:	4605      	mov	r5, r0
 801eea4:	4630      	mov	r0, r6
 801eea6:	2100      	movs	r1, #0
 801eea8:	2210      	movs	r2, #16
 801eeaa:	f005 fb9d 	bl	80245e8 <ble_memset>
 801eeae:	af07      	add	r7, sp, #28
 801eeb0:	4638      	mov	r0, r7
 801eeb2:	2100      	movs	r1, #0
 801eeb4:	2210      	movs	r2, #16
 801eeb6:	f005 fb97 	bl	80245e8 <ble_memset>
 801eeba:	1ce1      	adds	r1, r4, #3
 801eebc:	4630      	mov	r0, r6
 801eebe:	2203      	movs	r2, #3
 801eec0:	f005 fb42 	bl	8024548 <ble_memcpy>
 801eec4:	4630      	mov	r0, r6
 801eec6:	4629      	mov	r1, r5
 801eec8:	463a      	mov	r2, r7
 801eeca:	f7f9 fa38 	bl	801833e <llhwc_128_encrypt>
 801eece:	b970      	cbnz	r0, 801eeee <prvcy_mngr_addr_rsln+0x54>
 801eed0:	f10d 0506 	add.w	r5, sp, #6
 801eed4:	a907      	add	r1, sp, #28
 801eed6:	4628      	mov	r0, r5
 801eed8:	2203      	movs	r2, #3
 801eeda:	f005 fb35 	bl	8024548 <ble_memcpy>
 801eede:	4628      	mov	r0, r5
 801eee0:	4621      	mov	r1, r4
 801eee2:	2203      	movs	r2, #3
 801eee4:	f005 fbb8 	bl	8024658 <ble_memcmp>
 801eee8:	2800      	cmp	r0, #0
 801eeea:	bf18      	it	ne
 801eeec:	200f      	movne	r0, #15
 801eeee:	b00b      	add	sp, #44	@ 0x2c
 801eef0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801eef2 <prvcy_mngr_add_rmv_hw_reslvng_list>:
 801eef2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801eef6:	b082      	sub	sp, #8
 801eef8:	4614      	mov	r4, r2
 801eefa:	f646 7250 	movw	r2, #28496	@ 0x6f50
 801eefe:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 801ef02:	461d      	mov	r5, r3
 801ef04:	f892 3024 	ldrb.w	r3, [r2, #36]	@ 0x24
 801ef08:	2b00      	cmp	r3, #0
 801ef0a:	f000 808d 	beq.w	801f028 <prvcy_mngr_add_rmv_hw_reslvng_list+0x136>
 801ef0e:	2b01      	cmp	r3, #1
 801ef10:	f040 80f2 	bne.w	801f0f8 <prvcy_mngr_add_rmv_hw_reslvng_list+0x206>
 801ef14:	f646 7950 	movw	r9, #28496	@ 0x6f50
 801ef18:	f2c2 0900 	movt	r9, #8192	@ 0x2000
 801ef1c:	460e      	mov	r6, r1
 801ef1e:	4607      	mov	r7, r0
 801ef20:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
 801ef24:	f10d 0a06 	add.w	sl, sp, #6
 801ef28:	2000      	movs	r0, #0
 801ef2a:	2103      	movs	r1, #3
 801ef2c:	2201      	movs	r2, #1
 801ef2e:	464b      	mov	r3, r9
 801ef30:	f8cd a000 	str.w	sl, [sp]
 801ef34:	f7f8 ff94 	bl	8017e60 <llhwc_lst_add_rmv_dev>
 801ef38:	2e01      	cmp	r6, #1
 801ef3a:	4606      	mov	r6, r0
 801ef3c:	f040 8099 	bne.w	801f072 <prvcy_mngr_add_rmv_hw_reslvng_list+0x180>
 801ef40:	b1be      	cbz	r6, 801ef72 <prvcy_mngr_add_rmv_hw_reslvng_list+0x80>
 801ef42:	2e07      	cmp	r6, #7
 801ef44:	f040 80d9 	bne.w	801f0fa <prvcy_mngr_add_rmv_hw_reslvng_list+0x208>
 801ef48:	2003      	movs	r0, #3
 801ef4a:	f7fd ff19 	bl	801cd80 <non_conn_mngr_remove_random_addr_list>
 801ef4e:	4606      	mov	r6, r0
 801ef50:	2800      	cmp	r0, #0
 801ef52:	f040 80d2 	bne.w	801f0fa <prvcy_mngr_add_rmv_hw_reslvng_list+0x208>
 801ef56:	f646 7350 	movw	r3, #28496	@ 0x6f50
 801ef5a:	2000      	movs	r0, #0
 801ef5c:	2103      	movs	r1, #3
 801ef5e:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 801ef62:	2201      	movs	r2, #1
 801ef64:	f8cd a000 	str.w	sl, [sp]
 801ef68:	f7f8 ff7a 	bl	8017e60 <llhwc_lst_add_rmv_dev>
 801ef6c:	2800      	cmp	r0, #0
 801ef6e:	f040 8094 	bne.w	801f09a <prvcy_mngr_add_rmv_hw_reslvng_list+0x1a8>
 801ef72:	eb04 1004 	add.w	r0, r4, r4, lsl #4
 801ef76:	f646 778c 	movw	r7, #28556	@ 0x6f8c
 801ef7a:	f2c2 0700 	movt	r7, #8192	@ 0x2000
 801ef7e:	f89d 1006 	ldrb.w	r1, [sp, #6]
 801ef82:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 801ef86:	f10d 0307 	add.w	r3, sp, #7
 801ef8a:	61c1      	str	r1, [r0, #28]
 801ef8c:	2000      	movs	r0, #0
 801ef8e:	4641      	mov	r1, r8
 801ef90:	462a      	mov	r2, r5
 801ef92:	f7f8 fec2 	bl	8017d1a <llhwc_lst_search>
 801ef96:	4606      	mov	r6, r0
 801ef98:	2800      	cmp	r0, #0
 801ef9a:	f040 80ae 	bne.w	801f0fa <prvcy_mngr_add_rmv_hw_reslvng_list+0x208>
 801ef9e:	f89d 0007 	ldrb.w	r0, [sp, #7]
 801efa2:	07c0      	lsls	r0, r0, #31
 801efa4:	d105      	bne.n	801efb2 <prvcy_mngr_add_rmv_hw_reslvng_list+0xc0>
 801efa6:	f89d 1006 	ldrb.w	r1, [sp, #6]
 801efaa:	2000      	movs	r0, #0
 801efac:	2200      	movs	r2, #0
 801efae:	f7f9 f8ea 	bl	8018186 <llhwc_lst_edit_indicators>
 801efb2:	f899 0028 	ldrb.w	r0, [r9, #40]	@ 0x28
 801efb6:	2805      	cmp	r0, #5
 801efb8:	d120      	bne.n	801effc <prvcy_mngr_add_rmv_hw_reslvng_list+0x10a>
 801efba:	f109 0010 	add.w	r0, r9, #16
 801efbe:	4629      	mov	r1, r5
 801efc0:	2206      	movs	r2, #6
 801efc2:	f005 fb49 	bl	8024658 <ble_memcmp>
 801efc6:	b9c8      	cbnz	r0, 801effc <prvcy_mngr_add_rmv_hw_reslvng_list+0x10a>
 801efc8:	f899 0039 	ldrb.w	r0, [r9, #57]	@ 0x39
 801efcc:	4540      	cmp	r0, r8
 801efce:	d115      	bne.n	801effc <prvcy_mngr_add_rmv_hw_reslvng_list+0x10a>
 801efd0:	f646 7608 	movw	r6, #28424	@ 0x6f08
 801efd4:	f2c2 0600 	movt	r6, #8192	@ 0x2000
 801efd8:	f106 000d 	add.w	r0, r6, #13
 801efdc:	4649      	mov	r1, r9
 801efde:	2206      	movs	r2, #6
 801efe0:	f005 fab2 	bl	8024548 <ble_memcpy>
 801efe4:	eb04 1004 	add.w	r0, r4, r4, lsl #4
 801efe8:	4649      	mov	r1, r9
 801efea:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 801efee:	2206      	movs	r2, #6
 801eff0:	3010      	adds	r0, #16
 801eff2:	f005 faa9 	bl	8024548 <ble_memcpy>
 801eff6:	f899 0025 	ldrb.w	r0, [r9, #37]	@ 0x25
 801effa:	75f0      	strb	r0, [r6, #23]
 801effc:	f10d 0307 	add.w	r3, sp, #7
 801f000:	2006      	movs	r0, #6
 801f002:	4641      	mov	r1, r8
 801f004:	462a      	mov	r2, r5
 801f006:	f7f8 fe88 	bl	8017d1a <llhwc_lst_search>
 801f00a:	4606      	mov	r6, r0
 801f00c:	2800      	cmp	r0, #0
 801f00e:	d174      	bne.n	801f0fa <prvcy_mngr_add_rmv_hw_reslvng_list+0x208>
 801f010:	f89d 0007 	ldrb.w	r0, [sp, #7]
 801f014:	07c0      	lsls	r0, r0, #31
 801f016:	d16f      	bne.n	801f0f8 <prvcy_mngr_add_rmv_hw_reslvng_list+0x206>
 801f018:	f89d 1006 	ldrb.w	r1, [sp, #6]
 801f01c:	2006      	movs	r0, #6
 801f01e:	2200      	movs	r2, #0
 801f020:	2600      	movs	r6, #0
 801f022:	f7f9 f8b0 	bl	8018186 <llhwc_lst_edit_indicators>
 801f026:	e068      	b.n	801f0fa <prvcy_mngr_add_rmv_hw_reslvng_list+0x208>
 801f028:	f102 0408 	add.w	r4, r2, #8
 801f02c:	f10d 0506 	add.w	r5, sp, #6
 801f030:	2000      	movs	r0, #0
 801f032:	2104      	movs	r1, #4
 801f034:	2201      	movs	r2, #1
 801f036:	4623      	mov	r3, r4
 801f038:	9500      	str	r5, [sp, #0]
 801f03a:	f7f8 ff11 	bl	8017e60 <llhwc_lst_add_rmv_dev>
 801f03e:	4606      	mov	r6, r0
 801f040:	2807      	cmp	r0, #7
 801f042:	d15a      	bne.n	801f0fa <prvcy_mngr_add_rmv_hw_reslvng_list+0x208>
 801f044:	2004      	movs	r0, #4
 801f046:	f7fd fe9b 	bl	801cd80 <non_conn_mngr_remove_random_addr_list>
 801f04a:	4606      	mov	r6, r0
 801f04c:	2800      	cmp	r0, #0
 801f04e:	d154      	bne.n	801f0fa <prvcy_mngr_add_rmv_hw_reslvng_list+0x208>
 801f050:	2000      	movs	r0, #0
 801f052:	2104      	movs	r1, #4
 801f054:	2201      	movs	r2, #1
 801f056:	4623      	mov	r3, r4
 801f058:	9500      	str	r5, [sp, #0]
 801f05a:	2600      	movs	r6, #0
 801f05c:	f7f8 ff00 	bl	8017e60 <llhwc_lst_add_rmv_dev>
 801f060:	2800      	cmp	r0, #0
 801f062:	d04a      	beq.n	801f0fa <prvcy_mngr_add_rmv_hw_reslvng_list+0x208>
 801f064:	4604      	mov	r4, r0
 801f066:	2000      	movs	r0, #0
 801f068:	2101      	movs	r1, #1
 801f06a:	f000 fbda 	bl	801f822 <bsp_assert>
 801f06e:	4626      	mov	r6, r4
 801f070:	e043      	b.n	801f0fa <prvcy_mngr_add_rmv_hw_reslvng_list+0x208>
 801f072:	b1c6      	cbz	r6, 801f0a6 <prvcy_mngr_add_rmv_hw_reslvng_list+0x1b4>
 801f074:	2e07      	cmp	r6, #7
 801f076:	d140      	bne.n	801f0fa <prvcy_mngr_add_rmv_hw_reslvng_list+0x208>
 801f078:	2003      	movs	r0, #3
 801f07a:	f7fd fe81 	bl	801cd80 <non_conn_mngr_remove_random_addr_list>
 801f07e:	4606      	mov	r6, r0
 801f080:	bbd8      	cbnz	r0, 801f0fa <prvcy_mngr_add_rmv_hw_reslvng_list+0x208>
 801f082:	f646 7350 	movw	r3, #28496	@ 0x6f50
 801f086:	2000      	movs	r0, #0
 801f088:	2103      	movs	r1, #3
 801f08a:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 801f08e:	2201      	movs	r2, #1
 801f090:	f8cd a000 	str.w	sl, [sp]
 801f094:	f7f8 fee4 	bl	8017e60 <llhwc_lst_add_rmv_dev>
 801f098:	b128      	cbz	r0, 801f0a6 <prvcy_mngr_add_rmv_hw_reslvng_list+0x1b4>
 801f09a:	4606      	mov	r6, r0
 801f09c:	2000      	movs	r0, #0
 801f09e:	2101      	movs	r1, #1
 801f0a0:	f000 fbbf 	bl	801f822 <bsp_assert>
 801f0a4:	e029      	b.n	801f0fa <prvcy_mngr_add_rmv_hw_reslvng_list+0x208>
 801f0a6:	f007 00fd 	and.w	r0, r7, #253	@ 0xfd
 801f0aa:	2801      	cmp	r0, #1
 801f0ac:	d119      	bne.n	801f0e2 <prvcy_mngr_add_rmv_hw_reslvng_list+0x1f0>
 801f0ae:	f899 0029 	ldrb.w	r0, [r9, #41]	@ 0x29
 801f0b2:	2805      	cmp	r0, #5
 801f0b4:	d115      	bne.n	801f0e2 <prvcy_mngr_add_rmv_hw_reslvng_list+0x1f0>
 801f0b6:	f899 0028 	ldrb.w	r0, [r9, #40]	@ 0x28
 801f0ba:	b990      	cbnz	r0, 801f0e2 <prvcy_mngr_add_rmv_hw_reslvng_list+0x1f0>
 801f0bc:	f10d 0307 	add.w	r3, sp, #7
 801f0c0:	2000      	movs	r0, #0
 801f0c2:	4641      	mov	r1, r8
 801f0c4:	462a      	mov	r2, r5
 801f0c6:	f7f8 fe28 	bl	8017d1a <llhwc_lst_search>
 801f0ca:	4606      	mov	r6, r0
 801f0cc:	b9a8      	cbnz	r0, 801f0fa <prvcy_mngr_add_rmv_hw_reslvng_list+0x208>
 801f0ce:	f89d 0007 	ldrb.w	r0, [sp, #7]
 801f0d2:	07c0      	lsls	r0, r0, #31
 801f0d4:	d115      	bne.n	801f102 <prvcy_mngr_add_rmv_hw_reslvng_list+0x210>
 801f0d6:	f89d 1006 	ldrb.w	r1, [sp, #6]
 801f0da:	2000      	movs	r0, #0
 801f0dc:	2200      	movs	r2, #0
 801f0de:	f7f9 f852 	bl	8018186 <llhwc_lst_edit_indicators>
 801f0e2:	eb04 1004 	add.w	r0, r4, r4, lsl #4
 801f0e6:	f646 728c 	movw	r2, #28556	@ 0x6f8c
 801f0ea:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 801f0ee:	f89d 1006 	ldrb.w	r1, [sp, #6]
 801f0f2:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 801f0f6:	61c1      	str	r1, [r0, #28]
 801f0f8:	2600      	movs	r6, #0
 801f0fa:	4630      	mov	r0, r6
 801f0fc:	b002      	add	sp, #8
 801f0fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f102:	260f      	movs	r6, #15
 801f104:	e7f9      	b.n	801f0fa <prvcy_mngr_add_rmv_hw_reslvng_list+0x208>
	...

0801f108 <prvcy_mngr_srch_fw_reslvng_list>:
 801f108:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801f10c:	b081      	sub	sp, #4
 801f10e:	2807      	cmp	r0, #7
 801f110:	f200 8101 	bhi.w	801f316 <prvcy_mngr_srch_fw_reslvng_list+0x20e>
 801f114:	460c      	mov	r4, r1
 801f116:	4690      	mov	r8, r2
 801f118:	e8df f000 	tbb	[pc, r0]
 801f11c:	583c2004 	.word	0x583c2004
 801f120:	c2a8967a 	.word	0xc2a8967a
 801f124:	4640      	mov	r0, r8
 801f126:	2101      	movs	r1, #1
 801f128:	f1b8 0f00 	cmp.w	r8, #0
 801f12c:	bf18      	it	ne
 801f12e:	2001      	movne	r0, #1
 801f130:	f000 fb77 	bl	801f822 <bsp_assert>
 801f134:	f646 768c 	movw	r6, #28556	@ 0x6f8c
 801f138:	2700      	movs	r7, #0
 801f13a:	f2c2 0600 	movt	r6, #8192	@ 0x2000
 801f13e:	bf00      	nop
 801f140:	4620      	mov	r0, r4
 801f142:	4631      	mov	r1, r6
 801f144:	2206      	movs	r2, #6
 801f146:	f005 fa87 	bl	8024658 <ble_memcmp>
 801f14a:	2800      	cmp	r0, #0
 801f14c:	f000 80c2 	beq.w	801f2d4 <prvcy_mngr_srch_fw_reslvng_list+0x1cc>
 801f150:	3701      	adds	r7, #1
 801f152:	2f05      	cmp	r7, #5
 801f154:	f106 0644 	add.w	r6, r6, #68	@ 0x44
 801f158:	d1f2      	bne.n	801f140 <prvcy_mngr_srch_fw_reslvng_list+0x38>
 801f15a:	e0dc      	b.n	801f316 <prvcy_mngr_srch_fw_reslvng_list+0x20e>
 801f15c:	4640      	mov	r0, r8
 801f15e:	2101      	movs	r1, #1
 801f160:	f1b8 0f00 	cmp.w	r8, #0
 801f164:	bf18      	it	ne
 801f166:	2001      	movne	r0, #1
 801f168:	f000 fb5b 	bl	801f822 <bsp_assert>
 801f16c:	f646 768c 	movw	r6, #28556	@ 0x6f8c
 801f170:	2700      	movs	r7, #0
 801f172:	f2c2 0600 	movt	r6, #8192	@ 0x2000
 801f176:	bf00      	nop
 801f178:	4620      	mov	r0, r4
 801f17a:	4631      	mov	r1, r6
 801f17c:	2206      	movs	r2, #6
 801f17e:	f005 fa6b 	bl	8024658 <ble_memcmp>
 801f182:	2800      	cmp	r0, #0
 801f184:	f000 80a9 	beq.w	801f2da <prvcy_mngr_srch_fw_reslvng_list+0x1d2>
 801f188:	3701      	adds	r7, #1
 801f18a:	2f05      	cmp	r7, #5
 801f18c:	f106 0644 	add.w	r6, r6, #68	@ 0x44
 801f190:	d1f2      	bne.n	801f178 <prvcy_mngr_srch_fw_reslvng_list+0x70>
 801f192:	e0c0      	b.n	801f316 <prvcy_mngr_srch_fw_reslvng_list+0x20e>
 801f194:	4640      	mov	r0, r8
 801f196:	2101      	movs	r1, #1
 801f198:	f1b8 0f00 	cmp.w	r8, #0
 801f19c:	bf18      	it	ne
 801f19e:	2001      	movne	r0, #1
 801f1a0:	f000 fb3f 	bl	801f822 <bsp_assert>
 801f1a4:	f646 758c 	movw	r5, #28556	@ 0x6f8c
 801f1a8:	2700      	movs	r7, #0
 801f1aa:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 801f1ae:	bf00      	nop
 801f1b0:	19ee      	adds	r6, r5, r7
 801f1b2:	4620      	mov	r0, r4
 801f1b4:	4631      	mov	r1, r6
 801f1b6:	2206      	movs	r2, #6
 801f1b8:	f005 fa4e 	bl	8024658 <ble_memcmp>
 801f1bc:	2800      	cmp	r0, #0
 801f1be:	f000 8097 	beq.w	801f2f0 <prvcy_mngr_srch_fw_reslvng_list+0x1e8>
 801f1c2:	3744      	adds	r7, #68	@ 0x44
 801f1c4:	f5b7 7faa 	cmp.w	r7, #340	@ 0x154
 801f1c8:	d1f2      	bne.n	801f1b0 <prvcy_mngr_srch_fw_reslvng_list+0xa8>
 801f1ca:	e0a4      	b.n	801f316 <prvcy_mngr_srch_fw_reslvng_list+0x20e>
 801f1cc:	4647      	mov	r7, r8
 801f1ce:	f1b8 0f00 	cmp.w	r8, #0
 801f1d2:	bf18      	it	ne
 801f1d4:	2701      	movne	r7, #1
 801f1d6:	4638      	mov	r0, r7
 801f1d8:	2101      	movs	r1, #1
 801f1da:	4699      	mov	r9, r3
 801f1dc:	f000 fb21 	bl	801f822 <bsp_assert>
 801f1e0:	4638      	mov	r0, r7
 801f1e2:	2101      	movs	r1, #1
 801f1e4:	f000 fb1d 	bl	801f822 <bsp_assert>
 801f1e8:	f646 758c 	movw	r5, #28556	@ 0x6f8c
 801f1ec:	2700      	movs	r7, #0
 801f1ee:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 801f1f2:	bf00      	nop
 801f1f4:	19ee      	adds	r6, r5, r7
 801f1f6:	f106 011c 	add.w	r1, r6, #28
 801f1fa:	4620      	mov	r0, r4
 801f1fc:	2201      	movs	r2, #1
 801f1fe:	f005 fa2b 	bl	8024658 <ble_memcmp>
 801f202:	2800      	cmp	r0, #0
 801f204:	d077      	beq.n	801f2f6 <prvcy_mngr_srch_fw_reslvng_list+0x1ee>
 801f206:	3744      	adds	r7, #68	@ 0x44
 801f208:	f5b7 7faa 	cmp.w	r7, #340	@ 0x154
 801f20c:	d1f2      	bne.n	801f1f4 <prvcy_mngr_srch_fw_reslvng_list+0xec>
 801f20e:	e082      	b.n	801f316 <prvcy_mngr_srch_fw_reslvng_list+0x20e>
 801f210:	4640      	mov	r0, r8
 801f212:	2101      	movs	r1, #1
 801f214:	f1b8 0f00 	cmp.w	r8, #0
 801f218:	bf18      	it	ne
 801f21a:	2001      	movne	r0, #1
 801f21c:	f000 fb01 	bl	801f822 <bsp_assert>
 801f220:	f64f 66ac 	movw	r6, #65196	@ 0xfeac
 801f224:	f646 758c 	movw	r5, #28556	@ 0x6f8c
 801f228:	f6cf 76ff 	movt	r6, #65535	@ 0xffff
 801f22c:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 801f230:	19af      	adds	r7, r5, r6
 801f232:	f507 71b8 	add.w	r1, r7, #368	@ 0x170
 801f236:	4620      	mov	r0, r4
 801f238:	2201      	movs	r2, #1
 801f23a:	f005 fa0d 	bl	8024658 <ble_memcmp>
 801f23e:	2800      	cmp	r0, #0
 801f240:	d062      	beq.n	801f308 <prvcy_mngr_srch_fw_reslvng_list+0x200>
 801f242:	3644      	adds	r6, #68	@ 0x44
 801f244:	d1f4      	bne.n	801f230 <prvcy_mngr_srch_fw_reslvng_list+0x128>
 801f246:	e066      	b.n	801f316 <prvcy_mngr_srch_fw_reslvng_list+0x20e>
 801f248:	f646 758c 	movw	r5, #28556	@ 0x6f8c
 801f24c:	2600      	movs	r6, #0
 801f24e:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 801f252:	bf00      	nop
 801f254:	4620      	mov	r0, r4
 801f256:	4629      	mov	r1, r5
 801f258:	2206      	movs	r2, #6
 801f25a:	f005 f9fd 	bl	8024658 <ble_memcmp>
 801f25e:	b398      	cbz	r0, 801f2c8 <prvcy_mngr_srch_fw_reslvng_list+0x1c0>
 801f260:	3601      	adds	r6, #1
 801f262:	2e05      	cmp	r6, #5
 801f264:	f105 0544 	add.w	r5, r5, #68	@ 0x44
 801f268:	d1f4      	bne.n	801f254 <prvcy_mngr_srch_fw_reslvng_list+0x14c>
 801f26a:	e054      	b.n	801f316 <prvcy_mngr_srch_fw_reslvng_list+0x20e>
 801f26c:	4640      	mov	r0, r8
 801f26e:	2101      	movs	r1, #1
 801f270:	f1b8 0f00 	cmp.w	r8, #0
 801f274:	bf18      	it	ne
 801f276:	2001      	movne	r0, #1
 801f278:	f000 fad3 	bl	801f822 <bsp_assert>
 801f27c:	f646 758c 	movw	r5, #28556	@ 0x6f8c
 801f280:	2700      	movs	r7, #0
 801f282:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 801f286:	bf00      	nop
 801f288:	19ee      	adds	r6, r5, r7
 801f28a:	4620      	mov	r0, r4
 801f28c:	4631      	mov	r1, r6
 801f28e:	2206      	movs	r2, #6
 801f290:	f005 f9e2 	bl	8024658 <ble_memcmp>
 801f294:	b3d8      	cbz	r0, 801f30e <prvcy_mngr_srch_fw_reslvng_list+0x206>
 801f296:	3744      	adds	r7, #68	@ 0x44
 801f298:	f5b7 7faa 	cmp.w	r7, #340	@ 0x154
 801f29c:	d1f4      	bne.n	801f288 <prvcy_mngr_srch_fw_reslvng_list+0x180>
 801f29e:	e03a      	b.n	801f316 <prvcy_mngr_srch_fw_reslvng_list+0x20e>
 801f2a0:	f646 708c 	movw	r0, #28556	@ 0x6f8c
 801f2a4:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801f2a8:	f100 051c 	add.w	r5, r0, #28
 801f2ac:	2600      	movs	r6, #0
 801f2ae:	bf00      	nop
 801f2b0:	4620      	mov	r0, r4
 801f2b2:	4629      	mov	r1, r5
 801f2b4:	2201      	movs	r2, #1
 801f2b6:	f005 f9cf 	bl	8024658 <ble_memcmp>
 801f2ba:	b128      	cbz	r0, 801f2c8 <prvcy_mngr_srch_fw_reslvng_list+0x1c0>
 801f2bc:	3601      	adds	r6, #1
 801f2be:	2e05      	cmp	r6, #5
 801f2c0:	f105 0544 	add.w	r5, r5, #68	@ 0x44
 801f2c4:	d1f4      	bne.n	801f2b0 <prvcy_mngr_srch_fw_reslvng_list+0x1a8>
 801f2c6:	e026      	b.n	801f316 <prvcy_mngr_srch_fw_reslvng_list+0x20e>
 801f2c8:	f240 1008 	movw	r0, #264	@ 0x108
 801f2cc:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801f2d0:	7006      	strb	r6, [r0, #0]
 801f2d2:	e020      	b.n	801f316 <prvcy_mngr_srch_fw_reslvng_list+0x20e>
 801f2d4:	f106 0020 	add.w	r0, r6, #32
 801f2d8:	e001      	b.n	801f2de <prvcy_mngr_srch_fw_reslvng_list+0x1d6>
 801f2da:	f106 0030 	add.w	r0, r6, #48	@ 0x30
 801f2de:	f8c8 0000 	str.w	r0, [r8]
 801f2e2:	f646 7050 	movw	r0, #28496	@ 0x6f50
 801f2e6:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801f2ea:	f880 7038 	strb.w	r7, [r0, #56]	@ 0x38
 801f2ee:	e012      	b.n	801f316 <prvcy_mngr_srch_fw_reslvng_list+0x20e>
 801f2f0:	f106 001c 	add.w	r0, r6, #28
 801f2f4:	e00d      	b.n	801f312 <prvcy_mngr_srch_fw_reslvng_list+0x20a>
 801f2f6:	f1b9 0f00 	cmp.w	r9, #0
 801f2fa:	f8c8 6000 	str.w	r6, [r8]
 801f2fe:	d00a      	beq.n	801f316 <prvcy_mngr_srch_fw_reslvng_list+0x20e>
 801f300:	7e70      	ldrb	r0, [r6, #25]
 801f302:	f889 0000 	strb.w	r0, [r9]
 801f306:	e006      	b.n	801f316 <prvcy_mngr_srch_fw_reslvng_list+0x20e>
 801f308:	f507 70ae 	add.w	r0, r7, #348	@ 0x15c
 801f30c:	e001      	b.n	801f312 <prvcy_mngr_srch_fw_reslvng_list+0x20a>
 801f30e:	f106 0010 	add.w	r0, r6, #16
 801f312:	f8c8 0000 	str.w	r0, [r8]
 801f316:	b001      	add	sp, #4
 801f318:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0801f31c <prvcy_mngr_get_local_rpa>:
 801f31c:	b510      	push	{r4, lr}
 801f31e:	b086      	sub	sp, #24
 801f320:	460c      	mov	r4, r1
 801f322:	4601      	mov	r1, r0
 801f324:	2000      	movs	r0, #0
 801f326:	9005      	str	r0, [sp, #20]
 801f328:	e9cd 0003 	strd	r0, r0, [sp, #12]
 801f32c:	e9cd 0001 	strd	r0, r0, [sp, #4]
 801f330:	aa05      	add	r2, sp, #20
 801f332:	2000      	movs	r0, #0
 801f334:	2300      	movs	r3, #0
 801f336:	f7ff fee7 	bl	801f108 <prvcy_mngr_srch_fw_reslvng_list>
 801f33a:	9805      	ldr	r0, [sp, #20]
 801f33c:	b1d0      	cbz	r0, 801f374 <prvcy_mngr_get_local_rpa+0x58>
 801f33e:	a901      	add	r1, sp, #4
 801f340:	2210      	movs	r2, #16
 801f342:	f005 f989 	bl	8024658 <ble_memcmp>
 801f346:	b1a8      	cbz	r0, 801f374 <prvcy_mngr_get_local_rpa+0x58>
 801f348:	f646 7050 	movw	r0, #28496	@ 0x6f50
 801f34c:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801f350:	f890 0038 	ldrb.w	r0, [r0, #56]	@ 0x38
 801f354:	f646 718c 	movw	r1, #28556	@ 0x6f8c
 801f358:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801f35c:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 801f360:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 801f364:	2206      	movs	r2, #6
 801f366:	f100 0108 	add.w	r1, r0, #8
 801f36a:	4620      	mov	r0, r4
 801f36c:	f005 f8ec 	bl	8024548 <ble_memcpy>
 801f370:	2000      	movs	r0, #0
 801f372:	e000      	b.n	801f376 <prvcy_mngr_get_local_rpa+0x5a>
 801f374:	2001      	movs	r0, #1
 801f376:	b006      	add	sp, #24
 801f378:	bd10      	pop	{r4, pc}
	...

0801f37c <prvcy_mngr_addr_gen>:
 801f37c:	b570      	push	{r4, r5, r6, lr}
 801f37e:	b088      	sub	sp, #32
 801f380:	ae04      	add	r6, sp, #16
 801f382:	460c      	mov	r4, r1
 801f384:	4605      	mov	r5, r0
 801f386:	4630      	mov	r0, r6
 801f388:	2100      	movs	r1, #0
 801f38a:	2210      	movs	r2, #16
 801f38c:	f005 f92c 	bl	80245e8 <ble_memset>
 801f390:	4668      	mov	r0, sp
 801f392:	2100      	movs	r1, #0
 801f394:	2210      	movs	r2, #16
 801f396:	f005 f927 	bl	80245e8 <ble_memset>
 801f39a:	4630      	mov	r0, r6
 801f39c:	2103      	movs	r1, #3
 801f39e:	f7f8 fece 	bl	801813e <llhwc_gen_rnd_num>
 801f3a2:	bb18      	cbnz	r0, 801f3ec <prvcy_mngr_addr_gen+0x70>
 801f3a4:	ae04      	add	r6, sp, #16
 801f3a6:	bf00      	nop
 801f3a8:	9804      	ldr	r0, [sp, #16]
 801f3aa:	0281      	lsls	r1, r0, #10
 801f3ac:	bf18      	it	ne
 801f3ae:	f511 6f80 	cmnne.w	r1, #1024	@ 0x400
 801f3b2:	d106      	bne.n	801f3c2 <prvcy_mngr_addr_gen+0x46>
 801f3b4:	4630      	mov	r0, r6
 801f3b6:	2103      	movs	r1, #3
 801f3b8:	f7f8 fec1 	bl	801813e <llhwc_gen_rnd_num>
 801f3bc:	2800      	cmp	r0, #0
 801f3be:	d0f3      	beq.n	801f3a8 <prvcy_mngr_addr_gen+0x2c>
 801f3c0:	e014      	b.n	801f3ec <prvcy_mngr_addr_gen+0x70>
 801f3c2:	2101      	movs	r1, #1
 801f3c4:	f361 509f 	bfi	r0, r1, #22, #10
 801f3c8:	9004      	str	r0, [sp, #16]
 801f3ca:	a804      	add	r0, sp, #16
 801f3cc:	466a      	mov	r2, sp
 801f3ce:	4629      	mov	r1, r5
 801f3d0:	f7f8 ffb5 	bl	801833e <llhwc_128_encrypt>
 801f3d4:	b950      	cbnz	r0, 801f3ec <prvcy_mngr_addr_gen+0x70>
 801f3d6:	4669      	mov	r1, sp
 801f3d8:	4620      	mov	r0, r4
 801f3da:	2203      	movs	r2, #3
 801f3dc:	f005 f8b4 	bl	8024548 <ble_memcpy>
 801f3e0:	1ce0      	adds	r0, r4, #3
 801f3e2:	a904      	add	r1, sp, #16
 801f3e4:	2203      	movs	r2, #3
 801f3e6:	f005 f8af 	bl	8024548 <ble_memcpy>
 801f3ea:	2000      	movs	r0, #0
 801f3ec:	b008      	add	sp, #32
 801f3ee:	bd70      	pop	{r4, r5, r6, pc}

0801f3f0 <prvcy_mngr_free_tmr>:
 801f3f0:	b580      	push	{r7, lr}
 801f3f2:	f646 7050 	movw	r0, #28496	@ 0x6f50
 801f3f6:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801f3fa:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 801f3fc:	b151      	cbz	r1, 801f414 <prvcy_mngr_free_tmr+0x24>
 801f3fe:	302c      	adds	r0, #44	@ 0x2c
 801f400:	f002 fe96 	bl	8022130 <os_timer_stop_free>
 801f404:	fab0 f080 	clz	r0, r0
 801f408:	0940      	lsrs	r0, r0, #5
 801f40a:	2101      	movs	r1, #1
 801f40c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801f410:	f000 ba07 	b.w	801f822 <bsp_assert>
 801f414:	bd80      	pop	{r7, pc}

0801f416 <prvcy_mngr_RPA_Regeneration>:
 801f416:	b5b0      	push	{r4, r5, r7, lr}
 801f418:	b086      	sub	sp, #24
 801f41a:	2500      	movs	r5, #0
 801f41c:	2801      	cmp	r0, #1
 801f41e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801f422:	e9cd 5502 	strd	r5, r5, [sp, #8]
 801f426:	9501      	str	r5, [sp, #4]
 801f428:	d813      	bhi.n	801f452 <prvcy_mngr_RPA_Regeneration+0x3c>
 801f42a:	4614      	mov	r4, r2
 801f42c:	aa05      	add	r2, sp, #20
 801f42e:	2300      	movs	r3, #0
 801f430:	2500      	movs	r5, #0
 801f432:	f7ff fe69 	bl	801f108 <prvcy_mngr_srch_fw_reslvng_list>
 801f436:	9805      	ldr	r0, [sp, #20]
 801f438:	b158      	cbz	r0, 801f452 <prvcy_mngr_RPA_Regeneration+0x3c>
 801f43a:	a901      	add	r1, sp, #4
 801f43c:	2210      	movs	r2, #16
 801f43e:	f005 f90b 	bl	8024658 <ble_memcmp>
 801f442:	b128      	cbz	r0, 801f450 <prvcy_mngr_RPA_Regeneration+0x3a>
 801f444:	9805      	ldr	r0, [sp, #20]
 801f446:	4621      	mov	r1, r4
 801f448:	f7ff ff98 	bl	801f37c <prvcy_mngr_addr_gen>
 801f44c:	4605      	mov	r5, r0
 801f44e:	e000      	b.n	801f452 <prvcy_mngr_RPA_Regeneration+0x3c>
 801f450:	2500      	movs	r5, #0
 801f452:	4628      	mov	r0, r5
 801f454:	b006      	add	sp, #24
 801f456:	bdb0      	pop	{r4, r5, r7, pc}

0801f458 <prvcy_mngr_set_addr_rsln_enble>:
 801f458:	b5b0      	push	{r4, r5, r7, lr}
 801f45a:	f646 7550 	movw	r5, #28496	@ 0x6f50
 801f45e:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 801f462:	f895 1036 	ldrb.w	r1, [r5, #54]	@ 0x36
 801f466:	4604      	mov	r4, r0
 801f468:	2901      	cmp	r1, #1
 801f46a:	d103      	bne.n	801f474 <prvcy_mngr_set_addr_rsln_enble+0x1c>
 801f46c:	f7fe fb85 	bl	801db7a <non_conn_mngr_event_status_check>
 801f470:	b100      	cbz	r0, 801f474 <prvcy_mngr_set_addr_rsln_enble+0x1c>
 801f472:	bdb0      	pop	{r4, r5, r7, pc}
 801f474:	4620      	mov	r0, r4
 801f476:	f885 4036 	strb.w	r4, [r5, #54]	@ 0x36
 801f47a:	f7f8 fa2d 	bl	80178d8 <llhwc_addr_rsln_en>
 801f47e:	2000      	movs	r0, #0
 801f480:	bdb0      	pop	{r4, r5, r7, pc}

0801f482 <get_addr_rsl_enable>:
 801f482:	f646 7050 	movw	r0, #28496	@ 0x6f50
 801f486:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801f48a:	f890 0036 	ldrb.w	r0, [r0, #54]	@ 0x36
 801f48e:	4770      	bx	lr

0801f490 <prvcy_mngr_chck_rpa>:
 801f490:	b510      	push	{r4, lr}
 801f492:	b086      	sub	sp, #24
 801f494:	460c      	mov	r4, r1
 801f496:	4601      	mov	r1, r0
 801f498:	2000      	movs	r0, #0
 801f49a:	9005      	str	r0, [sp, #20]
 801f49c:	e9cd 0003 	strd	r0, r0, [sp, #12]
 801f4a0:	e9cd 0001 	strd	r0, r0, [sp, #4]
 801f4a4:	aa05      	add	r2, sp, #20
 801f4a6:	2001      	movs	r0, #1
 801f4a8:	2300      	movs	r3, #0
 801f4aa:	f7ff fe2d 	bl	801f108 <prvcy_mngr_srch_fw_reslvng_list>
 801f4ae:	9805      	ldr	r0, [sp, #20]
 801f4b0:	b148      	cbz	r0, 801f4c6 <prvcy_mngr_chck_rpa+0x36>
 801f4b2:	a901      	add	r1, sp, #4
 801f4b4:	2210      	movs	r2, #16
 801f4b6:	f005 f8cf 	bl	8024658 <ble_memcmp>
 801f4ba:	b120      	cbz	r0, 801f4c6 <prvcy_mngr_chck_rpa+0x36>
 801f4bc:	9805      	ldr	r0, [sp, #20]
 801f4be:	4621      	mov	r1, r4
 801f4c0:	f7ff fceb 	bl	801ee9a <prvcy_mngr_addr_rsln>
 801f4c4:	e000      	b.n	801f4c8 <prvcy_mngr_chck_rpa+0x38>
 801f4c6:	200f      	movs	r0, #15
 801f4c8:	b006      	add	sp, #24
 801f4ca:	bd10      	pop	{r4, pc}

0801f4cc <prvcy_mngr_chck_dev_prvcy_mode>:
 801f4cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f4d0:	f646 788c 	movw	r8, #28556	@ 0x6f8c
 801f4d4:	f2c2 0800 	movt	r8, #8192	@ 0x2000
 801f4d8:	460c      	mov	r4, r1
 801f4da:	4605      	mov	r5, r0
 801f4dc:	2700      	movs	r7, #0
 801f4de:	4646      	mov	r6, r8
 801f4e0:	4628      	mov	r0, r5
 801f4e2:	4631      	mov	r1, r6
 801f4e4:	2206      	movs	r2, #6
 801f4e6:	f005 f8b7 	bl	8024658 <ble_memcmp>
 801f4ea:	b150      	cbz	r0, 801f502 <prvcy_mngr_chck_dev_prvcy_mode+0x36>
 801f4ec:	3701      	adds	r7, #1
 801f4ee:	2f05      	cmp	r7, #5
 801f4f0:	f106 0644 	add.w	r6, r6, #68	@ 0x44
 801f4f4:	d1f4      	bne.n	801f4e0 <prvcy_mngr_chck_dev_prvcy_mode+0x14>
 801f4f6:	f240 1008 	movw	r0, #264	@ 0x108
 801f4fa:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801f4fe:	7800      	ldrb	r0, [r0, #0]
 801f500:	e005      	b.n	801f50e <prvcy_mngr_chck_dev_prvcy_mode+0x42>
 801f502:	f240 1108 	movw	r1, #264	@ 0x108
 801f506:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 801f50a:	b2f8      	uxtb	r0, r7
 801f50c:	700f      	strb	r7, [r1, #0]
 801f50e:	28aa      	cmp	r0, #170	@ 0xaa
 801f510:	bf04      	itt	eq
 801f512:	200f      	moveq	r0, #15
 801f514:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f518:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801f51c:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 801f520:	7e41      	ldrb	r1, [r0, #25]
 801f522:	42a1      	cmp	r1, r4
 801f524:	d105      	bne.n	801f532 <prvcy_mngr_chck_dev_prvcy_mode+0x66>
 801f526:	f890 0040 	ldrb.w	r0, [r0, #64]	@ 0x40
 801f52a:	2801      	cmp	r0, #1
 801f52c:	d101      	bne.n	801f532 <prvcy_mngr_chck_dev_prvcy_mode+0x66>
 801f52e:	2000      	movs	r0, #0
 801f530:	e000      	b.n	801f534 <prvcy_mngr_chck_dev_prvcy_mode+0x68>
 801f532:	200f      	movs	r0, #15
 801f534:	f240 1108 	movw	r1, #264	@ 0x108
 801f538:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 801f53c:	22aa      	movs	r2, #170	@ 0xaa
 801f53e:	700a      	strb	r2, [r1, #0]
 801f540:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801f544 <prvcy_mngr_clean_hwpostn_fw_lst>:
 801f544:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f546:	b081      	sub	sp, #4
 801f548:	f646 768c 	movw	r6, #28556	@ 0x6f8c
 801f54c:	f2c2 0600 	movt	r6, #8192	@ 0x2000
 801f550:	f106 041c 	add.w	r4, r6, #28
 801f554:	2700      	movs	r7, #0
 801f556:	f10d 0503 	add.w	r5, sp, #3
 801f55a:	f88d 0003 	strb.w	r0, [sp, #3]
 801f55e:	bf00      	nop
 801f560:	4628      	mov	r0, r5
 801f562:	4621      	mov	r1, r4
 801f564:	2201      	movs	r2, #1
 801f566:	f005 f877 	bl	8024658 <ble_memcmp>
 801f56a:	b150      	cbz	r0, 801f582 <prvcy_mngr_clean_hwpostn_fw_lst+0x3e>
 801f56c:	3701      	adds	r7, #1
 801f56e:	2f05      	cmp	r7, #5
 801f570:	f104 0444 	add.w	r4, r4, #68	@ 0x44
 801f574:	d1f4      	bne.n	801f560 <prvcy_mngr_clean_hwpostn_fw_lst+0x1c>
 801f576:	f240 1008 	movw	r0, #264	@ 0x108
 801f57a:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801f57e:	7800      	ldrb	r0, [r0, #0]
 801f580:	e005      	b.n	801f58e <prvcy_mngr_clean_hwpostn_fw_lst+0x4a>
 801f582:	f240 1108 	movw	r1, #264	@ 0x108
 801f586:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 801f58a:	b2f8      	uxtb	r0, r7
 801f58c:	700f      	strb	r7, [r1, #0]
 801f58e:	28aa      	cmp	r0, #170	@ 0xaa
 801f590:	d00b      	beq.n	801f5aa <prvcy_mngr_clean_hwpostn_fw_lst+0x66>
 801f592:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801f596:	2100      	movs	r1, #0
 801f598:	eb06 0080 	add.w	r0, r6, r0, lsl #2
 801f59c:	61c1      	str	r1, [r0, #28]
 801f59e:	f240 1008 	movw	r0, #264	@ 0x108
 801f5a2:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801f5a6:	21aa      	movs	r1, #170	@ 0xaa
 801f5a8:	7001      	strb	r1, [r0, #0]
 801f5aa:	b001      	add	sp, #4
 801f5ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0801f5b0 <prvcy_post_timer_evnt_clbk>:
 801f5b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f5b4:	b082      	sub	sp, #8
 801f5b6:	2600      	movs	r6, #0
 801f5b8:	2063      	movs	r0, #99	@ 0x63
 801f5ba:	f8ad 6004 	strh.w	r6, [sp, #4]
 801f5be:	9600      	str	r6, [sp, #0]
 801f5c0:	f000 f976 	bl	801f8b0 <bsp_debug_gpio_set>
 801f5c4:	f646 778c 	movw	r7, #28556	@ 0x6f8c
 801f5c8:	f2c2 0700 	movt	r7, #8192	@ 0x2000
 801f5cc:	46e8      	mov	r8, sp
 801f5ce:	bf00      	nop
 801f5d0:	19bc      	adds	r4, r7, r6
 801f5d2:	7e20      	ldrb	r0, [r4, #24]
 801f5d4:	2801      	cmp	r0, #1
 801f5d6:	d10d      	bne.n	801f5f4 <prvcy_post_timer_evnt_clbk+0x44>
 801f5d8:	f104 0508 	add.w	r5, r4, #8
 801f5dc:	4628      	mov	r0, r5
 801f5de:	4641      	mov	r1, r8
 801f5e0:	2206      	movs	r2, #6
 801f5e2:	f005 f839 	bl	8024658 <ble_memcmp>
 801f5e6:	b128      	cbz	r0, 801f5f4 <prvcy_post_timer_evnt_clbk+0x44>
 801f5e8:	f104 0020 	add.w	r0, r4, #32
 801f5ec:	4629      	mov	r1, r5
 801f5ee:	f7ff fec5 	bl	801f37c <prvcy_mngr_addr_gen>
 801f5f2:	b928      	cbnz	r0, 801f600 <prvcy_post_timer_evnt_clbk+0x50>
 801f5f4:	3644      	adds	r6, #68	@ 0x44
 801f5f6:	f5b6 7faa 	cmp.w	r6, #340	@ 0x154
 801f5fa:	d1e9      	bne.n	801f5d0 <prvcy_post_timer_evnt_clbk+0x20>
 801f5fc:	f7fe fada 	bl	801dbb4 <non_conn_mngr_update_rpa_src_addr>
 801f600:	2063      	movs	r0, #99	@ 0x63
 801f602:	f000 f957 	bl	801f8b4 <bsp_debug_gpio_clear>
 801f606:	b002      	add	sp, #8
 801f608:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801f60c <state_mngr_reset>:
 801f60c:	f247 00e1 	movw	r0, #28897	@ 0x70e1
 801f610:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801f614:	2100      	movs	r1, #0
 801f616:	7001      	strb	r1, [r0, #0]
 801f618:	f247 00e2 	movw	r0, #28898	@ 0x70e2
 801f61c:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801f620:	7001      	strb	r1, [r0, #0]
 801f622:	f247 00e3 	movw	r0, #28899	@ 0x70e3
 801f626:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801f62a:	f247 02e4 	movw	r2, #28900	@ 0x70e4
 801f62e:	7001      	strb	r1, [r0, #0]
 801f630:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 801f634:	2000      	movs	r0, #0
 801f636:	e9c2 1100 	strd	r1, r1, [r2]
 801f63a:	8111      	strh	r1, [r2, #8]
 801f63c:	4770      	bx	lr
	...

0801f640 <state_mngr_alloc_state_mchn>:
 801f640:	b5b0      	push	{r4, r5, r7, lr}
 801f642:	f247 01e4 	movw	r1, #28900	@ 0x70e4
 801f646:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 801f64a:	780a      	ldrb	r2, [r1, #0]
 801f64c:	b14a      	cbz	r2, 801f662 <state_mngr_alloc_state_mchn+0x22>
 801f64e:	2400      	movs	r4, #0
 801f650:	4622      	mov	r2, r4
 801f652:	2c07      	cmp	r4, #7
 801f654:	d008      	beq.n	801f668 <state_mngr_alloc_state_mchn+0x28>
 801f656:	188b      	adds	r3, r1, r2
 801f658:	785b      	ldrb	r3, [r3, #1]
 801f65a:	1c54      	adds	r4, r2, #1
 801f65c:	2b00      	cmp	r3, #0
 801f65e:	d1f7      	bne.n	801f650 <state_mngr_alloc_state_mchn+0x10>
 801f660:	e003      	b.n	801f66a <state_mngr_alloc_state_mchn+0x2a>
 801f662:	2301      	movs	r3, #1
 801f664:	2400      	movs	r4, #0
 801f666:	e004      	b.n	801f672 <state_mngr_alloc_state_mchn+0x32>
 801f668:	2408      	movs	r4, #8
 801f66a:	2300      	movs	r3, #0
 801f66c:	2a07      	cmp	r2, #7
 801f66e:	bf38      	it	cc
 801f670:	2301      	movcc	r3, #1
 801f672:	1e42      	subs	r2, r0, #1
 801f674:	2a03      	cmp	r2, #3
 801f676:	d82f      	bhi.n	801f6d8 <state_mngr_alloc_state_mchn+0x98>
 801f678:	e8df f002 	tbb	[pc, r2]
 801f67c:	02341702 	.word	0x02341702
 801f680:	f247 0ce3 	movw	ip, #28899	@ 0x70e3
 801f684:	f2c2 0c00 	movt	ip, #8192	@ 0x2000
 801f688:	f89c 2000 	ldrb.w	r2, [ip]
 801f68c:	2500      	movs	r5, #0
 801f68e:	2a08      	cmp	r2, #8
 801f690:	bf38      	it	cc
 801f692:	2501      	movcc	r5, #1
 801f694:	402b      	ands	r3, r5
 801f696:	2b01      	cmp	r3, #1
 801f698:	f04f 0500 	mov.w	r5, #0
 801f69c:	d146      	bne.n	801f72c <state_mngr_alloc_state_mchn+0xec>
 801f69e:	5508      	strb	r0, [r1, r4]
 801f6a0:	1c50      	adds	r0, r2, #1
 801f6a2:	190d      	adds	r5, r1, r4
 801f6a4:	f88c 0000 	strb.w	r0, [ip]
 801f6a8:	e040      	b.n	801f72c <state_mngr_alloc_state_mchn+0xec>
 801f6aa:	f247 00e2 	movw	r0, #28898	@ 0x70e2
 801f6ae:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801f6b2:	7802      	ldrb	r2, [r0, #0]
 801f6b4:	b382      	cbz	r2, 801f718 <state_mngr_alloc_state_mchn+0xd8>
 801f6b6:	f247 00e3 	movw	r0, #28899	@ 0x70e3
 801f6ba:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801f6be:	7802      	ldrb	r2, [r0, #0]
 801f6c0:	2500      	movs	r5, #0
 801f6c2:	2a08      	cmp	r2, #8
 801f6c4:	bf38      	it	cc
 801f6c6:	2501      	movcc	r5, #1
 801f6c8:	402b      	ands	r3, r5
 801f6ca:	2b01      	cmp	r3, #1
 801f6cc:	f04f 0500 	mov.w	r5, #0
 801f6d0:	d12c      	bne.n	801f72c <state_mngr_alloc_state_mchn+0xec>
 801f6d2:	190d      	adds	r5, r1, r4
 801f6d4:	2302      	movs	r3, #2
 801f6d6:	e01b      	b.n	801f710 <state_mngr_alloc_state_mchn+0xd0>
 801f6d8:	2000      	movs	r0, #0
 801f6da:	2101      	movs	r1, #1
 801f6dc:	2500      	movs	r5, #0
 801f6de:	f000 f8a0 	bl	801f822 <bsp_assert>
 801f6e2:	e023      	b.n	801f72c <state_mngr_alloc_state_mchn+0xec>
 801f6e4:	f247 00e1 	movw	r0, #28897	@ 0x70e1
 801f6e8:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801f6ec:	7802      	ldrb	r2, [r0, #0]
 801f6ee:	b1ba      	cbz	r2, 801f720 <state_mngr_alloc_state_mchn+0xe0>
 801f6f0:	f247 00e3 	movw	r0, #28899	@ 0x70e3
 801f6f4:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801f6f8:	7802      	ldrb	r2, [r0, #0]
 801f6fa:	2500      	movs	r5, #0
 801f6fc:	2a08      	cmp	r2, #8
 801f6fe:	bf38      	it	cc
 801f700:	2501      	movcc	r5, #1
 801f702:	402b      	ands	r3, r5
 801f704:	2b01      	cmp	r3, #1
 801f706:	f04f 0500 	mov.w	r5, #0
 801f70a:	d10f      	bne.n	801f72c <state_mngr_alloc_state_mchn+0xec>
 801f70c:	190d      	adds	r5, r1, r4
 801f70e:	2303      	movs	r3, #3
 801f710:	550b      	strb	r3, [r1, r4]
 801f712:	1c51      	adds	r1, r2, #1
 801f714:	7001      	strb	r1, [r0, #0]
 801f716:	e009      	b.n	801f72c <state_mngr_alloc_state_mchn+0xec>
 801f718:	2202      	movs	r2, #2
 801f71a:	f801 2f08 	strb.w	r2, [r1, #8]!
 801f71e:	e002      	b.n	801f726 <state_mngr_alloc_state_mchn+0xe6>
 801f720:	2203      	movs	r2, #3
 801f722:	f801 2f09 	strb.w	r2, [r1, #9]!
 801f726:	2201      	movs	r2, #1
 801f728:	7002      	strb	r2, [r0, #0]
 801f72a:	460d      	mov	r5, r1
 801f72c:	4628      	mov	r0, r5
 801f72e:	bdb0      	pop	{r4, r5, r7, pc}

0801f730 <state_mngr_update_state>:
 801f730:	f247 0ce4 	movw	ip, #28900	@ 0x70e4
 801f734:	f2c2 0c00 	movt	ip, #8192	@ 0x2000
 801f738:	4560      	cmp	r0, ip
 801f73a:	f04f 0230 	mov.w	r2, #48	@ 0x30
 801f73e:	d331      	bcc.n	801f7a4 <state_mngr_update_state+0x74>
 801f740:	f10c 030a 	add.w	r3, ip, #10
 801f744:	4298      	cmp	r0, r3
 801f746:	d82d      	bhi.n	801f7a4 <state_mngr_update_state+0x74>
 801f748:	2906      	cmp	r1, #6
 801f74a:	f04f 0230 	mov.w	r2, #48	@ 0x30
 801f74e:	d829      	bhi.n	801f7a4 <state_mngr_update_state+0x74>
 801f750:	e8df f001 	tbb	[pc, r1]
 801f754:	28262604 	.word	0x28262604
 801f758:	00221628 	.word	0x00221628
 801f75c:	7801      	ldrb	r1, [r0, #0]
 801f75e:	3901      	subs	r1, #1
 801f760:	2905      	cmp	r1, #5
 801f762:	d80b      	bhi.n	801f77c <state_mngr_update_state+0x4c>
 801f764:	e8df f001 	tbb	[pc, r1]
 801f768:	032b2203 	.word	0x032b2203
 801f76c:	0303      	.short	0x0303
 801f76e:	f247 01e3 	movw	r1, #28899	@ 0x70e3
 801f772:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 801f776:	780a      	ldrb	r2, [r1, #0]
 801f778:	3a01      	subs	r2, #1
 801f77a:	700a      	strb	r2, [r1, #0]
 801f77c:	2100      	movs	r1, #0
 801f77e:	e00f      	b.n	801f7a0 <state_mngr_update_state+0x70>
 801f780:	7801      	ldrb	r1, [r0, #0]
 801f782:	2230      	movs	r2, #48	@ 0x30
 801f784:	2906      	cmp	r1, #6
 801f786:	d80d      	bhi.n	801f7a4 <state_mngr_update_state+0x74>
 801f788:	2301      	movs	r3, #1
 801f78a:	fa03 f101 	lsl.w	r1, r3, r1
 801f78e:	f011 0f52 	tst.w	r1, #82	@ 0x52
 801f792:	d007      	beq.n	801f7a4 <state_mngr_update_state+0x74>
 801f794:	2105      	movs	r1, #5
 801f796:	e003      	b.n	801f7a0 <state_mngr_update_state+0x70>
 801f798:	7801      	ldrb	r1, [r0, #0]
 801f79a:	2905      	cmp	r1, #5
 801f79c:	d104      	bne.n	801f7a8 <state_mngr_update_state+0x78>
 801f79e:	2106      	movs	r1, #6
 801f7a0:	2200      	movs	r2, #0
 801f7a2:	7001      	strb	r1, [r0, #0]
 801f7a4:	4610      	mov	r0, r2
 801f7a6:	4770      	bx	lr
 801f7a8:	2230      	movs	r2, #48	@ 0x30
 801f7aa:	e7fb      	b.n	801f7a4 <state_mngr_update_state+0x74>
 801f7ac:	f10c 0108 	add.w	r1, ip, #8
 801f7b0:	4288      	cmp	r0, r1
 801f7b2:	d1dc      	bne.n	801f76e <state_mngr_update_state+0x3e>
 801f7b4:	f247 02e2 	movw	r2, #28898	@ 0x70e2
 801f7b8:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 801f7bc:	e007      	b.n	801f7ce <state_mngr_update_state+0x9e>
 801f7be:	f10c 0109 	add.w	r1, ip, #9
 801f7c2:	4288      	cmp	r0, r1
 801f7c4:	d1d3      	bne.n	801f76e <state_mngr_update_state+0x3e>
 801f7c6:	f247 02e1 	movw	r2, #28897	@ 0x70e1
 801f7ca:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 801f7ce:	2100      	movs	r1, #0
 801f7d0:	7011      	strb	r1, [r2, #0]
 801f7d2:	e7e5      	b.n	801f7a0 <state_mngr_update_state+0x70>

0801f7d4 <state_mngr_get_state_type>:
 801f7d4:	b580      	push	{r7, lr}
 801f7d6:	f247 01e4 	movw	r1, #28900	@ 0x70e4
 801f7da:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 801f7de:	4288      	cmp	r0, r1
 801f7e0:	d304      	bcc.n	801f7ec <state_mngr_get_state_type+0x18>
 801f7e2:	310a      	adds	r1, #10
 801f7e4:	4288      	cmp	r0, r1
 801f7e6:	bf9c      	itt	ls
 801f7e8:	7800      	ldrbls	r0, [r0, #0]
 801f7ea:	bd80      	popls	{r7, pc}
 801f7ec:	2000      	movs	r0, #0
 801f7ee:	2101      	movs	r1, #1
 801f7f0:	f000 f817 	bl	801f822 <bsp_assert>
 801f7f4:	200e      	movs	r0, #14
 801f7f6:	bd80      	pop	{r7, pc}

0801f7f8 <bsp_init>:
 801f7f8:	b580      	push	{r7, lr}
 801f7fa:	f7e8 fc15 	bl	8008028 <ll_sys_init>
 801f7fe:	2000      	movs	r0, #0
 801f800:	bd80      	pop	{r7, pc}

0801f802 <bsp_delay_us>:
 801f802:	f7e8 bc17 	b.w	8008034 <ll_sys_delay_us>

0801f806 <bsp_intr_set_pri>:
 801f806:	b580      	push	{r7, lr}
 801f808:	2802      	cmp	r0, #2
 801f80a:	d005      	beq.n	801f818 <bsp_intr_set_pri+0x12>
 801f80c:	2801      	cmp	r0, #1
 801f80e:	d106      	bne.n	801f81e <bsp_intr_set_pri+0x18>
 801f810:	4608      	mov	r0, r1
 801f812:	f7e8 fc41 	bl	8008098 <ll_sys_setup_radio_intr>
 801f816:	e002      	b.n	801f81e <bsp_intr_set_pri+0x18>
 801f818:	4608      	mov	r0, r1
 801f81a:	f7e8 fc48 	bl	80080ae <ll_sys_setup_radio_sw_low_intr>
 801f81e:	2000      	movs	r0, #0
 801f820:	bd80      	pop	{r7, pc}

0801f822 <bsp_assert>:
 801f822:	2901      	cmp	r1, #1
 801f824:	bf18      	it	ne
 801f826:	4770      	bxne	lr
 801f828:	f7e8 bc0f 	b.w	800804a <ll_sys_assert>

0801f82c <bsp_is_ptr_in_ble_mem>:
 801f82c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 801f830:	f6c4 0101 	movt	r1, #18433	@ 0x4801
 801f834:	f24c 0300 	movw	r3, #49152	@ 0xc000
 801f838:	2200      	movs	r2, #0
 801f83a:	4288      	cmp	r0, r1
 801f83c:	f04f 0100 	mov.w	r1, #0
 801f840:	f6c4 0302 	movt	r3, #18434	@ 0x4802
 801f844:	bf88      	it	hi
 801f846:	2101      	movhi	r1, #1
 801f848:	4298      	cmp	r0, r3
 801f84a:	bf38      	it	cc
 801f84c:	2201      	movcc	r2, #1
 801f84e:	ea01 0002 	and.w	r0, r1, r2
 801f852:	4770      	bx	lr

0801f854 <bsp_control_hclk>:
 801f854:	4770      	bx	lr

0801f856 <bsp_control_aclk>:
 801f856:	f7e8 bc05 	b.w	8008064 <ll_sys_radio_ack_ctrl>

0801f85a <bsp_switch_to_lw_isr>:
 801f85a:	f7e8 bc33 	b.w	80080c4 <ll_sys_radio_sw_low_intr_trigger>

0801f85e <gen_rnd_num>:
 801f85e:	b580      	push	{r7, lr}
 801f860:	f7e8 fc0d 	bl	800807e <ll_sys_get_rng>
 801f864:	2000      	movs	r0, #0
 801f866:	bd80      	pop	{r7, pc}

0801f868 <bsp_evnt_not>:
 801f868:	b510      	push	{r4, lr}
 801f86a:	2802      	cmp	r0, #2
 801f86c:	d004      	beq.n	801f878 <bsp_evnt_not+0x10>
 801f86e:	2800      	cmp	r0, #0
 801f870:	bf0c      	ite	eq
 801f872:	2401      	moveq	r4, #1
 801f874:	2400      	movne	r4, #0
 801f876:	e003      	b.n	801f880 <bsp_evnt_not+0x18>
 801f878:	2000      	movs	r0, #0
 801f87a:	2400      	movs	r4, #0
 801f87c:	f7e8 fbe5 	bl	800804a <ll_sys_assert>
 801f880:	4620      	mov	r0, r4
 801f882:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f886:	f7e8 bc2a 	b.w	80080de <ll_sys_radio_evt_not>

0801f88a <bsp_rco_clbr_not>:
 801f88a:	b510      	push	{r4, lr}
 801f88c:	2802      	cmp	r0, #2
 801f88e:	d004      	beq.n	801f89a <bsp_rco_clbr_not+0x10>
 801f890:	2800      	cmp	r0, #0
 801f892:	bf0c      	ite	eq
 801f894:	2401      	moveq	r4, #1
 801f896:	2400      	movne	r4, #0
 801f898:	e003      	b.n	801f8a2 <bsp_rco_clbr_not+0x18>
 801f89a:	2000      	movs	r0, #0
 801f89c:	2400      	movs	r4, #0
 801f89e:	f7e8 fbd4 	bl	800804a <ll_sys_assert>
 801f8a2:	4620      	mov	r0, r4
 801f8a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f8a8:	f7e8 bc2a 	b.w	8008100 <ll_sys_rco_clbr_not>

0801f8ac <bsp_request_temperature>:
 801f8ac:	f7e8 bc39 	b.w	8008122 <ll_sys_request_temperature>

0801f8b0 <bsp_debug_gpio_set>:
 801f8b0:	f7ef bc52 	b.w	800f158 <LINKLAYER_DEBUG_SIGNAL_SET>

0801f8b4 <bsp_debug_gpio_clear>:
 801f8b4:	f7ef bc5b 	b.w	800f16e <LINKLAYER_DEBUG_SIGNAL_RESET>

0801f8b8 <bsp_debug_gpio_toggle>:
 801f8b8:	f7ef bc64 	b.w	800f184 <LINKLAYER_DEBUG_SIGNAL_TOGGLE>

0801f8bc <bsp_set_phy_clbr_state>:
 801f8bc:	b130      	cbz	r0, 801f8cc <bsp_set_phy_clbr_state+0x10>
 801f8be:	2802      	cmp	r0, #2
 801f8c0:	d006      	beq.n	801f8d0 <bsp_set_phy_clbr_state+0x14>
 801f8c2:	2801      	cmp	r0, #1
 801f8c4:	bf18      	it	ne
 801f8c6:	4770      	bxne	lr
 801f8c8:	f7e8 bb3c 	b.w	8007f44 <ll_sys_disable_os_context_switch>
 801f8cc:	f7e8 bb34 	b.w	8007f38 <ll_sys_enable_os_context_switch>
 801f8d0:	2000      	movs	r0, #0
 801f8d2:	f7e8 bbba 	b.w	800804a <ll_sys_assert>

0801f8d6 <bsp_evnt_schldr_timing_update_not>:
 801f8d6:	f7e8 bc40 	b.w	800815a <ll_sys_schldr_timing_update_not>

0801f8da <enable_specific_irq>:
 801f8da:	f7e8 bb13 	b.w	8007f04 <ll_sys_enable_specific_irq>

0801f8de <disable_specific_irq>:
 801f8de:	f7e8 bb1e 	b.w	8007f1e <ll_sys_disable_specific_irq>

0801f8e2 <os_disable_isr>:
 801f8e2:	f7ea bb8b 	b.w	8009ffc <LINKLAYER_PLAT_DisableIRQ>

0801f8e6 <os_enable_isr>:
 801f8e6:	f7ea bb65 	b.w	8009fb4 <LINKLAYER_PLAT_EnableIRQ>

0801f8ea <os_rcrsv_mutex_wait>:
 801f8ea:	b580      	push	{r7, lr}
 801f8ec:	2003      	movs	r0, #3
 801f8ee:	f7ea fbeb 	bl	800a0c8 <LINKLAYER_PLAT_DisableSpecificIRQ>
 801f8f2:	2000      	movs	r0, #0
 801f8f4:	bd80      	pop	{r7, pc}

0801f8f6 <os_rcrsv_mutex_release>:
 801f8f6:	b580      	push	{r7, lr}
 801f8f8:	2003      	movs	r0, #3
 801f8fa:	f7ea fb9d 	bl	800a038 <LINKLAYER_PLAT_EnableSpecificIRQ>
 801f8fe:	2000      	movs	r0, #0
 801f900:	bd80      	pop	{r7, pc}

0801f902 <os_semaphore_create>:
 801f902:	2000      	movs	r0, #0
 801f904:	4770      	bx	lr

0801f906 <os_semaphore_wait>:
 801f906:	2000      	movs	r0, #0
 801f908:	4770      	bx	lr

0801f90a <os_semaphore_release>:
 801f90a:	b580      	push	{r7, lr}
 801f90c:	f7ea fcbc 	bl	800a288 <ll_sys_schedule_bg_process>
 801f910:	2000      	movs	r0, #0
 801f912:	bd80      	pop	{r7, pc}

0801f914 <os_semaphore_release_isr>:
 801f914:	b580      	push	{r7, lr}
 801f916:	f7ea fcbf 	bl	800a298 <ll_sys_schedule_bg_process_isr>
 801f91a:	2000      	movs	r0, #0
 801f91c:	bd80      	pop	{r7, pc}

0801f91e <llhwc_phy_exec_clbr_done_clbk>:
 801f91e:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f920:	b081      	sub	sp, #4
 801f922:	f641 5030 	movw	r0, #7472	@ 0x1d30
 801f926:	f6c0 0003 	movt	r0, #2051	@ 0x803
 801f92a:	6805      	ldr	r5, [r0, #0]
 801f92c:	2000      	movs	r0, #0
 801f92e:	2101      	movs	r1, #1
 801f930:	2700      	movs	r7, #0
 801f932:	2dff      	cmp	r5, #255	@ 0xff
 801f934:	bf38      	it	cc
 801f936:	2001      	movcc	r0, #1
 801f938:	f7ff ff73 	bl	801f822 <bsp_assert>
 801f93c:	f247 1604 	movw	r6, #28932	@ 0x7104
 801f940:	f2c2 0600 	movt	r6, #8192	@ 0x2000
 801f944:	6872      	ldr	r2, [r6, #4]
 801f946:	f896 4037 	ldrb.w	r4, [r6, #55]	@ 0x37
 801f94a:	f886 7039 	strb.w	r7, [r6, #57]	@ 0x39
 801f94e:	b132      	cbz	r2, 801f95e <llhwc_phy_exec_clbr_done_clbk+0x40>
 801f950:	b2e8      	uxtb	r0, r5
 801f952:	1a20      	subs	r0, r4, r0
 801f954:	fab0 f080 	clz	r0, r0
 801f958:	0940      	lsrs	r0, r0, #5
 801f95a:	4621      	mov	r1, r4
 801f95c:	4790      	blx	r2
 801f95e:	b2e8      	uxtb	r0, r5
 801f960:	4284      	cmp	r4, r0
 801f962:	bf04      	itt	eq
 801f964:	2000      	moveq	r0, #0
 801f966:	f886 0037 	strbeq.w	r0, [r6, #55]	@ 0x37
 801f96a:	b001      	add	sp, #4
 801f96c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801f96e <llhwc_phy_get_num_of_prdc_clbr_chnls>:
 801f96e:	b510      	push	{r4, lr}
 801f970:	f641 5030 	movw	r0, #7472	@ 0x1d30
 801f974:	f6c0 0003 	movt	r0, #2051	@ 0x803
 801f978:	6804      	ldr	r4, [r0, #0]
 801f97a:	2000      	movs	r0, #0
 801f97c:	2101      	movs	r1, #1
 801f97e:	2cff      	cmp	r4, #255	@ 0xff
 801f980:	bf38      	it	cc
 801f982:	2001      	movcc	r0, #1
 801f984:	f7ff ff4d 	bl	801f822 <bsp_assert>
 801f988:	b2e0      	uxtb	r0, r4
 801f98a:	bd10      	pop	{r4, pc}

0801f98c <llhwc_phy_set_phy_clbr_state>:
 801f98c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f98e:	b081      	sub	sp, #4
 801f990:	b150      	cbz	r0, 801f9a8 <llhwc_phy_set_phy_clbr_state+0x1c>
 801f992:	f247 1104 	movw	r1, #28932	@ 0x7104
 801f996:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 801f99a:	f891 2038 	ldrb.w	r2, [r1, #56]	@ 0x38
 801f99e:	b90a      	cbnz	r2, 801f9a4 <llhwc_phy_set_phy_clbr_state+0x18>
 801f9a0:	f881 0038 	strb.w	r0, [r1, #56]	@ 0x38
 801f9a4:	b001      	add	sp, #4
 801f9a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f9a8:	f247 04f8 	movw	r4, #28920	@ 0x70f8
 801f9ac:	f2c2 0400 	movt	r4, #8192	@ 0x2000
 801f9b0:	6820      	ldr	r0, [r4, #0]
 801f9b2:	2802      	cmp	r0, #2
 801f9b4:	d127      	bne.n	801fa06 <llhwc_phy_set_phy_clbr_state+0x7a>
 801f9b6:	2003      	movs	r0, #3
 801f9b8:	f7ff ff91 	bl	801f8de <disable_specific_irq>
 801f9bc:	6820      	ldr	r0, [r4, #0]
 801f9be:	f247 1604 	movw	r6, #28932	@ 0x7104
 801f9c2:	2500      	movs	r5, #0
 801f9c4:	f2c2 0600 	movt	r6, #8192	@ 0x2000
 801f9c8:	2802      	cmp	r0, #2
 801f9ca:	f886 5038 	strb.w	r5, [r6, #56]	@ 0x38
 801f9ce:	6035      	str	r5, [r6, #0]
 801f9d0:	d10f      	bne.n	801f9f2 <llhwc_phy_set_phy_clbr_state+0x66>
 801f9d2:	f240 4740 	movw	r7, #1088	@ 0x440
 801f9d6:	f6c4 0702 	movt	r7, #18434	@ 0x4802
 801f9da:	bf00      	nop
 801f9dc:	6838      	ldr	r0, [r7, #0]
 801f9de:	07c0      	lsls	r0, r0, #31
 801f9e0:	d102      	bne.n	801f9e8 <llhwc_phy_set_phy_clbr_state+0x5c>
 801f9e2:	2002      	movs	r0, #2
 801f9e4:	e003      	b.n	801f9ee <llhwc_phy_set_phy_clbr_state+0x62>
 801f9e6:	bf00      	nop
 801f9e8:	f000 f81c 	bl	801fa24 <llhwc_phy_clbr_seq_done_isr>
 801f9ec:	6820      	ldr	r0, [r4, #0]
 801f9ee:	2802      	cmp	r0, #2
 801f9f0:	d0f4      	beq.n	801f9dc <llhwc_phy_set_phy_clbr_state+0x50>
 801f9f2:	6872      	ldr	r2, [r6, #4]
 801f9f4:	f886 5039 	strb.w	r5, [r6, #57]	@ 0x39
 801f9f8:	b112      	cbz	r2, 801fa00 <llhwc_phy_set_phy_clbr_state+0x74>
 801f9fa:	2001      	movs	r0, #1
 801f9fc:	21ff      	movs	r1, #255	@ 0xff
 801f9fe:	4790      	blx	r2
 801fa00:	2003      	movs	r0, #3
 801fa02:	f7ff ff6a 	bl	801f8da <enable_specific_irq>
 801fa06:	f247 1304 	movw	r3, #28932	@ 0x7104
 801fa0a:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 801fa0e:	2700      	movs	r7, #0
 801fa10:	f103 000e 	add.w	r0, r3, #14
 801fa14:	2100      	movs	r1, #0
 801fa16:	2228      	movs	r2, #40	@ 0x28
 801fa18:	86df      	strh	r7, [r3, #54]	@ 0x36
 801fa1a:	b001      	add	sp, #4
 801fa1c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801fa20:	f004 bde2 	b.w	80245e8 <ble_memset>

0801fa24 <llhwc_phy_clbr_seq_done_isr>:
 801fa24:	b5b0      	push	{r4, r5, r7, lr}
 801fa26:	b082      	sub	sp, #8
 801fa28:	f641 5030 	movw	r0, #7472	@ 0x1d30
 801fa2c:	f6c0 0003 	movt	r0, #2051	@ 0x803
 801fa30:	6804      	ldr	r4, [r0, #0]
 801fa32:	2500      	movs	r5, #0
 801fa34:	2000      	movs	r0, #0
 801fa36:	2101      	movs	r1, #1
 801fa38:	9501      	str	r5, [sp, #4]
 801fa3a:	2cff      	cmp	r4, #255	@ 0xff
 801fa3c:	bf38      	it	cc
 801fa3e:	2001      	movcc	r0, #1
 801fa40:	f7ff feef 	bl	801f822 <bsp_assert>
 801fa44:	202f      	movs	r0, #47	@ 0x2f
 801fa46:	b2e4      	uxtb	r4, r4
 801fa48:	f7ff ff32 	bl	801f8b0 <bsp_debug_gpio_set>
 801fa4c:	f240 4024 	movw	r0, #1060	@ 0x424
 801fa50:	f6c4 0002 	movt	r0, #18434	@ 0x4802
 801fa54:	6a01      	ldr	r1, [r0, #32]
 801fa56:	f041 0101 	orr.w	r1, r1, #1
 801fa5a:	6201      	str	r1, [r0, #32]
 801fa5c:	6a01      	ldr	r1, [r0, #32]
 801fa5e:	f021 0101 	bic.w	r1, r1, #1
 801fa62:	6201      	str	r1, [r0, #32]
 801fa64:	f247 01f8 	movw	r1, #28920	@ 0x70f8
 801fa68:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 801fa6c:	600d      	str	r5, [r1, #0]
 801fa6e:	6801      	ldr	r1, [r0, #0]
 801fa70:	f021 0120 	bic.w	r1, r1, #32
 801fa74:	6001      	str	r1, [r0, #0]
 801fa76:	6801      	ldr	r1, [r0, #0]
 801fa78:	f021 0110 	bic.w	r1, r1, #16
 801fa7c:	6001      	str	r1, [r0, #0]
 801fa7e:	f247 00f4 	movw	r0, #28916	@ 0x70f4
 801fa82:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801fa86:	7005      	strb	r5, [r0, #0]
 801fa88:	f247 00f5 	movw	r0, #28917	@ 0x70f5
 801fa8c:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801fa90:	7005      	strb	r5, [r0, #0]
 801fa92:	2000      	movs	r0, #0
 801fa94:	2102      	movs	r1, #2
 801fa96:	f004 f89b 	bl	8023bd0 <llhwc_cmn_control_aclk>
 801fa9a:	f000 feac 	bl	80207f6 <llhwc_phy_read_updt_vco_pll_clbr>
 801fa9e:	f247 1504 	movw	r5, #28932	@ 0x7104
 801faa2:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 801faa6:	f895 0037 	ldrb.w	r0, [r5, #55]	@ 0x37
 801faaa:	3001      	adds	r0, #1
 801faac:	f885 0037 	strb.w	r0, [r5, #55]	@ 0x37
 801fab0:	a801      	add	r0, sp, #4
 801fab2:	f002 fcca 	bl	802244a <llhwc_slptmr_get>
 801fab6:	f895 0037 	ldrb.w	r0, [r5, #55]	@ 0x37
 801faba:	42a0      	cmp	r0, r4
 801fabc:	d20c      	bcs.n	801fad8 <llhwc_phy_clbr_seq_done_isr+0xb4>
 801fabe:	9801      	ldr	r0, [sp, #4]
 801fac0:	7b69      	ldrb	r1, [r5, #13]
 801fac2:	682a      	ldr	r2, [r5, #0]
 801fac4:	4408      	add	r0, r1
 801fac6:	4290      	cmp	r0, r2
 801fac8:	d206      	bcs.n	801fad8 <llhwc_phy_clbr_seq_done_isr+0xb4>
 801faca:	f000 ff29 	bl	8020920 <llhwc_phy_get_nxt_clbr_ch>
 801face:	2102      	movs	r1, #2
 801fad0:	2200      	movs	r2, #0
 801fad2:	f000 fe4d 	bl	8020770 <llhwc_phy_strt_vco_pll_clbr>
 801fad6:	e002      	b.n	801fade <llhwc_phy_clbr_seq_done_isr+0xba>
 801fad8:	2000      	movs	r0, #0
 801fada:	f000 ffbe 	bl	8020a5a <llhwc_phy_clbr_cmpltd_release_grant>
 801fade:	202f      	movs	r0, #47	@ 0x2f
 801fae0:	f7ff fee8 	bl	801f8b4 <bsp_debug_gpio_clear>
 801fae4:	b002      	add	sp, #8
 801fae6:	bdb0      	pop	{r4, r5, r7, pc}

0801fae8 <llhwc_phy_get_phy_clbr_state>:
 801fae8:	f247 1004 	movw	r0, #28932	@ 0x7104
 801faec:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801faf0:	f890 0038 	ldrb.w	r0, [r0, #56]	@ 0x38
 801faf4:	2800      	cmp	r0, #0
 801faf6:	bf18      	it	ne
 801faf8:	2001      	movne	r0, #1
 801fafa:	4770      	bx	lr

0801fafc <llhwc_phy_is_phy_clbr_done_pnding>:
 801fafc:	f247 1004 	movw	r0, #28932	@ 0x7104
 801fb00:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801fb04:	f890 0039 	ldrb.w	r0, [r0, #57]	@ 0x39
 801fb08:	4770      	bx	lr

0801fb0a <llhwc_phy_run_phy_sequence>:
 801fb0a:	2a01      	cmp	r2, #1
 801fb0c:	bf08      	it	eq
 801fb0e:	f000 b8cf 	beq.w	801fcb0 <llhwc_phy_trg_sequence_from_sequencer_ram>
 801fb12:	b922      	cbnz	r2, 801fb1e <llhwc_phy_run_phy_sequence+0x14>
 801fb14:	0889      	lsrs	r1, r1, #2
 801fb16:	2200      	movs	r2, #0
 801fb18:	2300      	movs	r3, #0
 801fb1a:	f000 b805 	b.w	801fb28 <llhwc_phy_write_cfg_fifo_batch>
 801fb1e:	2000      	movs	r0, #0
 801fb20:	2101      	movs	r1, #1
 801fb22:	f7ff be7e 	b.w	801f822 <bsp_assert>
	...

0801fb28 <llhwc_phy_write_cfg_fifo_batch>:
 801fb28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fb2c:	b081      	sub	sp, #4
 801fb2e:	4681      	mov	r9, r0
 801fb30:	2000      	movs	r0, #0
 801fb32:	2900      	cmp	r1, #0
 801fb34:	9000      	str	r0, [sp, #0]
 801fb36:	f000 80b1 	beq.w	801fc9c <llhwc_phy_write_cfg_fifo_batch+0x174>
 801fb3a:	f247 3018 	movw	r0, #29464	@ 0x7318
 801fb3e:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801fb42:	f890 804c 	ldrb.w	r8, [r0, #76]	@ 0x4c
 801fb46:	469a      	mov	sl, r3
 801fb48:	4693      	mov	fp, r2
 801fb4a:	460e      	mov	r6, r1
 801fb4c:	2901      	cmp	r1, #1
 801fb4e:	d104      	bne.n	801fb5a <llhwc_phy_write_cfg_fifo_batch+0x32>
 801fb50:	f8d9 0000 	ldr.w	r0, [r9]
 801fb54:	28ae      	cmp	r0, #174	@ 0xae
 801fb56:	f000 80a1 	beq.w	801fc9c <llhwc_phy_write_cfg_fifo_batch+0x174>
 801fb5a:	f1b8 0f01 	cmp.w	r8, #1
 801fb5e:	d003      	beq.n	801fb68 <llhwc_phy_write_cfg_fifo_batch+0x40>
 801fb60:	2001      	movs	r0, #1
 801fb62:	2102      	movs	r1, #2
 801fb64:	f004 f834 	bl	8023bd0 <llhwc_cmn_control_aclk>
 801fb68:	f247 00f8 	movw	r0, #28920	@ 0x70f8
 801fb6c:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801fb70:	6800      	ldr	r0, [r0, #0]
 801fb72:	b120      	cbz	r0, 801fb7e <llhwc_phy_write_cfg_fifo_batch+0x56>
 801fb74:	2000      	movs	r0, #0
 801fb76:	2101      	movs	r1, #1
 801fb78:	f7ff fe53 	bl	801f822 <bsp_assert>
 801fb7c:	e08b      	b.n	801fc96 <llhwc_phy_write_cfg_fifo_batch+0x16e>
 801fb7e:	f240 4724 	movw	r7, #1060	@ 0x424
 801fb82:	f6c4 0702 	movt	r7, #18434	@ 0x4802
 801fb86:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801fb88:	2400      	movs	r4, #0
 801fb8a:	f040 0001 	orr.w	r0, r0, #1
 801fb8e:	6278      	str	r0, [r7, #36]	@ 0x24
 801fb90:	6838      	ldr	r0, [r7, #0]
 801fb92:	2500      	movs	r5, #0
 801fb94:	f040 0001 	orr.w	r0, r0, #1
 801fb98:	6038      	str	r0, [r7, #0]
 801fb9a:	6838      	ldr	r0, [r7, #0]
 801fb9c:	f020 0001 	bic.w	r0, r0, #1
 801fba0:	6038      	str	r0, [r7, #0]
 801fba2:	6838      	ldr	r0, [r7, #0]
 801fba4:	f040 0002 	orr.w	r0, r0, #2
 801fba8:	6038      	str	r0, [r7, #0]
 801fbaa:	6838      	ldr	r0, [r7, #0]
 801fbac:	f020 0002 	bic.w	r0, r0, #2
 801fbb0:	6038      	str	r0, [r7, #0]
 801fbb2:	6838      	ldr	r0, [r7, #0]
 801fbb4:	f040 0020 	orr.w	r0, r0, #32
 801fbb8:	6038      	str	r0, [r7, #0]
 801fbba:	e02f      	b.n	801fc1c <llhwc_phy_write_cfg_fifo_batch+0xf4>
 801fbbc:	68f8      	ldr	r0, [r7, #12]
 801fbbe:	ebaa 0105 	sub.w	r1, sl, r5
 801fbc2:	2903      	cmp	r1, #3
 801fbc4:	d808      	bhi.n	801fbd8 <llhwc_phy_write_cfg_fifo_batch+0xb0>
 801fbc6:	e8df f001 	tbb	[pc, r1]
 801fbca:	1302      	.short	0x1302
 801fbcc:	1f17      	.short	0x1f17
 801fbce:	2000      	movs	r0, #0
 801fbd0:	2101      	movs	r1, #1
 801fbd2:	f7ff fe26 	bl	801f822 <bsp_assert>
 801fbd6:	e038      	b.n	801fc4a <llhwc_phy_write_cfg_fifo_batch+0x122>
 801fbd8:	eb0b 0105 	add.w	r1, fp, r5
 801fbdc:	0a02      	lsrs	r2, r0, #8
 801fbde:	f80b 0005 	strb.w	r0, [fp, r5]
 801fbe2:	704a      	strb	r2, [r1, #1]
 801fbe4:	0c02      	lsrs	r2, r0, #16
 801fbe6:	0e00      	lsrs	r0, r0, #24
 801fbe8:	3504      	adds	r5, #4
 801fbea:	708a      	strb	r2, [r1, #2]
 801fbec:	70c8      	strb	r0, [r1, #3]
 801fbee:	e02c      	b.n	801fc4a <llhwc_phy_write_cfg_fifo_batch+0x122>
 801fbf0:	f80b 0005 	strb.w	r0, [fp, r5]
 801fbf4:	3501      	adds	r5, #1
 801fbf6:	e028      	b.n	801fc4a <llhwc_phy_write_cfg_fifo_batch+0x122>
 801fbf8:	eb0b 0105 	add.w	r1, fp, r5
 801fbfc:	f80b 0005 	strb.w	r0, [fp, r5]
 801fc00:	0a00      	lsrs	r0, r0, #8
 801fc02:	7048      	strb	r0, [r1, #1]
 801fc04:	3502      	adds	r5, #2
 801fc06:	e020      	b.n	801fc4a <llhwc_phy_write_cfg_fifo_batch+0x122>
 801fc08:	eb0b 0105 	add.w	r1, fp, r5
 801fc0c:	f80b 0005 	strb.w	r0, [fp, r5]
 801fc10:	0a02      	lsrs	r2, r0, #8
 801fc12:	0c00      	lsrs	r0, r0, #16
 801fc14:	704a      	strb	r2, [r1, #1]
 801fc16:	7088      	strb	r0, [r1, #2]
 801fc18:	3503      	adds	r5, #3
 801fc1a:	e016      	b.n	801fc4a <llhwc_phy_write_cfg_fifo_batch+0x122>
 801fc1c:	42b4      	cmp	r4, r6
 801fc1e:	d20a      	bcs.n	801fc36 <llhwc_phy_write_cfg_fifo_batch+0x10e>
 801fc20:	6838      	ldr	r0, [r7, #0]
 801fc22:	f3c0 4080 	ubfx	r0, r0, #18, #1
 801fc26:	9000      	str	r0, [sp, #0]
 801fc28:	9800      	ldr	r0, [sp, #0]
 801fc2a:	2801      	cmp	r0, #1
 801fc2c:	d003      	beq.n	801fc36 <llhwc_phy_write_cfg_fifo_batch+0x10e>
 801fc2e:	f859 0024 	ldr.w	r0, [r9, r4, lsl #2]
 801fc32:	3401      	adds	r4, #1
 801fc34:	60b8      	str	r0, [r7, #8]
 801fc36:	6838      	ldr	r0, [r7, #0]
 801fc38:	f1bb 0f00 	cmp.w	fp, #0
 801fc3c:	f3c0 5000 	ubfx	r0, r0, #20, #1
 801fc40:	9000      	str	r0, [sp, #0]
 801fc42:	d002      	beq.n	801fc4a <llhwc_phy_write_cfg_fifo_batch+0x122>
 801fc44:	9800      	ldr	r0, [sp, #0]
 801fc46:	2800      	cmp	r0, #0
 801fc48:	d0b8      	beq.n	801fbbc <llhwc_phy_write_cfg_fifo_batch+0x94>
 801fc4a:	4555      	cmp	r5, sl
 801fc4c:	bf28      	it	cs
 801fc4e:	42b4      	cmpcs	r4, r6
 801fc50:	d3e4      	bcc.n	801fc1c <llhwc_phy_write_cfg_fifo_batch+0xf4>
 801fc52:	f64f 61a1 	movw	r1, #65185	@ 0xfea1
 801fc56:	f2c0 0126 	movt	r1, #38	@ 0x26
 801fc5a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801fc5e:	1c4a      	adds	r2, r1, #1
 801fc60:	69fb      	ldr	r3, [r7, #28]
 801fc62:	3001      	adds	r0, #1
 801fc64:	f003 0301 	and.w	r3, r3, #1
 801fc68:	9300      	str	r3, [sp, #0]
 801fc6a:	9b00      	ldr	r3, [sp, #0]
 801fc6c:	b90b      	cbnz	r3, 801fc72 <llhwc_phy_write_cfg_fifo_batch+0x14a>
 801fc6e:	4290      	cmp	r0, r2
 801fc70:	d3f6      	bcc.n	801fc60 <llhwc_phy_write_cfg_fifo_batch+0x138>
 801fc72:	4288      	cmp	r0, r1
 801fc74:	d903      	bls.n	801fc7e <llhwc_phy_write_cfg_fifo_batch+0x156>
 801fc76:	2000      	movs	r0, #0
 801fc78:	2101      	movs	r1, #1
 801fc7a:	f7ff fdd2 	bl	801f822 <bsp_assert>
 801fc7e:	6a38      	ldr	r0, [r7, #32]
 801fc80:	f040 0001 	orr.w	r0, r0, #1
 801fc84:	6238      	str	r0, [r7, #32]
 801fc86:	6a38      	ldr	r0, [r7, #32]
 801fc88:	f020 0001 	bic.w	r0, r0, #1
 801fc8c:	6238      	str	r0, [r7, #32]
 801fc8e:	6838      	ldr	r0, [r7, #0]
 801fc90:	f020 0020 	bic.w	r0, r0, #32
 801fc94:	6038      	str	r0, [r7, #0]
 801fc96:	f1b8 0f01 	cmp.w	r8, #1
 801fc9a:	d102      	bne.n	801fca2 <llhwc_phy_write_cfg_fifo_batch+0x17a>
 801fc9c:	b001      	add	sp, #4
 801fc9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fca2:	2000      	movs	r0, #0
 801fca4:	2102      	movs	r1, #2
 801fca6:	b001      	add	sp, #4
 801fca8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fcac:	f003 bf90 	b.w	8023bd0 <llhwc_cmn_control_aclk>

0801fcb0 <llhwc_phy_trg_sequence_from_sequencer_ram>:
 801fcb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801fcb2:	b081      	sub	sp, #4
 801fcb4:	2900      	cmp	r1, #0
 801fcb6:	d04d      	beq.n	801fd54 <llhwc_phy_trg_sequence_from_sequencer_ram+0xa4>
 801fcb8:	4605      	mov	r5, r0
 801fcba:	f247 00fc 	movw	r0, #28924	@ 0x70fc
 801fcbe:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801fcc2:	6800      	ldr	r0, [r0, #0]
 801fcc4:	460c      	mov	r4, r1
 801fcc6:	2904      	cmp	r1, #4
 801fcc8:	d102      	bne.n	801fcd0 <llhwc_phy_trg_sequence_from_sequencer_ram+0x20>
 801fcca:	6829      	ldr	r1, [r5, #0]
 801fccc:	29ae      	cmp	r1, #174	@ 0xae
 801fcce:	d041      	beq.n	801fd54 <llhwc_phy_trg_sequence_from_sequencer_ram+0xa4>
 801fcd0:	4420      	add	r0, r4
 801fcd2:	f5a0 5180 	sub.w	r1, r0, #4096	@ 0x1000
 801fcd6:	2000      	movs	r0, #0
 801fcd8:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 801fcdc:	bf98      	it	ls
 801fcde:	2001      	movls	r0, #1
 801fce0:	2101      	movs	r1, #1
 801fce2:	f7ff fd9e 	bl	801f822 <bsp_assert>
 801fce6:	f247 06f8 	movw	r6, #28920	@ 0x70f8
 801fcea:	f2c2 0600 	movt	r6, #8192	@ 0x2000
 801fcee:	6830      	ldr	r0, [r6, #0]
 801fcf0:	b1b8      	cbz	r0, 801fd22 <llhwc_phy_trg_sequence_from_sequencer_ram+0x72>
 801fcf2:	f247 07f4 	movw	r7, #28916	@ 0x70f4
 801fcf6:	f2c2 0700 	movt	r7, #8192	@ 0x2000
 801fcfa:	7838      	ldrb	r0, [r7, #0]
 801fcfc:	280a      	cmp	r0, #10
 801fcfe:	d304      	bcc.n	801fd0a <llhwc_phy_trg_sequence_from_sequencer_ram+0x5a>
 801fd00:	2000      	movs	r0, #0
 801fd02:	2101      	movs	r1, #1
 801fd04:	f7ff fd8d 	bl	801f822 <bsp_assert>
 801fd08:	7838      	ldrb	r0, [r7, #0]
 801fd0a:	1c41      	adds	r1, r0, #1
 801fd0c:	7039      	strb	r1, [r7, #0]
 801fd0e:	f247 1140 	movw	r1, #28992	@ 0x7140
 801fd12:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 801fd16:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
 801fd1a:	f841 5030 	str.w	r5, [r1, r0, lsl #3]
 801fd1e:	6054      	str	r4, [r2, #4]
 801fd20:	e010      	b.n	801fd44 <llhwc_phy_trg_sequence_from_sequencer_ram+0x94>
 801fd22:	2001      	movs	r0, #1
 801fd24:	2102      	movs	r1, #2
 801fd26:	f003 ff53 	bl	8023bd0 <llhwc_cmn_control_aclk>
 801fd2a:	f240 4048 	movw	r0, #1096	@ 0x448
 801fd2e:	f6c4 0002 	movt	r0, #18434	@ 0x4802
 801fd32:	6801      	ldr	r1, [r0, #0]
 801fd34:	2201      	movs	r2, #1
 801fd36:	f041 0101 	orr.w	r1, r1, #1
 801fd3a:	6001      	str	r1, [r0, #0]
 801fd3c:	4628      	mov	r0, r5
 801fd3e:	4621      	mov	r1, r4
 801fd40:	f000 f85a 	bl	801fdf8 <llhwc_phy_sequencer_ram_cpy_strt_seq>
 801fd44:	6830      	ldr	r0, [r6, #0]
 801fd46:	2801      	cmp	r0, #1
 801fd48:	d104      	bne.n	801fd54 <llhwc_phy_trg_sequence_from_sequencer_ram+0xa4>
 801fd4a:	b001      	add	sp, #4
 801fd4c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801fd50:	f000 b808 	b.w	801fd64 <llhwc_phy_get_nxt_seq_from_queue>
 801fd54:	b001      	add	sp, #4
 801fd56:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801fd58 <llhwc_phy_is_phy_driver_busy>:
 801fd58:	f247 00f8 	movw	r0, #28920	@ 0x70f8
 801fd5c:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801fd60:	6800      	ldr	r0, [r0, #0]
 801fd62:	4770      	bx	lr

0801fd64 <llhwc_phy_get_nxt_seq_from_queue>:
 801fd64:	b510      	push	{r4, lr}
 801fd66:	f240 4024 	movw	r0, #1060	@ 0x424
 801fd6a:	f6c4 0002 	movt	r0, #18434	@ 0x4802
 801fd6e:	69c1      	ldr	r1, [r0, #28]
 801fd70:	07c9      	lsls	r1, r1, #31
 801fd72:	bf08      	it	eq
 801fd74:	bd10      	popeq	{r4, pc}
 801fd76:	f247 04f5 	movw	r4, #28917	@ 0x70f5
 801fd7a:	f247 01f4 	movw	r1, #28916	@ 0x70f4
 801fd7e:	f2c2 0400 	movt	r4, #8192	@ 0x2000
 801fd82:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 801fd86:	7822      	ldrb	r2, [r4, #0]
 801fd88:	780b      	ldrb	r3, [r1, #0]
 801fd8a:	429a      	cmp	r2, r3
 801fd8c:	d216      	bcs.n	801fdbc <llhwc_phy_get_nxt_seq_from_queue+0x58>
 801fd8e:	f247 1040 	movw	r0, #28992	@ 0x7140
 801fd92:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801fd96:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
 801fd9a:	f850 0032 	ldr.w	r0, [r0, r2, lsl #3]
 801fd9e:	6849      	ldr	r1, [r1, #4]
 801fda0:	2201      	movs	r2, #1
 801fda2:	f000 f829 	bl	801fdf8 <llhwc_phy_sequencer_ram_cpy_strt_seq>
 801fda6:	7820      	ldrb	r0, [r4, #0]
 801fda8:	280a      	cmp	r0, #10
 801fdaa:	d304      	bcc.n	801fdb6 <llhwc_phy_get_nxt_seq_from_queue+0x52>
 801fdac:	2000      	movs	r0, #0
 801fdae:	2101      	movs	r1, #1
 801fdb0:	f7ff fd37 	bl	801f822 <bsp_assert>
 801fdb4:	7820      	ldrb	r0, [r4, #0]
 801fdb6:	3001      	adds	r0, #1
 801fdb8:	7020      	strb	r0, [r4, #0]
 801fdba:	bd10      	pop	{r4, pc}
 801fdbc:	6a02      	ldr	r2, [r0, #32]
 801fdbe:	2300      	movs	r3, #0
 801fdc0:	f042 0201 	orr.w	r2, r2, #1
 801fdc4:	6202      	str	r2, [r0, #32]
 801fdc6:	6a02      	ldr	r2, [r0, #32]
 801fdc8:	f022 0201 	bic.w	r2, r2, #1
 801fdcc:	6202      	str	r2, [r0, #32]
 801fdce:	f247 02f8 	movw	r2, #28920	@ 0x70f8
 801fdd2:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 801fdd6:	6013      	str	r3, [r2, #0]
 801fdd8:	6802      	ldr	r2, [r0, #0]
 801fdda:	f022 0220 	bic.w	r2, r2, #32
 801fdde:	6002      	str	r2, [r0, #0]
 801fde0:	6802      	ldr	r2, [r0, #0]
 801fde2:	f022 0210 	bic.w	r2, r2, #16
 801fde6:	6002      	str	r2, [r0, #0]
 801fde8:	700b      	strb	r3, [r1, #0]
 801fdea:	2000      	movs	r0, #0
 801fdec:	2102      	movs	r1, #2
 801fdee:	7023      	strb	r3, [r4, #0]
 801fdf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801fdf4:	f003 beec 	b.w	8023bd0 <llhwc_cmn_control_aclk>

0801fdf8 <llhwc_phy_sequencer_ram_cpy_strt_seq>:
 801fdf8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801fdfc:	b081      	sub	sp, #4
 801fdfe:	460c      	mov	r4, r1
 801fe00:	f247 01fc 	movw	r1, #28924	@ 0x70fc
 801fe04:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 801fe08:	680f      	ldr	r7, [r1, #0]
 801fe0a:	4681      	mov	r9, r0
 801fe0c:	f5a7 5680 	sub.w	r6, r7, #4096	@ 0x1000
 801fe10:	f026 0003 	bic.w	r0, r6, #3
 801fe14:	1901      	adds	r1, r0, r4
 801fe16:	2000      	movs	r0, #0
 801fe18:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 801fe1c:	bf98      	it	ls
 801fe1e:	2001      	movls	r0, #1
 801fe20:	2101      	movs	r1, #1
 801fe22:	4690      	mov	r8, r2
 801fe24:	2501      	movs	r5, #1
 801fe26:	f7ff fcfc 	bl	801f822 <bsp_assert>
 801fe2a:	f247 00f8 	movw	r0, #28920	@ 0x70f8
 801fe2e:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801fe32:	6801      	ldr	r1, [r0, #0]
 801fe34:	b901      	cbnz	r1, 801fe38 <llhwc_phy_sequencer_ram_cpy_strt_seq+0x40>
 801fe36:	6005      	str	r5, [r0, #0]
 801fe38:	f240 4524 	movw	r5, #1060	@ 0x424
 801fe3c:	f6c4 0502 	movt	r5, #18434	@ 0x4802
 801fe40:	6828      	ldr	r0, [r5, #0]
 801fe42:	08b1      	lsrs	r1, r6, #2
 801fe44:	f040 0001 	orr.w	r0, r0, #1
 801fe48:	6028      	str	r0, [r5, #0]
 801fe4a:	6828      	ldr	r0, [r5, #0]
 801fe4c:	2600      	movs	r6, #0
 801fe4e:	f020 0001 	bic.w	r0, r0, #1
 801fe52:	6028      	str	r0, [r5, #0]
 801fe54:	6828      	ldr	r0, [r5, #0]
 801fe56:	f6c4 0602 	movt	r6, #18434	@ 0x4802
 801fe5a:	f040 0002 	orr.w	r0, r0, #2
 801fe5e:	6028      	str	r0, [r5, #0]
 801fe60:	6828      	ldr	r0, [r5, #0]
 801fe62:	f020 0002 	bic.w	r0, r0, #2
 801fe66:	6028      	str	r0, [r5, #0]
 801fe68:	6828      	ldr	r0, [r5, #0]
 801fe6a:	f020 0020 	bic.w	r0, r0, #32
 801fe6e:	6028      	str	r0, [r5, #0]
 801fe70:	6a28      	ldr	r0, [r5, #32]
 801fe72:	f040 0001 	orr.w	r0, r0, #1
 801fe76:	6228      	str	r0, [r5, #32]
 801fe78:	6a28      	ldr	r0, [r5, #32]
 801fe7a:	f020 0001 	bic.w	r0, r0, #1
 801fe7e:	6228      	str	r0, [r5, #32]
 801fe80:	6828      	ldr	r0, [r5, #0]
 801fe82:	f361 509c 	bfi	r0, r1, #22, #7
 801fe86:	6028      	str	r0, [r5, #0]
 801fe88:	6828      	ldr	r0, [r5, #0]
 801fe8a:	f040 0010 	orr.w	r0, r0, #16
 801fe8e:	6028      	str	r0, [r5, #0]
 801fe90:	f8d9 0000 	ldr.w	r0, [r9]
 801fe94:	51b8      	str	r0, [r7, r6]
 801fe96:	f7ff fd24 	bl	801f8e2 <os_disable_isr>
 801fe9a:	6828      	ldr	r0, [r5, #0]
 801fe9c:	f1b8 0f01 	cmp.w	r8, #1
 801fea0:	f040 0020 	orr.w	r0, r0, #32
 801fea4:	6028      	str	r0, [r5, #0]
 801fea6:	d10f      	bne.n	801fec8 <llhwc_phy_sequencer_ram_cpy_strt_seq+0xd0>
 801fea8:	2c08      	cmp	r4, #8
 801feaa:	d30d      	bcc.n	801fec8 <llhwc_phy_sequencer_ram_cpy_strt_seq+0xd0>
 801feac:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 801feb0:	19f0      	adds	r0, r6, r7
 801feb2:	eb01 0194 	add.w	r1, r1, r4, lsr #2
 801feb6:	3004      	adds	r0, #4
 801feb8:	f109 0204 	add.w	r2, r9, #4
 801febc:	f852 3b04 	ldr.w	r3, [r2], #4
 801fec0:	3901      	subs	r1, #1
 801fec2:	f840 3b04 	str.w	r3, [r0], #4
 801fec6:	d1f9      	bne.n	801febc <llhwc_phy_sequencer_ram_cpy_strt_seq+0xc4>
 801fec8:	b001      	add	sp, #4
 801feca:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801fece:	f7ff bd0a 	b.w	801f8e6 <os_enable_isr>

0801fed2 <llhwc_phy_phy_driver_stop>:
 801fed2:	f247 00f8 	movw	r0, #28920	@ 0x70f8
 801fed6:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801feda:	2200      	movs	r2, #0
 801fedc:	6002      	str	r2, [r0, #0]
 801fede:	f240 4024 	movw	r0, #1060	@ 0x424
 801fee2:	f6c4 0002 	movt	r0, #18434	@ 0x4802
 801fee6:	6801      	ldr	r1, [r0, #0]
 801fee8:	f247 03f5 	movw	r3, #28917	@ 0x70f5
 801feec:	f021 0120 	bic.w	r1, r1, #32
 801fef0:	6001      	str	r1, [r0, #0]
 801fef2:	6801      	ldr	r1, [r0, #0]
 801fef4:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 801fef8:	f021 0110 	bic.w	r1, r1, #16
 801fefc:	6001      	str	r1, [r0, #0]
 801fefe:	f247 00f4 	movw	r0, #28916	@ 0x70f4
 801ff02:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801ff06:	7002      	strb	r2, [r0, #0]
 801ff08:	2000      	movs	r0, #0
 801ff0a:	2102      	movs	r1, #2
 801ff0c:	701a      	strb	r2, [r3, #0]
 801ff0e:	f003 be5f 	b.w	8023bd0 <llhwc_cmn_control_aclk>
	...

0801ff14 <llhwc_phy_get_phy_seq_cfg_time>:
 801ff14:	b570      	push	{r4, r5, r6, lr}
 801ff16:	ea5f 0e91 	movs.w	lr, r1, lsr #2
 801ff1a:	d024      	beq.n	801ff66 <llhwc_phy_get_phy_seq_cfg_time+0x52>
 801ff1c:	2100      	movs	r1, #0
 801ff1e:	2300      	movs	r3, #0
 801ff20:	f04f 0c00 	mov.w	ip, #0
 801ff24:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
 801ff28:	f004 05ef 	and.w	r5, r4, #239	@ 0xef
 801ff2c:	2d03      	cmp	r5, #3
 801ff2e:	bf18      	it	ne
 801ff30:	2da1      	cmpne	r5, #161	@ 0xa1
 801ff32:	d109      	bne.n	801ff48 <llhwc_phy_get_phy_seq_cfg_time+0x34>
 801ff34:	f004 04ee 	and.w	r4, r4, #238	@ 0xee
 801ff38:	3101      	adds	r1, #1
 801ff3a:	2c04      	cmp	r4, #4
 801ff3c:	bf08      	it	eq
 801ff3e:	3301      	addeq	r3, #1
 801ff40:	b2cc      	uxtb	r4, r1
 801ff42:	45a6      	cmp	lr, r4
 801ff44:	d8ee      	bhi.n	801ff24 <llhwc_phy_get_phy_seq_cfg_time+0x10>
 801ff46:	e011      	b.n	801ff6c <llhwc_phy_get_phy_seq_cfg_time+0x58>
 801ff48:	2c00      	cmp	r4, #0
 801ff4a:	ea4f 6514 	mov.w	r5, r4, lsr #24
 801ff4e:	d401      	bmi.n	801ff54 <llhwc_phy_get_phy_seq_cfg_time+0x40>
 801ff50:	44ac      	add	ip, r5
 801ff52:	e7ef      	b.n	801ff34 <llhwc_phy_get_phy_seq_cfg_time+0x20>
 801ff54:	f005 057f 	and.w	r5, r5, #127	@ 0x7f
 801ff58:	ebc5 1645 	rsb	r6, r5, r5, lsl #5
 801ff5c:	eb0c 0595 	add.w	r5, ip, r5, lsr #2
 801ff60:	eb05 0c06 	add.w	ip, r5, r6
 801ff64:	e7e6      	b.n	801ff34 <llhwc_phy_get_phy_seq_cfg_time+0x20>
 801ff66:	f04f 0c00 	mov.w	ip, #0
 801ff6a:	2300      	movs	r3, #0
 801ff6c:	2031      	movs	r0, #49	@ 0x31
 801ff6e:	fb02 f000 	mul.w	r0, r2, r0
 801ff72:	ebae 0203 	sub.w	r2, lr, r3
 801ff76:	b2d9      	uxtb	r1, r3
 801ff78:	3010      	adds	r0, #16
 801ff7a:	b2d2      	uxtb	r2, r2
 801ff7c:	fb00 f002 	mul.w	r0, r0, r2
 801ff80:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 801ff84:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 801ff88:	3014      	adds	r0, #20
 801ff8a:	eb0c 1090 	add.w	r0, ip, r0, lsr #6
 801ff8e:	bd70      	pop	{r4, r5, r6, pc}

0801ff90 <llhwc_phy_seq_ram_init>:
 801ff90:	b510      	push	{r4, lr}
 801ff92:	f641 5004 	movw	r0, #7428	@ 0x1d04
 801ff96:	f6c0 0003 	movt	r0, #2051	@ 0x803
 801ff9a:	6800      	ldr	r0, [r0, #0]
 801ff9c:	f240 0e00 	movw	lr, #0
 801ffa0:	0882      	lsrs	r2, r0, #2
 801ffa2:	f6c4 0e02 	movt	lr, #18434	@ 0x4802
 801ffa6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 801ffaa:	d010      	beq.n	801ffce <llhwc_phy_seq_ram_init+0x3e>
 801ffac:	f240 3c98 	movw	ip, #920	@ 0x398
 801ffb0:	2300      	movs	r3, #0
 801ffb2:	f2c2 0c00 	movt	ip, #8192	@ 0x2000
 801ffb6:	bf00      	nop
 801ffb8:	f85c 0003 	ldr.w	r0, [ip, r3]
 801ffbc:	eb0e 0403 	add.w	r4, lr, r3
 801ffc0:	3a01      	subs	r2, #1
 801ffc2:	f103 0304 	add.w	r3, r3, #4
 801ffc6:	5060      	str	r0, [r4, r1]
 801ffc8:	d1f6      	bne.n	801ffb8 <llhwc_phy_seq_ram_init+0x28>
 801ffca:	f503 5180 	add.w	r1, r3, #4096	@ 0x1000
 801ffce:	f641 521c 	movw	r2, #7452	@ 0x1d1c
 801ffd2:	f6c0 0203 	movt	r2, #2051	@ 0x803
 801ffd6:	6812      	ldr	r2, [r2, #0]
 801ffd8:	0892      	lsrs	r2, r2, #2
 801ffda:	d00b      	beq.n	801fff4 <llhwc_phy_seq_ram_init+0x64>
 801ffdc:	f240 4338 	movw	r3, #1080	@ 0x438
 801ffe0:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 801ffe4:	f853 0b04 	ldr.w	r0, [r3], #4
 801ffe8:	3a01      	subs	r2, #1
 801ffea:	f841 000e 	str.w	r0, [r1, lr]
 801ffee:	f101 0104 	add.w	r1, r1, #4
 801fff2:	d1f7      	bne.n	801ffe4 <llhwc_phy_seq_ram_init+0x54>
 801fff4:	f641 40e8 	movw	r0, #7400	@ 0x1ce8
 801fff8:	f6c0 0003 	movt	r0, #2051	@ 0x803
 801fffc:	6800      	ldr	r0, [r0, #0]
 801fffe:	0882      	lsrs	r2, r0, #2
 8020000:	d00c      	beq.n	802001c <llhwc_phy_seq_ram_init+0x8c>
 8020002:	f240 23a0 	movw	r3, #672	@ 0x2a0
 8020006:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 802000a:	bf00      	nop
 802000c:	f853 0b04 	ldr.w	r0, [r3], #4
 8020010:	3a01      	subs	r2, #1
 8020012:	f841 000e 	str.w	r0, [r1, lr]
 8020016:	f101 0104 	add.w	r1, r1, #4
 802001a:	d1f7      	bne.n	802000c <llhwc_phy_seq_ram_init+0x7c>
 802001c:	f641 40f4 	movw	r0, #7412	@ 0x1cf4
 8020020:	f6c0 0003 	movt	r0, #2051	@ 0x803
 8020024:	6800      	ldr	r0, [r0, #0]
 8020026:	0882      	lsrs	r2, r0, #2
 8020028:	d00c      	beq.n	8020044 <llhwc_phy_seq_ram_init+0xb4>
 802002a:	f240 23c8 	movw	r3, #712	@ 0x2c8
 802002e:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8020032:	bf00      	nop
 8020034:	f853 0b04 	ldr.w	r0, [r3], #4
 8020038:	3a01      	subs	r2, #1
 802003a:	f841 000e 	str.w	r0, [r1, lr]
 802003e:	f101 0104 	add.w	r1, r1, #4
 8020042:	d1f7      	bne.n	8020034 <llhwc_phy_seq_ram_init+0xa4>
 8020044:	f641 40ec 	movw	r0, #7404	@ 0x1cec
 8020048:	f6c0 0003 	movt	r0, #2051	@ 0x803
 802004c:	6800      	ldr	r0, [r0, #0]
 802004e:	0882      	lsrs	r2, r0, #2
 8020050:	d00c      	beq.n	802006c <llhwc_phy_seq_ram_init+0xdc>
 8020052:	f240 23f0 	movw	r3, #752	@ 0x2f0
 8020056:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 802005a:	bf00      	nop
 802005c:	f853 0b04 	ldr.w	r0, [r3], #4
 8020060:	3a01      	subs	r2, #1
 8020062:	f841 000e 	str.w	r0, [r1, lr]
 8020066:	f101 0104 	add.w	r1, r1, #4
 802006a:	d1f7      	bne.n	802005c <llhwc_phy_seq_ram_init+0xcc>
 802006c:	f641 5008 	movw	r0, #7432	@ 0x1d08
 8020070:	f6c0 0003 	movt	r0, #2051	@ 0x803
 8020074:	6800      	ldr	r0, [r0, #0]
 8020076:	0882      	lsrs	r2, r0, #2
 8020078:	d00c      	beq.n	8020094 <llhwc_phy_seq_ram_init+0x104>
 802007a:	f240 33b8 	movw	r3, #952	@ 0x3b8
 802007e:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8020082:	bf00      	nop
 8020084:	f853 0b04 	ldr.w	r0, [r3], #4
 8020088:	3a01      	subs	r2, #1
 802008a:	f841 000e 	str.w	r0, [r1, lr]
 802008e:	f101 0104 	add.w	r1, r1, #4
 8020092:	d1f7      	bne.n	8020084 <llhwc_phy_seq_ram_init+0xf4>
 8020094:	f641 500c 	movw	r0, #7436	@ 0x1d0c
 8020098:	f6c0 0003 	movt	r0, #2051	@ 0x803
 802009c:	6800      	ldr	r0, [r0, #0]
 802009e:	0882      	lsrs	r2, r0, #2
 80200a0:	d00c      	beq.n	80200bc <llhwc_phy_seq_ram_init+0x12c>
 80200a2:	f240 33d8 	movw	r3, #984	@ 0x3d8
 80200a6:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80200aa:	bf00      	nop
 80200ac:	f853 0b04 	ldr.w	r0, [r3], #4
 80200b0:	3a01      	subs	r2, #1
 80200b2:	f841 000e 	str.w	r0, [r1, lr]
 80200b6:	f101 0104 	add.w	r1, r1, #4
 80200ba:	d1f7      	bne.n	80200ac <llhwc_phy_seq_ram_init+0x11c>
 80200bc:	f641 5010 	movw	r0, #7440	@ 0x1d10
 80200c0:	f6c0 0003 	movt	r0, #2051	@ 0x803
 80200c4:	6800      	ldr	r0, [r0, #0]
 80200c6:	0882      	lsrs	r2, r0, #2
 80200c8:	d00c      	beq.n	80200e4 <llhwc_phy_seq_ram_init+0x154>
 80200ca:	f240 33f8 	movw	r3, #1016	@ 0x3f8
 80200ce:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80200d2:	bf00      	nop
 80200d4:	f853 0b04 	ldr.w	r0, [r3], #4
 80200d8:	3a01      	subs	r2, #1
 80200da:	f841 000e 	str.w	r0, [r1, lr]
 80200de:	f101 0104 	add.w	r1, r1, #4
 80200e2:	d1f7      	bne.n	80200d4 <llhwc_phy_seq_ram_init+0x144>
 80200e4:	f641 40a0 	movw	r0, #7328	@ 0x1ca0
 80200e8:	f6c0 0003 	movt	r0, #2051	@ 0x803
 80200ec:	6800      	ldr	r0, [r0, #0]
 80200ee:	f247 03fc 	movw	r3, #28924	@ 0x70fc
 80200f2:	f841 000e 	str.w	r0, [r1, lr]
 80200f6:	1d0a      	adds	r2, r1, #4
 80200f8:	2000      	movs	r0, #0
 80200fa:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80200fe:	f5b2 5f90 	cmp.w	r2, #4608	@ 0x1200
 8020102:	bf98      	it	ls
 8020104:	2001      	movls	r0, #1
 8020106:	2101      	movs	r1, #1
 8020108:	601a      	str	r2, [r3, #0]
 802010a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802010e:	f7ff bb88 	b.w	801f822 <bsp_assert>

08020112 <llhwc_phy_get_prdc_clbr_cfg_time>:
 8020112:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020116:	b083      	sub	sp, #12
 8020118:	2800      	cmp	r0, #0
 802011a:	9202      	str	r2, [sp, #8]
 802011c:	460e      	mov	r6, r1
 802011e:	4605      	mov	r5, r0
 8020120:	bf18      	it	ne
 8020122:	2001      	movne	r0, #1
 8020124:	2900      	cmp	r1, #0
 8020126:	bf18      	it	ne
 8020128:	2101      	movne	r1, #1
 802012a:	4008      	ands	r0, r1
 802012c:	2101      	movs	r1, #1
 802012e:	f7ff fb78 	bl	801f822 <bsp_assert>
 8020132:	f641 40ac 	movw	r0, #7340	@ 0x1cac
 8020136:	f6c0 0003 	movt	r0, #2051	@ 0x803
 802013a:	6801      	ldr	r1, [r0, #0]
 802013c:	f641 10a8 	movw	r0, #6568	@ 0x19a8
 8020140:	f6c0 0003 	movt	r0, #2051	@ 0x803
 8020144:	2202      	movs	r2, #2
 8020146:	f7ff fee5 	bl	801ff14 <llhwc_phy_get_phy_seq_cfg_time>
 802014a:	f641 41bc 	movw	r1, #7356	@ 0x1cbc
 802014e:	f6c0 0103 	movt	r1, #2051	@ 0x803
 8020152:	6809      	ldr	r1, [r1, #0]
 8020154:	9001      	str	r0, [sp, #4]
 8020156:	f641 10cc 	movw	r0, #6604	@ 0x19cc
 802015a:	f6c0 0003 	movt	r0, #2051	@ 0x803
 802015e:	2202      	movs	r2, #2
 8020160:	f7ff fed8 	bl	801ff14 <llhwc_phy_get_phy_seq_cfg_time>
 8020164:	f641 41c0 	movw	r1, #7360	@ 0x1cc0
 8020168:	f6c0 0103 	movt	r1, #2051	@ 0x803
 802016c:	6809      	ldr	r1, [r1, #0]
 802016e:	9000      	str	r0, [sp, #0]
 8020170:	f641 20b4 	movw	r0, #6836	@ 0x1ab4
 8020174:	f6c0 0003 	movt	r0, #2051	@ 0x803
 8020178:	2202      	movs	r2, #2
 802017a:	f7ff fecb 	bl	801ff14 <llhwc_phy_get_phy_seq_cfg_time>
 802017e:	f641 41c4 	movw	r1, #7364	@ 0x1cc4
 8020182:	f6c0 0103 	movt	r1, #2051	@ 0x803
 8020186:	6809      	ldr	r1, [r1, #0]
 8020188:	4683      	mov	fp, r0
 802018a:	f641 309c 	movw	r0, #7068	@ 0x1b9c
 802018e:	f6c0 0003 	movt	r0, #2051	@ 0x803
 8020192:	2202      	movs	r2, #2
 8020194:	f7ff febe 	bl	801ff14 <llhwc_phy_get_phy_seq_cfg_time>
 8020198:	f641 41c8 	movw	r1, #7368	@ 0x1cc8
 802019c:	f6c0 0103 	movt	r1, #2051	@ 0x803
 80201a0:	6809      	ldr	r1, [r1, #0]
 80201a2:	4604      	mov	r4, r0
 80201a4:	f641 30c8 	movw	r0, #7112	@ 0x1bc8
 80201a8:	f6c0 0003 	movt	r0, #2051	@ 0x803
 80201ac:	2202      	movs	r2, #2
 80201ae:	f7ff feb1 	bl	801ff14 <llhwc_phy_get_phy_seq_cfg_time>
 80201b2:	f641 41cc 	movw	r1, #7372	@ 0x1ccc
 80201b6:	f6c0 0103 	movt	r1, #2051	@ 0x803
 80201ba:	6809      	ldr	r1, [r1, #0]
 80201bc:	4607      	mov	r7, r0
 80201be:	f240 100c 	movw	r0, #268	@ 0x10c
 80201c2:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80201c6:	2202      	movs	r2, #2
 80201c8:	f7ff fea4 	bl	801ff14 <llhwc_phy_get_phy_seq_cfg_time>
 80201cc:	307d      	adds	r0, #125	@ 0x7d
 80201ce:	f04f 087d 	mov.w	r8, #125	@ 0x7d
 80201d2:	eb08 0180 	add.w	r1, r8, r0, lsl #2
 80201d6:	f644 59d3 	movw	r9, #19923	@ 0x4dd3
 80201da:	f2c1 0962 	movt	r9, #4194	@ 0x1062
 80201de:	6030      	str	r0, [r6, #0]
 80201e0:	fba1 0109 	umull	r0, r1, r1, r9
 80201e4:	2004      	movs	r0, #4
 80201e6:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
 80201ea:	f641 41a8 	movw	r1, #7336	@ 0x1ca8
 80201ee:	f247 1a04 	movw	sl, #28932	@ 0x7104
 80201f2:	f6c0 0103 	movt	r1, #2051	@ 0x803
 80201f6:	f2c2 0a00 	movt	sl, #8192	@ 0x2000
 80201fa:	6809      	ldr	r1, [r1, #0]
 80201fc:	f88a 000d 	strb.w	r0, [sl, #13]
 8020200:	f641 109c 	movw	r0, #6556	@ 0x199c
 8020204:	f6c0 0003 	movt	r0, #2051	@ 0x803
 8020208:	2202      	movs	r2, #2
 802020a:	f7ff fe83 	bl	801ff14 <llhwc_phy_get_phy_seq_cfg_time>
 802020e:	f641 41e4 	movw	r1, #7396	@ 0x1ce4
 8020212:	f6c0 0103 	movt	r1, #2051	@ 0x803
 8020216:	6809      	ldr	r1, [r1, #0]
 8020218:	4606      	mov	r6, r0
 802021a:	f240 2098 	movw	r0, #664	@ 0x298
 802021e:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8020222:	2202      	movs	r2, #2
 8020224:	f7ff fe76 	bl	801ff14 <llhwc_phy_get_phy_seq_cfg_time>
 8020228:	e9dd 2100 	ldrd	r2, r1, [sp]
 802022c:	4411      	add	r1, r2
 802022e:	4459      	add	r1, fp
 8020230:	4421      	add	r1, r4
 8020232:	4431      	add	r1, r6
 8020234:	4408      	add	r0, r1
 8020236:	19ca      	adds	r2, r1, r7
 8020238:	eb08 0180 	add.w	r1, r8, r0, lsl #2
 802023c:	32d5      	adds	r2, #213	@ 0xd5
 802023e:	602a      	str	r2, [r5, #0]
 8020240:	fba1 1209 	umull	r1, r2, r1, r9
 8020244:	2103      	movs	r1, #3
 8020246:	eb01 01d2 	add.w	r1, r1, r2, lsr #3
 802024a:	9a02      	ldr	r2, [sp, #8]
 802024c:	f88a 100c 	strb.w	r1, [sl, #12]
 8020250:	6010      	str	r0, [r2, #0]
 8020252:	b003      	add	sp, #12
 8020254:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020258 <llhwc_phy_set_cfg_time>:
 8020258:	b510      	push	{r4, lr}
 802025a:	f7ff fb42 	bl	801f8e2 <os_disable_isr>
 802025e:	f641 40e8 	movw	r0, #7400	@ 0x1ce8
 8020262:	f6c0 0003 	movt	r0, #2051	@ 0x803
 8020266:	6801      	ldr	r1, [r0, #0]
 8020268:	f240 20a0 	movw	r0, #672	@ 0x2a0
 802026c:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8020270:	2202      	movs	r2, #2
 8020272:	f7ff fe4f 	bl	801ff14 <llhwc_phy_get_phy_seq_cfg_time>
 8020276:	f641 5108 	movw	r1, #7432	@ 0x1d08
 802027a:	f6c0 0103 	movt	r1, #2051	@ 0x803
 802027e:	6809      	ldr	r1, [r1, #0]
 8020280:	4604      	mov	r4, r0
 8020282:	f240 4018 	movw	r0, #1048	@ 0x418
 8020286:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 802028a:	2202      	movs	r2, #2
 802028c:	f7ff fe42 	bl	801ff14 <llhwc_phy_get_phy_seq_cfg_time>
 8020290:	f247 1290 	movw	r2, #29072	@ 0x7190
 8020294:	1c61      	adds	r1, r4, #1
 8020296:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 802029a:	3004      	adds	r0, #4
 802029c:	e9c2 1000 	strd	r1, r0, [r2]
 80202a0:	f641 5104 	movw	r1, #7428	@ 0x1d04
 80202a4:	f6c0 0103 	movt	r1, #2051	@ 0x803
 80202a8:	6809      	ldr	r1, [r1, #0]
 80202aa:	60d0      	str	r0, [r2, #12]
 80202ac:	f240 3098 	movw	r0, #920	@ 0x398
 80202b0:	6094      	str	r4, [r2, #8]
 80202b2:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80202b6:	2202      	movs	r2, #2
 80202b8:	f7ff fe2c 	bl	801ff14 <llhwc_phy_get_phy_seq_cfg_time>
 80202bc:	f641 5135 	movw	r1, #7477	@ 0x1d35
 80202c0:	f641 5239 	movw	r2, #7481	@ 0x1d39
 80202c4:	f6c0 0103 	movt	r1, #2051	@ 0x803
 80202c8:	f6c0 0203 	movt	r2, #2051	@ 0x803
 80202cc:	4420      	add	r0, r4
 80202ce:	7809      	ldrb	r1, [r1, #0]
 80202d0:	7812      	ldrb	r2, [r2, #0]
 80202d2:	3004      	adds	r0, #4
 80202d4:	f247 13ac 	movw	r3, #29100	@ 0x71ac
 80202d8:	4401      	add	r1, r0
 80202da:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80202de:	4410      	add	r0, r2
 80202e0:	e9c3 1000 	strd	r1, r0, [r3]
 80202e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80202e8:	f7ff bafd 	b.w	801f8e6 <os_enable_isr>

080202ec <llhwc_phy_strt_stp>:
 80202ec:	b570      	push	{r4, r5, r6, lr}
 80202ee:	460c      	mov	r4, r1
 80202f0:	4605      	mov	r5, r0
 80202f2:	2802      	cmp	r0, #2
 80202f4:	f04f 0000 	mov.w	r0, #0
 80202f8:	f04f 0101 	mov.w	r1, #1
 80202fc:	bf38      	it	cc
 80202fe:	2001      	movcc	r0, #1
 8020300:	2600      	movs	r6, #0
 8020302:	f7ff fa8e 	bl	801f822 <bsp_assert>
 8020306:	b3ad      	cbz	r5, 8020374 <llhwc_phy_strt_stp+0x88>
 8020308:	f641 5024 	movw	r0, #7460	@ 0x1d24
 802030c:	f6c0 0003 	movt	r0, #2051	@ 0x803
 8020310:	6800      	ldr	r0, [r0, #0]
 8020312:	2200      	movs	r2, #0
 8020314:	0881      	lsrs	r1, r0, #2
 8020316:	f641 4094 	movw	r0, #7316	@ 0x1c94
 802031a:	f6c0 0003 	movt	r0, #2051	@ 0x803
 802031e:	2300      	movs	r3, #0
 8020320:	2400      	movs	r4, #0
 8020322:	f7ff fc01 	bl	801fb28 <llhwc_phy_write_cfg_fifo_batch>
 8020326:	f247 3018 	movw	r0, #29464	@ 0x7318
 802032a:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 802032e:	f890 0050 	ldrb.w	r0, [r0, #80]	@ 0x50
 8020332:	b9a8      	cbnz	r0, 8020360 <llhwc_phy_strt_stp+0x74>
 8020334:	f247 1004 	movw	r0, #28932	@ 0x7104
 8020338:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 802033c:	f890 0038 	ldrb.w	r0, [r0, #56]	@ 0x38
 8020340:	2802      	cmp	r0, #2
 8020342:	d00d      	beq.n	8020360 <llhwc_phy_strt_stp+0x74>
 8020344:	f641 40a8 	movw	r0, #7336	@ 0x1ca8
 8020348:	f6c0 0003 	movt	r0, #2051	@ 0x803
 802034c:	6800      	ldr	r0, [r0, #0]
 802034e:	2200      	movs	r2, #0
 8020350:	0881      	lsrs	r1, r0, #2
 8020352:	f641 109c 	movw	r0, #6556	@ 0x199c
 8020356:	f6c0 0003 	movt	r0, #2051	@ 0x803
 802035a:	2300      	movs	r3, #0
 802035c:	f7ff fbe4 	bl	801fb28 <llhwc_phy_write_cfg_fifo_batch>
 8020360:	f247 01f0 	movw	r1, #28912	@ 0x70f0
 8020364:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8020368:	2000      	movs	r0, #0
 802036a:	600c      	str	r4, [r1, #0]
 802036c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8020370:	f001 bfe1 	b.w	8022336 <ll_tx_pwr_if_epa_enable>
 8020374:	2098      	movs	r0, #152	@ 0x98
 8020376:	f7ff fa9f 	bl	801f8b8 <bsp_debug_gpio_toggle>
 802037a:	f247 00f4 	movw	r0, #28916	@ 0x70f4
 802037e:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8020382:	7006      	strb	r6, [r0, #0]
 8020384:	f247 00f5 	movw	r0, #28917	@ 0x70f5
 8020388:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 802038c:	7006      	strb	r6, [r0, #0]
 802038e:	b91c      	cbnz	r4, 8020398 <llhwc_phy_strt_stp+0xac>
 8020390:	2001      	movs	r0, #1
 8020392:	2102      	movs	r1, #2
 8020394:	f003 fc1c 	bl	8023bd0 <llhwc_cmn_control_aclk>
 8020398:	f247 3018 	movw	r0, #29464	@ 0x7318
 802039c:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80203a0:	f890 0050 	ldrb.w	r0, [r0, #80]	@ 0x50
 80203a4:	bbb8      	cbnz	r0, 8020416 <llhwc_phy_strt_stp+0x12a>
 80203a6:	f247 1004 	movw	r0, #28932	@ 0x7104
 80203aa:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80203ae:	f890 0038 	ldrb.w	r0, [r0, #56]	@ 0x38
 80203b2:	2802      	cmp	r0, #2
 80203b4:	d02f      	beq.n	8020416 <llhwc_phy_strt_stp+0x12a>
 80203b6:	f641 40b0 	movw	r0, #7344	@ 0x1cb0
 80203ba:	f6c0 0003 	movt	r0, #2051	@ 0x803
 80203be:	6801      	ldr	r1, [r0, #0]
 80203c0:	f641 10b4 	movw	r0, #6580	@ 0x19b4
 80203c4:	f6c0 0003 	movt	r0, #2051	@ 0x803
 80203c8:	4622      	mov	r2, r4
 80203ca:	f7ff fb9e 	bl	801fb0a <llhwc_phy_run_phy_sequence>
 80203ce:	f641 40bc 	movw	r0, #7356	@ 0x1cbc
 80203d2:	f6c0 0003 	movt	r0, #2051	@ 0x803
 80203d6:	6801      	ldr	r1, [r0, #0]
 80203d8:	f641 10cc 	movw	r0, #6604	@ 0x19cc
 80203dc:	f6c0 0003 	movt	r0, #2051	@ 0x803
 80203e0:	4622      	mov	r2, r4
 80203e2:	f7ff fb92 	bl	801fb0a <llhwc_phy_run_phy_sequence>
 80203e6:	f641 40c0 	movw	r0, #7360	@ 0x1cc0
 80203ea:	f6c0 0003 	movt	r0, #2051	@ 0x803
 80203ee:	6801      	ldr	r1, [r0, #0]
 80203f0:	f641 20b4 	movw	r0, #6836	@ 0x1ab4
 80203f4:	f6c0 0003 	movt	r0, #2051	@ 0x803
 80203f8:	4622      	mov	r2, r4
 80203fa:	f7ff fb86 	bl	801fb0a <llhwc_phy_run_phy_sequence>
 80203fe:	f641 40c4 	movw	r0, #7364	@ 0x1cc4
 8020402:	f6c0 0003 	movt	r0, #2051	@ 0x803
 8020406:	6801      	ldr	r1, [r0, #0]
 8020408:	f641 309c 	movw	r0, #7068	@ 0x1b9c
 802040c:	f6c0 0003 	movt	r0, #2051	@ 0x803
 8020410:	4622      	mov	r2, r4
 8020412:	f7ff fb7a 	bl	801fb0a <llhwc_phy_run_phy_sequence>
 8020416:	f641 40d8 	movw	r0, #7384	@ 0x1cd8
 802041a:	f6c0 0003 	movt	r0, #2051	@ 0x803
 802041e:	6801      	ldr	r1, [r0, #0]
 8020420:	f240 1050 	movw	r0, #336	@ 0x150
 8020424:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8020428:	4622      	mov	r2, r4
 802042a:	f7ff fb6e 	bl	801fb0a <llhwc_phy_run_phy_sequence>
 802042e:	f641 40dc 	movw	r0, #7388	@ 0x1cdc
 8020432:	f6c0 0003 	movt	r0, #2051	@ 0x803
 8020436:	6801      	ldr	r1, [r0, #0]
 8020438:	f240 2038 	movw	r0, #568	@ 0x238
 802043c:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8020440:	4622      	mov	r2, r4
 8020442:	f7ff fb62 	bl	801fb0a <llhwc_phy_run_phy_sequence>
 8020446:	f641 40e0 	movw	r0, #7392	@ 0x1ce0
 802044a:	f6c0 0003 	movt	r0, #2051	@ 0x803
 802044e:	6801      	ldr	r1, [r0, #0]
 8020450:	f240 2094 	movw	r0, #660	@ 0x294
 8020454:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8020458:	4622      	mov	r2, r4
 802045a:	f7ff fb56 	bl	801fb0a <llhwc_phy_run_phy_sequence>
 802045e:	f641 5020 	movw	r0, #7456	@ 0x1d20
 8020462:	f6c0 0003 	movt	r0, #2051	@ 0x803
 8020466:	6801      	ldr	r1, [r0, #0]
 8020468:	f641 4084 	movw	r0, #7300	@ 0x1c84
 802046c:	f6c0 0003 	movt	r0, #2051	@ 0x803
 8020470:	4622      	mov	r2, r4
 8020472:	f7ff fb4a 	bl	801fb0a <llhwc_phy_run_phy_sequence>
 8020476:	f247 01f0 	movw	r1, #28912	@ 0x70f0
 802047a:	2001      	movs	r0, #1
 802047c:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8020480:	6008      	str	r0, [r1, #0]
 8020482:	b91c      	cbnz	r4, 802048c <llhwc_phy_strt_stp+0x1a0>
 8020484:	2000      	movs	r0, #0
 8020486:	2102      	movs	r1, #2
 8020488:	f003 fba2 	bl	8023bd0 <llhwc_cmn_control_aclk>
 802048c:	2098      	movs	r0, #152	@ 0x98
 802048e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8020492:	f7ff ba11 	b.w	801f8b8 <bsp_debug_gpio_toggle>

08020496 <llhwc_phy_reset>:
 8020496:	b580      	push	{r7, lr}
 8020498:	f240 4c24 	movw	ip, #1060	@ 0x424
 802049c:	f6c4 0c02 	movt	ip, #18434	@ 0x4802
 80204a0:	f641 41b4 	movw	r1, #7348	@ 0x1cb4
 80204a4:	f8dc 0000 	ldr.w	r0, [ip]
 80204a8:	f6c0 0103 	movt	r1, #2051	@ 0x803
 80204ac:	6809      	ldr	r1, [r1, #0]
 80204ae:	f020 0e1c 	bic.w	lr, r0, #28
 80204b2:	f641 10c0 	movw	r0, #6592	@ 0x19c0
 80204b6:	0889      	lsrs	r1, r1, #2
 80204b8:	f6c0 0003 	movt	r0, #2051	@ 0x803
 80204bc:	2200      	movs	r2, #0
 80204be:	2300      	movs	r3, #0
 80204c0:	f8cc e000 	str.w	lr, [ip]
 80204c4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80204c8:	f7ff bb2e 	b.w	801fb28 <llhwc_phy_write_cfg_fifo_batch>

080204cc <llhwc_phy_recover_from_ll_dp_slp>:
 80204cc:	b580      	push	{r7, lr}
 80204ce:	f641 40b8 	movw	r0, #7352	@ 0x1cb8
 80204d2:	f6c0 0003 	movt	r0, #2051	@ 0x803
 80204d6:	6800      	ldr	r0, [r0, #0]
 80204d8:	2200      	movs	r2, #0
 80204da:	0881      	lsrs	r1, r0, #2
 80204dc:	f641 10c8 	movw	r0, #6600	@ 0x19c8
 80204e0:	f6c0 0003 	movt	r0, #2051	@ 0x803
 80204e4:	2300      	movs	r3, #0
 80204e6:	f7ff fb1f 	bl	801fb28 <llhwc_phy_write_cfg_fifo_batch>
 80204ea:	f247 00fc 	movw	r0, #28924	@ 0x70fc
 80204ee:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80204f2:	6800      	ldr	r0, [r0, #0]
 80204f4:	f44f 51fe 	mov.w	r1, #8128	@ 0x1fc0
 80204f8:	f240 4224 	movw	r2, #1060	@ 0x424
 80204fc:	f6c4 0202 	movt	r2, #18434	@ 0x4802
 8020500:	eb01 1000 	add.w	r0, r1, r0, lsl #4
 8020504:	6811      	ldr	r1, [r2, #0]
 8020506:	0980      	lsrs	r0, r0, #6
 8020508:	f360 118c 	bfi	r1, r0, #6, #7
 802050c:	6011      	str	r1, [r2, #0]
 802050e:	f641 5134 	movw	r1, #7476	@ 0x1d34
 8020512:	6910      	ldr	r0, [r2, #16]
 8020514:	f6c0 0103 	movt	r1, #2051	@ 0x803
 8020518:	7809      	ldrb	r1, [r1, #0]
 802051a:	f020 00ff 	bic.w	r0, r0, #255	@ 0xff
 802051e:	4408      	add	r0, r1
 8020520:	6110      	str	r0, [r2, #16]
 8020522:	bd80      	pop	{r7, pc}

08020524 <llhwc_phy_init_clbr>:
 8020524:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020528:	b082      	sub	sp, #8
 802052a:	2001      	movs	r0, #1
 802052c:	f88d 0007 	strb.w	r0, [sp, #7]
 8020530:	202d      	movs	r0, #45	@ 0x2d
 8020532:	f7ff f9bd 	bl	801f8b0 <bsp_debug_gpio_set>
 8020536:	2001      	movs	r0, #1
 8020538:	2102      	movs	r1, #2
 802053a:	f003 fb49 	bl	8023bd0 <llhwc_cmn_control_aclk>
 802053e:	f247 3018 	movw	r0, #29464	@ 0x7318
 8020542:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8020546:	f890 0050 	ldrb.w	r0, [r0, #80]	@ 0x50
 802054a:	bbb8      	cbnz	r0, 80205bc <llhwc_phy_init_clbr+0x98>
 802054c:	f641 40ac 	movw	r0, #7340	@ 0x1cac
 8020550:	f6c0 0003 	movt	r0, #2051	@ 0x803
 8020554:	6800      	ldr	r0, [r0, #0]
 8020556:	2200      	movs	r2, #0
 8020558:	0881      	lsrs	r1, r0, #2
 802055a:	f641 10a8 	movw	r0, #6568	@ 0x19a8
 802055e:	f6c0 0003 	movt	r0, #2051	@ 0x803
 8020562:	2300      	movs	r3, #0
 8020564:	f7ff fae0 	bl	801fb28 <llhwc_phy_write_cfg_fifo_batch>
 8020568:	f641 40bc 	movw	r0, #7356	@ 0x1cbc
 802056c:	f6c0 0003 	movt	r0, #2051	@ 0x803
 8020570:	6800      	ldr	r0, [r0, #0]
 8020572:	2200      	movs	r2, #0
 8020574:	0881      	lsrs	r1, r0, #2
 8020576:	f641 10cc 	movw	r0, #6604	@ 0x19cc
 802057a:	f6c0 0003 	movt	r0, #2051	@ 0x803
 802057e:	2300      	movs	r3, #0
 8020580:	f7ff fad2 	bl	801fb28 <llhwc_phy_write_cfg_fifo_batch>
 8020584:	f641 40c0 	movw	r0, #7360	@ 0x1cc0
 8020588:	f6c0 0003 	movt	r0, #2051	@ 0x803
 802058c:	6800      	ldr	r0, [r0, #0]
 802058e:	2200      	movs	r2, #0
 8020590:	0881      	lsrs	r1, r0, #2
 8020592:	f641 20b4 	movw	r0, #6836	@ 0x1ab4
 8020596:	f6c0 0003 	movt	r0, #2051	@ 0x803
 802059a:	2300      	movs	r3, #0
 802059c:	f7ff fac4 	bl	801fb28 <llhwc_phy_write_cfg_fifo_batch>
 80205a0:	f641 40c4 	movw	r0, #7364	@ 0x1cc4
 80205a4:	f6c0 0003 	movt	r0, #2051	@ 0x803
 80205a8:	6800      	ldr	r0, [r0, #0]
 80205aa:	2200      	movs	r2, #0
 80205ac:	0881      	lsrs	r1, r0, #2
 80205ae:	f641 309c 	movw	r0, #7068	@ 0x1b9c
 80205b2:	f6c0 0003 	movt	r0, #2051	@ 0x803
 80205b6:	2300      	movs	r3, #0
 80205b8:	f7ff fab6 	bl	801fb28 <llhwc_phy_write_cfg_fifo_batch>
 80205bc:	f10d 0107 	add.w	r1, sp, #7
 80205c0:	2000      	movs	r0, #0
 80205c2:	f04f 0800 	mov.w	r8, #0
 80205c6:	f000 f833 	bl	8020630 <llhwc_phy_run_pre_post_phy_clbr>
 80205ca:	f641 5030 	movw	r0, #7472	@ 0x1d30
 80205ce:	f6c0 0003 	movt	r0, #2051	@ 0x803
 80205d2:	6807      	ldr	r7, [r0, #0]
 80205d4:	b1df      	cbz	r7, 802060e <llhwc_phy_init_clbr+0xea>
 80205d6:	f641 40cc 	movw	r0, #7372	@ 0x1ccc
 80205da:	f6c0 0003 	movt	r0, #2051	@ 0x803
 80205de:	6800      	ldr	r0, [r0, #0]
 80205e0:	f240 150c 	movw	r5, #268	@ 0x10c
 80205e4:	0884      	lsrs	r4, r0, #2
 80205e6:	2600      	movs	r6, #0
 80205e8:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 80205ec:	2030      	movs	r0, #48	@ 0x30
 80205ee:	f7ff f95f 	bl	801f8b0 <bsp_debug_gpio_set>
 80205f2:	0c30      	lsrs	r0, r6, #16
 80205f4:	70a8      	strb	r0, [r5, #2]
 80205f6:	4628      	mov	r0, r5
 80205f8:	4621      	mov	r1, r4
 80205fa:	2200      	movs	r2, #0
 80205fc:	2300      	movs	r3, #0
 80205fe:	f7ff fa93 	bl	801fb28 <llhwc_phy_write_cfg_fifo_batch>
 8020602:	f000 f8f8 	bl	80207f6 <llhwc_phy_read_updt_vco_pll_clbr>
 8020606:	3f01      	subs	r7, #1
 8020608:	f506 3680 	add.w	r6, r6, #65536	@ 0x10000
 802060c:	d1ee      	bne.n	80205ec <llhwc_phy_init_clbr+0xc8>
 802060e:	f10d 0107 	add.w	r1, sp, #7
 8020612:	2001      	movs	r0, #1
 8020614:	f000 f80c 	bl	8020630 <llhwc_phy_run_pre_post_phy_clbr>
 8020618:	f247 1004 	movw	r0, #28932	@ 0x7104
 802061c:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8020620:	f880 8038 	strb.w	r8, [r0, #56]	@ 0x38
 8020624:	202d      	movs	r0, #45	@ 0x2d
 8020626:	f7ff f945 	bl	801f8b4 <bsp_debug_gpio_clear>
 802062a:	b002      	add	sp, #8
 802062c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08020630 <llhwc_phy_run_pre_post_phy_clbr>:
 8020630:	b570      	push	{r4, r5, r6, lr}
 8020632:	460c      	mov	r4, r1
 8020634:	f247 3118 	movw	r1, #29464	@ 0x7318
 8020638:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 802063c:	f247 1504 	movw	r5, #28932	@ 0x7104
 8020640:	f891 1050 	ldrb.w	r1, [r1, #80]	@ 0x50
 8020644:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 8020648:	f895 2038 	ldrb.w	r2, [r5, #56]	@ 0x38
 802064c:	fab1 f181 	clz	r1, r1
 8020650:	0949      	lsrs	r1, r1, #5
 8020652:	3a02      	subs	r2, #2
 8020654:	bf18      	it	ne
 8020656:	2201      	movne	r2, #1
 8020658:	2801      	cmp	r0, #1
 802065a:	ea01 0002 	and.w	r0, r1, r2
 802065e:	d126      	bne.n	80206ae <llhwc_phy_run_pre_post_phy_clbr+0x7e>
 8020660:	f641 41d0 	movw	r1, #7376	@ 0x1cd0
 8020664:	2800      	cmp	r0, #0
 8020666:	f641 40a8 	movw	r0, #7336	@ 0x1ca8
 802066a:	f6c0 0103 	movt	r1, #2051	@ 0x803
 802066e:	f6c0 0003 	movt	r0, #2051	@ 0x803
 8020672:	bf18      	it	ne
 8020674:	4601      	movne	r1, r0
 8020676:	f641 129c 	movw	r2, #6556	@ 0x199c
 802067a:	f641 4070 	movw	r0, #7280	@ 0x1c70
 802067e:	6809      	ldr	r1, [r1, #0]
 8020680:	f6c0 0203 	movt	r2, #2051	@ 0x803
 8020684:	f6c0 0003 	movt	r0, #2051	@ 0x803
 8020688:	bf18      	it	ne
 802068a:	4610      	movne	r0, r2
 802068c:	0889      	lsrs	r1, r1, #2
 802068e:	2200      	movs	r2, #0
 8020690:	2300      	movs	r3, #0
 8020692:	2400      	movs	r4, #0
 8020694:	f7ff fa48 	bl	801fb28 <llhwc_phy_write_cfg_fifo_batch>
 8020698:	f247 02f0 	movw	r2, #28912	@ 0x70f0
 802069c:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 80206a0:	2000      	movs	r0, #0
 80206a2:	2102      	movs	r1, #2
 80206a4:	6014      	str	r4, [r2, #0]
 80206a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80206aa:	f003 ba91 	b.w	8023bd0 <llhwc_cmn_control_aclk>
 80206ae:	b3b8      	cbz	r0, 8020720 <llhwc_phy_run_pre_post_phy_clbr+0xf0>
 80206b0:	f641 40ac 	movw	r0, #7340	@ 0x1cac
 80206b4:	f6c0 0003 	movt	r0, #2051	@ 0x803
 80206b8:	6800      	ldr	r0, [r0, #0]
 80206ba:	2200      	movs	r2, #0
 80206bc:	0881      	lsrs	r1, r0, #2
 80206be:	f641 10a8 	movw	r0, #6568	@ 0x19a8
 80206c2:	f6c0 0003 	movt	r0, #2051	@ 0x803
 80206c6:	2300      	movs	r3, #0
 80206c8:	f7ff fa2e 	bl	801fb28 <llhwc_phy_write_cfg_fifo_batch>
 80206cc:	f641 40bc 	movw	r0, #7356	@ 0x1cbc
 80206d0:	f6c0 0003 	movt	r0, #2051	@ 0x803
 80206d4:	6800      	ldr	r0, [r0, #0]
 80206d6:	2200      	movs	r2, #0
 80206d8:	0881      	lsrs	r1, r0, #2
 80206da:	f641 10cc 	movw	r0, #6604	@ 0x19cc
 80206de:	f6c0 0003 	movt	r0, #2051	@ 0x803
 80206e2:	2300      	movs	r3, #0
 80206e4:	f7ff fa20 	bl	801fb28 <llhwc_phy_write_cfg_fifo_batch>
 80206e8:	f641 40c0 	movw	r0, #7360	@ 0x1cc0
 80206ec:	f6c0 0003 	movt	r0, #2051	@ 0x803
 80206f0:	6800      	ldr	r0, [r0, #0]
 80206f2:	2200      	movs	r2, #0
 80206f4:	0881      	lsrs	r1, r0, #2
 80206f6:	f641 20b4 	movw	r0, #6836	@ 0x1ab4
 80206fa:	f6c0 0003 	movt	r0, #2051	@ 0x803
 80206fe:	2300      	movs	r3, #0
 8020700:	f7ff fa12 	bl	801fb28 <llhwc_phy_write_cfg_fifo_batch>
 8020704:	f641 40c4 	movw	r0, #7364	@ 0x1cc4
 8020708:	f6c0 0003 	movt	r0, #2051	@ 0x803
 802070c:	6800      	ldr	r0, [r0, #0]
 802070e:	2200      	movs	r2, #0
 8020710:	0881      	lsrs	r1, r0, #2
 8020712:	f641 309c 	movw	r0, #7068	@ 0x1b9c
 8020716:	f6c0 0003 	movt	r0, #2051	@ 0x803
 802071a:	2300      	movs	r3, #0
 802071c:	f7ff fa04 	bl	801fb28 <llhwc_phy_write_cfg_fifo_batch>
 8020720:	b1b4      	cbz	r4, 8020750 <llhwc_phy_run_pre_post_phy_clbr+0x120>
 8020722:	7820      	ldrb	r0, [r4, #0]
 8020724:	2801      	cmp	r0, #1
 8020726:	d113      	bne.n	8020750 <llhwc_phy_run_pre_post_phy_clbr+0x120>
 8020728:	f641 40c8 	movw	r0, #7368	@ 0x1cc8
 802072c:	f6c0 0003 	movt	r0, #2051	@ 0x803
 8020730:	6800      	ldr	r0, [r0, #0]
 8020732:	2200      	movs	r2, #0
 8020734:	0881      	lsrs	r1, r0, #2
 8020736:	f641 30c8 	movw	r0, #7112	@ 0x1bc8
 802073a:	f6c0 0003 	movt	r0, #2051	@ 0x803
 802073e:	2300      	movs	r3, #0
 8020740:	2600      	movs	r6, #0
 8020742:	f7ff f9f1 	bl	801fb28 <llhwc_phy_write_cfg_fifo_batch>
 8020746:	2001      	movs	r0, #1
 8020748:	7026      	strb	r6, [r4, #0]
 802074a:	f885 0038 	strb.w	r0, [r5, #56]	@ 0x38
 802074e:	bd70      	pop	{r4, r5, r6, pc}
 8020750:	f641 40e4 	movw	r0, #7396	@ 0x1ce4
 8020754:	f6c0 0003 	movt	r0, #2051	@ 0x803
 8020758:	6800      	ldr	r0, [r0, #0]
 802075a:	2200      	movs	r2, #0
 802075c:	0881      	lsrs	r1, r0, #2
 802075e:	f240 2098 	movw	r0, #664	@ 0x298
 8020762:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8020766:	2300      	movs	r3, #0
 8020768:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802076c:	f7ff b9dc 	b.w	801fb28 <llhwc_phy_write_cfg_fifo_batch>

08020770 <llhwc_phy_strt_vco_pll_clbr>:
 8020770:	b570      	push	{r4, r5, r6, lr}
 8020772:	4606      	mov	r6, r0
 8020774:	2030      	movs	r0, #48	@ 0x30
 8020776:	4614      	mov	r4, r2
 8020778:	460d      	mov	r5, r1
 802077a:	f7ff f899 	bl	801f8b0 <bsp_debug_gpio_set>
 802077e:	f240 100c 	movw	r0, #268	@ 0x10c
 8020782:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8020786:	2d02      	cmp	r5, #2
 8020788:	7086      	strb	r6, [r0, #2]
 802078a:	d126      	bne.n	80207da <llhwc_phy_strt_vco_pll_clbr+0x6a>
 802078c:	f247 05f8 	movw	r5, #28920	@ 0x70f8
 8020790:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 8020794:	6828      	ldr	r0, [r5, #0]
 8020796:	2101      	movs	r1, #1
 8020798:	fab0 f080 	clz	r0, r0
 802079c:	0940      	lsrs	r0, r0, #5
 802079e:	f7ff f840 	bl	801f822 <bsp_assert>
 80207a2:	2001      	movs	r0, #1
 80207a4:	2102      	movs	r1, #2
 80207a6:	2602      	movs	r6, #2
 80207a8:	f003 fa12 	bl	8023bd0 <llhwc_cmn_control_aclk>
 80207ac:	f240 4048 	movw	r0, #1096	@ 0x448
 80207b0:	f6c4 0002 	movt	r0, #18434	@ 0x4802
 80207b4:	6801      	ldr	r1, [r0, #0]
 80207b6:	4622      	mov	r2, r4
 80207b8:	f021 0101 	bic.w	r1, r1, #1
 80207bc:	6001      	str	r1, [r0, #0]
 80207be:	f641 40cc 	movw	r0, #7372	@ 0x1ccc
 80207c2:	f6c0 0003 	movt	r0, #2051	@ 0x803
 80207c6:	6801      	ldr	r1, [r0, #0]
 80207c8:	f240 100c 	movw	r0, #268	@ 0x10c
 80207cc:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80207d0:	602e      	str	r6, [r5, #0]
 80207d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80207d6:	f7ff bb0f 	b.w	801fdf8 <llhwc_phy_sequencer_ram_cpy_strt_seq>
 80207da:	f641 40cc 	movw	r0, #7372	@ 0x1ccc
 80207de:	f6c0 0003 	movt	r0, #2051	@ 0x803
 80207e2:	6801      	ldr	r1, [r0, #0]
 80207e4:	f240 100c 	movw	r0, #268	@ 0x10c
 80207e8:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80207ec:	462a      	mov	r2, r5
 80207ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80207f2:	f7ff b98a 	b.w	801fb0a <llhwc_phy_run_phy_sequence>

080207f6 <llhwc_phy_read_updt_vco_pll_clbr>:
 80207f6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80207fa:	b081      	sub	sp, #4
 80207fc:	f240 100c 	movw	r0, #268	@ 0x10c
 8020800:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8020804:	7885      	ldrb	r5, [r0, #2]
 8020806:	f641 40d8 	movw	r0, #7384	@ 0x1cd8
 802080a:	f6c0 0003 	movt	r0, #2051	@ 0x803
 802080e:	6807      	ldr	r7, [r0, #0]
 8020810:	f641 40dc 	movw	r0, #7388	@ 0x1cdc
 8020814:	f6c0 0003 	movt	r0, #2051	@ 0x803
 8020818:	6800      	ldr	r0, [r0, #0]
 802081a:	f641 41e0 	movw	r1, #7392	@ 0x1ce0
 802081e:	0886      	lsrs	r6, r0, #2
 8020820:	f641 40d4 	movw	r0, #7380	@ 0x1cd4
 8020824:	f6c0 0103 	movt	r1, #2051	@ 0x803
 8020828:	f6c0 0003 	movt	r0, #2051	@ 0x803
 802082c:	f247 18b4 	movw	r8, #29108	@ 0x71b4
 8020830:	6809      	ldr	r1, [r1, #0]
 8020832:	6800      	ldr	r0, [r0, #0]
 8020834:	f2c2 0800 	movt	r8, #8192	@ 0x2000
 8020838:	eb08 0445 	add.w	r4, r8, r5, lsl #1
 802083c:	ea4f 0991 	mov.w	r9, r1, lsr #2
 8020840:	0881      	lsrs	r1, r0, #2
 8020842:	f240 1048 	movw	r0, #328	@ 0x148
 8020846:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 802084a:	4622      	mov	r2, r4
 802084c:	2302      	movs	r3, #2
 802084e:	f7ff f96b 	bl	801fb28 <llhwc_phy_write_cfg_fifo_batch>
 8020852:	f3c7 0787 	ubfx	r7, r7, #2, #8
 8020856:	1c68      	adds	r0, r5, #1
 8020858:	f240 1a50 	movw	sl, #336	@ 0x150
 802085c:	42b8      	cmp	r0, r7
 802085e:	f2c2 0a00 	movt	sl, #8192	@ 0x2000
 8020862:	d202      	bcs.n	802086a <llhwc_phy_read_updt_vco_pll_clbr+0x74>
 8020864:	eb0a 0080 	add.w	r0, sl, r0, lsl #2
 8020868:	e01c      	b.n	80208a4 <llhwc_phy_read_updt_vco_pll_clbr+0xae>
 802086a:	b2f1      	uxtb	r1, r6
 802086c:	4439      	add	r1, r7
 802086e:	4288      	cmp	r0, r1
 8020870:	d207      	bcs.n	8020882 <llhwc_phy_read_updt_vco_pll_clbr+0x8c>
 8020872:	f240 2138 	movw	r1, #568	@ 0x238
 8020876:	1bc0      	subs	r0, r0, r7
 8020878:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 802087c:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 8020880:	e010      	b.n	80208a4 <llhwc_phy_read_updt_vco_pll_clbr+0xae>
 8020882:	eba0 0b01 	sub.w	fp, r0, r1
 8020886:	fa5f f189 	uxtb.w	r1, r9
 802088a:	2000      	movs	r0, #0
 802088c:	458b      	cmp	fp, r1
 802088e:	bf38      	it	cc
 8020890:	2001      	movcc	r0, #1
 8020892:	2101      	movs	r1, #1
 8020894:	f7fe ffc5 	bl	801f822 <bsp_assert>
 8020898:	f240 2094 	movw	r0, #660	@ 0x294
 802089c:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80208a0:	eb00 008b 	add.w	r0, r0, fp, lsl #2
 80208a4:	7862      	ldrb	r2, [r4, #1]
 80208a6:	f105 0129 	add.w	r1, r5, #41	@ 0x29
 80208aa:	42b9      	cmp	r1, r7
 80208ac:	7082      	strb	r2, [r0, #2]
 80208ae:	d202      	bcs.n	80208b6 <llhwc_phy_read_updt_vco_pll_clbr+0xc0>
 80208b0:	eb0a 0081 	add.w	r0, sl, r1, lsl #2
 80208b4:	e01b      	b.n	80208ee <llhwc_phy_read_updt_vco_pll_clbr+0xf8>
 80208b6:	b2f0      	uxtb	r0, r6
 80208b8:	4438      	add	r0, r7
 80208ba:	4281      	cmp	r1, r0
 80208bc:	d207      	bcs.n	80208ce <llhwc_phy_read_updt_vco_pll_clbr+0xd8>
 80208be:	1bc8      	subs	r0, r1, r7
 80208c0:	f240 2138 	movw	r1, #568	@ 0x238
 80208c4:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 80208c8:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 80208cc:	e00f      	b.n	80208ee <llhwc_phy_read_updt_vco_pll_clbr+0xf8>
 80208ce:	1a0c      	subs	r4, r1, r0
 80208d0:	fa5f f189 	uxtb.w	r1, r9
 80208d4:	2000      	movs	r0, #0
 80208d6:	428c      	cmp	r4, r1
 80208d8:	bf38      	it	cc
 80208da:	2001      	movcc	r0, #1
 80208dc:	2101      	movs	r1, #1
 80208de:	f7fe ffa0 	bl	801f822 <bsp_assert>
 80208e2:	f240 2094 	movw	r0, #660	@ 0x294
 80208e6:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80208ea:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 80208ee:	f818 1015 	ldrb.w	r1, [r8, r5, lsl #1]
 80208f2:	2d28      	cmp	r5, #40	@ 0x28
 80208f4:	7081      	strb	r1, [r0, #2]
 80208f6:	f04f 0000 	mov.w	r0, #0
 80208fa:	f04f 0101 	mov.w	r1, #1
 80208fe:	bf38      	it	cc
 8020900:	2001      	movcc	r0, #1
 8020902:	2401      	movs	r4, #1
 8020904:	f7fe ff8d 	bl	801f822 <bsp_assert>
 8020908:	f247 1004 	movw	r0, #28932	@ 0x7104
 802090c:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8020910:	1941      	adds	r1, r0, r5
 8020912:	2030      	movs	r0, #48	@ 0x30
 8020914:	738c      	strb	r4, [r1, #14]
 8020916:	b001      	add	sp, #4
 8020918:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802091c:	f7fe bfca 	b.w	801f8b4 <bsp_debug_gpio_clear>

08020920 <llhwc_phy_get_nxt_clbr_ch>:
 8020920:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020924:	f641 5030 	movw	r0, #7472	@ 0x1d30
 8020928:	f247 1504 	movw	r5, #28932	@ 0x7104
 802092c:	f6c0 0003 	movt	r0, #2051	@ 0x803
 8020930:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 8020934:	6806      	ldr	r6, [r0, #0]
 8020936:	f895 8036 	ldrb.w	r8, [r5, #54]	@ 0x36
 802093a:	2000      	movs	r0, #0
 802093c:	2101      	movs	r1, #1
 802093e:	2400      	movs	r4, #0
 8020940:	2eff      	cmp	r6, #255	@ 0xff
 8020942:	bf38      	it	cc
 8020944:	2001      	movcc	r0, #1
 8020946:	f7fe ff6c 	bl	801f822 <bsp_assert>
 802094a:	68a9      	ldr	r1, [r5, #8]
 802094c:	b121      	cbz	r1, 8020958 <llhwc_phy_get_nxt_clbr_ch+0x38>
 802094e:	f105 000e 	add.w	r0, r5, #14
 8020952:	4788      	blx	r1
 8020954:	28ff      	cmp	r0, #255	@ 0xff
 8020956:	d12b      	bne.n	80209b0 <llhwc_phy_get_nxt_clbr_ch+0x90>
 8020958:	b2f7      	uxtb	r7, r6
 802095a:	2f29      	cmp	r7, #41	@ 0x29
 802095c:	bf38      	it	cc
 802095e:	2401      	movcc	r4, #1
 8020960:	4620      	mov	r0, r4
 8020962:	2101      	movs	r1, #1
 8020964:	f7fe ff5d 	bl	801f822 <bsp_assert>
 8020968:	f895 0036 	ldrb.w	r0, [r5, #54]	@ 0x36
 802096c:	42b8      	cmp	r0, r7
 802096e:	d20e      	bcs.n	802098e <llhwc_phy_get_nxt_clbr_ch+0x6e>
 8020970:	f100 010e 	add.w	r1, r0, #14
 8020974:	1c42      	adds	r2, r0, #1
 8020976:	f885 2036 	strb.w	r2, [r5, #54]	@ 0x36
 802097a:	5c6b      	ldrb	r3, [r5, r1]
 802097c:	b1c3      	cbz	r3, 80209b0 <llhwc_phy_get_nxt_clbr_ch+0x90>
 802097e:	f1a1 000d 	sub.w	r0, r1, #13
 8020982:	b2c0      	uxtb	r0, r0
 8020984:	3101      	adds	r1, #1
 8020986:	42b8      	cmp	r0, r7
 8020988:	4610      	mov	r0, r2
 802098a:	d1f3      	bne.n	8020974 <llhwc_phy_get_nxt_clbr_ch+0x54>
 802098c:	4630      	mov	r0, r6
 802098e:	b2c0      	uxtb	r0, r0
 8020990:	1bc0      	subs	r0, r0, r7
 8020992:	f04f 0101 	mov.w	r1, #1
 8020996:	bf18      	it	ne
 8020998:	2001      	movne	r0, #1
 802099a:	f7fe ff42 	bl	801f822 <bsp_assert>
 802099e:	f895 0037 	ldrb.w	r0, [r5, #55]	@ 0x37
 80209a2:	2101      	movs	r1, #1
 80209a4:	1bc0      	subs	r0, r0, r7
 80209a6:	bf18      	it	ne
 80209a8:	2001      	movne	r0, #1
 80209aa:	f7fe ff3a 	bl	801f822 <bsp_assert>
 80209ae:	4640      	mov	r0, r8
 80209b0:	f895 1036 	ldrb.w	r1, [r5, #54]	@ 0x36
 80209b4:	b2f2      	uxtb	r2, r6
 80209b6:	b2c0      	uxtb	r0, r0
 80209b8:	4291      	cmp	r1, r2
 80209ba:	bf04      	itt	eq
 80209bc:	2100      	moveq	r1, #0
 80209be:	f885 1036 	strbeq.w	r1, [r5, #54]	@ 0x36
 80209c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080209c6 <llhwc_phy_set_schdr_clbr_cbks>:
 80209c6:	b5b0      	push	{r4, r5, r7, lr}
 80209c8:	460c      	mov	r4, r1
 80209ca:	2101      	movs	r1, #1
 80209cc:	4605      	mov	r5, r0
 80209ce:	2800      	cmp	r0, #0
 80209d0:	bf18      	it	ne
 80209d2:	2001      	movne	r0, #1
 80209d4:	f7fe ff25 	bl	801f822 <bsp_assert>
 80209d8:	4620      	mov	r0, r4
 80209da:	2101      	movs	r1, #1
 80209dc:	2c00      	cmp	r4, #0
 80209de:	bf18      	it	ne
 80209e0:	2001      	movne	r0, #1
 80209e2:	f7fe ff1e 	bl	801f822 <bsp_assert>
 80209e6:	f247 1004 	movw	r0, #28932	@ 0x7104
 80209ea:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80209ee:	e9c0 5401 	strd	r5, r4, [r0, #4]
 80209f2:	bdb0      	pop	{r4, r5, r7, pc}

080209f4 <llhwc_phy_hndl_runtime_clbr>:
 80209f4:	b5b0      	push	{r4, r5, r7, lr}
 80209f6:	b082      	sub	sp, #8
 80209f8:	4604      	mov	r4, r0
 80209fa:	2000      	movs	r0, #0
 80209fc:	f247 1504 	movw	r5, #28932	@ 0x7104
 8020a00:	9001      	str	r0, [sp, #4]
 8020a02:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 8020a06:	202e      	movs	r0, #46	@ 0x2e
 8020a08:	6029      	str	r1, [r5, #0]
 8020a0a:	f7fe ff51 	bl	801f8b0 <bsp_debug_gpio_set>
 8020a0e:	2001      	movs	r0, #1
 8020a10:	2102      	movs	r1, #2
 8020a12:	f003 f8dd 	bl	8023bd0 <llhwc_cmn_control_aclk>
 8020a16:	a801      	add	r0, sp, #4
 8020a18:	f001 fd17 	bl	802244a <llhwc_slptmr_get>
 8020a1c:	9801      	ldr	r0, [sp, #4]
 8020a1e:	7b29      	ldrb	r1, [r5, #12]
 8020a20:	682a      	ldr	r2, [r5, #0]
 8020a22:	4408      	add	r0, r1
 8020a24:	4290      	cmp	r0, r2
 8020a26:	d210      	bcs.n	8020a4a <llhwc_phy_hndl_runtime_clbr+0x56>
 8020a28:	2000      	movs	r0, #0
 8020a2a:	4621      	mov	r1, r4
 8020a2c:	f7ff fe00 	bl	8020630 <llhwc_phy_run_pre_post_phy_clbr>
 8020a30:	9801      	ldr	r0, [sp, #4]
 8020a32:	7b69      	ldrb	r1, [r5, #13]
 8020a34:	682a      	ldr	r2, [r5, #0]
 8020a36:	4408      	add	r0, r1
 8020a38:	4290      	cmp	r0, r2
 8020a3a:	d206      	bcs.n	8020a4a <llhwc_phy_hndl_runtime_clbr+0x56>
 8020a3c:	f7ff ff70 	bl	8020920 <llhwc_phy_get_nxt_clbr_ch>
 8020a40:	2102      	movs	r1, #2
 8020a42:	2201      	movs	r2, #1
 8020a44:	f7ff fe94 	bl	8020770 <llhwc_phy_strt_vco_pll_clbr>
 8020a48:	e002      	b.n	8020a50 <llhwc_phy_hndl_runtime_clbr+0x5c>
 8020a4a:	2001      	movs	r0, #1
 8020a4c:	f000 f805 	bl	8020a5a <llhwc_phy_clbr_cmpltd_release_grant>
 8020a50:	202e      	movs	r0, #46	@ 0x2e
 8020a52:	f7fe ff2f 	bl	801f8b4 <bsp_debug_gpio_clear>
 8020a56:	b002      	add	sp, #8
 8020a58:	bdb0      	pop	{r4, r5, r7, pc}

08020a5a <llhwc_phy_clbr_cmpltd_release_grant>:
 8020a5a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020a5c:	b081      	sub	sp, #4
 8020a5e:	4604      	mov	r4, r0
 8020a60:	f641 5030 	movw	r0, #7472	@ 0x1d30
 8020a64:	f6c0 0003 	movt	r0, #2051	@ 0x803
 8020a68:	6807      	ldr	r7, [r0, #0]
 8020a6a:	2000      	movs	r0, #0
 8020a6c:	2101      	movs	r1, #1
 8020a6e:	2600      	movs	r6, #0
 8020a70:	2fff      	cmp	r7, #255	@ 0xff
 8020a72:	bf38      	it	cc
 8020a74:	2001      	movcc	r0, #1
 8020a76:	f7fe fed4 	bl	801f822 <bsp_assert>
 8020a7a:	f247 1504 	movw	r5, #28932	@ 0x7104
 8020a7e:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 8020a82:	f895 0037 	ldrb.w	r0, [r5, #55]	@ 0x37
 8020a86:	b2f9      	uxtb	r1, r7
 8020a88:	4288      	cmp	r0, r1
 8020a8a:	bf08      	it	eq
 8020a8c:	f885 6038 	strbeq.w	r6, [r5, #56]	@ 0x38
 8020a90:	2001      	movs	r0, #1
 8020a92:	2100      	movs	r1, #0
 8020a94:	2601      	movs	r6, #1
 8020a96:	f7ff fdcb 	bl	8020630 <llhwc_phy_run_pre_post_phy_clbr>
 8020a9a:	b124      	cbz	r4, 8020aa6 <llhwc_phy_clbr_cmpltd_release_grant+0x4c>
 8020a9c:	b001      	add	sp, #4
 8020a9e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8020aa2:	f7fe bf3c 	b.w	801f91e <llhwc_phy_exec_clbr_done_clbk>
 8020aa6:	f885 6039 	strb.w	r6, [r5, #57]	@ 0x39
 8020aaa:	b001      	add	sp, #4
 8020aac:	bdf0      	pop	{r4, r5, r6, r7, pc}

08020aae <llhwc_phy_init>:
 8020aae:	b510      	push	{r4, lr}
 8020ab0:	b084      	sub	sp, #16
 8020ab2:	2400      	movs	r4, #0
 8020ab4:	9401      	str	r4, [sp, #4]
 8020ab6:	f7ff fa6b 	bl	801ff90 <llhwc_phy_seq_ram_init>
 8020aba:	f641 40ac 	movw	r0, #7340	@ 0x1cac
 8020abe:	f6c0 0003 	movt	r0, #2051	@ 0x803
 8020ac2:	6800      	ldr	r0, [r0, #0]
 8020ac4:	2200      	movs	r2, #0
 8020ac6:	0881      	lsrs	r1, r0, #2
 8020ac8:	f641 10a8 	movw	r0, #6568	@ 0x19a8
 8020acc:	f6c0 0003 	movt	r0, #2051	@ 0x803
 8020ad0:	2300      	movs	r3, #0
 8020ad2:	f7ff f829 	bl	801fb28 <llhwc_phy_write_cfg_fifo_batch>
 8020ad6:	f641 503c 	movw	r0, #7484	@ 0x1d3c
 8020ada:	f6c0 0003 	movt	r0, #2051	@ 0x803
 8020ade:	7800      	ldrb	r0, [r0, #0]
 8020ae0:	2808      	cmp	r0, #8
 8020ae2:	d110      	bne.n	8020b06 <llhwc_phy_init+0x58>
 8020ae4:	f64d 7013 	movw	r0, #57107	@ 0xdf13
 8020ae8:	9003      	str	r0, [sp, #12]
 8020aea:	a803      	add	r0, sp, #12
 8020aec:	f10d 020b 	add.w	r2, sp, #11
 8020af0:	2101      	movs	r1, #1
 8020af2:	2301      	movs	r3, #1
 8020af4:	f88d 400b 	strb.w	r4, [sp, #11]
 8020af8:	f7ff f816 	bl	801fb28 <llhwc_phy_write_cfg_fifo_batch>
 8020afc:	f89d 000b 	ldrb.w	r0, [sp, #11]
 8020b00:	2808      	cmp	r0, #8
 8020b02:	d11c      	bne.n	8020b3e <llhwc_phy_init+0x90>
 8020b04:	e01f      	b.n	8020b46 <llhwc_phy_init+0x98>
 8020b06:	f641 40a4 	movw	r0, #7332	@ 0x1ca4
 8020b0a:	f6c0 0003 	movt	r0, #2051	@ 0x803
 8020b0e:	6800      	ldr	r0, [r0, #0]
 8020b10:	ac01      	add	r4, sp, #4
 8020b12:	0881      	lsrs	r1, r0, #2
 8020b14:	f641 108c 	movw	r0, #6540	@ 0x198c
 8020b18:	f6c0 0003 	movt	r0, #2051	@ 0x803
 8020b1c:	4622      	mov	r2, r4
 8020b1e:	2304      	movs	r3, #4
 8020b20:	f7ff f802 	bl	801fb28 <llhwc_phy_write_cfg_fifo_batch>
 8020b24:	f641 5140 	movw	r1, #7488	@ 0x1d40
 8020b28:	f6c0 0103 	movt	r1, #2051	@ 0x803
 8020b2c:	4620      	mov	r0, r4
 8020b2e:	2204      	movs	r2, #4
 8020b30:	f003 fd92 	bl	8024658 <ble_memcmp>
 8020b34:	b138      	cbz	r0, 8020b46 <llhwc_phy_init+0x98>
 8020b36:	2001      	movs	r0, #1
 8020b38:	2101      	movs	r1, #1
 8020b3a:	f7fe fe72 	bl	801f822 <bsp_assert>
 8020b3e:	2000      	movs	r0, #0
 8020b40:	2101      	movs	r1, #1
 8020b42:	f7fe fe6e 	bl	801f822 <bsp_assert>
 8020b46:	f247 1004 	movw	r0, #28932	@ 0x7104
 8020b4a:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8020b4e:	2100      	movs	r1, #0
 8020b50:	223c      	movs	r2, #60	@ 0x3c
 8020b52:	f003 fd49 	bl	80245e8 <ble_memset>
 8020b56:	f641 40a8 	movw	r0, #7336	@ 0x1ca8
 8020b5a:	f6c0 0003 	movt	r0, #2051	@ 0x803
 8020b5e:	6800      	ldr	r0, [r0, #0]
 8020b60:	2200      	movs	r2, #0
 8020b62:	0881      	lsrs	r1, r0, #2
 8020b64:	f641 109c 	movw	r0, #6556	@ 0x199c
 8020b68:	f6c0 0003 	movt	r0, #2051	@ 0x803
 8020b6c:	2300      	movs	r3, #0
 8020b6e:	f7fe ffdb 	bl	801fb28 <llhwc_phy_write_cfg_fifo_batch>
 8020b72:	2000      	movs	r0, #0
 8020b74:	f003 fb0a 	bl	802418c <llhwc_cmn_evnt_notify>
 8020b78:	f7ff fcd4 	bl	8020524 <llhwc_phy_init_clbr>
 8020b7c:	2001      	movs	r0, #1
 8020b7e:	f003 fb05 	bl	802418c <llhwc_cmn_evnt_notify>
 8020b82:	f247 00fc 	movw	r0, #28924	@ 0x70fc
 8020b86:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8020b8a:	6800      	ldr	r0, [r0, #0]
 8020b8c:	f44f 51fe 	mov.w	r1, #8128	@ 0x1fc0
 8020b90:	f240 4224 	movw	r2, #1060	@ 0x424
 8020b94:	f6c4 0202 	movt	r2, #18434	@ 0x4802
 8020b98:	eb01 1000 	add.w	r0, r1, r0, lsl #4
 8020b9c:	6811      	ldr	r1, [r2, #0]
 8020b9e:	0980      	lsrs	r0, r0, #6
 8020ba0:	f360 118c 	bfi	r1, r0, #6, #7
 8020ba4:	6011      	str	r1, [r2, #0]
 8020ba6:	f641 5134 	movw	r1, #7476	@ 0x1d34
 8020baa:	6910      	ldr	r0, [r2, #16]
 8020bac:	f6c0 0103 	movt	r1, #2051	@ 0x803
 8020bb0:	7809      	ldrb	r1, [r1, #0]
 8020bb2:	f020 00ff 	bic.w	r0, r0, #255	@ 0xff
 8020bb6:	4408      	add	r0, r1
 8020bb8:	6110      	str	r0, [r2, #16]
 8020bba:	b004      	add	sp, #16
 8020bbc:	bd10      	pop	{r4, pc}

08020bbe <llhwc_phy_set_ch_config>:
 8020bbe:	b570      	push	{r4, r5, r6, lr}
 8020bc0:	f247 1600 	movw	r6, #28928	@ 0x7100
 8020bc4:	f2c2 0600 	movt	r6, #8192	@ 0x2000
 8020bc8:	7831      	ldrb	r1, [r6, #0]
 8020bca:	4614      	mov	r4, r2
 8020bcc:	2901      	cmp	r1, #1
 8020bce:	4605      	mov	r5, r0
 8020bd0:	d119      	bne.n	8020c06 <llhwc_phy_set_ch_config+0x48>
 8020bd2:	f641 5004 	movw	r0, #7428	@ 0x1d04
 8020bd6:	f6c0 0003 	movt	r0, #2051	@ 0x803
 8020bda:	6801      	ldr	r1, [r0, #0]
 8020bdc:	f240 3098 	movw	r0, #920	@ 0x398
 8020be0:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8020be4:	4622      	mov	r2, r4
 8020be6:	f7fe ff90 	bl	801fb0a <llhwc_phy_run_phy_sequence>
 8020bea:	f641 5024 	movw	r0, #7460	@ 0x1d24
 8020bee:	f6c0 0003 	movt	r0, #2051	@ 0x803
 8020bf2:	6801      	ldr	r1, [r0, #0]
 8020bf4:	f641 4094 	movw	r0, #7316	@ 0x1c94
 8020bf8:	f6c0 0003 	movt	r0, #2051	@ 0x803
 8020bfc:	4622      	mov	r2, r4
 8020bfe:	f7fe ff84 	bl	801fb0a <llhwc_phy_run_phy_sequence>
 8020c02:	2000      	movs	r0, #0
 8020c04:	7030      	strb	r0, [r6, #0]
 8020c06:	f247 1001 	movw	r0, #28929	@ 0x7101
 8020c0a:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8020c0e:	7800      	ldrb	r0, [r0, #0]
 8020c10:	2801      	cmp	r0, #1
 8020c12:	d003      	beq.n	8020c1c <llhwc_phy_set_ch_config+0x5e>
 8020c14:	2802      	cmp	r0, #2
 8020c16:	d106      	bne.n	8020c26 <llhwc_phy_set_ch_config+0x68>
 8020c18:	2001      	movs	r0, #1
 8020c1a:	e000      	b.n	8020c1e <llhwc_phy_set_ch_config+0x60>
 8020c1c:	2000      	movs	r0, #0
 8020c1e:	2100      	movs	r1, #0
 8020c20:	462a      	mov	r2, r5
 8020c22:	f000 f80f 	bl	8020c44 <llhwc_phy_set_zigbee_phy_cont_test_mode>
 8020c26:	f641 5128 	movw	r1, #7464	@ 0x1d28
 8020c2a:	f6c0 0103 	movt	r1, #2051	@ 0x803
 8020c2e:	f240 404c 	movw	r0, #1100	@ 0x44c
 8020c32:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8020c36:	6809      	ldr	r1, [r1, #0]
 8020c38:	4622      	mov	r2, r4
 8020c3a:	7085      	strb	r5, [r0, #2]
 8020c3c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8020c40:	f7fe bf63 	b.w	801fb0a <llhwc_phy_run_phy_sequence>

08020c44 <llhwc_phy_set_zigbee_phy_cont_test_mode>:
 8020c44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020c48:	460e      	mov	r6, r1
 8020c4a:	4605      	mov	r5, r0
 8020c4c:	2802      	cmp	r0, #2
 8020c4e:	f04f 0000 	mov.w	r0, #0
 8020c52:	f04f 0101 	mov.w	r1, #1
 8020c56:	bf38      	it	cc
 8020c58:	2001      	movcc	r0, #1
 8020c5a:	4614      	mov	r4, r2
 8020c5c:	2700      	movs	r7, #0
 8020c5e:	f7fe fde0 	bl	801f822 <bsp_assert>
 8020c62:	2000      	movs	r0, #0
 8020c64:	2101      	movs	r1, #1
 8020c66:	2e02      	cmp	r6, #2
 8020c68:	bf38      	it	cc
 8020c6a:	2001      	movcc	r0, #1
 8020c6c:	f7fe fdd9 	bl	801f822 <bsp_assert>
 8020c70:	2c11      	cmp	r4, #17
 8020c72:	bf38      	it	cc
 8020c74:	2701      	movcc	r7, #1
 8020c76:	4638      	mov	r0, r7
 8020c78:	2101      	movs	r1, #1
 8020c7a:	f7fe fdd2 	bl	801f822 <bsp_assert>
 8020c7e:	f247 1801 	movw	r8, #28929	@ 0x7101
 8020c82:	f2c2 0800 	movt	r8, #8192	@ 0x2000
 8020c86:	f898 0000 	ldrb.w	r0, [r8]
 8020c8a:	fa06 f705 	lsl.w	r7, r6, r5
 8020c8e:	42b8      	cmp	r0, r7
 8020c90:	bf08      	it	eq
 8020c92:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020c96:	2e01      	cmp	r6, #1
 8020c98:	d127      	bne.n	8020cea <llhwc_phy_set_zigbee_phy_cont_test_mode+0xa6>
 8020c9a:	f641 41f0 	movw	r1, #7408	@ 0x1cf0
 8020c9e:	f641 40fc 	movw	r0, #7420	@ 0x1cfc
 8020ca2:	f6c0 0103 	movt	r1, #2051	@ 0x803
 8020ca6:	2d00      	cmp	r5, #0
 8020ca8:	f6c0 0003 	movt	r0, #2051	@ 0x803
 8020cac:	bf08      	it	eq
 8020cae:	4601      	moveq	r1, r0
 8020cb0:	f240 3518 	movw	r5, #792	@ 0x318
 8020cb4:	f240 324c 	movw	r2, #844	@ 0x34c
 8020cb8:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 8020cbc:	680e      	ldr	r6, [r1, #0]
 8020cbe:	f04f 0000 	mov.w	r0, #0
 8020cc2:	f04f 0100 	mov.w	r1, #0
 8020cc6:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8020cca:	bf08      	it	eq
 8020ccc:	4615      	moveq	r5, r2
 8020cce:	f7ff fb0d 	bl	80202ec <llhwc_phy_strt_stp>
 8020cd2:	4620      	mov	r0, r4
 8020cd4:	2100      	movs	r1, #0
 8020cd6:	2200      	movs	r2, #0
 8020cd8:	f7ff ff71 	bl	8020bbe <llhwc_phy_set_ch_config>
 8020cdc:	08b1      	lsrs	r1, r6, #2
 8020cde:	4628      	mov	r0, r5
 8020ce0:	2200      	movs	r2, #0
 8020ce2:	2300      	movs	r3, #0
 8020ce4:	f7fe ff20 	bl	801fb28 <llhwc_phy_write_cfg_fifo_batch>
 8020ce8:	e01e      	b.n	8020d28 <llhwc_phy_set_zigbee_phy_cont_test_mode+0xe4>
 8020cea:	f641 5104 	movw	r1, #7428	@ 0x1d04
 8020cee:	f641 5000 	movw	r0, #7424	@ 0x1d00
 8020cf2:	f6c0 0103 	movt	r1, #2051	@ 0x803
 8020cf6:	2d00      	cmp	r5, #0
 8020cf8:	f6c0 0003 	movt	r0, #2051	@ 0x803
 8020cfc:	bf08      	it	eq
 8020cfe:	4601      	moveq	r1, r0
 8020d00:	f240 3278 	movw	r2, #888	@ 0x378
 8020d04:	f240 3098 	movw	r0, #920	@ 0x398
 8020d08:	6809      	ldr	r1, [r1, #0]
 8020d0a:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8020d0e:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8020d12:	bf08      	it	eq
 8020d14:	4610      	moveq	r0, r2
 8020d16:	0889      	lsrs	r1, r1, #2
 8020d18:	2200      	movs	r2, #0
 8020d1a:	2300      	movs	r3, #0
 8020d1c:	f7fe ff04 	bl	801fb28 <llhwc_phy_write_cfg_fifo_batch>
 8020d20:	2001      	movs	r0, #1
 8020d22:	2100      	movs	r1, #0
 8020d24:	f7ff fae2 	bl	80202ec <llhwc_phy_strt_stp>
 8020d28:	f888 7000 	strb.w	r7, [r8]
 8020d2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08020d30 <llhwc_phy_set_ch_config_adv>:
 8020d30:	b510      	push	{r4, lr}
 8020d32:	f247 1400 	movw	r4, #28928	@ 0x7100
 8020d36:	f2c2 0400 	movt	r4, #8192	@ 0x2000
 8020d3a:	7820      	ldrb	r0, [r4, #0]
 8020d3c:	2801      	cmp	r0, #1
 8020d3e:	bf18      	it	ne
 8020d40:	bd10      	popne	{r4, pc}
 8020d42:	f641 5004 	movw	r0, #7428	@ 0x1d04
 8020d46:	f6c0 0003 	movt	r0, #2051	@ 0x803
 8020d4a:	6801      	ldr	r1, [r0, #0]
 8020d4c:	f240 3098 	movw	r0, #920	@ 0x398
 8020d50:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8020d54:	f7fe ffac 	bl	801fcb0 <llhwc_phy_trg_sequence_from_sequencer_ram>
 8020d58:	f641 5024 	movw	r0, #7460	@ 0x1d24
 8020d5c:	f6c0 0003 	movt	r0, #2051	@ 0x803
 8020d60:	6801      	ldr	r1, [r0, #0]
 8020d62:	f641 4094 	movw	r0, #7316	@ 0x1c94
 8020d66:	f6c0 0003 	movt	r0, #2051	@ 0x803
 8020d6a:	f7fe ffa1 	bl	801fcb0 <llhwc_phy_trg_sequence_from_sequencer_ram>
 8020d6e:	2000      	movs	r0, #0
 8020d70:	7020      	strb	r0, [r4, #0]
 8020d72:	bd10      	pop	{r4, pc}

08020d74 <llhwc_phy_read_and_stop_ed>:
 8020d74:	b510      	push	{r4, lr}
 8020d76:	b082      	sub	sp, #8
 8020d78:	4604      	mov	r4, r0
 8020d7a:	9001      	str	r0, [sp, #4]
 8020d7c:	2001      	movs	r0, #1
 8020d7e:	2102      	movs	r1, #2
 8020d80:	f002 ff26 	bl	8023bd0 <llhwc_cmn_control_aclk>
 8020d84:	b16c      	cbz	r4, 8020da2 <llhwc_phy_read_and_stop_ed+0x2e>
 8020d86:	f641 5018 	movw	r0, #7448	@ 0x1d18
 8020d8a:	f6c0 0003 	movt	r0, #2051	@ 0x803
 8020d8e:	6800      	ldr	r0, [r0, #0]
 8020d90:	aa01      	add	r2, sp, #4
 8020d92:	0881      	lsrs	r1, r0, #2
 8020d94:	f641 4080 	movw	r0, #7296	@ 0x1c80
 8020d98:	f6c0 0003 	movt	r0, #2051	@ 0x803
 8020d9c:	2302      	movs	r3, #2
 8020d9e:	f7fe fec3 	bl	801fb28 <llhwc_phy_write_cfg_fifo_batch>
 8020da2:	f641 5014 	movw	r0, #7444	@ 0x1d14
 8020da6:	f6c0 0003 	movt	r0, #2051	@ 0x803
 8020daa:	6800      	ldr	r0, [r0, #0]
 8020dac:	2200      	movs	r2, #0
 8020dae:	0881      	lsrs	r1, r0, #2
 8020db0:	f641 4078 	movw	r0, #7288	@ 0x1c78
 8020db4:	f6c0 0003 	movt	r0, #2051	@ 0x803
 8020db8:	2300      	movs	r3, #0
 8020dba:	f7fe feb5 	bl	801fb28 <llhwc_phy_write_cfg_fifo_batch>
 8020dbe:	9801      	ldr	r0, [sp, #4]
 8020dc0:	bb10      	cbnz	r0, 8020e08 <llhwc_phy_read_and_stop_ed+0x94>
 8020dc2:	f247 3018 	movw	r0, #29464	@ 0x7318
 8020dc6:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8020dca:	f890 0050 	ldrb.w	r0, [r0, #80]	@ 0x50
 8020dce:	b9d8      	cbnz	r0, 8020e08 <llhwc_phy_read_and_stop_ed+0x94>
 8020dd0:	f247 1004 	movw	r0, #28932	@ 0x7104
 8020dd4:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8020dd8:	f890 0038 	ldrb.w	r0, [r0, #56]	@ 0x38
 8020ddc:	2802      	cmp	r0, #2
 8020dde:	d013      	beq.n	8020e08 <llhwc_phy_read_and_stop_ed+0x94>
 8020de0:	f641 40a8 	movw	r0, #7336	@ 0x1ca8
 8020de4:	f6c0 0003 	movt	r0, #2051	@ 0x803
 8020de8:	6800      	ldr	r0, [r0, #0]
 8020dea:	2200      	movs	r2, #0
 8020dec:	0881      	lsrs	r1, r0, #2
 8020dee:	f641 109c 	movw	r0, #6556	@ 0x199c
 8020df2:	f6c0 0003 	movt	r0, #2051	@ 0x803
 8020df6:	2300      	movs	r3, #0
 8020df8:	2400      	movs	r4, #0
 8020dfa:	f7fe fe95 	bl	801fb28 <llhwc_phy_write_cfg_fifo_batch>
 8020dfe:	f247 00f0 	movw	r0, #28912	@ 0x70f0
 8020e02:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8020e06:	6004      	str	r4, [r0, #0]
 8020e08:	2000      	movs	r0, #0
 8020e0a:	2102      	movs	r1, #2
 8020e0c:	f002 fee0 	bl	8023bd0 <llhwc_cmn_control_aclk>
 8020e10:	b002      	add	sp, #8
 8020e12:	bd10      	pop	{r4, pc}

08020e14 <llhwc_phy_get_sequenc_ram_ofst>:
 8020e14:	b580      	push	{r7, lr}
 8020e16:	f641 5304 	movw	r3, #7428	@ 0x1d04
 8020e1a:	f6c0 0303 	movt	r3, #2051	@ 0x803
 8020e1e:	681b      	ldr	r3, [r3, #0]
 8020e20:	f04f 0c00 	mov.w	ip, #0
 8020e24:	089b      	lsrs	r3, r3, #2
 8020e26:	2901      	cmp	r1, #1
 8020e28:	f8c2 c008 	str.w	ip, [r2, #8]
 8020e2c:	60d3      	str	r3, [r2, #12]
 8020e2e:	bf18      	it	ne
 8020e30:	bd80      	popne	{r7, pc}
 8020e32:	f641 511c 	movw	r1, #7452	@ 0x1d1c
 8020e36:	f6c0 0103 	movt	r1, #2051	@ 0x803
 8020e3a:	6809      	ldr	r1, [r1, #0]
 8020e3c:	f641 4ef4 	movw	lr, #7412	@ 0x1cf4
 8020e40:	eb03 0c91 	add.w	ip, r3, r1, lsr #2
 8020e44:	b2c1      	uxtb	r1, r0
 8020e46:	2902      	cmp	r1, #2
 8020e48:	ea4f 2010 	mov.w	r0, r0, lsr #8
 8020e4c:	f6c0 0e03 	movt	lr, #2051	@ 0x803
 8020e50:	d108      	bne.n	8020e64 <llhwc_phy_get_sequenc_ram_ofst+0x50>
 8020e52:	f641 41e8 	movw	r1, #7400	@ 0x1ce8
 8020e56:	f6c0 0103 	movt	r1, #2051	@ 0x803
 8020e5a:	6809      	ldr	r1, [r1, #0]
 8020e5c:	eb0c 0191 	add.w	r1, ip, r1, lsr #2
 8020e60:	468c      	mov	ip, r1
 8020e62:	e010      	b.n	8020e86 <llhwc_phy_get_sequenc_ram_ofst+0x72>
 8020e64:	f641 43e8 	movw	r3, #7400	@ 0x1ce8
 8020e68:	f6c0 0303 	movt	r3, #2051	@ 0x803
 8020e6c:	681b      	ldr	r3, [r3, #0]
 8020e6e:	3903      	subs	r1, #3
 8020e70:	2902      	cmp	r1, #2
 8020e72:	ea4f 0193 	mov.w	r1, r3, lsr #2
 8020e76:	d205      	bcs.n	8020e84 <llhwc_phy_get_sequenc_ram_ofst+0x70>
 8020e78:	f8de 3000 	ldr.w	r3, [lr]
 8020e7c:	4461      	add	r1, ip
 8020e7e:	eb01 0c93 	add.w	ip, r1, r3, lsr #2
 8020e82:	e000      	b.n	8020e86 <llhwc_phy_get_sequenc_ram_ofst+0x72>
 8020e84:	4461      	add	r1, ip
 8020e86:	f8de 3000 	ldr.w	r3, [lr]
 8020e8a:	b2c0      	uxtb	r0, r0
 8020e8c:	eb01 0193 	add.w	r1, r1, r3, lsr #2
 8020e90:	f641 43ec 	movw	r3, #7404	@ 0x1cec
 8020e94:	f6c0 0303 	movt	r3, #2051	@ 0x803
 8020e98:	681b      	ldr	r3, [r3, #0]
 8020e9a:	2802      	cmp	r0, #2
 8020e9c:	eb01 0393 	add.w	r3, r1, r3, lsr #2
 8020ea0:	f8c2 c000 	str.w	ip, [r2]
 8020ea4:	d107      	bne.n	8020eb6 <llhwc_phy_get_sequenc_ram_ofst+0xa2>
 8020ea6:	f641 5008 	movw	r0, #7432	@ 0x1d08
 8020eaa:	f6c0 0003 	movt	r0, #2051	@ 0x803
 8020eae:	6800      	ldr	r0, [r0, #0]
 8020eb0:	eb03 0390 	add.w	r3, r3, r0, lsr #2
 8020eb4:	e010      	b.n	8020ed8 <llhwc_phy_get_sequenc_ram_ofst+0xc4>
 8020eb6:	3803      	subs	r0, #3
 8020eb8:	2801      	cmp	r0, #1
 8020eba:	d80d      	bhi.n	8020ed8 <llhwc_phy_get_sequenc_ram_ofst+0xc4>
 8020ebc:	f641 5008 	movw	r0, #7432	@ 0x1d08
 8020ec0:	f6c0 0003 	movt	r0, #2051	@ 0x803
 8020ec4:	6800      	ldr	r0, [r0, #0]
 8020ec6:	f641 510c 	movw	r1, #7436	@ 0x1d0c
 8020eca:	f6c0 0103 	movt	r1, #2051	@ 0x803
 8020ece:	6809      	ldr	r1, [r1, #0]
 8020ed0:	eb03 0090 	add.w	r0, r3, r0, lsr #2
 8020ed4:	eb00 0391 	add.w	r3, r0, r1, lsr #2
 8020ed8:	6053      	str	r3, [r2, #4]
 8020eda:	bd80      	pop	{r7, pc}

08020edc <llhwc_phy_get_ltncy>:
 8020edc:	2901      	cmp	r1, #1
 8020ede:	bf18      	it	ne
 8020ee0:	4770      	bxne	lr
 8020ee2:	b580      	push	{r7, lr}
 8020ee4:	f3c0 0146 	ubfx	r1, r0, #1, #7
 8020ee8:	f3c0 2e46 	ubfx	lr, r0, #9, #7
 8020eec:	f641 5c37 	movw	ip, #7479	@ 0x1d37
 8020ef0:	f641 5039 	movw	r0, #7481	@ 0x1d39
 8020ef4:	f6c0 0c03 	movt	ip, #2051	@ 0x803
 8020ef8:	f6c0 0003 	movt	r0, #2051	@ 0x803
 8020efc:	2901      	cmp	r1, #1
 8020efe:	bf08      	it	eq
 8020f00:	4660      	moveq	r0, ip
 8020f02:	f641 5c35 	movw	ip, #7477	@ 0x1d35
 8020f06:	f6c0 0c03 	movt	ip, #2051	@ 0x803
 8020f0a:	2900      	cmp	r1, #0
 8020f0c:	bf08      	it	eq
 8020f0e:	4660      	moveq	r0, ip
 8020f10:	f641 5c38 	movw	ip, #7480	@ 0x1d38
 8020f14:	f641 513a 	movw	r1, #7482	@ 0x1d3a
 8020f18:	f6c0 0c03 	movt	ip, #2051	@ 0x803
 8020f1c:	f6c0 0103 	movt	r1, #2051	@ 0x803
 8020f20:	f1be 0f01 	cmp.w	lr, #1
 8020f24:	bf08      	it	eq
 8020f26:	4661      	moveq	r1, ip
 8020f28:	f641 5c36 	movw	ip, #7478	@ 0x1d36
 8020f2c:	f6c0 0c03 	movt	ip, #2051	@ 0x803
 8020f30:	f1be 0f00 	cmp.w	lr, #0
 8020f34:	bf08      	it	eq
 8020f36:	4661      	moveq	r1, ip
 8020f38:	7800      	ldrb	r0, [r0, #0]
 8020f3a:	7809      	ldrb	r1, [r1, #0]
 8020f3c:	7010      	strb	r0, [r2, #0]
 8020f3e:	7019      	strb	r1, [r3, #0]
 8020f40:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8020f44:	4770      	bx	lr

08020f46 <llhwc_phy_get_adv_chnls_switch_time>:
 8020f46:	f641 503b 	movw	r0, #7483	@ 0x1d3b
 8020f4a:	f6c0 0003 	movt	r0, #2051	@ 0x803
 8020f4e:	7800      	ldrb	r0, [r0, #0]
 8020f50:	4770      	bx	lr

08020f52 <llhwc_phy_get_rssi_value>:
 8020f52:	b5b0      	push	{r4, r5, r7, lr}
 8020f54:	f641 41a0 	movw	r1, #7328	@ 0x1ca0
 8020f58:	f6c0 0103 	movt	r1, #2051	@ 0x803
 8020f5c:	788d      	ldrb	r5, [r1, #2]
 8020f5e:	4604      	mov	r4, r0
 8020f60:	1e69      	subs	r1, r5, #1
 8020f62:	2000      	movs	r0, #0
 8020f64:	2902      	cmp	r1, #2
 8020f66:	bf38      	it	cc
 8020f68:	2001      	movcc	r0, #1
 8020f6a:	2101      	movs	r1, #1
 8020f6c:	f7fe fc59 	bl	801f822 <bsp_assert>
 8020f70:	2d02      	cmp	r5, #2
 8020f72:	bf08      	it	eq
 8020f74:	08a4      	lsreq	r4, r4, #2
 8020f76:	b260      	sxtb	r0, r4
 8020f78:	bdb0      	pop	{r4, r5, r7, pc}

08020f7a <llhwc_phy_get_phy_strt_state>:
 8020f7a:	f247 00f0 	movw	r0, #28912	@ 0x70f0
 8020f7e:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8020f82:	6800      	ldr	r0, [r0, #0]
 8020f84:	4770      	bx	lr

08020f86 <llhwc_phy_set_tx_pwr>:
 8020f86:	460a      	mov	r2, r1
 8020f88:	f240 4150 	movw	r1, #1104	@ 0x450
 8020f8c:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8020f90:	6809      	ldr	r1, [r1, #0]
 8020f92:	ea41 4300 	orr.w	r3, r1, r0, lsl #16
 8020f96:	f641 512c 	movw	r1, #7468	@ 0x1d2c
 8020f9a:	f6c0 0103 	movt	r1, #2051	@ 0x803
 8020f9e:	f247 10a0 	movw	r0, #29088	@ 0x71a0
 8020fa2:	6809      	ldr	r1, [r1, #0]
 8020fa4:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8020fa8:	6003      	str	r3, [r0, #0]
 8020faa:	f7fe bdae 	b.w	801fb0a <llhwc_phy_run_phy_sequence>

08020fae <llhwc_phy_patch_tx_power_mode_phy_reg>:
 8020fae:	b5b0      	push	{r4, r5, r7, lr}
 8020fb0:	460c      	mov	r4, r1
 8020fb2:	f641 41e8 	movw	r1, #7400	@ 0x1ce8
 8020fb6:	f6c0 0103 	movt	r1, #2051	@ 0x803
 8020fba:	6809      	ldr	r1, [r1, #0]
 8020fbc:	4605      	mov	r5, r0
 8020fbe:	f240 20a0 	movw	r0, #672	@ 0x2a0
 8020fc2:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8020fc6:	462a      	mov	r2, r5
 8020fc8:	4623      	mov	r3, r4
 8020fca:	f000 f82b 	bl	8021024 <llhwc_phy_patch_tx_power_mode_in_pre_tx_sequences>
 8020fce:	f641 40f4 	movw	r0, #7412	@ 0x1cf4
 8020fd2:	f6c0 0003 	movt	r0, #2051	@ 0x803
 8020fd6:	6801      	ldr	r1, [r0, #0]
 8020fd8:	f240 20c8 	movw	r0, #712	@ 0x2c8
 8020fdc:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8020fe0:	462a      	mov	r2, r5
 8020fe2:	4623      	mov	r3, r4
 8020fe4:	f000 f81e 	bl	8021024 <llhwc_phy_patch_tx_power_mode_in_pre_tx_sequences>
 8020fe8:	f641 40ec 	movw	r0, #7404	@ 0x1cec
 8020fec:	f6c0 0003 	movt	r0, #2051	@ 0x803
 8020ff0:	6801      	ldr	r1, [r0, #0]
 8020ff2:	f240 20f0 	movw	r0, #752	@ 0x2f0
 8020ff6:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8020ffa:	462a      	mov	r2, r5
 8020ffc:	4623      	mov	r3, r4
 8020ffe:	f000 f811 	bl	8021024 <llhwc_phy_patch_tx_power_mode_in_pre_tx_sequences>
 8021002:	f641 40f0 	movw	r0, #7408	@ 0x1cf0
 8021006:	f6c0 0003 	movt	r0, #2051	@ 0x803
 802100a:	6801      	ldr	r1, [r0, #0]
 802100c:	f240 3018 	movw	r0, #792	@ 0x318
 8021010:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8021014:	462a      	mov	r2, r5
 8021016:	4623      	mov	r3, r4
 8021018:	f000 f804 	bl	8021024 <llhwc_phy_patch_tx_power_mode_in_pre_tx_sequences>
 802101c:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8021020:	f7fe bfb6 	b.w	801ff90 <llhwc_phy_seq_ram_init>

08021024 <llhwc_phy_patch_tx_power_mode_in_pre_tx_sequences>:
 8021024:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8021028:	b081      	sub	sp, #4
 802102a:	460f      	mov	r7, r1
 802102c:	2101      	movs	r1, #1
 802102e:	4698      	mov	r8, r3
 8021030:	4691      	mov	r9, r2
 8021032:	4606      	mov	r6, r0
 8021034:	2800      	cmp	r0, #0
 8021036:	bf18      	it	ne
 8021038:	2001      	movne	r0, #1
 802103a:	f7fe fbf2 	bl	801f822 <bsp_assert>
 802103e:	b35f      	cbz	r7, 8021098 <llhwc_phy_patch_tx_power_mode_in_pre_tx_sequences+0x74>
 8021040:	08b8      	lsrs	r0, r7, #2
 8021042:	d029      	beq.n	8021098 <llhwc_phy_patch_tx_power_mode_in_pre_tx_sequences+0x74>
 8021044:	2500      	movs	r5, #0
 8021046:	f246 3102 	movw	r1, #25346	@ 0x6302
 802104a:	f64e 2c02 	movw	ip, #59906	@ 0xea02
 802104e:	2300      	movs	r3, #0
 8021050:	f04f 0e00 	mov.w	lr, #0
 8021054:	2400      	movs	r4, #0
 8021056:	bf00      	nop
 8021058:	f856 2025 	ldr.w	r2, [r6, r5, lsl #2]
 802105c:	ea02 0701 	and.w	r7, r2, r1
 8021060:	428f      	cmp	r7, r1
 8021062:	d103      	bne.n	802106c <llhwc_phy_patch_tx_power_mode_in_pre_tx_sequences+0x48>
 8021064:	2401      	movs	r4, #1
 8021066:	464f      	mov	r7, r9
 8021068:	e007      	b.n	802107a <llhwc_phy_patch_tx_power_mode_in_pre_tx_sequences+0x56>
 802106a:	bf00      	nop
 802106c:	ea02 070c 	and.w	r7, r2, ip
 8021070:	4567      	cmp	r7, ip
 8021072:	d108      	bne.n	8021086 <llhwc_phy_patch_tx_power_mode_in_pre_tx_sequences+0x62>
 8021074:	f04f 0e01 	mov.w	lr, #1
 8021078:	4647      	mov	r7, r8
 802107a:	f422 027f 	bic.w	r2, r2, #16711680	@ 0xff0000
 802107e:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8021082:	f846 2025 	str.w	r2, [r6, r5, lsl #2]
 8021086:	2c01      	cmp	r4, #1
 8021088:	bf08      	it	eq
 802108a:	f1be 0f01 	cmpeq.w	lr, #1
 802108e:	d003      	beq.n	8021098 <llhwc_phy_patch_tx_power_mode_in_pre_tx_sequences+0x74>
 8021090:	3301      	adds	r3, #1
 8021092:	b2dd      	uxtb	r5, r3
 8021094:	42a8      	cmp	r0, r5
 8021096:	d8df      	bhi.n	8021058 <llhwc_phy_patch_tx_power_mode_in_pre_tx_sequences+0x34>
 8021098:	b001      	add	sp, #4
 802109a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0802109e <llhwc_phy_reset_freq_correction_reg>:
 802109e:	f641 40f8 	movw	r0, #7416	@ 0x1cf8
 80210a2:	f6c0 0003 	movt	r0, #2051	@ 0x803
 80210a6:	6800      	ldr	r0, [r0, #0]
 80210a8:	2200      	movs	r2, #0
 80210aa:	0881      	lsrs	r1, r0, #2
 80210ac:	f240 3040 	movw	r0, #832	@ 0x340
 80210b0:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80210b4:	2300      	movs	r3, #0
 80210b6:	f7fe bd37 	b.w	801fb28 <llhwc_phy_write_cfg_fifo_batch>

080210ba <llhwc_phy_read_rssi>:
 80210ba:	b5b0      	push	{r4, r5, r7, lr}
 80210bc:	b082      	sub	sp, #8
 80210be:	f641 41a0 	movw	r1, #7328	@ 0x1ca0
 80210c2:	f6c0 0103 	movt	r1, #2051	@ 0x803
 80210c6:	788c      	ldrb	r4, [r1, #2]
 80210c8:	2000      	movs	r0, #0
 80210ca:	1e65      	subs	r5, r4, #1
 80210cc:	2101      	movs	r1, #1
 80210ce:	f8ad 0006 	strh.w	r0, [sp, #6]
 80210d2:	f88d 0005 	strb.w	r0, [sp, #5]
 80210d6:	2d02      	cmp	r5, #2
 80210d8:	bf38      	it	cc
 80210da:	2001      	movcc	r0, #1
 80210dc:	f7fe fba1 	bl	801f822 <bsp_assert>
 80210e0:	f641 40a0 	movw	r0, #7328	@ 0x1ca0
 80210e4:	f6c0 0003 	movt	r0, #2051	@ 0x803
 80210e8:	b16d      	cbz	r5, 8021106 <llhwc_phy_read_rssi+0x4c>
 80210ea:	f10d 0206 	add.w	r2, sp, #6
 80210ee:	2101      	movs	r1, #1
 80210f0:	2302      	movs	r3, #2
 80210f2:	f7fe fd19 	bl	801fb28 <llhwc_phy_write_cfg_fifo_batch>
 80210f6:	2c02      	cmp	r4, #2
 80210f8:	d10e      	bne.n	8021118 <llhwc_phy_read_rssi+0x5e>
 80210fa:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 80210fe:	0181      	lsls	r1, r0, #6
 8021100:	ea41 2090 	orr.w	r0, r1, r0, lsr #10
 8021104:	e009      	b.n	802111a <llhwc_phy_read_rssi+0x60>
 8021106:	f10d 0205 	add.w	r2, sp, #5
 802110a:	2101      	movs	r1, #1
 802110c:	2301      	movs	r3, #1
 802110e:	f7fe fd0b 	bl	801fb28 <llhwc_phy_write_cfg_fifo_batch>
 8021112:	f89d 0005 	ldrb.w	r0, [sp, #5]
 8021116:	e000      	b.n	802111a <llhwc_phy_read_rssi+0x60>
 8021118:	2000      	movs	r0, #0
 802111a:	b240      	sxtb	r0, r0
 802111c:	b002      	add	sp, #8
 802111e:	bdb0      	pop	{r4, r5, r7, pc}

08021120 <llhwc_phy_deactivate_scan_req>:
 8021120:	b570      	push	{r4, r5, r6, lr}
 8021122:	f641 41e8 	movw	r1, #7400	@ 0x1ce8
 8021126:	f6c0 0103 	movt	r1, #2051	@ 0x803
 802112a:	6809      	ldr	r1, [r1, #0]
 802112c:	2803      	cmp	r0, #3
 802112e:	d013      	beq.n	8021158 <llhwc_phy_deactivate_scan_req+0x38>
 8021130:	2802      	cmp	r0, #2
 8021132:	d028      	beq.n	8021186 <llhwc_phy_deactivate_scan_req+0x66>
 8021134:	2801      	cmp	r0, #1
 8021136:	d175      	bne.n	8021224 <llhwc_phy_deactivate_scan_req+0x104>
 8021138:	f641 5204 	movw	r2, #7428	@ 0x1d04
 802113c:	f641 531c 	movw	r3, #7452	@ 0x1d1c
 8021140:	f6c0 0203 	movt	r2, #2051	@ 0x803
 8021144:	f6c0 0303 	movt	r3, #2051	@ 0x803
 8021148:	6812      	ldr	r2, [r2, #0]
 802114a:	681b      	ldr	r3, [r3, #0]
 802114c:	189e      	adds	r6, r3, r2
 802114e:	f240 22a0 	movw	r2, #672	@ 0x2a0
 8021152:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8021156:	e026      	b.n	80211a6 <llhwc_phy_deactivate_scan_req+0x86>
 8021158:	f641 5204 	movw	r2, #7428	@ 0x1d04
 802115c:	f6c0 0203 	movt	r2, #2051	@ 0x803
 8021160:	f641 531c 	movw	r3, #7452	@ 0x1d1c
 8021164:	6812      	ldr	r2, [r2, #0]
 8021166:	f6c0 0303 	movt	r3, #2051	@ 0x803
 802116a:	f641 45f4 	movw	r5, #7412	@ 0x1cf4
 802116e:	681b      	ldr	r3, [r3, #0]
 8021170:	f6c0 0503 	movt	r5, #2051	@ 0x803
 8021174:	682d      	ldr	r5, [r5, #0]
 8021176:	440a      	add	r2, r1
 8021178:	441a      	add	r2, r3
 802117a:	1956      	adds	r6, r2, r5
 802117c:	f240 22f0 	movw	r2, #752	@ 0x2f0
 8021180:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8021184:	e00f      	b.n	80211a6 <llhwc_phy_deactivate_scan_req+0x86>
 8021186:	f641 5204 	movw	r2, #7428	@ 0x1d04
 802118a:	f6c0 0203 	movt	r2, #2051	@ 0x803
 802118e:	f641 531c 	movw	r3, #7452	@ 0x1d1c
 8021192:	6812      	ldr	r2, [r2, #0]
 8021194:	f6c0 0303 	movt	r3, #2051	@ 0x803
 8021198:	681b      	ldr	r3, [r3, #0]
 802119a:	440a      	add	r2, r1
 802119c:	18d6      	adds	r6, r2, r3
 802119e:	f240 22c8 	movw	r2, #712	@ 0x2c8
 80211a2:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 80211a6:	f247 13a4 	movw	r3, #29092	@ 0x71a4
 80211aa:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80211ae:	7018      	strb	r0, [r3, #0]
 80211b0:	f641 5044 	movw	r0, #7492	@ 0x1d44
 80211b4:	f6c0 0003 	movt	r0, #2051	@ 0x803
 80211b8:	6803      	ldr	r3, [r0, #0]
 80211ba:	0889      	lsrs	r1, r1, #2
 80211bc:	2400      	movs	r4, #0
 80211be:	2000      	movs	r0, #0
 80211c0:	f852 4024 	ldr.w	r4, [r2, r4, lsl #2]
 80211c4:	f024 0510 	bic.w	r5, r4, #16
 80211c8:	429d      	cmp	r5, r3
 80211ca:	d009      	beq.n	80211e0 <llhwc_phy_deactivate_scan_req+0xc0>
 80211cc:	3001      	adds	r0, #1
 80211ce:	b2c4      	uxtb	r4, r0
 80211d0:	42a1      	cmp	r1, r4
 80211d2:	d2f5      	bcs.n	80211c0 <llhwc_phy_deactivate_scan_req+0xa0>
 80211d4:	f240 1009 	movw	r0, #265	@ 0x109
 80211d8:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80211dc:	7800      	ldrb	r0, [r0, #0]
 80211de:	e009      	b.n	80211f4 <llhwc_phy_deactivate_scan_req+0xd4>
 80211e0:	f247 11a8 	movw	r1, #29096	@ 0x71a8
 80211e4:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 80211e8:	600c      	str	r4, [r1, #0]
 80211ea:	f240 1109 	movw	r1, #265	@ 0x109
 80211ee:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 80211f2:	7008      	strb	r0, [r1, #0]
 80211f4:	b2c0      	uxtb	r0, r0
 80211f6:	38ff      	subs	r0, #255	@ 0xff
 80211f8:	f04f 0101 	mov.w	r1, #1
 80211fc:	bf18      	it	ne
 80211fe:	2001      	movne	r0, #1
 8021200:	f7fe fb0f 	bl	801f822 <bsp_assert>
 8021204:	f240 1009 	movw	r0, #265	@ 0x109
 8021208:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 802120c:	7800      	ldrb	r0, [r0, #0]
 802120e:	28ff      	cmp	r0, #255	@ 0xff
 8021210:	bf08      	it	eq
 8021212:	bd70      	popeq	{r4, r5, r6, pc}
 8021214:	eb06 0080 	add.w	r0, r6, r0, lsl #2
 8021218:	f241 0100 	movw	r1, #4096	@ 0x1000
 802121c:	f6c4 0102 	movt	r1, #18434	@ 0x4802
 8021220:	22ae      	movs	r2, #174	@ 0xae
 8021222:	5042      	str	r2, [r0, r1]
 8021224:	bd70      	pop	{r4, r5, r6, pc}

08021226 <llhwc_phy_activate_scan_req>:
 8021226:	f240 1009 	movw	r0, #265	@ 0x109
 802122a:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 802122e:	7801      	ldrb	r1, [r0, #0]
 8021230:	29ff      	cmp	r1, #255	@ 0xff
 8021232:	bf08      	it	eq
 8021234:	4770      	bxeq	lr
 8021236:	f641 5204 	movw	r2, #7428	@ 0x1d04
 802123a:	f6c0 0203 	movt	r2, #2051	@ 0x803
 802123e:	6812      	ldr	r2, [r2, #0]
 8021240:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 8021244:	f641 521c 	movw	r2, #7452	@ 0x1d1c
 8021248:	f6c0 0203 	movt	r2, #2051	@ 0x803
 802124c:	6813      	ldr	r3, [r2, #0]
 802124e:	f247 12a4 	movw	r2, #29092	@ 0x71a4
 8021252:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8021256:	7812      	ldrb	r2, [r2, #0]
 8021258:	4419      	add	r1, r3
 802125a:	2a03      	cmp	r2, #3
 802125c:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 8021260:	d008      	beq.n	8021274 <llhwc_phy_activate_scan_req+0x4e>
 8021262:	2a02      	cmp	r2, #2
 8021264:	d112      	bne.n	802128c <llhwc_phy_activate_scan_req+0x66>
 8021266:	f641 42e8 	movw	r2, #7400	@ 0x1ce8
 802126a:	f6c0 0203 	movt	r2, #2051	@ 0x803
 802126e:	6812      	ldr	r2, [r2, #0]
 8021270:	4411      	add	r1, r2
 8021272:	e00b      	b.n	802128c <llhwc_phy_activate_scan_req+0x66>
 8021274:	f641 42e8 	movw	r2, #7400	@ 0x1ce8
 8021278:	f6c0 0203 	movt	r2, #2051	@ 0x803
 802127c:	f641 43f4 	movw	r3, #7412	@ 0x1cf4
 8021280:	6812      	ldr	r2, [r2, #0]
 8021282:	f6c0 0303 	movt	r3, #2051	@ 0x803
 8021286:	681b      	ldr	r3, [r3, #0]
 8021288:	4411      	add	r1, r2
 802128a:	4419      	add	r1, r3
 802128c:	f247 12a8 	movw	r2, #29096	@ 0x71a8
 8021290:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8021294:	6812      	ldr	r2, [r2, #0]
 8021296:	2300      	movs	r3, #0
 8021298:	f6c4 0302 	movt	r3, #18434	@ 0x4802
 802129c:	50ca      	str	r2, [r1, r3]
 802129e:	21ff      	movs	r1, #255	@ 0xff
 80212a0:	7001      	strb	r1, [r0, #0]
 80212a2:	4770      	bx	lr

080212a4 <ble_time_comp>:
 80212a4:	7982      	ldrb	r2, [r0, #6]
 80212a6:	798b      	ldrb	r3, [r1, #6]
 80212a8:	429a      	cmp	r2, r3
 80212aa:	d80d      	bhi.n	80212c8 <ble_time_comp+0x24>
 80212ac:	4293      	cmp	r3, r2
 80212ae:	d804      	bhi.n	80212ba <ble_time_comp+0x16>
 80212b0:	6802      	ldr	r2, [r0, #0]
 80212b2:	680b      	ldr	r3, [r1, #0]
 80212b4:	429a      	cmp	r2, r3
 80212b6:	d807      	bhi.n	80212c8 <ble_time_comp+0x24>
 80212b8:	d202      	bcs.n	80212c0 <ble_time_comp+0x1c>
 80212ba:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80212be:	4770      	bx	lr
 80212c0:	8880      	ldrh	r0, [r0, #4]
 80212c2:	8889      	ldrh	r1, [r1, #4]
 80212c4:	4288      	cmp	r0, r1
 80212c6:	d901      	bls.n	80212cc <ble_time_comp+0x28>
 80212c8:	2001      	movs	r0, #1
 80212ca:	4770      	bx	lr
 80212cc:	f04f 0000 	mov.w	r0, #0
 80212d0:	bf38      	it	cc
 80212d2:	f04f 30ff 	movcc.w	r0, #4294967295	@ 0xffffffff
 80212d6:	4770      	bx	lr

080212d8 <ble_time_diff_us>:
 80212d8:	b5b0      	push	{r4, r5, r7, lr}
 80212da:	460c      	mov	r4, r1
 80212dc:	4605      	mov	r5, r0
 80212de:	f7ff ffe1 	bl	80212a4 <ble_time_comp>
 80212e2:	2800      	cmp	r0, #0
 80212e4:	bf47      	ittee	mi
 80212e6:	4620      	movmi	r0, r4
 80212e8:	4629      	movmi	r1, r5
 80212ea:	4628      	movpl	r0, r5
 80212ec:	4621      	movpl	r1, r4
 80212ee:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80212f2:	f000 b800 	b.w	80212f6 <ble_time_ordered_diff_us_overflow>

080212f6 <ble_time_ordered_diff_us_overflow>:
 80212f6:	b570      	push	{r4, r5, r6, lr}
 80212f8:	4604      	mov	r4, r0
 80212fa:	7980      	ldrb	r0, [r0, #6]
 80212fc:	460d      	mov	r5, r1
 80212fe:	2801      	cmp	r0, #1
 8021300:	d004      	beq.n	802130c <ble_time_ordered_diff_us_overflow+0x16>
 8021302:	b908      	cbnz	r0, 8021308 <ble_time_ordered_diff_us_overflow+0x12>
 8021304:	79a8      	ldrb	r0, [r5, #6]
 8021306:	b120      	cbz	r0, 8021312 <ble_time_ordered_diff_us_overflow+0x1c>
 8021308:	2000      	movs	r0, #0
 802130a:	e015      	b.n	8021338 <ble_time_ordered_diff_us_overflow+0x42>
 802130c:	79a8      	ldrb	r0, [r5, #6]
 802130e:	2801      	cmp	r0, #1
 8021310:	d10f      	bne.n	8021332 <ble_time_ordered_diff_us_overflow+0x3c>
 8021312:	6821      	ldr	r1, [r4, #0]
 8021314:	682a      	ldr	r2, [r5, #0]
 8021316:	88a0      	ldrh	r0, [r4, #4]
 8021318:	88ab      	ldrh	r3, [r5, #4]
 802131a:	1a89      	subs	r1, r1, r2
 802131c:	4298      	cmp	r0, r3
 802131e:	bf3c      	itt	cc
 8021320:	301f      	addcc	r0, #31
 8021322:	3901      	subcc	r1, #1
 8021324:	1ac0      	subs	r0, r0, r3
 8021326:	ebc1 1241 	rsb	r2, r1, r1, lsl #5
 802132a:	eb00 0091 	add.w	r0, r0, r1, lsr #2
 802132e:	4410      	add	r0, r2
 8021330:	bd70      	pop	{r4, r5, r6, pc}
 8021332:	fab0 f080 	clz	r0, r0
 8021336:	0940      	lsrs	r0, r0, #5
 8021338:	682e      	ldr	r6, [r5, #0]
 802133a:	2101      	movs	r1, #1
 802133c:	f7fe fa71 	bl	801f822 <bsp_assert>
 8021340:	6820      	ldr	r0, [r4, #0]
 8021342:	88a1      	ldrh	r1, [r4, #4]
 8021344:	88aa      	ldrh	r2, [r5, #4]
 8021346:	1b80      	subs	r0, r0, r6
 8021348:	4291      	cmp	r1, r2
 802134a:	bf3c      	itt	cc
 802134c:	311f      	addcc	r1, #31
 802134e:	3801      	subcc	r0, #1
 8021350:	1a89      	subs	r1, r1, r2
 8021352:	ebc0 1340 	rsb	r3, r0, r0, lsl #5
 8021356:	eb01 0090 	add.w	r0, r1, r0, lsr #2
 802135a:	4418      	add	r0, r3
 802135c:	bd70      	pop	{r4, r5, r6, pc}

0802135e <ble_time_ordered_diff_us>:
 802135e:	798a      	ldrb	r2, [r1, #6]
 8021360:	2a01      	cmp	r2, #1
 8021362:	d101      	bne.n	8021368 <ble_time_ordered_diff_us+0xa>
 8021364:	7982      	ldrb	r2, [r0, #6]
 8021366:	b1b2      	cbz	r2, 8021396 <ble_time_ordered_diff_us+0x38>
 8021368:	680a      	ldr	r2, [r1, #0]
 802136a:	f64b 0300 	movw	r3, #47104	@ 0xb800
 802136e:	f6cf 6317 	movt	r3, #65047	@ 0xfe17
 8021372:	429a      	cmp	r2, r3
 8021374:	bf38      	it	cc
 8021376:	f7ff bfbe 	bcc.w	80212f6 <ble_time_ordered_diff_us_overflow>
 802137a:	f8d0 c000 	ldr.w	ip, [r0]
 802137e:	f244 73ff 	movw	r3, #18431	@ 0x47ff
 8021382:	f2c0 13e8 	movt	r3, #488	@ 0x1e8
 8021386:	459c      	cmp	ip, r3
 8021388:	bf98      	it	ls
 802138a:	4594      	cmpls	ip, r2
 802138c:	bf3c      	itt	cc
 802138e:	2201      	movcc	r2, #1
 8021390:	7182      	strbcc	r2, [r0, #6]
 8021392:	f7ff bfb0 	b.w	80212f6 <ble_time_ordered_diff_us_overflow>
 8021396:	2200      	movs	r2, #0
 8021398:	718a      	strb	r2, [r1, #6]
 802139a:	f7ff bfac 	b.w	80212f6 <ble_time_ordered_diff_us_overflow>

0802139e <ble_time_set>:
 802139e:	680a      	ldr	r2, [r1, #0]
 80213a0:	6002      	str	r2, [r0, #0]
 80213a2:	888a      	ldrh	r2, [r1, #4]
 80213a4:	7989      	ldrb	r1, [r1, #6]
 80213a6:	8082      	strh	r2, [r0, #4]
 80213a8:	7181      	strb	r1, [r0, #6]
 80213aa:	4770      	bx	lr

080213ac <ble_time_add>:
 80213ac:	b5b0      	push	{r4, r5, r7, lr}
 80213ae:	460d      	mov	r5, r1
 80213b0:	7989      	ldrb	r1, [r1, #6]
 80213b2:	4604      	mov	r4, r0
 80213b4:	fab1 f081 	clz	r0, r1
 80213b8:	0940      	lsrs	r0, r0, #5
 80213ba:	2101      	movs	r1, #1
 80213bc:	f7fe fa31 	bl	801f822 <bsp_assert>
 80213c0:	88a1      	ldrh	r1, [r4, #4]
 80213c2:	88aa      	ldrh	r2, [r5, #4]
 80213c4:	6820      	ldr	r0, [r4, #0]
 80213c6:	682b      	ldr	r3, [r5, #0]
 80213c8:	440a      	add	r2, r1
 80213ca:	1819      	adds	r1, r3, r0
 80213cc:	2a20      	cmp	r2, #32
 80213ce:	6021      	str	r1, [r4, #0]
 80213d0:	80a2      	strh	r2, [r4, #4]
 80213d2:	d303      	bcc.n	80213dc <ble_time_add+0x30>
 80213d4:	3101      	adds	r1, #1
 80213d6:	3a1f      	subs	r2, #31
 80213d8:	6021      	str	r1, [r4, #0]
 80213da:	80a2      	strh	r2, [r4, #4]
 80213dc:	4288      	cmp	r0, r1
 80213de:	bf84      	itt	hi
 80213e0:	2001      	movhi	r0, #1
 80213e2:	71a0      	strbhi	r0, [r4, #6]
 80213e4:	bdb0      	pop	{r4, r5, r7, pc}
	...

080213e8 <ble_time_add_uint>:
 80213e8:	b510      	push	{r4, lr}
 80213ea:	b082      	sub	sp, #8
 80213ec:	4604      	mov	r4, r0
 80213ee:	1e50      	subs	r0, r2, #1
 80213f0:	2300      	movs	r3, #0
 80213f2:	2804      	cmp	r0, #4
 80213f4:	9301      	str	r3, [sp, #4]
 80213f6:	9300      	str	r3, [sp, #0]
 80213f8:	d816      	bhi.n	8021428 <ble_time_add_uint+0x40>
 80213fa:	e8df f000 	tbb	[pc, r0]
 80213fe:	1a03      	.short	0x1a03
 8021400:	002c2621 	.word	0x002c2621
 8021404:	f644 52d3 	movw	r2, #19923	@ 0x4dd3
 8021408:	0088      	lsls	r0, r1, #2
 802140a:	f2c1 0262 	movt	r2, #4194	@ 0x1062
 802140e:	fba0 0202 	umull	r0, r2, r0, r2
 8021412:	eba1 1152 	sub.w	r1, r1, r2, lsr #5
 8021416:	08d0      	lsrs	r0, r2, #3
 8021418:	f64f 72e1 	movw	r2, #65505	@ 0xffe1
 802141c:	fb00 1102 	mla	r1, r0, r2, r1
 8021420:	9000      	str	r0, [sp, #0]
 8021422:	f8ad 1004 	strh.w	r1, [sp, #4]
 8021426:	e017      	b.n	8021458 <ble_time_add_uint+0x70>
 8021428:	2000      	movs	r0, #0
 802142a:	2101      	movs	r1, #1
 802142c:	f7fe f9f9 	bl	801f822 <bsp_assert>
 8021430:	e012      	b.n	8021458 <ble_time_add_uint+0x70>
 8021432:	eb01 0081 	add.w	r0, r1, r1, lsl #2
 8021436:	0081      	lsls	r1, r0, #2
 8021438:	eba0 0091 	sub.w	r0, r0, r1, lsr #2
 802143c:	9100      	str	r1, [sp, #0]
 802143e:	e007      	b.n	8021450 <ble_time_add_uint+0x68>
 8021440:	eb01 0081 	add.w	r0, r1, r1, lsl #2
 8021444:	00c0      	lsls	r0, r0, #3
 8021446:	9000      	str	r0, [sp, #0]
 8021448:	e006      	b.n	8021458 <ble_time_add_uint+0x70>
 802144a:	0148      	lsls	r0, r1, #5
 802144c:	9000      	str	r0, [sp, #0]
 802144e:	2000      	movs	r0, #0
 8021450:	f8ad 0004 	strh.w	r0, [sp, #4]
 8021454:	e000      	b.n	8021458 <ble_time_add_uint+0x70>
 8021456:	9100      	str	r1, [sp, #0]
 8021458:	4669      	mov	r1, sp
 802145a:	4620      	mov	r0, r4
 802145c:	f7ff ffa6 	bl	80213ac <ble_time_add>
 8021460:	b002      	add	sp, #8
 8021462:	bd10      	pop	{r4, pc}

08021464 <ble_time_rmv>:
 8021464:	b570      	push	{r4, r5, r6, lr}
 8021466:	460d      	mov	r5, r1
 8021468:	7989      	ldrb	r1, [r1, #6]
 802146a:	4604      	mov	r4, r0
 802146c:	fab1 f081 	clz	r0, r1
 8021470:	0940      	lsrs	r0, r0, #5
 8021472:	2101      	movs	r1, #1
 8021474:	f7fe f9d5 	bl	801f822 <bsp_assert>
 8021478:	6826      	ldr	r6, [r4, #0]
 802147a:	4620      	mov	r0, r4
 802147c:	4629      	mov	r1, r5
 802147e:	f7ff ff11 	bl	80212a4 <ble_time_comp>
 8021482:	f1b0 3fff 	cmp.w	r0, #4294967295	@ 0xffffffff
 8021486:	dc0c      	bgt.n	80214a2 <ble_time_rmv+0x3e>
 8021488:	f244 70ff 	movw	r0, #18431	@ 0x47ff
 802148c:	f2c0 10e8 	movt	r0, #488	@ 0x1e8
 8021490:	4286      	cmp	r6, r0
 8021492:	d802      	bhi.n	802149a <ble_time_rmv+0x36>
 8021494:	2001      	movs	r0, #1
 8021496:	71a0      	strb	r0, [r4, #6]
 8021498:	e003      	b.n	80214a2 <ble_time_rmv+0x3e>
 802149a:	2000      	movs	r0, #0
 802149c:	2101      	movs	r1, #1
 802149e:	f7fe f9c0 	bl	801f822 <bsp_assert>
 80214a2:	79a0      	ldrb	r0, [r4, #6]
 80214a4:	b158      	cbz	r0, 80214be <ble_time_rmv+0x5a>
 80214a6:	6829      	ldr	r1, [r5, #0]
 80214a8:	6822      	ldr	r2, [r4, #0]
 80214aa:	3101      	adds	r1, #1
 80214ac:	428a      	cmp	r2, r1
 80214ae:	d80d      	bhi.n	80214cc <ble_time_rmv+0x68>
 80214b0:	2801      	cmp	r0, #1
 80214b2:	d119      	bne.n	80214e8 <ble_time_rmv+0x84>
 80214b4:	79a8      	ldrb	r0, [r5, #6]
 80214b6:	fab0 f080 	clz	r0, r0
 80214ba:	0940      	lsrs	r0, r0, #5
 80214bc:	e015      	b.n	80214ea <ble_time_rmv+0x86>
 80214be:	79a8      	ldrb	r0, [r5, #6]
 80214c0:	b120      	cbz	r0, 80214cc <ble_time_rmv+0x68>
 80214c2:	6828      	ldr	r0, [r5, #0]
 80214c4:	6821      	ldr	r1, [r4, #0]
 80214c6:	3001      	adds	r0, #1
 80214c8:	4281      	cmp	r1, r0
 80214ca:	d90d      	bls.n	80214e8 <ble_time_rmv+0x84>
 80214cc:	88a1      	ldrh	r1, [r4, #4]
 80214ce:	88aa      	ldrh	r2, [r5, #4]
 80214d0:	6820      	ldr	r0, [r4, #0]
 80214d2:	4291      	cmp	r1, r2
 80214d4:	bf3e      	ittt	cc
 80214d6:	3801      	subcc	r0, #1
 80214d8:	6020      	strcc	r0, [r4, #0]
 80214da:	311f      	addcc	r1, #31
 80214dc:	1a89      	subs	r1, r1, r2
 80214de:	682a      	ldr	r2, [r5, #0]
 80214e0:	80a1      	strh	r1, [r4, #4]
 80214e2:	1a80      	subs	r0, r0, r2
 80214e4:	6020      	str	r0, [r4, #0]
 80214e6:	e012      	b.n	802150e <ble_time_rmv+0xaa>
 80214e8:	2000      	movs	r0, #0
 80214ea:	2101      	movs	r1, #1
 80214ec:	f7fe f999 	bl	801f822 <bsp_assert>
 80214f0:	6820      	ldr	r0, [r4, #0]
 80214f2:	6829      	ldr	r1, [r5, #0]
 80214f4:	88aa      	ldrh	r2, [r5, #4]
 80214f6:	1a40      	subs	r0, r0, r1
 80214f8:	88a1      	ldrh	r1, [r4, #4]
 80214fa:	bf88      	it	hi
 80214fc:	3001      	addhi	r0, #1
 80214fe:	6020      	str	r0, [r4, #0]
 8021500:	4291      	cmp	r1, r2
 8021502:	bf3e      	ittt	cc
 8021504:	3801      	subcc	r0, #1
 8021506:	6020      	strcc	r0, [r4, #0]
 8021508:	311f      	addcc	r1, #31
 802150a:	1a89      	subs	r1, r1, r2
 802150c:	80a1      	strh	r1, [r4, #4]
 802150e:	42b0      	cmp	r0, r6
 8021510:	bf98      	it	ls
 8021512:	bd70      	popls	{r4, r5, r6, pc}
 8021514:	79a0      	ldrb	r0, [r4, #6]
 8021516:	2101      	movs	r1, #1
 8021518:	3801      	subs	r0, #1
 802151a:	fab0 f080 	clz	r0, r0
 802151e:	0940      	lsrs	r0, r0, #5
 8021520:	f7fe f97f 	bl	801f822 <bsp_assert>
 8021524:	2000      	movs	r0, #0
 8021526:	71a0      	strb	r0, [r4, #6]
 8021528:	bd70      	pop	{r4, r5, r6, pc}
	...

0802152c <ble_time_rmv_uint>:
 802152c:	b510      	push	{r4, lr}
 802152e:	b082      	sub	sp, #8
 8021530:	4604      	mov	r4, r0
 8021532:	1e50      	subs	r0, r2, #1
 8021534:	2300      	movs	r3, #0
 8021536:	2804      	cmp	r0, #4
 8021538:	9301      	str	r3, [sp, #4]
 802153a:	9300      	str	r3, [sp, #0]
 802153c:	d816      	bhi.n	802156c <ble_time_rmv_uint+0x40>
 802153e:	e8df f000 	tbb	[pc, r0]
 8021542:	1a03      	.short	0x1a03
 8021544:	002c261e 	.word	0x002c261e
 8021548:	f644 52d3 	movw	r2, #19923	@ 0x4dd3
 802154c:	0088      	lsls	r0, r1, #2
 802154e:	f2c1 0262 	movt	r2, #4194	@ 0x1062
 8021552:	fba0 0202 	umull	r0, r2, r0, r2
 8021556:	eba1 1152 	sub.w	r1, r1, r2, lsr #5
 802155a:	08d0      	lsrs	r0, r2, #3
 802155c:	f64f 72e1 	movw	r2, #65505	@ 0xffe1
 8021560:	fb00 1102 	mla	r1, r0, r2, r1
 8021564:	9000      	str	r0, [sp, #0]
 8021566:	f8ad 1004 	strh.w	r1, [sp, #4]
 802156a:	e017      	b.n	802159c <ble_time_rmv_uint+0x70>
 802156c:	2000      	movs	r0, #0
 802156e:	2101      	movs	r1, #1
 8021570:	f7fe f957 	bl	801f822 <bsp_assert>
 8021574:	e012      	b.n	802159c <ble_time_rmv_uint+0x70>
 8021576:	eb01 0081 	add.w	r0, r1, r1, lsl #2
 802157a:	0081      	lsls	r1, r0, #2
 802157c:	e003      	b.n	8021586 <ble_time_rmv_uint+0x5a>
 802157e:	eb01 0081 	add.w	r0, r1, r1, lsl #2
 8021582:	00c1      	lsls	r1, r0, #3
 8021584:	0040      	lsls	r0, r0, #1
 8021586:	eba0 0091 	sub.w	r0, r0, r1, lsr #2
 802158a:	9100      	str	r1, [sp, #0]
 802158c:	e002      	b.n	8021594 <ble_time_rmv_uint+0x68>
 802158e:	0148      	lsls	r0, r1, #5
 8021590:	9000      	str	r0, [sp, #0]
 8021592:	2000      	movs	r0, #0
 8021594:	f8ad 0004 	strh.w	r0, [sp, #4]
 8021598:	e000      	b.n	802159c <ble_time_rmv_uint+0x70>
 802159a:	9100      	str	r1, [sp, #0]
 802159c:	4669      	mov	r1, sp
 802159e:	4620      	mov	r0, r4
 80215a0:	f7ff ff60 	bl	8021464 <ble_time_rmv>
 80215a4:	b002      	add	sp, #8
 80215a6:	bd10      	pop	{r4, pc}

080215a8 <ble_time_cmp_raw_reading>:
 80215a8:	6802      	ldr	r2, [r0, #0]
 80215aa:	ea92 0001 	eors.w	r0, r2, r1
 80215ae:	d406      	bmi.n	80215be <ble_time_cmp_raw_reading+0x16>
 80215b0:	428a      	cmp	r2, r1
 80215b2:	bf04      	itt	eq
 80215b4:	2000      	moveq	r0, #0
 80215b6:	4770      	bxeq	lr
 80215b8:	f04f 0001 	mov.w	r0, #1
 80215bc:	e00f      	b.n	80215de <ble_time_cmp_raw_reading+0x36>
 80215be:	1a50      	subs	r0, r2, r1
 80215c0:	d903      	bls.n	80215ca <ble_time_cmp_raw_reading+0x22>
 80215c2:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80215c6:	4298      	cmp	r0, r3
 80215c8:	d307      	bcc.n	80215da <ble_time_cmp_raw_reading+0x32>
 80215ca:	1a88      	subs	r0, r1, r2
 80215cc:	d90b      	bls.n	80215e6 <ble_time_cmp_raw_reading+0x3e>
 80215ce:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 80215d2:	f6c7 73ff 	movt	r3, #32767	@ 0x7fff
 80215d6:	4298      	cmp	r0, r3
 80215d8:	d805      	bhi.n	80215e6 <ble_time_cmp_raw_reading+0x3e>
 80215da:	2001      	movs	r0, #1
 80215dc:	428a      	cmp	r2, r1
 80215de:	bf88      	it	hi
 80215e0:	f04f 30ff 	movhi.w	r0, #4294967295	@ 0xffffffff
 80215e4:	4770      	bx	lr
 80215e6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80215ea:	428a      	cmp	r2, r1
 80215ec:	bf88      	it	hi
 80215ee:	2001      	movhi	r0, #1
 80215f0:	4770      	bx	lr

080215f2 <ble_time_overflow_diff>:
 80215f2:	1a40      	subs	r0, r0, r1
 80215f4:	4770      	bx	lr
	...

080215f8 <emngr_init>:
 80215f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80215fa:	b081      	sub	sp, #4
 80215fc:	f247 2504 	movw	r5, #29188	@ 0x7204
 8021600:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 8021604:	2600      	movs	r6, #0
 8021606:	2700      	movs	r7, #0
 8021608:	f8c5 60c8 	str.w	r6, [r5, #200]	@ 0xc8
 802160c:	19ec      	adds	r4, r5, r7
 802160e:	4620      	mov	r0, r4
 8021610:	f000 fa20 	bl	8021a54 <queue_free>
 8021614:	51ee      	str	r6, [r5, r7]
 8021616:	3714      	adds	r7, #20
 8021618:	2fc8      	cmp	r7, #200	@ 0xc8
 802161a:	6066      	str	r6, [r4, #4]
 802161c:	7226      	strb	r6, [r4, #8]
 802161e:	d1f5      	bne.n	802160c <emngr_init+0x14>
 8021620:	2000      	movs	r0, #0
 8021622:	2100      	movs	r1, #0
 8021624:	186a      	adds	r2, r5, r1
 8021626:	3114      	adds	r1, #20
 8021628:	29c8      	cmp	r1, #200	@ 0xc8
 802162a:	8210      	strh	r0, [r2, #16]
 802162c:	d1fa      	bne.n	8021624 <emngr_init+0x2c>
 802162e:	f247 24d0 	movw	r4, #29392	@ 0x72d0
 8021632:	f2c2 0400 	movt	r4, #8192	@ 0x2000
 8021636:	6820      	ldr	r0, [r4, #0]
 8021638:	b920      	cbnz	r0, 8021644 <emngr_init+0x4c>
 802163a:	2032      	movs	r0, #50	@ 0x32
 802163c:	2100      	movs	r1, #0
 802163e:	f7fe f960 	bl	801f902 <os_semaphore_create>
 8021642:	6020      	str	r0, [r4, #0]
 8021644:	b001      	add	sp, #4
 8021646:	bdf0      	pop	{r4, r5, r6, r7, pc}

08021648 <emngr_handle_init>:
 8021648:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 802164c:	f247 2304 	movw	r3, #29188	@ 0x7204
 8021650:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8021654:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8021658:	2000      	movs	r0, #0
 802165a:	7419      	strb	r1, [r3, #16]
 802165c:	60da      	str	r2, [r3, #12]
 802165e:	4770      	bx	lr

08021660 <emngr_handle_remove>:
 8021660:	b570      	push	{r4, r5, r6, lr}
 8021662:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 8021666:	f247 2604 	movw	r6, #29188	@ 0x7204
 802166a:	f2c2 0600 	movt	r6, #8192	@ 0x2000
 802166e:	eb06 0485 	add.w	r4, r6, r5, lsl #2
 8021672:	4620      	mov	r0, r4
 8021674:	f000 f9ee 	bl	8021a54 <queue_free>
 8021678:	7a20      	ldrb	r0, [r4, #8]
 802167a:	f8d6 20c8 	ldr.w	r2, [r6, #200]	@ 0xc8
 802167e:	2100      	movs	r1, #0
 8021680:	1a10      	subs	r0, r2, r0
 8021682:	f8c6 00c8 	str.w	r0, [r6, #200]	@ 0xc8
 8021686:	2000      	movs	r0, #0
 8021688:	f846 1025 	str.w	r1, [r6, r5, lsl #2]
 802168c:	6061      	str	r1, [r4, #4]
 802168e:	7221      	strb	r1, [r4, #8]
 8021690:	bd70      	pop	{r4, r5, r6, pc}

08021692 <emngr_post_event>:
 8021692:	b5b0      	push	{r4, r5, r7, lr}
 8021694:	4605      	mov	r5, r0
 8021696:	201f      	movs	r0, #31
 8021698:	460c      	mov	r4, r1
 802169a:	f7fe f909 	bl	801f8b0 <bsp_debug_gpio_set>
 802169e:	f7fe f920 	bl	801f8e2 <os_disable_isr>
 80216a2:	eb05 0085 	add.w	r0, r5, r5, lsl #2
 80216a6:	f247 2504 	movw	r5, #29188	@ 0x7204
 80216aa:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 80216ae:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 80216b2:	7a01      	ldrb	r1, [r0, #8]
 80216b4:	7c02      	ldrb	r2, [r0, #16]
 80216b6:	4291      	cmp	r1, r2
 80216b8:	d20a      	bcs.n	80216d0 <emngr_post_event+0x3e>
 80216ba:	4621      	mov	r1, r4
 80216bc:	f000 f9d5 	bl	8021a6a <queue_enqueue>
 80216c0:	b130      	cbz	r0, 80216d0 <emngr_post_event+0x3e>
 80216c2:	f8d5 00c8 	ldr.w	r0, [r5, #200]	@ 0xc8
 80216c6:	2400      	movs	r4, #0
 80216c8:	3001      	adds	r0, #1
 80216ca:	f8c5 00c8 	str.w	r0, [r5, #200]	@ 0xc8
 80216ce:	e004      	b.n	80216da <emngr_post_event+0x48>
 80216d0:	2000      	movs	r0, #0
 80216d2:	2101      	movs	r1, #1
 80216d4:	f7fe f8a5 	bl	801f822 <bsp_assert>
 80216d8:	244d      	movs	r4, #77	@ 0x4d
 80216da:	f7fe f904 	bl	801f8e6 <os_enable_isr>
 80216de:	f247 20d0 	movw	r0, #29392	@ 0x72d0
 80216e2:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80216e6:	6800      	ldr	r0, [r0, #0]
 80216e8:	f7fe f914 	bl	801f914 <os_semaphore_release_isr>
 80216ec:	201f      	movs	r0, #31
 80216ee:	f7fe f8e1 	bl	801f8b4 <bsp_debug_gpio_clear>
 80216f2:	4620      	mov	r0, r4
 80216f4:	bdb0      	pop	{r4, r5, r7, pc}

080216f6 <emngr_post_event_first>:
 80216f6:	b5b0      	push	{r4, r5, r7, lr}
 80216f8:	4605      	mov	r5, r0
 80216fa:	201f      	movs	r0, #31
 80216fc:	460c      	mov	r4, r1
 80216fe:	f7fe f8d7 	bl	801f8b0 <bsp_debug_gpio_set>
 8021702:	f7fe f8ee 	bl	801f8e2 <os_disable_isr>
 8021706:	eb05 0085 	add.w	r0, r5, r5, lsl #2
 802170a:	f247 2504 	movw	r5, #29188	@ 0x7204
 802170e:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 8021712:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 8021716:	7a01      	ldrb	r1, [r0, #8]
 8021718:	7c02      	ldrb	r2, [r0, #16]
 802171a:	4291      	cmp	r1, r2
 802171c:	d20a      	bcs.n	8021734 <emngr_post_event_first+0x3e>
 802171e:	4621      	mov	r1, r4
 8021720:	f000 f9c6 	bl	8021ab0 <queue_insert_frst>
 8021724:	b130      	cbz	r0, 8021734 <emngr_post_event_first+0x3e>
 8021726:	f8d5 00c8 	ldr.w	r0, [r5, #200]	@ 0xc8
 802172a:	2400      	movs	r4, #0
 802172c:	3001      	adds	r0, #1
 802172e:	f8c5 00c8 	str.w	r0, [r5, #200]	@ 0xc8
 8021732:	e004      	b.n	802173e <emngr_post_event_first+0x48>
 8021734:	2000      	movs	r0, #0
 8021736:	2101      	movs	r1, #1
 8021738:	f7fe f873 	bl	801f822 <bsp_assert>
 802173c:	244d      	movs	r4, #77	@ 0x4d
 802173e:	f7fe f8d2 	bl	801f8e6 <os_enable_isr>
 8021742:	f247 20d0 	movw	r0, #29392	@ 0x72d0
 8021746:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 802174a:	6800      	ldr	r0, [r0, #0]
 802174c:	f7fe f8e2 	bl	801f914 <os_semaphore_release_isr>
 8021750:	201f      	movs	r0, #31
 8021752:	f7fe f8af 	bl	801f8b4 <bsp_debug_gpio_clear>
 8021756:	4620      	mov	r0, r4
 8021758:	bdb0      	pop	{r4, r5, r7, pc}

0802175a <emngr_get_event>:
 802175a:	b5b0      	push	{r4, r5, r7, lr}
 802175c:	f248 15b4 	movw	r5, #33204	@ 0x81b4
 8021760:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 8021764:	6829      	ldr	r1, [r5, #0]
 8021766:	4604      	mov	r4, r0
 8021768:	4608      	mov	r0, r1
 802176a:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 802176e:	f7fe f8bc 	bl	801f8ea <os_rcrsv_mutex_wait>
 8021772:	eb04 0084 	add.w	r0, r4, r4, lsl #2
 8021776:	f247 2104 	movw	r1, #29188	@ 0x7204
 802177a:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 802177e:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 8021782:	7a02      	ldrb	r2, [r0, #8]
 8021784:	b122      	cbz	r2, 8021790 <emngr_get_event+0x36>
 8021786:	f8d1 20c8 	ldr.w	r2, [r1, #200]	@ 0xc8
 802178a:	3a01      	subs	r2, #1
 802178c:	f8c1 20c8 	str.w	r2, [r1, #200]	@ 0xc8
 8021790:	f000 f9b4 	bl	8021afc <queue_dequeue>
 8021794:	6829      	ldr	r1, [r5, #0]
 8021796:	4604      	mov	r4, r0
 8021798:	4608      	mov	r0, r1
 802179a:	f7fe f8ac 	bl	801f8f6 <os_rcrsv_mutex_release>
 802179e:	4620      	mov	r0, r4
 80217a0:	bdb0      	pop	{r4, r5, r7, pc}

080217a2 <emngr_process_event>:
 80217a2:	b570      	push	{r4, r5, r6, lr}
 80217a4:	4604      	mov	r4, r0
 80217a6:	2021      	movs	r0, #33	@ 0x21
 80217a8:	f7fe f882 	bl	801f8b0 <bsp_debug_gpio_set>
 80217ac:	eb04 0084 	add.w	r0, r4, r4, lsl #2
 80217b0:	f247 2104 	movw	r1, #29188	@ 0x7204
 80217b4:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 80217b8:	eb01 0580 	add.w	r5, r1, r0, lsl #2
 80217bc:	7c68      	ldrb	r0, [r5, #17]
 80217be:	b108      	cbz	r0, 80217c4 <emngr_process_event+0x22>
 80217c0:	2401      	movs	r4, #1
 80217c2:	e01b      	b.n	80217fc <emngr_process_event+0x5a>
 80217c4:	f248 16b4 	movw	r6, #33204	@ 0x81b4
 80217c8:	f2c2 0600 	movt	r6, #8192	@ 0x2000
 80217cc:	6830      	ldr	r0, [r6, #0]
 80217ce:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80217d2:	f7fe f88a 	bl	801f8ea <os_rcrsv_mutex_wait>
 80217d6:	7a28      	ldrb	r0, [r5, #8]
 80217d8:	b160      	cbz	r0, 80217f4 <emngr_process_event+0x52>
 80217da:	4620      	mov	r0, r4
 80217dc:	f7ff ffbd 	bl	802175a <emngr_get_event>
 80217e0:	6831      	ldr	r1, [r6, #0]
 80217e2:	4604      	mov	r4, r0
 80217e4:	4608      	mov	r0, r1
 80217e6:	f7fe f886 	bl	801f8f6 <os_rcrsv_mutex_release>
 80217ea:	68e9      	ldr	r1, [r5, #12]
 80217ec:	b129      	cbz	r1, 80217fa <emngr_process_event+0x58>
 80217ee:	4620      	mov	r0, r4
 80217f0:	4788      	blx	r1
 80217f2:	e002      	b.n	80217fa <emngr_process_event+0x58>
 80217f4:	6830      	ldr	r0, [r6, #0]
 80217f6:	f7fe f87e 	bl	801f8f6 <os_rcrsv_mutex_release>
 80217fa:	2400      	movs	r4, #0
 80217fc:	2021      	movs	r0, #33	@ 0x21
 80217fe:	f7fe f859 	bl	801f8b4 <bsp_debug_gpio_clear>
 8021802:	4620      	mov	r0, r4
 8021804:	bd70      	pop	{r4, r5, r6, pc}

08021806 <emngr_get_handle_events>:
 8021806:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 802180a:	f247 2104 	movw	r1, #29188	@ 0x7204
 802180e:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8021812:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 8021816:	7a00      	ldrb	r0, [r0, #8]
 8021818:	4770      	bx	lr

0802181a <emngr_set_event_handle_busy>:
 802181a:	b5b0      	push	{r4, r5, r7, lr}
 802181c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8021820:	f247 2204 	movw	r2, #29188	@ 0x7204
 8021824:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8021828:	eb02 0580 	add.w	r5, r2, r0, lsl #2
 802182c:	460c      	mov	r4, r1
 802182e:	7c68      	ldrb	r0, [r5, #17]
 8021830:	fab1 f181 	clz	r1, r1
 8021834:	fab0 f080 	clz	r0, r0
 8021838:	0940      	lsrs	r0, r0, #5
 802183a:	0949      	lsrs	r1, r1, #5
 802183c:	4308      	orrs	r0, r1
 802183e:	2101      	movs	r1, #1
 8021840:	f7fd ffef 	bl	801f822 <bsp_assert>
 8021844:	746c      	strb	r4, [r5, #17]
 8021846:	b104      	cbz	r4, 802184a <emngr_set_event_handle_busy+0x30>
 8021848:	bdb0      	pop	{r4, r5, r7, pc}
 802184a:	f247 20d0 	movw	r0, #29392	@ 0x72d0
 802184e:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8021852:	6800      	ldr	r0, [r0, #0]
 8021854:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8021858:	f7fe b857 	b.w	801f90a <os_semaphore_release>

0802185c <emngr_handle_all_events>:
 802185c:	b5b0      	push	{r4, r5, r7, lr}
 802185e:	2020      	movs	r0, #32
 8021860:	f7fe f826 	bl	801f8b0 <bsp_debug_gpio_set>
 8021864:	f247 20d0 	movw	r0, #29392	@ 0x72d0
 8021868:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 802186c:	6800      	ldr	r0, [r0, #0]
 802186e:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8021872:	f7fe f848 	bl	801f906 <os_semaphore_wait>
 8021876:	f247 2004 	movw	r0, #29188	@ 0x7204
 802187a:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 802187e:	f100 0408 	add.w	r4, r0, #8
 8021882:	2500      	movs	r5, #0
 8021884:	7820      	ldrb	r0, [r4, #0]
 8021886:	b138      	cbz	r0, 8021898 <emngr_handle_all_events+0x3c>
 8021888:	b2e8      	uxtb	r0, r5
 802188a:	f7ff ff8a 	bl	80217a2 <emngr_process_event>
 802188e:	0600      	lsls	r0, r0, #24
 8021890:	d007      	beq.n	80218a2 <emngr_handle_all_events+0x46>
 8021892:	2d09      	cmp	r5, #9
 8021894:	d302      	bcc.n	802189c <emngr_handle_all_events+0x40>
 8021896:	e004      	b.n	80218a2 <emngr_handle_all_events+0x46>
 8021898:	2d08      	cmp	r5, #8
 802189a:	d802      	bhi.n	80218a2 <emngr_handle_all_events+0x46>
 802189c:	3501      	adds	r5, #1
 802189e:	3414      	adds	r4, #20
 80218a0:	e7f0      	b.n	8021884 <emngr_handle_all_events+0x28>
 80218a2:	2020      	movs	r0, #32
 80218a4:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80218a8:	f7fe b804 	b.w	801f8b4 <bsp_debug_gpio_clear>

080218ac <emngr_handle_event>:
 80218ac:	b5b0      	push	{r4, r5, r7, lr}
 80218ae:	f247 25d0 	movw	r5, #29392	@ 0x72d0
 80218b2:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 80218b6:	6829      	ldr	r1, [r5, #0]
 80218b8:	4604      	mov	r4, r0
 80218ba:	4608      	mov	r0, r1
 80218bc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80218c0:	f7fe f821 	bl	801f906 <os_semaphore_wait>
 80218c4:	eb04 0084 	add.w	r0, r4, r4, lsl #2
 80218c8:	f247 2104 	movw	r1, #29188	@ 0x7204
 80218cc:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 80218d0:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 80218d4:	7a00      	ldrb	r0, [r0, #8]
 80218d6:	b190      	cbz	r0, 80218fe <emngr_handle_event+0x52>
 80218d8:	4620      	mov	r0, r4
 80218da:	f7ff ff62 	bl	80217a2 <emngr_process_event>
 80218de:	f247 24d4 	movw	r4, #29396	@ 0x72d4
 80218e2:	f2c2 0400 	movt	r4, #8192	@ 0x2000
 80218e6:	7820      	ldrb	r0, [r4, #0]
 80218e8:	b140      	cbz	r0, 80218fc <emngr_handle_event+0x50>
 80218ea:	bf00      	nop
 80218ec:	6828      	ldr	r0, [r5, #0]
 80218ee:	f7fe f80c 	bl	801f90a <os_semaphore_release>
 80218f2:	7820      	ldrb	r0, [r4, #0]
 80218f4:	3801      	subs	r0, #1
 80218f6:	0601      	lsls	r1, r0, #24
 80218f8:	7020      	strb	r0, [r4, #0]
 80218fa:	d1f7      	bne.n	80218ec <emngr_handle_event+0x40>
 80218fc:	bdb0      	pop	{r4, r5, r7, pc}
 80218fe:	f247 20d4 	movw	r0, #29396	@ 0x72d4
 8021902:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8021906:	7801      	ldrb	r1, [r0, #0]
 8021908:	3101      	adds	r1, #1
 802190a:	7001      	strb	r1, [r0, #0]
 802190c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08021910 <emngr_process_conditional_event>:
 8021910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021914:	b081      	sub	sp, #4
 8021916:	4607      	mov	r7, r0
 8021918:	2003      	movs	r0, #3
 802191a:	469a      	mov	sl, r3
 802191c:	4615      	mov	r5, r2
 802191e:	4688      	mov	r8, r1
 8021920:	f7fd ffdd 	bl	801f8de <disable_specific_irq>
 8021924:	eb07 0087 	add.w	r0, r7, r7, lsl #2
 8021928:	f247 2904 	movw	r9, #29188	@ 0x7204
 802192c:	f2c2 0900 	movt	r9, #8192	@ 0x2000
 8021930:	f859 4020 	ldr.w	r4, [r9, r0, lsl #2]
 8021934:	b31c      	cbz	r4, 802197e <emngr_process_conditional_event+0x6e>
 8021936:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 802193a:	2600      	movs	r6, #0
 802193c:	f100 0b0c 	add.w	fp, r0, #12
 8021940:	4627      	mov	r7, r4
 8021942:	e9d4 0400 	ldrd	r0, r4, [r4]
 8021946:	4629      	mov	r1, r5
 8021948:	47d0      	blx	sl
 802194a:	2801      	cmp	r0, #1
 802194c:	d114      	bne.n	8021978 <emngr_process_conditional_event+0x68>
 802194e:	f8db 0000 	ldr.w	r0, [fp]
 8021952:	b188      	cbz	r0, 8021978 <emngr_process_conditional_event+0x68>
 8021954:	f8d9 00c8 	ldr.w	r0, [r9, #200]	@ 0xc8
 8021958:	683e      	ldr	r6, [r7, #0]
 802195a:	3801      	subs	r0, #1
 802195c:	f8c9 00c8 	str.w	r0, [r9, #200]	@ 0xc8
 8021960:	4638      	mov	r0, r7
 8021962:	f000 f8f1 	bl	8021b48 <queue_delete>
 8021966:	f8db 1000 	ldr.w	r1, [fp]
 802196a:	4630      	mov	r0, r6
 802196c:	4788      	blx	r1
 802196e:	f1b8 0f01 	cmp.w	r8, #1
 8021972:	f04f 0601 	mov.w	r6, #1
 8021976:	d003      	beq.n	8021980 <emngr_process_conditional_event+0x70>
 8021978:	2c00      	cmp	r4, #0
 802197a:	d1e1      	bne.n	8021940 <emngr_process_conditional_event+0x30>
 802197c:	e000      	b.n	8021980 <emngr_process_conditional_event+0x70>
 802197e:	2600      	movs	r6, #0
 8021980:	2003      	movs	r0, #3
 8021982:	f7fd ffaa 	bl	801f8da <enable_specific_irq>
 8021986:	b2f0      	uxtb	r0, r6
 8021988:	b001      	add	sp, #4
 802198a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08021990 <emngr_remove_conditional_event>:
 8021990:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8021994:	b081      	sub	sp, #4
 8021996:	4607      	mov	r7, r0
 8021998:	2003      	movs	r0, #3
 802199a:	461c      	mov	r4, r3
 802199c:	4615      	mov	r5, r2
 802199e:	4688      	mov	r8, r1
 80219a0:	f7fd ff9d 	bl	801f8de <disable_specific_irq>
 80219a4:	eb07 0087 	add.w	r0, r7, r7, lsl #2
 80219a8:	f247 2904 	movw	r9, #29188	@ 0x7204
 80219ac:	f2c2 0900 	movt	r9, #8192	@ 0x2000
 80219b0:	f859 7020 	ldr.w	r7, [r9, r0, lsl #2]
 80219b4:	b1a7      	cbz	r7, 80219e0 <emngr_remove_conditional_event+0x50>
 80219b6:	bf00      	nop
 80219b8:	e9d7 0600 	ldrd	r0, r6, [r7]
 80219bc:	4629      	mov	r1, r5
 80219be:	47a0      	blx	r4
 80219c0:	2801      	cmp	r0, #1
 80219c2:	d10a      	bne.n	80219da <emngr_remove_conditional_event+0x4a>
 80219c4:	f8d9 00c8 	ldr.w	r0, [r9, #200]	@ 0xc8
 80219c8:	3801      	subs	r0, #1
 80219ca:	f8c9 00c8 	str.w	r0, [r9, #200]	@ 0xc8
 80219ce:	4638      	mov	r0, r7
 80219d0:	f000 f8ba 	bl	8021b48 <queue_delete>
 80219d4:	f1b8 0f01 	cmp.w	r8, #1
 80219d8:	d002      	beq.n	80219e0 <emngr_remove_conditional_event+0x50>
 80219da:	2e00      	cmp	r6, #0
 80219dc:	4637      	mov	r7, r6
 80219de:	d1eb      	bne.n	80219b8 <emngr_remove_conditional_event+0x28>
 80219e0:	2003      	movs	r0, #3
 80219e2:	f7fd ff7a 	bl	801f8da <enable_specific_irq>
 80219e6:	2000      	movs	r0, #0
 80219e8:	b001      	add	sp, #4
 80219ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

080219f0 <emngr_can_mcu_sleep>:
 80219f0:	b510      	push	{r4, lr}
 80219f2:	f247 2e04 	movw	lr, #29188	@ 0x7204
 80219f6:	f2c2 0e00 	movt	lr, #8192	@ 0x2000
 80219fa:	f8de c0c8 	ldr.w	ip, [lr, #200]	@ 0xc8
 80219fe:	f1bc 0f00 	cmp.w	ip, #0
 8021a02:	bf04      	itt	eq
 8021a04:	2001      	moveq	r0, #1
 8021a06:	bd10      	popeq	{r4, pc}
 8021a08:	2200      	movs	r2, #0
 8021a0a:	a30b      	add	r3, pc, #44	@ (adr r3, 8021a38 <emngr_can_mcu_sleep+0x48>)
 8021a0c:	2000      	movs	r0, #0
 8021a0e:	bf00      	nop
 8021a10:	5c99      	ldrb	r1, [r3, r2]
 8021a12:	3201      	adds	r2, #1
 8021a14:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8021a18:	eb0e 0181 	add.w	r1, lr, r1, lsl #2
 8021a1c:	7c4c      	ldrb	r4, [r1, #17]
 8021a1e:	2c01      	cmp	r4, #1
 8021a20:	bf04      	itt	eq
 8021a22:	7a09      	ldrbeq	r1, [r1, #8]
 8021a24:	4408      	addeq	r0, r1
 8021a26:	2a03      	cmp	r2, #3
 8021a28:	d1f2      	bne.n	8021a10 <emngr_can_mcu_sleep+0x20>
 8021a2a:	b2c0      	uxtb	r0, r0
 8021a2c:	ebac 0000 	sub.w	r0, ip, r0
 8021a30:	fab0 f080 	clz	r0, r0
 8021a34:	0940      	lsrs	r0, r0, #5
 8021a36:	bd10      	pop	{r4, pc}
 8021a38:	00080706 	.word	0x00080706

08021a3c <os_mem_pool_alloc>:
 8021a3c:	f002 bd39 	b.w	80244b2 <mem_pool_alloc>

08021a40 <os_mem_pool_free>:
 8021a40:	f002 bd5e 	b.w	8024500 <mem_pool_free>

08021a44 <os_shrd_mem_alloc>:
 8021a44:	b580      	push	{r7, lr}
 8021a46:	f002 fd34 	bl	80244b2 <mem_pool_alloc>
 8021a4a:	2800      	cmp	r0, #0
 8021a4c:	bf18      	it	ne
 8021a4e:	3004      	addne	r0, #4
 8021a50:	bd80      	pop	{r7, pc}
	...

08021a54 <queue_free>:
 8021a54:	b510      	push	{r4, lr}
 8021a56:	b138      	cbz	r0, 8021a68 <queue_free+0x14>
 8021a58:	6800      	ldr	r0, [r0, #0]
 8021a5a:	b128      	cbz	r0, 8021a68 <queue_free+0x14>
 8021a5c:	6844      	ldr	r4, [r0, #4]
 8021a5e:	f7ff ffef 	bl	8021a40 <os_mem_pool_free>
 8021a62:	2c00      	cmp	r4, #0
 8021a64:	4620      	mov	r0, r4
 8021a66:	d1f9      	bne.n	8021a5c <queue_free+0x8>
 8021a68:	bd10      	pop	{r4, pc}

08021a6a <queue_enqueue>:
 8021a6a:	b570      	push	{r4, r5, r6, lr}
 8021a6c:	4604      	mov	r4, r0
 8021a6e:	f247 30f4 	movw	r0, #29684	@ 0x73f4
 8021a72:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8021a76:	460e      	mov	r6, r1
 8021a78:	f7ff ffe0 	bl	8021a3c <os_mem_pool_alloc>
 8021a7c:	4605      	mov	r5, r0
 8021a7e:	b1a8      	cbz	r0, 8021aac <queue_enqueue+0x42>
 8021a80:	2000      	movs	r0, #0
 8021a82:	e9c5 6000 	strd	r6, r0, [r5]
 8021a86:	60ac      	str	r4, [r5, #8]
 8021a88:	f7fd ff2b 	bl	801f8e2 <os_disable_isr>
 8021a8c:	4620      	mov	r0, r4
 8021a8e:	f850 1b04 	ldr.w	r1, [r0], #4
 8021a92:	2900      	cmp	r1, #0
 8021a94:	bf19      	ittee	ne
 8021a96:	6801      	ldrne	r1, [r0, #0]
 8021a98:	3104      	addne	r1, #4
 8021a9a:	4601      	moveq	r1, r0
 8021a9c:	4620      	moveq	r0, r4
 8021a9e:	600d      	str	r5, [r1, #0]
 8021aa0:	7a21      	ldrb	r1, [r4, #8]
 8021aa2:	6005      	str	r5, [r0, #0]
 8021aa4:	1c48      	adds	r0, r1, #1
 8021aa6:	7220      	strb	r0, [r4, #8]
 8021aa8:	f7fd ff1d 	bl	801f8e6 <os_enable_isr>
 8021aac:	4628      	mov	r0, r5
 8021aae:	bd70      	pop	{r4, r5, r6, pc}

08021ab0 <queue_insert_frst>:
 8021ab0:	b570      	push	{r4, r5, r6, lr}
 8021ab2:	4604      	mov	r4, r0
 8021ab4:	f247 30f4 	movw	r0, #29684	@ 0x73f4
 8021ab8:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8021abc:	460e      	mov	r6, r1
 8021abe:	f7ff ffbd 	bl	8021a3c <os_mem_pool_alloc>
 8021ac2:	4605      	mov	r5, r0
 8021ac4:	b1c0      	cbz	r0, 8021af8 <queue_insert_frst+0x48>
 8021ac6:	2000      	movs	r0, #0
 8021ac8:	e9c5 6000 	strd	r6, r0, [r5]
 8021acc:	f248 16b4 	movw	r6, #33204	@ 0x81b4
 8021ad0:	f2c2 0600 	movt	r6, #8192	@ 0x2000
 8021ad4:	6830      	ldr	r0, [r6, #0]
 8021ad6:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8021ada:	60ac      	str	r4, [r5, #8]
 8021adc:	f7fd ff05 	bl	801f8ea <os_rcrsv_mutex_wait>
 8021ae0:	6820      	ldr	r0, [r4, #0]
 8021ae2:	2800      	cmp	r0, #0
 8021ae4:	bf14      	ite	ne
 8021ae6:	6068      	strne	r0, [r5, #4]
 8021ae8:	6065      	streq	r5, [r4, #4]
 8021aea:	7a20      	ldrb	r0, [r4, #8]
 8021aec:	6025      	str	r5, [r4, #0]
 8021aee:	1c41      	adds	r1, r0, #1
 8021af0:	6830      	ldr	r0, [r6, #0]
 8021af2:	7221      	strb	r1, [r4, #8]
 8021af4:	f7fd feff 	bl	801f8f6 <os_rcrsv_mutex_release>
 8021af8:	4628      	mov	r0, r5
 8021afa:	bd70      	pop	{r4, r5, r6, pc}

08021afc <queue_dequeue>:
 8021afc:	b570      	push	{r4, r5, r6, lr}
 8021afe:	f248 16b4 	movw	r6, #33204	@ 0x81b4
 8021b02:	f2c2 0600 	movt	r6, #8192	@ 0x2000
 8021b06:	6831      	ldr	r1, [r6, #0]
 8021b08:	4605      	mov	r5, r0
 8021b0a:	4608      	mov	r0, r1
 8021b0c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8021b10:	f7fd feeb 	bl	801f8ea <os_rcrsv_mutex_wait>
 8021b14:	682c      	ldr	r4, [r5, #0]
 8021b16:	b18c      	cbz	r4, 8021b3c <queue_dequeue+0x40>
 8021b18:	6868      	ldr	r0, [r5, #4]
 8021b1a:	4284      	cmp	r4, r0
 8021b1c:	bf12      	itee	ne
 8021b1e:	6860      	ldrne	r0, [r4, #4]
 8021b20:	2000      	moveq	r0, #0
 8021b22:	6068      	streq	r0, [r5, #4]
 8021b24:	7a29      	ldrb	r1, [r5, #8]
 8021b26:	6028      	str	r0, [r5, #0]
 8021b28:	6830      	ldr	r0, [r6, #0]
 8021b2a:	3901      	subs	r1, #1
 8021b2c:	7229      	strb	r1, [r5, #8]
 8021b2e:	f7fd fee2 	bl	801f8f6 <os_rcrsv_mutex_release>
 8021b32:	6825      	ldr	r5, [r4, #0]
 8021b34:	4620      	mov	r0, r4
 8021b36:	f7ff ff83 	bl	8021a40 <os_mem_pool_free>
 8021b3a:	e003      	b.n	8021b44 <queue_dequeue+0x48>
 8021b3c:	6830      	ldr	r0, [r6, #0]
 8021b3e:	f7fd feda 	bl	801f8f6 <os_rcrsv_mutex_release>
 8021b42:	2500      	movs	r5, #0
 8021b44:	4628      	mov	r0, r5
 8021b46:	bd70      	pop	{r4, r5, r6, pc}

08021b48 <queue_delete>:
 8021b48:	b5b0      	push	{r4, r5, r7, lr}
 8021b4a:	b1c0      	cbz	r0, 8021b7e <queue_delete+0x36>
 8021b4c:	f248 15b4 	movw	r5, #33204	@ 0x81b4
 8021b50:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 8021b54:	4604      	mov	r4, r0
 8021b56:	6828      	ldr	r0, [r5, #0]
 8021b58:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8021b5c:	f7fd fec5 	bl	801f8ea <os_rcrsv_mutex_wait>
 8021b60:	68a1      	ldr	r1, [r4, #8]
 8021b62:	680a      	ldr	r2, [r1, #0]
 8021b64:	42a2      	cmp	r2, r4
 8021b66:	d00c      	beq.n	8021b82 <queue_delete+0x3a>
 8021b68:	4610      	mov	r0, r2
 8021b6a:	6852      	ldr	r2, [r2, #4]
 8021b6c:	42a2      	cmp	r2, r4
 8021b6e:	d1fb      	bne.n	8021b68 <queue_delete+0x20>
 8021b70:	684a      	ldr	r2, [r1, #4]
 8021b72:	6863      	ldr	r3, [r4, #4]
 8021b74:	42a2      	cmp	r2, r4
 8021b76:	6043      	str	r3, [r0, #4]
 8021b78:	d109      	bne.n	8021b8e <queue_delete+0x46>
 8021b7a:	6048      	str	r0, [r1, #4]
 8021b7c:	e007      	b.n	8021b8e <queue_delete+0x46>
 8021b7e:	2500      	movs	r5, #0
 8021b80:	e00f      	b.n	8021ba2 <queue_delete+0x5a>
 8021b82:	684a      	ldr	r2, [r1, #4]
 8021b84:	6860      	ldr	r0, [r4, #4]
 8021b86:	42a2      	cmp	r2, r4
 8021b88:	6008      	str	r0, [r1, #0]
 8021b8a:	bf08      	it	eq
 8021b8c:	6048      	streq	r0, [r1, #4]
 8021b8e:	7a08      	ldrb	r0, [r1, #8]
 8021b90:	1e42      	subs	r2, r0, #1
 8021b92:	6828      	ldr	r0, [r5, #0]
 8021b94:	720a      	strb	r2, [r1, #8]
 8021b96:	f7fd feae 	bl	801f8f6 <os_rcrsv_mutex_release>
 8021b9a:	6825      	ldr	r5, [r4, #0]
 8021b9c:	4620      	mov	r0, r4
 8021b9e:	f7ff ff4f 	bl	8021a40 <os_mem_pool_free>
 8021ba2:	4628      	mov	r0, r5
 8021ba4:	bdb0      	pop	{r4, r5, r7, pc}

08021ba6 <os_timer_rgstr_timer_activity_cbk>:
 8021ba6:	f247 21d8 	movw	r1, #29400	@ 0x72d8
 8021baa:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8021bae:	6008      	str	r0, [r1, #0]
 8021bb0:	4770      	bx	lr
	...

08021bb4 <os_timer_get_current_time>:
 8021bb4:	b570      	push	{r4, r5, r6, lr}
 8021bb6:	f004 fcc2 	bl	802653e <get_current_time>
 8021bba:	f248 16b4 	movw	r6, #33204	@ 0x81b4
 8021bbe:	f2c2 0600 	movt	r6, #8192	@ 0x2000
 8021bc2:	6831      	ldr	r1, [r6, #0]
 8021bc4:	4604      	mov	r4, r0
 8021bc6:	4608      	mov	r0, r1
 8021bc8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8021bcc:	f7fd fe8d 	bl	801f8ea <os_rcrsv_mutex_wait>
 8021bd0:	f247 25e4 	movw	r5, #29412	@ 0x72e4
 8021bd4:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 8021bd8:	6828      	ldr	r0, [r5, #0]
 8021bda:	4284      	cmp	r4, r0
 8021bdc:	d211      	bcs.n	8021c02 <os_timer_get_current_time+0x4e>
 8021bde:	f247 20dc 	movw	r0, #29404	@ 0x72dc
 8021be2:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8021be6:	bf00      	nop
 8021be8:	6800      	ldr	r0, [r0, #0]
 8021bea:	b120      	cbz	r0, 8021bf6 <os_timer_get_current_time+0x42>
 8021bec:	8a81      	ldrh	r1, [r0, #20]
 8021bee:	f021 0101 	bic.w	r1, r1, #1
 8021bf2:	8281      	strh	r1, [r0, #20]
 8021bf4:	e7f8      	b.n	8021be8 <os_timer_get_current_time+0x34>
 8021bf6:	f247 20fc 	movw	r0, #29436	@ 0x72fc
 8021bfa:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8021bfe:	2100      	movs	r1, #0
 8021c00:	6001      	str	r1, [r0, #0]
 8021c02:	6830      	ldr	r0, [r6, #0]
 8021c04:	f7fd fe77 	bl	801f8f6 <os_rcrsv_mutex_release>
 8021c08:	4620      	mov	r0, r4
 8021c0a:	2100      	movs	r1, #0
 8021c0c:	602c      	str	r4, [r5, #0]
 8021c0e:	bd70      	pop	{r4, r5, r6, pc}

08021c10 <os_timer_init>:
 8021c10:	f247 20dc 	movw	r0, #29404	@ 0x72dc
 8021c14:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8021c18:	2200      	movs	r2, #0
 8021c1a:	6002      	str	r2, [r0, #0]
 8021c1c:	f641 4035 	movw	r0, #7221	@ 0x1c35
 8021c20:	f247 23d8 	movw	r3, #29400	@ 0x72d8
 8021c24:	f6c0 0002 	movt	r0, #2050	@ 0x802
 8021c28:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8021c2c:	2105      	movs	r1, #5
 8021c2e:	601a      	str	r2, [r3, #0]
 8021c30:	f002 bd7b 	b.w	802472a <intr_hndlr_reg>

08021c34 <osTimerHandler>:
 8021c34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021c38:	f248 18b4 	movw	r8, #33204	@ 0x81b4
 8021c3c:	f2c2 0800 	movt	r8, #8192	@ 0x2000
 8021c40:	f8d8 0000 	ldr.w	r0, [r8]
 8021c44:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8021c48:	f7fd fe4f 	bl	801f8ea <os_rcrsv_mutex_wait>
 8021c4c:	f247 29dc 	movw	r9, #29404	@ 0x72dc
 8021c50:	f2c2 0900 	movt	r9, #8192	@ 0x2000
 8021c54:	f8d9 5000 	ldr.w	r5, [r9]
 8021c58:	b35d      	cbz	r5, 8021cb2 <osTimerHandler+0x7e>
 8021c5a:	f04f 0a01 	mov.w	sl, #1
 8021c5e:	462e      	mov	r6, r5
 8021c60:	8ab0      	ldrh	r0, [r6, #20]
 8021c62:	68b4      	ldr	r4, [r6, #8]
 8021c64:	f000 0701 	and.w	r7, r0, #1
 8021c68:	f7ff ffa4 	bl	8021bb4 <os_timer_get_current_time>
 8021c6c:	3006      	adds	r0, #6
 8021c6e:	f141 0100 	adc.w	r1, r1, #0
 8021c72:	1b00      	subs	r0, r0, r4
 8021c74:	eb71 0007 	sbcs.w	r0, r1, r7
 8021c78:	d31c      	bcc.n	8021cb4 <osTimerHandler+0x80>
 8021c7a:	e9d6 1003 	ldrd	r1, r0, [r6, #12]
 8021c7e:	6834      	ldr	r4, [r6, #0]
 8021c80:	f886 a016 	strb.w	sl, [r6, #22]
 8021c84:	4788      	blx	r1
 8021c86:	7df0      	ldrb	r0, [r6, #23]
 8021c88:	07c0      	lsls	r0, r0, #31
 8021c8a:	d008      	beq.n	8021c9e <osTimerHandler+0x6a>
 8021c8c:	8ab0      	ldrh	r0, [r6, #20]
 8021c8e:	f100 0140 	add.w	r1, r0, #64	@ 0x40
 8021c92:	f401 61f8 	and.w	r1, r1, #1984	@ 0x7c0
 8021c96:	f420 60f8 	bic.w	r0, r0, #1984	@ 0x7c0
 8021c9a:	4408      	add	r0, r1
 8021c9c:	82b0      	strh	r0, [r6, #20]
 8021c9e:	6830      	ldr	r0, [r6, #0]
 8021ca0:	f8d9 1000 	ldr.w	r1, [r9]
 8021ca4:	42a0      	cmp	r0, r4
 8021ca6:	bf18      	it	ne
 8021ca8:	460d      	movne	r5, r1
 8021caa:	2c00      	cmp	r4, #0
 8021cac:	4626      	mov	r6, r4
 8021cae:	d1d7      	bne.n	8021c60 <osTimerHandler+0x2c>
 8021cb0:	e000      	b.n	8021cb4 <osTimerHandler+0x80>
 8021cb2:	2500      	movs	r5, #0
 8021cb4:	f8d8 0000 	ldr.w	r0, [r8]
 8021cb8:	f7fd fe1d 	bl	801f8f6 <os_rcrsv_mutex_release>
 8021cbc:	f000 f940 	bl	8021f40 <remove_stopped_and_expired_timers>
 8021cc0:	f8d8 0000 	ldr.w	r0, [r8]
 8021cc4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8021cc8:	f7fd fe0f 	bl	801f8ea <os_rcrsv_mutex_wait>
 8021ccc:	f8d9 7000 	ldr.w	r7, [r9]
 8021cd0:	b195      	cbz	r5, 8021cf8 <osTimerHandler+0xc4>
 8021cd2:	42bd      	cmp	r5, r7
 8021cd4:	d010      	beq.n	8021cf8 <osTimerHandler+0xc4>
 8021cd6:	bf00      	nop
 8021cd8:	7da9      	ldrb	r1, [r5, #22]
 8021cda:	b159      	cbz	r1, 8021cf4 <osTimerHandler+0xc0>
 8021cdc:	7dea      	ldrb	r2, [r5, #23]
 8021cde:	4628      	mov	r0, r5
 8021ce0:	682d      	ldr	r5, [r5, #0]
 8021ce2:	07d2      	lsls	r2, r2, #31
 8021ce4:	d004      	beq.n	8021cf0 <osTimerHandler+0xbc>
 8021ce6:	2901      	cmp	r1, #1
 8021ce8:	d102      	bne.n	8021cf0 <osTimerHandler+0xbc>
 8021cea:	6841      	ldr	r1, [r0, #4]
 8021cec:	f000 f954 	bl	8021f98 <add_timer_to_List>
 8021cf0:	2d00      	cmp	r5, #0
 8021cf2:	d1f1      	bne.n	8021cd8 <osTimerHandler+0xa4>
 8021cf4:	f8d9 7000 	ldr.w	r7, [r9]
 8021cf8:	2f00      	cmp	r7, #0
 8021cfa:	d047      	beq.n	8021d8c <osTimerHandler+0x158>
 8021cfc:	2097      	movs	r0, #151	@ 0x97
 8021cfe:	f7fd fdd7 	bl	801f8b0 <bsp_debug_gpio_set>
 8021d02:	f8d9 0000 	ldr.w	r0, [r9]
 8021d06:	b3e0      	cbz	r0, 8021d82 <osTimerHandler+0x14e>
 8021d08:	f247 24fc 	movw	r4, #29436	@ 0x72fc
 8021d0c:	f2c2 0400 	movt	r4, #8192	@ 0x2000
 8021d10:	2500      	movs	r5, #0
 8021d12:	bf00      	nop
 8021d14:	f7ff ff4e 	bl	8021bb4 <os_timer_get_current_time>
 8021d18:	6822      	ldr	r2, [r4, #0]
 8021d1a:	3203      	adds	r2, #3
 8021d1c:	f145 0300 	adc.w	r3, r5, #0
 8021d20:	1a10      	subs	r0, r2, r0
 8021d22:	eb73 0001 	sbcs.w	r0, r3, r1
 8021d26:	d2f5      	bcs.n	8021d14 <osTimerHandler+0xe0>
 8021d28:	7db9      	ldrb	r1, [r7, #22]
 8021d2a:	f8d9 0000 	ldr.w	r0, [r9]
 8021d2e:	2900      	cmp	r1, #0
 8021d30:	bf18      	it	ne
 8021d32:	4607      	movne	r7, r0
 8021d34:	b32f      	cbz	r7, 8021d82 <osTimerHandler+0x14e>
 8021d36:	6881      	ldr	r1, [r0, #8]
 8021d38:	68b8      	ldr	r0, [r7, #8]
 8021d3a:	4281      	cmp	r1, r0
 8021d3c:	d321      	bcc.n	8021d82 <osTimerHandler+0x14e>
 8021d3e:	7dfa      	ldrb	r2, [r7, #23]
 8021d40:	8ab9      	ldrh	r1, [r7, #20]
 8021d42:	07d2      	lsls	r2, r2, #31
 8021d44:	d019      	beq.n	8021d7a <osTimerHandler+0x146>
 8021d46:	f3c1 0244 	ubfx	r2, r1, #1, #5
 8021d4a:	f3c1 1384 	ubfx	r3, r1, #6, #5
 8021d4e:	fb02 f203 	mul.w	r2, r2, r3
 8021d52:	eb02 22d1 	add.w	r2, r2, r1, lsr #11
 8021d56:	2a1f      	cmp	r2, #31
 8021d58:	d30f      	bcc.n	8021d7a <osTimerHandler+0x146>
 8021d5a:	084a      	lsrs	r2, r1, #1
 8021d5c:	098b      	lsrs	r3, r1, #6
 8021d5e:	fb03 f202 	mul.w	r2, r3, r2
 8021d62:	3001      	adds	r0, #1
 8021d64:	eb01 22c2 	add.w	r2, r1, r2, lsl #11
 8021d68:	f001 013f 	and.w	r1, r1, #63	@ 0x3f
 8021d6c:	f402 4278 	and.w	r2, r2, #63488	@ 0xf800
 8021d70:	440a      	add	r2, r1
 8021d72:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8021d76:	60b8      	str	r0, [r7, #8]
 8021d78:	82ba      	strh	r2, [r7, #20]
 8021d7a:	f001 0101 	and.w	r1, r1, #1
 8021d7e:	f004 fbc9 	bl	8026514 <hw_ll_timer_start>
 8021d82:	2097      	movs	r0, #151	@ 0x97
 8021d84:	f7fd fd96 	bl	801f8b4 <bsp_debug_gpio_clear>
 8021d88:	2400      	movs	r4, #0
 8021d8a:	e001      	b.n	8021d90 <osTimerHandler+0x15c>
 8021d8c:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8021d90:	f247 20d8 	movw	r0, #29400	@ 0x72d8
 8021d94:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8021d98:	6801      	ldr	r1, [r0, #0]
 8021d9a:	b181      	cbz	r1, 8021dbe <osTimerHandler+0x18a>
 8021d9c:	f247 20dc 	movw	r0, #29404	@ 0x72dc
 8021da0:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8021da4:	2202      	movs	r2, #2
 8021da6:	4603      	mov	r3, r0
 8021da8:	681b      	ldr	r3, [r3, #0]
 8021daa:	3a01      	subs	r2, #1
 8021dac:	2b00      	cmp	r3, #0
 8021dae:	d1fb      	bne.n	8021da8 <osTimerHandler+0x174>
 8021db0:	b11a      	cbz	r2, 8021dba <osTimerHandler+0x186>
 8021db2:	6800      	ldr	r0, [r0, #0]
 8021db4:	b918      	cbnz	r0, 8021dbe <osTimerHandler+0x18a>
 8021db6:	2000      	movs	r0, #0
 8021db8:	e000      	b.n	8021dbc <osTimerHandler+0x188>
 8021dba:	2002      	movs	r0, #2
 8021dbc:	4788      	blx	r1
 8021dbe:	f8d8 0000 	ldr.w	r0, [r8]
 8021dc2:	f7fd fd98 	bl	801f8f6 <os_rcrsv_mutex_release>
 8021dc6:	4620      	mov	r0, r4
 8021dc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08021dcc <os_timer_create>:
 8021dcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021dce:	b081      	sub	sp, #4
 8021dd0:	4606      	mov	r6, r0
 8021dd2:	2053      	movs	r0, #83	@ 0x53
 8021dd4:	4615      	mov	r5, r2
 8021dd6:	460f      	mov	r7, r1
 8021dd8:	f7fd fd6a 	bl	801f8b0 <bsp_debug_gpio_set>
 8021ddc:	f247 704c 	movw	r0, #30540	@ 0x774c
 8021de0:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8021de4:	f7ff fe2a 	bl	8021a3c <os_mem_pool_alloc>
 8021de8:	b390      	cbz	r0, 8021e50 <os_timer_create+0x84>
 8021dea:	4604      	mov	r4, r0
 8021dec:	b36e      	cbz	r6, 8021e4a <os_timer_create+0x7e>
 8021dee:	2002      	movs	r0, #2
 8021df0:	75a0      	strb	r0, [r4, #22]
 8021df2:	7de0      	ldrb	r0, [r4, #23]
 8021df4:	f007 0101 	and.w	r1, r7, #1
 8021df8:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 8021dfc:	4408      	add	r0, r1
 8021dfe:	75e0      	strb	r0, [r4, #23]
 8021e00:	8aa0      	ldrh	r0, [r4, #20]
 8021e02:	2100      	movs	r1, #0
 8021e04:	e9c4 1602 	strd	r1, r6, [r4, #8]
 8021e08:	f248 16b4 	movw	r6, #33204	@ 0x81b4
 8021e0c:	f000 0001 	and.w	r0, r0, #1
 8021e10:	e9c4 1100 	strd	r1, r1, [r4]
 8021e14:	f2c2 0600 	movt	r6, #8192	@ 0x2000
 8021e18:	82a0      	strh	r0, [r4, #20]
 8021e1a:	6830      	ldr	r0, [r6, #0]
 8021e1c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8021e20:	6125      	str	r5, [r4, #16]
 8021e22:	f7fd fd62 	bl	801f8ea <os_rcrsv_mutex_wait>
 8021e26:	f247 25e0 	movw	r5, #29408	@ 0x72e0
 8021e2a:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 8021e2e:	7828      	ldrb	r0, [r5, #0]
 8021e30:	b938      	cbnz	r0, 8021e42 <os_timer_create+0x76>
 8021e32:	f641 4035 	movw	r0, #7221	@ 0x1c35
 8021e36:	f6c0 0002 	movt	r0, #2050	@ 0x802
 8021e3a:	f004 fb5e 	bl	80264fa <hw_ll_timer_init>
 8021e3e:	2001      	movs	r0, #1
 8021e40:	7028      	strb	r0, [r5, #0]
 8021e42:	6830      	ldr	r0, [r6, #0]
 8021e44:	f7fd fd57 	bl	801f8f6 <os_rcrsv_mutex_release>
 8021e48:	e003      	b.n	8021e52 <os_timer_create+0x86>
 8021e4a:	4620      	mov	r0, r4
 8021e4c:	f7ff fdf8 	bl	8021a40 <os_mem_pool_free>
 8021e50:	2400      	movs	r4, #0
 8021e52:	2053      	movs	r0, #83	@ 0x53
 8021e54:	f7fd fd2e 	bl	801f8b4 <bsp_debug_gpio_clear>
 8021e58:	4620      	mov	r0, r4
 8021e5a:	b001      	add	sp, #4
 8021e5c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08021e5e <os_timer_set_prio>:
 8021e5e:	b5b0      	push	{r4, r5, r7, lr}
 8021e60:	460c      	mov	r4, r1
 8021e62:	2101      	movs	r1, #1
 8021e64:	4605      	mov	r5, r0
 8021e66:	2800      	cmp	r0, #0
 8021e68:	bf18      	it	ne
 8021e6a:	2001      	movne	r0, #1
 8021e6c:	f7fd fcd9 	bl	801f822 <bsp_assert>
 8021e70:	7de8      	ldrb	r0, [r5, #23]
 8021e72:	f004 0101 	and.w	r1, r4, #1
 8021e76:	f000 00fd 	and.w	r0, r0, #253	@ 0xfd
 8021e7a:	ea40 0041 	orr.w	r0, r0, r1, lsl #1
 8021e7e:	75e8      	strb	r0, [r5, #23]
 8021e80:	bdb0      	pop	{r4, r5, r7, pc}
	...

08021e84 <os_timer_is_any_near_sw_timer_hg_prio>:
 8021e84:	b570      	push	{r4, r5, r6, lr}
 8021e86:	f247 24dc 	movw	r4, #29404	@ 0x72dc
 8021e8a:	f2c2 0400 	movt	r4, #8192	@ 0x2000
 8021e8e:	bf00      	nop
 8021e90:	6824      	ldr	r4, [r4, #0]
 8021e92:	b194      	cbz	r4, 8021eba <os_timer_is_any_near_sw_timer_hg_prio+0x36>
 8021e94:	8aa0      	ldrh	r0, [r4, #20]
 8021e96:	68a5      	ldr	r5, [r4, #8]
 8021e98:	f000 0601 	and.w	r6, r0, #1
 8021e9c:	f7ff fe8a 	bl	8021bb4 <os_timer_get_current_time>
 8021ea0:	3006      	adds	r0, #6
 8021ea2:	f141 0100 	adc.w	r1, r1, #0
 8021ea6:	1b40      	subs	r0, r0, r5
 8021ea8:	eb71 0006 	sbcs.w	r0, r1, r6
 8021eac:	d305      	bcc.n	8021eba <os_timer_is_any_near_sw_timer_hg_prio+0x36>
 8021eae:	7de0      	ldrb	r0, [r4, #23]
 8021eb0:	0780      	lsls	r0, r0, #30
 8021eb2:	bf44      	itt	mi
 8021eb4:	2001      	movmi	r0, #1
 8021eb6:	bd70      	popmi	{r4, r5, r6, pc}
 8021eb8:	e7ea      	b.n	8021e90 <os_timer_is_any_near_sw_timer_hg_prio+0xc>
 8021eba:	2000      	movs	r0, #0
 8021ebc:	bd70      	pop	{r4, r5, r6, pc}

08021ebe <os_timer_start>:
 8021ebe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021ec0:	b081      	sub	sp, #4
 8021ec2:	b370      	cbz	r0, 8021f22 <os_timer_start+0x64>
 8021ec4:	4604      	mov	r4, r0
 8021ec6:	7d80      	ldrb	r0, [r0, #22]
 8021ec8:	b358      	cbz	r0, 8021f22 <os_timer_start+0x64>
 8021eca:	f248 16b4 	movw	r6, #33204	@ 0x81b4
 8021ece:	f2c2 0600 	movt	r6, #8192	@ 0x2000
 8021ed2:	6830      	ldr	r0, [r6, #0]
 8021ed4:	460d      	mov	r5, r1
 8021ed6:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8021eda:	f7fd fd06 	bl	801f8ea <os_rcrsv_mutex_wait>
 8021ede:	f000 f82f 	bl	8021f40 <remove_stopped_and_expired_timers>
 8021ee2:	7da7      	ldrb	r7, [r4, #22]
 8021ee4:	4620      	mov	r0, r4
 8021ee6:	4629      	mov	r1, r5
 8021ee8:	f000 f856 	bl	8021f98 <add_timer_to_List>
 8021eec:	f247 20d8 	movw	r0, #29400	@ 0x72d8
 8021ef0:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8021ef4:	f247 25dc 	movw	r5, #29404	@ 0x72dc
 8021ef8:	6801      	ldr	r1, [r0, #0]
 8021efa:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 8021efe:	6828      	ldr	r0, [r5, #0]
 8021f00:	b121      	cbz	r1, 8021f0c <os_timer_start+0x4e>
 8021f02:	42a0      	cmp	r0, r4
 8021f04:	d102      	bne.n	8021f0c <os_timer_start+0x4e>
 8021f06:	2001      	movs	r0, #1
 8021f08:	4788      	blx	r1
 8021f0a:	6828      	ldr	r0, [r5, #0]
 8021f0c:	42a0      	cmp	r0, r4
 8021f0e:	d10b      	bne.n	8021f28 <os_timer_start+0x6a>
 8021f10:	2f01      	cmp	r7, #1
 8021f12:	d009      	beq.n	8021f28 <os_timer_start+0x6a>
 8021f14:	8a81      	ldrh	r1, [r0, #20]
 8021f16:	6880      	ldr	r0, [r0, #8]
 8021f18:	f001 0101 	and.w	r1, r1, #1
 8021f1c:	f004 fafa 	bl	8026514 <hw_ll_timer_start>
 8021f20:	e008      	b.n	8021f34 <os_timer_start+0x76>
 8021f22:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8021f26:	e009      	b.n	8021f3c <os_timer_start+0x7e>
 8021f28:	42a0      	cmp	r0, r4
 8021f2a:	bf04      	itt	eq
 8021f2c:	7de1      	ldrbeq	r1, [r4, #23]
 8021f2e:	ea5f 71c1 	movseq.w	r1, r1, lsl #31
 8021f32:	d0ef      	beq.n	8021f14 <os_timer_start+0x56>
 8021f34:	6830      	ldr	r0, [r6, #0]
 8021f36:	f7fd fcde 	bl	801f8f6 <os_rcrsv_mutex_release>
 8021f3a:	2000      	movs	r0, #0
 8021f3c:	b001      	add	sp, #4
 8021f3e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08021f40 <remove_stopped_and_expired_timers>:
 8021f40:	b5b0      	push	{r4, r5, r7, lr}
 8021f42:	f248 15b4 	movw	r5, #33204	@ 0x81b4
 8021f46:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 8021f4a:	6828      	ldr	r0, [r5, #0]
 8021f4c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8021f50:	f7fd fccb 	bl	801f8ea <os_rcrsv_mutex_wait>
 8021f54:	f247 20dc 	movw	r0, #29404	@ 0x72dc
 8021f58:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8021f5c:	6801      	ldr	r1, [r0, #0]
 8021f5e:	b1a9      	cbz	r1, 8021f8c <remove_stopped_and_expired_timers+0x4c>
 8021f60:	2200      	movs	r2, #0
 8021f62:	bf00      	nop
 8021f64:	7d8b      	ldrb	r3, [r1, #22]
 8021f66:	3b01      	subs	r3, #1
 8021f68:	2b01      	cmp	r3, #1
 8021f6a:	460b      	mov	r3, r1
 8021f6c:	d80a      	bhi.n	8021f84 <remove_stopped_and_expired_timers+0x44>
 8021f6e:	6803      	ldr	r3, [r0, #0]
 8021f70:	4299      	cmp	r1, r3
 8021f72:	d003      	beq.n	8021f7c <remove_stopped_and_expired_timers+0x3c>
 8021f74:	4613      	mov	r3, r2
 8021f76:	b912      	cbnz	r2, 8021f7e <remove_stopped_and_expired_timers+0x3e>
 8021f78:	2300      	movs	r3, #0
 8021f7a:	e003      	b.n	8021f84 <remove_stopped_and_expired_timers+0x44>
 8021f7c:	4603      	mov	r3, r0
 8021f7e:	680c      	ldr	r4, [r1, #0]
 8021f80:	601c      	str	r4, [r3, #0]
 8021f82:	4613      	mov	r3, r2
 8021f84:	6809      	ldr	r1, [r1, #0]
 8021f86:	461a      	mov	r2, r3
 8021f88:	2900      	cmp	r1, #0
 8021f8a:	d1eb      	bne.n	8021f64 <remove_stopped_and_expired_timers+0x24>
 8021f8c:	6828      	ldr	r0, [r5, #0]
 8021f8e:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8021f92:	f7fd bcb0 	b.w	801f8f6 <os_rcrsv_mutex_release>
	...

08021f98 <add_timer_to_List>:
 8021f98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021f9c:	4604      	mov	r4, r0
 8021f9e:	7dc0      	ldrb	r0, [r0, #23]
 8021fa0:	460d      	mov	r5, r1
 8021fa2:	07c0      	lsls	r0, r0, #31
 8021fa4:	6061      	str	r1, [r4, #4]
 8021fa6:	d004      	beq.n	8021fb2 <add_timer_to_List+0x1a>
 8021fa8:	68a0      	ldr	r0, [r4, #8]
 8021faa:	b110      	cbz	r0, 8021fb2 <add_timer_to_List+0x1a>
 8021fac:	4405      	add	r5, r0
 8021fae:	2600      	movs	r6, #0
 8021fb0:	e004      	b.n	8021fbc <add_timer_to_List+0x24>
 8021fb2:	f7ff fdff 	bl	8021bb4 <os_timer_get_current_time>
 8021fb6:	182d      	adds	r5, r5, r0
 8021fb8:	f141 0600 	adc.w	r6, r1, #0
 8021fbc:	8aa0      	ldrh	r0, [r4, #20]
 8021fbe:	f248 18b4 	movw	r8, #33204	@ 0x81b4
 8021fc2:	f366 0000 	bfi	r0, r6, #0, #1
 8021fc6:	f2c2 0800 	movt	r8, #8192	@ 0x2000
 8021fca:	82a0      	strh	r0, [r4, #20]
 8021fcc:	f8d8 0000 	ldr.w	r0, [r8]
 8021fd0:	2700      	movs	r7, #0
 8021fd2:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8021fd6:	60a5      	str	r5, [r4, #8]
 8021fd8:	75a7      	strb	r7, [r4, #22]
 8021fda:	f7fd fc86 	bl	801f8ea <os_rcrsv_mutex_wait>
 8021fde:	f247 20dc 	movw	r0, #29404	@ 0x72dc
 8021fe2:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8021fe6:	6801      	ldr	r1, [r0, #0]
 8021fe8:	b1b1      	cbz	r1, 8022018 <add_timer_to_List+0x80>
 8021fea:	8a8a      	ldrh	r2, [r1, #20]
 8021fec:	688b      	ldr	r3, [r1, #8]
 8021fee:	f002 0201 	and.w	r2, r2, #1
 8021ff2:	1aeb      	subs	r3, r5, r3
 8021ff4:	eb76 0202 	sbcs.w	r2, r6, r2
 8021ff8:	d202      	bcs.n	8022000 <add_timer_to_List+0x68>
 8021ffa:	2700      	movs	r7, #0
 8021ffc:	e00d      	b.n	802201a <add_timer_to_List+0x82>
 8021ffe:	bf00      	nop
 8022000:	460f      	mov	r7, r1
 8022002:	6809      	ldr	r1, [r1, #0]
 8022004:	b141      	cbz	r1, 8022018 <add_timer_to_List+0x80>
 8022006:	8a8a      	ldrh	r2, [r1, #20]
 8022008:	688b      	ldr	r3, [r1, #8]
 802200a:	f002 0201 	and.w	r2, r2, #1
 802200e:	1aeb      	subs	r3, r5, r3
 8022010:	eb76 0202 	sbcs.w	r2, r6, r2
 8022014:	d2f4      	bcs.n	8022000 <add_timer_to_List+0x68>
 8022016:	e000      	b.n	802201a <add_timer_to_List+0x82>
 8022018:	2100      	movs	r1, #0
 802201a:	6021      	str	r1, [r4, #0]
 802201c:	6802      	ldr	r2, [r0, #0]
 802201e:	4291      	cmp	r1, r2
 8022020:	bf08      	it	eq
 8022022:	4607      	moveq	r7, r0
 8022024:	603c      	str	r4, [r7, #0]
 8022026:	f8d8 0000 	ldr.w	r0, [r8]
 802202a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802202e:	f7fd bc62 	b.w	801f8f6 <os_rcrsv_mutex_release>
	...

08022034 <os_timer_stop>:
 8022034:	b378      	cbz	r0, 8022096 <os_timer_stop+0x62>
 8022036:	b570      	push	{r4, r5, r6, lr}
 8022038:	7d86      	ldrb	r6, [r0, #22]
 802203a:	4604      	mov	r4, r0
 802203c:	2e01      	cmp	r6, #1
 802203e:	bf07      	ittee	eq
 8022040:	7de0      	ldrbeq	r0, [r4, #23]
 8022042:	ea5f 70c0 	movseq.w	r0, r0, lsl #31
 8022046:	2002      	movne	r0, #2
 8022048:	75a0      	strbne	r0, [r4, #22]
 802204a:	8aa1      	ldrh	r1, [r4, #20]
 802204c:	2000      	movs	r0, #0
 802204e:	60a0      	str	r0, [r4, #8]
 8022050:	f001 0001 	and.w	r0, r1, #1
 8022054:	82a0      	strh	r0, [r4, #20]
 8022056:	f7ff ff73 	bl	8021f40 <remove_stopped_and_expired_timers>
 802205a:	f248 15b4 	movw	r5, #33204	@ 0x81b4
 802205e:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 8022062:	6828      	ldr	r0, [r5, #0]
 8022064:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8022068:	f7fd fc3f 	bl	801f8ea <os_rcrsv_mutex_wait>
 802206c:	f247 20d8 	movw	r0, #29400	@ 0x72d8
 8022070:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8022074:	6801      	ldr	r1, [r0, #0]
 8022076:	b199      	cbz	r1, 80220a0 <os_timer_stop+0x6c>
 8022078:	f247 20dc 	movw	r0, #29404	@ 0x72dc
 802207c:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8022080:	2202      	movs	r2, #2
 8022082:	4603      	mov	r3, r0
 8022084:	681b      	ldr	r3, [r3, #0]
 8022086:	3a01      	subs	r2, #1
 8022088:	2b00      	cmp	r3, #0
 802208a:	d1fb      	bne.n	8022084 <os_timer_stop+0x50>
 802208c:	b132      	cbz	r2, 802209c <os_timer_stop+0x68>
 802208e:	6802      	ldr	r2, [r0, #0]
 8022090:	b962      	cbnz	r2, 80220ac <os_timer_stop+0x78>
 8022092:	2000      	movs	r0, #0
 8022094:	e003      	b.n	802209e <os_timer_stop+0x6a>
 8022096:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802209a:	4770      	bx	lr
 802209c:	2002      	movs	r0, #2
 802209e:	4788      	blx	r1
 80220a0:	f247 20dc 	movw	r0, #29404	@ 0x72dc
 80220a4:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80220a8:	6802      	ldr	r2, [r0, #0]
 80220aa:	b1ea      	cbz	r2, 80220e8 <os_timer_stop+0xb4>
 80220ac:	6820      	ldr	r0, [r4, #0]
 80220ae:	4282      	cmp	r2, r0
 80220b0:	bf08      	it	eq
 80220b2:	2e00      	cmpeq	r6, #0
 80220b4:	d120      	bne.n	80220f8 <os_timer_stop+0xc4>
 80220b6:	7dd0      	ldrb	r0, [r2, #23]
 80220b8:	8a91      	ldrh	r1, [r2, #20]
 80220ba:	07c0      	lsls	r0, r0, #31
 80220bc:	d017      	beq.n	80220ee <os_timer_stop+0xba>
 80220be:	f3c1 0044 	ubfx	r0, r1, #1, #5
 80220c2:	f3c1 1384 	ubfx	r3, r1, #6, #5
 80220c6:	fb00 f003 	mul.w	r0, r0, r3
 80220ca:	eb00 20d1 	add.w	r0, r0, r1, lsr #11
 80220ce:	281f      	cmp	r0, #31
 80220d0:	d30d      	bcc.n	80220ee <os_timer_stop+0xba>
 80220d2:	f001 033f 	and.w	r3, r1, #63	@ 0x3f
 80220d6:	ea43 20c0 	orr.w	r0, r3, r0, lsl #11
 80220da:	6893      	ldr	r3, [r2, #8]
 80220dc:	f500 6600 	add.w	r6, r0, #2048	@ 0x800
 80220e0:	1c58      	adds	r0, r3, #1
 80220e2:	6090      	str	r0, [r2, #8]
 80220e4:	8296      	strh	r6, [r2, #20]
 80220e6:	e003      	b.n	80220f0 <os_timer_stop+0xbc>
 80220e8:	f004 fa23 	bl	8026532 <hw_ll_timer_stop>
 80220ec:	e004      	b.n	80220f8 <os_timer_stop+0xc4>
 80220ee:	6890      	ldr	r0, [r2, #8]
 80220f0:	f001 0101 	and.w	r1, r1, #1
 80220f4:	f004 fa0e 	bl	8026514 <hw_ll_timer_start>
 80220f8:	6828      	ldr	r0, [r5, #0]
 80220fa:	f7fd fbfc 	bl	801f8f6 <os_rcrsv_mutex_release>
 80220fe:	2000      	movs	r0, #0
 8022100:	bd70      	pop	{r4, r5, r6, pc}
	...

08022104 <os_timer_get_active_sw_timers_number>:
 8022104:	f247 21dc 	movw	r1, #29404	@ 0x72dc
 8022108:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 802210c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8022110:	6809      	ldr	r1, [r1, #0]
 8022112:	3001      	adds	r0, #1
 8022114:	2900      	cmp	r1, #0
 8022116:	d1fb      	bne.n	8022110 <os_timer_get_active_sw_timers_number+0xc>
 8022118:	4770      	bx	lr

0802211a <os_timer_free>:
 802211a:	b580      	push	{r7, lr}
 802211c:	b118      	cbz	r0, 8022126 <os_timer_free+0xc>
 802211e:	7d81      	ldrb	r1, [r0, #22]
 8022120:	b119      	cbz	r1, 802212a <os_timer_free+0x10>
 8022122:	f7ff fc8d 	bl	8021a40 <os_mem_pool_free>
 8022126:	2000      	movs	r0, #0
 8022128:	bd80      	pop	{r7, pc}
 802212a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802212e:	bd80      	pop	{r7, pc}

08022130 <os_timer_stop_free>:
 8022130:	b570      	push	{r4, r5, r6, lr}
 8022132:	4604      	mov	r4, r0
 8022134:	6800      	ldr	r0, [r0, #0]
 8022136:	f7ff ff7d 	bl	8022034 <os_timer_stop>
 802213a:	6821      	ldr	r1, [r4, #0]
 802213c:	4605      	mov	r5, r0
 802213e:	f04f 0600 	mov.w	r6, #0
 8022142:	b121      	cbz	r1, 802214e <os_timer_stop_free+0x1e>
 8022144:	7d88      	ldrb	r0, [r1, #22]
 8022146:	b120      	cbz	r0, 8022152 <os_timer_stop_free+0x22>
 8022148:	4608      	mov	r0, r1
 802214a:	f7ff fc79 	bl	8021a40 <os_mem_pool_free>
 802214e:	2000      	movs	r0, #0
 8022150:	e001      	b.n	8022156 <os_timer_stop_free+0x26>
 8022152:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8022156:	4328      	orrs	r0, r5
 8022158:	6026      	str	r6, [r4, #0]
 802215a:	bd70      	pop	{r4, r5, r6, pc}

0802215c <os_timer_set>:
 802215c:	b570      	push	{r4, r5, r6, lr}
 802215e:	460c      	mov	r4, r1
 8022160:	4605      	mov	r5, r0
 8022162:	f7fd fbbe 	bl	801f8e2 <os_disable_isr>
 8022166:	4628      	mov	r0, r5
 8022168:	f7ff ff64 	bl	8022034 <os_timer_stop>
 802216c:	4606      	mov	r6, r0
 802216e:	4628      	mov	r0, r5
 8022170:	4621      	mov	r1, r4
 8022172:	f7ff fea4 	bl	8021ebe <os_timer_start>
 8022176:	ea40 0406 	orr.w	r4, r0, r6
 802217a:	f7fd fbb4 	bl	801f8e6 <os_enable_isr>
 802217e:	4620      	mov	r0, r4
 8022180:	bd70      	pop	{r4, r5, r6, pc}

08022182 <os_get_tmr_state>:
 8022182:	7d80      	ldrb	r0, [r0, #22]
 8022184:	4770      	bx	lr

08022186 <ll_tx_pwr_if_tx_power_params_init>:
 8022186:	b570      	push	{r4, r5, r6, lr}
 8022188:	f247 24ec 	movw	r4, #29420	@ 0x72ec
 802218c:	f2c2 0400 	movt	r4, #8192	@ 0x2000
 8022190:	4620      	mov	r0, r4
 8022192:	2100      	movs	r1, #0
 8022194:	2208      	movs	r2, #8
 8022196:	2600      	movs	r6, #0
 8022198:	f002 fa26 	bl	80245e8 <ble_memset>
 802219c:	2000      	movs	r0, #0
 802219e:	f000 f82f 	bl	8022200 <ll_tx_pwr_if_select_tx_power_mode>
 80221a2:	f247 20f4 	movw	r0, #29428	@ 0x72f4
 80221a6:	f247 25f8 	movw	r5, #29432	@ 0x72f8
 80221aa:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80221ae:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 80221b2:	6006      	str	r6, [r0, #0]
 80221b4:	4628      	mov	r0, r5
 80221b6:	2100      	movs	r1, #0
 80221b8:	2202      	movs	r2, #2
 80221ba:	f002 fa15 	bl	80245e8 <ble_memset>
 80221be:	7920      	ldrb	r0, [r4, #4]
 80221c0:	6821      	ldr	r1, [r4, #0]
 80221c2:	3801      	subs	r0, #1
 80221c4:	b2c0      	uxtb	r0, r0
 80221c6:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 80221ca:	f247 22e8 	movw	r2, #29416	@ 0x72e8
 80221ce:	78c1      	ldrb	r1, [r0, #3]
 80221d0:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 80221d4:	7011      	strb	r1, [r2, #0]
 80221d6:	78c1      	ldrb	r1, [r0, #3]
 80221d8:	f247 22e9 	movw	r2, #29417	@ 0x72e9
 80221dc:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 80221e0:	7011      	strb	r1, [r2, #0]
 80221e2:	78c1      	ldrb	r1, [r0, #3]
 80221e4:	f247 22ea 	movw	r2, #29418	@ 0x72ea
 80221e8:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 80221ec:	7011      	strb	r1, [r2, #0]
 80221ee:	78c0      	ldrb	r0, [r0, #3]
 80221f0:	f247 21eb 	movw	r1, #29419	@ 0x72eb
 80221f4:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 80221f8:	702e      	strb	r6, [r5, #0]
 80221fa:	706e      	strb	r6, [r5, #1]
 80221fc:	7008      	strb	r0, [r1, #0]
 80221fe:	bd70      	pop	{r4, r5, r6, pc}

08022200 <ll_tx_pwr_if_select_tx_power_mode>:
 8022200:	b570      	push	{r4, r5, r6, lr}
 8022202:	f241 618c 	movw	r1, #5772	@ 0x168c
 8022206:	f6c0 0103 	movt	r1, #2051	@ 0x803
 802220a:	780c      	ldrb	r4, [r1, #0]
 802220c:	f247 25ec 	movw	r5, #29420	@ 0x72ec
 8022210:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 8022214:	b16c      	cbz	r4, 8022232 <ll_tx_pwr_if_select_tx_power_mode+0x32>
 8022216:	f241 617c 	movw	r1, #5756	@ 0x167c
 802221a:	2200      	movs	r2, #0
 802221c:	f6c0 0103 	movt	r1, #2051	@ 0x803
 8022220:	79cb      	ldrb	r3, [r1, #7]
 8022222:	4283      	cmp	r3, r0
 8022224:	d007      	beq.n	8022236 <ll_tx_pwr_if_select_tx_power_mode+0x36>
 8022226:	3201      	adds	r2, #1
 8022228:	4294      	cmp	r4, r2
 802222a:	f101 0108 	add.w	r1, r1, #8
 802222e:	d1f7      	bne.n	8022220 <ll_tx_pwr_if_select_tx_power_mode+0x20>
 8022230:	e00b      	b.n	802224a <ll_tx_pwr_if_select_tx_power_mode+0x4a>
 8022232:	2600      	movs	r6, #0
 8022234:	e007      	b.n	8022246 <ll_tx_pwr_if_select_tx_power_mode+0x46>
 8022236:	f247 20ec 	movw	r0, #29420	@ 0x72ec
 802223a:	b2d6      	uxtb	r6, r2
 802223c:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8022240:	2208      	movs	r2, #8
 8022242:	f002 f981 	bl	8024548 <ble_memcpy>
 8022246:	42a6      	cmp	r6, r4
 8022248:	d10c      	bne.n	8022264 <ll_tx_pwr_if_select_tx_power_mode+0x64>
 802224a:	f247 20ec 	movw	r0, #29420	@ 0x72ec
 802224e:	f241 617c 	movw	r1, #5756	@ 0x167c
 8022252:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8022256:	f6c0 0103 	movt	r1, #2051	@ 0x803
 802225a:	2208      	movs	r2, #8
 802225c:	f002 f974 	bl	8024548 <ble_memcpy>
 8022260:	24ff      	movs	r4, #255	@ 0xff
 8022262:	e000      	b.n	8022266 <ll_tx_pwr_if_select_tx_power_mode+0x66>
 8022264:	2400      	movs	r4, #0
 8022266:	7968      	ldrb	r0, [r5, #5]
 8022268:	79a9      	ldrb	r1, [r5, #6]
 802226a:	f7fe fea0 	bl	8020fae <llhwc_phy_patch_tx_power_mode_phy_reg>
 802226e:	7928      	ldrb	r0, [r5, #4]
 8022270:	6829      	ldr	r1, [r5, #0]
 8022272:	3801      	subs	r0, #1
 8022274:	b2c0      	uxtb	r0, r0
 8022276:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 802227a:	f247 22e8 	movw	r2, #29416	@ 0x72e8
 802227e:	78c1      	ldrb	r1, [r0, #3]
 8022280:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8022284:	7011      	strb	r1, [r2, #0]
 8022286:	78c1      	ldrb	r1, [r0, #3]
 8022288:	f247 22e9 	movw	r2, #29417	@ 0x72e9
 802228c:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8022290:	7011      	strb	r1, [r2, #0]
 8022292:	78c1      	ldrb	r1, [r0, #3]
 8022294:	f247 22ea 	movw	r2, #29418	@ 0x72ea
 8022298:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 802229c:	7011      	strb	r1, [r2, #0]
 802229e:	78c1      	ldrb	r1, [r0, #3]
 80222a0:	f247 22eb 	movw	r2, #29419	@ 0x72eb
 80222a4:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 80222a8:	4620      	mov	r0, r4
 80222aa:	7011      	strb	r1, [r2, #0]
 80222ac:	bd70      	pop	{r4, r5, r6, pc}

080222ae <ll_tx_pwr_if_get_min_max_supprtd_tx_power_levels>:
 80222ae:	f247 2cec 	movw	ip, #29420	@ 0x72ec
 80222b2:	f2c2 0c00 	movt	ip, #8192	@ 0x2000
 80222b6:	f8dc 3000 	ldr.w	r3, [ip]
 80222ba:	f89c 2004 	ldrb.w	r2, [ip, #4]
 80222be:	78db      	ldrb	r3, [r3, #3]
 80222c0:	7003      	strb	r3, [r0, #0]
 80222c2:	1e50      	subs	r0, r2, #1
 80222c4:	f8dc 2000 	ldr.w	r2, [ip]
 80222c8:	b2c0      	uxtb	r0, r0
 80222ca:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 80222ce:	78c0      	ldrb	r0, [r0, #3]
 80222d0:	7008      	strb	r0, [r1, #0]
 80222d2:	4770      	bx	lr

080222d4 <ll_tx_pwr_if_get_tx_pwr_table_offset>:
 80222d4:	b580      	push	{r7, lr}
 80222d6:	f247 22ec 	movw	r2, #29420	@ 0x72ec
 80222da:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 80222de:	7913      	ldrb	r3, [r2, #4]
 80222e0:	f8d2 c000 	ldr.w	ip, [r2]
 80222e4:	3b01      	subs	r3, #1
 80222e6:	b2da      	uxtb	r2, r3
 80222e8:	eb0c 0382 	add.w	r3, ip, r2, lsl #2
 80222ec:	f99c e003 	ldrsb.w	lr, [ip, #3]
 80222f0:	f993 3003 	ldrsb.w	r3, [r3, #3]
 80222f4:	4283      	cmp	r3, r0
 80222f6:	bfa8      	it	ge
 80222f8:	4603      	movge	r3, r0
 80222fa:	4586      	cmp	lr, r0
 80222fc:	bfc8      	it	gt
 80222fe:	4673      	movgt	r3, lr
 8022300:	eba3 000e 	sub.w	r0, r3, lr
 8022304:	b2c0      	uxtb	r0, r0
 8022306:	4290      	cmp	r0, r2
 8022308:	bf38      	it	cc
 802230a:	4602      	movcc	r2, r0
 802230c:	2901      	cmp	r1, #1
 802230e:	d110      	bne.n	8022332 <ll_tx_pwr_if_get_tx_pwr_table_offset+0x5e>
 8022310:	eb0c 0082 	add.w	r0, ip, r2, lsl #2
 8022314:	b2d9      	uxtb	r1, r3
 8022316:	78c0      	ldrb	r0, [r0, #3]
 8022318:	4281      	cmp	r1, r0
 802231a:	d00a      	beq.n	8022332 <ll_tx_pwr_if_get_tx_pwr_table_offset+0x5e>
 802231c:	b142      	cbz	r2, 8022330 <ll_tx_pwr_if_get_tx_pwr_table_offset+0x5c>
 802231e:	3a01      	subs	r2, #1
 8022320:	b2d0      	uxtb	r0, r2
 8022322:	eb0c 0080 	add.w	r0, ip, r0, lsl #2
 8022326:	eb02 010e 	add.w	r1, r2, lr
 802232a:	78c0      	ldrb	r0, [r0, #3]
 802232c:	b2c9      	uxtb	r1, r1
 802232e:	e7f3      	b.n	8022318 <ll_tx_pwr_if_get_tx_pwr_table_offset+0x44>
 8022330:	2200      	movs	r2, #0
 8022332:	b2d0      	uxtb	r0, r2
 8022334:	bd80      	pop	{r7, pc}

08022336 <ll_tx_pwr_if_epa_enable>:
 8022336:	b5b0      	push	{r4, r5, r7, lr}
 8022338:	f247 25f8 	movw	r5, #29432	@ 0x72f8
 802233c:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 8022340:	782a      	ldrb	r2, [r5, #0]
 8022342:	b18a      	cbz	r2, 8022368 <ll_tx_pwr_if_epa_enable+0x32>
 8022344:	f247 21f4 	movw	r1, #29428	@ 0x72f4
 8022348:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 802234c:	6809      	ldr	r1, [r1, #0]
 802234e:	b159      	cbz	r1, 8022368 <ll_tx_pwr_if_epa_enable+0x32>
 8022350:	786b      	ldrb	r3, [r5, #1]
 8022352:	2801      	cmp	r0, #1
 8022354:	d103      	bne.n	802235e <ll_tx_pwr_if_epa_enable+0x28>
 8022356:	2a01      	cmp	r2, #1
 8022358:	bf08      	it	eq
 802235a:	2b00      	cmpeq	r3, #0
 802235c:	d005      	beq.n	802236a <ll_tx_pwr_if_epa_enable+0x34>
 802235e:	b918      	cbnz	r0, 8022368 <ll_tx_pwr_if_epa_enable+0x32>
 8022360:	2a01      	cmp	r2, #1
 8022362:	bf08      	it	eq
 8022364:	2b01      	cmpeq	r3, #1
 8022366:	d002      	beq.n	802236e <ll_tx_pwr_if_epa_enable+0x38>
 8022368:	bdb0      	pop	{r4, r5, r7, pc}
 802236a:	2401      	movs	r4, #1
 802236c:	e000      	b.n	8022370 <ll_tx_pwr_if_epa_enable+0x3a>
 802236e:	2400      	movs	r4, #0
 8022370:	4620      	mov	r0, r4
 8022372:	4788      	blx	r1
 8022374:	706c      	strb	r4, [r5, #1]
 8022376:	bdb0      	pop	{r4, r5, r7, pc}

08022378 <ll_tx_pwr_if_is_le_power_class_1_supported>:
 8022378:	f247 20ec 	movw	r0, #29420	@ 0x72ec
 802237c:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8022380:	7901      	ldrb	r1, [r0, #4]
 8022382:	6800      	ldr	r0, [r0, #0]
 8022384:	3901      	subs	r1, #1
 8022386:	b2c9      	uxtb	r1, r1
 8022388:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 802238c:	f990 1003 	ldrsb.w	r1, [r0, #3]
 8022390:	2000      	movs	r0, #0
 8022392:	290a      	cmp	r1, #10
 8022394:	bfc8      	it	gt
 8022396:	2001      	movgt	r0, #1
 8022398:	4770      	bx	lr

0802239a <ll_tx_pwr_if_tx_pwr_params_config>:
 802239a:	b5f0      	push	{r4, r5, r6, r7, lr}
 802239c:	b081      	sub	sp, #4
 802239e:	4604      	mov	r4, r0
 80223a0:	4608      	mov	r0, r1
 80223a2:	4611      	mov	r1, r2
 80223a4:	2200      	movs	r2, #0
 80223a6:	461d      	mov	r5, r3
 80223a8:	f7ff ff94 	bl	80222d4 <ll_tx_pwr_if_get_tx_pwr_table_offset>
 80223ac:	f247 27ec 	movw	r7, #29420	@ 0x72ec
 80223b0:	f2c2 0700 	movt	r7, #8192	@ 0x2000
 80223b4:	6839      	ldr	r1, [r7, #0]
 80223b6:	4606      	mov	r6, r0
 80223b8:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 80223bc:	4629      	mov	r1, r5
 80223be:	7840      	ldrb	r0, [r0, #1]
 80223c0:	f7fe fde1 	bl	8020f86 <llhwc_phy_set_tx_pwr>
 80223c4:	f247 32d0 	movw	r2, #29648	@ 0x73d0
 80223c8:	6839      	ldr	r1, [r7, #0]
 80223ca:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 80223ce:	7c93      	ldrb	r3, [r2, #18]
 80223d0:	eb01 0086 	add.w	r0, r1, r6, lsl #2
 80223d4:	f811 1026 	ldrb.w	r1, [r1, r6, lsl #2]
 80223d8:	f003 030f 	and.w	r3, r3, #15
 80223dc:	ea43 1101 	orr.w	r1, r3, r1, lsl #4
 80223e0:	78d3      	ldrb	r3, [r2, #3]
 80223e2:	7491      	strb	r1, [r2, #18]
 80223e4:	f810 1f02 	ldrb.w	r1, [r0, #2]!
 80223e8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80223ec:	ea43 11c1 	orr.w	r1, r3, r1, lsl #7
 80223f0:	2c01      	cmp	r4, #1
 80223f2:	70d1      	strb	r1, [r2, #3]
 80223f4:	d101      	bne.n	80223fa <ll_tx_pwr_if_tx_pwr_params_config+0x60>
 80223f6:	7800      	ldrb	r0, [r0, #0]
 80223f8:	b108      	cbz	r0, 80223fe <ll_tx_pwr_if_tx_pwr_params_config+0x64>
 80223fa:	b001      	add	sp, #4
 80223fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80223fe:	f247 24f8 	movw	r4, #29432	@ 0x72f8
 8022402:	f2c2 0400 	movt	r4, #8192	@ 0x2000
 8022406:	7820      	ldrb	r0, [r4, #0]
 8022408:	2800      	cmp	r0, #0
 802240a:	d0f6      	beq.n	80223fa <ll_tx_pwr_if_tx_pwr_params_config+0x60>
 802240c:	f247 21f4 	movw	r1, #29428	@ 0x72f4
 8022410:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8022414:	6809      	ldr	r1, [r1, #0]
 8022416:	2900      	cmp	r1, #0
 8022418:	d0ef      	beq.n	80223fa <ll_tx_pwr_if_tx_pwr_params_config+0x60>
 802241a:	2801      	cmp	r0, #1
 802241c:	d1ed      	bne.n	80223fa <ll_tx_pwr_if_tx_pwr_params_config+0x60>
 802241e:	7860      	ldrb	r0, [r4, #1]
 8022420:	2800      	cmp	r0, #0
 8022422:	d1ea      	bne.n	80223fa <ll_tx_pwr_if_tx_pwr_params_config+0x60>
 8022424:	2001      	movs	r0, #1
 8022426:	2501      	movs	r5, #1
 8022428:	4788      	blx	r1
 802242a:	7065      	strb	r5, [r4, #1]
 802242c:	e7e5      	b.n	80223fa <ll_tx_pwr_if_tx_pwr_params_config+0x60>

0802242e <llhwc_slptmr_init>:
 802242e:	b510      	push	{r4, lr}
 8022430:	2101      	movs	r1, #1
 8022432:	4604      	mov	r4, r0
 8022434:	2800      	cmp	r0, #0
 8022436:	bf18      	it	ne
 8022438:	2001      	movne	r0, #1
 802243a:	f7fd f9f2 	bl	801f822 <bsp_assert>
 802243e:	f247 3018 	movw	r0, #29464	@ 0x7318
 8022442:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8022446:	6004      	str	r4, [r0, #0]
 8022448:	bd10      	pop	{r4, pc}

0802244a <llhwc_slptmr_get>:
 802244a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802244e:	b081      	sub	sp, #4
 8022450:	4680      	mov	r8, r0
 8022452:	201a      	movs	r0, #26
 8022454:	f7fd fa2c 	bl	801f8b0 <bsp_debug_gpio_set>
 8022458:	f247 3518 	movw	r5, #29464	@ 0x7318
 802245c:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 8022460:	f895 004d 	ldrb.w	r0, [r5, #77]	@ 0x4d
 8022464:	2801      	cmp	r0, #1
 8022466:	d105      	bne.n	8022474 <llhwc_slptmr_get+0x2a>
 8022468:	2014      	movs	r0, #20
 802246a:	f6c4 0002 	movt	r0, #18434	@ 0x4802
 802246e:	6800      	ldr	r0, [r0, #0]
 8022470:	1c46      	adds	r6, r0, #1
 8022472:	e000      	b.n	8022476 <llhwc_slptmr_get+0x2c>
 8022474:	6d6e      	ldr	r6, [r5, #84]	@ 0x54
 8022476:	f247 3970 	movw	r9, #29552	@ 0x7370
 802247a:	f2c2 0900 	movt	r9, #8192	@ 0x2000
 802247e:	f899 7014 	ldrb.w	r7, [r9, #20]
 8022482:	2f00      	cmp	r7, #0
 8022484:	d053      	beq.n	802252e <llhwc_slptmr_get+0xe4>
 8022486:	2f02      	cmp	r7, #2
 8022488:	d021      	beq.n	80224ce <llhwc_slptmr_get+0x84>
 802248a:	2f01      	cmp	r7, #1
 802248c:	d130      	bne.n	80224f0 <llhwc_slptmr_get+0xa6>
 802248e:	f8d9 4000 	ldr.w	r4, [r9]
 8022492:	f24f 0218 	movw	r2, #61464	@ 0xf018
 8022496:	07e0      	lsls	r0, r4, #31
 8022498:	0861      	lsrs	r1, r4, #1
 802249a:	f2c0 0201 	movt	r2, #1
 802249e:	2300      	movs	r3, #0
 80224a0:	f7dd fed4 	bl	800024c <__aeabi_uldivmod>
 80224a4:	f895 1020 	ldrb.w	r1, [r5, #32]
 80224a8:	ea4f 0a40 	mov.w	sl, r0, lsl #1
 80224ac:	2901      	cmp	r1, #1
 80224ae:	d121      	bne.n	80224f4 <llhwc_slptmr_get+0xaa>
 80224b0:	f64d 502f 	movw	r0, #56623	@ 0xdd2f
 80224b4:	f2c0 6024 	movt	r0, #1572	@ 0x624
 80224b8:	4286      	cmp	r6, r0
 80224ba:	d21b      	bcs.n	80224f4 <llhwc_slptmr_get+0xaa>
 80224bc:	8ba9      	ldrh	r1, [r5, #28]
 80224be:	2000      	movs	r0, #0
 80224c0:	f101 0b01 	add.w	fp, r1, #1
 80224c4:	f885 0020 	strb.w	r0, [r5, #32]
 80224c8:	f8a5 b01c 	strh.w	fp, [r5, #28]
 80224cc:	e014      	b.n	80224f8 <llhwc_slptmr_get+0xae>
 80224ce:	f895 0020 	ldrb.w	r0, [r5, #32]
 80224d2:	2801      	cmp	r0, #1
 80224d4:	d121      	bne.n	802251a <llhwc_slptmr_get+0xd0>
 80224d6:	f64d 502f 	movw	r0, #56623	@ 0xdd2f
 80224da:	f2c0 6024 	movt	r0, #1572	@ 0x624
 80224de:	4286      	cmp	r6, r0
 80224e0:	d21b      	bcs.n	802251a <llhwc_slptmr_get+0xd0>
 80224e2:	8ba9      	ldrh	r1, [r5, #28]
 80224e4:	2000      	movs	r0, #0
 80224e6:	f885 0020 	strb.w	r0, [r5, #32]
 80224ea:	1c48      	adds	r0, r1, #1
 80224ec:	83a8      	strh	r0, [r5, #28]
 80224ee:	e015      	b.n	802251c <llhwc_slptmr_get+0xd2>
 80224f0:	2600      	movs	r6, #0
 80224f2:	e01c      	b.n	802252e <llhwc_slptmr_get+0xe4>
 80224f4:	f8b5 b01c 	ldrh.w	fp, [r5, #28]
 80224f8:	fba4 0106 	umull	r0, r1, r4, r6
 80224fc:	f24f 0218 	movw	r2, #61464	@ 0xf018
 8022500:	f2c0 0201 	movt	r2, #1
 8022504:	2300      	movs	r3, #0
 8022506:	f7dd fea1 	bl	800024c <__aeabi_uldivmod>
 802250a:	f8d9 1010 	ldr.w	r1, [r9, #16]
 802250e:	fa1f f28b 	uxth.w	r2, fp
 8022512:	1a40      	subs	r0, r0, r1
 8022514:	fb0a 0602 	mla	r6, sl, r2, r0
 8022518:	e009      	b.n	802252e <llhwc_slptmr_get+0xe4>
 802251a:	8ba8      	ldrh	r0, [r5, #28]
 802251c:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8022520:	fba6 2301 	umull	r2, r3, r6, r1
 8022524:	fb00 3001 	mla	r0, r0, r1, r3
 8022528:	0a51      	lsrs	r1, r2, #9
 802252a:	ea41 56c0 	orr.w	r6, r1, r0, lsl #23
 802252e:	f8c8 6000 	str.w	r6, [r8]
 8022532:	b17f      	cbz	r7, 8022554 <llhwc_slptmr_get+0x10a>
 8022534:	f895 0021 	ldrb.w	r0, [r5, #33]	@ 0x21
 8022538:	2801      	cmp	r0, #1
 802253a:	d10b      	bne.n	8022554 <llhwc_slptmr_get+0x10a>
 802253c:	f244 70ff 	movw	r0, #18431	@ 0x47ff
 8022540:	f2c0 10e8 	movt	r0, #488	@ 0x1e8
 8022544:	4286      	cmp	r6, r0
 8022546:	d805      	bhi.n	8022554 <llhwc_slptmr_get+0x10a>
 8022548:	8be8      	ldrh	r0, [r5, #30]
 802254a:	3001      	adds	r0, #1
 802254c:	83e8      	strh	r0, [r5, #30]
 802254e:	2000      	movs	r0, #0
 8022550:	f885 0021 	strb.w	r0, [r5, #33]	@ 0x21
 8022554:	201a      	movs	r0, #26
 8022556:	b001      	add	sp, #4
 8022558:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802255c:	f7fd b9aa 	b.w	801f8b4 <bsp_debug_gpio_clear>

08022560 <llhwc_cmn_reset>:
 8022560:	b570      	push	{r4, r5, r6, lr}
 8022562:	f247 3418 	movw	r4, #29464	@ 0x7318
 8022566:	f2c2 0400 	movt	r4, #8192	@ 0x2000
 802256a:	2009      	movs	r0, #9
 802256c:	f884 0022 	strb.w	r0, [r4, #34]	@ 0x22
 8022570:	2005      	movs	r0, #5
 8022572:	f884 0038 	strb.w	r0, [r4, #56]	@ 0x38
 8022576:	f248 2038 	movw	r0, #33336	@ 0x8238
 802257a:	2500      	movs	r5, #0
 802257c:	f6c4 0002 	movt	r0, #18434	@ 0x4802
 8022580:	2100      	movs	r1, #0
 8022582:	2260      	movs	r2, #96	@ 0x60
 8022584:	60e5      	str	r5, [r4, #12]
 8022586:	8225      	strh	r5, [r4, #16]
 8022588:	74a5      	strb	r5, [r4, #18]
 802258a:	e9c4 5509 	strd	r5, r5, [r4, #36]	@ 0x24
 802258e:	f8a4 504c 	strh.w	r5, [r4, #76]	@ 0x4c
 8022592:	f884 5050 	strb.w	r5, [r4, #80]	@ 0x50
 8022596:	f002 f827 	bl	80245e8 <ble_memset>
 802259a:	f247 30c0 	movw	r0, #29632	@ 0x73c0
 802259e:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80225a2:	8085      	strh	r5, [r0, #4]
 80225a4:	6005      	str	r5, [r0, #0]
 80225a6:	8185      	strh	r5, [r0, #12]
 80225a8:	6085      	str	r5, [r0, #8]
 80225aa:	f247 3088 	movw	r0, #29576	@ 0x7388
 80225ae:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80225b2:	260c      	movs	r6, #12
 80225b4:	6005      	str	r5, [r0, #0]
 80225b6:	f6c4 0602 	movt	r6, #18434	@ 0x4802
 80225ba:	f856 0c04 	ldr.w	r0, [r6, #-4]
 80225be:	f020 0008 	bic.w	r0, r0, #8
 80225c2:	f846 0c04 	str.w	r0, [r6, #-4]
 80225c6:	f856 0c04 	ldr.w	r0, [r6, #-4]
 80225ca:	f040 0008 	orr.w	r0, r0, #8
 80225ce:	f846 0c04 	str.w	r0, [r6, #-4]
 80225d2:	6830      	ldr	r0, [r6, #0]
 80225d4:	f020 0004 	bic.w	r0, r0, #4
 80225d8:	6030      	str	r0, [r6, #0]
 80225da:	6830      	ldr	r0, [r6, #0]
 80225dc:	f040 0004 	orr.w	r0, r0, #4
 80225e0:	6030      	str	r0, [r6, #0]
 80225e2:	6830      	ldr	r0, [r6, #0]
 80225e4:	f040 0002 	orr.w	r0, r0, #2
 80225e8:	6030      	str	r0, [r6, #0]
 80225ea:	203c      	movs	r0, #60	@ 0x3c
 80225ec:	f7fd f909 	bl	801f802 <bsp_delay_us>
 80225f0:	2001      	movs	r0, #1
 80225f2:	f000 f829 	bl	8022648 <llhwc_cmn_control_hclk>
 80225f6:	2000      	movs	r0, #0
 80225f8:	f7fd f92d 	bl	801f856 <bsp_control_aclk>
 80225fc:	6565      	str	r5, [r4, #84]	@ 0x54
 80225fe:	f247 3470 	movw	r4, #29552	@ 0x7370
 8022602:	f2c2 0400 	movt	r4, #8192	@ 0x2000
 8022606:	4620      	mov	r0, r4
 8022608:	2100      	movs	r1, #0
 802260a:	2218      	movs	r2, #24
 802260c:	f001 ffec 	bl	80245e8 <ble_memset>
 8022610:	f642 20fb 	movw	r0, #11003	@ 0x2afb
 8022614:	f2c0 0005 	movt	r0, #5
 8022618:	6020      	str	r0, [r4, #0]
 802261a:	2002      	movs	r0, #2
 802261c:	7520      	strb	r0, [r4, #20]
 802261e:	f000 f855 	bl	80226cc <llhwc_cmn_reset_rco_clbr>
 8022622:	f247 20fc 	movw	r0, #29436	@ 0x72fc
 8022626:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 802262a:	6005      	str	r5, [r0, #0]
 802262c:	2001      	movs	r0, #1
 802262e:	f000 f89c 	bl	802276a <llhwc_cmn_reset_slp_params>
 8022632:	6830      	ldr	r0, [r6, #0]
 8022634:	f040 0020 	orr.w	r0, r0, #32
 8022638:	6030      	str	r0, [r6, #0]
 802263a:	6830      	ldr	r0, [r6, #0]
 802263c:	f420 7180 	bic.w	r1, r0, #256	@ 0x100
 8022640:	2000      	movs	r0, #0
 8022642:	6031      	str	r1, [r6, #0]
 8022644:	bd70      	pop	{r4, r5, r6, pc}
	...

08022648 <llhwc_cmn_control_hclk>:
 8022648:	b570      	push	{r4, r5, r6, lr}
 802264a:	f247 3518 	movw	r5, #29464	@ 0x7318
 802264e:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 8022652:	f895 104d 	ldrb.w	r1, [r5, #77]	@ 0x4d
 8022656:	4604      	mov	r4, r0
 8022658:	4308      	orrs	r0, r1
 802265a:	d024      	beq.n	80226a6 <llhwc_cmn_control_hclk+0x5e>
 802265c:	2c01      	cmp	r4, #1
 802265e:	bf04      	itt	eq
 8022660:	2901      	cmpeq	r1, #1
 8022662:	bd70      	popeq	{r4, r5, r6, pc}
 8022664:	b1ac      	cbz	r4, 8022692 <llhwc_cmn_control_hclk+0x4a>
 8022666:	2c01      	cmp	r4, #1
 8022668:	d11b      	bne.n	80226a2 <llhwc_cmn_control_hclk+0x5a>
 802266a:	2901      	cmp	r1, #1
 802266c:	d019      	beq.n	80226a2 <llhwc_cmn_control_hclk+0x5a>
 802266e:	2614      	movs	r6, #20
 8022670:	f6c4 0602 	movt	r6, #18434	@ 0x4802
 8022674:	f7fd f935 	bl	801f8e2 <os_disable_isr>
 8022678:	2001      	movs	r0, #1
 802267a:	f7fd f8eb 	bl	801f854 <bsp_control_hclk>
 802267e:	6d68      	ldr	r0, [r5, #84]	@ 0x54
 8022680:	6831      	ldr	r1, [r6, #0]
 8022682:	1a09      	subs	r1, r1, r0
 8022684:	2902      	cmp	r1, #2
 8022686:	d3fb      	bcc.n	8022680 <llhwc_cmn_control_hclk+0x38>
 8022688:	2000      	movs	r0, #0
 802268a:	6568      	str	r0, [r5, #84]	@ 0x54
 802268c:	f7fd f92b 	bl	801f8e6 <os_enable_isr>
 8022690:	e007      	b.n	80226a2 <llhwc_cmn_control_hclk+0x5a>
 8022692:	2014      	movs	r0, #20
 8022694:	f6c4 0002 	movt	r0, #18434	@ 0x4802
 8022698:	6800      	ldr	r0, [r0, #0]
 802269a:	6568      	str	r0, [r5, #84]	@ 0x54
 802269c:	2000      	movs	r0, #0
 802269e:	f7fd f8d9 	bl	801f854 <bsp_control_hclk>
 80226a2:	f885 404d 	strb.w	r4, [r5, #77]	@ 0x4d
 80226a6:	bd70      	pop	{r4, r5, r6, pc}

080226a8 <llhwc_cmn_reset_slptmr_src>:
 80226a8:	b510      	push	{r4, lr}
 80226aa:	f247 3470 	movw	r4, #29552	@ 0x7370
 80226ae:	f2c2 0400 	movt	r4, #8192	@ 0x2000
 80226b2:	4620      	mov	r0, r4
 80226b4:	2100      	movs	r1, #0
 80226b6:	2218      	movs	r2, #24
 80226b8:	f001 ff96 	bl	80245e8 <ble_memset>
 80226bc:	f642 20fb 	movw	r0, #11003	@ 0x2afb
 80226c0:	f2c0 0005 	movt	r0, #5
 80226c4:	6020      	str	r0, [r4, #0]
 80226c6:	2002      	movs	r0, #2
 80226c8:	7520      	strb	r0, [r4, #20]
 80226ca:	bd10      	pop	{r4, pc}

080226cc <llhwc_cmn_reset_rco_clbr>:
 80226cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80226ce:	b081      	sub	sp, #4
 80226d0:	f247 3498 	movw	r4, #29592	@ 0x7398
 80226d4:	f2c2 0400 	movt	r4, #8192	@ 0x2000
 80226d8:	68e0      	ldr	r0, [r4, #12]
 80226da:	b190      	cbz	r0, 8022702 <llhwc_cmn_reset_rco_clbr+0x36>
 80226dc:	f7ff fcaa 	bl	8022034 <os_timer_stop>
 80226e0:	fab0 f080 	clz	r0, r0
 80226e4:	0940      	lsrs	r0, r0, #5
 80226e6:	2101      	movs	r1, #1
 80226e8:	f7fd f89b 	bl	801f822 <bsp_assert>
 80226ec:	68e0      	ldr	r0, [r4, #12]
 80226ee:	f7ff fd14 	bl	802211a <os_timer_free>
 80226f2:	2100      	movs	r1, #0
 80226f4:	fab0 f080 	clz	r0, r0
 80226f8:	60e1      	str	r1, [r4, #12]
 80226fa:	0940      	lsrs	r0, r0, #5
 80226fc:	2101      	movs	r1, #1
 80226fe:	f7fd f890 	bl	801f822 <bsp_assert>
 8022702:	2001      	movs	r0, #1
 8022704:	f7fd f8c1 	bl	801f88a <bsp_rco_clbr_not>
 8022708:	2014      	movs	r0, #20
 802270a:	f6c4 0002 	movt	r0, #18434	@ 0x4802
 802270e:	f8d0 1470 	ldr.w	r1, [r0, #1136]	@ 0x470
 8022712:	f247 3504 	movw	r5, #29444	@ 0x7304
 8022716:	f021 0101 	bic.w	r1, r1, #1
 802271a:	f8c0 1470 	str.w	r1, [r0, #1136]	@ 0x470
 802271e:	6801      	ldr	r1, [r0, #0]
 8022720:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 8022724:	3101      	adds	r1, #1
 8022726:	6029      	str	r1, [r5, #0]
 8022728:	6901      	ldr	r1, [r0, #16]
 802272a:	f247 3608 	movw	r6, #29448	@ 0x7308
 802272e:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 8022732:	6101      	str	r1, [r0, #16]
 8022734:	6800      	ldr	r0, [r0, #0]
 8022736:	f2c2 0600 	movt	r6, #8192	@ 0x2000
 802273a:	3001      	adds	r0, #1
 802273c:	6030      	str	r0, [r6, #0]
 802273e:	4620      	mov	r0, r4
 8022740:	2100      	movs	r1, #0
 8022742:	2224      	movs	r2, #36	@ 0x24
 8022744:	2700      	movs	r7, #0
 8022746:	f001 ff4f 	bl	80245e8 <ble_memset>
 802274a:	207f      	movs	r0, #127	@ 0x7f
 802274c:	7220      	strb	r0, [r4, #8]
 802274e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8022752:	6120      	str	r0, [r4, #16]
 8022754:	f247 300c 	movw	r0, #29452	@ 0x730c
 8022758:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 802275c:	7667      	strb	r7, [r4, #25]
 802275e:	76a7      	strb	r7, [r4, #26]
 8022760:	602f      	str	r7, [r5, #0]
 8022762:	6037      	str	r7, [r6, #0]
 8022764:	6007      	str	r7, [r0, #0]
 8022766:	b001      	add	sp, #4
 8022768:	bdf0      	pop	{r4, r5, r6, r7, pc}

0802276a <llhwc_cmn_reset_slp_params>:
 802276a:	b5f0      	push	{r4, r5, r6, r7, lr}
 802276c:	b081      	sub	sp, #4
 802276e:	4604      	mov	r4, r0
 8022770:	f240 4548 	movw	r5, #1096	@ 0x448
 8022774:	261c      	movs	r6, #28
 8022776:	2001      	movs	r0, #1
 8022778:	f6c4 0502 	movt	r5, #18434	@ 0x4802
 802277c:	f6c4 0602 	movt	r6, #18434	@ 0x4802
 8022780:	2701      	movs	r7, #1
 8022782:	f000 f85d 	bl	8022840 <llhwc_pwr_switch>
 8022786:	f8d6 0408 	ldr.w	r0, [r6, #1032]	@ 0x408
 802278a:	2c01      	cmp	r4, #1
 802278c:	f367 3050 	bfi	r0, r7, #13, #4
 8022790:	f8c6 0408 	str.w	r0, [r6, #1032]	@ 0x408
 8022794:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8022798:	6028      	str	r0, [r5, #0]
 802279a:	d103      	bne.n	80227a4 <llhwc_cmn_reset_slp_params+0x3a>
 802279c:	f7fd fe7b 	bl	8020496 <llhwc_phy_reset>
 80227a0:	f7fe f985 	bl	8020aae <llhwc_phy_init>
 80227a4:	6830      	ldr	r0, [r6, #0]
 80227a6:	f040 0020 	orr.w	r0, r0, #32
 80227aa:	6030      	str	r0, [r6, #0]
 80227ac:	6828      	ldr	r0, [r5, #0]
 80227ae:	f040 0008 	orr.w	r0, r0, #8
 80227b2:	6028      	str	r0, [r5, #0]
 80227b4:	6828      	ldr	r0, [r5, #0]
 80227b6:	f020 0004 	bic.w	r0, r0, #4
 80227ba:	6028      	str	r0, [r5, #0]
 80227bc:	b001      	add	sp, #4
 80227be:	bdf0      	pop	{r4, r5, r6, r7, pc}

080227c0 <llhwc_cmn_set_dp_slp_mode>:
 80227c0:	b5b0      	push	{r4, r5, r7, lr}
 80227c2:	f247 3418 	movw	r4, #29464	@ 0x7318
 80227c6:	f2c2 0400 	movt	r4, #8192	@ 0x2000
 80227ca:	f894 1022 	ldrb.w	r1, [r4, #34]	@ 0x22
 80227ce:	2801      	cmp	r0, #1
 80227d0:	bf08      	it	eq
 80227d2:	2900      	cmpeq	r1, #0
 80227d4:	d032      	beq.n	802283c <llhwc_cmn_set_dp_slp_mode+0x7c>
 80227d6:	b900      	cbnz	r0, 80227da <llhwc_cmn_set_dp_slp_mode+0x1a>
 80227d8:	bb81      	cbnz	r1, 802283c <llhwc_cmn_set_dp_slp_mode+0x7c>
 80227da:	2801      	cmp	r0, #1
 80227dc:	d103      	bne.n	80227e6 <llhwc_cmn_set_dp_slp_mode+0x26>
 80227de:	2000      	movs	r0, #0
 80227e0:	f000 f82e 	bl	8022840 <llhwc_pwr_switch>
 80227e4:	e02a      	b.n	802283c <llhwc_cmn_set_dp_slp_mode+0x7c>
 80227e6:	bb48      	cbnz	r0, 802283c <llhwc_cmn_set_dp_slp_mode+0x7c>
 80227e8:	2005      	movs	r0, #5
 80227ea:	f884 0038 	strb.w	r0, [r4, #56]	@ 0x38
 80227ee:	2001      	movs	r0, #1
 80227f0:	2501      	movs	r5, #1
 80227f2:	f000 f825 	bl	8022840 <llhwc_pwr_switch>
 80227f6:	201c      	movs	r0, #28
 80227f8:	f6c4 0002 	movt	r0, #18434	@ 0x4802
 80227fc:	f8d0 1408 	ldr.w	r1, [r0, #1032]	@ 0x408
 8022800:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8022804:	f365 3150 	bfi	r1, r5, #13, #4
 8022808:	f8c0 1408 	str.w	r1, [r0, #1032]	@ 0x408
 802280c:	f240 4148 	movw	r1, #1096	@ 0x448
 8022810:	f6c4 0102 	movt	r1, #18434	@ 0x4802
 8022814:	600a      	str	r2, [r1, #0]
 8022816:	6802      	ldr	r2, [r0, #0]
 8022818:	f042 0220 	orr.w	r2, r2, #32
 802281c:	6002      	str	r2, [r0, #0]
 802281e:	6808      	ldr	r0, [r1, #0]
 8022820:	f040 0008 	orr.w	r0, r0, #8
 8022824:	6008      	str	r0, [r1, #0]
 8022826:	6808      	ldr	r0, [r1, #0]
 8022828:	f020 0004 	bic.w	r0, r0, #4
 802282c:	6008      	str	r0, [r1, #0]
 802282e:	f7fd fe4d 	bl	80204cc <llhwc_phy_recover_from_ll_dp_slp>
 8022832:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8022834:	b100      	cbz	r0, 8022838 <llhwc_cmn_set_dp_slp_mode+0x78>
 8022836:	4780      	blx	r0
 8022838:	f002 f883 	bl	8024942 <pta_recover_from_deep_sleep>
 802283c:	2000      	movs	r0, #0
 802283e:	bdb0      	pop	{r4, r5, r7, pc}

08022840 <llhwc_pwr_switch>:
 8022840:	b580      	push	{r7, lr}
 8022842:	f247 3e18 	movw	lr, #29464	@ 0x7318
 8022846:	f2c2 0e00 	movt	lr, #8192	@ 0x2000
 802284a:	f89e 2022 	ldrb.w	r2, [lr, #34]	@ 0x22
 802284e:	4282      	cmp	r2, r0
 8022850:	d01b      	beq.n	802288a <llhwc_pwr_switch+0x4a>
 8022852:	2801      	cmp	r0, #1
 8022854:	d103      	bne.n	802285e <llhwc_pwr_switch+0x1e>
 8022856:	f89e 2050 	ldrb.w	r2, [lr, #80]	@ 0x50
 802285a:	2a01      	cmp	r2, #1
 802285c:	d015      	beq.n	802288a <llhwc_pwr_switch+0x4a>
 802285e:	2208      	movs	r2, #8
 8022860:	f6c4 0202 	movt	r2, #18434	@ 0x4802
 8022864:	6813      	ldr	r3, [r2, #0]
 8022866:	f3c3 1c06 	ubfx	ip, r3, #4, #7
 802286a:	a309      	add	r3, pc, #36	@ (adr r3, 8022890 <llhwc_pwr_switch+0x50>)
 802286c:	5c1b      	ldrb	r3, [r3, r0]
 802286e:	459c      	cmp	ip, r3
 8022870:	d009      	beq.n	8022886 <llhwc_pwr_switch+0x46>
 8022872:	6811      	ldr	r1, [r2, #0]
 8022874:	f360 0102 	bfi	r1, r0, #0, #3
 8022878:	6011      	str	r1, [r2, #0]
 802287a:	bf00      	nop
 802287c:	6811      	ldr	r1, [r2, #0]
 802287e:	f3c1 1106 	ubfx	r1, r1, #4, #7
 8022882:	428b      	cmp	r3, r1
 8022884:	d1fa      	bne.n	802287c <llhwc_pwr_switch+0x3c>
 8022886:	f88e 0022 	strb.w	r0, [lr, #34]	@ 0x22
 802288a:	2000      	movs	r0, #0
 802288c:	bd80      	pop	{r7, pc}
 802288e:	bf00      	nop
 8022890:	230f0301 	.word	0x230f0301
 8022894:	3f1f172f 	.word	0x3f1f172f

08022898 <llhwc_cmn_is_dp_slp_enabled>:
 8022898:	f247 3018 	movw	r0, #29464	@ 0x7318
 802289c:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80228a0:	f890 0022 	ldrb.w	r0, [r0, #34]	@ 0x22
 80228a4:	fab0 f080 	clz	r0, r0
 80228a8:	0940      	lsrs	r0, r0, #5
 80228aa:	4770      	bx	lr

080228ac <llhwc_cmn_init>:
 80228ac:	b570      	push	{r4, r5, r6, lr}
 80228ae:	b090      	sub	sp, #64	@ 0x40
 80228b0:	a802      	add	r0, sp, #8
 80228b2:	2135      	movs	r1, #53	@ 0x35
 80228b4:	f00c fdb0 	bl	802f418 <__aeabi_memclr>
 80228b8:	2032      	movs	r0, #50	@ 0x32
 80228ba:	f88d 0004 	strb.w	r0, [sp, #4]
 80228be:	f644 7053 	movw	r0, #20307	@ 0x4f53
 80228c2:	f2c3 0057 	movt	r0, #12375	@ 0x3057
 80228c6:	f642 11f3 	movw	r1, #10739	@ 0x29f3
 80228ca:	9000      	str	r0, [sp, #0]
 80228cc:	f6c0 0102 	movt	r1, #2050	@ 0x802
 80228d0:	2001      	movs	r0, #1
 80228d2:	2202      	movs	r2, #2
 80228d4:	2502      	movs	r5, #2
 80228d6:	f7fc ff96 	bl	801f806 <bsp_intr_set_pri>
 80228da:	f642 212f 	movw	r1, #10799	@ 0x2a2f
 80228de:	f6c0 0102 	movt	r1, #2050	@ 0x802
 80228e2:	2002      	movs	r0, #2
 80228e4:	220a      	movs	r2, #10
 80228e6:	f7fc ff8e 	bl	801f806 <bsp_intr_set_pri>
 80228ea:	f247 3418 	movw	r4, #29464	@ 0x7318
 80228ee:	f2c2 0400 	movt	r4, #8192	@ 0x2000
 80228f2:	4620      	mov	r0, r4
 80228f4:	2100      	movs	r1, #0
 80228f6:	2258      	movs	r2, #88	@ 0x58
 80228f8:	2600      	movs	r6, #0
 80228fa:	f001 fe75 	bl	80245e8 <ble_memset>
 80228fe:	f247 308c 	movw	r0, #29580	@ 0x738c
 8022902:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8022906:	2100      	movs	r1, #0
 8022908:	2203      	movs	r2, #3
 802290a:	f001 fe6d 	bl	80245e8 <ble_memset>
 802290e:	f247 3090 	movw	r0, #29584	@ 0x7390
 8022912:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8022916:	21ff      	movs	r1, #255	@ 0xff
 8022918:	8001      	strh	r1, [r0, #0]
 802291a:	78c1      	ldrb	r1, [r0, #3]
 802291c:	7086      	strb	r6, [r0, #2]
 802291e:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 8022922:	70c1      	strb	r1, [r0, #3]
 8022924:	f884 504f 	strb.w	r5, [r4, #79]	@ 0x4f
 8022928:	f7fd fc96 	bl	8020258 <llhwc_phy_set_cfg_time>
 802292c:	f7ff fc2b 	bl	8022186 <ll_tx_pwr_if_tx_power_params_init>
 8022930:	f7ff fe16 	bl	8022560 <llhwc_cmn_reset>
 8022934:	f642 2035 	movw	r0, #10805	@ 0x2a35
 8022938:	f6c0 0002 	movt	r0, #2050	@ 0x802
 802293c:	2101      	movs	r1, #1
 802293e:	f001 fef4 	bl	802472a <intr_hndlr_reg>
 8022942:	f642 20c3 	movw	r0, #10947	@ 0x2ac3
 8022946:	f6c0 0002 	movt	r0, #2050	@ 0x802
 802294a:	2102      	movs	r1, #2
 802294c:	f001 feed 	bl	802472a <intr_hndlr_reg>
 8022950:	f247 3070 	movw	r0, #29552	@ 0x7370
 8022954:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8022958:	7d00      	ldrb	r0, [r0, #20]
 802295a:	2801      	cmp	r0, #1
 802295c:	d103      	bne.n	8022966 <llhwc_cmn_init+0xba>
 802295e:	2000      	movs	r0, #0
 8022960:	2100      	movs	r1, #0
 8022962:	f000 f91f 	bl	8022ba4 <llhwc_cmn_initial_rco_clbr>
 8022966:	f001 ffd9 	bl	802491c <pta_init_context>
 802296a:	ac02      	add	r4, sp, #8
 802296c:	4620      	mov	r0, r4
 802296e:	2100      	movs	r1, #0
 8022970:	f000 f942 	bl	8022bf8 <llhwc_cmn_read_cntrlr_ver_info>
 8022974:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8022978:	f89d 1021 	ldrb.w	r1, [sp, #33]	@ 0x21
 802297c:	4288      	cmp	r0, r1
 802297e:	d118      	bne.n	80229b2 <llhwc_cmn_init+0x106>
 8022980:	f89d 000e 	ldrb.w	r0, [sp, #14]
 8022984:	f89d 1023 	ldrb.w	r1, [sp, #35]	@ 0x23
 8022988:	4288      	cmp	r0, r1
 802298a:	d112      	bne.n	80229b2 <llhwc_cmn_init+0x106>
 802298c:	f89d 000f 	ldrb.w	r0, [sp, #15]
 8022990:	f89d 1024 	ldrb.w	r1, [sp, #36]	@ 0x24
 8022994:	4288      	cmp	r0, r1
 8022996:	d10c      	bne.n	80229b2 <llhwc_cmn_init+0x106>
 8022998:	f89d 0010 	ldrb.w	r0, [sp, #16]
 802299c:	f89d 1025 	ldrb.w	r1, [sp, #37]	@ 0x25
 80229a0:	4288      	cmp	r0, r1
 80229a2:	d106      	bne.n	80229b2 <llhwc_cmn_init+0x106>
 80229a4:	f104 000a 	add.w	r0, r4, #10
 80229a8:	4669      	mov	r1, sp
 80229aa:	2205      	movs	r2, #5
 80229ac:	f001 fe54 	bl	8024658 <ble_memcmp>
 80229b0:	b160      	cbz	r0, 80229cc <llhwc_cmn_init+0x120>
 80229b2:	20c5      	movs	r0, #197	@ 0xc5
 80229b4:	f7fc ff80 	bl	801f8b8 <bsp_debug_gpio_toggle>
 80229b8:	20c5      	movs	r0, #197	@ 0xc5
 80229ba:	f7fc ff7d 	bl	801f8b8 <bsp_debug_gpio_toggle>
 80229be:	2000      	movs	r0, #0
 80229c0:	2101      	movs	r1, #1
 80229c2:	f7fc ff2e 	bl	801f822 <bsp_assert>
 80229c6:	2000      	movs	r0, #0
 80229c8:	b010      	add	sp, #64	@ 0x40
 80229ca:	bd70      	pop	{r4, r5, r6, pc}
 80229cc:	f104 001f 	add.w	r0, r4, #31
 80229d0:	466c      	mov	r4, sp
 80229d2:	4621      	mov	r1, r4
 80229d4:	2205      	movs	r2, #5
 80229d6:	f001 fdb7 	bl	8024548 <ble_memcpy>
 80229da:	f240 4054 	movw	r0, #1108	@ 0x454
 80229de:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80229e2:	4621      	mov	r1, r4
 80229e4:	2205      	movs	r2, #5
 80229e6:	f001 fdaf 	bl	8024548 <ble_memcpy>
 80229ea:	20c5      	movs	r0, #197	@ 0xc5
 80229ec:	f7fc ff64 	bl	801f8b8 <bsp_debug_gpio_toggle>
 80229f0:	e7e9      	b.n	80229c6 <llhwc_cmn_init+0x11a>

080229f2 <ll_isr>:
 80229f2:	b580      	push	{r7, lr}
 80229f4:	2018      	movs	r0, #24
 80229f6:	f7fc ff5b 	bl	801f8b0 <bsp_debug_gpio_set>
 80229fa:	f7fd f9ad 	bl	801fd58 <llhwc_phy_is_phy_driver_busy>
 80229fe:	2802      	cmp	r0, #2
 8022a00:	d30b      	bcc.n	8022a1a <ll_isr+0x28>
 8022a02:	f7fd f871 	bl	801fae8 <llhwc_phy_get_phy_clbr_state>
 8022a06:	b140      	cbz	r0, 8022a1a <ll_isr+0x28>
 8022a08:	f240 4040 	movw	r0, #1088	@ 0x440
 8022a0c:	f6c4 0002 	movt	r0, #18434	@ 0x4802
 8022a10:	6800      	ldr	r0, [r0, #0]
 8022a12:	07c0      	lsls	r0, r0, #31
 8022a14:	bf18      	it	ne
 8022a16:	f7fd f805 	blne	801fa24 <llhwc_phy_clbr_seq_done_isr>
 8022a1a:	f000 fbd8 	bl	80231ce <ll_cmn_clr_isr>
 8022a1e:	2001      	movs	r0, #1
 8022a20:	f001 fe8a 	bl	8024738 <os_process_isr>
 8022a24:	2018      	movs	r0, #24
 8022a26:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8022a2a:	f7fc bf43 	b.w	801f8b4 <bsp_debug_gpio_clear>

08022a2e <ll_lw_prio_isr>:
 8022a2e:	2002      	movs	r0, #2
 8022a30:	f001 be82 	b.w	8024738 <os_process_isr>

08022a34 <ll_cmn_hg_isr>:
 8022a34:	b510      	push	{r4, lr}
 8022a36:	2008      	movs	r0, #8
 8022a38:	f6c4 0002 	movt	r0, #18434	@ 0x4802
 8022a3c:	6800      	ldr	r0, [r0, #0]
 8022a3e:	2101      	movs	r1, #1
 8022a40:	f000 0407 	and.w	r4, r0, #7
 8022a44:	f247 3000 	movw	r0, #29440	@ 0x7300
 8022a48:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8022a4c:	7001      	strb	r1, [r0, #0]
 8022a4e:	2015      	movs	r0, #21
 8022a50:	f7fc ff2e 	bl	801f8b0 <bsp_debug_gpio_set>
 8022a54:	2c04      	cmp	r4, #4
 8022a56:	bf18      	it	ne
 8022a58:	2c02      	cmpne	r4, #2
 8022a5a:	d109      	bne.n	8022a70 <ll_cmn_hg_isr+0x3c>
 8022a5c:	f247 3018 	movw	r0, #29464	@ 0x7318
 8022a60:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8022a64:	6841      	ldr	r1, [r0, #4]
 8022a66:	f247 30bd 	movw	r0, #29629	@ 0x73bd
 8022a6a:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8022a6e:	4788      	blx	r1
 8022a70:	f001 fe6b 	bl	802474a <os_wrapper_is_rtos_used>
 8022a74:	b120      	cbz	r0, 8022a80 <ll_cmn_hg_isr+0x4c>
 8022a76:	2015      	movs	r0, #21
 8022a78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022a7c:	f7fc bf1a 	b.w	801f8b4 <bsp_debug_gpio_clear>
 8022a80:	f247 308c 	movw	r0, #29580	@ 0x738c
 8022a84:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8022a88:	7800      	ldrb	r0, [r0, #0]
 8022a8a:	2801      	cmp	r0, #1
 8022a8c:	d005      	beq.n	8022a9a <ll_cmn_hg_isr+0x66>
 8022a8e:	2800      	cmp	r0, #0
 8022a90:	d1f1      	bne.n	8022a76 <ll_cmn_hg_isr+0x42>
 8022a92:	2002      	movs	r0, #2
 8022a94:	f001 fe50 	bl	8024738 <os_process_isr>
 8022a98:	e7ed      	b.n	8022a76 <ll_cmn_hg_isr+0x42>
 8022a9a:	f247 30bc 	movw	r0, #29628	@ 0x73bc
 8022a9e:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8022aa2:	7800      	ldrb	r0, [r0, #0]
 8022aa4:	2801      	cmp	r0, #1
 8022aa6:	d103      	bne.n	8022ab0 <ll_cmn_hg_isr+0x7c>
 8022aa8:	f7ff f9ec 	bl	8021e84 <os_timer_is_any_near_sw_timer_hg_prio>
 8022aac:	2801      	cmp	r0, #1
 8022aae:	d002      	beq.n	8022ab6 <ll_cmn_hg_isr+0x82>
 8022ab0:	f7fd f824 	bl	801fafc <llhwc_phy_is_phy_clbr_done_pnding>
 8022ab4:	b108      	cbz	r0, 8022aba <ll_cmn_hg_isr+0x86>
 8022ab6:	2001      	movs	r0, #1
 8022ab8:	e000      	b.n	8022abc <ll_cmn_hg_isr+0x88>
 8022aba:	2000      	movs	r0, #0
 8022abc:	f7fc fecd 	bl	801f85a <bsp_switch_to_lw_isr>
 8022ac0:	e7d9      	b.n	8022a76 <ll_cmn_hg_isr+0x42>

08022ac2 <ll_cmn_lw_isr>:
 8022ac2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022ac6:	2016      	movs	r0, #22
 8022ac8:	f7fc fef2 	bl	801f8b0 <bsp_debug_gpio_set>
 8022acc:	f248 17b4 	movw	r7, #33204	@ 0x81b4
 8022ad0:	f2c2 0700 	movt	r7, #8192	@ 0x2000
 8022ad4:	6838      	ldr	r0, [r7, #0]
 8022ad6:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8022ada:	f7fc ff06 	bl	801f8ea <os_rcrsv_mutex_wait>
 8022ade:	f247 3402 	movw	r4, #29442	@ 0x7302
 8022ae2:	f247 3000 	movw	r0, #29440	@ 0x7300
 8022ae6:	f2c2 0400 	movt	r4, #8192	@ 0x2000
 8022aea:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8022aee:	7821      	ldrb	r1, [r4, #0]
 8022af0:	7800      	ldrb	r0, [r0, #0]
 8022af2:	f247 3601 	movw	r6, #29441	@ 0x7301
 8022af6:	f2c2 0600 	movt	r6, #8192	@ 0x2000
 8022afa:	2901      	cmp	r1, #1
 8022afc:	4621      	mov	r1, r4
 8022afe:	7030      	strb	r0, [r6, #0]
 8022b00:	bf88      	it	hi
 8022b02:	4631      	movhi	r1, r6
 8022b04:	6838      	ldr	r0, [r7, #0]
 8022b06:	2500      	movs	r5, #0
 8022b08:	700d      	strb	r5, [r1, #0]
 8022b0a:	f7fc fef4 	bl	801f8f6 <os_rcrsv_mutex_release>
 8022b0e:	2008      	movs	r0, #8
 8022b10:	f6c4 0002 	movt	r0, #18434	@ 0x4802
 8022b14:	6807      	ldr	r7, [r0, #0]
 8022b16:	f247 30bc 	movw	r0, #29628	@ 0x73bc
 8022b1a:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8022b1e:	7801      	ldrb	r1, [r0, #0]
 8022b20:	f247 3818 	movw	r8, #29464	@ 0x7318
 8022b24:	f2c2 0800 	movt	r8, #8192	@ 0x2000
 8022b28:	b139      	cbz	r1, 8022b3a <ll_cmn_lw_isr+0x78>
 8022b2a:	7005      	strb	r5, [r0, #0]
 8022b2c:	f8d8 0000 	ldr.w	r0, [r8]
 8022b30:	4780      	blx	r0
 8022b32:	7820      	ldrb	r0, [r4, #0]
 8022b34:	7035      	strb	r5, [r6, #0]
 8022b36:	3001      	adds	r0, #1
 8022b38:	7020      	strb	r0, [r4, #0]
 8022b3a:	f7fc ffdf 	bl	801fafc <llhwc_phy_is_phy_clbr_done_pnding>
 8022b3e:	b130      	cbz	r0, 8022b4e <ll_cmn_lw_isr+0x8c>
 8022b40:	2000      	movs	r0, #0
 8022b42:	7030      	strb	r0, [r6, #0]
 8022b44:	f7fc feeb 	bl	801f91e <llhwc_phy_exec_clbr_done_clbk>
 8022b48:	7820      	ldrb	r0, [r4, #0]
 8022b4a:	3001      	adds	r0, #1
 8022b4c:	7020      	strb	r0, [r4, #0]
 8022b4e:	f247 3012 	movw	r0, #29458	@ 0x7312
 8022b52:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8022b56:	7801      	ldrb	r1, [r0, #0]
 8022b58:	b139      	cbz	r1, 8022b6a <ll_cmn_lw_isr+0xa8>
 8022b5a:	2500      	movs	r5, #0
 8022b5c:	7005      	strb	r5, [r0, #0]
 8022b5e:	f000 fbaf 	bl	80232c0 <llhwc_cmn_rco_isr>
 8022b62:	7820      	ldrb	r0, [r4, #0]
 8022b64:	7035      	strb	r5, [r6, #0]
 8022b66:	3001      	adds	r0, #1
 8022b68:	7020      	strb	r0, [r4, #0]
 8022b6a:	f247 308c 	movw	r0, #29580	@ 0x738c
 8022b6e:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8022b72:	7880      	ldrb	r0, [r0, #2]
 8022b74:	2802      	cmp	r0, #2
 8022b76:	bf1c      	itt	ne
 8022b78:	f007 0007 	andne.w	r0, r7, #7
 8022b7c:	2804      	cmpne	r0, #4
 8022b7e:	d10e      	bne.n	8022b9e <ll_cmn_lw_isr+0xdc>
 8022b80:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8022b84:	f247 30bd 	movw	r0, #29629	@ 0x73bd
 8022b88:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8022b8c:	4788      	blx	r1
 8022b8e:	7820      	ldrb	r0, [r4, #0]
 8022b90:	3001      	adds	r0, #1
 8022b92:	7020      	strb	r0, [r4, #0]
 8022b94:	2016      	movs	r0, #22
 8022b96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8022b9a:	f7fc be8b 	b.w	801f8b4 <bsp_debug_gpio_clear>
 8022b9e:	2802      	cmp	r0, #2
 8022ba0:	d0ee      	beq.n	8022b80 <ll_cmn_lw_isr+0xbe>
 8022ba2:	e7f7      	b.n	8022b94 <ll_cmn_lw_isr+0xd2>

08022ba4 <llhwc_cmn_initial_rco_clbr>:
 8022ba4:	b5b0      	push	{r4, r5, r7, lr}
 8022ba6:	f247 3570 	movw	r5, #29552	@ 0x7370
 8022baa:	460c      	mov	r4, r1
 8022bac:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 8022bb0:	2100      	movs	r1, #0
 8022bb2:	7129      	strb	r1, [r5, #4]
 8022bb4:	f247 3198 	movw	r1, #29592	@ 0x7398
 8022bb8:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8022bbc:	7608      	strb	r0, [r1, #24]
 8022bbe:	f244 000f 	movw	r0, #16399	@ 0x400f
 8022bc2:	f6c0 0002 	movt	r0, #2050	@ 0x802
 8022bc6:	f7fe ffee 	bl	8021ba6 <os_timer_rgstr_timer_activity_cbk>
 8022bca:	207f      	movs	r0, #127	@ 0x7f
 8022bcc:	f001 fa46 	bl	802405c <llhwc_cmn_hw_rco_clbr>
 8022bd0:	f240 4040 	movw	r0, #1088	@ 0x440
 8022bd4:	f6c4 0002 	movt	r0, #18434	@ 0x4802
 8022bd8:	7929      	ldrb	r1, [r5, #4]
 8022bda:	b911      	cbnz	r1, 8022be2 <llhwc_cmn_initial_rco_clbr+0x3e>
 8022bdc:	6801      	ldr	r1, [r0, #0]
 8022bde:	0689      	lsls	r1, r1, #26
 8022be0:	d5fa      	bpl.n	8022bd8 <llhwc_cmn_initial_rco_clbr+0x34>
 8022be2:	b13c      	cbz	r4, 8022bf4 <llhwc_cmn_initial_rco_clbr+0x50>
 8022be4:	6828      	ldr	r0, [r5, #0]
 8022be6:	f64b 0100 	movw	r1, #47104	@ 0xb800
 8022bea:	f2cf 213b 	movt	r1, #62011	@ 0xf23b
 8022bee:	fbb1 f0f0 	udiv	r0, r1, r0
 8022bf2:	8020      	strh	r0, [r4, #0]
 8022bf4:	2000      	movs	r0, #0
 8022bf6:	bdb0      	pop	{r4, r5, r7, pc}

08022bf8 <llhwc_cmn_read_cntrlr_ver_info>:
 8022bf8:	2800      	cmp	r0, #0
 8022bfa:	d03b      	beq.n	8022c74 <llhwc_cmn_read_cntrlr_ver_info+0x7c>
 8022bfc:	b5b0      	push	{r4, r5, r7, lr}
 8022bfe:	a13a      	add	r1, pc, #232	@ (adr r1, 8022ce8 <llhwc_cmn_read_cntrlr_ver_info+0xf0>)
 8022c00:	2235      	movs	r2, #53	@ 0x35
 8022c02:	4604      	mov	r4, r0
 8022c04:	f001 fca0 	bl	8024548 <ble_memcpy>
 8022c08:	2000      	movs	r0, #0
 8022c0a:	f6c4 0002 	movt	r0, #18434	@ 0x4802
 8022c0e:	6803      	ldr	r3, [r0, #0]
 8022c10:	f04f 0c03 	mov.w	ip, #3
 8022c14:	0e19      	lsrs	r1, r3, #24
 8022c16:	f36c 111f 	bfi	r1, ip, #4, #28
 8022c1a:	7121      	strb	r1, [r4, #4]
 8022c1c:	0d19      	lsrs	r1, r3, #20
 8022c1e:	f36c 111f 	bfi	r1, ip, #4, #28
 8022c22:	71a1      	strb	r1, [r4, #6]
 8022c24:	f3c3 2103 	ubfx	r1, r3, #8, #4
 8022c28:	22cd      	movs	r2, #205	@ 0xcd
 8022c2a:	fb01 f202 	mul.w	r2, r1, r2
 8022c2e:	0c18      	lsrs	r0, r3, #16
 8022c30:	0ad2      	lsrs	r2, r2, #11
 8022c32:	ea42 0282 	orr.w	r2, r2, r2, lsl #2
 8022c36:	f36c 101f 	bfi	r0, ip, #4, #28
 8022c3a:	71e0      	strb	r0, [r4, #7]
 8022c3c:	eba1 0042 	sub.w	r0, r1, r2, lsl #1
 8022c40:	f3c3 3103 	ubfx	r1, r3, #12, #4
 8022c44:	3041      	adds	r0, #65	@ 0x41
 8022c46:	2906      	cmp	r1, #6
 8022c48:	7220      	strb	r0, [r4, #8]
 8022c4a:	d814      	bhi.n	8022c76 <llhwc_cmn_read_cntrlr_ver_info+0x7e>
 8022c4c:	f04f 0c41 	mov.w	ip, #65	@ 0x41
 8022c50:	f04f 0e0b 	mov.w	lr, #11
 8022c54:	2247      	movs	r2, #71	@ 0x47
 8022c56:	200a      	movs	r0, #10
 8022c58:	e8df f001 	tbb	[pc, r1]
 8022c5c:	18150430 	.word	0x18150430
 8022c60:	002a211b 	.word	0x002a211b
 8022c64:	204c      	movs	r0, #76	@ 0x4c
 8022c66:	72a0      	strb	r0, [r4, #10]
 8022c68:	f04f 0c41 	mov.w	ip, #65	@ 0x41
 8022c6c:	f04f 0e0c 	mov.w	lr, #12
 8022c70:	2243      	movs	r2, #67	@ 0x43
 8022c72:	e01b      	b.n	8022cac <llhwc_cmn_read_cntrlr_ver_info+0xb4>
 8022c74:	4770      	bx	lr
 8022c76:	2258      	movs	r2, #88	@ 0x58
 8022c78:	f04f 0e0c 	mov.w	lr, #12
 8022c7c:	200b      	movs	r0, #11
 8022c7e:	f04f 0c58 	mov.w	ip, #88	@ 0x58
 8022c82:	72a2      	strb	r2, [r4, #10]
 8022c84:	e01a      	b.n	8022cbc <llhwc_cmn_read_cntrlr_ver_info+0xc4>
 8022c86:	f04f 0c41 	mov.w	ip, #65	@ 0x41
 8022c8a:	e013      	b.n	8022cb4 <llhwc_cmn_read_cntrlr_ver_info+0xbc>
 8022c8c:	f04f 0c50 	mov.w	ip, #80	@ 0x50
 8022c90:	e001      	b.n	8022c96 <llhwc_cmn_read_cntrlr_ver_info+0x9e>
 8022c92:	f04f 0c55 	mov.w	ip, #85	@ 0x55
 8022c96:	f04f 0e0b 	mov.w	lr, #11
 8022c9a:	224c      	movs	r2, #76	@ 0x4c
 8022c9c:	e00d      	b.n	8022cba <llhwc_cmn_read_cntrlr_ver_info+0xc2>
 8022c9e:	2053      	movs	r0, #83	@ 0x53
 8022ca0:	72a0      	strb	r0, [r4, #10]
 8022ca2:	f04f 0c57 	mov.w	ip, #87	@ 0x57
 8022ca6:	f04f 0e0c 	mov.w	lr, #12
 8022caa:	224f      	movs	r2, #79	@ 0x4f
 8022cac:	200b      	movs	r0, #11
 8022cae:	e005      	b.n	8022cbc <llhwc_cmn_read_cntrlr_ver_info+0xc4>
 8022cb0:	f04f 0c43 	mov.w	ip, #67	@ 0x43
 8022cb4:	f04f 0e0b 	mov.w	lr, #11
 8022cb8:	2245      	movs	r2, #69	@ 0x45
 8022cba:	200a      	movs	r0, #10
 8022cbc:	5422      	strb	r2, [r4, r0]
 8022cbe:	b2d8      	uxtb	r0, r3
 8022cc0:	0900      	lsrs	r0, r0, #4
 8022cc2:	3030      	adds	r0, #48	@ 0x30
 8022cc4:	f804 c00e 	strb.w	ip, [r4, lr]
 8022cc8:	7360      	strb	r0, [r4, #13]
 8022cca:	2003      	movs	r0, #3
 8022ccc:	f360 131f 	bfi	r3, r0, #4, #28
 8022cd0:	f240 4154 	movw	r1, #1108	@ 0x454
 8022cd4:	f104 001f 	add.w	r0, r4, #31
 8022cd8:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8022cdc:	2205      	movs	r2, #5
 8022cde:	73a3      	strb	r3, [r4, #14]
 8022ce0:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8022ce4:	f001 bc30 	b.w	8024548 <ble_memcpy>
 8022ce8:	3a4c5452 	.word	0x3a4c5452
 8022cec:	58582e58 	.word	0x58582e58
 8022cf0:	58582d58 	.word	0x58582d58
 8022cf4:	5f585830 	.word	0x5f585830
 8022cf8:	4d524946 	.word	0x4d524946
 8022cfc:	45524157 	.word	0x45524157
 8022d00:	332e313a 	.word	0x332e313a
 8022d04:	582d4130 	.word	0x582d4130
 8022d08:	58585858 	.word	0x58585858
 8022d0c:	574f535f 	.word	0x574f535f
 8022d10:	61503530 	.word	0x61503530
 8022d14:	5f686374 	.word	0x5f686374
 8022d18:	325f3656 	.word	0x325f3656
 8022d1c:	00000000 	.word	0x00000000

08022d20 <llhwc_polling>:
 8022d20:	b5b0      	push	{r4, r5, r7, lr}
 8022d22:	f8dd c010 	ldr.w	ip, [sp, #16]
 8022d26:	f240 0e00 	movw	lr, #0
 8022d2a:	f247 3494 	movw	r4, #29588	@ 0x7394
 8022d2e:	3001      	adds	r0, #1
 8022d30:	f6c4 0e02 	movt	lr, #18434	@ 0x4802
 8022d34:	f2c2 0400 	movt	r4, #8192	@ 0x2000
 8022d38:	3801      	subs	r0, #1
 8022d3a:	d009      	beq.n	8022d50 <llhwc_polling+0x30>
 8022d3c:	f851 500e 	ldr.w	r5, [r1, lr]
 8022d40:	4015      	ands	r5, r2
 8022d42:	40dd      	lsrs	r5, r3
 8022d44:	45ac      	cmp	ip, r5
 8022d46:	6025      	str	r5, [r4, #0]
 8022d48:	bf1c      	itt	ne
 8022d4a:	2000      	movne	r0, #0
 8022d4c:	bdb0      	popne	{r4, r5, r7, pc}
 8022d4e:	e7f3      	b.n	8022d38 <llhwc_polling+0x18>
 8022d50:	2000      	movs	r0, #0
 8022d52:	2101      	movs	r1, #1
 8022d54:	f7fc fd65 	bl	801f822 <bsp_assert>
 8022d58:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8022d5c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08022d60 <llhwc_slptmr_set>:
 8022d60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022d64:	b087      	sub	sp, #28
 8022d66:	4689      	mov	r9, r1
 8022d68:	680e      	ldr	r6, [r1, #0]
 8022d6a:	f8b1 b004 	ldrh.w	fp, [r1, #4]
 8022d6e:	798d      	ldrb	r5, [r1, #6]
 8022d70:	79c9      	ldrb	r1, [r1, #7]
 8022d72:	4682      	mov	sl, r0
 8022d74:	f24b 74ff 	movw	r4, #47103	@ 0xb7ff
 8022d78:	2019      	movs	r0, #25
 8022d7a:	9106      	str	r1, [sp, #24]
 8022d7c:	f6cf 6417 	movt	r4, #65047	@ 0xfe17
 8022d80:	f7fc fd96 	bl	801f8b0 <bsp_debug_gpio_set>
 8022d84:	f7fc fdad 	bl	801f8e2 <os_disable_isr>
 8022d88:	f247 3170 	movw	r1, #29552	@ 0x7370
 8022d8c:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8022d90:	7d08      	ldrb	r0, [r1, #20]
 8022d92:	2802      	cmp	r0, #2
 8022d94:	d064      	beq.n	8022e60 <llhwc_slptmr_set+0x100>
 8022d96:	2801      	cmp	r0, #1
 8022d98:	f040 814f 	bne.w	802303a <llhwc_slptmr_set+0x2da>
 8022d9c:	680f      	ldr	r7, [r1, #0]
 8022d9e:	2000      	movs	r0, #0
 8022da0:	f64f 010c 	movw	r1, #63500	@ 0xf80c
 8022da4:	463a      	mov	r2, r7
 8022da6:	2300      	movs	r3, #0
 8022da8:	46a0      	mov	r8, r4
 8022daa:	2400      	movs	r4, #0
 8022dac:	f7dd fa4e 	bl	800024c <__aeabi_uldivmod>
 8022db0:	f247 3218 	movw	r2, #29464	@ 0x7318
 8022db4:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8022db8:	8bd1      	ldrh	r1, [r2, #30]
 8022dba:	2d00      	cmp	r5, #0
 8022dbc:	9105      	str	r1, [sp, #20]
 8022dbe:	4629      	mov	r1, r5
 8022dc0:	bf18      	it	ne
 8022dc2:	2101      	movne	r1, #1
 8022dc4:	4546      	cmp	r6, r8
 8022dc6:	bf88      	it	hi
 8022dc8:	2401      	movhi	r4, #1
 8022dca:	ea41 0304 	orr.w	r3, r1, r4
 8022dce:	f892 1021 	ldrb.w	r1, [r2, #33]	@ 0x21
 8022dd2:	2b01      	cmp	r3, #1
 8022dd4:	46d0      	mov	r8, sl
 8022dd6:	9004      	str	r0, [sp, #16]
 8022dd8:	bf08      	it	eq
 8022dda:	2900      	cmpeq	r1, #0
 8022ddc:	d102      	bne.n	8022de4 <llhwc_slptmr_set+0x84>
 8022dde:	2101      	movs	r1, #1
 8022de0:	f882 1021 	strb.w	r1, [r2, #33]	@ 0x21
 8022de4:	2d00      	cmp	r5, #0
 8022de6:	bf18      	it	ne
 8022de8:	2501      	movne	r5, #1
 8022dea:	1e48      	subs	r0, r1, #1
 8022dec:	f8d9 1000 	ldr.w	r1, [r9]
 8022df0:	f24f 0a18 	movw	sl, #61464	@ 0xf018
 8022df4:	fab0 f080 	clz	r0, r0
 8022df8:	f2c0 0a01 	movt	sl, #1
 8022dfc:	0942      	lsrs	r2, r0, #5
 8022dfe:	fba1 010a 	umull	r0, r1, r1, sl
 8022e02:	4015      	ands	r5, r2
 8022e04:	463a      	mov	r2, r7
 8022e06:	2300      	movs	r3, #0
 8022e08:	f7dd fa20 	bl	800024c <__aeabi_uldivmod>
 8022e0c:	4606      	mov	r6, r0
 8022e0e:	460c      	mov	r4, r1
 8022e10:	fba0 010a 	umull	r0, r1, r0, sl
 8022e14:	fb04 110a 	mla	r1, r4, sl, r1
 8022e18:	463a      	mov	r2, r7
 8022e1a:	2300      	movs	r3, #0
 8022e1c:	f7dd fa16 	bl	800024c <__aeabi_uldivmod>
 8022e20:	0950      	lsrs	r0, r2, #5
 8022e22:	f242 0241 	movw	r2, #8257	@ 0x2041
 8022e26:	f6c0 0210 	movt	r2, #2064	@ 0x810
 8022e2a:	fba0 0102 	umull	r0, r1, r0, r2
 8022e2e:	eb0b 0b91 	add.w	fp, fp, r1, lsr #2
 8022e32:	f5b7 6f7e 	cmp.w	r7, #4064	@ 0xfe0
 8022e36:	d371      	bcc.n	8022f1c <llhwc_slptmr_set+0x1bc>
 8022e38:	0978      	lsrs	r0, r7, #5
 8022e3a:	fba0 0102 	umull	r0, r1, r0, r2
 8022e3e:	fa1f f28b 	uxth.w	r2, fp
 8022e42:	0888      	lsrs	r0, r1, #2
 8022e44:	4290      	cmp	r0, r2
 8022e46:	d269      	bcs.n	8022f1c <llhwc_slptmr_set+0x1bc>
 8022e48:	46c2      	mov	sl, r8
 8022e4a:	bf00      	nop
 8022e4c:	ebab 0b00 	sub.w	fp, fp, r0
 8022e50:	fa1f f18b 	uxth.w	r1, fp
 8022e54:	3601      	adds	r6, #1
 8022e56:	f144 0400 	adc.w	r4, r4, #0
 8022e5a:	4288      	cmp	r0, r1
 8022e5c:	d3f6      	bcc.n	8022e4c <llhwc_slptmr_set+0xec>
 8022e5e:	e05e      	b.n	8022f1e <llhwc_slptmr_set+0x1be>
 8022e60:	f247 3818 	movw	r8, #29464	@ 0x7318
 8022e64:	f2c2 0800 	movt	r8, #8192	@ 0x2000
 8022e68:	2d00      	cmp	r5, #0
 8022e6a:	4629      	mov	r1, r5
 8022e6c:	f04f 0200 	mov.w	r2, #0
 8022e70:	f8b8 001e 	ldrh.w	r0, [r8, #30]
 8022e74:	bf18      	it	ne
 8022e76:	2101      	movne	r1, #1
 8022e78:	42a6      	cmp	r6, r4
 8022e7a:	bf88      	it	hi
 8022e7c:	2201      	movhi	r2, #1
 8022e7e:	430a      	orrs	r2, r1
 8022e80:	f898 1021 	ldrb.w	r1, [r8, #33]	@ 0x21
 8022e84:	2a01      	cmp	r2, #1
 8022e86:	bf08      	it	eq
 8022e88:	2900      	cmpeq	r1, #0
 8022e8a:	d102      	bne.n	8022e92 <llhwc_slptmr_set+0x132>
 8022e8c:	2101      	movs	r1, #1
 8022e8e:	f888 1021 	strb.w	r1, [r8, #33]	@ 0x21
 8022e92:	3901      	subs	r1, #1
 8022e94:	fab1 f181 	clz	r1, r1
 8022e98:	2d00      	cmp	r5, #0
 8022e9a:	bf18      	it	ne
 8022e9c:	2501      	movne	r5, #1
 8022e9e:	094a      	lsrs	r2, r1, #5
 8022ea0:	0240      	lsls	r0, r0, #9
 8022ea2:	0274      	lsls	r4, r6, #9
 8022ea4:	ea40 51d6 	orr.w	r1, r0, r6, lsr #23
 8022ea8:	4215      	tst	r5, r2
 8022eaa:	bf18      	it	ne
 8022eac:	f501 7100 	addne.w	r1, r1, #512	@ 0x200
 8022eb0:	4620      	mov	r0, r4
 8022eb2:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8022eb6:	2300      	movs	r3, #0
 8022eb8:	f44f 77fa 	mov.w	r7, #500	@ 0x1f4
 8022ebc:	2500      	movs	r5, #0
 8022ebe:	f7dd f9c5 	bl	800024c <__aeabi_uldivmod>
 8022ec2:	4606      	mov	r6, r0
 8022ec4:	fb00 4017 	mls	r0, r0, r7, r4
 8022ec8:	f242 02c5 	movw	r2, #8389	@ 0x20c5
 8022ecc:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 8022ed0:	f3c0 004d 	ubfx	r0, r0, #1, #14
 8022ed4:	fb00 f002 	mul.w	r0, r0, r2
 8022ed8:	eb0b 5b10 	add.w	fp, fp, r0, lsr #20
 8022edc:	fa1f f08b 	uxth.w	r0, fp
 8022ee0:	281f      	cmp	r0, #31
 8022ee2:	d315      	bcc.n	8022f10 <llhwc_slptmr_set+0x1b0>
 8022ee4:	f1ab 001f 	sub.w	r0, fp, #31
 8022ee8:	b282      	uxth	r2, r0
 8022eea:	f648 0389 	movw	r3, #34953	@ 0x8889
 8022eee:	fb02 f203 	mul.w	r2, r2, r3
 8022ef2:	0d13      	lsrs	r3, r2, #20
 8022ef4:	011b      	lsls	r3, r3, #4
 8022ef6:	eba3 5312 	sub.w	r3, r3, r2, lsr #20
 8022efa:	eb16 5212 	adds.w	r2, r6, r2, lsr #20
 8022efe:	eba0 0043 	sub.w	r0, r0, r3, lsl #1
 8022f02:	f141 0100 	adc.w	r1, r1, #0
 8022f06:	1c56      	adds	r6, r2, #1
 8022f08:	f100 0b01 	add.w	fp, r0, #1
 8022f0c:	f141 0100 	adc.w	r1, r1, #0
 8022f10:	f8b8 001c 	ldrh.w	r0, [r8, #28]
 8022f14:	4281      	cmp	r1, r0
 8022f16:	bf88      	it	hi
 8022f18:	2501      	movhi	r5, #1
 8022f1a:	e08e      	b.n	802303a <llhwc_slptmr_set+0x2da>
 8022f1c:	46c2      	mov	sl, r8
 8022f1e:	f247 3198 	movw	r1, #29592	@ 0x7398
 8022f22:	9804      	ldr	r0, [sp, #16]
 8022f24:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8022f28:	684c      	ldr	r4, [r1, #4]
 8022f2a:	ea4f 0c40 	mov.w	ip, r0, lsl #1
 8022f2e:	9805      	ldr	r0, [sp, #20]
 8022f30:	2c00      	cmp	r4, #0
 8022f32:	eb05 0300 	add.w	r3, r5, r0
 8022f36:	d07d      	beq.n	8023034 <llhwc_slptmr_set+0x2d4>
 8022f38:	680f      	ldr	r7, [r1, #0]
 8022f3a:	2f01      	cmp	r7, #1
 8022f3c:	d07a      	beq.n	8023034 <llhwc_slptmr_set+0x2d4>
 8022f3e:	f247 300c 	movw	r0, #29452	@ 0x730c
 8022f42:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8022f46:	6800      	ldr	r0, [r0, #0]
 8022f48:	460d      	mov	r5, r1
 8022f4a:	fbb7 f1f4 	udiv	r1, r7, r4
 8022f4e:	eba6 0800 	sub.w	r8, r6, r0
 8022f52:	1c48      	adds	r0, r1, #1
 8022f54:	fbb8 f0f0 	udiv	r0, r8, r0
 8022f58:	f8cd a014 	str.w	sl, [sp, #20]
 8022f5c:	ea4f 7ae4 	mov.w	sl, r4, asr #31
 8022f60:	e9cd 3c03 	strd	r3, ip, [sp, #12]
 8022f64:	9002      	str	r0, [sp, #8]
 8022f66:	4638      	mov	r0, r7
 8022f68:	2100      	movs	r1, #0
 8022f6a:	4622      	mov	r2, r4
 8022f6c:	4653      	mov	r3, sl
 8022f6e:	f7dd f96d 	bl	800024c <__aeabi_uldivmod>
 8022f72:	1c42      	adds	r2, r0, #1
 8022f74:	f141 0300 	adc.w	r3, r1, #0
 8022f78:	4640      	mov	r0, r8
 8022f7a:	2100      	movs	r1, #0
 8022f7c:	f7dd f966 	bl	800024c <__aeabi_uldivmod>
 8022f80:	fba2 8004 	umull	r8, r0, r2, r4
 8022f84:	fb02 000a 	mla	r0, r2, sl, r0
 8022f88:	462a      	mov	r2, r5
 8022f8a:	fb03 0a04 	mla	sl, r3, r4, r0
 8022f8e:	7a13      	ldrb	r3, [r2, #8]
 8022f90:	696d      	ldr	r5, [r5, #20]
 8022f92:	9301      	str	r3, [sp, #4]
 8022f94:	fba7 2303 	umull	r2, r3, r7, r3
 8022f98:	fba8 0105 	umull	r0, r1, r8, r5
 8022f9c:	015b      	lsls	r3, r3, #5
 8022f9e:	fb0a 1105 	mla	r1, sl, r5, r1
 8022fa2:	ea43 63d2 	orr.w	r3, r3, r2, lsr #27
 8022fa6:	0152      	lsls	r2, r2, #5
 8022fa8:	f7dd f950 	bl	800024c <__aeabi_uldivmod>
 8022fac:	f247 3170 	movw	r1, #29552	@ 0x7370
 8022fb0:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8022fb4:	688c      	ldr	r4, [r1, #8]
 8022fb6:	2300      	movs	r3, #0
 8022fb8:	fba8 2104 	umull	r2, r1, r8, r4
 8022fbc:	fb0a 1104 	mla	r1, sl, r4, r1
 8022fc0:	4680      	mov	r8, r0
 8022fc2:	4610      	mov	r0, r2
 8022fc4:	463a      	mov	r2, r7
 8022fc6:	f7dd f941 	bl	800024c <__aeabi_uldivmod>
 8022fca:	f247 3198 	movw	r1, #29592	@ 0x7398
 8022fce:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8022fd2:	f891 1020 	ldrb.w	r1, [r1, #32]
 8022fd6:	b181      	cbz	r1, 8022ffa <llhwc_slptmr_set+0x29a>
 8022fd8:	f242 0241 	movw	r2, #8257	@ 0x2041
 8022fdc:	2901      	cmp	r1, #1
 8022fde:	f6c0 0210 	movt	r2, #2064	@ 0x810
 8022fe2:	d107      	bne.n	8022ff4 <llhwc_slptmr_set+0x294>
 8022fe4:	9901      	ldr	r1, [sp, #4]
 8022fe6:	3e01      	subs	r6, #1
 8022fe8:	0149      	lsls	r1, r1, #5
 8022fea:	fbb5 f1f1 	udiv	r1, r5, r1
 8022fee:	eba1 0108 	sub.w	r1, r1, r8
 8022ff2:	448b      	add	fp, r1
 8022ff4:	f8dd a014 	ldr.w	sl, [sp, #20]
 8022ff8:	e006      	b.n	8023008 <llhwc_slptmr_set+0x2a8>
 8022ffa:	f8dd a014 	ldr.w	sl, [sp, #20]
 8022ffe:	f242 0241 	movw	r2, #8257	@ 0x2041
 8023002:	44c3      	add	fp, r8
 8023004:	f6c0 0210 	movt	r2, #2064	@ 0x810
 8023008:	f10d 0c08 	add.w	ip, sp, #8
 802300c:	e89c 100a 	ldmia.w	ip, {r1, r3, ip}
 8023010:	fb04 0001 	mla	r0, r4, r1, r0
 8023014:	eb0b 0100 	add.w	r1, fp, r0
 8023018:	0968      	lsrs	r0, r5, #5
 802301a:	fba0 0202 	umull	r0, r2, r0, r2
 802301e:	0890      	lsrs	r0, r2, #2
 8023020:	f5b5 6f7e 	cmp.w	r5, #4064	@ 0xfe0
 8023024:	468b      	mov	fp, r1
 8023026:	d305      	bcc.n	8023034 <llhwc_slptmr_set+0x2d4>
 8023028:	fa1f f18b 	uxth.w	r1, fp
 802302c:	4288      	cmp	r0, r1
 802302e:	ebab 0100 	sub.w	r1, fp, r0
 8023032:	d3f5      	bcc.n	8023020 <llhwc_slptmr_set+0x2c0>
 8023034:	fb03 660c 	mla	r6, r3, ip, r6
 8023038:	2500      	movs	r5, #0
 802303a:	2400      	movs	r4, #0
 802303c:	f1ba 0f00 	cmp.w	sl, #0
 8023040:	f6c4 0402 	movt	r4, #18434	@ 0x4802
 8023044:	d00c      	beq.n	8023060 <llhwc_slptmr_set+0x300>
 8023046:	f247 20fc 	movw	r0, #29436	@ 0x72fc
 802304a:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 802304e:	6800      	ldr	r0, [r0, #0]
 8023050:	2103      	movs	r1, #3
 8023052:	f000 f88f 	bl	8023174 <llhwc_slptmr_polling>
 8023056:	68e0      	ldr	r0, [r4, #12]
 8023058:	f020 0020 	bic.w	r0, r0, #32
 802305c:	60e0      	str	r0, [r4, #12]
 802305e:	e021      	b.n	80230a4 <llhwc_slptmr_set+0x344>
 8023060:	f247 3018 	movw	r0, #29464	@ 0x7318
 8023064:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8023068:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 802306a:	f100 030c 	add.w	r3, r0, #12
 802306e:	2901      	cmp	r1, #1
 8023070:	bf1c      	itt	ne
 8023072:	f8d9 1000 	ldrne.w	r1, [r9]
 8023076:	6241      	strne	r1, [r0, #36]	@ 0x24
 8023078:	e9d9 1200 	ldrd	r1, r2, [r9]
 802307c:	f8a0 b018 	strh.w	fp, [r0, #24]
 8023080:	c346      	stmia	r3!, {r1, r2, r6}
 8023082:	9a06      	ldr	r2, [sp, #24]
 8023084:	7685      	strb	r5, [r0, #26]
 8023086:	fa1f f18b 	uxth.w	r1, fp
 802308a:	76c2      	strb	r2, [r0, #27]
 802308c:	f240 405c 	movw	r0, #1116	@ 0x45c
 8023090:	f6c4 0002 	movt	r0, #18434	@ 0x4802
 8023094:	6001      	str	r1, [r0, #0]
 8023096:	f7fd ff70 	bl	8020f7a <llhwc_phy_get_phy_strt_state>
 802309a:	b918      	cbnz	r0, 80230a4 <llhwc_slptmr_set+0x344>
 802309c:	2000      	movs	r0, #0
 802309e:	2101      	movs	r1, #1
 80230a0:	f7fd f924 	bl	80202ec <llhwc_phy_strt_stp>
 80230a4:	6961      	ldr	r1, [r4, #20]
 80230a6:	2200      	movs	r2, #0
 80230a8:	1d08      	adds	r0, r1, #4
 80230aa:	f142 0200 	adc.w	r2, r2, #0
 80230ae:	f005 0301 	and.w	r3, r5, #1
 80230b2:	1a37      	subs	r7, r6, r0
 80230b4:	eb73 0202 	sbcs.w	r2, r3, r2
 80230b8:	bf28      	it	cs
 80230ba:	4630      	movcs	r0, r6
 80230bc:	f1ba 0f01 	cmp.w	sl, #1
 80230c0:	bf14      	ite	ne
 80230c2:	4630      	movne	r0, r6
 80230c4:	2d01      	cmpeq	r5, #1
 80230c6:	d01b      	beq.n	8023100 <llhwc_slptmr_set+0x3a0>
 80230c8:	f247 3118 	movw	r1, #29464	@ 0x7318
 80230cc:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 80230d0:	f891 2020 	ldrb.w	r2, [r1, #32]
 80230d4:	b942      	cbnz	r2, 80230e8 <llhwc_slptmr_set+0x388>
 80230d6:	f24b 72ff 	movw	r2, #47103	@ 0xb7ff
 80230da:	f6cf 6217 	movt	r2, #65047	@ 0xfe17
 80230de:	4290      	cmp	r0, r2
 80230e0:	bf84      	itt	hi
 80230e2:	2201      	movhi	r2, #1
 80230e4:	f881 2020 	strbhi.w	r2, [r1, #32]
 80230e8:	f1ba 0f00 	cmp.w	sl, #0
 80230ec:	d11c      	bne.n	8023128 <llhwc_slptmr_set+0x3c8>
 80230ee:	1c42      	adds	r2, r0, #1
 80230f0:	2a01      	cmp	r2, #1
 80230f2:	d819      	bhi.n	8023128 <llhwc_slptmr_set+0x3c8>
 80230f4:	2001      	movs	r0, #1
 80230f6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80230fa:	f881 0020 	strb.w	r0, [r1, #32]
 80230fe:	e02c      	b.n	802315a <llhwc_slptmr_set+0x3fa>
 8023100:	f111 0f05 	cmn.w	r1, #5
 8023104:	d8e0      	bhi.n	80230c8 <llhwc_slptmr_set+0x368>
 8023106:	f64f 72fd 	movw	r2, #65533	@ 0xfffd
 802310a:	f6cf 62ff 	movt	r2, #65279	@ 0xfeff
 802310e:	4291      	cmp	r1, r2
 8023110:	d3da      	bcc.n	80230c8 <llhwc_slptmr_set+0x368>
 8023112:	f247 3018 	movw	r0, #29464	@ 0x7318
 8023116:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 802311a:	2101      	movs	r1, #1
 802311c:	f880 104e 	strb.w	r1, [r0, #78]	@ 0x4e
 8023120:	f880 1020 	strb.w	r1, [r0, #32]
 8023124:	f06f 0001 	mvn.w	r0, #1
 8023128:	a110      	add	r1, pc, #64	@ (adr r1, 802316c <llhwc_slptmr_set+0x40c>)
 802312a:	f851 102a 	ldr.w	r1, [r1, sl, lsl #2]
 802312e:	eb0a 024a 	add.w	r2, sl, sl, lsl #1
 8023132:	5108      	str	r0, [r1, r4]
 8023134:	f641 5048 	movw	r0, #7496	@ 0x1d48
 8023138:	f6c0 0003 	movt	r0, #2051	@ 0x803
 802313c:	f850 1022 	ldr.w	r1, [r0, r2, lsl #2]
 8023140:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8023144:	590a      	ldr	r2, [r1, r4]
 8023146:	e9d0 3001 	ldrd	r3, r0, [r0, #4]
 802314a:	2701      	movs	r7, #1
 802314c:	439a      	bics	r2, r3
 802314e:	fa07 f000 	lsl.w	r0, r7, r0
 8023152:	4018      	ands	r0, r3
 8023154:	4410      	add	r0, r2
 8023156:	5108      	str	r0, [r1, r4]
 8023158:	2400      	movs	r4, #0
 802315a:	f7fc fbc4 	bl	801f8e6 <os_enable_isr>
 802315e:	2019      	movs	r0, #25
 8023160:	f7fc fba8 	bl	801f8b4 <bsp_debug_gpio_clear>
 8023164:	4620      	mov	r0, r4
 8023166:	b007      	add	sp, #28
 8023168:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802316c:	00000010 	.word	0x00000010
 8023170:	00000018 	.word	0x00000018

08023174 <llhwc_slptmr_polling>:
 8023174:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023176:	b081      	sub	sp, #4
 8023178:	4605      	mov	r5, r0
 802317a:	2000      	movs	r0, #0
 802317c:	460c      	mov	r4, r1
 802317e:	9000      	str	r0, [sp, #0]
 8023180:	f7fc fbaf 	bl	801f8e2 <os_disable_isr>
 8023184:	426f      	negs	r7, r5
 8023186:	466e      	mov	r6, sp
 8023188:	4630      	mov	r0, r6
 802318a:	f7ff f95e 	bl	802244a <llhwc_slptmr_get>
 802318e:	9800      	ldr	r0, [sp, #0]
 8023190:	4639      	mov	r1, r7
 8023192:	42a8      	cmp	r0, r5
 8023194:	bf38      	it	cc
 8023196:	43e9      	mvncc	r1, r5
 8023198:	4408      	add	r0, r1
 802319a:	42a0      	cmp	r0, r4
 802319c:	d3f4      	bcc.n	8023188 <llhwc_slptmr_polling+0x14>
 802319e:	b001      	add	sp, #4
 80231a0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80231a4:	f7fc bb9f 	b.w	801f8e6 <os_enable_isr>

080231a8 <llhwc_slptmr_stop>:
 80231a8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80231ac:	f641 5148 	movw	r1, #7496	@ 0x1d48
 80231b0:	f6c0 0103 	movt	r1, #2051	@ 0x803
 80231b4:	f851 2020 	ldr.w	r2, [r1, r0, lsl #2]
 80231b8:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 80231bc:	2100      	movs	r1, #0
 80231be:	f6c4 0102 	movt	r1, #18434	@ 0x4802
 80231c2:	5853      	ldr	r3, [r2, r1]
 80231c4:	6840      	ldr	r0, [r0, #4]
 80231c6:	ea23 0000 	bic.w	r0, r3, r0
 80231ca:	5050      	str	r0, [r2, r1]
 80231cc:	4770      	bx	lr

080231ce <ll_cmn_clr_isr>:
 80231ce:	b5b0      	push	{r4, r5, r7, lr}
 80231d0:	240c      	movs	r4, #12
 80231d2:	2014      	movs	r0, #20
 80231d4:	f6c4 0402 	movt	r4, #18434	@ 0x4802
 80231d8:	f7fc fb6a 	bl	801f8b0 <bsp_debug_gpio_set>
 80231dc:	6920      	ldr	r0, [r4, #16]
 80231de:	f040 0080 	orr.w	r0, r0, #128	@ 0x80
 80231e2:	6120      	str	r0, [r4, #16]
 80231e4:	6920      	ldr	r0, [r4, #16]
 80231e6:	f020 0080 	bic.w	r0, r0, #128	@ 0x80
 80231ea:	6120      	str	r0, [r4, #16]
 80231ec:	6820      	ldr	r0, [r4, #0]
 80231ee:	0700      	lsls	r0, r0, #28
 80231f0:	d517      	bpl.n	8023222 <ll_cmn_clr_isr+0x54>
 80231f2:	6820      	ldr	r0, [r4, #0]
 80231f4:	f020 0040 	bic.w	r0, r0, #64	@ 0x40
 80231f8:	6020      	str	r0, [r4, #0]
 80231fa:	6820      	ldr	r0, [r4, #0]
 80231fc:	f040 0010 	orr.w	r0, r0, #16
 8023200:	6020      	str	r0, [r4, #0]
 8023202:	6820      	ldr	r0, [r4, #0]
 8023204:	f020 0010 	bic.w	r0, r0, #16
 8023208:	6020      	str	r0, [r4, #0]
 802320a:	f247 20fc 	movw	r0, #29436	@ 0x72fc
 802320e:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8023212:	f7ff f91a 	bl	802244a <llhwc_slptmr_get>
 8023216:	f247 30bc 	movw	r0, #29628	@ 0x73bc
 802321a:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 802321e:	2101      	movs	r1, #1
 8023220:	7001      	strb	r1, [r0, #0]
 8023222:	6820      	ldr	r0, [r4, #0]
 8023224:	f240 4544 	movw	r5, #1092	@ 0x444
 8023228:	0580      	lsls	r0, r0, #22
 802322a:	f6c4 0502 	movt	r5, #18434	@ 0x4802
 802322e:	d416      	bmi.n	802325e <ll_cmn_clr_isr+0x90>
 8023230:	f855 0c04 	ldr.w	r0, [r5, #-4]
 8023234:	06c0      	lsls	r0, r0, #27
 8023236:	d527      	bpl.n	8023288 <ll_cmn_clr_isr+0xba>
 8023238:	6868      	ldr	r0, [r5, #4]
 802323a:	2101      	movs	r1, #1
 802323c:	f040 0010 	orr.w	r0, r0, #16
 8023240:	6068      	str	r0, [r5, #4]
 8023242:	6828      	ldr	r0, [r5, #0]
 8023244:	f040 0010 	orr.w	r0, r0, #16
 8023248:	6028      	str	r0, [r5, #0]
 802324a:	6828      	ldr	r0, [r5, #0]
 802324c:	f020 0010 	bic.w	r0, r0, #16
 8023250:	6028      	str	r0, [r5, #0]
 8023252:	f247 30bd 	movw	r0, #29629	@ 0x73bd
 8023256:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 802325a:	7001      	strb	r1, [r0, #0]
 802325c:	e014      	b.n	8023288 <ll_cmn_clr_isr+0xba>
 802325e:	2017      	movs	r0, #23
 8023260:	f7fc fb2a 	bl	801f8b8 <bsp_debug_gpio_toggle>
 8023264:	f247 30bd 	movw	r0, #29629	@ 0x73bd
 8023268:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 802326c:	2101      	movs	r1, #1
 802326e:	7001      	strb	r1, [r0, #0]
 8023270:	6820      	ldr	r0, [r4, #0]
 8023272:	f020 0001 	bic.w	r0, r0, #1
 8023276:	6020      	str	r0, [r4, #0]
 8023278:	6820      	ldr	r0, [r4, #0]
 802327a:	f040 0080 	orr.w	r0, r0, #128	@ 0x80
 802327e:	6020      	str	r0, [r4, #0]
 8023280:	6820      	ldr	r0, [r4, #0]
 8023282:	f020 0080 	bic.w	r0, r0, #128	@ 0x80
 8023286:	6020      	str	r0, [r4, #0]
 8023288:	f855 0c04 	ldr.w	r0, [r5, #-4]
 802328c:	0680      	lsls	r0, r0, #26
 802328e:	d511      	bpl.n	80232b4 <ll_cmn_clr_isr+0xe6>
 8023290:	6868      	ldr	r0, [r5, #4]
 8023292:	2101      	movs	r1, #1
 8023294:	f040 0020 	orr.w	r0, r0, #32
 8023298:	6068      	str	r0, [r5, #4]
 802329a:	6828      	ldr	r0, [r5, #0]
 802329c:	f040 0020 	orr.w	r0, r0, #32
 80232a0:	6028      	str	r0, [r5, #0]
 80232a2:	6828      	ldr	r0, [r5, #0]
 80232a4:	f020 0020 	bic.w	r0, r0, #32
 80232a8:	6028      	str	r0, [r5, #0]
 80232aa:	f247 3012 	movw	r0, #29458	@ 0x7312
 80232ae:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80232b2:	7001      	strb	r1, [r0, #0]
 80232b4:	2014      	movs	r0, #20
 80232b6:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80232ba:	f7fc bafb 	b.w	801f8b4 <bsp_debug_gpio_clear>
	...

080232c0 <llhwc_cmn_rco_isr>:
 80232c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80232c4:	b081      	sub	sp, #4
 80232c6:	2714      	movs	r7, #20
 80232c8:	2037      	movs	r0, #55	@ 0x37
 80232ca:	f6c4 0702 	movt	r7, #18434	@ 0x4802
 80232ce:	f7fc faef 	bl	801f8b0 <bsp_debug_gpio_set>
 80232d2:	f8d7 4470 	ldr.w	r4, [r7, #1136]	@ 0x470
 80232d6:	2000      	movs	r0, #0
 80232d8:	2105      	movs	r1, #5
 80232da:	f000 fc79 	bl	8023bd0 <llhwc_cmn_control_aclk>
 80232de:	f247 3698 	movw	r6, #29592	@ 0x7398
 80232e2:	f2c2 0600 	movt	r6, #8192	@ 0x2000
 80232e6:	6930      	ldr	r0, [r6, #16]
 80232e8:	2800      	cmp	r0, #0
 80232ea:	f000 80d0 	beq.w	802348e <llhwc_cmn_rco_isr+0x1ce>
 80232ee:	2001      	movs	r0, #1
 80232f0:	f3c4 2413 	ubfx	r4, r4, #8, #20
 80232f4:	f7fc fac9 	bl	801f88a <bsp_rco_clbr_not>
 80232f8:	f8d7 0470 	ldr.w	r0, [r7, #1136]	@ 0x470
 80232fc:	f247 3204 	movw	r2, #29444	@ 0x7304
 8023300:	f020 0001 	bic.w	r0, r0, #1
 8023304:	f8c7 0470 	str.w	r0, [r7, #1136]	@ 0x470
 8023308:	6839      	ldr	r1, [r7, #0]
 802330a:	7e30      	ldrb	r0, [r6, #24]
 802330c:	3101      	adds	r1, #1
 802330e:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8023312:	2801      	cmp	r0, #1
 8023314:	6011      	str	r1, [r2, #0]
 8023316:	d829      	bhi.n	802336c <llhwc_cmn_rco_isr+0xac>
 8023318:	4620      	mov	r0, r4
 802331a:	2101      	movs	r1, #1
 802331c:	2c00      	cmp	r4, #0
 802331e:	bf18      	it	ne
 8023320:	2001      	movne	r0, #1
 8023322:	2501      	movs	r5, #1
 8023324:	f7fc fa7d 	bl	801f822 <bsp_assert>
 8023328:	2c00      	cmp	r4, #0
 802332a:	f000 80b0 	beq.w	802348e <llhwc_cmn_rco_isr+0x1ce>
 802332e:	f24f 0118 	movw	r1, #61464	@ 0xf018
 8023332:	f2c0 0101 	movt	r1, #1
 8023336:	f247 3070 	movw	r0, #29552	@ 0x7370
 802333a:	1c4a      	adds	r2, r1, #1
 802333c:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8023340:	4294      	cmp	r4, r2
 8023342:	6004      	str	r4, [r0, #0]
 8023344:	6174      	str	r4, [r6, #20]
 8023346:	7105      	strb	r5, [r0, #4]
 8023348:	d92f      	bls.n	80233aa <llhwc_cmn_rco_isr+0xea>
 802334a:	f24d 531f 	movw	r3, #54559	@ 0xd51f
 802334e:	08e2      	lsrs	r2, r4, #3
 8023350:	f2c0 4320 	movt	r3, #1056	@ 0x420
 8023354:	fba2 2303 	umull	r2, r3, r2, r3
 8023358:	0a1a      	lsrs	r2, r3, #8
 802335a:	fb02 4111 	mls	r1, r2, r1, r4
 802335e:	2701      	movs	r7, #1
 8023360:	2900      	cmp	r1, #0
 8023362:	bf18      	it	ne
 8023364:	eb07 2213 	addne.w	r2, r7, r3, lsr #8
 8023368:	1e51      	subs	r1, r2, #1
 802336a:	e01f      	b.n	80233ac <llhwc_cmn_rco_isr+0xec>
 802336c:	2802      	cmp	r0, #2
 802336e:	f040 808e 	bne.w	802348e <llhwc_cmn_rco_isr+0x1ce>
 8023372:	f247 3a70 	movw	sl, #29552	@ 0x7370
 8023376:	f2c2 0a00 	movt	sl, #8192	@ 0x2000
 802337a:	f8da b000 	ldr.w	fp, [sl]
 802337e:	ebc4 10c4 	rsb	r0, r4, r4, lsl #7
 8023382:	7a31      	ldrb	r1, [r6, #8]
 8023384:	e9d6 9800 	ldrd	r9, r8, [r6]
 8023388:	eb0b 024b 	add.w	r2, fp, fp, lsl #1
 802338c:	fbb0 fcf1 	udiv	ip, r0, r1
 8023390:	f241 7059 	movw	r0, #5977	@ 0x1759
 8023394:	f2cd 10b7 	movt	r0, #53687	@ 0xd1b7
 8023398:	fba2 0200 	umull	r0, r2, r2, r0
 802339c:	45dc      	cmp	ip, fp
 802339e:	6174      	str	r4, [r6, #20]
 80233a0:	d206      	bcs.n	80233b0 <llhwc_cmn_rco_isr+0xf0>
 80233a2:	2000      	movs	r0, #0
 80233a4:	4663      	mov	r3, ip
 80233a6:	4659      	mov	r1, fp
 80233a8:	e006      	b.n	80233b8 <llhwc_cmn_rco_isr+0xf8>
 80233aa:	2100      	movs	r1, #0
 80233ac:	6101      	str	r1, [r0, #16]
 80233ae:	e06e      	b.n	802348e <llhwc_cmn_rco_isr+0x1ce>
 80233b0:	d906      	bls.n	80233c0 <llhwc_cmn_rco_isr+0x100>
 80233b2:	2001      	movs	r0, #1
 80233b4:	465b      	mov	r3, fp
 80233b6:	4661      	mov	r1, ip
 80233b8:	0b52      	lsrs	r2, r2, #13
 80233ba:	1acb      	subs	r3, r1, r3
 80233bc:	4293      	cmp	r3, r2
 80233be:	d802      	bhi.n	80233c6 <llhwc_cmn_rco_isr+0x106>
 80233c0:	2300      	movs	r3, #0
 80233c2:	2002      	movs	r0, #2
 80233c4:	46dc      	mov	ip, fp
 80233c6:	2200      	movs	r2, #0
 80233c8:	f1bb 0f00 	cmp.w	fp, #0
 80233cc:	f886 0020 	strb.w	r0, [r6, #32]
 80233d0:	d009      	beq.n	80233e6 <llhwc_cmn_rco_isr+0x126>
 80233d2:	4659      	mov	r1, fp
 80233d4:	460d      	mov	r5, r1
 80233d6:	fbb3 f1f1 	udiv	r1, r3, r1
 80233da:	fb01 3115 	mls	r1, r1, r5, r3
 80233de:	462b      	mov	r3, r5
 80233e0:	2900      	cmp	r1, #0
 80233e2:	d1f7      	bne.n	80233d4 <llhwc_cmn_rco_isr+0x114>
 80233e4:	e000      	b.n	80233e8 <llhwc_cmn_rco_isr+0x128>
 80233e6:	461d      	mov	r5, r3
 80233e8:	2802      	cmp	r0, #2
 80233ea:	d00b      	beq.n	8023404 <llhwc_cmn_rco_isr+0x144>
 80233ec:	2801      	cmp	r0, #1
 80233ee:	d010      	beq.n	8023412 <llhwc_cmn_rco_isr+0x152>
 80233f0:	2800      	cmp	r0, #0
 80233f2:	464b      	mov	r3, r9
 80233f4:	4640      	mov	r0, r8
 80233f6:	d118      	bne.n	802342a <llhwc_cmn_rco_isr+0x16a>
 80233f8:	ebbb 000c 	subs.w	r0, fp, ip
 80233fc:	f04f 0100 	mov.w	r1, #0
 8023400:	4191      	sbcs	r1, r2
 8023402:	e00a      	b.n	802341a <llhwc_cmn_rco_isr+0x15a>
 8023404:	2000      	movs	r0, #0
 8023406:	2101      	movs	r1, #1
 8023408:	e9c6 1000 	strd	r1, r0, [r6]
 802340c:	f8ca 0008 	str.w	r0, [sl, #8]
 8023410:	e037      	b.n	8023482 <llhwc_cmn_rco_isr+0x1c2>
 8023412:	ebbc 000b 	subs.w	r0, ip, fp
 8023416:	f162 0100 	sbc.w	r1, r2, #0
 802341a:	462a      	mov	r2, r5
 802341c:	2300      	movs	r3, #0
 802341e:	f7dc ff15 	bl	800024c <__aeabi_uldivmod>
 8023422:	fbbb f3f5 	udiv	r3, fp, r5
 8023426:	e9c6 3000 	strd	r3, r0, [r6]
 802342a:	f04f 0100 	mov.w	r1, #0
 802342e:	b160      	cbz	r0, 802344a <llhwc_cmn_rco_isr+0x18a>
 8023430:	2b01      	cmp	r3, #1
 8023432:	d00a      	beq.n	802344a <llhwc_cmn_rco_isr+0x18a>
 8023434:	fbb3 f1f0 	udiv	r1, r3, r0
 8023438:	ebc3 12c3 	rsb	r2, r3, r3, lsl #7
 802343c:	fb01 3110 	mls	r1, r1, r0, r3
 8023440:	0152      	lsls	r2, r2, #5
 8023442:	fb01 f104 	mul.w	r1, r1, r4
 8023446:	fbb1 f1f2 	udiv	r1, r1, r2
 802344a:	f8ca 1008 	str.w	r1, [sl, #8]
 802344e:	b1c0      	cbz	r0, 8023482 <llhwc_cmn_rco_isr+0x1c2>
 8023450:	2b01      	cmp	r3, #1
 8023452:	d016      	beq.n	8023482 <llhwc_cmn_rco_isr+0x1c2>
 8023454:	7eb1      	ldrb	r1, [r6, #26]
 8023456:	b301      	cbz	r1, 802349a <llhwc_cmn_rco_isr+0x1da>
 8023458:	454b      	cmp	r3, r9
 802345a:	bf08      	it	eq
 802345c:	4540      	cmpeq	r0, r8
 802345e:	d016      	beq.n	802348e <llhwc_cmn_rco_isr+0x1ce>
 8023460:	2038      	movs	r0, #56	@ 0x38
 8023462:	f7fc fa25 	bl	801f8b0 <bsp_debug_gpio_set>
 8023466:	f7fc fa3c 	bl	801f8e2 <os_disable_isr>
 802346a:	2001      	movs	r0, #1
 802346c:	f000 fd8a 	bl	8023f84 <llhwc_cmn_hw_rco_compnstn_enable>
 8023470:	2038      	movs	r0, #56	@ 0x38
 8023472:	f7fc fa1f 	bl	801f8b4 <bsp_debug_gpio_clear>
 8023476:	f7fc fa36 	bl	801f8e6 <os_enable_isr>
 802347a:	4620      	mov	r0, r4
 802347c:	f000 fe1f 	bl	80240be <llhwc_cmn_update_rco_timer>
 8023480:	e005      	b.n	802348e <llhwc_cmn_rco_isr+0x1ce>
 8023482:	2000      	movs	r0, #0
 8023484:	76b0      	strb	r0, [r6, #26]
 8023486:	6938      	ldr	r0, [r7, #16]
 8023488:	f420 3080 	bic.w	r0, r0, #65536	@ 0x10000
 802348c:	6138      	str	r0, [r7, #16]
 802348e:	2037      	movs	r0, #55	@ 0x37
 8023490:	b001      	add	sp, #4
 8023492:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023496:	f7fc ba0d 	b.w	801f8b4 <bsp_debug_gpio_clear>
 802349a:	2038      	movs	r0, #56	@ 0x38
 802349c:	f7fc fa08 	bl	801f8b0 <bsp_debug_gpio_set>
 80234a0:	2001      	movs	r0, #1
 80234a2:	f000 fd6f 	bl	8023f84 <llhwc_cmn_hw_rco_compnstn_enable>
 80234a6:	4620      	mov	r0, r4
 80234a8:	f000 fe09 	bl	80240be <llhwc_cmn_update_rco_timer>
 80234ac:	2038      	movs	r0, #56	@ 0x38
 80234ae:	f7fc fa01 	bl	801f8b4 <bsp_debug_gpio_clear>
 80234b2:	e7ec      	b.n	802348e <llhwc_cmn_rco_isr+0x1ce>

080234b4 <get_pwr_domain>:
 80234b4:	f247 3018 	movw	r0, #29464	@ 0x7318
 80234b8:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80234bc:	f890 0022 	ldrb.w	r0, [r0, #34]	@ 0x22
 80234c0:	4770      	bx	lr

080234c2 <llhwc_cmn_reg_isr>:
 80234c2:	2802      	cmp	r0, #2
 80234c4:	d008      	beq.n	80234d8 <llhwc_cmn_reg_isr+0x16>
 80234c6:	2801      	cmp	r0, #1
 80234c8:	bf18      	it	ne
 80234ca:	4770      	bxne	lr
 80234cc:	f247 3018 	movw	r0, #29464	@ 0x7318
 80234d0:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80234d4:	6041      	str	r1, [r0, #4]
 80234d6:	4770      	bx	lr
 80234d8:	f247 3018 	movw	r0, #29464	@ 0x7318
 80234dc:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80234e0:	6081      	str	r1, [r0, #8]
 80234e2:	4770      	bx	lr

080234e4 <llhwc_cmn_set_phy>:
 80234e4:	b570      	push	{r4, r5, r6, lr}
 80234e6:	4605      	mov	r5, r0
 80234e8:	f240 4080 	movw	r0, #1152	@ 0x480
 80234ec:	f6c4 0002 	movt	r0, #18434	@ 0x4802
 80234f0:	460c      	mov	r4, r1
 80234f2:	6801      	ldr	r1, [r0, #0]
 80234f4:	9e04      	ldr	r6, [sp, #16]
 80234f6:	f364 0102 	bfi	r1, r4, #0, #3
 80234fa:	6001      	str	r1, [r0, #0]
 80234fc:	4628      	mov	r0, r5
 80234fe:	4621      	mov	r1, r4
 8023500:	f7fd fcec 	bl	8020edc <llhwc_phy_get_ltncy>
 8023504:	4628      	mov	r0, r5
 8023506:	4621      	mov	r1, r4
 8023508:	4632      	mov	r2, r6
 802350a:	f7fd fc83 	bl	8020e14 <llhwc_phy_get_sequenc_ram_ofst>
 802350e:	f247 3018 	movw	r0, #29464	@ 0x7318
 8023512:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8023516:	0c29      	lsrs	r1, r5, #16
 8023518:	f880 4038 	strb.w	r4, [r0, #56]	@ 0x38
 802351c:	8781      	strh	r1, [r0, #60]	@ 0x3c
 802351e:	8745      	strh	r5, [r0, #58]	@ 0x3a
 8023520:	bd70      	pop	{r4, r5, r6, pc}

08023522 <llhwc_get_hw_setup_time>:
 8023522:	f641 5237 	movw	r2, #7479	@ 0x1d37
 8023526:	f641 5339 	movw	r3, #7481	@ 0x1d39
 802352a:	f6c0 0203 	movt	r2, #2051	@ 0x803
 802352e:	f6c0 0303 	movt	r3, #2051	@ 0x803
 8023532:	2802      	cmp	r0, #2
 8023534:	bf08      	it	eq
 8023536:	4613      	moveq	r3, r2
 8023538:	f641 5235 	movw	r2, #7477	@ 0x1d35
 802353c:	f6c0 0203 	movt	r2, #2051	@ 0x803
 8023540:	2801      	cmp	r0, #1
 8023542:	bf08      	it	eq
 8023544:	4613      	moveq	r3, r2
 8023546:	f641 5c38 	movw	ip, #7480	@ 0x1d38
 802354a:	f641 523a 	movw	r2, #7482	@ 0x1d3a
 802354e:	f6c0 0c03 	movt	ip, #2051	@ 0x803
 8023552:	f6c0 0203 	movt	r2, #2051	@ 0x803
 8023556:	2802      	cmp	r0, #2
 8023558:	bf08      	it	eq
 802355a:	4662      	moveq	r2, ip
 802355c:	f641 5c36 	movw	ip, #7478	@ 0x1d36
 8023560:	f6c0 0c03 	movt	ip, #2051	@ 0x803
 8023564:	2801      	cmp	r0, #1
 8023566:	bf08      	it	eq
 8023568:	4662      	moveq	r2, ip
 802356a:	2900      	cmp	r1, #0
 802356c:	bf08      	it	eq
 802356e:	461a      	moveq	r2, r3
 8023570:	7810      	ldrb	r0, [r2, #0]
 8023572:	f247 1290 	movw	r2, #29072	@ 0x7190
 8023576:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 802357a:	f102 030c 	add.w	r3, r2, #12
 802357e:	2900      	cmp	r1, #0
 8023580:	bf08      	it	eq
 8023582:	f102 0308 	addeq.w	r3, r2, #8
 8023586:	6819      	ldr	r1, [r3, #0]
 8023588:	4408      	add	r0, r1
 802358a:	3002      	adds	r0, #2
 802358c:	4770      	bx	lr

0802358e <llhwc_rgstr_func>:
 802358e:	2803      	cmp	r0, #3
 8023590:	d006      	beq.n	80235a0 <llhwc_rgstr_func+0x12>
 8023592:	b950      	cbnz	r0, 80235aa <llhwc_rgstr_func+0x1c>
 8023594:	f247 3018 	movw	r0, #29464	@ 0x7318
 8023598:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 802359c:	6401      	str	r1, [r0, #64]	@ 0x40
 802359e:	4770      	bx	lr
 80235a0:	f247 3018 	movw	r0, #29464	@ 0x7318
 80235a4:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80235a8:	6441      	str	r1, [r0, #68]	@ 0x44
 80235aa:	4770      	bx	lr

080235ac <llhwc_wait_for_evnt_on_air>:
 80235ac:	b510      	push	{r4, lr}
 80235ae:	2008      	movs	r0, #8
 80235b0:	f6c4 0002 	movt	r0, #18434	@ 0x4802
 80235b4:	6800      	ldr	r0, [r0, #0]
 80235b6:	f000 0407 	and.w	r4, r0, #7
 80235ba:	201d      	movs	r0, #29
 80235bc:	f7fc f978 	bl	801f8b0 <bsp_debug_gpio_set>
 80235c0:	2c04      	cmp	r4, #4
 80235c2:	bf18      	it	ne
 80235c4:	2c02      	cmpne	r4, #2
 80235c6:	d10e      	bne.n	80235e6 <llhwc_wait_for_evnt_on_air+0x3a>
 80235c8:	f247 3418 	movw	r4, #29464	@ 0x7318
 80235cc:	f2c2 0400 	movt	r4, #8192	@ 0x2000
 80235d0:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 80235d2:	2101      	movs	r1, #1
 80235d4:	2800      	cmp	r0, #0
 80235d6:	bf18      	it	ne
 80235d8:	2001      	movne	r0, #1
 80235da:	f7fc f922 	bl	801f822 <bsp_assert>
 80235de:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 80235e0:	4780      	blx	r0
 80235e2:	4604      	mov	r4, r0
 80235e4:	e000      	b.n	80235e8 <llhwc_wait_for_evnt_on_air+0x3c>
 80235e6:	2400      	movs	r4, #0
 80235e8:	201d      	movs	r0, #29
 80235ea:	f7fc f963 	bl	801f8b4 <bsp_debug_gpio_clear>
 80235ee:	4620      	mov	r0, r4
 80235f0:	bd10      	pop	{r4, pc}

080235f2 <llhwc_cmn_crypto_aes_start>:
 80235f2:	f240 4168 	movw	r1, #1128	@ 0x468
 80235f6:	f6c4 0102 	movt	r1, #18434	@ 0x4802
 80235fa:	680a      	ldr	r2, [r1, #0]
 80235fc:	2804      	cmp	r0, #4
 80235fe:	bf08      	it	eq
 8023600:	2003      	moveq	r0, #3
 8023602:	f360 0242 	bfi	r2, r0, #1, #2
 8023606:	600a      	str	r2, [r1, #0]
 8023608:	6808      	ldr	r0, [r1, #0]
 802360a:	f040 0001 	orr.w	r0, r0, #1
 802360e:	6008      	str	r0, [r1, #0]
 8023610:	4770      	bx	lr

08023612 <llhwc_cmn_crypto_aes_done>:
 8023612:	f240 4044 	movw	r0, #1092	@ 0x444
 8023616:	f6c4 0002 	movt	r0, #18434	@ 0x4802
 802361a:	6801      	ldr	r1, [r0, #0]
 802361c:	f041 0104 	orr.w	r1, r1, #4
 8023620:	6001      	str	r1, [r0, #0]
 8023622:	6801      	ldr	r1, [r0, #0]
 8023624:	f021 0104 	bic.w	r1, r1, #4
 8023628:	6001      	str	r1, [r0, #0]
 802362a:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 802362c:	f021 0101 	bic.w	r1, r1, #1
 8023630:	6241      	str	r1, [r0, #36]	@ 0x24
 8023632:	4770      	bx	lr

08023634 <llhwc_cmn_crypto>:
 8023634:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023638:	b089      	sub	sp, #36	@ 0x24
 802363a:	f247 3a18 	movw	sl, #29464	@ 0x7318
 802363e:	e9dd 8616 	ldrd	r8, r6, [sp, #88]	@ 0x58
 8023642:	f2c2 0a00 	movt	sl, #8192	@ 0x2000
 8023646:	9105      	str	r1, [sp, #20]
 8023648:	9008      	str	r0, [sp, #32]
 802364a:	f89a 7022 	ldrb.w	r7, [sl, #34]	@ 0x22
 802364e:	2000      	movs	r0, #0
 8023650:	2101      	movs	r1, #1
 8023652:	461d      	mov	r5, r3
 8023654:	4693      	mov	fp, r2
 8023656:	2400      	movs	r4, #0
 8023658:	f1b8 0f06 	cmp.w	r8, #6
 802365c:	bf38      	it	cc
 802365e:	2001      	movcc	r0, #1
 8023660:	f04f 0901 	mov.w	r9, #1
 8023664:	f7fc f8dd 	bl	801f822 <bsp_assert>
 8023668:	2e02      	cmp	r6, #2
 802366a:	bf38      	it	cc
 802366c:	2401      	movcc	r4, #1
 802366e:	4620      	mov	r0, r4
 8023670:	2101      	movs	r1, #1
 8023672:	f7fc f8d6 	bl	801f822 <bsp_assert>
 8023676:	2003      	movs	r0, #3
 8023678:	f7fc f931 	bl	801f8de <disable_specific_irq>
 802367c:	f1b8 0f05 	cmp.w	r8, #5
 8023680:	9706      	str	r7, [sp, #24]
 8023682:	9504      	str	r5, [sp, #16]
 8023684:	d84c      	bhi.n	8023720 <llhwc_cmn_crypto+0xec>
 8023686:	fa09 f008 	lsl.w	r0, r9, r8
 802368a:	f010 0f3a 	tst.w	r0, #58	@ 0x3a
 802368e:	d047      	beq.n	8023720 <llhwc_cmn_crypto+0xec>
 8023690:	b156      	cbz	r6, 80236a8 <llhwc_cmn_crypto+0x74>
 8023692:	2e01      	cmp	r6, #1
 8023694:	d112      	bne.n	80236bc <llhwc_cmn_crypto+0x88>
 8023696:	f247 3018 	movw	r0, #29464	@ 0x7318
 802369a:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 802369e:	2101      	movs	r1, #1
 80236a0:	f000 fa2e 	bl	8023b00 <llhwc_cmn_alloc_desc>
 80236a4:	4681      	mov	r9, r0
 80236a6:	e009      	b.n	80236bc <llhwc_cmn_crypto+0x88>
 80236a8:	f247 3588 	movw	r5, #29576	@ 0x7388
 80236ac:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 80236b0:	4628      	mov	r0, r5
 80236b2:	2101      	movs	r1, #1
 80236b4:	f000 fa24 	bl	8023b00 <llhwc_cmn_alloc_desc>
 80236b8:	4681      	mov	r9, r0
 80236ba:	6028      	str	r0, [r5, #0]
 80236bc:	f64f 70fc 	movw	r0, #65532	@ 0xfffc
 80236c0:	f2cb 70fd 	movt	r0, #47101	@ 0xb7fd
 80236c4:	4448      	add	r0, r9
 80236c6:	3004      	adds	r0, #4
 80236c8:	9007      	str	r0, [sp, #28]
 80236ca:	4648      	mov	r0, r9
 80236cc:	2101      	movs	r1, #1
 80236ce:	f1b9 0f00 	cmp.w	r9, #0
 80236d2:	bf18      	it	ne
 80236d4:	2001      	movne	r0, #1
 80236d6:	f7fc f8a4 	bl	801f822 <bsp_assert>
 80236da:	4648      	mov	r0, r9
 80236dc:	2100      	movs	r1, #0
 80236de:	2230      	movs	r2, #48	@ 0x30
 80236e0:	f000 ff82 	bl	80245e8 <ble_memset>
 80236e4:	f89a 0022 	ldrb.w	r0, [sl, #34]	@ 0x22
 80236e8:	b1a0      	cbz	r0, 8023714 <llhwc_cmn_crypto+0xe0>
 80236ea:	f240 4744 	movw	r7, #1092	@ 0x444
 80236ee:	2e01      	cmp	r6, #1
 80236f0:	f6c4 0702 	movt	r7, #18434	@ 0x4802
 80236f4:	d111      	bne.n	802371a <llhwc_cmn_crypto+0xe6>
 80236f6:	2001      	movs	r0, #1
 80236f8:	2101      	movs	r1, #1
 80236fa:	4634      	mov	r4, r6
 80236fc:	f000 fa68 	bl	8023bd0 <llhwc_cmn_control_aclk>
 8023700:	6bfe      	ldr	r6, [r7, #60]	@ 0x3c
 8023702:	f7ff ff53 	bl	80235ac <llhwc_wait_for_evnt_on_air>
 8023706:	b1d0      	cbz	r0, 802373e <llhwc_cmn_crypto+0x10a>
 8023708:	f006 0907 	and.w	r9, r6, #7
 802370c:	4626      	mov	r6, r4
 802370e:	9c06      	ldr	r4, [sp, #24]
 8023710:	4605      	mov	r5, r0
 8023712:	e1cb      	b.n	8023aac <llhwc_cmn_crypto+0x478>
 8023714:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8023718:	e1d4      	b.n	8023ac4 <llhwc_cmn_crypto+0x490>
 802371a:	2005      	movs	r0, #5
 802371c:	9003      	str	r0, [sp, #12]
 802371e:	e020      	b.n	8023762 <llhwc_cmn_crypto+0x12e>
 8023720:	f248 2024 	movw	r0, #33316	@ 0x8224
 8023724:	f6c4 0002 	movt	r0, #18434	@ 0x4802
 8023728:	3814      	subs	r0, #20
 802372a:	2100      	movs	r1, #0
 802372c:	2214      	movs	r2, #20
 802372e:	f04f 0900 	mov.w	r9, #0
 8023732:	f000 ff59 	bl	80245e8 <ble_memset>
 8023736:	f248 2010 	movw	r0, #33296	@ 0x8210
 802373a:	9007      	str	r0, [sp, #28]
 802373c:	e7d2      	b.n	80236e4 <llhwc_cmn_crypto+0xb0>
 802373e:	f1b9 0f00 	cmp.w	r9, #0
 8023742:	d004      	beq.n	802374e <llhwc_cmn_crypto+0x11a>
 8023744:	4648      	mov	r0, r9
 8023746:	2100      	movs	r1, #0
 8023748:	2230      	movs	r2, #48	@ 0x30
 802374a:	f000 ff4d 	bl	80245e8 <ble_memset>
 802374e:	f89a 0022 	ldrb.w	r0, [sl, #34]	@ 0x22
 8023752:	9006      	str	r0, [sp, #24]
 8023754:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8023756:	f000 0007 	and.w	r0, r0, #7
 802375a:	9003      	str	r0, [sp, #12]
 802375c:	2003      	movs	r0, #3
 802375e:	f7ff f86f 	bl	8022840 <llhwc_pwr_switch>
 8023762:	e9dd 1414 	ldrd	r1, r4, [sp, #80]	@ 0x50
 8023766:	2500      	movs	r5, #0
 8023768:	9807      	ldr	r0, [sp, #28]
 802376a:	3901      	subs	r1, #1
 802376c:	f6c4 0502 	movt	r5, #18434	@ 0x4802
 8023770:	fab1 f181 	clz	r1, r1
 8023774:	eb00 0a05 	add.w	sl, r0, r5
 8023778:	094a      	lsrs	r2, r1, #5
 802377a:	9905      	ldr	r1, [sp, #20]
 802377c:	f10a 0004 	add.w	r0, sl, #4
 8023780:	f000 fa58 	bl	8023c34 <llhwc_cmn_crypto_set_16_byte_to_mem>
 8023784:	f1b8 0f05 	cmp.w	r8, #5
 8023788:	f200 811b 	bhi.w	80239c2 <llhwc_cmn_crypto+0x38e>
 802378c:	2001      	movs	r0, #1
 802378e:	fa00 f008 	lsl.w	r0, r0, r8
 8023792:	f010 0f3a 	tst.w	r0, #58	@ 0x3a
 8023796:	f000 8114 	beq.w	80239c2 <llhwc_cmn_crypto+0x38e>
 802379a:	9c08      	ldr	r4, [sp, #32]
 802379c:	4620      	mov	r0, r4
 802379e:	f7fc f845 	bl	801f82c <bsp_is_ptr_in_ble_mem>
 80237a2:	2101      	movs	r1, #1
 80237a4:	2800      	cmp	r0, #0
 80237a6:	bf18      	it	ne
 80237a8:	2001      	movne	r0, #1
 80237aa:	f7fc f83a 	bl	801f822 <bsp_assert>
 80237ae:	1f20      	subs	r0, r4, #4
 80237b0:	2100      	movs	r1, #0
 80237b2:	2204      	movs	r2, #4
 80237b4:	f000 ff18 	bl	80245e8 <ble_memset>
 80237b8:	f1a8 0003 	sub.w	r0, r8, #3
 80237bc:	2801      	cmp	r0, #1
 80237be:	d819      	bhi.n	80237f4 <llhwc_cmn_crypto+0x1c0>
 80237c0:	4658      	mov	r0, fp
 80237c2:	2101      	movs	r1, #1
 80237c4:	f1bb 0f00 	cmp.w	fp, #0
 80237c8:	bf18      	it	ne
 80237ca:	2001      	movne	r0, #1
 80237cc:	f7fc f829 	bl	801f822 <bsp_assert>
 80237d0:	f89b 1000 	ldrb.w	r1, [fp]
 80237d4:	f89b 0001 	ldrb.w	r0, [fp, #1]
 80237d8:	f89b 2002 	ldrb.w	r2, [fp, #2]
 80237dc:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
 80237e0:	f89b 3003 	ldrb.w	r3, [fp, #3]
 80237e4:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80237e8:	ea40 6703 	orr.w	r7, r0, r3, lsl #24
 80237ec:	f89b 0004 	ldrb.w	r0, [fp, #4]
 80237f0:	2300      	movs	r3, #0
 80237f2:	e010      	b.n	8023816 <llhwc_cmn_crypto+0x1e2>
 80237f4:	f89b 1000 	ldrb.w	r1, [fp]
 80237f8:	f89b 0001 	ldrb.w	r0, [fp, #1]
 80237fc:	f89b 2002 	ldrb.w	r2, [fp, #2]
 8023800:	f89b 3003 	ldrb.w	r3, [fp, #3]
 8023804:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
 8023808:	f89b 6004 	ldrb.w	r6, [fp, #4]
 802380c:	ea40 4702 	orr.w	r7, r0, r2, lsl #16
 8023810:	ea43 2006 	orr.w	r0, r3, r6, lsl #8
 8023814:	2301      	movs	r3, #1
 8023816:	9002      	str	r0, [sp, #8]
 8023818:	f008 00fe 	and.w	r0, r8, #254	@ 0xfe
 802381c:	2804      	cmp	r0, #4
 802381e:	9808      	ldr	r0, [sp, #32]
 8023820:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 8023824:	f2cb 72fd 	movt	r2, #47101	@ 0xb7fd
 8023828:	4410      	add	r0, r2
 802382a:	9005      	str	r0, [sp, #20]
 802382c:	d117      	bne.n	802385e <llhwc_cmn_crypto+0x22a>
 802382e:	f89b 600e 	ldrb.w	r6, [fp, #14]
 8023832:	464c      	mov	r4, r9
 8023834:	0236      	lsls	r6, r6, #8
 8023836:	ea46 4601 	orr.w	r6, r6, r1, lsl #16
 802383a:	f89b 200f 	ldrb.w	r2, [fp, #15]
 802383e:	0a36      	lsrs	r6, r6, #8
 8023840:	f804 6f29 	strb.w	r6, [r4, #41]!
 8023844:	f1b8 0f04 	cmp.w	r8, #4
 8023848:	f04f 0801 	mov.w	r8, #1
 802384c:	7061      	strb	r1, [r4, #1]
 802384e:	f804 2c01 	strb.w	r2, [r4, #-1]
 8023852:	bf08      	it	eq
 8023854:	f04f 0803 	moveq.w	r8, #3
 8023858:	2101      	movs	r1, #1
 802385a:	2002      	movs	r0, #2
 802385c:	e015      	b.n	802388a <llhwc_cmn_crypto+0x256>
 802385e:	464a      	mov	r2, r9
 8023860:	f812 1f29 	ldrb.w	r1, [r2, #41]!
 8023864:	2004      	movs	r0, #4
 8023866:	7854      	ldrb	r4, [r2, #1]
 8023868:	7896      	ldrb	r6, [r2, #2]
 802386a:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
 802386e:	ea41 4406 	orr.w	r4, r1, r6, lsl #16
 8023872:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8023876:	f361 040f 	bfi	r4, r1, #0, #16
 802387a:	2100      	movs	r1, #0
 802387c:	7014      	strb	r4, [r2, #0]
 802387e:	0c26      	lsrs	r6, r4, #16
 8023880:	0a24      	lsrs	r4, r4, #8
 8023882:	f802 1c01 	strb.w	r1, [r2, #-1]
 8023886:	7096      	strb	r6, [r2, #2]
 8023888:	7054      	strb	r4, [r2, #1]
 802388a:	ea43 0243 	orr.w	r2, r3, r3, lsl #1
 802388e:	f641 5660 	movw	r6, #7520	@ 0x1d60
 8023892:	f6c0 0603 	movt	r6, #2051	@ 0x803
 8023896:	eb06 0482 	add.w	r4, r6, r2, lsl #2
 802389a:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 802389e:	e9d4 c401 	ldrd	ip, r4, [r4, #4]
 80238a2:	9001      	str	r0, [sp, #4]
 80238a4:	f852 e00a 	ldr.w	lr, [r2, sl]
 80238a8:	3302      	adds	r3, #2
 80238aa:	fa07 f404 	lsl.w	r4, r7, r4
 80238ae:	ea2e 000c 	bic.w	r0, lr, ip
 80238b2:	ea04 040c 	and.w	r4, r4, ip
 80238b6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80238ba:	4420      	add	r0, r4
 80238bc:	f842 000a 	str.w	r0, [r2, sl]
 80238c0:	eb06 0283 	add.w	r2, r6, r3, lsl #2
 80238c4:	f856 0023 	ldr.w	r0, [r6, r3, lsl #2]
 80238c8:	e9d2 2601 	ldrd	r2, r6, [r2, #4]
 80238cc:	f850 300a 	ldr.w	r3, [r0, sl]
 80238d0:	9f02      	ldr	r7, [sp, #8]
 80238d2:	4393      	bics	r3, r2
 80238d4:	fa07 f606 	lsl.w	r6, r7, r6
 80238d8:	4032      	ands	r2, r6
 80238da:	441a      	add	r2, r3
 80238dc:	f840 200a 	str.w	r2, [r0, sl]
 80238e0:	eb0b 0001 	add.w	r0, fp, r1
 80238e4:	7941      	ldrb	r1, [r0, #5]
 80238e6:	7982      	ldrb	r2, [r0, #6]
 80238e8:	79c3      	ldrb	r3, [r0, #7]
 80238ea:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
 80238ee:	7a07      	ldrb	r7, [r0, #8]
 80238f0:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80238f4:	4649      	mov	r1, r9
 80238f6:	f811 2f25 	ldrb.w	r2, [r1, #37]!
 80238fa:	ea43 6307 	orr.w	r3, r3, r7, lsl #24
 80238fe:	f841 3c11 	str.w	r3, [r1, #-17]
 8023902:	7a43      	ldrb	r3, [r0, #9]
 8023904:	7a87      	ldrb	r7, [r0, #10]
 8023906:	7ac6      	ldrb	r6, [r0, #11]
 8023908:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 802390c:	788f      	ldrb	r7, [r1, #2]
 802390e:	78cc      	ldrb	r4, [r1, #3]
 8023910:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8023914:	784e      	ldrb	r6, [r1, #1]
 8023916:	7b00      	ldrb	r0, [r0, #12]
 8023918:	ea47 2704 	orr.w	r7, r7, r4, lsl #8
 802391c:	ea42 2606 	orr.w	r6, r2, r6, lsl #8
 8023920:	ea43 6000 	orr.w	r0, r3, r0, lsl #24
 8023924:	ea46 4307 	orr.w	r3, r6, r7, lsl #16
 8023928:	f841 0c0d 	str.w	r0, [r1, #-13]
 802392c:	f248 00ff 	movw	r0, #33023	@ 0x80ff
 8023930:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 8023932:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8023934:	f6cf 7080 	movt	r0, #65408	@ 0xff80
 8023938:	4018      	ands	r0, r3
 802393a:	460b      	mov	r3, r1
 802393c:	f007 077f 	and.w	r7, r7, #127	@ 0x7f
 8023940:	f006 067f 	and.w	r6, r6, #127	@ 0x7f
 8023944:	ea40 2707 	orr.w	r7, r0, r7, lsl #8
 8023948:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 802394c:	f813 6f04 	ldrb.w	r6, [r3, #4]!
 8023950:	0c00      	lsrs	r0, r0, #16
 8023952:	7088      	strb	r0, [r1, #2]
 8023954:	0a38      	lsrs	r0, r7, #8
 8023956:	7048      	strb	r0, [r1, #1]
 8023958:	7898      	ldrb	r0, [r3, #2]
 802395a:	f44f 0760 	mov.w	r7, #14680064	@ 0xe00000
 802395e:	ea07 4000 	and.w	r0, r7, r0, lsl #16
 8023962:	9f04      	ldr	r7, [sp, #16]
 8023964:	701e      	strb	r6, [r3, #0]
 8023966:	f007 071f 	and.w	r7, r7, #31
 802396a:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 802396e:	9e08      	ldr	r6, [sp, #32]
 8023970:	0c00      	lsrs	r0, r0, #16
 8023972:	700a      	strb	r2, [r1, #0]
 8023974:	7098      	strb	r0, [r3, #2]
 8023976:	f856 0d04 	ldr.w	r0, [r6, #-4]!
 802397a:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 802397e:	4308      	orrs	r0, r1
 8023980:	6030      	str	r0, [r6, #0]
 8023982:	6830      	ldr	r0, [r6, #0]
 8023984:	f020 6080 	bic.w	r0, r0, #67108864	@ 0x4000000
 8023988:	6030      	str	r0, [r6, #0]
 802398a:	9a07      	ldr	r2, [sp, #28]
 802398c:	5950      	ldr	r0, [r2, r5]
 802398e:	9905      	ldr	r1, [sp, #20]
 8023990:	b280      	uxth	r0, r0
 8023992:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8023996:	5150      	str	r0, [r2, r5]
 8023998:	5950      	ldr	r0, [r2, r5]
 802399a:	f361 000f 	bfi	r0, r1, #0, #16
 802399e:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 80239a0:	5150      	str	r0, [r2, r5]
 80239a2:	b161      	cbz	r1, 80239be <llhwc_cmn_crypto+0x38a>
 80239a4:	f8d5 0408 	ldr.w	r0, [r5, #1032]	@ 0x408
 80239a8:	9c06      	ldr	r4, [sp, #24]
 80239aa:	f369 000f 	bfi	r0, r9, #0, #16
 80239ae:	f240 4744 	movw	r7, #1092	@ 0x444
 80239b2:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80239b6:	9901      	ldr	r1, [sp, #4]
 80239b8:	f6c4 0702 	movt	r7, #18434	@ 0x4802
 80239bc:	e027      	b.n	8023a0e <llhwc_cmn_crypto+0x3da>
 80239be:	2500      	movs	r5, #0
 80239c0:	e096      	b.n	8023af0 <llhwc_cmn_crypto+0x4bc>
 80239c2:	f248 2624 	movw	r6, #33316	@ 0x8224
 80239c6:	fab4 f084 	clz	r0, r4
 80239ca:	f6c4 0602 	movt	r6, #18434	@ 0x4802
 80239ce:	9908      	ldr	r1, [sp, #32]
 80239d0:	0942      	lsrs	r2, r0, #5
 80239d2:	1d30      	adds	r0, r6, #4
 80239d4:	f000 f92e 	bl	8023c34 <llhwc_cmn_crypto_set_16_byte_to_mem>
 80239d8:	4630      	mov	r0, r6
 80239da:	2100      	movs	r1, #0
 80239dc:	2204      	movs	r2, #4
 80239de:	f000 fe03 	bl	80245e8 <ble_memset>
 80239e2:	9a07      	ldr	r2, [sp, #28]
 80239e4:	f248 2124 	movw	r1, #33316	@ 0x8224
 80239e8:	5950      	ldr	r0, [r2, r5]
 80239ea:	f361 000f 	bfi	r0, r1, #0, #16
 80239ee:	5150      	str	r0, [r2, r5]
 80239f0:	6830      	ldr	r0, [r6, #0]
 80239f2:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80239f6:	4308      	orrs	r0, r1
 80239f8:	6030      	str	r0, [r6, #0]
 80239fa:	f8d5 0408 	ldr.w	r0, [r5, #1032]	@ 0x408
 80239fe:	f248 2110 	movw	r1, #33296	@ 0x8210
 8023a02:	9c06      	ldr	r4, [sp, #24]
 8023a04:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8023a08:	f361 000f 	bfi	r0, r1, #0, #16
 8023a0c:	2101      	movs	r1, #1
 8023a0e:	f8c5 0408 	str.w	r0, [r5, #1032]	@ 0x408
 8023a12:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8023a14:	f1b8 0f04 	cmp.w	r8, #4
 8023a18:	f020 0007 	bic.w	r0, r0, #7
 8023a1c:	4408      	add	r0, r1
 8023a1e:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8023a20:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8023a22:	f020 0018 	bic.w	r0, r0, #24
 8023a26:	6278      	str	r0, [r7, #36]	@ 0x24
 8023a28:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8023a2a:	4640      	mov	r0, r8
 8023a2c:	bf08      	it	eq
 8023a2e:	2003      	moveq	r0, #3
 8023a30:	f360 0142 	bfi	r1, r0, #1, #2
 8023a34:	6279      	str	r1, [r7, #36]	@ 0x24
 8023a36:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8023a38:	f247 3194 	movw	r1, #29588	@ 0x7394
 8023a3c:	f040 0001 	orr.w	r0, r0, #1
 8023a40:	6278      	str	r0, [r7, #36]	@ 0x24
 8023a42:	f06f 00c8 	mvn.w	r0, #200	@ 0xc8
 8023a46:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8023a4a:	bf00      	nop
 8023a4c:	3001      	adds	r0, #1
 8023a4e:	d226      	bcs.n	8023a9e <llhwc_cmn_crypto+0x46a>
 8023a50:	f8d5 2440 	ldr.w	r2, [r5, #1088]	@ 0x440
 8023a54:	f3c2 0280 	ubfx	r2, r2, #2, #1
 8023a58:	2a00      	cmp	r2, #0
 8023a5a:	600a      	str	r2, [r1, #0]
 8023a5c:	d0f6      	beq.n	8023a4c <llhwc_cmn_crypto+0x418>
 8023a5e:	6838      	ldr	r0, [r7, #0]
 8023a60:	f018 0ffd 	tst.w	r8, #253	@ 0xfd
 8023a64:	f040 0004 	orr.w	r0, r0, #4
 8023a68:	6038      	str	r0, [r7, #0]
 8023a6a:	6838      	ldr	r0, [r7, #0]
 8023a6c:	f020 0004 	bic.w	r0, r0, #4
 8023a70:	6038      	str	r0, [r7, #0]
 8023a72:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8023a74:	f020 0001 	bic.w	r0, r0, #1
 8023a78:	6278      	str	r0, [r7, #36]	@ 0x24
 8023a7a:	d10e      	bne.n	8023a9a <llhwc_cmn_crypto+0x466>
 8023a7c:	6830      	ldr	r0, [r6, #0]
 8023a7e:	0140      	lsls	r0, r0, #5
 8023a80:	d403      	bmi.n	8023a8a <llhwc_cmn_crypto+0x456>
 8023a82:	2000      	movs	r0, #0
 8023a84:	2101      	movs	r1, #1
 8023a86:	f7fb fecc 	bl	801f822 <bsp_assert>
 8023a8a:	9815      	ldr	r0, [sp, #84]	@ 0x54
 8023a8c:	1d31      	adds	r1, r6, #4
 8023a8e:	fab0 f080 	clz	r0, r0
 8023a92:	0942      	lsrs	r2, r0, #5
 8023a94:	9808      	ldr	r0, [sp, #32]
 8023a96:	f000 f8cd 	bl	8023c34 <llhwc_cmn_crypto_set_16_byte_to_mem>
 8023a9a:	2500      	movs	r5, #0
 8023a9c:	e005      	b.n	8023aaa <llhwc_cmn_crypto+0x476>
 8023a9e:	2000      	movs	r0, #0
 8023aa0:	2101      	movs	r1, #1
 8023aa2:	f7fb febe 	bl	801f822 <bsp_assert>
 8023aa6:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8023aaa:	9e17      	ldr	r6, [sp, #92]	@ 0x5c
 8023aac:	4620      	mov	r0, r4
 8023aae:	f7fe fec7 	bl	8022840 <llhwc_pwr_switch>
 8023ab2:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8023ab4:	2101      	movs	r1, #1
 8023ab6:	f020 0007 	bic.w	r0, r0, #7
 8023aba:	4448      	add	r0, r9
 8023abc:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8023abe:	2000      	movs	r0, #0
 8023ac0:	f000 f886 	bl	8023bd0 <llhwc_cmn_control_aclk>
 8023ac4:	f018 0ffd 	tst.w	r8, #253	@ 0xfd
 8023ac8:	d012      	beq.n	8023af0 <llhwc_cmn_crypto+0x4bc>
 8023aca:	b146      	cbz	r6, 8023ade <llhwc_cmn_crypto+0x4aa>
 8023acc:	2e01      	cmp	r6, #1
 8023ace:	d10f      	bne.n	8023af0 <llhwc_cmn_crypto+0x4bc>
 8023ad0:	f247 3018 	movw	r0, #29464	@ 0x7318
 8023ad4:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8023ad8:	f000 f8bc 	bl	8023c54 <llhwc_cmn_free_desc>
 8023adc:	e008      	b.n	8023af0 <llhwc_cmn_crypto+0x4bc>
 8023ade:	f247 3488 	movw	r4, #29576	@ 0x7388
 8023ae2:	f2c2 0400 	movt	r4, #8192	@ 0x2000
 8023ae6:	4620      	mov	r0, r4
 8023ae8:	f000 f8b4 	bl	8023c54 <llhwc_cmn_free_desc>
 8023aec:	2000      	movs	r0, #0
 8023aee:	6020      	str	r0, [r4, #0]
 8023af0:	2003      	movs	r0, #3
 8023af2:	f7fb fef2 	bl	801f8da <enable_specific_irq>
 8023af6:	4628      	mov	r0, r5
 8023af8:	b009      	add	sp, #36	@ 0x24
 8023afa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08023b00 <llhwc_cmn_alloc_desc>:
 8023b00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8023b04:	460c      	mov	r4, r1
 8023b06:	2101      	movs	r1, #1
 8023b08:	4605      	mov	r5, r0
 8023b0a:	2800      	cmp	r0, #0
 8023b0c:	bf18      	it	ne
 8023b0e:	2001      	movne	r0, #1
 8023b10:	2601      	movs	r6, #1
 8023b12:	f7fb fe86 	bl	801f822 <bsp_assert>
 8023b16:	f248 18b4 	movw	r8, #33204	@ 0x81b4
 8023b1a:	f2c2 0800 	movt	r8, #8192	@ 0x2000
 8023b1e:	f8d8 0000 	ldr.w	r0, [r8]
 8023b22:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8023b26:	f7fb fee0 	bl	801f8ea <os_rcrsv_mutex_wait>
 8023b2a:	f247 3ac0 	movw	sl, #29632	@ 0x73c0
 8023b2e:	2002      	movs	r0, #2
 8023b30:	2300      	movs	r3, #0
 8023b32:	2100      	movs	r1, #0
 8023b34:	f2c2 0a00 	movt	sl, #8192	@ 0x2000
 8023b38:	2201      	movs	r2, #1
 8023b3a:	bf00      	nop
 8023b3c:	eb0a 07c3 	add.w	r7, sl, r3, lsl #3
 8023b40:	793f      	ldrb	r7, [r7, #4]
 8023b42:	b94f      	cbnz	r7, 8023b58 <llhwc_cmn_alloc_desc+0x58>
 8023b44:	2a01      	cmp	r2, #1
 8023b46:	d107      	bne.n	8023b58 <llhwc_cmn_alloc_desc+0x58>
 8023b48:	2c01      	cmp	r4, #1
 8023b4a:	f101 0101 	add.w	r1, r1, #1
 8023b4e:	d011      	beq.n	8023b74 <llhwc_cmn_alloc_desc+0x74>
 8023b50:	2200      	movs	r2, #0
 8023b52:	4618      	mov	r0, r3
 8023b54:	e008      	b.n	8023b68 <llhwc_cmn_alloc_desc+0x68>
 8023b56:	bf00      	nop
 8023b58:	b117      	cbz	r7, 8023b60 <llhwc_cmn_alloc_desc+0x60>
 8023b5a:	2100      	movs	r1, #0
 8023b5c:	2201      	movs	r2, #1
 8023b5e:	e003      	b.n	8023b68 <llhwc_cmn_alloc_desc+0x68>
 8023b60:	3101      	adds	r1, #1
 8023b62:	b2cb      	uxtb	r3, r1
 8023b64:	42a3      	cmp	r3, r4
 8023b66:	d007      	beq.n	8023b78 <llhwc_cmn_alloc_desc+0x78>
 8023b68:	2301      	movs	r3, #1
 8023b6a:	07f7      	lsls	r7, r6, #31
 8023b6c:	f04f 0600 	mov.w	r6, #0
 8023b70:	d1e4      	bne.n	8023b3c <llhwc_cmn_alloc_desc+0x3c>
 8023b72:	e002      	b.n	8023b7a <llhwc_cmn_alloc_desc+0x7a>
 8023b74:	4618      	mov	r0, r3
 8023b76:	e000      	b.n	8023b7a <llhwc_cmn_alloc_desc+0x7a>
 8023b78:	4621      	mov	r1, r4
 8023b7a:	b2c9      	uxtb	r1, r1
 8023b7c:	42a1      	cmp	r1, r4
 8023b7e:	bf18      	it	ne
 8023b80:	2002      	movne	r0, #2
 8023b82:	fa5f f980 	uxtb.w	r9, r0
 8023b86:	2000      	movs	r0, #0
 8023b88:	2101      	movs	r1, #1
 8023b8a:	f1b9 0f02 	cmp.w	r9, #2
 8023b8e:	bf38      	it	cc
 8023b90:	2001      	movcc	r0, #1
 8023b92:	2601      	movs	r6, #1
 8023b94:	f7fb fe45 	bl	801f822 <bsp_assert>
 8023b98:	eb0a 00c9 	add.w	r0, sl, r9, lsl #3
 8023b9c:	7144      	strb	r4, [r0, #5]
 8023b9e:	b144      	cbz	r4, 8023bb2 <llhwc_cmn_alloc_desc+0xb2>
 8023ba0:	3004      	adds	r0, #4
 8023ba2:	bf00      	nop
 8023ba4:	7006      	strb	r6, [r0, #0]
 8023ba6:	f840 5c04 	str.w	r5, [r0, #-4]
 8023baa:	3c01      	subs	r4, #1
 8023bac:	f100 0008 	add.w	r0, r0, #8
 8023bb0:	d1f8      	bne.n	8023ba4 <llhwc_cmn_alloc_desc+0xa4>
 8023bb2:	eb09 0049 	add.w	r0, r9, r9, lsl #1
 8023bb6:	f248 2138 	movw	r1, #33336	@ 0x8238
 8023bba:	f6c4 0102 	movt	r1, #18434	@ 0x4802
 8023bbe:	eb01 1400 	add.w	r4, r1, r0, lsl #4
 8023bc2:	f8d8 0000 	ldr.w	r0, [r8]
 8023bc6:	f7fb fe96 	bl	801f8f6 <os_rcrsv_mutex_release>
 8023bca:	4620      	mov	r0, r4
 8023bcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08023bd0 <llhwc_cmn_control_aclk>:
 8023bd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023bd2:	b081      	sub	sp, #4
 8023bd4:	f247 33be 	movw	r3, #29630	@ 0x73be
 8023bd8:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8023bdc:	781a      	ldrb	r2, [r3, #0]
 8023bde:	2501      	movs	r5, #1
 8023be0:	408d      	lsls	r5, r1
 8023be2:	43aa      	bics	r2, r5
 8023be4:	f000 0501 	and.w	r5, r0, #1
 8023be8:	fa05 f101 	lsl.w	r1, r5, r1
 8023bec:	f247 3718 	movw	r7, #29464	@ 0x7318
 8023bf0:	ea42 0501 	orr.w	r5, r2, r1
 8023bf4:	f2c2 0700 	movt	r7, #8192	@ 0x2000
 8023bf8:	b2ec      	uxtb	r4, r5
 8023bfa:	f897 204c 	ldrb.w	r2, [r7, #76]	@ 0x4c
 8023bfe:	2c00      	cmp	r4, #0
 8023c00:	4621      	mov	r1, r4
 8023c02:	bf18      	it	ne
 8023c04:	2101      	movne	r1, #1
 8023c06:	ea52 0604 	orrs.w	r6, r2, r4
 8023c0a:	701d      	strb	r5, [r3, #0]
 8023c0c:	d010      	beq.n	8023c30 <llhwc_cmn_control_aclk+0x60>
 8023c0e:	3a01      	subs	r2, #1
 8023c10:	fab2 f282 	clz	r2, r2
 8023c14:	0952      	lsrs	r2, r2, #5
 8023c16:	4011      	ands	r1, r2
 8023c18:	d10a      	bne.n	8023c30 <llhwc_cmn_control_aclk+0x60>
 8023c1a:	3801      	subs	r0, #1
 8023c1c:	fab0 f080 	clz	r0, r0
 8023c20:	0940      	lsrs	r0, r0, #5
 8023c22:	2c00      	cmp	r4, #0
 8023c24:	bf18      	it	ne
 8023c26:	2401      	movne	r4, #1
 8023c28:	f7fb fe15 	bl	801f856 <bsp_control_aclk>
 8023c2c:	f887 404c 	strb.w	r4, [r7, #76]	@ 0x4c
 8023c30:	b001      	add	sp, #4
 8023c32:	bdf0      	pop	{r4, r5, r6, r7, pc}

08023c34 <llhwc_cmn_crypto_set_16_byte_to_mem>:
 8023c34:	b12a      	cbz	r2, 8023c42 <llhwc_cmn_crypto_set_16_byte_to_mem+0xe>
 8023c36:	4288      	cmp	r0, r1
 8023c38:	bf1c      	itt	ne
 8023c3a:	2210      	movne	r2, #16
 8023c3c:	f000 bc84 	bne.w	8024548 <ble_memcpy>
 8023c40:	e006      	b.n	8023c50 <llhwc_cmn_crypto_set_16_byte_to_mem+0x1c>
 8023c42:	220f      	movs	r2, #15
 8023c44:	5c8b      	ldrb	r3, [r1, r2]
 8023c46:	3a01      	subs	r2, #1
 8023c48:	f800 3b01 	strb.w	r3, [r0], #1
 8023c4c:	1c53      	adds	r3, r2, #1
 8023c4e:	d1f9      	bne.n	8023c44 <llhwc_cmn_crypto_set_16_byte_to_mem+0x10>
 8023c50:	4770      	bx	lr
	...

08023c54 <llhwc_cmn_free_desc>:
 8023c54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8023c58:	b081      	sub	sp, #4
 8023c5a:	2101      	movs	r1, #1
 8023c5c:	4681      	mov	r9, r0
 8023c5e:	2800      	cmp	r0, #0
 8023c60:	bf18      	it	ne
 8023c62:	2001      	movne	r0, #1
 8023c64:	2401      	movs	r4, #1
 8023c66:	f7fb fddc 	bl	801f822 <bsp_assert>
 8023c6a:	f248 18b4 	movw	r8, #33204	@ 0x81b4
 8023c6e:	f2c2 0800 	movt	r8, #8192	@ 0x2000
 8023c72:	f8d8 0000 	ldr.w	r0, [r8]
 8023c76:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8023c7a:	f7fb fe36 	bl	801f8ea <os_rcrsv_mutex_wait>
 8023c7e:	f247 36c0 	movw	r6, #29632	@ 0x73c0
 8023c82:	2700      	movs	r7, #0
 8023c84:	f2c2 0600 	movt	r6, #8192	@ 0x2000
 8023c88:	2500      	movs	r5, #0
 8023c8a:	bf00      	nop
 8023c8c:	f856 0037 	ldr.w	r0, [r6, r7, lsl #3]
 8023c90:	4548      	cmp	r0, r9
 8023c92:	d006      	beq.n	8023ca2 <llhwc_cmn_free_desc+0x4e>
 8023c94:	2701      	movs	r7, #1
 8023c96:	07e1      	lsls	r1, r4, #31
 8023c98:	f04f 0400 	mov.w	r4, #0
 8023c9c:	d1f6      	bne.n	8023c8c <llhwc_cmn_free_desc+0x38>
 8023c9e:	2702      	movs	r7, #2
 8023ca0:	e002      	b.n	8023ca8 <llhwc_cmn_free_desc+0x54>
 8023ca2:	eb06 01c7 	add.w	r1, r6, r7, lsl #3
 8023ca6:	794d      	ldrb	r5, [r1, #5]
 8023ca8:	eba0 0009 	sub.w	r0, r0, r9
 8023cac:	fab0 f080 	clz	r0, r0
 8023cb0:	0940      	lsrs	r0, r0, #5
 8023cb2:	2101      	movs	r1, #1
 8023cb4:	f7fb fdb5 	bl	801f822 <bsp_assert>
 8023cb8:	4628      	mov	r0, r5
 8023cba:	2101      	movs	r1, #1
 8023cbc:	2d00      	cmp	r5, #0
 8023cbe:	bf18      	it	ne
 8023cc0:	2001      	movne	r0, #1
 8023cc2:	f7fb fdae 	bl	801f822 <bsp_assert>
 8023cc6:	b165      	cbz	r5, 8023ce2 <llhwc_cmn_free_desc+0x8e>
 8023cc8:	b2fa      	uxtb	r2, r7
 8023cca:	18a8      	adds	r0, r5, r2
 8023ccc:	2100      	movs	r1, #0
 8023cce:	bf00      	nop
 8023cd0:	3701      	adds	r7, #1
 8023cd2:	eb06 03c2 	add.w	r3, r6, r2, lsl #3
 8023cd6:	f846 1032 	str.w	r1, [r6, r2, lsl #3]
 8023cda:	b2fa      	uxtb	r2, r7
 8023cdc:	4290      	cmp	r0, r2
 8023cde:	8099      	strh	r1, [r3, #4]
 8023ce0:	d8f6      	bhi.n	8023cd0 <llhwc_cmn_free_desc+0x7c>
 8023ce2:	f8d8 0000 	ldr.w	r0, [r8]
 8023ce6:	b001      	add	sp, #4
 8023ce8:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8023cec:	f7fb be03 	b.w	801f8f6 <os_rcrsv_mutex_release>

08023cf0 <US_TO_SLP_TMR_PROTECTED>:
 8023cf0:	b5b0      	push	{r4, r5, r7, lr}
 8023cf2:	227d      	movs	r2, #125	@ 0x7d
 8023cf4:	2300      	movs	r3, #0
 8023cf6:	4604      	mov	r4, r0
 8023cf8:	257d      	movs	r5, #125	@ 0x7d
 8023cfa:	f7dc faa7 	bl	800024c <__aeabi_uldivmod>
 8023cfe:	fb00 4115 	mls	r1, r0, r5, r4
 8023d02:	f240 6325 	movw	r3, #1573	@ 0x625
 8023d06:	0089      	lsls	r1, r1, #2
 8023d08:	b28a      	uxth	r2, r1
 8023d0a:	0080      	lsls	r0, r0, #2
 8023d0c:	fb02 f203 	mul.w	r2, r2, r3
 8023d10:	eba1 4112 	sub.w	r1, r1, r2, lsr #16
 8023d14:	b289      	uxth	r1, r1
 8023d16:	0849      	lsrs	r1, r1, #1
 8023d18:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8023d1c:	eb00 1091 	add.w	r0, r0, r1, lsr #6
 8023d20:	bdb0      	pop	{r4, r5, r7, pc}

08023d22 <llhwc_cmn_set_controller_activity>:
 8023d22:	b5b0      	push	{r4, r5, r7, lr}
 8023d24:	f248 15b4 	movw	r5, #33204	@ 0x81b4
 8023d28:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 8023d2c:	6829      	ldr	r1, [r5, #0]
 8023d2e:	4604      	mov	r4, r0
 8023d30:	4608      	mov	r0, r1
 8023d32:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8023d36:	f7fb fdd8 	bl	801f8ea <os_rcrsv_mutex_wait>
 8023d3a:	f247 3111 	movw	r1, #29457	@ 0x7311
 8023d3e:	6828      	ldr	r0, [r5, #0]
 8023d40:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8023d44:	700c      	strb	r4, [r1, #0]
 8023d46:	f7fb fdd6 	bl	801f8f6 <os_rcrsv_mutex_release>
 8023d4a:	f247 3070 	movw	r0, #29552	@ 0x7370
 8023d4e:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8023d52:	7d00      	ldrb	r0, [r0, #20]
 8023d54:	2801      	cmp	r0, #1
 8023d56:	bf18      	it	ne
 8023d58:	bdb0      	popne	{r4, r5, r7, pc}
 8023d5a:	f247 3098 	movw	r0, #29592	@ 0x7398
 8023d5e:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8023d62:	6900      	ldr	r0, [r0, #16]
 8023d64:	b118      	cbz	r0, 8023d6e <llhwc_cmn_set_controller_activity+0x4c>
 8023d66:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8023d6a:	f000 b801 	b.w	8023d70 <llhwc_cmn_start_stop_runtime_rco_clbr>
 8023d6e:	bdb0      	pop	{r4, r5, r7, pc}

08023d70 <llhwc_cmn_start_stop_runtime_rco_clbr>:
 8023d70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023d74:	2036      	movs	r0, #54	@ 0x36
 8023d76:	f7fb fd9b 	bl	801f8b0 <bsp_debug_gpio_set>
 8023d7a:	f248 18b4 	movw	r8, #33204	@ 0x81b4
 8023d7e:	f2c2 0800 	movt	r8, #8192	@ 0x2000
 8023d82:	f8d8 0000 	ldr.w	r0, [r8]
 8023d86:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8023d8a:	f7fb fdae 	bl	801f8ea <os_rcrsv_mutex_wait>
 8023d8e:	f247 3711 	movw	r7, #29457	@ 0x7311
 8023d92:	f247 3410 	movw	r4, #29456	@ 0x7310
 8023d96:	f2c2 0700 	movt	r7, #8192	@ 0x2000
 8023d9a:	f2c2 0400 	movt	r4, #8192	@ 0x2000
 8023d9e:	7838      	ldrb	r0, [r7, #0]
 8023da0:	7822      	ldrb	r2, [r4, #0]
 8023da2:	1e43      	subs	r3, r0, #1
 8023da4:	4611      	mov	r1, r2
 8023da6:	fab3 f383 	clz	r3, r3
 8023daa:	f247 3698 	movw	r6, #29592	@ 0x7398
 8023dae:	2a00      	cmp	r2, #0
 8023db0:	bf18      	it	ne
 8023db2:	2101      	movne	r1, #1
 8023db4:	095b      	lsrs	r3, r3, #5
 8023db6:	f2c2 0600 	movt	r6, #8192	@ 0x2000
 8023dba:	430b      	orrs	r3, r1
 8023dbc:	7e71      	ldrb	r1, [r6, #25]
 8023dbe:	2b01      	cmp	r3, #1
 8023dc0:	bf08      	it	eq
 8023dc2:	2900      	cmpeq	r1, #0
 8023dc4:	d029      	beq.n	8023e1a <llhwc_cmn_start_stop_runtime_rco_clbr+0xaa>
 8023dc6:	2801      	cmp	r0, #1
 8023dc8:	d04e      	beq.n	8023e68 <llhwc_cmn_start_stop_runtime_rco_clbr+0xf8>
 8023dca:	2a00      	cmp	r2, #0
 8023dcc:	d14c      	bne.n	8023e68 <llhwc_cmn_start_stop_runtime_rco_clbr+0xf8>
 8023dce:	2901      	cmp	r1, #1
 8023dd0:	d14a      	bne.n	8023e68 <llhwc_cmn_start_stop_runtime_rco_clbr+0xf8>
 8023dd2:	2035      	movs	r0, #53	@ 0x35
 8023dd4:	f7fb fd70 	bl	801f8b8 <bsp_debug_gpio_toggle>
 8023dd8:	2000      	movs	r0, #0
 8023dda:	7670      	strb	r0, [r6, #25]
 8023ddc:	2001      	movs	r0, #1
 8023dde:	f7fb fd54 	bl	801f88a <bsp_rco_clbr_not>
 8023de2:	2014      	movs	r0, #20
 8023de4:	f6c4 0002 	movt	r0, #18434	@ 0x4802
 8023de8:	f8d0 1470 	ldr.w	r1, [r0, #1136]	@ 0x470
 8023dec:	f247 3204 	movw	r2, #29444	@ 0x7304
 8023df0:	f021 0101 	bic.w	r1, r1, #1
 8023df4:	f8c0 1470 	str.w	r1, [r0, #1136]	@ 0x470
 8023df8:	6801      	ldr	r1, [r0, #0]
 8023dfa:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8023dfe:	3101      	adds	r1, #1
 8023e00:	6011      	str	r1, [r2, #0]
 8023e02:	6901      	ldr	r1, [r0, #16]
 8023e04:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 8023e08:	6101      	str	r1, [r0, #16]
 8023e0a:	6800      	ldr	r0, [r0, #0]
 8023e0c:	f247 3108 	movw	r1, #29448	@ 0x7308
 8023e10:	3001      	adds	r0, #1
 8023e12:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8023e16:	6008      	str	r0, [r1, #0]
 8023e18:	e060      	b.n	8023edc <llhwc_cmn_start_stop_runtime_rco_clbr+0x16c>
 8023e1a:	2033      	movs	r0, #51	@ 0x33
 8023e1c:	f7fb fd4c 	bl	801f8b8 <bsp_debug_gpio_toggle>
 8023e20:	68f0      	ldr	r0, [r6, #12]
 8023e22:	b950      	cbnz	r0, 8023e3a <llhwc_cmn_start_stop_runtime_rco_clbr+0xca>
 8023e24:	f244 1069 	movw	r0, #16745	@ 0x4169
 8023e28:	f6c0 0002 	movt	r0, #2050	@ 0x802
 8023e2c:	2101      	movs	r1, #1
 8023e2e:	2200      	movs	r2, #0
 8023e30:	f7fd ffcc 	bl	8021dcc <os_timer_create>
 8023e34:	2800      	cmp	r0, #0
 8023e36:	60f0      	str	r0, [r6, #12]
 8023e38:	d050      	beq.n	8023edc <llhwc_cmn_start_stop_runtime_rco_clbr+0x16c>
 8023e3a:	f7fe f9a2 	bl	8022182 <os_get_tmr_state>
 8023e3e:	2800      	cmp	r0, #0
 8023e40:	d04c      	beq.n	8023edc <llhwc_cmn_start_stop_runtime_rco_clbr+0x16c>
 8023e42:	7a30      	ldrb	r0, [r6, #8]
 8023e44:	2102      	movs	r1, #2
 8023e46:	7631      	strb	r1, [r6, #24]
 8023e48:	f000 f908 	bl	802405c <llhwc_cmn_hw_rco_clbr>
 8023e4c:	e9d6 0103 	ldrd	r0, r1, [r6, #12]
 8023e50:	0149      	lsls	r1, r1, #5
 8023e52:	f7fe f834 	bl	8021ebe <os_timer_start>
 8023e56:	fab0 f080 	clz	r0, r0
 8023e5a:	0940      	lsrs	r0, r0, #5
 8023e5c:	2101      	movs	r1, #1
 8023e5e:	2501      	movs	r5, #1
 8023e60:	f7fb fcdf 	bl	801f822 <bsp_assert>
 8023e64:	7675      	strb	r5, [r6, #25]
 8023e66:	e039      	b.n	8023edc <llhwc_cmn_start_stop_runtime_rco_clbr+0x16c>
 8023e68:	2801      	cmp	r0, #1
 8023e6a:	d037      	beq.n	8023edc <llhwc_cmn_start_stop_runtime_rco_clbr+0x16c>
 8023e6c:	2901      	cmp	r1, #1
 8023e6e:	d135      	bne.n	8023edc <llhwc_cmn_start_stop_runtime_rco_clbr+0x16c>
 8023e70:	2033      	movs	r0, #51	@ 0x33
 8023e72:	f7fb fd21 	bl	801f8b8 <bsp_debug_gpio_toggle>
 8023e76:	f7fe f945 	bl	8022104 <os_timer_get_active_sw_timers_number>
 8023e7a:	2801      	cmp	r0, #1
 8023e7c:	d12e      	bne.n	8023edc <llhwc_cmn_start_stop_runtime_rco_clbr+0x16c>
 8023e7e:	68f0      	ldr	r0, [r6, #12]
 8023e80:	f7fe f97f 	bl	8022182 <os_get_tmr_state>
 8023e84:	bb50      	cbnz	r0, 8023edc <llhwc_cmn_start_stop_runtime_rco_clbr+0x16c>
 8023e86:	68f0      	ldr	r0, [r6, #12]
 8023e88:	f7fe f8d4 	bl	8022034 <os_timer_stop>
 8023e8c:	fab0 f080 	clz	r0, r0
 8023e90:	0940      	lsrs	r0, r0, #5
 8023e92:	2101      	movs	r1, #1
 8023e94:	f7fb fcc5 	bl	801f822 <bsp_assert>
 8023e98:	2500      	movs	r5, #0
 8023e9a:	2001      	movs	r0, #1
 8023e9c:	7675      	strb	r5, [r6, #25]
 8023e9e:	f7fb fcf4 	bl	801f88a <bsp_rco_clbr_not>
 8023ea2:	2014      	movs	r0, #20
 8023ea4:	f6c4 0002 	movt	r0, #18434	@ 0x4802
 8023ea8:	f8d0 1470 	ldr.w	r1, [r0, #1136]	@ 0x470
 8023eac:	f247 3204 	movw	r2, #29444	@ 0x7304
 8023eb0:	f021 0101 	bic.w	r1, r1, #1
 8023eb4:	f8c0 1470 	str.w	r1, [r0, #1136]	@ 0x470
 8023eb8:	6801      	ldr	r1, [r0, #0]
 8023eba:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8023ebe:	3101      	adds	r1, #1
 8023ec0:	6011      	str	r1, [r2, #0]
 8023ec2:	6901      	ldr	r1, [r0, #16]
 8023ec4:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 8023ec8:	6101      	str	r1, [r0, #16]
 8023eca:	6800      	ldr	r0, [r0, #0]
 8023ecc:	f247 3108 	movw	r1, #29448	@ 0x7308
 8023ed0:	3001      	adds	r0, #1
 8023ed2:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8023ed6:	6008      	str	r0, [r1, #0]
 8023ed8:	703d      	strb	r5, [r7, #0]
 8023eda:	7025      	strb	r5, [r4, #0]
 8023edc:	7838      	ldrb	r0, [r7, #0]
 8023ede:	2802      	cmp	r0, #2
 8023ee0:	d11a      	bne.n	8023f18 <llhwc_cmn_start_stop_runtime_rco_clbr+0x1a8>
 8023ee2:	7820      	ldrb	r0, [r4, #0]
 8023ee4:	b9c0      	cbnz	r0, 8023f18 <llhwc_cmn_start_stop_runtime_rco_clbr+0x1a8>
 8023ee6:	7e70      	ldrb	r0, [r6, #25]
 8023ee8:	2801      	cmp	r0, #1
 8023eea:	d115      	bne.n	8023f18 <llhwc_cmn_start_stop_runtime_rco_clbr+0x1a8>
 8023eec:	f247 3470 	movw	r4, #29552	@ 0x7370
 8023ef0:	f2c2 0400 	movt	r4, #8192	@ 0x2000
 8023ef4:	4620      	mov	r0, r4
 8023ef6:	2100      	movs	r1, #0
 8023ef8:	2218      	movs	r2, #24
 8023efa:	f000 fb75 	bl	80245e8 <ble_memset>
 8023efe:	f642 20fb 	movw	r0, #11003	@ 0x2afb
 8023f02:	f2c0 0005 	movt	r0, #5
 8023f06:	6020      	str	r0, [r4, #0]
 8023f08:	2002      	movs	r0, #2
 8023f0a:	7520      	strb	r0, [r4, #20]
 8023f0c:	f7fe fbde 	bl	80226cc <llhwc_cmn_reset_rco_clbr>
 8023f10:	2000      	movs	r0, #0
 8023f12:	2100      	movs	r1, #0
 8023f14:	f7fe fe46 	bl	8022ba4 <llhwc_cmn_initial_rco_clbr>
 8023f18:	f8d8 0000 	ldr.w	r0, [r8]
 8023f1c:	f7fb fceb 	bl	801f8f6 <os_rcrsv_mutex_release>
 8023f20:	2036      	movs	r0, #54	@ 0x36
 8023f22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8023f26:	f7fb bcc5 	b.w	801f8b4 <bsp_debug_gpio_clear>

08023f2a <llhwc_cmn_hw_rco_clbr_enable>:
 8023f2a:	b510      	push	{r4, lr}
 8023f2c:	f240 4484 	movw	r4, #1156	@ 0x484
 8023f30:	f6c4 0402 	movt	r4, #18434	@ 0x4802
 8023f34:	b198      	cbz	r0, 8023f5e <llhwc_cmn_hw_rco_clbr_enable+0x34>
 8023f36:	2000      	movs	r0, #0
 8023f38:	f7fb fca7 	bl	801f88a <bsp_rco_clbr_not>
 8023f3c:	2001      	movs	r0, #1
 8023f3e:	2105      	movs	r1, #5
 8023f40:	f7ff fe46 	bl	8023bd0 <llhwc_cmn_control_aclk>
 8023f44:	f247 3004 	movw	r0, #29444	@ 0x7304
 8023f48:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8023f4c:	6800      	ldr	r0, [r0, #0]
 8023f4e:	2102      	movs	r1, #2
 8023f50:	f7ff f910 	bl	8023174 <llhwc_slptmr_polling>
 8023f54:	6820      	ldr	r0, [r4, #0]
 8023f56:	f040 0001 	orr.w	r0, r0, #1
 8023f5a:	6020      	str	r0, [r4, #0]
 8023f5c:	bd10      	pop	{r4, pc}
 8023f5e:	2001      	movs	r0, #1
 8023f60:	f7fb fc93 	bl	801f88a <bsp_rco_clbr_not>
 8023f64:	6820      	ldr	r0, [r4, #0]
 8023f66:	f247 3104 	movw	r1, #29444	@ 0x7304
 8023f6a:	f020 0001 	bic.w	r0, r0, #1
 8023f6e:	6020      	str	r0, [r4, #0]
 8023f70:	f64f 3090 	movw	r0, #64400	@ 0xfb90
 8023f74:	f6cf 70ff 	movt	r0, #65535	@ 0xffff
 8023f78:	5820      	ldr	r0, [r4, r0]
 8023f7a:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8023f7e:	3001      	adds	r0, #1
 8023f80:	6008      	str	r0, [r1, #0]
 8023f82:	bd10      	pop	{r4, pc}

08023f84 <llhwc_cmn_hw_rco_compnstn_enable>:
 8023f84:	2114      	movs	r1, #20
 8023f86:	f6c4 0102 	movt	r1, #18434	@ 0x4802
 8023f8a:	690a      	ldr	r2, [r1, #16]
 8023f8c:	2801      	cmp	r0, #1
 8023f8e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8023f92:	610a      	str	r2, [r1, #16]
 8023f94:	680a      	ldr	r2, [r1, #0]
 8023f96:	f102 0301 	add.w	r3, r2, #1
 8023f9a:	f247 3208 	movw	r2, #29448	@ 0x7308
 8023f9e:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8023fa2:	6013      	str	r3, [r2, #0]
 8023fa4:	bf18      	it	ne
 8023fa6:	4770      	bxne	lr
 8023fa8:	f247 3c98 	movw	ip, #29592	@ 0x7398
 8023fac:	f2c2 0c00 	movt	ip, #8192	@ 0x2000
 8023fb0:	e9dc 3000 	ldrd	r3, r0, [ip]
 8023fb4:	fbb3 f0f0 	udiv	r0, r3, r0
 8023fb8:	60c8      	str	r0, [r1, #12]
 8023fba:	f89c 3020 	ldrb.w	r3, [ip, #32]
 8023fbe:	b133      	cbz	r3, 8023fce <llhwc_cmn_hw_rco_compnstn_enable+0x4a>
 8023fc0:	2b01      	cmp	r3, #1
 8023fc2:	d109      	bne.n	8023fd8 <llhwc_cmn_hw_rco_compnstn_enable+0x54>
 8023fc4:	690b      	ldr	r3, [r1, #16]
 8023fc6:	2001      	movs	r0, #1
 8023fc8:	f360 030f 	bfi	r3, r0, #0, #16
 8023fcc:	e009      	b.n	8023fe2 <llhwc_cmn_hw_rco_compnstn_enable+0x5e>
 8023fce:	6908      	ldr	r0, [r1, #16]
 8023fd0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8023fd4:	4303      	orrs	r3, r0
 8023fd6:	e004      	b.n	8023fe2 <llhwc_cmn_hw_rco_compnstn_enable+0x5e>
 8023fd8:	6908      	ldr	r0, [r1, #16]
 8023fda:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8023fde:	ea20 0303 	bic.w	r3, r0, r3
 8023fe2:	610b      	str	r3, [r1, #16]
 8023fe4:	6810      	ldr	r0, [r2, #0]
 8023fe6:	1c82      	adds	r2, r0, #2
 8023fe8:	6808      	ldr	r0, [r1, #0]
 8023fea:	3001      	adds	r0, #1
 8023fec:	4290      	cmp	r0, r2
 8023fee:	d9fb      	bls.n	8023fe8 <llhwc_cmn_hw_rco_compnstn_enable+0x64>
 8023ff0:	6908      	ldr	r0, [r1, #16]
 8023ff2:	f440 3080 	orr.w	r0, r0, #65536	@ 0x10000
 8023ff6:	6108      	str	r0, [r1, #16]
 8023ff8:	6808      	ldr	r0, [r1, #0]
 8023ffa:	f247 310c 	movw	r1, #29452	@ 0x730c
 8023ffe:	3001      	adds	r0, #1
 8024000:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8024004:	6008      	str	r0, [r1, #0]
 8024006:	2001      	movs	r0, #1
 8024008:	f88c 001a 	strb.w	r0, [ip, #26]
 802400c:	4770      	bx	lr

0802400e <llhwc_cmn_set_os_timer_activity>:
 802400e:	b5b0      	push	{r4, r5, r7, lr}
 8024010:	f248 15b4 	movw	r5, #33204	@ 0x81b4
 8024014:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 8024018:	6829      	ldr	r1, [r5, #0]
 802401a:	4604      	mov	r4, r0
 802401c:	4608      	mov	r0, r1
 802401e:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8024022:	f7fb fc62 	bl	801f8ea <os_rcrsv_mutex_wait>
 8024026:	f247 3110 	movw	r1, #29456	@ 0x7310
 802402a:	6828      	ldr	r0, [r5, #0]
 802402c:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8024030:	700c      	strb	r4, [r1, #0]
 8024032:	f7fb fc60 	bl	801f8f6 <os_rcrsv_mutex_release>
 8024036:	f247 3070 	movw	r0, #29552	@ 0x7370
 802403a:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 802403e:	7d00      	ldrb	r0, [r0, #20]
 8024040:	2801      	cmp	r0, #1
 8024042:	bf18      	it	ne
 8024044:	bdb0      	popne	{r4, r5, r7, pc}
 8024046:	f247 3098 	movw	r0, #29592	@ 0x7398
 802404a:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 802404e:	6900      	ldr	r0, [r0, #16]
 8024050:	b118      	cbz	r0, 802405a <llhwc_cmn_set_os_timer_activity+0x4c>
 8024052:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8024056:	f7ff be8b 	b.w	8023d70 <llhwc_cmn_start_stop_runtime_rco_clbr>
 802405a:	bdb0      	pop	{r4, r5, r7, pc}

0802405c <llhwc_cmn_hw_rco_clbr>:
 802405c:	b510      	push	{r4, lr}
 802405e:	4604      	mov	r4, r0
 8024060:	2001      	movs	r0, #1
 8024062:	f7fb fc12 	bl	801f88a <bsp_rco_clbr_not>
 8024066:	f240 4048 	movw	r0, #1096	@ 0x448
 802406a:	f6c4 0002 	movt	r0, #18434	@ 0x4802
 802406e:	6bc1      	ldr	r1, [r0, #60]	@ 0x3c
 8024070:	f240 4244 	movw	r2, #1092	@ 0x444
 8024074:	f021 0101 	bic.w	r1, r1, #1
 8024078:	63c1      	str	r1, [r0, #60]	@ 0x3c
 802407a:	f64f 31d0 	movw	r1, #64464	@ 0xfbd0
 802407e:	f6cf 71ff 	movt	r1, #65535	@ 0xffff
 8024082:	f6c4 0202 	movt	r2, #18434	@ 0x4802
 8024086:	5851      	ldr	r1, [r2, r1]
 8024088:	f247 3304 	movw	r3, #29444	@ 0x7304
 802408c:	3101      	adds	r1, #1
 802408e:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8024092:	6019      	str	r1, [r3, #0]
 8024094:	6bc1      	ldr	r1, [r0, #60]	@ 0x3c
 8024096:	f364 0147 	bfi	r1, r4, #1, #7
 802409a:	63c1      	str	r1, [r0, #60]	@ 0x3c
 802409c:	6801      	ldr	r1, [r0, #0]
 802409e:	f021 0120 	bic.w	r1, r1, #32
 80240a2:	6001      	str	r1, [r0, #0]
 80240a4:	6810      	ldr	r0, [r2, #0]
 80240a6:	f040 0020 	orr.w	r0, r0, #32
 80240aa:	6010      	str	r0, [r2, #0]
 80240ac:	6810      	ldr	r0, [r2, #0]
 80240ae:	f020 0120 	bic.w	r1, r0, #32
 80240b2:	2001      	movs	r0, #1
 80240b4:	6011      	str	r1, [r2, #0]
 80240b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80240ba:	f7ff bf36 	b.w	8023f2a <llhwc_cmn_hw_rco_clbr_enable>

080240be <llhwc_cmn_update_rco_timer>:
 80240be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80240c2:	f247 3898 	movw	r8, #29592	@ 0x7398
 80240c6:	f2c2 0800 	movt	r8, #8192	@ 0x2000
 80240ca:	e9d8 2300 	ldrd	r2, r3, [r8]
 80240ce:	f8d8 a010 	ldr.w	sl, [r8, #16]
 80240d2:	f898 7008 	ldrb.w	r7, [r8, #8]
 80240d6:	4604      	mov	r4, r0
 80240d8:	fbaa 0107 	umull	r0, r1, sl, r7
 80240dc:	f44f 49fa 	mov.w	r9, #32000	@ 0x7d00
 80240e0:	fbb2 f6f3 	udiv	r6, r2, r3
 80240e4:	fba0 0509 	umull	r0, r5, r0, r9
 80240e8:	fb01 5109 	mla	r1, r1, r9, r5
 80240ec:	fba6 2304 	umull	r2, r3, r6, r4
 80240f0:	f7dc f8ac 	bl	800024c <__aeabi_uldivmod>
 80240f4:	fba0 0106 	umull	r0, r1, r0, r6
 80240f8:	eb07 0247 	add.w	r2, r7, r7, lsl #1
 80240fc:	2300      	movs	r3, #0
 80240fe:	ebb0 0092 	subs.w	r0, r0, r2, lsr #2
 8024102:	f161 0100 	sbc.w	r1, r1, #0
 8024106:	fba0 0204 	umull	r0, r2, r0, r4
 802410a:	fb01 2104 	mla	r1, r1, r4, r2
 802410e:	fb07 f209 	mul.w	r2, r7, r9
 8024112:	f7dc f89b 	bl	800024c <__aeabi_uldivmod>
 8024116:	2114      	movs	r1, #20
 8024118:	f6c4 0102 	movt	r1, #18434	@ 0x4802
 802411c:	f247 320c 	movw	r2, #29452	@ 0x730c
 8024120:	6809      	ldr	r1, [r1, #0]
 8024122:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8024126:	6812      	ldr	r2, [r2, #0]
 8024128:	43c9      	mvns	r1, r1
 802412a:	4411      	add	r1, r2
 802412c:	eb01 1440 	add.w	r4, r1, r0, lsl #5
 8024130:	f8d8 000c 	ldr.w	r0, [r8, #12]
 8024134:	ebb4 1f4a 	cmp.w	r4, sl, lsl #5
 8024138:	bf28      	it	cs
 802413a:	ea4f 144a 	movcs.w	r4, sl, lsl #5
 802413e:	f7fd ff79 	bl	8022034 <os_timer_stop>
 8024142:	fab0 f080 	clz	r0, r0
 8024146:	0940      	lsrs	r0, r0, #5
 8024148:	2101      	movs	r1, #1
 802414a:	f7fb fb6a 	bl	801f822 <bsp_assert>
 802414e:	f8d8 000c 	ldr.w	r0, [r8, #12]
 8024152:	4621      	mov	r1, r4
 8024154:	f7fd feb3 	bl	8021ebe <os_timer_start>
 8024158:	fab0 f080 	clz	r0, r0
 802415c:	0940      	lsrs	r0, r0, #5
 802415e:	2101      	movs	r1, #1
 8024160:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8024164:	f7fb bb5d 	b.w	801f822 <bsp_assert>

08024168 <llhwc_cmn_rco_clbr_timer_cbk>:
 8024168:	b580      	push	{r7, lr}
 802416a:	2070      	movs	r0, #112	@ 0x70
 802416c:	f7fb fba0 	bl	801f8b0 <bsp_debug_gpio_set>
 8024170:	f247 3198 	movw	r1, #29592	@ 0x7398
 8024174:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8024178:	7a08      	ldrb	r0, [r1, #8]
 802417a:	2202      	movs	r2, #2
 802417c:	760a      	strb	r2, [r1, #24]
 802417e:	f7ff ff6d 	bl	802405c <llhwc_cmn_hw_rco_clbr>
 8024182:	2070      	movs	r0, #112	@ 0x70
 8024184:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8024188:	f7fb bb94 	b.w	801f8b4 <bsp_debug_gpio_clear>

0802418c <llhwc_cmn_evnt_notify>:
 802418c:	b5b0      	push	{r4, r5, r7, lr}
 802418e:	4604      	mov	r4, r0
 8024190:	2000      	movs	r0, #0
 8024192:	2101      	movs	r1, #1
 8024194:	2c02      	cmp	r4, #2
 8024196:	bf38      	it	cc
 8024198:	2001      	movcc	r0, #1
 802419a:	f7fb fb42 	bl	801f822 <bsp_assert>
 802419e:	f247 3518 	movw	r5, #29464	@ 0x7318
 80241a2:	2c01      	cmp	r4, #1
 80241a4:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 80241a8:	d102      	bne.n	80241b0 <llhwc_cmn_evnt_notify+0x24>
 80241aa:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 80241ac:	b100      	cbz	r0, 80241b0 <llhwc_cmn_evnt_notify+0x24>
 80241ae:	4780      	blx	r0
 80241b0:	f895 004f 	ldrb.w	r0, [r5, #79]	@ 0x4f
 80241b4:	42a0      	cmp	r0, r4
 80241b6:	d00e      	beq.n	80241d6 <llhwc_cmn_evnt_notify+0x4a>
 80241b8:	f084 0101 	eor.w	r1, r4, #1
 80241bc:	f080 0002 	eor.w	r0, r0, #2
 80241c0:	4308      	orrs	r0, r1
 80241c2:	fab0 f080 	clz	r0, r0
 80241c6:	0940      	lsrs	r0, r0, #5
 80241c8:	bf18      	it	ne
 80241ca:	bdb0      	popne	{r4, r5, r7, pc}
 80241cc:	4620      	mov	r0, r4
 80241ce:	f7fb fb4b 	bl	801f868 <bsp_evnt_not>
 80241d2:	f885 404f 	strb.w	r4, [r5, #79]	@ 0x4f
 80241d6:	bdb0      	pop	{r4, r5, r7, pc}

080241d8 <llhwc_cmn_sys_configure_ll_ctx>:
 80241d8:	b5b0      	push	{r4, r5, r7, lr}
 80241da:	460c      	mov	r4, r1
 80241dc:	4605      	mov	r5, r0
 80241de:	f000 fab4 	bl	802474a <os_wrapper_is_rtos_used>
 80241e2:	2100      	movs	r1, #0
 80241e4:	2d01      	cmp	r5, #1
 80241e6:	bf88      	it	hi
 80241e8:	2101      	movhi	r1, #1
 80241ea:	2c01      	cmp	r4, #1
 80241ec:	d80b      	bhi.n	8024206 <llhwc_cmn_sys_configure_ll_ctx+0x2e>
 80241ee:	fab0 f080 	clz	r0, r0
 80241f2:	0940      	lsrs	r0, r0, #5
 80241f4:	4008      	ands	r0, r1
 80241f6:	bf18      	it	ne
 80241f8:	bdb0      	popne	{r4, r5, r7, pc}
 80241fa:	f247 308c 	movw	r0, #29580	@ 0x738c
 80241fe:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8024202:	7005      	strb	r5, [r0, #0]
 8024204:	7044      	strb	r4, [r0, #1]
 8024206:	bdb0      	pop	{r4, r5, r7, pc}

08024208 <llhwc_cmn_pta_set_params>:
 8024208:	b570      	push	{r4, r5, r6, lr}
 802420a:	4606      	mov	r6, r0
 802420c:	2047      	movs	r0, #71	@ 0x47
 802420e:	4614      	mov	r4, r2
 8024210:	460d      	mov	r5, r1
 8024212:	f7fb fb4d 	bl	801f8b0 <bsp_debug_gpio_set>
 8024216:	f240 4188 	movw	r1, #1160	@ 0x488
 802421a:	f6c4 0102 	movt	r1, #18434	@ 0x4802
 802421e:	6808      	ldr	r0, [r1, #0]
 8024220:	42ae      	cmp	r6, r5
 8024222:	f366 1045 	bfi	r0, r6, #5, #1
 8024226:	6008      	str	r0, [r1, #0]
 8024228:	6808      	ldr	r0, [r1, #0]
 802422a:	f020 6000 	bic.w	r0, r0, #134217728	@ 0x8000000
 802422e:	bf18      	it	ne
 8024230:	f100 6000 	addne.w	r0, r0, #134217728	@ 0x8000000
 8024234:	6008      	str	r0, [r1, #0]
 8024236:	680a      	ldr	r2, [r1, #0]
 8024238:	2047      	movs	r0, #71	@ 0x47
 802423a:	f364 0204 	bfi	r2, r4, #0, #5
 802423e:	600a      	str	r2, [r1, #0]
 8024240:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8024244:	f7fb bb36 	b.w	801f8b4 <bsp_debug_gpio_clear>

08024248 <llhwc_cmn_pta_get_tx_reject_counter>:
 8024248:	f240 4088 	movw	r0, #1160	@ 0x488
 802424c:	f6c4 0002 	movt	r0, #18434	@ 0x4802
 8024250:	6800      	ldr	r0, [r0, #0]
 8024252:	f3c0 2004 	ubfx	r0, r0, #8, #5
 8024256:	4770      	bx	lr

08024258 <llhwc_cmn_pta_get_rx_reject_counter>:
 8024258:	f240 4088 	movw	r0, #1160	@ 0x488
 802425c:	f6c4 0002 	movt	r0, #18434	@ 0x4802
 8024260:	6800      	ldr	r0, [r0, #0]
 8024262:	f3c0 3044 	ubfx	r0, r0, #13, #5
 8024266:	4770      	bx	lr

08024268 <llhwc_cmn_pta_set_enable>:
 8024268:	b510      	push	{r4, lr}
 802426a:	4604      	mov	r4, r0
 802426c:	2046      	movs	r0, #70	@ 0x46
 802426e:	f7fb fb1f 	bl	801f8b0 <bsp_debug_gpio_set>
 8024272:	f240 4188 	movw	r1, #1160	@ 0x488
 8024276:	f6c4 0102 	movt	r1, #18434	@ 0x4802
 802427a:	680a      	ldr	r2, [r1, #0]
 802427c:	2046      	movs	r0, #70	@ 0x46
 802427e:	f364 12c7 	bfi	r2, r4, #7, #1
 8024282:	600a      	str	r2, [r1, #0]
 8024284:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8024288:	f7fb bb14 	b.w	801f8b4 <bsp_debug_gpio_clear>

0802428c <llhwc_cmn_request_temperature>:
 802428c:	f247 3090 	movw	r0, #29584	@ 0x7390
 8024290:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8024294:	7881      	ldrb	r1, [r0, #2]
 8024296:	2901      	cmp	r1, #1
 8024298:	bf18      	it	ne
 802429a:	4770      	bxne	lr
 802429c:	78c0      	ldrb	r0, [r0, #3]
 802429e:	0780      	lsls	r0, r0, #30
 80242a0:	bf48      	it	mi
 80242a2:	f7fb bb03 	bmi.w	801f8ac <bsp_request_temperature>
 80242a6:	4770      	bx	lr

080242a8 <llhwc_cmn_rgstr_evnt_schdlr_timing_update_cb>:
 80242a8:	f247 3118 	movw	r1, #29464	@ 0x7318
 80242ac:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 80242b0:	6488      	str	r0, [r1, #72]	@ 0x48
 80242b2:	4770      	bx	lr

080242b4 <llhwc_cmn_get_desc>:
 80242b4:	b570      	push	{r4, r5, r6, lr}
 80242b6:	2101      	movs	r1, #1
 80242b8:	4604      	mov	r4, r0
 80242ba:	2800      	cmp	r0, #0
 80242bc:	bf18      	it	ne
 80242be:	2001      	movne	r0, #1
 80242c0:	2601      	movs	r6, #1
 80242c2:	f7fb faae 	bl	801f822 <bsp_assert>
 80242c6:	f247 31c0 	movw	r1, #29632	@ 0x73c0
 80242ca:	2000      	movs	r0, #0
 80242cc:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 80242d0:	2500      	movs	r5, #0
 80242d2:	bf00      	nop
 80242d4:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
 80242d8:	7912      	ldrb	r2, [r2, #4]
 80242da:	2a01      	cmp	r2, #1
 80242dc:	d103      	bne.n	80242e6 <llhwc_cmn_get_desc+0x32>
 80242de:	f851 2030 	ldr.w	r2, [r1, r0, lsl #3]
 80242e2:	42a2      	cmp	r2, r4
 80242e4:	d005      	beq.n	80242f2 <llhwc_cmn_get_desc+0x3e>
 80242e6:	2001      	movs	r0, #1
 80242e8:	07f2      	lsls	r2, r6, #31
 80242ea:	f04f 0600 	mov.w	r6, #0
 80242ee:	d1f1      	bne.n	80242d4 <llhwc_cmn_get_desc+0x20>
 80242f0:	e007      	b.n	8024302 <llhwc_cmn_get_desc+0x4e>
 80242f2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80242f6:	f248 2138 	movw	r1, #33336	@ 0x8238
 80242fa:	f6c4 0102 	movt	r1, #18434	@ 0x4802
 80242fe:	eb01 1500 	add.w	r5, r1, r0, lsl #4
 8024302:	4628      	mov	r0, r5
 8024304:	2101      	movs	r1, #1
 8024306:	2d00      	cmp	r5, #0
 8024308:	bf18      	it	ne
 802430a:	2001      	movne	r0, #1
 802430c:	f7fb fa89 	bl	801f822 <bsp_assert>
 8024310:	4628      	mov	r0, r5
 8024312:	bd70      	pop	{r4, r5, r6, pc}

08024314 <llhwc_cmn_get_enc_desc>:
 8024314:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024318:	2101      	movs	r1, #1
 802431a:	4680      	mov	r8, r0
 802431c:	2800      	cmp	r0, #0
 802431e:	bf18      	it	ne
 8024320:	2001      	movne	r0, #1
 8024322:	2501      	movs	r5, #1
 8024324:	f7fb fa7d 	bl	801f822 <bsp_assert>
 8024328:	f247 37c0 	movw	r7, #29632	@ 0x73c0
 802432c:	2600      	movs	r6, #0
 802432e:	f2c2 0700 	movt	r7, #8192	@ 0x2000
 8024332:	bf00      	nop
 8024334:	eb07 04c6 	add.w	r4, r7, r6, lsl #3
 8024338:	7920      	ldrb	r0, [r4, #4]
 802433a:	2801      	cmp	r0, #1
 802433c:	d10c      	bne.n	8024358 <llhwc_cmn_get_enc_desc+0x44>
 802433e:	f857 0036 	ldr.w	r0, [r7, r6, lsl #3]
 8024342:	4540      	cmp	r0, r8
 8024344:	d108      	bne.n	8024358 <llhwc_cmn_get_enc_desc+0x44>
 8024346:	f814 0f05 	ldrb.w	r0, [r4, #5]!
 802434a:	2802      	cmp	r0, #2
 802434c:	d20d      	bcs.n	802436a <llhwc_cmn_get_enc_desc+0x56>
 802434e:	2000      	movs	r0, #0
 8024350:	2101      	movs	r1, #1
 8024352:	f7fb fa66 	bl	801f822 <bsp_assert>
 8024356:	bf00      	nop
 8024358:	2000      	movs	r0, #0
 802435a:	2601      	movs	r6, #1
 802435c:	07e9      	lsls	r1, r5, #31
 802435e:	f04f 0500 	mov.w	r5, #0
 8024362:	bf08      	it	eq
 8024364:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
 8024368:	e7e4      	b.n	8024334 <llhwc_cmn_get_enc_desc+0x20>
 802436a:	2101      	movs	r1, #1
 802436c:	ea21 0000 	bic.w	r0, r1, r0
 8024370:	2101      	movs	r1, #1
 8024372:	f7fb fa56 	bl	801f822 <bsp_assert>
 8024376:	7820      	ldrb	r0, [r4, #0]
 8024378:	f248 2138 	movw	r1, #33336	@ 0x8238
 802437c:	eb06 0050 	add.w	r0, r6, r0, lsr #1
 8024380:	f6c4 0102 	movt	r1, #18434	@ 0x4802
 8024384:	b2c0      	uxtb	r0, r0
 8024386:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802438a:	eb01 1000 	add.w	r0, r1, r0, lsl #4
 802438e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08024392 <ll_mem_init>:
 8024392:	b580      	push	{r7, lr}
 8024394:	b082      	sub	sp, #8
 8024396:	f247 30f4 	movw	r0, #29684	@ 0x73f4
 802439a:	f247 31fc 	movw	r1, #29692	@ 0x73fc
 802439e:	f04f 0c00 	mov.w	ip, #0
 80243a2:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80243a6:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 80243aa:	220c      	movs	r2, #12
 80243ac:	2335      	movs	r3, #53	@ 0x35
 80243ae:	f8cd c000 	str.w	ip, [sp]
 80243b2:	f000 f833 	bl	802441c <mem_pool_init>
 80243b6:	f247 704c 	movw	r0, #30540	@ 0x774c
 80243ba:	f247 7154 	movw	r1, #30548	@ 0x7754
 80243be:	f04f 0c01 	mov.w	ip, #1
 80243c2:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80243c6:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 80243ca:	2218      	movs	r2, #24
 80243cc:	2323      	movs	r3, #35	@ 0x23
 80243ce:	f8cd c000 	str.w	ip, [sp]
 80243d2:	f000 f823 	bl	802441c <mem_pool_init>
 80243d6:	f647 3028 	movw	r0, #31528	@ 0x7b28
 80243da:	f647 3130 	movw	r1, #31536	@ 0x7b30
 80243de:	f04f 0c02 	mov.w	ip, #2
 80243e2:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80243e6:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 80243ea:	2210      	movs	r2, #16
 80243ec:	2301      	movs	r3, #1
 80243ee:	f8cd c000 	str.w	ip, [sp]
 80243f2:	f000 f813 	bl	802441c <mem_pool_init>
 80243f6:	f647 3044 	movw	r0, #31556	@ 0x7b44
 80243fa:	f647 314c 	movw	r1, #31564	@ 0x7b4c
 80243fe:	f04f 0c03 	mov.w	ip, #3
 8024402:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8024406:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 802440a:	f240 1201 	movw	r2, #257	@ 0x101
 802440e:	2306      	movs	r3, #6
 8024410:	f8cd c000 	str.w	ip, [sp]
 8024414:	f000 f802 	bl	802441c <mem_pool_init>
 8024418:	b002      	add	sp, #8
 802441a:	bd80      	pop	{r7, pc}

0802441c <mem_pool_init>:
 802441c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8024420:	460e      	mov	r6, r1
 8024422:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8024426:	2101      	movs	r1, #1
 8024428:	461d      	mov	r5, r3
 802442a:	4690      	mov	r8, r2
 802442c:	4604      	mov	r4, r0
 802442e:	2800      	cmp	r0, #0
 8024430:	bf18      	it	ne
 8024432:	2001      	movne	r0, #1
 8024434:	f7fb f9f5 	bl	801f822 <bsp_assert>
 8024438:	2000      	movs	r0, #0
 802443a:	2101      	movs	r1, #1
 802443c:	f04f 0a00 	mov.w	sl, #0
 8024440:	f1b9 0f0e 	cmp.w	r9, #14
 8024444:	bf38      	it	cc
 8024446:	2001      	movcc	r0, #1
 8024448:	f7fb f9eb 	bl	801f822 <bsp_assert>
 802444c:	f647 50ff 	movw	r0, #32255	@ 0x7dff
 8024450:	f2cb 70fd 	movt	r0, #47101	@ 0xb7fd
 8024454:	4430      	add	r0, r6
 8024456:	f108 0107 	add.w	r1, r8, #7
 802445a:	f643 52fe 	movw	r2, #15870	@ 0x3dfe
 802445e:	4290      	cmp	r0, r2
 8024460:	f021 0703 	bic.w	r7, r1, #3
 8024464:	d80d      	bhi.n	8024482 <mem_pool_init+0x66>
 8024466:	fb07 6005 	mla	r0, r7, r5, r6
 802446a:	f24c 0101 	movw	r1, #49153	@ 0xc001
 802446e:	f6c4 0102 	movt	r1, #18434	@ 0x4802
 8024472:	4288      	cmp	r0, r1
 8024474:	bf38      	it	cc
 8024476:	f04f 0a01 	movcc.w	sl, #1
 802447a:	4650      	mov	r0, sl
 802447c:	2101      	movs	r1, #1
 802447e:	f7fb f9d0 	bl	801f822 <bsp_assert>
 8024482:	6027      	str	r7, [r4, #0]
 8024484:	b19d      	cbz	r5, 80244ae <mem_pool_init+0x92>
 8024486:	ea4f 4009 	mov.w	r0, r9, lsl #16
 802448a:	f100 402a 	add.w	r0, r0, #2852126720	@ 0xaa000000
 802448e:	6066      	str	r6, [r4, #4]
 8024490:	19f1      	adds	r1, r6, r7
 8024492:	e9c6 0100 	strd	r0, r1, [r6]
 8024496:	3d01      	subs	r5, #1
 8024498:	460e      	mov	r6, r1
 802449a:	d1f9      	bne.n	8024490 <mem_pool_init+0x74>
 802449c:	1bc8      	subs	r0, r1, r7
 802449e:	2100      	movs	r1, #0
 80244a0:	6041      	str	r1, [r0, #4]
 80244a2:	f248 107c 	movw	r0, #33148	@ 0x817c
 80244a6:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80244aa:	f840 4029 	str.w	r4, [r0, r9, lsl #2]
 80244ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080244b2 <mem_pool_alloc>:
 80244b2:	b570      	push	{r4, r5, r6, lr}
 80244b4:	2101      	movs	r1, #1
 80244b6:	4605      	mov	r5, r0
 80244b8:	2800      	cmp	r0, #0
 80244ba:	bf18      	it	ne
 80244bc:	2001      	movne	r0, #1
 80244be:	f7fb f9b0 	bl	801f822 <bsp_assert>
 80244c2:	f7fb fa0e 	bl	801f8e2 <os_disable_isr>
 80244c6:	686e      	ldr	r6, [r5, #4]
 80244c8:	2400      	movs	r4, #0
 80244ca:	b1ae      	cbz	r6, 80244f8 <mem_pool_alloc+0x46>
 80244cc:	6830      	ldr	r0, [r6, #0]
 80244ce:	2101      	movs	r1, #1
 80244d0:	f000 407f 	and.w	r0, r0, #4278190080	@ 0xff000000
 80244d4:	f100 40ac 	add.w	r0, r0, #1442840576	@ 0x56000000
 80244d8:	fab0 f080 	clz	r0, r0
 80244dc:	0940      	lsrs	r0, r0, #5
 80244de:	f7fb f9a0 	bl	801f822 <bsp_assert>
 80244e2:	4630      	mov	r0, r6
 80244e4:	f850 1f04 	ldr.w	r1, [r0, #4]!
 80244e8:	22ee      	movs	r2, #238	@ 0xee
 80244ea:	6069      	str	r1, [r5, #4]
 80244ec:	6831      	ldr	r1, [r6, #0]
 80244ee:	f362 611f 	bfi	r1, r2, #24, #8
 80244f2:	6031      	str	r1, [r6, #0]
 80244f4:	6004      	str	r4, [r0, #0]
 80244f6:	4604      	mov	r4, r0
 80244f8:	f7fb f9f5 	bl	801f8e6 <os_enable_isr>
 80244fc:	4620      	mov	r0, r4
 80244fe:	bd70      	pop	{r4, r5, r6, pc}

08024500 <mem_pool_free>:
 8024500:	b570      	push	{r4, r5, r6, lr}
 8024502:	4605      	mov	r5, r0
 8024504:	4604      	mov	r4, r0
 8024506:	f855 0d04 	ldr.w	r0, [r5, #-4]!
 802450a:	f248 127c 	movw	r2, #33148	@ 0x817c
 802450e:	f3c0 4107 	ubfx	r1, r0, #16, #8
 8024512:	f000 407f 	and.w	r0, r0, #4278190080	@ 0xff000000
 8024516:	f100 5090 	add.w	r0, r0, #301989888	@ 0x12000000
 802451a:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 802451e:	fab0 f080 	clz	r0, r0
 8024522:	f852 6021 	ldr.w	r6, [r2, r1, lsl #2]
 8024526:	0940      	lsrs	r0, r0, #5
 8024528:	2101      	movs	r1, #1
 802452a:	f7fb f97a 	bl	801f822 <bsp_assert>
 802452e:	f7fb f9d8 	bl	801f8e2 <os_disable_isr>
 8024532:	6870      	ldr	r0, [r6, #4]
 8024534:	6075      	str	r5, [r6, #4]
 8024536:	6020      	str	r0, [r4, #0]
 8024538:	20aa      	movs	r0, #170	@ 0xaa
 802453a:	f804 0c01 	strb.w	r0, [r4, #-1]
 802453e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8024542:	f7fb b9d0 	b.w	801f8e6 <os_enable_isr>
	...

08024548 <ble_memcpy>:
 8024548:	b570      	push	{r4, r5, r6, lr}
 802454a:	2a00      	cmp	r2, #0
 802454c:	d041      	beq.n	80245d2 <ble_memcpy+0x8a>
 802454e:	f000 0303 	and.w	r3, r0, #3
 8024552:	f1c3 0404 	rsb	r4, r3, #4
 8024556:	42a2      	cmp	r2, r4
 8024558:	4625      	mov	r5, r4
 802455a:	bf38      	it	cc
 802455c:	4615      	movcc	r5, r2
 802455e:	2a04      	cmp	r2, #4
 8024560:	bf28      	it	cs
 8024562:	4625      	movcs	r5, r4
 8024564:	f1b5 0e04 	subs.w	lr, r5, #4
 8024568:	bf18      	it	ne
 802456a:	46ae      	movne	lr, r5
 802456c:	f001 0503 	and.w	r5, r1, #3
 8024570:	429d      	cmp	r5, r3
 8024572:	d130      	bne.n	80245d6 <ble_memcpy+0x8e>
 8024574:	eba2 020e 	sub.w	r2, r2, lr
 8024578:	eb02 7392 	add.w	r3, r2, r2, lsr #30
 802457c:	ea5f 650e 	movs.w	r5, lr, lsl #24
 8024580:	ea4f 0ca3 	mov.w	ip, r3, asr #2
 8024584:	d008      	beq.n	8024598 <ble_memcpy+0x50>
 8024586:	4673      	mov	r3, lr
 8024588:	4604      	mov	r4, r0
 802458a:	460d      	mov	r5, r1
 802458c:	f815 6b01 	ldrb.w	r6, [r5], #1
 8024590:	3b01      	subs	r3, #1
 8024592:	f804 6b01 	strb.w	r6, [r4], #1
 8024596:	d1f9      	bne.n	802458c <ble_memcpy+0x44>
 8024598:	fa1f fc8c 	uxth.w	ip, ip
 802459c:	f002 0203 	and.w	r2, r2, #3
 80245a0:	f1bc 0f00 	cmp.w	ip, #0
 80245a4:	d00a      	beq.n	80245bc <ble_memcpy+0x74>
 80245a6:	eb00 030e 	add.w	r3, r0, lr
 80245aa:	eb01 040e 	add.w	r4, r1, lr
 80245ae:	4665      	mov	r5, ip
 80245b0:	f854 6b04 	ldr.w	r6, [r4], #4
 80245b4:	3d01      	subs	r5, #1
 80245b6:	f843 6b04 	str.w	r6, [r3], #4
 80245ba:	d1f9      	bne.n	80245b0 <ble_memcpy+0x68>
 80245bc:	b19a      	cbz	r2, 80245e6 <ble_memcpy+0x9e>
 80245be:	ea4f 038c 	mov.w	r3, ip, lsl #2
 80245c2:	4473      	add	r3, lr
 80245c4:	5cce      	ldrb	r6, [r1, r3]
 80245c6:	3a01      	subs	r2, #1
 80245c8:	54c6      	strb	r6, [r0, r3]
 80245ca:	f103 0301 	add.w	r3, r3, #1
 80245ce:	d1f9      	bne.n	80245c4 <ble_memcpy+0x7c>
 80245d0:	e009      	b.n	80245e6 <ble_memcpy+0x9e>
 80245d2:	2000      	movs	r0, #0
 80245d4:	bd70      	pop	{r4, r5, r6, pc}
 80245d6:	2300      	movs	r3, #0
 80245d8:	5cce      	ldrb	r6, [r1, r3]
 80245da:	3a01      	subs	r2, #1
 80245dc:	54c6      	strb	r6, [r0, r3]
 80245de:	0416      	lsls	r6, r2, #16
 80245e0:	f103 0301 	add.w	r3, r3, #1
 80245e4:	d1f8      	bne.n	80245d8 <ble_memcpy+0x90>
 80245e6:	bd70      	pop	{r4, r5, r6, pc}

080245e8 <ble_memset>:
 80245e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80245ec:	4604      	mov	r4, r0
 80245ee:	f000 0003 	and.w	r0, r0, #3
 80245f2:	f1c0 0004 	rsb	r0, r0, #4
 80245f6:	4282      	cmp	r2, r0
 80245f8:	4603      	mov	r3, r0
 80245fa:	bf38      	it	cc
 80245fc:	4613      	movcc	r3, r2
 80245fe:	2a04      	cmp	r2, #4
 8024600:	bf28      	it	cs
 8024602:	4603      	movcs	r3, r0
 8024604:	1f1e      	subs	r6, r3, #4
 8024606:	bf18      	it	ne
 8024608:	461e      	movne	r6, r3
 802460a:	1b97      	subs	r7, r2, r6
 802460c:	eb07 7597 	add.w	r5, r7, r7, lsr #30
 8024610:	4688      	mov	r8, r1
 8024612:	b126      	cbz	r6, 802461e <ble_memset+0x36>
 8024614:	4620      	mov	r0, r4
 8024616:	4631      	mov	r1, r6
 8024618:	4642      	mov	r2, r8
 802461a:	f7db fdc1 	bl	80001a0 <__aeabi_memset>
 802461e:	1cf8      	adds	r0, r7, #3
 8024620:	ea4f 0ca5 	mov.w	ip, r5, asr #2
 8024624:	f007 0103 	and.w	r1, r7, #3
 8024628:	2807      	cmp	r0, #7
 802462a:	eb04 0706 	add.w	r7, r4, r6
 802462e:	d309      	bcc.n	8024644 <ble_memset+0x5c>
 8024630:	f04f 3001 	mov.w	r0, #16843009	@ 0x1010101
 8024634:	fb08 f300 	mul.w	r3, r8, r0
 8024638:	4660      	mov	r0, ip
 802463a:	463a      	mov	r2, r7
 802463c:	f842 3b04 	str.w	r3, [r2], #4
 8024640:	3801      	subs	r0, #1
 8024642:	d1fb      	bne.n	802463c <ble_memset+0x54>
 8024644:	b121      	cbz	r1, 8024650 <ble_memset+0x68>
 8024646:	eb07 008c 	add.w	r0, r7, ip, lsl #2
 802464a:	4642      	mov	r2, r8
 802464c:	f7db fda8 	bl	80001a0 <__aeabi_memset>
 8024650:	4620      	mov	r0, r4
 8024652:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08024658 <ble_memcmp>:
 8024658:	b5f0      	push	{r4, r5, r6, r7, lr}
 802465a:	f000 0303 	and.w	r3, r0, #3
 802465e:	f1c3 0404 	rsb	r4, r3, #4
 8024662:	42a2      	cmp	r2, r4
 8024664:	4625      	mov	r5, r4
 8024666:	bf38      	it	cc
 8024668:	4615      	movcc	r5, r2
 802466a:	2a04      	cmp	r2, #4
 802466c:	bf28      	it	cs
 802466e:	4625      	movcs	r5, r4
 8024670:	f1b5 0e04 	subs.w	lr, r5, #4
 8024674:	bf18      	it	ne
 8024676:	46ae      	movne	lr, r5
 8024678:	f001 0503 	and.w	r5, r1, #3
 802467c:	429d      	cmp	r5, r3
 802467e:	d141      	bne.n	8024704 <ble_memcmp+0xac>
 8024680:	ea5f 630e 	movs.w	r3, lr, lsl #24
 8024684:	d010      	beq.n	80246a8 <ble_memcmp+0x50>
 8024686:	fa5f fc8e 	uxtb.w	ip, lr
 802468a:	2300      	movs	r3, #0
 802468c:	4604      	mov	r4, r0
 802468e:	460d      	mov	r5, r1
 8024690:	7826      	ldrb	r6, [r4, #0]
 8024692:	782f      	ldrb	r7, [r5, #0]
 8024694:	42be      	cmp	r6, r7
 8024696:	d343      	bcc.n	8024720 <ble_memcmp+0xc8>
 8024698:	d844      	bhi.n	8024724 <ble_memcmp+0xcc>
 802469a:	3301      	adds	r3, #1
 802469c:	b29e      	uxth	r6, r3
 802469e:	3501      	adds	r5, #1
 80246a0:	4566      	cmp	r6, ip
 80246a2:	f104 0401 	add.w	r4, r4, #1
 80246a6:	d3f3      	bcc.n	8024690 <ble_memcmp+0x38>
 80246a8:	eba2 0c0e 	sub.w	ip, r2, lr
 80246ac:	eb0c 729c 	add.w	r2, ip, ip, lsr #30
 80246b0:	eb00 040e 	add.w	r4, r0, lr
 80246b4:	1092      	asrs	r2, r2, #2
 80246b6:	b292      	uxth	r2, r2
 80246b8:	eb01 050e 	add.w	r5, r1, lr
 80246bc:	b16a      	cbz	r2, 80246da <ble_memcmp+0x82>
 80246be:	2300      	movs	r3, #0
 80246c0:	4620      	mov	r0, r4
 80246c2:	4629      	mov	r1, r5
 80246c4:	6807      	ldr	r7, [r0, #0]
 80246c6:	680e      	ldr	r6, [r1, #0]
 80246c8:	42b7      	cmp	r7, r6
 80246ca:	d329      	bcc.n	8024720 <ble_memcmp+0xc8>
 80246cc:	d82a      	bhi.n	8024724 <ble_memcmp+0xcc>
 80246ce:	3301      	adds	r3, #1
 80246d0:	3104      	adds	r1, #4
 80246d2:	4293      	cmp	r3, r2
 80246d4:	f100 0004 	add.w	r0, r0, #4
 80246d8:	d3f4      	bcc.n	80246c4 <ble_memcmp+0x6c>
 80246da:	f01c 0303 	ands.w	r3, ip, #3
 80246de:	d01d      	beq.n	802471c <ble_memcmp+0xc4>
 80246e0:	eb04 0082 	add.w	r0, r4, r2, lsl #2
 80246e4:	eb05 0182 	add.w	r1, r5, r2, lsl #2
 80246e8:	2200      	movs	r2, #0
 80246ea:	bf00      	nop
 80246ec:	7807      	ldrb	r7, [r0, #0]
 80246ee:	780e      	ldrb	r6, [r1, #0]
 80246f0:	42b7      	cmp	r7, r6
 80246f2:	d315      	bcc.n	8024720 <ble_memcmp+0xc8>
 80246f4:	d816      	bhi.n	8024724 <ble_memcmp+0xcc>
 80246f6:	3201      	adds	r2, #1
 80246f8:	3101      	adds	r1, #1
 80246fa:	429a      	cmp	r2, r3
 80246fc:	f100 0001 	add.w	r0, r0, #1
 8024700:	d3f4      	bcc.n	80246ec <ble_memcmp+0x94>
 8024702:	e00b      	b.n	802471c <ble_memcmp+0xc4>
 8024704:	b152      	cbz	r2, 802471c <ble_memcmp+0xc4>
 8024706:	2300      	movs	r3, #0
 8024708:	5cc7      	ldrb	r7, [r0, r3]
 802470a:	5cce      	ldrb	r6, [r1, r3]
 802470c:	42b7      	cmp	r7, r6
 802470e:	d307      	bcc.n	8024720 <ble_memcmp+0xc8>
 8024710:	d808      	bhi.n	8024724 <ble_memcmp+0xcc>
 8024712:	3a01      	subs	r2, #1
 8024714:	0417      	lsls	r7, r2, #16
 8024716:	f103 0301 	add.w	r3, r3, #1
 802471a:	d1f5      	bne.n	8024708 <ble_memcmp+0xb0>
 802471c:	2000      	movs	r0, #0
 802471e:	e002      	b.n	8024726 <ble_memcmp+0xce>
 8024720:	20ff      	movs	r0, #255	@ 0xff
 8024722:	e000      	b.n	8024726 <ble_memcmp+0xce>
 8024724:	2001      	movs	r0, #1
 8024726:	b240      	sxtb	r0, r0
 8024728:	bdf0      	pop	{r4, r5, r6, r7, pc}

0802472a <intr_hndlr_reg>:
 802472a:	f248 12b8 	movw	r2, #33208	@ 0x81b8
 802472e:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8024732:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
 8024736:	4770      	bx	lr

08024738 <os_process_isr>:
 8024738:	f248 11b8 	movw	r1, #33208	@ 0x81b8
 802473c:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8024740:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 8024744:	4700      	bx	r0

08024746 <os_wrapper_init>:
 8024746:	f7fd ba63 	b.w	8021c10 <os_timer_init>

0802474a <os_wrapper_is_rtos_used>:
 802474a:	2000      	movs	r0, #0
 802474c:	4770      	bx	lr
	...

08024750 <pta_init_acl>:
 8024750:	b5f0      	push	{r4, r5, r6, r7, lr}
 8024752:	b081      	sub	sp, #4
 8024754:	f248 15d4 	movw	r5, #33236	@ 0x81d4
 8024758:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 802475c:	7e69      	ldrb	r1, [r5, #25]
 802475e:	b1e9      	cbz	r1, 802479c <pta_init_acl+0x4c>
 8024760:	4604      	mov	r4, r0
 8024762:	2000      	movs	r0, #0
 8024764:	eb00 0140 	add.w	r1, r0, r0, lsl #1
 8024768:	5c69      	ldrb	r1, [r5, r1]
 802476a:	b139      	cbz	r1, 802477c <pta_init_acl+0x2c>
 802476c:	3001      	adds	r0, #1
 802476e:	2808      	cmp	r0, #8
 8024770:	d1f8      	bne.n	8024764 <pta_init_acl+0x14>
 8024772:	2000      	movs	r0, #0
 8024774:	2101      	movs	r1, #1
 8024776:	f7fb f854 	bl	801f822 <bsp_assert>
 802477a:	2008      	movs	r0, #8
 802477c:	eb00 0140 	add.w	r1, r0, r0, lsl #1
 8024780:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8024784:	2201      	movs	r2, #1
 8024786:	182e      	adds	r6, r5, r0
 8024788:	546a      	strb	r2, [r5, r1]
 802478a:	1c75      	adds	r5, r6, #1
 802478c:	4628      	mov	r0, r5
 802478e:	2100      	movs	r1, #0
 8024790:	2202      	movs	r2, #2
 8024792:	2702      	movs	r7, #2
 8024794:	f7ff ff28 	bl	80245e8 <ble_memset>
 8024798:	7077      	strb	r7, [r6, #1]
 802479a:	6025      	str	r5, [r4, #0]
 802479c:	b001      	add	sp, #4
 802479e:	bdf0      	pop	{r4, r5, r6, r7, pc}

080247a0 <pta_configure_acl_params>:
 80247a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80247a2:	b081      	sub	sp, #4
 80247a4:	f248 12d4 	movw	r2, #33236	@ 0x81d4
 80247a8:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 80247ac:	7e53      	ldrb	r3, [r2, #25]
 80247ae:	b143      	cbz	r3, 80247c2 <pta_configure_acl_params+0x22>
 80247b0:	2901      	cmp	r1, #1
 80247b2:	d008      	beq.n	80247c6 <pta_configure_acl_params+0x26>
 80247b4:	b971      	cbnz	r1, 80247d4 <pta_configure_acl_params+0x34>
 80247b6:	7e10      	ldrb	r0, [r2, #24]
 80247b8:	f3c0 04c0 	ubfx	r4, r0, #3, #1
 80247bc:	2200      	movs	r2, #0
 80247be:	4621      	mov	r1, r4
 80247c0:	e060      	b.n	8024884 <pta_configure_acl_params+0xe4>
 80247c2:	b001      	add	sp, #4
 80247c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80247c6:	4604      	mov	r4, r0
 80247c8:	b150      	cbz	r0, 80247e0 <pta_configure_acl_params+0x40>
 80247ca:	6820      	ldr	r0, [r4, #0]
 80247cc:	2800      	cmp	r0, #0
 80247ce:	bf18      	it	ne
 80247d0:	2001      	movne	r0, #1
 80247d2:	e006      	b.n	80247e2 <pta_configure_acl_params+0x42>
 80247d4:	2000      	movs	r0, #0
 80247d6:	2101      	movs	r1, #1
 80247d8:	2400      	movs	r4, #0
 80247da:	f7fb f822 	bl	801f822 <bsp_assert>
 80247de:	e04f      	b.n	8024880 <pta_configure_acl_params+0xe0>
 80247e0:	2000      	movs	r0, #0
 80247e2:	2101      	movs	r1, #1
 80247e4:	f7fb f81d 	bl	801f822 <bsp_assert>
 80247e8:	6825      	ldr	r5, [r4, #0]
 80247ea:	7828      	ldrb	r0, [r5, #0]
 80247ec:	2804      	cmp	r0, #4
 80247ee:	d12b      	bne.n	8024848 <pta_configure_acl_params+0xa8>
 80247f0:	786f      	ldrb	r7, [r5, #1]
 80247f2:	2001      	movs	r0, #1
 80247f4:	2101      	movs	r1, #1
 80247f6:	2601      	movs	r6, #1
 80247f8:	f7fb f813 	bl	801f822 <bsp_assert>
 80247fc:	68a0      	ldr	r0, [r4, #8]
 80247fe:	f242 7110 	movw	r1, #10000	@ 0x2710
 8024802:	fb07 f000 	mul.w	r0, r7, r0
 8024806:	6862      	ldr	r2, [r4, #4]
 8024808:	fb00 f101 	mul.w	r1, r0, r1
 802480c:	f248 501f 	movw	r0, #34079	@ 0x851f
 8024810:	f2c5 10eb 	movt	r0, #20971	@ 0x51eb
 8024814:	fba1 1300 	umull	r1, r3, r1, r0
 8024818:	ebb2 1f53 	cmp.w	r2, r3, lsr #5
 802481c:	d212      	bcs.n	8024844 <pta_configure_acl_params+0xa4>
 802481e:	6921      	ldr	r1, [r4, #16]
 8024820:	f240 42e2 	movw	r2, #1250	@ 0x4e2
 8024824:	fb01 f102 	mul.w	r1, r1, r2
 8024828:	f06f 0295 	mvn.w	r2, #149	@ 0x95
 802482c:	eb02 0151 	add.w	r1, r2, r1, lsr #1
 8024830:	68e2      	ldr	r2, [r4, #12]
 8024832:	fb01 f107 	mul.w	r1, r1, r7
 8024836:	2600      	movs	r6, #0
 8024838:	fba1 0100 	umull	r0, r1, r1, r0
 802483c:	ebb2 1f51 	cmp.w	r2, r1, lsr #5
 8024840:	bf28      	it	cs
 8024842:	2601      	movcs	r6, #1
 8024844:	7828      	ldrb	r0, [r5, #0]
 8024846:	e000      	b.n	802484a <pta_configure_acl_params+0xaa>
 8024848:	2600      	movs	r6, #0
 802484a:	2801      	cmp	r0, #1
 802484c:	d101      	bne.n	8024852 <pta_configure_acl_params+0xb2>
 802484e:	2401      	movs	r4, #1
 8024850:	e006      	b.n	8024860 <pta_configure_acl_params+0xc0>
 8024852:	2804      	cmp	r0, #4
 8024854:	f04f 0400 	mov.w	r4, #0
 8024858:	d102      	bne.n	8024860 <pta_configure_acl_params+0xc0>
 802485a:	2e00      	cmp	r6, #0
 802485c:	bf18      	it	ne
 802485e:	2401      	movne	r4, #1
 8024860:	2802      	cmp	r0, #2
 8024862:	d00c      	beq.n	802487e <pta_configure_acl_params+0xde>
 8024864:	2804      	cmp	r0, #4
 8024866:	bf08      	it	eq
 8024868:	2e00      	cmpeq	r6, #0
 802486a:	d008      	beq.n	802487e <pta_configure_acl_params+0xde>
 802486c:	2803      	cmp	r0, #3
 802486e:	d1a5      	bne.n	80247bc <pta_configure_acl_params+0x1c>
 8024870:	786a      	ldrb	r2, [r5, #1]
 8024872:	2100      	movs	r1, #0
 8024874:	4614      	mov	r4, r2
 8024876:	2a00      	cmp	r2, #0
 8024878:	bf18      	it	ne
 802487a:	2401      	movne	r4, #1
 802487c:	e002      	b.n	8024884 <pta_configure_acl_params+0xe4>
 802487e:	2400      	movs	r4, #0
 8024880:	2100      	movs	r1, #0
 8024882:	2200      	movs	r2, #0
 8024884:	4620      	mov	r0, r4
 8024886:	b001      	add	sp, #4
 8024888:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 802488c:	f7ff bcbc 	b.w	8024208 <llhwc_cmn_pta_set_params>

08024890 <pta_configure_adv_params>:
 8024890:	f248 11d4 	movw	r1, #33236	@ 0x81d4
 8024894:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8024898:	7e4a      	ldrb	r2, [r1, #25]
 802489a:	b132      	cbz	r2, 80248aa <pta_configure_adv_params+0x1a>
 802489c:	2801      	cmp	r0, #1
 802489e:	d005      	beq.n	80248ac <pta_configure_adv_params+0x1c>
 80248a0:	b940      	cbnz	r0, 80248b4 <pta_configure_adv_params+0x24>
 80248a2:	7e08      	ldrb	r0, [r1, #24]
 80248a4:	f000 0001 	and.w	r0, r0, #1
 80248a8:	e005      	b.n	80248b6 <pta_configure_adv_params+0x26>
 80248aa:	4770      	bx	lr
 80248ac:	7e08      	ldrb	r0, [r1, #24]
 80248ae:	f3c0 0040 	ubfx	r0, r0, #1, #1
 80248b2:	e000      	b.n	80248b6 <pta_configure_adv_params+0x26>
 80248b4:	2000      	movs	r0, #0
 80248b6:	4601      	mov	r1, r0
 80248b8:	2200      	movs	r2, #0
 80248ba:	f7ff bca5 	b.w	8024208 <llhwc_cmn_pta_set_params>

080248be <pta_configure_non_prdc_scan_params>:
 80248be:	f248 10d4 	movw	r0, #33236	@ 0x81d4
 80248c2:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80248c6:	7e41      	ldrb	r1, [r0, #25]
 80248c8:	2901      	cmp	r1, #1
 80248ca:	bf18      	it	ne
 80248cc:	4770      	bxne	lr
 80248ce:	7e00      	ldrb	r0, [r0, #24]
 80248d0:	2200      	movs	r2, #0
 80248d2:	f3c0 0080 	ubfx	r0, r0, #2, #1
 80248d6:	4601      	mov	r1, r0
 80248d8:	f7ff bc96 	b.w	8024208 <llhwc_cmn_pta_set_params>

080248dc <pta_configure_init_params>:
 80248dc:	f248 10d4 	movw	r0, #33236	@ 0x81d4
 80248e0:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80248e4:	7e41      	ldrb	r1, [r0, #25]
 80248e6:	2901      	cmp	r1, #1
 80248e8:	bf18      	it	ne
 80248ea:	4770      	bxne	lr
 80248ec:	7e00      	ldrb	r0, [r0, #24]
 80248ee:	2200      	movs	r2, #0
 80248f0:	f3c0 1000 	ubfx	r0, r0, #4, #1
 80248f4:	4601      	mov	r1, r0
 80248f6:	f7ff bc87 	b.w	8024208 <llhwc_cmn_pta_set_params>

080248fa <pta_ble_event_complete>:
 80248fa:	b510      	push	{r4, lr}
 80248fc:	f248 14d4 	movw	r4, #33236	@ 0x81d4
 8024900:	f2c2 0400 	movt	r4, #8192	@ 0x2000
 8024904:	7e60      	ldrb	r0, [r4, #25]
 8024906:	2801      	cmp	r0, #1
 8024908:	bf18      	it	ne
 802490a:	bd10      	popne	{r4, pc}
 802490c:	f7ff fc9c 	bl	8024248 <llhwc_cmn_pta_get_tx_reject_counter>
 8024910:	76e0      	strb	r0, [r4, #27]
 8024912:	f7ff fca1 	bl	8024258 <llhwc_cmn_pta_get_rx_reject_counter>
 8024916:	7720      	strb	r0, [r4, #28]
 8024918:	bd10      	pop	{r4, pc}
	...

0802491c <pta_init_context>:
 802491c:	b5b0      	push	{r4, r5, r7, lr}
 802491e:	f248 14d4 	movw	r4, #33236	@ 0x81d4
 8024922:	f2c2 0400 	movt	r4, #8192	@ 0x2000
 8024926:	4620      	mov	r0, r4
 8024928:	2100      	movs	r1, #0
 802492a:	221d      	movs	r2, #29
 802492c:	2500      	movs	r5, #0
 802492e:	f7ff fe5b 	bl	80245e8 <ble_memset>
 8024932:	2000      	movs	r0, #0
 8024934:	eb00 0140 	add.w	r1, r0, r0, lsl #1
 8024938:	3001      	adds	r0, #1
 802493a:	2808      	cmp	r0, #8
 802493c:	5465      	strb	r5, [r4, r1]
 802493e:	d1f9      	bne.n	8024934 <pta_init_context+0x18>
 8024940:	bdb0      	pop	{r4, r5, r7, pc}

08024942 <pta_recover_from_deep_sleep>:
 8024942:	f248 10d4 	movw	r0, #33236	@ 0x81d4
 8024946:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 802494a:	7e40      	ldrb	r0, [r0, #25]
 802494c:	2801      	cmp	r0, #1
 802494e:	bf0c      	ite	eq
 8024950:	2001      	moveq	r0, #1
 8024952:	4770      	bxne	lr
 8024954:	f7ff bc88 	b.w	8024268 <llhwc_cmn_pta_set_enable>

08024958 <pta_remove_pta_params>:
 8024958:	b5b0      	push	{r4, r5, r7, lr}
 802495a:	f248 15d4 	movw	r5, #33236	@ 0x81d4
 802495e:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 8024962:	7e69      	ldrb	r1, [r5, #25]
 8024964:	b339      	cbz	r1, 80249b6 <pta_remove_pta_params+0x5e>
 8024966:	2101      	movs	r1, #1
 8024968:	4604      	mov	r4, r0
 802496a:	2800      	cmp	r0, #0
 802496c:	bf18      	it	ne
 802496e:	2001      	movne	r0, #1
 8024970:	f7fa ff57 	bl	801f822 <bsp_assert>
 8024974:	f04f 3155 	mov.w	r1, #1431655765	@ 0x55555555
 8024978:	fb05 f201 	mul.w	r2, r5, r1
 802497c:	43e8      	mvns	r0, r5
 802497e:	fb04 2111 	mls	r1, r4, r1, r2
 8024982:	f64a 22ab 	movw	r2, #43691	@ 0xaaab
 8024986:	4420      	add	r0, r4
 8024988:	f6ca 22aa 	movt	r2, #43690	@ 0xaaaa
 802498c:	fb00 f002 	mul.w	r0, r0, r2
 8024990:	f101 3155 	add.w	r1, r1, #1431655765	@ 0x55555555
 8024994:	2200      	movs	r2, #0
 8024996:	bf00      	nop
 8024998:	4291      	cmp	r1, r2
 802499a:	d008      	beq.n	80249ae <pta_remove_pta_params+0x56>
 802499c:	3201      	adds	r2, #1
 802499e:	2a08      	cmp	r2, #8
 80249a0:	d1fa      	bne.n	8024998 <pta_remove_pta_params+0x40>
 80249a2:	2000      	movs	r0, #0
 80249a4:	2101      	movs	r1, #1
 80249a6:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80249aa:	f7fa bf3a 	b.w	801f822 <bsp_assert>
 80249ae:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80249b2:	2100      	movs	r1, #0
 80249b4:	5429      	strb	r1, [r5, r0]
 80249b6:	bdb0      	pop	{r4, r5, r7, pc}

080249b8 <sys_shared_init>:
 80249b8:	b580      	push	{r7, lr}
 80249ba:	f248 10f4 	movw	r0, #33268	@ 0x81f4
 80249be:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80249c2:	7801      	ldrb	r1, [r0, #0]
 80249c4:	b101      	cbz	r1, 80249c8 <sys_shared_init+0x10>
 80249c6:	bd80      	pop	{r7, pc}
 80249c8:	2101      	movs	r1, #1
 80249ca:	7001      	strb	r1, [r0, #0]
 80249cc:	f7fa ff14 	bl	801f7f8 <bsp_init>
 80249d0:	f7ff fcdf 	bl	8024392 <ll_mem_init>
 80249d4:	f7fc fe10 	bl	80215f8 <emngr_init>
 80249d8:	f7ff feb5 	bl	8024746 <os_wrapper_init>
 80249dc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80249e0:	f7fd bf64 	b.w	80228ac <llhwc_cmn_init>

080249e4 <ble_mem_init>:
 80249e4:	b5b0      	push	{r4, r5, r7, lr}
 80249e6:	b082      	sub	sp, #8
 80249e8:	2004      	movs	r0, #4
 80249ea:	9000      	str	r0, [sp, #0]
 80249ec:	f248 10f8 	movw	r0, #33272	@ 0x81f8
 80249f0:	f248 2100 	movw	r1, #33280	@ 0x8200
 80249f4:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80249f8:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 80249fc:	2230      	movs	r2, #48	@ 0x30
 80249fe:	2305      	movs	r3, #5
 8024a00:	2405      	movs	r4, #5
 8024a02:	f7ff fd0b 	bl	802441c <mem_pool_init>
 8024a06:	f248 3004 	movw	r0, #33540	@ 0x8304
 8024a0a:	f248 310c 	movw	r1, #33548	@ 0x830c
 8024a0e:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8024a12:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8024a16:	22a0      	movs	r2, #160	@ 0xa0
 8024a18:	230b      	movs	r3, #11
 8024a1a:	9400      	str	r4, [sp, #0]
 8024a1c:	f7ff fcfe 	bl	802441c <mem_pool_init>
 8024a20:	2006      	movs	r0, #6
 8024a22:	9000      	str	r0, [sp, #0]
 8024a24:	f648 2018 	movw	r0, #35352	@ 0x8a18
 8024a28:	f648 2120 	movw	r1, #35360	@ 0x8a20
 8024a2c:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8024a30:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8024a34:	f44f 72a2 	mov.w	r2, #324	@ 0x144
 8024a38:	2308      	movs	r3, #8
 8024a3a:	2508      	movs	r5, #8
 8024a3c:	f7ff fcee 	bl	802441c <mem_pool_init>
 8024a40:	f249 4060 	movw	r0, #37984	@ 0x9460
 8024a44:	f249 4168 	movw	r1, #37992	@ 0x9468
 8024a48:	2407      	movs	r4, #7
 8024a4a:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8024a4e:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8024a52:	2210      	movs	r2, #16
 8024a54:	237b      	movs	r3, #123	@ 0x7b
 8024a56:	9400      	str	r4, [sp, #0]
 8024a58:	f7ff fce0 	bl	802441c <mem_pool_init>
 8024a5c:	f649 6004 	movw	r0, #40452	@ 0x9e04
 8024a60:	f649 610c 	movw	r1, #40460	@ 0x9e0c
 8024a64:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8024a68:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8024a6c:	2218      	movs	r2, #24
 8024a6e:	2302      	movs	r3, #2
 8024a70:	9500      	str	r5, [sp, #0]
 8024a72:	f7ff fcd3 	bl	802441c <mem_pool_init>
 8024a76:	b002      	add	sp, #8
 8024a78:	bdb0      	pop	{r4, r5, r7, pc}

08024a7a <ble_mem_shared_reset>:
 8024a7a:	b570      	push	{r4, r5, r6, lr}
 8024a7c:	b082      	sub	sp, #8
 8024a7e:	f248 2498 	movw	r4, #33432	@ 0x8298
 8024a82:	f649 6044 	movw	r0, #40516	@ 0x9e44
 8024a86:	f6c4 0402 	movt	r4, #18434	@ 0x4802
 8024a8a:	f04f 0c09 	mov.w	ip, #9
 8024a8e:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8024a92:	4621      	mov	r1, r4
 8024a94:	f240 1285 	movw	r2, #389	@ 0x185
 8024a98:	2308      	movs	r3, #8
 8024a9a:	f8cd c000 	str.w	ip, [sp]
 8024a9e:	f7ff fcbd 	bl	802441c <mem_pool_init>
 8024aa2:	200a      	movs	r0, #10
 8024aa4:	9000      	str	r0, [sp, #0]
 8024aa6:	f649 604c 	movw	r0, #40524	@ 0x9e4c
 8024aaa:	f504 6146 	add.w	r1, r4, #3168	@ 0xc60
 8024aae:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8024ab2:	2230      	movs	r2, #48	@ 0x30
 8024ab4:	230c      	movs	r3, #12
 8024ab6:	260c      	movs	r6, #12
 8024ab8:	f7ff fcb0 	bl	802441c <mem_pool_init>
 8024abc:	f504 646d 	add.w	r4, r4, #3792	@ 0xed0
 8024ac0:	f649 6054 	movw	r0, #40532	@ 0x9e54
 8024ac4:	250b      	movs	r5, #11
 8024ac6:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8024aca:	4621      	mov	r1, r4
 8024acc:	2200      	movs	r2, #0
 8024ace:	2300      	movs	r3, #0
 8024ad0:	9500      	str	r5, [sp, #0]
 8024ad2:	f7ff fca3 	bl	802441c <mem_pool_init>
 8024ad6:	f649 605c 	movw	r0, #40540	@ 0x9e5c
 8024ada:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8024ade:	4621      	mov	r1, r4
 8024ae0:	f44f 7295 	mov.w	r2, #298	@ 0x12a
 8024ae4:	2327      	movs	r3, #39	@ 0x27
 8024ae6:	9600      	str	r6, [sp, #0]
 8024ae8:	f7ff fc98 	bl	802441c <mem_pool_init>
 8024aec:	b002      	add	sp, #8
 8024aee:	bd70      	pop	{r4, r5, r6, pc}

08024af0 <conn_mngr_sprvsn_timer_set>:
 8024af0:	b510      	push	{r4, lr}
 8024af2:	b082      	sub	sp, #8
 8024af4:	2101      	movs	r1, #1
 8024af6:	4604      	mov	r4, r0
 8024af8:	2800      	cmp	r0, #0
 8024afa:	bf18      	it	ne
 8024afc:	2001      	movne	r0, #1
 8024afe:	f7fa fe90 	bl	801f822 <bsp_assert>
 8024b02:	f8d4 00c4 	ldr.w	r0, [r4, #196]	@ 0xc4
 8024b06:	2101      	movs	r1, #1
 8024b08:	2800      	cmp	r0, #0
 8024b0a:	bf18      	it	ne
 8024b0c:	2001      	movne	r0, #1
 8024b0e:	f7fa fe88 	bl	801f822 <bsp_assert>
 8024b12:	f10d 0007 	add.w	r0, sp, #7
 8024b16:	f001 fc4d 	bl	80263b4 <db_get_slp_clk_accuracy>
 8024b1a:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8024b1e:	f7ee fb76 	bl	801320e <get_sca_ppm>
 8024b22:	8b61      	ldrh	r1, [r4, #26]
 8024b24:	f248 521f 	movw	r2, #34079	@ 0x851f
 8024b28:	fb01 f000 	mul.w	r0, r1, r0
 8024b2c:	f2c5 12eb 	movt	r2, #20971	@ 0x51eb
 8024b30:	fba0 0202 	umull	r0, r2, r0, r2
 8024b34:	f06f 0303 	mvn.w	r3, #3
 8024b38:	ea03 02d2 	and.w	r2, r3, r2, lsr #3
 8024b3c:	f644 53d3 	movw	r3, #19923	@ 0x4dd3
 8024b40:	f2c1 0362 	movt	r3, #4194	@ 0x1062
 8024b44:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8024b48:	fba2 2303 	umull	r2, r3, r2, r3
 8024b4c:	08da      	lsrs	r2, r3, #3
 8024b4e:	f8d4 00c4 	ldr.w	r0, [r4, #196]	@ 0xc4
 8024b52:	eb02 1181 	add.w	r1, r2, r1, lsl #6
 8024b56:	f7fd fb01 	bl	802215c <os_timer_set>
 8024b5a:	b002      	add	sp, #8
 8024b5c:	bd10      	pop	{r4, pc}
	...

08024b60 <conn_mngr_update_ststic>:
 8024b60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024b64:	b082      	sub	sp, #8
 8024b66:	460d      	mov	r5, r1
 8024b68:	2101      	movs	r1, #1
 8024b6a:	4604      	mov	r4, r0
 8024b6c:	2800      	cmp	r0, #0
 8024b6e:	bf18      	it	ne
 8024b70:	2001      	movne	r0, #1
 8024b72:	f7fa fe56 	bl	801f822 <bsp_assert>
 8024b76:	4628      	mov	r0, r5
 8024b78:	2101      	movs	r1, #1
 8024b7a:	2d00      	cmp	r5, #0
 8024b7c:	bf18      	it	ne
 8024b7e:	2001      	movne	r0, #1
 8024b80:	f7fa fe4f 	bl	801f822 <bsp_assert>
 8024b84:	f8b4 00dc 	ldrh.w	r0, [r4, #220]	@ 0xdc
 8024b88:	2800      	cmp	r0, #0
 8024b8a:	f040 8099 	bne.w	8024cc0 <conn_mngr_update_ststic+0x160>
 8024b8e:	f894 0129 	ldrb.w	r0, [r4, #297]	@ 0x129
 8024b92:	3013      	adds	r0, #19
 8024b94:	b2c0      	uxtb	r0, r0
 8024b96:	28c3      	cmp	r0, #195	@ 0xc3
 8024b98:	f0c0 8092 	bcc.w	8024cc0 <conn_mngr_update_ststic+0x160>
 8024b9c:	f895 002c 	ldrb.w	r0, [r5, #44]	@ 0x2c
 8024ba0:	0780      	lsls	r0, r0, #30
 8024ba2:	f140 808d 	bpl.w	8024cc0 <conn_mngr_update_ststic+0x160>
 8024ba6:	f240 485a 	movw	r8, #1114	@ 0x45a
 8024baa:	f2c2 0800 	movt	r8, #8192	@ 0x2000
 8024bae:	f8b8 0004 	ldrh.w	r0, [r8, #4]
 8024bb2:	3001      	adds	r0, #1
 8024bb4:	b281      	uxth	r1, r0
 8024bb6:	f8a8 0004 	strh.w	r0, [r8, #4]
 8024bba:	0949      	lsrs	r1, r1, #5
 8024bbc:	297c      	cmp	r1, #124	@ 0x7c
 8024bbe:	d855      	bhi.n	8024c6c <conn_mngr_update_ststic+0x10c>
 8024bc0:	f898 0000 	ldrb.w	r0, [r8]
 8024bc4:	2823      	cmp	r0, #35	@ 0x23
 8024bc6:	d251      	bcs.n	8024c6c <conn_mngr_update_ststic+0x10c>
 8024bc8:	f895 2028 	ldrb.w	r2, [r5, #40]	@ 0x28
 8024bcc:	eb08 01d2 	add.w	r1, r8, r2, lsr #3
 8024bd0:	f002 0307 	and.w	r3, r2, #7
 8024bd4:	7989      	ldrb	r1, [r1, #6]
 8024bd6:	40d9      	lsrs	r1, r3
 8024bd8:	07c9      	lsls	r1, r1, #31
 8024bda:	f649 6188 	movw	r1, #40584	@ 0x9e88
 8024bde:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8024be2:	d00b      	beq.n	8024bfc <conn_mngr_update_ststic+0x9c>
 8024be4:	eb01 0542 	add.w	r5, r1, r2, lsl #1
 8024be8:	f831 3012 	ldrh.w	r3, [r1, r2, lsl #1]
 8024bec:	f8b5 404a 	ldrh.w	r4, [r5, #74]	@ 0x4a
 8024bf0:	3301      	adds	r3, #1
 8024bf2:	f821 3012 	strh.w	r3, [r1, r2, lsl #1]
 8024bf6:	1c62      	adds	r2, r4, #1
 8024bf8:	f8a5 204a 	strh.w	r2, [r5, #74]	@ 0x4a
 8024bfc:	f8b8 2002 	ldrh.w	r2, [r8, #2]
 8024c00:	3201      	adds	r2, #1
 8024c02:	b293      	uxth	r3, r2
 8024c04:	f8a8 2002 	strh.w	r2, [r8, #2]
 8024c08:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8024c0c:	d358      	bcc.n	8024cc0 <conn_mngr_update_ststic+0x160>
 8024c0e:	2200      	movs	r2, #0
 8024c10:	2300      	movs	r3, #0
 8024c12:	2400      	movs	r4, #0
 8024c14:	2b04      	cmp	r3, #4
 8024c16:	bf98      	it	ls
 8024c18:	2822      	cmpls	r0, #34	@ 0x22
 8024c1a:	d819      	bhi.n	8024c50 <conn_mngr_update_ststic+0xf0>
 8024c1c:	eb01 0542 	add.w	r5, r1, r2, lsl #1
 8024c20:	f831 6012 	ldrh.w	r6, [r1, r2, lsl #1]
 8024c24:	f8b5 504a 	ldrh.w	r5, [r5, #74]	@ 0x4a
 8024c28:	ebb5 0f56 	cmp.w	r5, r6, lsr #1
 8024c2c:	d90d      	bls.n	8024c4a <conn_mngr_update_ststic+0xea>
 8024c2e:	eb08 05d2 	add.w	r5, r8, r2, lsr #3
 8024c32:	f002 0607 	and.w	r6, r2, #7
 8024c36:	2401      	movs	r4, #1
 8024c38:	79af      	ldrb	r7, [r5, #6]
 8024c3a:	fa04 f606 	lsl.w	r6, r4, r6
 8024c3e:	3001      	adds	r0, #1
 8024c40:	3301      	adds	r3, #1
 8024c42:	43b7      	bics	r7, r6
 8024c44:	f888 0000 	strb.w	r0, [r8]
 8024c48:	71af      	strb	r7, [r5, #6]
 8024c4a:	3201      	adds	r2, #1
 8024c4c:	2a25      	cmp	r2, #37	@ 0x25
 8024c4e:	d1e1      	bne.n	8024c14 <conn_mngr_update_ststic+0xb4>
 8024c50:	f649 6088 	movw	r0, #40584	@ 0x9e88
 8024c54:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8024c58:	2100      	movs	r1, #0
 8024c5a:	2294      	movs	r2, #148	@ 0x94
 8024c5c:	2500      	movs	r5, #0
 8024c5e:	f7ff fcc3 	bl	80245e8 <ble_memset>
 8024c62:	2c01      	cmp	r4, #1
 8024c64:	f8a8 5002 	strh.w	r5, [r8, #2]
 8024c68:	d026      	beq.n	8024cb8 <conn_mngr_update_ststic+0x158>
 8024c6a:	e029      	b.n	8024cc0 <conn_mngr_update_ststic+0x160>
 8024c6c:	f10d 0503 	add.w	r5, sp, #3
 8024c70:	4628      	mov	r0, r5
 8024c72:	f001 fb0e 	bl	8026292 <db_get_local_chnl_classification>
 8024c76:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 8024c7a:	2100      	movs	r1, #0
 8024c7c:	5c6a      	ldrb	r2, [r5, r1]
 8024c7e:	5c43      	ldrb	r3, [r0, r1]
 8024c80:	429a      	cmp	r2, r3
 8024c82:	d103      	bne.n	8024c8c <conn_mngr_update_ststic+0x12c>
 8024c84:	3101      	adds	r1, #1
 8024c86:	2905      	cmp	r1, #5
 8024c88:	d1f8      	bne.n	8024c7c <conn_mngr_update_ststic+0x11c>
 8024c8a:	e019      	b.n	8024cc0 <conn_mngr_update_ststic+0x160>
 8024c8c:	f108 0006 	add.w	r0, r8, #6
 8024c90:	f10d 0103 	add.w	r1, sp, #3
 8024c94:	2205      	movs	r2, #5
 8024c96:	f7ff fc57 	bl	8024548 <ble_memcpy>
 8024c9a:	f649 6088 	movw	r0, #40584	@ 0x9e88
 8024c9e:	2400      	movs	r4, #0
 8024ca0:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8024ca4:	2100      	movs	r1, #0
 8024ca6:	2294      	movs	r2, #148	@ 0x94
 8024ca8:	f888 4000 	strb.w	r4, [r8]
 8024cac:	f8a8 4004 	strh.w	r4, [r8, #4]
 8024cb0:	f7ff fc9a 	bl	80245e8 <ble_memset>
 8024cb4:	f8a8 4002 	strh.w	r4, [r8, #2]
 8024cb8:	f108 0006 	add.w	r0, r8, #6
 8024cbc:	f7f1 fb14 	bl	80162e8 <llcp_update_chnl_map>
 8024cc0:	2000      	movs	r0, #0
 8024cc2:	b002      	add	sp, #8
 8024cc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08024cc8 <conn_mngr_check_conn_id>:
 8024cc8:	2800      	cmp	r0, #0
 8024cca:	bf0f      	iteee	eq
 8024ccc:	2000      	moveq	r0, #0
 8024cce:	6800      	ldrne	r0, [r0, #0]
 8024cd0:	1a40      	subne	r0, r0, r1
 8024cd2:	fab0 f080 	clzne	r0, r0
 8024cd6:	bf18      	it	ne
 8024cd8:	0940      	lsrne	r0, r0, #5
 8024cda:	4770      	bx	lr

08024cdc <conn_mngr_init>:
 8024cdc:	b580      	push	{r7, lr}
 8024cde:	f644 5205 	movw	r2, #19717	@ 0x4d05
 8024ce2:	2002      	movs	r0, #2
 8024ce4:	f6c0 0202 	movt	r2, #2050	@ 0x802
 8024ce8:	2108      	movs	r1, #8
 8024cea:	f7fc fcad 	bl	8021648 <emngr_handle_init>
 8024cee:	f245 02a9 	movw	r2, #20649	@ 0x50a9
 8024cf2:	2003      	movs	r0, #3
 8024cf4:	f6c0 0202 	movt	r2, #2050	@ 0x802
 8024cf8:	2101      	movs	r1, #1
 8024cfa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8024cfe:	f7fc bca3 	b.w	8021648 <emngr_handle_init>
	...

08024d04 <conn_mngr_process_evnt_clbk>:
 8024d04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8024d06:	b089      	sub	sp, #36	@ 0x24
 8024d08:	4605      	mov	r5, r0
 8024d0a:	6804      	ldr	r4, [r0, #0]
 8024d0c:	208d      	movs	r0, #141	@ 0x8d
 8024d0e:	f7fa fdcf 	bl	801f8b0 <bsp_debug_gpio_set>
 8024d12:	7928      	ldrb	r0, [r5, #4]
 8024d14:	280d      	cmp	r0, #13
 8024d16:	f200 81c0 	bhi.w	802509a <conn_mngr_process_evnt_clbk+0x396>
 8024d1a:	e8df f010 	tbh	[pc, r0, lsl #1]
 8024d1e:	0011      	.short	0x0011
 8024d20:	001b000e 	.word	0x001b000e
 8024d24:	00460038 	.word	0x00460038
 8024d28:	006a0059 	.word	0x006a0059
 8024d2c:	00d6000e 	.word	0x00d6000e
 8024d30:	0093007a 	.word	0x0093007a
 8024d34:	00b701be 	.word	0x00b701be
 8024d38:	00d0      	.short	0x00d0
 8024d3a:	4620      	mov	r0, r4
 8024d3c:	2122      	movs	r1, #34	@ 0x22
 8024d3e:	e0ce      	b.n	8024ede <conn_mngr_process_evnt_clbk+0x1da>
 8024d40:	f8d4 00c0 	ldr.w	r0, [r4, #192]	@ 0xc0
 8024d44:	f7ee ff1d 	bl	8013b82 <evnt_util_is_connect_setup>
 8024d48:	2108      	movs	r1, #8
 8024d4a:	2800      	cmp	r0, #0
 8024d4c:	bf08      	it	eq
 8024d4e:	213e      	moveq	r1, #62	@ 0x3e
 8024d50:	4620      	mov	r0, r4
 8024d52:	e0c4      	b.n	8024ede <conn_mngr_process_evnt_clbk+0x1da>
 8024d54:	f104 00cc 	add.w	r0, r4, #204	@ 0xcc
 8024d58:	f7fd f9ea 	bl	8022130 <os_timer_stop_free>
 8024d5c:	f894 0128 	ldrb.w	r0, [r4, #296]	@ 0x128
 8024d60:	2828      	cmp	r0, #40	@ 0x28
 8024d62:	d01d      	beq.n	8024da0 <conn_mngr_process_evnt_clbk+0x9c>
 8024d64:	8ae0      	ldrh	r0, [r4, #22]
 8024d66:	f8b4 108e 	ldrh.w	r1, [r4, #142]	@ 0x8e
 8024d6a:	4288      	cmp	r0, r1
 8024d6c:	f040 812e 	bne.w	8024fcc <conn_mngr_process_evnt_clbk+0x2c8>
 8024d70:	f8b4 00dc 	ldrh.w	r0, [r4, #220]	@ 0xdc
 8024d74:	f8b4 2080 	ldrh.w	r2, [r4, #128]	@ 0x80
 8024d78:	4290      	cmp	r0, r2
 8024d7a:	f040 812e 	bne.w	8024fda <conn_mngr_process_evnt_clbk+0x2d6>
 8024d7e:	8b61      	ldrh	r1, [r4, #26]
 8024d80:	f8b4 2082 	ldrh.w	r2, [r4, #130]	@ 0x82
 8024d84:	4291      	cmp	r1, r2
 8024d86:	f040 8127 	bne.w	8024fd8 <conn_mngr_process_evnt_clbk+0x2d4>
 8024d8a:	2601      	movs	r6, #1
 8024d8c:	e129      	b.n	8024fe2 <conn_mngr_process_evnt_clbk+0x2de>
 8024d8e:	f104 00cc 	add.w	r0, r4, #204	@ 0xcc
 8024d92:	f7fd f9cd 	bl	8022130 <os_timer_stop_free>
 8024d96:	f894 0128 	ldrb.w	r0, [r4, #296]	@ 0x128
 8024d9a:	2828      	cmp	r0, #40	@ 0x28
 8024d9c:	f040 80a2 	bne.w	8024ee4 <conn_mngr_process_evnt_clbk+0x1e0>
 8024da0:	4620      	mov	r0, r4
 8024da2:	2128      	movs	r1, #40	@ 0x28
 8024da4:	f000 fdf6 	bl	8025994 <conn_mngr_disconnect>
 8024da8:	e175      	b.n	8025096 <conn_mngr_process_evnt_clbk+0x392>
 8024daa:	f646 5038 	movw	r0, #27960	@ 0x6d38
 8024dae:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8024db2:	6800      	ldr	r0, [r0, #0]
 8024db4:	68c6      	ldr	r6, [r0, #12]
 8024db6:	b1c6      	cbz	r6, 8024dea <conn_mngr_process_evnt_clbk+0xe6>
 8024db8:	f8b4 10de 	ldrh.w	r1, [r4, #222]	@ 0xde
 8024dbc:	f894 2044 	ldrb.w	r2, [r4, #68]	@ 0x44
 8024dc0:	f8b4 3040 	ldrh.w	r3, [r4, #64]	@ 0x40
 8024dc4:	f8b4 7042 	ldrh.w	r7, [r4, #66]	@ 0x42
 8024dc8:	2000      	movs	r0, #0
 8024dca:	9700      	str	r7, [sp, #0]
 8024dcc:	47b0      	blx	r6
 8024dce:	e00c      	b.n	8024dea <conn_mngr_process_evnt_clbk+0xe6>
 8024dd0:	f646 5038 	movw	r0, #27960	@ 0x6d38
 8024dd4:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8024dd8:	6800      	ldr	r0, [r0, #0]
 8024dda:	6903      	ldr	r3, [r0, #16]
 8024ddc:	b12b      	cbz	r3, 8024dea <conn_mngr_process_evnt_clbk+0xe6>
 8024dde:	f8b4 10de 	ldrh.w	r1, [r4, #222]	@ 0xde
 8024de2:	f104 0246 	add.w	r2, r4, #70	@ 0x46
 8024de6:	2000      	movs	r0, #0
 8024de8:	4798      	blx	r3
 8024dea:	2000      	movs	r0, #0
 8024dec:	f884 0123 	strb.w	r0, [r4, #291]	@ 0x123
 8024df0:	e153      	b.n	802509a <conn_mngr_process_evnt_clbk+0x396>
 8024df2:	f8d4 00d4 	ldr.w	r0, [r4, #212]	@ 0xd4
 8024df6:	f7fd f91d 	bl	8022034 <os_timer_stop>
 8024dfa:	f646 5038 	movw	r0, #27960	@ 0x6d38
 8024dfe:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8024e02:	6800      	ldr	r0, [r0, #0]
 8024e04:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 8024e06:	2900      	cmp	r1, #0
 8024e08:	f000 8147 	beq.w	802509a <conn_mngr_process_evnt_clbk+0x396>
 8024e0c:	f8b4 00de 	ldrh.w	r0, [r4, #222]	@ 0xde
 8024e10:	e053      	b.n	8024eba <conn_mngr_process_evnt_clbk+0x1b6>
 8024e12:	f646 5038 	movw	r0, #27960	@ 0x6d38
 8024e16:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8024e1a:	6800      	ldr	r0, [r0, #0]
 8024e1c:	6b46      	ldr	r6, [r0, #52]	@ 0x34
 8024e1e:	b16e      	cbz	r6, 8024e3c <conn_mngr_process_evnt_clbk+0x138>
 8024e20:	f894 212c 	ldrb.w	r2, [r4, #300]	@ 0x12c
 8024e24:	f894 312d 	ldrb.w	r3, [r4, #301]	@ 0x12d
 8024e28:	f8b4 10de 	ldrh.w	r1, [r4, #222]	@ 0xde
 8024e2c:	2a04      	cmp	r2, #4
 8024e2e:	bf08      	it	eq
 8024e30:	2203      	moveq	r2, #3
 8024e32:	2000      	movs	r0, #0
 8024e34:	2b04      	cmp	r3, #4
 8024e36:	bf08      	it	eq
 8024e38:	2303      	moveq	r3, #3
 8024e3a:	47b0      	blx	r6
 8024e3c:	2000      	movs	r0, #0
 8024e3e:	f884 0078 	strb.w	r0, [r4, #120]	@ 0x78
 8024e42:	e12a      	b.n	802509a <conn_mngr_process_evnt_clbk+0x396>
 8024e44:	f8d4 00d4 	ldr.w	r0, [r4, #212]	@ 0xd4
 8024e48:	f7fd f8f4 	bl	8022034 <os_timer_stop>
 8024e4c:	8ae0      	ldrh	r0, [r4, #22]
 8024e4e:	f8b4 10d8 	ldrh.w	r1, [r4, #216]	@ 0xd8
 8024e52:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8024e56:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8024e5a:	0880      	lsrs	r0, r0, #2
 8024e5c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8024e60:	0040      	lsls	r0, r0, #1
 8024e62:	eba0 0241 	sub.w	r2, r0, r1, lsl #1
 8024e66:	ebb0 0f41 	cmp.w	r0, r1, lsl #1
 8024e6a:	bf88      	it	hi
 8024e6c:	f06f 0204 	mvnhi.w	r2, #4
 8024e70:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8024e74:	f8d4 00d4 	ldr.w	r0, [r4, #212]	@ 0xd4
 8024e78:	0149      	lsls	r1, r1, #5
 8024e7a:	f7fd f820 	bl	8021ebe <os_timer_start>
 8024e7e:	2006      	movs	r0, #6
 8024e80:	f884 006c 	strb.w	r0, [r4, #108]	@ 0x6c
 8024e84:	4620      	mov	r0, r4
 8024e86:	f7f0 fc25 	bl	80156d4 <llcp_ping_req>
 8024e8a:	e106      	b.n	802509a <conn_mngr_process_evnt_clbk+0x396>
 8024e8c:	f646 5038 	movw	r0, #27960	@ 0x6d38
 8024e90:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8024e94:	6805      	ldr	r5, [r0, #0]
 8024e96:	68a8      	ldr	r0, [r5, #8]
 8024e98:	2800      	cmp	r0, #0
 8024e9a:	f000 80fe 	beq.w	802509a <conn_mngr_process_evnt_clbk+0x396>
 8024e9e:	ac02      	add	r4, sp, #8
 8024ea0:	1d20      	adds	r0, r4, #4
 8024ea2:	2118      	movs	r1, #24
 8024ea4:	f00a fab8 	bl	802f418 <__aeabi_memclr>
 8024ea8:	21ff      	movs	r1, #255	@ 0xff
 8024eaa:	f8ad 101a 	strh.w	r1, [sp, #26]
 8024eae:	2100      	movs	r1, #0
 8024eb0:	9104      	str	r1, [sp, #16]
 8024eb2:	2002      	movs	r0, #2
 8024eb4:	68a9      	ldr	r1, [r5, #8]
 8024eb6:	9002      	str	r0, [sp, #8]
 8024eb8:	4620      	mov	r0, r4
 8024eba:	4788      	blx	r1
 8024ebc:	e0ed      	b.n	802509a <conn_mngr_process_evnt_clbk+0x396>
 8024ebe:	2016      	movs	r0, #22
 8024ec0:	f884 0074 	strb.w	r0, [r4, #116]	@ 0x74
 8024ec4:	4620      	mov	r0, r4
 8024ec6:	2116      	movs	r1, #22
 8024ec8:	e009      	b.n	8024ede <conn_mngr_process_evnt_clbk+0x1da>
 8024eca:	f104 00cc 	add.w	r0, r4, #204	@ 0xcc
 8024ece:	f7fd f92f 	bl	8022130 <os_timer_stop_free>
 8024ed2:	f894 0128 	ldrb.w	r0, [r4, #296]	@ 0x128
 8024ed6:	2828      	cmp	r0, #40	@ 0x28
 8024ed8:	d114      	bne.n	8024f04 <conn_mngr_process_evnt_clbk+0x200>
 8024eda:	4620      	mov	r0, r4
 8024edc:	2128      	movs	r1, #40	@ 0x28
 8024ede:	f000 fd59 	bl	8025994 <conn_mngr_disconnect>
 8024ee2:	e0da      	b.n	802509a <conn_mngr_process_evnt_clbk+0x396>
 8024ee4:	4620      	mov	r0, r4
 8024ee6:	f7ff fe03 	bl	8024af0 <conn_mngr_sprvsn_timer_set>
 8024eea:	f894 0125 	ldrb.w	r0, [r4, #293]	@ 0x125
 8024eee:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8024ef2:	2800      	cmp	r0, #0
 8024ef4:	f04f 0000 	mov.w	r0, #0
 8024ef8:	f8a4 10dc 	strh.w	r1, [r4, #220]	@ 0xdc
 8024efc:	d069      	beq.n	8024fd2 <conn_mngr_process_evnt_clbk+0x2ce>
 8024efe:	f884 0124 	strb.w	r0, [r4, #292]	@ 0x124
 8024f02:	e0c8      	b.n	8025096 <conn_mngr_process_evnt_clbk+0x392>
 8024f04:	4620      	mov	r0, r4
 8024f06:	f7ff fdf3 	bl	8024af0 <conn_mngr_sprvsn_timer_set>
 8024f0a:	f894 0074 	ldrb.w	r0, [r4, #116]	@ 0x74
 8024f0e:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8024f12:	2804      	cmp	r0, #4
 8024f14:	f8a4 10dc 	strh.w	r1, [r4, #220]	@ 0xdc
 8024f18:	d00c      	beq.n	8024f34 <conn_mngr_process_evnt_clbk+0x230>
 8024f1a:	f894 1075 	ldrb.w	r1, [r4, #117]	@ 0x75
 8024f1e:	2904      	cmp	r1, #4
 8024f20:	d008      	beq.n	8024f34 <conn_mngr_process_evnt_clbk+0x230>
 8024f22:	f894 112c 	ldrb.w	r1, [r4, #300]	@ 0x12c
 8024f26:	2904      	cmp	r1, #4
 8024f28:	d004      	beq.n	8024f34 <conn_mngr_process_evnt_clbk+0x230>
 8024f2a:	f894 112d 	ldrb.w	r1, [r4, #301]	@ 0x12d
 8024f2e:	2904      	cmp	r1, #4
 8024f30:	f040 80b8 	bne.w	80250a4 <conn_mngr_process_evnt_clbk+0x3a0>
 8024f34:	2504      	movs	r5, #4
 8024f36:	b108      	cbz	r0, 8024f3c <conn_mngr_process_evnt_clbk+0x238>
 8024f38:	f884 012c 	strb.w	r0, [r4, #300]	@ 0x12c
 8024f3c:	f894 0075 	ldrb.w	r0, [r4, #117]	@ 0x75
 8024f40:	2600      	movs	r6, #0
 8024f42:	2800      	cmp	r0, #0
 8024f44:	bf14      	ite	ne
 8024f46:	f884 012d 	strbne.w	r0, [r4, #301]	@ 0x12d
 8024f4a:	f894 012d 	ldrbeq.w	r0, [r4, #301]	@ 0x12d
 8024f4e:	f894 112c 	ldrb.w	r1, [r4, #300]	@ 0x12c
 8024f52:	22b0      	movs	r2, #176	@ 0xb0
 8024f54:	f884 6134 	strb.w	r6, [r4, #308]	@ 0x134
 8024f58:	2904      	cmp	r1, #4
 8024f5a:	bf08      	it	eq
 8024f5c:	22b2      	moveq	r2, #178	@ 0xb2
 8024f5e:	5aa1      	ldrh	r1, [r4, r2]
 8024f60:	22b4      	movs	r2, #180	@ 0xb4
 8024f62:	2804      	cmp	r0, #4
 8024f64:	bf08      	it	eq
 8024f66:	22b6      	moveq	r2, #182	@ 0xb6
 8024f68:	5aa2      	ldrh	r2, [r4, r2]
 8024f6a:	f8d4 00c0 	ldr.w	r0, [r4, #192]	@ 0xc0
 8024f6e:	f8a4 10ae 	strh.w	r1, [r4, #174]	@ 0xae
 8024f72:	4411      	add	r1, r2
 8024f74:	f8a4 20aa 	strh.w	r2, [r4, #170]	@ 0xaa
 8024f78:	f7ed fe86 	bl	8012c88 <evnt_schdlr_updt_conn_evnt_durn>
 8024f7c:	f894 0123 	ldrb.w	r0, [r4, #291]	@ 0x123
 8024f80:	f884 5138 	strb.w	r5, [r4, #312]	@ 0x138
 8024f84:	280c      	cmp	r0, #12
 8024f86:	bf08      	it	eq
 8024f88:	f884 6123 	strbeq.w	r6, [r4, #291]	@ 0x123
 8024f8c:	f894 0124 	ldrb.w	r0, [r4, #292]	@ 0x124
 8024f90:	2100      	movs	r1, #0
 8024f92:	280c      	cmp	r0, #12
 8024f94:	bf04      	itt	eq
 8024f96:	2000      	moveq	r0, #0
 8024f98:	f884 0124 	strbeq.w	r0, [r4, #292]	@ 0x124
 8024f9c:	f894 0137 	ldrb.w	r0, [r4, #311]	@ 0x137
 8024fa0:	f884 1078 	strb.w	r1, [r4, #120]	@ 0x78
 8024fa4:	2801      	cmp	r0, #1
 8024fa6:	d178      	bne.n	802509a <conn_mngr_process_evnt_clbk+0x396>
 8024fa8:	f894 012d 	ldrb.w	r0, [r4, #301]	@ 0x12d
 8024fac:	f894 1135 	ldrb.w	r1, [r4, #309]	@ 0x135
 8024fb0:	4201      	tst	r1, r0
 8024fb2:	d072      	beq.n	802509a <conn_mngr_process_evnt_clbk+0x396>
 8024fb4:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 8024fb8:	f000 fc7e 	bl	80258b8 <conn_mngr_calc_num_of_used_data_chnls>
 8024fbc:	f894 1136 	ldrb.w	r1, [r4, #310]	@ 0x136
 8024fc0:	4288      	cmp	r0, r1
 8024fc2:	d26a      	bcs.n	802509a <conn_mngr_process_evnt_clbk+0x396>
 8024fc4:	4620      	mov	r0, r4
 8024fc6:	f7f1 f945 	bl	8016254 <llcp_update_chnl_map_per_connection>
 8024fca:	e066      	b.n	802509a <conn_mngr_process_evnt_clbk+0x396>
 8024fcc:	f8b4 2080 	ldrh.w	r2, [r4, #128]	@ 0x80
 8024fd0:	e003      	b.n	8024fda <conn_mngr_process_evnt_clbk+0x2d6>
 8024fd2:	f884 0123 	strb.w	r0, [r4, #291]	@ 0x123
 8024fd6:	e05e      	b.n	8025096 <conn_mngr_process_evnt_clbk+0x392>
 8024fd8:	4602      	mov	r2, r0
 8024fda:	f8b4 1082 	ldrh.w	r1, [r4, #130]	@ 0x82
 8024fde:	2600      	movs	r6, #0
 8024fe0:	4610      	mov	r0, r2
 8024fe2:	8320      	strh	r0, [r4, #24]
 8024fe4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8024fe8:	f8a4 00dc 	strh.w	r0, [r4, #220]	@ 0xdc
 8024fec:	f894 0090 	ldrb.w	r0, [r4, #144]	@ 0x90
 8024ff0:	8361      	strh	r1, [r4, #26]
 8024ff2:	f8b4 1088 	ldrh.w	r1, [r4, #136]	@ 0x88
 8024ff6:	f884 0020 	strb.w	r0, [r4, #32]
 8024ffa:	4620      	mov	r0, r4
 8024ffc:	8221      	strh	r1, [r4, #16]
 8024ffe:	f7ff fd77 	bl	8024af0 <conn_mngr_sprvsn_timer_set>
 8025002:	f8d4 00bc 	ldr.w	r0, [r4, #188]	@ 0xbc
 8025006:	2105      	movs	r1, #5
 8025008:	f7fa fb92 	bl	801f730 <state_mngr_update_state>
 802500c:	b2c0      	uxtb	r0, r0
 802500e:	fab0 f080 	clz	r0, r0
 8025012:	0940      	lsrs	r0, r0, #5
 8025014:	2101      	movs	r1, #1
 8025016:	2701      	movs	r7, #1
 8025018:	f7fa fc03 	bl	801f822 <bsp_assert>
 802501c:	b90e      	cbnz	r6, 8025022 <conn_mngr_process_evnt_clbk+0x31e>
 802501e:	f884 7138 	strb.w	r7, [r4, #312]	@ 0x138
 8025022:	f8b4 00b2 	ldrh.w	r0, [r4, #178]	@ 0xb2
 8025026:	f8b4 10b8 	ldrh.w	r1, [r4, #184]	@ 0xb8
 802502a:	4288      	cmp	r0, r1
 802502c:	d012      	beq.n	8025054 <conn_mngr_process_evnt_clbk+0x350>
 802502e:	f646 5038 	movw	r0, #27960	@ 0x6d38
 8025032:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8025036:	6800      	ldr	r0, [r0, #0]
 8025038:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 802503a:	b15e      	cbz	r6, 8025054 <conn_mngr_process_evnt_clbk+0x350>
 802503c:	f8b4 00de 	ldrh.w	r0, [r4, #222]	@ 0xde
 8025040:	f8b4 10ac 	ldrh.w	r1, [r4, #172]	@ 0xac
 8025044:	f8b4 20ae 	ldrh.w	r2, [r4, #174]	@ 0xae
 8025048:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	@ 0xa8
 802504c:	f8b4 70aa 	ldrh.w	r7, [r4, #170]	@ 0xaa
 8025050:	9700      	str	r7, [sp, #0]
 8025052:	47b0      	blx	r6
 8025054:	f894 0124 	ldrb.w	r0, [r4, #292]	@ 0x124
 8025058:	280a      	cmp	r0, #10
 802505a:	d10b      	bne.n	8025074 <conn_mngr_process_evnt_clbk+0x370>
 802505c:	2000      	movs	r0, #0
 802505e:	f884 0124 	strb.w	r0, [r4, #292]	@ 0x124
 8025062:	f894 0123 	ldrb.w	r0, [r4, #291]	@ 0x123
 8025066:	f8b4 10b2 	ldrh.w	r1, [r4, #178]	@ 0xb2
 802506a:	2801      	cmp	r0, #1
 802506c:	f8a4 10b8 	strh.w	r1, [r4, #184]	@ 0xb8
 8025070:	d008      	beq.n	8025084 <conn_mngr_process_evnt_clbk+0x380>
 8025072:	e010      	b.n	8025096 <conn_mngr_process_evnt_clbk+0x392>
 8025074:	f894 1123 	ldrb.w	r1, [r4, #291]	@ 0x123
 8025078:	f8b4 20b2 	ldrh.w	r2, [r4, #178]	@ 0xb2
 802507c:	2901      	cmp	r1, #1
 802507e:	f8a4 20b8 	strh.w	r2, [r4, #184]	@ 0xb8
 8025082:	d104      	bne.n	802508e <conn_mngr_process_evnt_clbk+0x38a>
 8025084:	f204 1023 	addw	r0, r4, #291	@ 0x123
 8025088:	2100      	movs	r1, #0
 802508a:	7001      	strb	r1, [r0, #0]
 802508c:	e003      	b.n	8025096 <conn_mngr_process_evnt_clbk+0x392>
 802508e:	2801      	cmp	r0, #1
 8025090:	d101      	bne.n	8025096 <conn_mngr_process_evnt_clbk+0x392>
 8025092:	2000      	movs	r0, #0
 8025094:	e733      	b.n	8024efe <conn_mngr_process_evnt_clbk+0x1fa>
 8025096:	200b      	movs	r0, #11
 8025098:	7128      	strb	r0, [r5, #4]
 802509a:	208d      	movs	r0, #141	@ 0x8d
 802509c:	f7fa fc0a 	bl	801f8b4 <bsp_debug_gpio_clear>
 80250a0:	b009      	add	sp, #36	@ 0x24
 80250a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80250a4:	2503      	movs	r5, #3
 80250a6:	e746      	b.n	8024f36 <conn_mngr_process_evnt_clbk+0x232>

080250a8 <conn_mngr_updt_conn_param_evnt_clbk>:
 80250a8:	b510      	push	{r4, lr}
 80250aa:	b084      	sub	sp, #16
 80250ac:	4604      	mov	r4, r0
 80250ae:	208e      	movs	r0, #142	@ 0x8e
 80250b0:	f7fa fbfe 	bl	801f8b0 <bsp_debug_gpio_set>
 80250b4:	8ae0      	ldrh	r0, [r4, #22]
 80250b6:	f8ad 0000 	strh.w	r0, [sp]
 80250ba:	f8ad 0002 	strh.w	r0, [sp, #2]
 80250be:	e9d4 0106 	ldrd	r0, r1, [r4, #24]
 80250c2:	9001      	str	r0, [sp, #4]
 80250c4:	2011      	movs	r0, #17
 80250c6:	f88d 000e 	strb.w	r0, [sp, #14]
 80250ca:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80250ce:	f8ad 000c 	strh.w	r0, [sp, #12]
 80250d2:	f8b4 00de 	ldrh.w	r0, [r4, #222]	@ 0xde
 80250d6:	9102      	str	r1, [sp, #8]
 80250d8:	4669      	mov	r1, sp
 80250da:	f7f0 ff46 	bl	8015f6a <llcp_update_param_req>
 80250de:	b128      	cbz	r0, 80250ec <conn_mngr_updt_conn_param_evnt_clbk+0x44>
 80250e0:	f646 600d 	movw	r0, #28173	@ 0x6e0d
 80250e4:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80250e8:	2100      	movs	r1, #0
 80250ea:	7001      	strb	r1, [r0, #0]
 80250ec:	208e      	movs	r0, #142	@ 0x8e
 80250ee:	f7fa fbe1 	bl	801f8b4 <bsp_debug_gpio_clear>
 80250f2:	b004      	add	sp, #16
 80250f4:	bd10      	pop	{r4, pc}
	...

080250f8 <conn_mngr_reset>:
 80250f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80250fc:	f649 6884 	movw	r8, #40580	@ 0x9e84
 8025100:	f2c2 0800 	movt	r8, #8192	@ 0x2000
 8025104:	f649 6088 	movw	r0, #40584	@ 0x9e88
 8025108:	f8d8 4000 	ldr.w	r4, [r8]
 802510c:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8025110:	2100      	movs	r1, #0
 8025112:	2294      	movs	r2, #148	@ 0x94
 8025114:	2700      	movs	r7, #0
 8025116:	f7ff fa67 	bl	80245e8 <ble_memset>
 802511a:	f240 455a 	movw	r5, #1114	@ 0x45a
 802511e:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 8025122:	4628      	mov	r0, r5
 8025124:	2100      	movs	r1, #0
 8025126:	220c      	movs	r2, #12
 8025128:	f7ff fa5e 	bl	80245e8 <ble_memset>
 802512c:	f641 5198 	movw	r1, #7576	@ 0x1d98
 8025130:	1da8      	adds	r0, r5, #6
 8025132:	f6c0 0103 	movt	r1, #2051	@ 0x803
 8025136:	2205      	movs	r2, #5
 8025138:	f7ff fa06 	bl	8024548 <ble_memcpy>
 802513c:	f649 6664 	movw	r6, #40548	@ 0x9e64
 8025140:	f2c2 0600 	movt	r6, #8192	@ 0x2000
 8025144:	f856 5027 	ldr.w	r5, [r6, r7, lsl #2]
 8025148:	b155      	cbz	r5, 8025160 <conn_mngr_reset+0x68>
 802514a:	f8d5 00c0 	ldr.w	r0, [r5, #192]	@ 0xc0
 802514e:	b108      	cbz	r0, 8025154 <conn_mngr_reset+0x5c>
 8025150:	f7ed fc4a 	bl	80129e8 <evnt_schdlr_unrgstr_evnt>
 8025154:	4628      	mov	r0, r5
 8025156:	f000 f828 	bl	80251aa <conn_mngr_free_all_timers>
 802515a:	4628      	mov	r0, r5
 802515c:	f7fc fc70 	bl	8021a40 <os_mem_pool_free>
 8025160:	3701      	adds	r7, #1
 8025162:	2f08      	cmp	r7, #8
 8025164:	d1ee      	bne.n	8025144 <conn_mngr_reset+0x4c>
 8025166:	2002      	movs	r0, #2
 8025168:	f7fc fa7a 	bl	8021660 <emngr_handle_remove>
 802516c:	f649 701c 	movw	r0, #40732	@ 0x9f1c
 8025170:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8025174:	2100      	movs	r1, #0
 8025176:	7001      	strb	r1, [r0, #0]
 8025178:	f649 6064 	movw	r0, #40548	@ 0x9e64
 802517c:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8025180:	2100      	movs	r1, #0
 8025182:	2220      	movs	r2, #32
 8025184:	f7ff fa30 	bl	80245e8 <ble_memset>
 8025188:	b16c      	cbz	r4, 80251a6 <conn_mngr_reset+0xae>
 802518a:	f8d8 0000 	ldr.w	r0, [r8]
 802518e:	bf00      	nop
 8025190:	6940      	ldr	r0, [r0, #20]
 8025192:	f8c8 0000 	str.w	r0, [r8]
 8025196:	4620      	mov	r0, r4
 8025198:	f7fc fc52 	bl	8021a40 <os_mem_pool_free>
 802519c:	f8d8 0000 	ldr.w	r0, [r8]
 80251a0:	2800      	cmp	r0, #0
 80251a2:	4604      	mov	r4, r0
 80251a4:	d1f4      	bne.n	8025190 <conn_mngr_reset+0x98>
 80251a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080251aa <conn_mngr_free_all_timers>:
 80251aa:	b510      	push	{r4, lr}
 80251ac:	4604      	mov	r4, r0
 80251ae:	f850 1fc4 	ldr.w	r1, [r0, #196]!
 80251b2:	b109      	cbz	r1, 80251b8 <conn_mngr_free_all_timers+0xe>
 80251b4:	f7fc ffbc 	bl	8022130 <os_timer_stop_free>
 80251b8:	4620      	mov	r0, r4
 80251ba:	f850 1fc8 	ldr.w	r1, [r0, #200]!
 80251be:	b109      	cbz	r1, 80251c4 <conn_mngr_free_all_timers+0x1a>
 80251c0:	f7fc ffb6 	bl	8022130 <os_timer_stop_free>
 80251c4:	4620      	mov	r0, r4
 80251c6:	f850 1fd0 	ldr.w	r1, [r0, #208]!
 80251ca:	b109      	cbz	r1, 80251d0 <conn_mngr_free_all_timers+0x26>
 80251cc:	f7fc ffb0 	bl	8022130 <os_timer_stop_free>
 80251d0:	4620      	mov	r0, r4
 80251d2:	f850 1fcc 	ldr.w	r1, [r0, #204]!
 80251d6:	b109      	cbz	r1, 80251dc <conn_mngr_free_all_timers+0x32>
 80251d8:	f7fc ffaa 	bl	8022130 <os_timer_stop_free>
 80251dc:	f854 0fd4 	ldr.w	r0, [r4, #212]!
 80251e0:	b120      	cbz	r0, 80251ec <conn_mngr_free_all_timers+0x42>
 80251e2:	4620      	mov	r0, r4
 80251e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80251e8:	f7fc bfa2 	b.w	8022130 <os_timer_stop_free>
 80251ec:	bd10      	pop	{r4, pc}
	...

080251f0 <conn_mngr_alloc_handle>:
 80251f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80251f2:	b081      	sub	sp, #4
 80251f4:	f648 2018 	movw	r0, #35352	@ 0x8a18
 80251f8:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80251fc:	f7fc fc1e 	bl	8021a3c <os_mem_pool_alloc>
 8025200:	4605      	mov	r5, r0
 8025202:	4604      	mov	r4, r0
 8025204:	2800      	cmp	r0, #0
 8025206:	bf18      	it	ne
 8025208:	2501      	movne	r5, #1
 802520a:	4628      	mov	r0, r5
 802520c:	2101      	movs	r1, #1
 802520e:	f7fa fb08 	bl	801f822 <bsp_assert>
 8025212:	4628      	mov	r0, r5
 8025214:	2101      	movs	r1, #1
 8025216:	f7fa fb04 	bl	801f822 <bsp_assert>
 802521a:	2c00      	cmp	r4, #0
 802521c:	d07a      	beq.n	8025314 <conn_mngr_alloc_handle+0x124>
 802521e:	200b      	movs	r0, #11
 8025220:	f884 005c 	strb.w	r0, [r4, #92]	@ 0x5c
 8025224:	4620      	mov	r0, r4
 8025226:	2100      	movs	r1, #0
 8025228:	f44f 72a2 	mov.w	r2, #324	@ 0x144
 802522c:	2700      	movs	r7, #0
 802522e:	f7ff f9db 	bl	80245e8 <ble_memset>
 8025232:	f894 0048 	ldrb.w	r0, [r4, #72]	@ 0x48
 8025236:	f894 104a 	ldrb.w	r1, [r4, #74]	@ 0x4a
 802523a:	f040 0004 	orr.w	r0, r0, #4
 802523e:	f884 0048 	strb.w	r0, [r4, #72]	@ 0x48
 8025242:	f041 0002 	orr.w	r0, r1, #2
 8025246:	f884 004a 	strb.w	r0, [r4, #74]	@ 0x4a
 802524a:	201b      	movs	r0, #27
 802524c:	f2c0 1048 	movt	r0, #328	@ 0x148
 8025250:	4621      	mov	r1, r4
 8025252:	f8c4 00a4 	str.w	r0, [r4, #164]	@ 0xa4
 8025256:	f841 0fa0 	str.w	r0, [r1, #160]!
 802525a:	f240 1048 	movw	r0, #328	@ 0x148
 802525e:	f6c0 2090 	movt	r0, #2704	@ 0xa90
 8025262:	e9c4 002c 	strd	r0, r0, [r4, #176]	@ 0xb0
 8025266:	f44f 6029 	mov.w	r0, #2704	@ 0xa90
 802526a:	f8a4 00b8 	strh.w	r0, [r4, #184]	@ 0xb8
 802526e:	f104 00a8 	add.w	r0, r4, #168	@ 0xa8
 8025272:	2208      	movs	r2, #8
 8025274:	f104 0646 	add.w	r6, r4, #70	@ 0x46
 8025278:	f104 0550 	add.w	r5, r4, #80	@ 0x50
 802527c:	6524      	str	r4, [r4, #80]	@ 0x50
 802527e:	f884 7054 	strb.w	r7, [r4, #84]	@ 0x54
 8025282:	f7ff f961 	bl	8024548 <ble_memcpy>
 8025286:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 802528a:	f8a4 00d8 	strh.w	r0, [r4, #216]	@ 0xd8
 802528e:	200a      	movs	r0, #10
 8025290:	f884 006c 	strb.w	r0, [r4, #108]	@ 0x6c
 8025294:	4630      	mov	r0, r6
 8025296:	66a4      	str	r4, [r4, #104]	@ 0x68
 8025298:	f001 f8af 	bl	80263fa <db_get_le_feature_info>
 802529c:	207b      	movs	r0, #123	@ 0x7b
 802529e:	f884 0046 	strb.w	r0, [r4, #70]	@ 0x46
 80252a2:	f645 40c9 	movw	r0, #23753	@ 0x5cc9
 80252a6:	f6c0 0002 	movt	r0, #2050	@ 0x802
 80252aa:	2100      	movs	r1, #0
 80252ac:	462a      	mov	r2, r5
 80252ae:	f7fc fd8d 	bl	8021dcc <os_timer_create>
 80252b2:	2101      	movs	r1, #1
 80252b4:	f8c4 00c4 	str.w	r0, [r4, #196]	@ 0xc4
 80252b8:	2800      	cmp	r0, #0
 80252ba:	bf18      	it	ne
 80252bc:	2001      	movne	r0, #1
 80252be:	f7fa fab0 	bl	801f822 <bsp_assert>
 80252c2:	f649 6064 	movw	r0, #40548	@ 0x9e64
 80252c6:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80252ca:	bf00      	nop
 80252cc:	f850 1027 	ldr.w	r1, [r0, r7, lsl #2]
 80252d0:	b121      	cbz	r1, 80252dc <conn_mngr_alloc_handle+0xec>
 80252d2:	3701      	adds	r7, #1
 80252d4:	2f08      	cmp	r7, #8
 80252d6:	d1f9      	bne.n	80252cc <conn_mngr_alloc_handle+0xdc>
 80252d8:	2000      	movs	r0, #0
 80252da:	e008      	b.n	80252ee <conn_mngr_alloc_handle+0xfe>
 80252dc:	f840 4027 	str.w	r4, [r0, r7, lsl #2]
 80252e0:	b2f8      	uxtb	r0, r7
 80252e2:	f8a4 00de 	strh.w	r0, [r4, #222]	@ 0xde
 80252e6:	f1b7 0008 	subs.w	r0, r7, #8
 80252ea:	bf18      	it	ne
 80252ec:	2001      	movne	r0, #1
 80252ee:	2101      	movs	r1, #1
 80252f0:	f7fa fa97 	bl	801f822 <bsp_assert>
 80252f4:	f240 1001 	movw	r0, #257	@ 0x101
 80252f8:	f2c0 0001 	movt	r0, #1
 80252fc:	f8c4 012c 	str.w	r0, [r4, #300]	@ 0x12c
 8025300:	2000      	movs	r0, #0
 8025302:	f8a4 0130 	strh.w	r0, [r4, #304]	@ 0x130
 8025306:	f884 0134 	strb.w	r0, [r4, #308]	@ 0x134
 802530a:	20ff      	movs	r0, #255	@ 0xff
 802530c:	f884 013c 	strb.w	r0, [r4, #316]	@ 0x13c
 8025310:	f884 013b 	strb.w	r0, [r4, #315]	@ 0x13b
 8025314:	4620      	mov	r0, r4
 8025316:	b001      	add	sp, #4
 8025318:	bdf0      	pop	{r4, r5, r6, r7, pc}

0802531a <conn_mngr_start_connection>:
 802531a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802531e:	b08d      	sub	sp, #52	@ 0x34
 8025320:	4606      	mov	r6, r0
 8025322:	e9dd 8017 	ldrd	r8, r0, [sp, #92]	@ 0x5c
 8025326:	460d      	mov	r5, r1
 8025328:	2101      	movs	r1, #1
 802532a:	461f      	mov	r7, r3
 802532c:	4692      	mov	sl, r2
 802532e:	f88d 1033 	strb.w	r1, [sp, #51]	@ 0x33
 8025332:	2100      	movs	r1, #0
 8025334:	910b      	str	r1, [sp, #44]	@ 0x2c
 8025336:	b138      	cbz	r0, 8025348 <conn_mngr_start_connection+0x2e>
 8025338:	f896 b021 	ldrb.w	fp, [r6, #33]	@ 0x21
 802533c:	f04f 0900 	mov.w	r9, #0
 8025340:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8025344:	9203      	str	r2, [sp, #12]
 8025346:	e005      	b.n	8025354 <conn_mngr_start_connection+0x3a>
 8025348:	2280      	movs	r2, #128	@ 0x80
 802534a:	9203      	str	r2, [sp, #12]
 802534c:	f04f 0900 	mov.w	r9, #0
 8025350:	f04f 0b00 	mov.w	fp, #0
 8025354:	4634      	mov	r4, r6
 8025356:	f804 1f24 	strb.w	r1, [r4, #36]!
 802535a:	f884 0101 	strb.w	r0, [r4, #257]	@ 0x101
 802535e:	1d21      	adds	r1, r4, #4
 8025360:	4620      	mov	r0, r4
 8025362:	f7f2 fc1d 	bl	8017ba0 <llhwc_get_ch_idx>
 8025366:	f008 0001 	and.w	r0, r8, #1
 802536a:	f884 0106 	strb.w	r0, [r4, #262]	@ 0x106
 802536e:	f646 5438 	movw	r4, #27960	@ 0x6d38
 8025372:	f2c2 0400 	movt	r4, #8192	@ 0x2000
 8025376:	f649 721c 	movw	r2, #40732	@ 0x9f1c
 802537a:	6820      	ldr	r0, [r4, #0]
 802537c:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8025380:	7813      	ldrb	r3, [r2, #0]
 8025382:	6881      	ldr	r1, [r0, #8]
 8025384:	3301      	adds	r3, #1
 8025386:	7013      	strb	r3, [r2, #0]
 8025388:	b319      	cbz	r1, 80253d2 <conn_mngr_start_connection+0xb8>
 802538a:	f005 00fe 	and.w	r0, r5, #254	@ 0xfe
 802538e:	2200      	movs	r2, #0
 8025390:	2802      	cmp	r0, #2
 8025392:	bf18      	it	ne
 8025394:	4617      	movne	r7, r2
 8025396:	f8b6 00de 	ldrh.w	r0, [r6, #222]	@ 0xde
 802539a:	9204      	str	r2, [sp, #16]
 802539c:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 80253a0:	f896 0125 	ldrb.w	r0, [r6, #293]	@ 0x125
 80253a4:	f896 2023 	ldrb.w	r2, [r6, #35]	@ 0x23
 80253a8:	f88d 0020 	strb.w	r0, [sp, #32]
 80253ac:	8af0      	ldrh	r0, [r6, #22]
 80253ae:	f88d 202a 	strb.w	r2, [sp, #42]	@ 0x2a
 80253b2:	f8ad 0024 	strh.w	r0, [sp, #36]	@ 0x24
 80253b6:	8b30      	ldrh	r0, [r6, #24]
 80253b8:	8b72      	ldrh	r2, [r6, #26]
 80253ba:	f8ad 0026 	strh.w	r0, [sp, #38]	@ 0x26
 80253be:	a804      	add	r0, sp, #16
 80253c0:	e9cd 6a05 	strd	r6, sl, [sp, #20]
 80253c4:	9707      	str	r7, [sp, #28]
 80253c6:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 80253ca:	f88d b02b 	strb.w	fp, [sp, #43]	@ 0x2b
 80253ce:	4788      	blx	r1
 80253d0:	6820      	ldr	r0, [r4, #0]
 80253d2:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 80253d4:	b122      	cbz	r2, 80253e0 <conn_mngr_start_connection+0xc6>
 80253d6:	f8b6 00de 	ldrh.w	r0, [r6, #222]	@ 0xde
 80253da:	f896 112a 	ldrb.w	r1, [r6, #298]	@ 0x12a
 80253de:	4790      	blx	r2
 80253e0:	f896 2023 	ldrb.w	r2, [r6, #35]	@ 0x23
 80253e4:	2a01      	cmp	r2, #1
 80253e6:	d114      	bne.n	8025412 <conn_mngr_start_connection+0xf8>
 80253e8:	9816      	ldr	r0, [sp, #88]	@ 0x58
 80253ea:	2801      	cmp	r0, #1
 80253ec:	d111      	bne.n	8025412 <conn_mngr_start_connection+0xf8>
 80253ee:	7970      	ldrb	r0, [r6, #5]
 80253f0:	f000 00c0 	and.w	r0, r0, #192	@ 0xc0
 80253f4:	2840      	cmp	r0, #64	@ 0x40
 80253f6:	d10c      	bne.n	8025412 <conn_mngr_start_connection+0xf8>
 80253f8:	f10d 0333 	add.w	r3, sp, #51	@ 0x33
 80253fc:	2003      	movs	r0, #3
 80253fe:	2101      	movs	r1, #1
 8025400:	4632      	mov	r2, r6
 8025402:	f7f2 fc8a 	bl	8017d1a <llhwc_lst_search>
 8025406:	4605      	mov	r5, r0
 8025408:	2800      	cmp	r0, #0
 802540a:	d14d      	bne.n	80254a8 <conn_mngr_start_connection+0x18e>
 802540c:	f89d 0033 	ldrb.w	r0, [sp, #51]	@ 0x33
 8025410:	e011      	b.n	8025436 <conn_mngr_start_connection+0x11c>
 8025412:	2700      	movs	r7, #0
 8025414:	2000      	movs	r0, #0
 8025416:	2101      	movs	r1, #1
 8025418:	4633      	mov	r3, r6
 802541a:	9700      	str	r7, [sp, #0]
 802541c:	f7f2 fd20 	bl	8017e60 <llhwc_lst_add_rmv_dev>
 8025420:	aa0b      	add	r2, sp, #44	@ 0x2c
 8025422:	2002      	movs	r0, #2
 8025424:	4631      	mov	r1, r6
 8025426:	2300      	movs	r3, #0
 8025428:	f7f9 fe6e 	bl	801f108 <prvcy_mngr_srch_fw_reslvng_list>
 802542c:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 802542e:	b148      	cbz	r0, 8025444 <conn_mngr_start_connection+0x12a>
 8025430:	6800      	ldr	r0, [r0, #0]
 8025432:	f88d 0033 	strb.w	r0, [sp, #51]	@ 0x33
 8025436:	07c1      	lsls	r1, r0, #31
 8025438:	d104      	bne.n	8025444 <conn_mngr_start_connection+0x12a>
 802543a:	b2c1      	uxtb	r1, r0
 802543c:	2001      	movs	r0, #1
 802543e:	2200      	movs	r2, #0
 8025440:	f7f2 fea1 	bl	8018186 <llhwc_lst_edit_indicators>
 8025444:	8af0      	ldrh	r0, [r6, #22]
 8025446:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 802544a:	0880      	lsrs	r0, r0, #2
 802544c:	eb00 0140 	add.w	r1, r0, r0, lsl #1
 8025450:	f8d6 00c4 	ldr.w	r0, [r6, #196]	@ 0xc4
 8025454:	0189      	lsls	r1, r1, #6
 8025456:	f7fc fe81 	bl	802215c <os_timer_set>
 802545a:	f7f4 f9db 	bl	8019814 <llhwc_is_in_augmented_mode>
 802545e:	b110      	cbz	r0, 8025466 <conn_mngr_start_connection+0x14c>
 8025460:	2001      	movs	r0, #1
 8025462:	f886 0127 	strb.w	r0, [r6, #295]	@ 0x127
 8025466:	f506 70a0 	add.w	r0, r6, #320	@ 0x140
 802546a:	f7ff f971 	bl	8024750 <pta_init_acl>
 802546e:	9803      	ldr	r0, [sp, #12]
 8025470:	f645 43e5 	movw	r3, #23781	@ 0x5ce5
 8025474:	2500      	movs	r5, #0
 8025476:	4649      	mov	r1, r9
 8025478:	f6c0 0302 	movt	r3, #2050	@ 0x802
 802547c:	4632      	mov	r2, r6
 802547e:	e9cd 6500 	strd	r6, r5, [sp]
 8025482:	9502      	str	r5, [sp, #8]
 8025484:	f7ec fd0b 	bl	8011e9e <evnt_schdlr_rgstr_evnt>
 8025488:	2101      	movs	r1, #1
 802548a:	f8c6 00c0 	str.w	r0, [r6, #192]	@ 0xc0
 802548e:	2800      	cmp	r0, #0
 8025490:	bf18      	it	ne
 8025492:	2001      	movne	r0, #1
 8025494:	f7fa f9c5 	bl	801f822 <bsp_assert>
 8025498:	f8d6 10c0 	ldr.w	r1, [r6, #192]	@ 0xc0
 802549c:	f246 000d 	movw	r0, #24589	@ 0x600d
 80254a0:	f6c0 0002 	movt	r0, #2050	@ 0x802
 80254a4:	f7ed fc3e 	bl	8012d24 <evnt_schdlr_rgstr_error_cbk_evnt_cmplt>
 80254a8:	4628      	mov	r0, r5
 80254aa:	b00d      	add	sp, #52	@ 0x34
 80254ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080254b0 <conn_mngr_slave_start_connection>:
 80254b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80254b4:	b083      	sub	sp, #12
 80254b6:	e9dd 5a0f 	ldrd	r5, sl, [sp, #60]	@ 0x3c
 80254ba:	f8dd 9030 	ldr.w	r9, [sp, #48]	@ 0x30
 80254be:	469b      	mov	fp, r3
 80254c0:	4690      	mov	r8, r2
 80254c2:	460e      	mov	r6, r1
 80254c4:	4604      	mov	r4, r0
 80254c6:	f7fa f985 	bl	801f7d4 <state_mngr_get_state_type>
 80254ca:	3805      	subs	r0, #5
 80254cc:	fab0 f080 	clz	r0, r0
 80254d0:	0940      	lsrs	r0, r0, #5
 80254d2:	2101      	movs	r1, #1
 80254d4:	f7fa f9a5 	bl	801f822 <bsp_assert>
 80254d8:	4630      	mov	r0, r6
 80254da:	2101      	movs	r1, #1
 80254dc:	2e00      	cmp	r6, #0
 80254de:	bf18      	it	ne
 80254e0:	2001      	movne	r0, #1
 80254e2:	f7fa f99e 	bl	801f822 <bsp_assert>
 80254e6:	f7ff fe83 	bl	80251f0 <conn_mngr_alloc_handle>
 80254ea:	2101      	movs	r1, #1
 80254ec:	4607      	mov	r7, r0
 80254ee:	2800      	cmp	r0, #0
 80254f0:	bf18      	it	ne
 80254f2:	2001      	movne	r0, #1
 80254f4:	f7fa f995 	bl	801f822 <bsp_assert>
 80254f8:	b115      	cbz	r5, 8025500 <conn_mngr_slave_start_connection+0x50>
 80254fa:	f897 00de 	ldrb.w	r0, [r7, #222]	@ 0xde
 80254fe:	7028      	strb	r0, [r5, #0]
 8025500:	4638      	mov	r0, r7
 8025502:	4631      	mov	r1, r6
 8025504:	2238      	movs	r2, #56	@ 0x38
 8025506:	f8c7 40bc 	str.w	r4, [r7, #188]	@ 0xbc
 802550a:	f7ff f81d 	bl	8024548 <ble_memcpy>
 802550e:	8a38      	ldrh	r0, [r7, #16]
 8025510:	f897 1020 	ldrb.w	r1, [r7, #32]
 8025514:	2203      	movs	r2, #3
 8025516:	eb00 0151 	add.w	r1, r0, r1, lsr #1
 802551a:	f107 0008 	add.w	r0, r7, #8
 802551e:	f7fb ff63 	bl	80213e8 <ble_time_add_uint>
 8025522:	f241 7059 	movw	r0, #5977	@ 0x1759
 8025526:	f2cd 10b7 	movt	r0, #53687	@ 0xd1b7
 802552a:	8a39      	ldrh	r1, [r7, #16]
 802552c:	fbaa 0200 	umull	r0, r2, sl, r0
 8025530:	eb01 2092 	add.w	r0, r1, r2, lsr #10
 8025534:	f106 0108 	add.w	r1, r6, #8
 8025538:	8238      	strh	r0, [r7, #16]
 802553a:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 802553e:	f7fb ff2e 	bl	802139e <ble_time_set>
 8025542:	f507 7093 	add.w	r0, r7, #294	@ 0x126
 8025546:	f000 ff35 	bl	80263b4 <db_get_slp_clk_accuracy>
 802554a:	f1b9 0f01 	cmp.w	r9, #1
 802554e:	f04f 0200 	mov.w	r2, #0
 8025552:	d10b      	bne.n	802556c <conn_mngr_slave_start_connection+0xbc>
 8025554:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8025556:	f000 00fe 	and.w	r0, r0, #254	@ 0xfe
 802555a:	2802      	cmp	r0, #2
 802555c:	d106      	bne.n	802556c <conn_mngr_slave_start_connection+0xbc>
 802555e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8025560:	7950      	ldrb	r0, [r2, #5]
 8025562:	f000 00c0 	and.w	r0, r0, #192	@ 0xc0
 8025566:	2840      	cmp	r0, #64	@ 0x40
 8025568:	bf18      	it	ne
 802556a:	2200      	movne	r2, #0
 802556c:	f897 0022 	ldrb.w	r0, [r7, #34]	@ 0x22
 8025570:	f896 1023 	ldrb.w	r1, [r6, #35]	@ 0x23
 8025574:	2601      	movs	r6, #1
 8025576:	e9cd b000 	strd	fp, r0, [sp]
 802557a:	4638      	mov	r0, r7
 802557c:	4643      	mov	r3, r8
 802557e:	9602      	str	r6, [sp, #8]
 8025580:	f7ff fecb 	bl	802531a <conn_mngr_start_connection>
 8025584:	b003      	add	sp, #12
 8025586:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0802558c <conn_mngr_send_pkt>:
 802558c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025590:	b087      	sub	sp, #28
 8025592:	2808      	cmp	r0, #8
 8025594:	460f      	mov	r7, r1
 8025596:	d815      	bhi.n	80255c4 <conn_mngr_send_pkt+0x38>
 8025598:	d01c      	beq.n	80255d4 <conn_mngr_send_pkt+0x48>
 802559a:	f649 6164 	movw	r1, #40548	@ 0x9e64
 802559e:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 80255a2:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 80255a6:	b1ae      	cbz	r6, 80255d4 <conn_mngr_send_pkt+0x48>
 80255a8:	f8d6 00c0 	ldr.w	r0, [r6, #192]	@ 0xc0
 80255ac:	b190      	cbz	r0, 80255d4 <conn_mngr_send_pkt+0x48>
 80255ae:	f896 013d 	ldrb.w	r0, [r6, #317]	@ 0x13d
 80255b2:	2801      	cmp	r0, #1
 80255b4:	d116      	bne.n	80255e4 <conn_mngr_send_pkt+0x58>
 80255b6:	7bb8      	ldrb	r0, [r7, #14]
 80255b8:	b1e8      	cbz	r0, 80255f6 <conn_mngr_send_pkt+0x6a>
 80255ba:	2000      	movs	r0, #0
 80255bc:	2100      	movs	r1, #0
 80255be:	f7fa f930 	bl	801f822 <bsp_assert>
 80255c2:	e01a      	b.n	80255fa <conn_mngr_send_pkt+0x6e>
 80255c4:	4638      	mov	r0, r7
 80255c6:	f7f9 f950 	bl	801e86a <free_buff_hdr>
 80255ca:	2042      	movs	r0, #66	@ 0x42
 80255cc:	f7fa f974 	bl	801f8b8 <bsp_debug_gpio_toggle>
 80255d0:	2507      	movs	r5, #7
 80255d2:	e003      	b.n	80255dc <conn_mngr_send_pkt+0x50>
 80255d4:	4638      	mov	r0, r7
 80255d6:	f7f9 f948 	bl	801e86a <free_buff_hdr>
 80255da:	2502      	movs	r5, #2
 80255dc:	4628      	mov	r0, r5
 80255de:	b007      	add	sp, #28
 80255e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80255e4:	89b8      	ldrh	r0, [r7, #12]
 80255e6:	b958      	cbnz	r0, 8025600 <conn_mngr_send_pkt+0x74>
 80255e8:	2001      	movs	r0, #1
 80255ea:	f886 013d 	strb.w	r0, [r6, #317]	@ 0x13d
 80255ee:	4638      	mov	r0, r7
 80255f0:	f7f9 f93b 	bl	801e86a <free_buff_hdr>
 80255f4:	e15b      	b.n	80258ae <conn_mngr_send_pkt+0x322>
 80255f6:	2001      	movs	r0, #1
 80255f8:	73b8      	strb	r0, [r7, #14]
 80255fa:	2000      	movs	r0, #0
 80255fc:	f886 013d 	strb.w	r0, [r6, #317]	@ 0x13d
 8025600:	f896 0134 	ldrb.w	r0, [r6, #308]	@ 0x134
 8025604:	b1e8      	cbz	r0, 8025642 <conn_mngr_send_pkt+0xb6>
 8025606:	2001      	movs	r0, #1
 8025608:	2101      	movs	r1, #1
 802560a:	f7fa f90a 	bl	801f822 <bsp_assert>
 802560e:	2001      	movs	r0, #1
 8025610:	2101      	movs	r1, #1
 8025612:	f7fa f906 	bl	801f822 <bsp_assert>
 8025616:	f896 1134 	ldrb.w	r1, [r6, #308]	@ 0x134
 802561a:	f896 512c 	ldrb.w	r5, [r6, #300]	@ 0x12c
 802561e:	2905      	cmp	r1, #5
 8025620:	d851      	bhi.n	80256c6 <conn_mngr_send_pkt+0x13a>
 8025622:	f896 0074 	ldrb.w	r0, [r6, #116]	@ 0x74
 8025626:	e8df f001 	tbb	[pc, r1]
 802562a:	0352      	.short	0x0352
 802562c:	52523e33 	.word	0x52523e33
 8025630:	f896 1125 	ldrb.w	r1, [r6, #293]	@ 0x125
 8025634:	b109      	cbz	r1, 802563a <conn_mngr_send_pkt+0xae>
 8025636:	f896 0075 	ldrb.w	r0, [r6, #117]	@ 0x75
 802563a:	2800      	cmp	r0, #0
 802563c:	bf18      	it	ne
 802563e:	4605      	movne	r5, r0
 8025640:	e045      	b.n	80256ce <conn_mngr_send_pkt+0x142>
 8025642:	f896 112c 	ldrb.w	r1, [r6, #300]	@ 0x12c
 8025646:	f8b6 00ae 	ldrh.w	r0, [r6, #174]	@ 0xae
 802564a:	f896 4122 	ldrb.w	r4, [r6, #290]	@ 0x122
 802564e:	2904      	cmp	r1, #4
 8025650:	d008      	beq.n	8025664 <conn_mngr_send_pkt+0xd8>
 8025652:	2902      	cmp	r1, #2
 8025654:	d011      	beq.n	802567a <conn_mngr_send_pkt+0xee>
 8025656:	2901      	cmp	r1, #1
 8025658:	d114      	bne.n	8025684 <conn_mngr_send_pkt+0xf8>
 802565a:	f06f 010d 	mvn.w	r1, #13
 802565e:	eb01 05d0 	add.w	r5, r1, r0, lsr #3
 8025662:	e07f      	b.n	8025764 <conn_mngr_send_pkt+0x1d8>
 8025664:	f8b6 112e 	ldrh.w	r1, [r6, #302]	@ 0x12e
 8025668:	2902      	cmp	r1, #2
 802566a:	d175      	bne.n	8025758 <conn_mngr_send_pkt+0x1cc>
 802566c:	f64f 4130 	movw	r1, #64560	@ 0xfc30
 8025670:	f2c0 013f 	movt	r1, #63	@ 0x3f
 8025674:	4408      	add	r0, r1
 8025676:	0985      	lsrs	r5, r0, #6
 8025678:	e074      	b.n	8025764 <conn_mngr_send_pkt+0x1d8>
 802567a:	f06f 010e 	mvn.w	r1, #14
 802567e:	eb01 0590 	add.w	r5, r1, r0, lsr #2
 8025682:	e06f      	b.n	8025764 <conn_mngr_send_pkt+0x1d8>
 8025684:	2000      	movs	r0, #0
 8025686:	2101      	movs	r1, #1
 8025688:	2500      	movs	r5, #0
 802568a:	f7fa f8ca 	bl	801f822 <bsp_assert>
 802568e:	e069      	b.n	8025764 <conn_mngr_send_pkt+0x1d8>
 8025690:	f896 1125 	ldrb.w	r1, [r6, #293]	@ 0x125
 8025694:	2901      	cmp	r1, #1
 8025696:	d11a      	bne.n	80256ce <conn_mngr_send_pkt+0x142>
 8025698:	f641 5190 	movw	r1, #7568	@ 0x1d90
 802569c:	4328      	orrs	r0, r5
 802569e:	f6c0 0103 	movt	r1, #2051	@ 0x803
 80256a2:	5c0d      	ldrb	r5, [r1, r0]
 80256a4:	e013      	b.n	80256ce <conn_mngr_send_pkt+0x142>
 80256a6:	f896 1125 	ldrb.w	r1, [r6, #293]	@ 0x125
 80256aa:	2901      	cmp	r1, #1
 80256ac:	d10b      	bne.n	80256c6 <conn_mngr_send_pkt+0x13a>
 80256ae:	f896 1075 	ldrb.w	r1, [r6, #117]	@ 0x75
 80256b2:	ea11 0200 	ands.w	r2, r1, r0
 80256b6:	f641 5090 	movw	r0, #7568	@ 0x1d90
 80256ba:	f6c0 0003 	movt	r0, #2051	@ 0x803
 80256be:	f000 80f8 	beq.w	80258b2 <conn_mngr_send_pkt+0x326>
 80256c2:	5c85      	ldrb	r5, [r0, r2]
 80256c4:	e003      	b.n	80256ce <conn_mngr_send_pkt+0x142>
 80256c6:	2000      	movs	r0, #0
 80256c8:	2101      	movs	r1, #1
 80256ca:	f7fa f8aa 	bl	801f822 <bsp_assert>
 80256ce:	1e68      	subs	r0, r5, #1
 80256d0:	2802      	cmp	r0, #2
 80256d2:	d204      	bcs.n	80256de <conn_mngr_send_pkt+0x152>
 80256d4:	f8b6 00b0 	ldrh.w	r0, [r6, #176]	@ 0xb0
 80256d8:	f8a6 00ae 	strh.w	r0, [r6, #174]	@ 0xae
 80256dc:	e00e      	b.n	80256fc <conn_mngr_send_pkt+0x170>
 80256de:	2d04      	cmp	r5, #4
 80256e0:	d106      	bne.n	80256f0 <conn_mngr_send_pkt+0x164>
 80256e2:	f8b6 00b2 	ldrh.w	r0, [r6, #178]	@ 0xb2
 80256e6:	f896 8122 	ldrb.w	r8, [r6, #290]	@ 0x122
 80256ea:	f8a6 00ae 	strh.w	r0, [r6, #174]	@ 0xae
 80256ee:	e012      	b.n	8025716 <conn_mngr_send_pkt+0x18a>
 80256f0:	2000      	movs	r0, #0
 80256f2:	2101      	movs	r1, #1
 80256f4:	f7fa f895 	bl	801f822 <bsp_assert>
 80256f8:	f8b6 00ae 	ldrh.w	r0, [r6, #174]	@ 0xae
 80256fc:	f896 8122 	ldrb.w	r8, [r6, #290]	@ 0x122
 8025700:	2d04      	cmp	r5, #4
 8025702:	d008      	beq.n	8025716 <conn_mngr_send_pkt+0x18a>
 8025704:	2d02      	cmp	r5, #2
 8025706:	d018      	beq.n	802573a <conn_mngr_send_pkt+0x1ae>
 8025708:	2d01      	cmp	r5, #1
 802570a:	d11b      	bne.n	8025744 <conn_mngr_send_pkt+0x1b8>
 802570c:	f06f 010d 	mvn.w	r1, #13
 8025710:	eb01 04d0 	add.w	r4, r1, r0, lsr #3
 8025714:	e01b      	b.n	802574e <conn_mngr_send_pkt+0x1c2>
 8025716:	f8b6 112e 	ldrh.w	r1, [r6, #302]	@ 0x12e
 802571a:	2902      	cmp	r1, #2
 802571c:	d106      	bne.n	802572c <conn_mngr_send_pkt+0x1a0>
 802571e:	f64f 4130 	movw	r1, #64560	@ 0xfc30
 8025722:	f2c0 013f 	movt	r1, #63	@ 0x3f
 8025726:	4408      	add	r0, r1
 8025728:	0984      	lsrs	r4, r0, #6
 802572a:	e010      	b.n	802574e <conn_mngr_send_pkt+0x1c2>
 802572c:	f64f 51f2 	movw	r1, #65010	@ 0xfdf2
 8025730:	f2c0 010f 	movt	r1, #15
 8025734:	4408      	add	r0, r1
 8025736:	0904      	lsrs	r4, r0, #4
 8025738:	e009      	b.n	802574e <conn_mngr_send_pkt+0x1c2>
 802573a:	f06f 010e 	mvn.w	r1, #14
 802573e:	eb01 0490 	add.w	r4, r1, r0, lsr #2
 8025742:	e004      	b.n	802574e <conn_mngr_send_pkt+0x1c2>
 8025744:	2000      	movs	r0, #0
 8025746:	2101      	movs	r1, #1
 8025748:	2400      	movs	r4, #0
 802574a:	f7fa f86a 	bl	801f822 <bsp_assert>
 802574e:	fab8 f088 	clz	r0, r8
 8025752:	0940      	lsrs	r0, r0, #5
 8025754:	0085      	lsls	r5, r0, #2
 8025756:	e009      	b.n	802576c <conn_mngr_send_pkt+0x1e0>
 8025758:	f64f 51f2 	movw	r1, #65010	@ 0xfdf2
 802575c:	f2c0 010f 	movt	r1, #15
 8025760:	4408      	add	r0, r1
 8025762:	0905      	lsrs	r5, r0, #4
 8025764:	fab4 f084 	clz	r0, r4
 8025768:	0940      	lsrs	r0, r0, #5
 802576a:	0084      	lsls	r4, r0, #2
 802576c:	1928      	adds	r0, r5, r4
 802576e:	b280      	uxth	r0, r0
 8025770:	f8b6 40ac 	ldrh.w	r4, [r6, #172]	@ 0xac
 8025774:	89b9      	ldrh	r1, [r7, #12]
 8025776:	42a0      	cmp	r0, r4
 8025778:	bf38      	it	cc
 802577a:	4604      	movcc	r4, r0
 802577c:	42a1      	cmp	r1, r4
 802577e:	d969      	bls.n	8025854 <conn_mngr_send_pkt+0x2c8>
 8025780:	4620      	mov	r0, r4
 8025782:	2101      	movs	r1, #1
 8025784:	2c00      	cmp	r4, #0
 8025786:	bf18      	it	ne
 8025788:	2001      	movne	r0, #1
 802578a:	f7fa f84a 	bl	801f822 <bsp_assert>
 802578e:	89b8      	ldrh	r0, [r7, #12]
 8025790:	2500      	movs	r5, #0
 8025792:	1821      	adds	r1, r4, r0
 8025794:	3901      	subs	r1, #1
 8025796:	42a1      	cmp	r1, r4
 8025798:	f4ff af20 	bcc.w	80255dc <conn_mngr_send_pkt+0x50>
 802579c:	fbb1 f9f4 	udiv	r9, r1, r4
 80257a0:	1ce1      	adds	r1, r4, #3
 80257a2:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 80257a6:	4011      	ands	r1, r2
 80257a8:	683a      	ldr	r2, [r7, #0]
 80257aa:	897b      	ldrh	r3, [r7, #10]
 80257ac:	310c      	adds	r1, #12
 80257ae:	9102      	str	r1, [sp, #8]
 80257b0:	18d1      	adds	r1, r2, r3
 80257b2:	f1a9 0301 	sub.w	r3, r9, #1
 80257b6:	fb03 1804 	mla	r8, r3, r4, r1
 80257ba:	fb03 0a14 	mls	sl, r3, r4, r0
 80257be:	9601      	str	r6, [sp, #4]
 80257c0:	9706      	str	r7, [sp, #24]
 80257c2:	4260      	negs	r0, r4
 80257c4:	f1a2 0b01 	sub.w	fp, r2, #1
 80257c8:	2700      	movs	r7, #0
 80257ca:	2600      	movs	r6, #0
 80257cc:	9405      	str	r4, [sp, #20]
 80257ce:	9003      	str	r0, [sp, #12]
 80257d0:	f8cd 9010 	str.w	r9, [sp, #16]
 80257d4:	f1b9 0401 	subs.w	r4, r9, #1
 80257d8:	d01f      	beq.n	802581a <conn_mngr_send_pkt+0x28e>
 80257da:	f249 4060 	movw	r0, #37984	@ 0x9460
 80257de:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80257e2:	f7fc f92b 	bl	8021a3c <os_mem_pool_alloc>
 80257e6:	2800      	cmp	r0, #0
 80257e8:	d03f      	beq.n	802586a <conn_mngr_send_pkt+0x2de>
 80257ea:	9906      	ldr	r1, [sp, #24]
 80257ec:	9a02      	ldr	r2, [sp, #8]
 80257ee:	8949      	ldrh	r1, [r1, #10]
 80257f0:	f1ba 0f00 	cmp.w	sl, #0
 80257f4:	fb04 1102 	mla	r1, r4, r2, r1
 80257f8:	7385      	strb	r5, [r0, #14]
 80257fa:	f101 0104 	add.w	r1, r1, #4
 80257fe:	6047      	str	r7, [r0, #4]
 8025800:	8141      	strh	r1, [r0, #10]
 8025802:	d00c      	beq.n	802581e <conn_mngr_send_pkt+0x292>
 8025804:	4651      	mov	r1, sl
 8025806:	bf00      	nop
 8025808:	1e4a      	subs	r2, r1, #1
 802580a:	8943      	ldrh	r3, [r0, #10]
 802580c:	f818 7002 	ldrb.w	r7, [r8, r2]
 8025810:	445b      	add	r3, fp
 8025812:	545f      	strb	r7, [r3, r1]
 8025814:	4611      	mov	r1, r2
 8025816:	d1f7      	bne.n	8025808 <conn_mngr_send_pkt+0x27c>
 8025818:	e001      	b.n	802581e <conn_mngr_send_pkt+0x292>
 802581a:	9806      	ldr	r0, [sp, #24]
 802581c:	6047      	str	r7, [r0, #4]
 802581e:	4607      	mov	r7, r0
 8025820:	9804      	ldr	r0, [sp, #16]
 8025822:	4581      	cmp	r9, r0
 8025824:	d003      	beq.n	802582e <conn_mngr_send_pkt+0x2a2>
 8025826:	7bb8      	ldrb	r0, [r7, #14]
 8025828:	f040 0004 	orr.w	r0, r0, #4
 802582c:	73b8      	strb	r0, [r7, #14]
 802582e:	9806      	ldr	r0, [sp, #24]
 8025830:	f8a7 a00c 	strh.w	sl, [r7, #12]
 8025834:	6800      	ldr	r0, [r0, #0]
 8025836:	6038      	str	r0, [r7, #0]
 8025838:	4638      	mov	r0, r7
 802583a:	f7f8 fc5f 	bl	801e0fc <pdu_trnsprt_hndlr_form_data_pdu>
 802583e:	9803      	ldr	r0, [sp, #12]
 8025840:	f8dd a014 	ldr.w	sl, [sp, #20]
 8025844:	3601      	adds	r6, #1
 8025846:	4480      	add	r8, r0
 8025848:	2c00      	cmp	r4, #0
 802584a:	46a1      	mov	r9, r4
 802584c:	d1c2      	bne.n	80257d4 <conn_mngr_send_pkt+0x248>
 802584e:	9c06      	ldr	r4, [sp, #24]
 8025850:	2701      	movs	r7, #1
 8025852:	e010      	b.n	8025876 <conn_mngr_send_pkt+0x2ea>
 8025854:	4638      	mov	r0, r7
 8025856:	f7f8 fc51 	bl	801e0fc <pdu_trnsprt_hndlr_form_data_pdu>
 802585a:	f8d6 10c0 	ldr.w	r1, [r6, #192]	@ 0xc0
 802585e:	4605      	mov	r5, r0
 8025860:	4608      	mov	r0, r1
 8025862:	4639      	mov	r1, r7
 8025864:	f7ed f957 	bl	8012b16 <evnt_schdlr_add_data_pkt>
 8025868:	e6b8      	b.n	80255dc <conn_mngr_send_pkt+0x50>
 802586a:	9c06      	ldr	r4, [sp, #24]
 802586c:	6820      	ldr	r0, [r4, #0]
 802586e:	3804      	subs	r0, #4
 8025870:	f7fc f8e6 	bl	8021a40 <os_mem_pool_free>
 8025874:	2700      	movs	r7, #0
 8025876:	f8dd 8004 	ldr.w	r8, [sp, #4]
 802587a:	b1c6      	cbz	r6, 80258ae <conn_mngr_send_pkt+0x322>
 802587c:	2500      	movs	r5, #0
 802587e:	bf00      	nop
 8025880:	4620      	mov	r0, r4
 8025882:	2c00      	cmp	r4, #0
 8025884:	bf18      	it	ne
 8025886:	2001      	movne	r0, #1
 8025888:	4038      	ands	r0, r7
 802588a:	2801      	cmp	r0, #1
 802588c:	d105      	bne.n	802589a <conn_mngr_send_pkt+0x30e>
 802588e:	f8d8 00c0 	ldr.w	r0, [r8, #192]	@ 0xc0
 8025892:	4621      	mov	r1, r4
 8025894:	f7ed f93f 	bl	8012b16 <evnt_schdlr_add_data_pkt>
 8025898:	e003      	b.n	80258a2 <conn_mngr_send_pkt+0x316>
 802589a:	b134      	cbz	r4, 80258aa <conn_mngr_send_pkt+0x31e>
 802589c:	4620      	mov	r0, r4
 802589e:	f7fc f8cf 	bl	8021a40 <os_mem_pool_free>
 80258a2:	6864      	ldr	r4, [r4, #4]
 80258a4:	3e01      	subs	r6, #1
 80258a6:	d1eb      	bne.n	8025880 <conn_mngr_send_pkt+0x2f4>
 80258a8:	e698      	b.n	80255dc <conn_mngr_send_pkt+0x50>
 80258aa:	2400      	movs	r4, #0
 80258ac:	e7fa      	b.n	80258a4 <conn_mngr_send_pkt+0x318>
 80258ae:	2500      	movs	r5, #0
 80258b0:	e694      	b.n	80255dc <conn_mngr_send_pkt+0x50>
 80258b2:	5c45      	ldrb	r5, [r0, r1]
 80258b4:	e70b      	b.n	80256ce <conn_mngr_send_pkt+0x142>
	...

080258b8 <conn_mngr_calc_num_of_used_data_chnls>:
 80258b8:	b570      	push	{r4, r5, r6, lr}
 80258ba:	b082      	sub	sp, #8
 80258bc:	2101      	movs	r1, #1
 80258be:	4605      	mov	r5, r0
 80258c0:	2800      	cmp	r0, #0
 80258c2:	bf18      	it	ne
 80258c4:	2001      	movne	r0, #1
 80258c6:	2601      	movs	r6, #1
 80258c8:	f7f9 ffab 	bl	801f822 <bsp_assert>
 80258cc:	466c      	mov	r4, sp
 80258ce:	4620      	mov	r0, r4
 80258d0:	4629      	mov	r1, r5
 80258d2:	2205      	movs	r2, #5
 80258d4:	f7fe fe38 	bl	8024548 <ble_memcpy>
 80258d8:	f89d 0004 	ldrb.w	r0, [sp, #4]
 80258dc:	f04f 3c55 	mov.w	ip, #1431655765	@ 0x55555555
 80258e0:	9001      	str	r0, [sp, #4]
 80258e2:	2000      	movs	r0, #0
 80258e4:	f04f 3e33 	mov.w	lr, #858993459	@ 0x33333333
 80258e8:	f04f 3301 	mov.w	r3, #16843009	@ 0x1010101
 80258ec:	2500      	movs	r5, #0
 80258ee:	bf00      	nop
 80258f0:	f854 1020 	ldr.w	r1, [r4, r0, lsl #2]
 80258f4:	ea0c 0251 	and.w	r2, ip, r1, lsr #1
 80258f8:	1a89      	subs	r1, r1, r2
 80258fa:	ea0e 0291 	and.w	r2, lr, r1, lsr #2
 80258fe:	f021 31cc 	bic.w	r1, r1, #3435973836	@ 0xcccccccc
 8025902:	4411      	add	r1, r2
 8025904:	eb01 1211 	add.w	r2, r1, r1, lsr #4
 8025908:	f844 1020 	str.w	r1, [r4, r0, lsl #2]
 802590c:	f022 32f0 	bic.w	r2, r2, #4042322160	@ 0xf0f0f0f0
 8025910:	fb02 f203 	mul.w	r2, r2, r3
 8025914:	2001      	movs	r0, #1
 8025916:	eb05 6512 	add.w	r5, r5, r2, lsr #24
 802591a:	07f1      	lsls	r1, r6, #31
 802591c:	f04f 0600 	mov.w	r6, #0
 8025920:	d1e6      	bne.n	80258f0 <conn_mngr_calc_num_of_used_data_chnls+0x38>
 8025922:	b2e8      	uxtb	r0, r5
 8025924:	b002      	add	sp, #8
 8025926:	bd70      	pop	{r4, r5, r6, pc}

08025928 <conn_mngr_get_ping_timeout_value>:
 8025928:	8ac2      	ldrh	r2, [r0, #22]
 802592a:	f8b0 00d8 	ldrh.w	r0, [r0, #216]	@ 0xd8
 802592e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8025932:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8025936:	0892      	lsrs	r2, r2, #2
 8025938:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802593c:	0040      	lsls	r0, r0, #1
 802593e:	ebb0 0f42 	cmp.w	r0, r2, lsl #1
 8025942:	eba0 0242 	sub.w	r2, r0, r2, lsl #1
 8025946:	f04f 0000 	mov.w	r0, #0
 802594a:	bf38      	it	cc
 802594c:	2205      	movcc	r2, #5
 802594e:	600a      	str	r2, [r1, #0]
 8025950:	4770      	bx	lr

08025952 <conn_mngr_free_handle>:
 8025952:	b570      	push	{r4, r5, r6, lr}
 8025954:	2807      	cmp	r0, #7
 8025956:	d81a      	bhi.n	802598e <conn_mngr_free_handle+0x3c>
 8025958:	f649 6664 	movw	r6, #40548	@ 0x9e64
 802595c:	f2c2 0600 	movt	r6, #8192	@ 0x2000
 8025960:	f856 5020 	ldr.w	r5, [r6, r0, lsl #2]
 8025964:	4604      	mov	r4, r0
 8025966:	b195      	cbz	r5, 802598e <conn_mngr_free_handle+0x3c>
 8025968:	f8d5 0140 	ldr.w	r0, [r5, #320]	@ 0x140
 802596c:	f7fe fff4 	bl	8024958 <pta_remove_pta_params>
 8025970:	f8d5 00c0 	ldr.w	r0, [r5, #192]	@ 0xc0
 8025974:	b108      	cbz	r0, 802597a <conn_mngr_free_handle+0x28>
 8025976:	f7ed f837 	bl	80129e8 <evnt_schdlr_unrgstr_evnt>
 802597a:	4628      	mov	r0, r5
 802597c:	f7ff fc15 	bl	80251aa <conn_mngr_free_all_timers>
 8025980:	4628      	mov	r0, r5
 8025982:	f7fc f85d 	bl	8021a40 <os_mem_pool_free>
 8025986:	2000      	movs	r0, #0
 8025988:	f846 0024 	str.w	r0, [r6, r4, lsl #2]
 802598c:	bd70      	pop	{r4, r5, r6, pc}
 802598e:	2002      	movs	r0, #2
 8025990:	bd70      	pop	{r4, r5, r6, pc}
	...

08025994 <conn_mngr_disconnect>:
 8025994:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8025998:	b085      	sub	sp, #20
 802599a:	4688      	mov	r8, r1
 802599c:	2101      	movs	r1, #1
 802599e:	4606      	mov	r6, r0
 80259a0:	2800      	cmp	r0, #0
 80259a2:	bf18      	it	ne
 80259a4:	2001      	movne	r0, #1
 80259a6:	2701      	movs	r7, #1
 80259a8:	f7f9 ff3b 	bl	801f822 <bsp_assert>
 80259ac:	f8d6 00bc 	ldr.w	r0, [r6, #188]	@ 0xbc
 80259b0:	2400      	movs	r4, #0
 80259b2:	f8b6 90de 	ldrh.w	r9, [r6, #222]	@ 0xde
 80259b6:	f88d 7013 	strb.w	r7, [sp, #19]
 80259ba:	9403      	str	r4, [sp, #12]
 80259bc:	f7f9 ff0a 	bl	801f7d4 <state_mngr_get_state_type>
 80259c0:	2805      	cmp	r0, #5
 80259c2:	d007      	beq.n	80259d4 <conn_mngr_disconnect+0x40>
 80259c4:	f8d6 00bc 	ldr.w	r0, [r6, #188]	@ 0xbc
 80259c8:	f7f9 ff04 	bl	801f7d4 <state_mngr_get_state_type>
 80259cc:	3806      	subs	r0, #6
 80259ce:	fab0 f080 	clz	r0, r0
 80259d2:	0947      	lsrs	r7, r0, #5
 80259d4:	4638      	mov	r0, r7
 80259d6:	2101      	movs	r1, #1
 80259d8:	f7f9 ff23 	bl	801f822 <bsp_assert>
 80259dc:	f8d6 00c0 	ldr.w	r0, [r6, #192]	@ 0xc0
 80259e0:	2101      	movs	r1, #1
 80259e2:	2800      	cmp	r0, #0
 80259e4:	bf18      	it	ne
 80259e6:	2001      	movne	r0, #1
 80259e8:	f7f9 ff1b 	bl	801f822 <bsp_assert>
 80259ec:	f8d6 00c0 	ldr.w	r0, [r6, #192]	@ 0xc0
 80259f0:	f7ec fffa 	bl	80129e8 <evnt_schdlr_unrgstr_evnt>
 80259f4:	f8d6 00bc 	ldr.w	r0, [r6, #188]	@ 0xbc
 80259f8:	2100      	movs	r1, #0
 80259fa:	f8c6 40c0 	str.w	r4, [r6, #192]	@ 0xc0
 80259fe:	f7f9 fe97 	bl	801f730 <state_mngr_update_state>
 8025a02:	fab0 f080 	clz	r0, r0
 8025a06:	0940      	lsrs	r0, r0, #5
 8025a08:	2101      	movs	r1, #1
 8025a0a:	f7f9 ff0a 	bl	801f822 <bsp_assert>
 8025a0e:	f8d6 00c4 	ldr.w	r0, [r6, #196]	@ 0xc4
 8025a12:	2101      	movs	r1, #1
 8025a14:	2800      	cmp	r0, #0
 8025a16:	bf18      	it	ne
 8025a18:	2001      	movne	r0, #1
 8025a1a:	f7f9 ff02 	bl	801f822 <bsp_assert>
 8025a1e:	4630      	mov	r0, r6
 8025a20:	f7ff fbc3 	bl	80251aa <conn_mngr_free_all_timers>
 8025a24:	f7f9 fd2d 	bl	801f482 <get_addr_rsl_enable>
 8025a28:	f896 2023 	ldrb.w	r2, [r6, #35]	@ 0x23
 8025a2c:	2a01      	cmp	r2, #1
 8025a2e:	d106      	bne.n	8025a3e <conn_mngr_disconnect+0xaa>
 8025a30:	7971      	ldrb	r1, [r6, #5]
 8025a32:	f001 01c0 	and.w	r1, r1, #192	@ 0xc0
 8025a36:	2940      	cmp	r1, #64	@ 0x40
 8025a38:	bf08      	it	eq
 8025a3a:	2801      	cmpeq	r0, #1
 8025a3c:	d015      	beq.n	8025a6a <conn_mngr_disconnect+0xd6>
 8025a3e:	2700      	movs	r7, #0
 8025a40:	2001      	movs	r0, #1
 8025a42:	2101      	movs	r1, #1
 8025a44:	4633      	mov	r3, r6
 8025a46:	9700      	str	r7, [sp, #0]
 8025a48:	f7f2 fa0a 	bl	8017e60 <llhwc_lst_add_rmv_dev>
 8025a4c:	4607      	mov	r7, r0
 8025a4e:	2800      	cmp	r0, #0
 8025a50:	d170      	bne.n	8025b34 <conn_mngr_disconnect+0x1a0>
 8025a52:	aa03      	add	r2, sp, #12
 8025a54:	2002      	movs	r0, #2
 8025a56:	4631      	mov	r1, r6
 8025a58:	2300      	movs	r3, #0
 8025a5a:	f7f9 fb55 	bl	801f108 <prvcy_mngr_srch_fw_reslvng_list>
 8025a5e:	9803      	ldr	r0, [sp, #12]
 8025a60:	b1b0      	cbz	r0, 8025a90 <conn_mngr_disconnect+0xfc>
 8025a62:	6800      	ldr	r0, [r0, #0]
 8025a64:	f88d 0013 	strb.w	r0, [sp, #19]
 8025a68:	e00b      	b.n	8025a82 <conn_mngr_disconnect+0xee>
 8025a6a:	f10d 0313 	add.w	r3, sp, #19
 8025a6e:	2003      	movs	r0, #3
 8025a70:	2101      	movs	r1, #1
 8025a72:	4632      	mov	r2, r6
 8025a74:	f7f2 f951 	bl	8017d1a <llhwc_lst_search>
 8025a78:	4607      	mov	r7, r0
 8025a7a:	2800      	cmp	r0, #0
 8025a7c:	d15a      	bne.n	8025b34 <conn_mngr_disconnect+0x1a0>
 8025a7e:	f89d 0013 	ldrb.w	r0, [sp, #19]
 8025a82:	07c1      	lsls	r1, r0, #31
 8025a84:	d104      	bne.n	8025a90 <conn_mngr_disconnect+0xfc>
 8025a86:	b2c1      	uxtb	r1, r0
 8025a88:	2001      	movs	r0, #1
 8025a8a:	2201      	movs	r2, #1
 8025a8c:	f7f2 fb7b 	bl	8018186 <llhwc_lst_edit_indicators>
 8025a90:	2000      	movs	r0, #0
 8025a92:	f24d 4393 	movw	r3, #54419	@ 0xd493
 8025a96:	f886 0134 	strb.w	r0, [r6, #308]	@ 0x134
 8025a9a:	f88d 0008 	strb.w	r0, [sp, #8]
 8025a9e:	aa02      	add	r2, sp, #8
 8025aa0:	2007      	movs	r0, #7
 8025aa2:	2100      	movs	r1, #0
 8025aa4:	f6c0 0301 	movt	r3, #2049	@ 0x801
 8025aa8:	f8ad 900a 	strh.w	r9, [sp, #10]
 8025aac:	f7fb ff70 	bl	8021990 <emngr_remove_conditional_event>
 8025ab0:	4648      	mov	r0, r9
 8025ab2:	f7ff ff4e 	bl	8025952 <conn_mngr_free_handle>
 8025ab6:	f649 701c 	movw	r0, #40732	@ 0x9f1c
 8025aba:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8025abe:	7801      	ldrb	r1, [r0, #0]
 8025ac0:	3901      	subs	r1, #1
 8025ac2:	7001      	strb	r1, [r0, #0]
 8025ac4:	2003      	movs	r0, #3
 8025ac6:	f7f9 ff0a 	bl	801f8de <disable_specific_irq>
 8025aca:	f649 6784 	movw	r7, #40580	@ 0x9e84
 8025ace:	f2c2 0700 	movt	r7, #8192	@ 0x2000
 8025ad2:	6838      	ldr	r0, [r7, #0]
 8025ad4:	b1a8      	cbz	r0, 8025b02 <conn_mngr_disconnect+0x16e>
 8025ad6:	2400      	movs	r4, #0
 8025ad8:	8841      	ldrh	r1, [r0, #2]
 8025ada:	4549      	cmp	r1, r9
 8025adc:	d10c      	bne.n	8025af8 <conn_mngr_disconnect+0x164>
 8025ade:	6839      	ldr	r1, [r7, #0]
 8025ae0:	4281      	cmp	r1, r0
 8025ae2:	d101      	bne.n	8025ae8 <conn_mngr_disconnect+0x154>
 8025ae4:	6941      	ldr	r1, [r0, #20]
 8025ae6:	6039      	str	r1, [r7, #0]
 8025ae8:	b10c      	cbz	r4, 8025aee <conn_mngr_disconnect+0x15a>
 8025aea:	6941      	ldr	r1, [r0, #20]
 8025aec:	6161      	str	r1, [r4, #20]
 8025aee:	6945      	ldr	r5, [r0, #20]
 8025af0:	f7fb ffa6 	bl	8021a40 <os_mem_pool_free>
 8025af4:	e002      	b.n	8025afc <conn_mngr_disconnect+0x168>
 8025af6:	bf00      	nop
 8025af8:	6945      	ldr	r5, [r0, #20]
 8025afa:	4604      	mov	r4, r0
 8025afc:	2d00      	cmp	r5, #0
 8025afe:	4628      	mov	r0, r5
 8025b00:	d1ea      	bne.n	8025ad8 <conn_mngr_disconnect+0x144>
 8025b02:	2003      	movs	r0, #3
 8025b04:	f7f9 fee9 	bl	801f8da <enable_specific_irq>
 8025b08:	f644 43c9 	movw	r3, #19657	@ 0x4cc9
 8025b0c:	2002      	movs	r0, #2
 8025b0e:	2100      	movs	r1, #0
 8025b10:	f6c0 0302 	movt	r3, #2050	@ 0x802
 8025b14:	4632      	mov	r2, r6
 8025b16:	2700      	movs	r7, #0
 8025b18:	f7fb ff3a 	bl	8021990 <emngr_remove_conditional_event>
 8025b1c:	f646 5038 	movw	r0, #27960	@ 0x6d38
 8025b20:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8025b24:	6800      	ldr	r0, [r0, #0]
 8025b26:	6843      	ldr	r3, [r0, #4]
 8025b28:	b123      	cbz	r3, 8025b34 <conn_mngr_disconnect+0x1a0>
 8025b2a:	2000      	movs	r0, #0
 8025b2c:	4649      	mov	r1, r9
 8025b2e:	4642      	mov	r2, r8
 8025b30:	2700      	movs	r7, #0
 8025b32:	4798      	blx	r3
 8025b34:	4638      	mov	r0, r7
 8025b36:	b005      	add	sp, #20
 8025b38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08025b3c <conn_mngr_send_le_phy_update_complete_event>:
 8025b3c:	b510      	push	{r4, lr}
 8025b3e:	f646 5c38 	movw	ip, #27960	@ 0x6d38
 8025b42:	f2c2 0c00 	movt	ip, #8192	@ 0x2000
 8025b46:	f8dc e000 	ldr.w	lr, [ip]
 8025b4a:	f8de 4034 	ldr.w	r4, [lr, #52]	@ 0x34
 8025b4e:	b18c      	cbz	r4, 8025b74 <conn_mngr_send_le_phy_update_complete_event+0x38>
 8025b50:	4694      	mov	ip, r2
 8025b52:	460a      	mov	r2, r1
 8025b54:	2a04      	cmp	r2, #4
 8025b56:	f8b0 10de 	ldrh.w	r1, [r0, #222]	@ 0xde
 8025b5a:	bf08      	it	eq
 8025b5c:	2203      	moveq	r2, #3
 8025b5e:	f1bc 0f04 	cmp.w	ip, #4
 8025b62:	bf08      	it	eq
 8025b64:	f04f 0c03 	moveq.w	ip, #3
 8025b68:	4618      	mov	r0, r3
 8025b6a:	4663      	mov	r3, ip
 8025b6c:	46a4      	mov	ip, r4
 8025b6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8025b72:	4760      	bx	ip
 8025b74:	bd10      	pop	{r4, pc}

08025b76 <conn_mngr_set_conn_tx_power_level>:
 8025b76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025b7a:	b082      	sub	sp, #8
 8025b7c:	4605      	mov	r5, r0
 8025b7e:	2000      	movs	r0, #0
 8025b80:	460c      	mov	r4, r1
 8025b82:	f88d 0007 	strb.w	r0, [sp, #7]
 8025b86:	f88d 0006 	strb.w	r0, [sp, #6]
 8025b8a:	4628      	mov	r0, r5
 8025b8c:	2101      	movs	r1, #1
 8025b8e:	2d00      	cmp	r5, #0
 8025b90:	bf18      	it	ne
 8025b92:	2001      	movne	r0, #1
 8025b94:	f7f9 fe45 	bl	801f822 <bsp_assert>
 8025b98:	4620      	mov	r0, r4
 8025b9a:	2101      	movs	r1, #1
 8025b9c:	2c00      	cmp	r4, #0
 8025b9e:	bf18      	it	ne
 8025ba0:	2001      	movne	r0, #1
 8025ba2:	f7f9 fe3e 	bl	801f822 <bsp_assert>
 8025ba6:	8828      	ldrh	r0, [r5, #0]
 8025ba8:	2807      	cmp	r0, #7
 8025baa:	d81a      	bhi.n	8025be2 <conn_mngr_set_conn_tx_power_level+0x6c>
 8025bac:	f649 6164 	movw	r1, #40548	@ 0x9e64
 8025bb0:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8025bb4:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 8025bb8:	b198      	cbz	r0, 8025be2 <conn_mngr_set_conn_tx_power_level+0x6c>
 8025bba:	78a9      	ldrb	r1, [r5, #2]
 8025bbc:	1e4a      	subs	r2, r1, #1
 8025bbe:	2a03      	cmp	r2, #3
 8025bc0:	d813      	bhi.n	8025bea <conn_mngr_set_conn_tx_power_level+0x74>
 8025bc2:	f890 212c 	ldrb.w	r2, [r0, #300]	@ 0x12c
 8025bc6:	4291      	cmp	r1, r2
 8025bc8:	d011      	beq.n	8025bee <conn_mngr_set_conn_tx_power_level+0x78>
 8025bca:	f081 0303 	eor.w	r3, r1, #3
 8025bce:	f082 0204 	eor.w	r2, r2, #4
 8025bd2:	431a      	orrs	r2, r3
 8025bd4:	fab2 f282 	clz	r2, r2
 8025bd8:	0952      	lsrs	r2, r2, #5
 8025bda:	d108      	bne.n	8025bee <conn_mngr_set_conn_tx_power_level+0x78>
 8025bdc:	207e      	movs	r0, #126	@ 0x7e
 8025bde:	7020      	strb	r0, [r4, #0]
 8025be0:	e02b      	b.n	8025c3a <conn_mngr_set_conn_tx_power_level+0xc4>
 8025be2:	2002      	movs	r0, #2
 8025be4:	b002      	add	sp, #8
 8025be6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8025bea:	2011      	movs	r0, #17
 8025bec:	e7fa      	b.n	8025be4 <conn_mngr_set_conn_tx_power_level+0x6e>
 8025bee:	f200 1839 	addw	r8, r0, #313	@ 0x139
 8025bf2:	f500 779d 	add.w	r7, r0, #314	@ 0x13a
 8025bf6:	4640      	mov	r0, r8
 8025bf8:	2903      	cmp	r1, #3
 8025bfa:	bf08      	it	eq
 8025bfc:	4638      	moveq	r0, r7
 8025bfe:	7806      	ldrb	r6, [r0, #0]
 8025c00:	f10d 0007 	add.w	r0, sp, #7
 8025c04:	f10d 0106 	add.w	r1, sp, #6
 8025c08:	f7fc fb51 	bl	80222ae <ll_tx_pwr_if_get_min_max_supprtd_tx_power_levels>
 8025c0c:	78e8      	ldrb	r0, [r5, #3]
 8025c0e:	4286      	cmp	r6, r0
 8025c10:	d00c      	beq.n	8025c2c <conn_mngr_set_conn_tx_power_level+0xb6>
 8025c12:	b240      	sxtb	r0, r0
 8025c14:	2100      	movs	r1, #0
 8025c16:	2201      	movs	r2, #1
 8025c18:	f7fc fb5c 	bl	80222d4 <ll_tx_pwr_if_get_tx_pwr_table_offset>
 8025c1c:	f247 21ec 	movw	r1, #29420	@ 0x72ec
 8025c20:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8025c24:	6809      	ldr	r1, [r1, #0]
 8025c26:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 8025c2a:	78c6      	ldrb	r6, [r0, #3]
 8025c2c:	7026      	strb	r6, [r4, #0]
 8025c2e:	78a8      	ldrb	r0, [r5, #2]
 8025c30:	2803      	cmp	r0, #3
 8025c32:	bf14      	ite	ne
 8025c34:	f888 6000 	strbne.w	r6, [r8]
 8025c38:	703e      	strbeq	r6, [r7, #0]
 8025c3a:	2000      	movs	r0, #0
 8025c3c:	e7d2      	b.n	8025be4 <conn_mngr_set_conn_tx_power_level+0x6e>
	...

08025c40 <conn_mngr_get_link_status>:
 8025c40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025c44:	f649 6564 	movw	r5, #40548	@ 0x9e64
 8025c48:	4614      	mov	r4, r2
 8025c4a:	4688      	mov	r8, r1
 8025c4c:	4606      	mov	r6, r0
 8025c4e:	2700      	movs	r7, #0
 8025c50:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 8025c54:	f855 1027 	ldr.w	r1, [r5, r7, lsl #2]
 8025c58:	b381      	cbz	r1, 8025cbc <conn_mngr_get_link_status+0x7c>
 8025c5a:	7820      	ldrb	r0, [r4, #0]
 8025c5c:	5c32      	ldrb	r2, [r6, r0]
 8025c5e:	b18a      	cbz	r2, 8025c84 <conn_mngr_get_link_status+0x44>
 8025c60:	3001      	adds	r0, #1
 8025c62:	b2c1      	uxtb	r1, r0
 8025c64:	7020      	strb	r0, [r4, #0]
 8025c66:	290a      	cmp	r1, #10
 8025c68:	f04f 0000 	mov.w	r0, #0
 8025c6c:	f04f 0101 	mov.w	r1, #1
 8025c70:	bf38      	it	cc
 8025c72:	2001      	movcc	r0, #1
 8025c74:	f7f9 fdd5 	bl	801f822 <bsp_assert>
 8025c78:	7820      	ldrb	r0, [r4, #0]
 8025c7a:	5c31      	ldrb	r1, [r6, r0]
 8025c7c:	2900      	cmp	r1, #0
 8025c7e:	d1ef      	bne.n	8025c60 <conn_mngr_get_link_status+0x20>
 8025c80:	f855 1027 	ldr.w	r1, [r5, r7, lsl #2]
 8025c84:	f891 1125 	ldrb.w	r1, [r1, #293]	@ 0x125
 8025c88:	b121      	cbz	r1, 8025c94 <conn_mngr_get_link_status+0x54>
 8025c8a:	2901      	cmp	r1, #1
 8025c8c:	d104      	bne.n	8025c98 <conn_mngr_get_link_status+0x58>
 8025c8e:	2102      	movs	r1, #2
 8025c90:	e001      	b.n	8025c96 <conn_mngr_get_link_status+0x56>
 8025c92:	bf00      	nop
 8025c94:	2105      	movs	r1, #5
 8025c96:	5431      	strb	r1, [r6, r0]
 8025c98:	f855 0027 	ldr.w	r0, [r5, r7, lsl #2]
 8025c9c:	7821      	ldrb	r1, [r4, #0]
 8025c9e:	f890 00de 	ldrb.w	r0, [r0, #222]	@ 0xde
 8025ca2:	f808 0011 	strb.w	r0, [r8, r1, lsl #1]
 8025ca6:	f855 0027 	ldr.w	r0, [r5, r7, lsl #2]
 8025caa:	7821      	ldrb	r1, [r4, #0]
 8025cac:	f890 00df 	ldrb.w	r0, [r0, #223]	@ 0xdf
 8025cb0:	eb08 0141 	add.w	r1, r8, r1, lsl #1
 8025cb4:	7048      	strb	r0, [r1, #1]
 8025cb6:	7820      	ldrb	r0, [r4, #0]
 8025cb8:	3001      	adds	r0, #1
 8025cba:	7020      	strb	r0, [r4, #0]
 8025cbc:	3701      	adds	r7, #1
 8025cbe:	2f08      	cmp	r7, #8
 8025cc0:	bf08      	it	eq
 8025cc2:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
 8025cc6:	e7c5      	b.n	8025c54 <conn_mngr_get_link_status+0x14>

08025cc8 <conn_mngr_post_timer_evnt_clbk>:
 8025cc8:	b510      	push	{r4, lr}
 8025cca:	4604      	mov	r4, r0
 8025ccc:	205e      	movs	r0, #94	@ 0x5e
 8025cce:	f7f9 fdef 	bl	801f8b0 <bsp_debug_gpio_set>
 8025cd2:	2002      	movs	r0, #2
 8025cd4:	4621      	mov	r1, r4
 8025cd6:	f7fb fcdc 	bl	8021692 <emngr_post_event>
 8025cda:	205e      	movs	r0, #94	@ 0x5e
 8025cdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8025ce0:	f7f9 bde8 	b.w	801f8b4 <bsp_debug_gpio_clear>

08025ce4 <conn_mngr_pkt_transmited_received_cbk>:
 8025ce4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025ce8:	b083      	sub	sp, #12
 8025cea:	4604      	mov	r4, r0
 8025cec:	2000      	movs	r0, #0
 8025cee:	f8ad 000a 	strh.w	r0, [sp, #10]
 8025cf2:	207c      	movs	r0, #124	@ 0x7c
 8025cf4:	460f      	mov	r7, r1
 8025cf6:	f7f9 fddb 	bl	801f8b0 <bsp_debug_gpio_set>
 8025cfa:	2c00      	cmp	r4, #0
 8025cfc:	f000 80d4 	beq.w	8025ea8 <conn_mngr_pkt_transmited_received_cbk+0x1c4>
 8025d00:	f897 0020 	ldrb.w	r0, [r7, #32]
 8025d04:	f897 1021 	ldrb.w	r1, [r7, #33]	@ 0x21
 8025d08:	7f3a      	ldrb	r2, [r7, #28]
 8025d0a:	4626      	mov	r6, r4
 8025d0c:	4408      	add	r0, r1
 8025d0e:	f836 bfde 	ldrh.w	fp, [r6, #222]!
 8025d12:	4290      	cmp	r0, r2
 8025d14:	bf88      	it	hi
 8025d16:	4602      	movhi	r2, r0
 8025d18:	b2d1      	uxtb	r1, r2
 8025d1a:	4620      	mov	r0, r4
 8025d1c:	f7ef fe74 	bl	8015a08 <llcp_check_update_prcdur>
 8025d20:	f104 0908 	add.w	r9, r4, #8
 8025d24:	4648      	mov	r0, r9
 8025d26:	4639      	mov	r1, r7
 8025d28:	f7fb fb39 	bl	802139e <ble_time_set>
 8025d2c:	f894 0138 	ldrb.w	r0, [r4, #312]	@ 0x138
 8025d30:	b110      	cbz	r0, 8025d38 <conn_mngr_pkt_transmited_received_cbk+0x54>
 8025d32:	4620      	mov	r0, r4
 8025d34:	f000 f9b9 	bl	80260aa <conn_mngr_send_inst_cntrl_hci_evnt>
 8025d38:	f897 0022 	ldrb.w	r0, [r7, #34]	@ 0x22
 8025d3c:	287f      	cmp	r0, #127	@ 0x7f
 8025d3e:	bf08      	it	eq
 8025d40:	f897 0023 	ldrbeq.w	r0, [r7, #35]	@ 0x23
 8025d44:	f884 0129 	strb.w	r0, [r4, #297]	@ 0x129
 8025d48:	4620      	mov	r0, r4
 8025d4a:	f7fe fed1 	bl	8024af0 <conn_mngr_sprvsn_timer_set>
 8025d4e:	46ba      	mov	sl, r7
 8025d50:	f81a 0f27 	ldrb.w	r0, [sl, #39]!
 8025d54:	f81a 1c0b 	ldrb.w	r1, [sl, #-11]
 8025d58:	1a08      	subs	r0, r1, r0
 8025d5a:	d00d      	beq.n	8025d78 <conn_mngr_pkt_transmited_received_cbk+0x94>
 8025d5c:	f646 5138 	movw	r1, #27960	@ 0x6d38
 8025d60:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8025d64:	6809      	ldr	r1, [r1, #0]
 8025d66:	69cb      	ldr	r3, [r1, #28]
 8025d68:	b133      	cbz	r3, 8025d78 <conn_mngr_pkt_transmited_received_cbk+0x94>
 8025d6a:	f8ad 000a 	strh.w	r0, [sp, #10]
 8025d6e:	f10d 020a 	add.w	r2, sp, #10
 8025d72:	2001      	movs	r0, #1
 8025d74:	4631      	mov	r1, r6
 8025d76:	4798      	blx	r3
 8025d78:	7f78      	ldrb	r0, [r7, #29]
 8025d7a:	b140      	cbz	r0, 8025d8e <conn_mngr_pkt_transmited_received_cbk+0xaa>
 8025d7c:	f894 1122 	ldrb.w	r1, [r4, #290]	@ 0x122
 8025d80:	2901      	cmp	r1, #1
 8025d82:	d104      	bne.n	8025d8e <conn_mngr_pkt_transmited_received_cbk+0xaa>
 8025d84:	f8d4 10e8 	ldr.w	r1, [r4, #232]	@ 0xe8
 8025d88:	4408      	add	r0, r1
 8025d8a:	f8c4 00e8 	str.w	r0, [r4, #232]	@ 0xe8
 8025d8e:	f897 0020 	ldrb.w	r0, [r7, #32]
 8025d92:	f649 6864 	movw	r8, #40548	@ 0x9e64
 8025d96:	f2c2 0800 	movt	r8, #8192	@ 0x2000
 8025d9a:	b918      	cbnz	r0, 8025da4 <conn_mngr_pkt_transmited_received_cbk+0xc0>
 8025d9c:	f897 1021 	ldrb.w	r1, [r7, #33]	@ 0x21
 8025da0:	2900      	cmp	r1, #0
 8025da2:	d04c      	beq.n	8025e3e <conn_mngr_pkt_transmited_received_cbk+0x15a>
 8025da4:	f894 1122 	ldrb.w	r1, [r4, #290]	@ 0x122
 8025da8:	3901      	subs	r1, #1
 8025daa:	2901      	cmp	r1, #1
 8025dac:	d843      	bhi.n	8025e36 <conn_mngr_pkt_transmited_received_cbk+0x152>
 8025dae:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8025db2:	b338      	cbz	r0, 8025e04 <conn_mngr_pkt_transmited_received_cbk+0x120>
 8025db4:	4298      	cmp	r0, r3
 8025db6:	d125      	bne.n	8025e04 <conn_mngr_pkt_transmited_received_cbk+0x120>
 8025db8:	f8d4 10ec 	ldr.w	r1, [r4, #236]	@ 0xec
 8025dbc:	f894 2123 	ldrb.w	r2, [r4, #291]	@ 0x123
 8025dc0:	4408      	add	r0, r1
 8025dc2:	2a06      	cmp	r2, #6
 8025dc4:	f8c4 00ec 	str.w	r0, [r4, #236]	@ 0xec
 8025dc8:	d035      	beq.n	8025e36 <conn_mngr_pkt_transmited_received_cbk+0x152>
 8025dca:	f8d4 00d4 	ldr.w	r0, [r4, #212]	@ 0xd4
 8025dce:	b390      	cbz	r0, 8025e36 <conn_mngr_pkt_transmited_received_cbk+0x152>
 8025dd0:	f7fc f930 	bl	8022034 <os_timer_stop>
 8025dd4:	8ae0      	ldrh	r0, [r4, #22]
 8025dd6:	f8b4 10d8 	ldrh.w	r1, [r4, #216]	@ 0xd8
 8025dda:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8025dde:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8025de2:	0880      	lsrs	r0, r0, #2
 8025de4:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 8025de8:	0049      	lsls	r1, r1, #1
 8025dea:	eba1 0342 	sub.w	r3, r1, r2, lsl #1
 8025dee:	f8d4 00d4 	ldr.w	r0, [r4, #212]	@ 0xd4
 8025df2:	ebb1 0f42 	cmp.w	r1, r2, lsl #1
 8025df6:	ea4f 1143 	mov.w	r1, r3, lsl #5
 8025dfa:	bf38      	it	cc
 8025dfc:	21a0      	movcc	r1, #160	@ 0xa0
 8025dfe:	f7fc f85e 	bl	8021ebe <os_timer_start>
 8025e02:	e018      	b.n	8025e36 <conn_mngr_pkt_transmited_received_cbk+0x152>
 8025e04:	b1b8      	cbz	r0, 8025e36 <conn_mngr_pkt_transmited_received_cbk+0x152>
 8025e06:	f894 0124 	ldrb.w	r0, [r4, #292]	@ 0x124
 8025e0a:	2808      	cmp	r0, #8
 8025e0c:	d105      	bne.n	8025e1a <conn_mngr_pkt_transmited_received_cbk+0x136>
 8025e0e:	4620      	mov	r0, r4
 8025e10:	2100      	movs	r1, #0
 8025e12:	4652      	mov	r2, sl
 8025e14:	f7f0 fafb 	bl	801640e <llcp_process_pkt>
 8025e18:	e00d      	b.n	8025e36 <conn_mngr_pkt_transmited_received_cbk+0x152>
 8025e1a:	68b8      	ldr	r0, [r7, #8]
 8025e1c:	b138      	cbz	r0, 8025e2e <conn_mngr_pkt_transmited_received_cbk+0x14a>
 8025e1e:	bf00      	nop
 8025e20:	f7f8 fd23 	bl	801e86a <free_buff_hdr>
 8025e24:	68b8      	ldr	r0, [r7, #8]
 8025e26:	6840      	ldr	r0, [r0, #4]
 8025e28:	2800      	cmp	r0, #0
 8025e2a:	60b8      	str	r0, [r7, #8]
 8025e2c:	d1f8      	bne.n	8025e20 <conn_mngr_pkt_transmited_received_cbk+0x13c>
 8025e2e:	4620      	mov	r0, r4
 8025e30:	213d      	movs	r1, #61	@ 0x3d
 8025e32:	f7ff fdaf 	bl	8025994 <conn_mngr_disconnect>
 8025e36:	f858 002b 	ldr.w	r0, [r8, fp, lsl #2]
 8025e3a:	42a0      	cmp	r0, r4
 8025e3c:	d047      	beq.n	8025ece <conn_mngr_pkt_transmited_received_cbk+0x1ea>
 8025e3e:	f858 002b 	ldr.w	r0, [r8, fp, lsl #2]
 8025e42:	42a0      	cmp	r0, r4
 8025e44:	d12d      	bne.n	8025ea2 <conn_mngr_pkt_transmited_received_cbk+0x1be>
 8025e46:	f8b4 00dc 	ldrh.w	r0, [r4, #220]	@ 0xdc
 8025e4a:	f64f 75ff 	movw	r5, #65535	@ 0xffff
 8025e4e:	42a8      	cmp	r0, r5
 8025e50:	d104      	bne.n	8025e5c <conn_mngr_pkt_transmited_received_cbk+0x178>
 8025e52:	7fb8      	ldrb	r0, [r7, #30]
 8025e54:	b110      	cbz	r0, 8025e5c <conn_mngr_pkt_transmited_received_cbk+0x178>
 8025e56:	8b20      	ldrh	r0, [r4, #24]
 8025e58:	f8a4 00dc 	strh.w	r0, [r4, #220]	@ 0xdc
 8025e5c:	f8d4 00bc 	ldr.w	r0, [r4, #188]	@ 0xbc
 8025e60:	f7f9 fcb8 	bl	801f7d4 <state_mngr_get_state_type>
 8025e64:	2805      	cmp	r0, #5
 8025e66:	d118      	bne.n	8025e9a <conn_mngr_pkt_transmited_received_cbk+0x1b6>
 8025e68:	f8d4 00bc 	ldr.w	r0, [r4, #188]	@ 0xbc
 8025e6c:	2106      	movs	r1, #6
 8025e6e:	f7f9 fc5f 	bl	801f730 <state_mngr_update_state>
 8025e72:	b9c8      	cbnz	r0, 8025ea8 <conn_mngr_pkt_transmited_received_cbk+0x1c4>
 8025e74:	f894 0125 	ldrb.w	r0, [r4, #293]	@ 0x125
 8025e78:	2801      	cmp	r0, #1
 8025e7a:	d10e      	bne.n	8025e9a <conn_mngr_pkt_transmited_received_cbk+0x1b6>
 8025e7c:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 8025e80:	4649      	mov	r1, r9
 8025e82:	f7fb fa8c 	bl	802139e <ble_time_set>
 8025e86:	2000      	movs	r0, #0
 8025e88:	f884 0020 	strb.w	r0, [r4, #32]
 8025e8c:	f8d4 00c0 	ldr.w	r0, [r4, #192]	@ 0xc0
 8025e90:	210c      	movs	r1, #12
 8025e92:	f8a4 50dc 	strh.w	r5, [r4, #220]	@ 0xdc
 8025e96:	f7ec fed6 	bl	8012c46 <evnt_schdlr_conn_params_updtd>
 8025e9a:	f8d4 00c0 	ldr.w	r0, [r4, #192]	@ 0xc0
 8025e9e:	f7ec ff01 	bl	8012ca4 <evnt_schdlr_evnt_updtd>
 8025ea2:	f894 0123 	ldrb.w	r0, [r4, #291]	@ 0x123
 8025ea6:	b128      	cbz	r0, 8025eb4 <conn_mngr_pkt_transmited_received_cbk+0x1d0>
 8025ea8:	207c      	movs	r0, #124	@ 0x7c
 8025eaa:	f7f9 fd03 	bl	801f8b4 <bsp_debug_gpio_clear>
 8025eae:	b003      	add	sp, #12
 8025eb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025eb4:	f649 6884 	movw	r8, #40580	@ 0x9e84
 8025eb8:	f2c2 0800 	movt	r8, #8192	@ 0x2000
 8025ebc:	f8d8 5000 	ldr.w	r5, [r8]
 8025ec0:	2d00      	cmp	r5, #0
 8025ec2:	d06f      	beq.n	8025fa4 <conn_mngr_pkt_transmited_received_cbk+0x2c0>
 8025ec4:	8868      	ldrh	r0, [r5, #2]
 8025ec6:	4558      	cmp	r0, fp
 8025ec8:	d15e      	bne.n	8025f88 <conn_mngr_pkt_transmited_received_cbk+0x2a4>
 8025eca:	2700      	movs	r7, #0
 8025ecc:	e065      	b.n	8025f9a <conn_mngr_pkt_transmited_received_cbk+0x2b6>
 8025ece:	f8cd 9000 	str.w	r9, [sp]
 8025ed2:	f8d7 9008 	ldr.w	r9, [r7, #8]
 8025ed6:	8835      	ldrh	r5, [r6, #0]
 8025ed8:	9601      	str	r6, [sp, #4]
 8025eda:	bf00      	nop
 8025edc:	f1b9 0f00 	cmp.w	r9, #0
 8025ee0:	d03e      	beq.n	8025f60 <conn_mngr_pkt_transmited_received_cbk+0x27c>
 8025ee2:	f858 0025 	ldr.w	r0, [r8, r5, lsl #2]
 8025ee6:	464e      	mov	r6, r9
 8025ee8:	42a0      	cmp	r0, r4
 8025eea:	d133      	bne.n	8025f54 <conn_mngr_pkt_transmited_received_cbk+0x270>
 8025eec:	8971      	ldrh	r1, [r6, #10]
 8025eee:	6832      	ldr	r2, [r6, #0]
 8025ef0:	f8d6 9004 	ldr.w	r9, [r6, #4]
 8025ef4:	5c50      	ldrb	r0, [r2, r1]
 8025ef6:	f000 0003 	and.w	r0, r0, #3
 8025efa:	2803      	cmp	r0, #3
 8025efc:	d108      	bne.n	8025f10 <conn_mngr_pkt_transmited_received_cbk+0x22c>
 8025efe:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8025f02:	4620      	mov	r0, r4
 8025f04:	4631      	mov	r1, r6
 8025f06:	4652      	mov	r2, sl
 8025f08:	f7f0 fa81 	bl	801640e <llcp_process_pkt>
 8025f0c:	e7e6      	b.n	8025edc <conn_mngr_pkt_transmited_received_cbk+0x1f8>
 8025f0e:	bf00      	nop
 8025f10:	4411      	add	r1, r2
 8025f12:	7849      	ldrb	r1, [r1, #1]
 8025f14:	b1d1      	cbz	r1, 8025f4c <conn_mngr_pkt_transmited_received_cbk+0x268>
 8025f16:	1e41      	subs	r1, r0, #1
 8025f18:	2902      	cmp	r1, #2
 8025f1a:	d217      	bcs.n	8025f4c <conn_mngr_pkt_transmited_received_cbk+0x268>
 8025f1c:	f894 111f 	ldrb.w	r1, [r4, #287]	@ 0x11f
 8025f20:	29aa      	cmp	r1, #170	@ 0xaa
 8025f22:	d06c      	beq.n	8025ffe <conn_mngr_pkt_transmited_received_cbk+0x31a>
 8025f24:	f646 5138 	movw	r1, #27960	@ 0x6d38
 8025f28:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8025f2c:	6809      	ldr	r1, [r1, #0]
 8025f2e:	3802      	subs	r0, #2
 8025f30:	fab0 f080 	clz	r0, r0
 8025f34:	7bb3      	ldrb	r3, [r6, #14]
 8025f36:	698a      	ldr	r2, [r1, #24]
 8025f38:	0940      	lsrs	r0, r0, #5
 8025f3a:	4318      	orrs	r0, r3
 8025f3c:	2a00      	cmp	r2, #0
 8025f3e:	73b0      	strb	r0, [r6, #14]
 8025f40:	d0cc      	beq.n	8025edc <conn_mngr_pkt_transmited_received_cbk+0x1f8>
 8025f42:	4628      	mov	r0, r5
 8025f44:	4631      	mov	r1, r6
 8025f46:	4790      	blx	r2
 8025f48:	e7c8      	b.n	8025edc <conn_mngr_pkt_transmited_received_cbk+0x1f8>
 8025f4a:	bf00      	nop
 8025f4c:	4630      	mov	r0, r6
 8025f4e:	f7f8 fc8c 	bl	801e86a <free_buff_hdr>
 8025f52:	e7c3      	b.n	8025edc <conn_mngr_pkt_transmited_received_cbk+0x1f8>
 8025f54:	4630      	mov	r0, r6
 8025f56:	f7f8 fc88 	bl	801e86a <free_buff_hdr>
 8025f5a:	6876      	ldr	r6, [r6, #4]
 8025f5c:	2e00      	cmp	r6, #0
 8025f5e:	d1f9      	bne.n	8025f54 <conn_mngr_pkt_transmited_received_cbk+0x270>
 8025f60:	e9dd 9600 	ldrd	r9, r6, [sp]
 8025f64:	f89a 0000 	ldrb.w	r0, [sl]
 8025f68:	2800      	cmp	r0, #0
 8025f6a:	f43f af68 	beq.w	8025e3e <conn_mngr_pkt_transmited_received_cbk+0x15a>
 8025f6e:	f858 0025 	ldr.w	r0, [r8, r5, lsl #2]
 8025f72:	42a0      	cmp	r0, r4
 8025f74:	f47f af63 	bne.w	8025e3e <conn_mngr_pkt_transmited_received_cbk+0x15a>
 8025f78:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8025f7c:	4620      	mov	r0, r4
 8025f7e:	2100      	movs	r1, #0
 8025f80:	4652      	mov	r2, sl
 8025f82:	f7f0 fa44 	bl	801640e <llcp_process_pkt>
 8025f86:	e75a      	b.n	8025e3e <conn_mngr_pkt_transmited_received_cbk+0x15a>
 8025f88:	4628      	mov	r0, r5
 8025f8a:	bf00      	nop
 8025f8c:	6945      	ldr	r5, [r0, #20]
 8025f8e:	b14d      	cbz	r5, 8025fa4 <conn_mngr_pkt_transmited_received_cbk+0x2c0>
 8025f90:	8869      	ldrh	r1, [r5, #2]
 8025f92:	4607      	mov	r7, r0
 8025f94:	4559      	cmp	r1, fp
 8025f96:	4628      	mov	r0, r5
 8025f98:	d1f8      	bne.n	8025f8c <conn_mngr_pkt_transmited_received_cbk+0x2a8>
 8025f9a:	4628      	mov	r0, r5
 8025f9c:	f7f0 ffa8 	bl	8016ef0 <llcp_re_exec_host_control>
 8025fa0:	283a      	cmp	r0, #58	@ 0x3a
 8025fa2:	d119      	bne.n	8025fd8 <conn_mngr_pkt_transmited_received_cbk+0x2f4>
 8025fa4:	f894 013b 	ldrb.w	r0, [r4, #315]	@ 0x13b
 8025fa8:	28ff      	cmp	r0, #255	@ 0xff
 8025faa:	f43f af7d 	beq.w	8025ea8 <conn_mngr_pkt_transmited_received_cbk+0x1c4>
 8025fae:	f894 113c 	ldrb.w	r1, [r4, #316]	@ 0x13c
 8025fb2:	22ff      	movs	r2, #255	@ 0xff
 8025fb4:	29ff      	cmp	r1, #255	@ 0xff
 8025fb6:	bf1a      	itte	ne
 8025fb8:	f884 113b 	strbne.w	r1, [r4, #315]	@ 0x13b
 8025fbc:	2101      	movne	r1, #1
 8025fbe:	2100      	moveq	r1, #0
 8025fc0:	4421      	add	r1, r4
 8025fc2:	2802      	cmp	r0, #2
 8025fc4:	f881 213b 	strb.w	r2, [r1, #315]	@ 0x13b
 8025fc8:	d015      	beq.n	8025ff6 <conn_mngr_pkt_transmited_received_cbk+0x312>
 8025fca:	2803      	cmp	r0, #3
 8025fcc:	f47f af6c 	bne.w	8025ea8 <conn_mngr_pkt_transmited_received_cbk+0x1c4>
 8025fd0:	8830      	ldrh	r0, [r6, #0]
 8025fd2:	f7ef fbbd 	bl	8015750 <llcp_read_remote_version>
 8025fd6:	e767      	b.n	8025ea8 <conn_mngr_pkt_transmited_received_cbk+0x1c4>
 8025fd8:	b10f      	cbz	r7, 8025fde <conn_mngr_pkt_transmited_received_cbk+0x2fa>
 8025fda:	6968      	ldr	r0, [r5, #20]
 8025fdc:	6178      	str	r0, [r7, #20]
 8025fde:	4628      	mov	r0, r5
 8025fe0:	f7fb fd2e 	bl	8021a40 <os_mem_pool_free>
 8025fe4:	f8d8 0000 	ldr.w	r0, [r8]
 8025fe8:	42a8      	cmp	r0, r5
 8025fea:	f47f af5d 	bne.w	8025ea8 <conn_mngr_pkt_transmited_received_cbk+0x1c4>
 8025fee:	6968      	ldr	r0, [r5, #20]
 8025ff0:	f8c8 0000 	str.w	r0, [r8]
 8025ff4:	e758      	b.n	8025ea8 <conn_mngr_pkt_transmited_received_cbk+0x1c4>
 8025ff6:	4620      	mov	r0, r4
 8025ff8:	f7f0 f92c 	bl	8016254 <llcp_update_chnl_map_per_connection>
 8025ffc:	e754      	b.n	8025ea8 <conn_mngr_pkt_transmited_received_cbk+0x1c4>
 8025ffe:	4620      	mov	r0, r4
 8026000:	213d      	movs	r1, #61	@ 0x3d
 8026002:	f7ff fcc7 	bl	8025994 <conn_mngr_disconnect>
 8026006:	e9dd 9600 	ldrd	r9, r6, [sp]
 802600a:	e718      	b.n	8025e3e <conn_mngr_pkt_transmited_received_cbk+0x15a>

0802600c <conn_mngr_error_cbk>:
 802600c:	b570      	push	{r4, r5, r6, lr}
 802600e:	4604      	mov	r4, r0
 8026010:	f8b0 00de 	ldrh.w	r0, [r0, #222]	@ 0xde
 8026014:	f649 6264 	movw	r2, #40548	@ 0x9e64
 8026018:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 802601c:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8026020:	42a0      	cmp	r0, r4
 8026022:	d000      	beq.n	8026026 <conn_mngr_error_cbk+0x1a>
 8026024:	bd70      	pop	{r4, r5, r6, pc}
 8026026:	f891 002c 	ldrb.w	r0, [r1, #44]	@ 0x2c
 802602a:	460e      	mov	r6, r1
 802602c:	b370      	cbz	r0, 802608c <conn_mngr_error_cbk+0x80>
 802602e:	0780      	lsls	r0, r0, #30
 8026030:	d52f      	bpl.n	8026092 <conn_mngr_error_cbk+0x86>
 8026032:	f8d4 00bc 	ldr.w	r0, [r4, #188]	@ 0xbc
 8026036:	f7f9 fbcd 	bl	801f7d4 <state_mngr_get_state_type>
 802603a:	2805      	cmp	r0, #5
 802603c:	d129      	bne.n	8026092 <conn_mngr_error_cbk+0x86>
 802603e:	f104 0508 	add.w	r5, r4, #8
 8026042:	4628      	mov	r0, r5
 8026044:	4631      	mov	r1, r6
 8026046:	f7fb f9aa 	bl	802139e <ble_time_set>
 802604a:	4620      	mov	r0, r4
 802604c:	f7fe fd50 	bl	8024af0 <conn_mngr_sprvsn_timer_set>
 8026050:	f8d4 00bc 	ldr.w	r0, [r4, #188]	@ 0xbc
 8026054:	2106      	movs	r1, #6
 8026056:	f7f9 fb6b 	bl	801f730 <state_mngr_update_state>
 802605a:	2800      	cmp	r0, #0
 802605c:	bf18      	it	ne
 802605e:	bd70      	popne	{r4, r5, r6, pc}
 8026060:	f894 0125 	ldrb.w	r0, [r4, #293]	@ 0x125
 8026064:	2801      	cmp	r0, #1
 8026066:	d114      	bne.n	8026092 <conn_mngr_error_cbk+0x86>
 8026068:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 802606c:	4629      	mov	r1, r5
 802606e:	f7fb f996 	bl	802139e <ble_time_set>
 8026072:	2000      	movs	r0, #0
 8026074:	f884 0020 	strb.w	r0, [r4, #32]
 8026078:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 802607c:	f8d4 00c0 	ldr.w	r0, [r4, #192]	@ 0xc0
 8026080:	f8a4 10dc 	strh.w	r1, [r4, #220]	@ 0xdc
 8026084:	210c      	movs	r1, #12
 8026086:	f7ec fdde 	bl	8012c46 <evnt_schdlr_conn_params_updtd>
 802608a:	e002      	b.n	8026092 <conn_mngr_error_cbk+0x86>
 802608c:	4620      	mov	r0, r4
 802608e:	f7fe fd2f 	bl	8024af0 <conn_mngr_sprvsn_timer_set>
 8026092:	f894 0138 	ldrb.w	r0, [r4, #312]	@ 0x138
 8026096:	b110      	cbz	r0, 802609e <conn_mngr_error_cbk+0x92>
 8026098:	4620      	mov	r0, r4
 802609a:	f000 f806 	bl	80260aa <conn_mngr_send_inst_cntrl_hci_evnt>
 802609e:	f8d4 00c0 	ldr.w	r0, [r4, #192]	@ 0xc0
 80260a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80260a6:	f7ec bdfd 	b.w	8012ca4 <evnt_schdlr_evnt_updtd>

080260aa <conn_mngr_send_inst_cntrl_hci_evnt>:
 80260aa:	b570      	push	{r4, r5, r6, lr}
 80260ac:	b082      	sub	sp, #8
 80260ae:	4604      	mov	r4, r0
 80260b0:	f890 0138 	ldrb.w	r0, [r0, #312]	@ 0x138
 80260b4:	2801      	cmp	r0, #1
 80260b6:	d019      	beq.n	80260ec <conn_mngr_send_inst_cntrl_hci_evnt+0x42>
 80260b8:	2804      	cmp	r0, #4
 80260ba:	d025      	beq.n	8026108 <conn_mngr_send_inst_cntrl_hci_evnt+0x5e>
 80260bc:	2803      	cmp	r0, #3
 80260be:	d147      	bne.n	8026150 <conn_mngr_send_inst_cntrl_hci_evnt+0xa6>
 80260c0:	f646 5038 	movw	r0, #27960	@ 0x6d38
 80260c4:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80260c8:	6800      	ldr	r0, [r0, #0]
 80260ca:	6b46      	ldr	r6, [r0, #52]	@ 0x34
 80260cc:	2e00      	cmp	r6, #0
 80260ce:	d03f      	beq.n	8026150 <conn_mngr_send_inst_cntrl_hci_evnt+0xa6>
 80260d0:	f894 212c 	ldrb.w	r2, [r4, #300]	@ 0x12c
 80260d4:	f894 312d 	ldrb.w	r3, [r4, #301]	@ 0x12d
 80260d8:	f8b4 10de 	ldrh.w	r1, [r4, #222]	@ 0xde
 80260dc:	2a04      	cmp	r2, #4
 80260de:	bf08      	it	eq
 80260e0:	2203      	moveq	r2, #3
 80260e2:	2b04      	cmp	r3, #4
 80260e4:	bf08      	it	eq
 80260e6:	2303      	moveq	r3, #3
 80260e8:	2000      	movs	r0, #0
 80260ea:	e030      	b.n	802614e <conn_mngr_send_inst_cntrl_hci_evnt+0xa4>
 80260ec:	f646 5038 	movw	r0, #27960	@ 0x6d38
 80260f0:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80260f4:	6800      	ldr	r0, [r0, #0]
 80260f6:	6a86      	ldr	r6, [r0, #40]	@ 0x28
 80260f8:	b356      	cbz	r6, 8026150 <conn_mngr_send_inst_cntrl_hci_evnt+0xa6>
 80260fa:	f8b4 10de 	ldrh.w	r1, [r4, #222]	@ 0xde
 80260fe:	8ae2      	ldrh	r2, [r4, #22]
 8026100:	8b23      	ldrh	r3, [r4, #24]
 8026102:	8b65      	ldrh	r5, [r4, #26]
 8026104:	2000      	movs	r0, #0
 8026106:	e021      	b.n	802614c <conn_mngr_send_inst_cntrl_hci_evnt+0xa2>
 8026108:	f646 5638 	movw	r6, #27960	@ 0x6d38
 802610c:	f2c2 0600 	movt	r6, #8192	@ 0x2000
 8026110:	6830      	ldr	r0, [r6, #0]
 8026112:	6b45      	ldr	r5, [r0, #52]	@ 0x34
 8026114:	b175      	cbz	r5, 8026134 <conn_mngr_send_inst_cntrl_hci_evnt+0x8a>
 8026116:	f894 212c 	ldrb.w	r2, [r4, #300]	@ 0x12c
 802611a:	f894 312d 	ldrb.w	r3, [r4, #301]	@ 0x12d
 802611e:	f8b4 10de 	ldrh.w	r1, [r4, #222]	@ 0xde
 8026122:	2a04      	cmp	r2, #4
 8026124:	bf08      	it	eq
 8026126:	2203      	moveq	r2, #3
 8026128:	2000      	movs	r0, #0
 802612a:	2b04      	cmp	r3, #4
 802612c:	bf08      	it	eq
 802612e:	2303      	moveq	r3, #3
 8026130:	47a8      	blx	r5
 8026132:	6830      	ldr	r0, [r6, #0]
 8026134:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 8026136:	b15e      	cbz	r6, 8026150 <conn_mngr_send_inst_cntrl_hci_evnt+0xa6>
 8026138:	f8b4 00de 	ldrh.w	r0, [r4, #222]	@ 0xde
 802613c:	f8b4 10ac 	ldrh.w	r1, [r4, #172]	@ 0xac
 8026140:	f8b4 20ae 	ldrh.w	r2, [r4, #174]	@ 0xae
 8026144:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	@ 0xa8
 8026148:	f8b4 50aa 	ldrh.w	r5, [r4, #170]	@ 0xaa
 802614c:	9500      	str	r5, [sp, #0]
 802614e:	47b0      	blx	r6
 8026150:	2000      	movs	r0, #0
 8026152:	f884 0138 	strb.w	r0, [r4, #312]	@ 0x138
 8026156:	b002      	add	sp, #8
 8026158:	bd70      	pop	{r4, r5, r6, pc}

0802615a <db_reset>:
 802615a:	b5b0      	push	{r4, r5, r7, lr}
 802615c:	f649 7022 	movw	r0, #40738	@ 0x9f22
 8026160:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8026164:	2101      	movs	r1, #1
 8026166:	7001      	strb	r1, [r0, #0]
 8026168:	f649 7024 	movw	r0, #40740	@ 0x9f24
 802616c:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8026170:	7001      	strb	r1, [r0, #0]
 8026172:	f649 701e 	movw	r0, #40734	@ 0x9f1e
 8026176:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 802617a:	211b      	movs	r1, #27
 802617c:	8001      	strh	r1, [r0, #0]
 802617e:	f649 7020 	movw	r0, #40736	@ 0x9f20
 8026182:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8026186:	f44f 71a4 	mov.w	r1, #328	@ 0x148
 802618a:	8001      	strh	r1, [r0, #0]
 802618c:	200a      	movs	r0, #10
 802618e:	2100      	movs	r1, #0
 8026190:	2201      	movs	r2, #1
 8026192:	2500      	movs	r5, #0
 8026194:	f7fc f89e 	bl	80222d4 <ll_tx_pwr_if_get_tx_pwr_table_offset>
 8026198:	f247 21ec 	movw	r1, #29420	@ 0x72ec
 802619c:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 80261a0:	6809      	ldr	r1, [r1, #0]
 80261a2:	f641 5498 	movw	r4, #7576	@ 0x1d98
 80261a6:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 80261aa:	f649 7125 	movw	r1, #40741	@ 0x9f25
 80261ae:	78c0      	ldrb	r0, [r0, #3]
 80261b0:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 80261b4:	7008      	strb	r0, [r1, #0]
 80261b6:	f649 7026 	movw	r0, #40742	@ 0x9f26
 80261ba:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80261be:	8005      	strh	r5, [r0, #0]
 80261c0:	f649 7028 	movw	r0, #40744	@ 0x9f28
 80261c4:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80261c8:	8005      	strh	r5, [r0, #0]
 80261ca:	f649 702a 	movw	r0, #40746	@ 0x9f2a
 80261ce:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80261d2:	7005      	strb	r5, [r0, #0]
 80261d4:	f240 4066 	movw	r0, #1126	@ 0x466
 80261d8:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80261dc:	2107      	movs	r1, #7
 80261de:	7001      	strb	r1, [r0, #0]
 80261e0:	f240 4067 	movw	r0, #1127	@ 0x467
 80261e4:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80261e8:	7001      	strb	r1, [r0, #0]
 80261ea:	f240 4068 	movw	r0, #1128	@ 0x468
 80261ee:	f6c0 0403 	movt	r4, #2051	@ 0x803
 80261f2:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80261f6:	4621      	mov	r1, r4
 80261f8:	2205      	movs	r2, #5
 80261fa:	f7fe f9a5 	bl	8024548 <ble_memcpy>
 80261fe:	f240 406d 	movw	r0, #1133	@ 0x46d
 8026202:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8026206:	4621      	mov	r1, r4
 8026208:	2205      	movs	r2, #5
 802620a:	f7fe f99d 	bl	8024548 <ble_memcpy>
 802620e:	f649 702b 	movw	r0, #40747	@ 0x9f2b
 8026212:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8026216:	2100      	movs	r1, #0
 8026218:	2206      	movs	r2, #6
 802621a:	f7fe f9e5 	bl	80245e8 <ble_memset>
 802621e:	f649 7031 	movw	r0, #40753	@ 0x9f31
 8026222:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8026226:	7005      	strb	r5, [r0, #0]
 8026228:	bdb0      	pop	{r4, r5, r7, pc}

0802622a <db_get_src_address>:
 802622a:	b570      	push	{r4, r5, r6, lr}
 802622c:	460c      	mov	r4, r1
 802622e:	4605      	mov	r5, r0
 8026230:	2900      	cmp	r1, #0
 8026232:	4608      	mov	r0, r1
 8026234:	f04f 0100 	mov.w	r1, #0
 8026238:	bf18      	it	ne
 802623a:	2001      	movne	r0, #1
 802623c:	2600      	movs	r6, #0
 802623e:	f7f9 faf0 	bl	801f822 <bsp_assert>
 8026242:	2d02      	cmp	r5, #2
 8026244:	bf38      	it	cc
 8026246:	2601      	movcc	r6, #1
 8026248:	4630      	mov	r0, r6
 802624a:	2100      	movs	r1, #0
 802624c:	f7f9 fae9 	bl	801f822 <bsp_assert>
 8026250:	2d01      	cmp	r5, #1
 8026252:	f04f 0012 	mov.w	r0, #18
 8026256:	d810      	bhi.n	802627a <db_get_src_address+0x50>
 8026258:	b17c      	cbz	r4, 802627a <db_get_src_address+0x50>
 802625a:	2d01      	cmp	r5, #1
 802625c:	d10e      	bne.n	802627c <db_get_src_address+0x52>
 802625e:	f649 752b 	movw	r5, #40747	@ 0x9f2b
 8026262:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 8026266:	f641 519d 	movw	r1, #7581	@ 0x1d9d
 802626a:	f6c0 0103 	movt	r1, #2051	@ 0x803
 802626e:	4628      	mov	r0, r5
 8026270:	2206      	movs	r2, #6
 8026272:	f7fe f9f1 	bl	8024658 <ble_memcmp>
 8026276:	b928      	cbnz	r0, 8026284 <db_get_src_address+0x5a>
 8026278:	2012      	movs	r0, #18
 802627a:	bd70      	pop	{r4, r5, r6, pc}
 802627c:	f240 4572 	movw	r5, #1138	@ 0x472
 8026280:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 8026284:	4620      	mov	r0, r4
 8026286:	4629      	mov	r1, r5
 8026288:	2206      	movs	r2, #6
 802628a:	f7fe f95d 	bl	8024548 <ble_memcpy>
 802628e:	2000      	movs	r0, #0
 8026290:	bd70      	pop	{r4, r5, r6, pc}

08026292 <db_get_local_chnl_classification>:
 8026292:	b510      	push	{r4, lr}
 8026294:	2101      	movs	r1, #1
 8026296:	4604      	mov	r4, r0
 8026298:	2800      	cmp	r0, #0
 802629a:	bf18      	it	ne
 802629c:	2001      	movne	r0, #1
 802629e:	f7f9 fac0 	bl	801f822 <bsp_assert>
 80262a2:	f240 4168 	movw	r1, #1128	@ 0x468
 80262a6:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 80262aa:	4620      	mov	r0, r4
 80262ac:	2205      	movs	r2, #5
 80262ae:	f7fe f94b 	bl	8024548 <ble_memcpy>
 80262b2:	2000      	movs	r0, #0
 80262b4:	bd10      	pop	{r4, pc}

080262b6 <db_get_advertising_channel_tx_power>:
 80262b6:	b510      	push	{r4, lr}
 80262b8:	2100      	movs	r1, #0
 80262ba:	4604      	mov	r4, r0
 80262bc:	2800      	cmp	r0, #0
 80262be:	bf18      	it	ne
 80262c0:	2001      	movne	r0, #1
 80262c2:	f7f9 faae 	bl	801f822 <bsp_assert>
 80262c6:	b17c      	cbz	r4, 80262e8 <db_get_advertising_channel_tx_power+0x32>
 80262c8:	f649 7025 	movw	r0, #40741	@ 0x9f25
 80262cc:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80262d0:	f990 0000 	ldrsb.w	r0, [r0]
 80262d4:	b2c1      	uxtb	r1, r0
 80262d6:	2980      	cmp	r1, #128	@ 0x80
 80262d8:	bf08      	it	eq
 80262da:	2181      	moveq	r1, #129	@ 0x81
 80262dc:	2814      	cmp	r0, #20
 80262de:	bfc8      	it	gt
 80262e0:	2114      	movgt	r1, #20
 80262e2:	2000      	movs	r0, #0
 80262e4:	7021      	strb	r1, [r4, #0]
 80262e6:	bd10      	pop	{r4, pc}
 80262e8:	2012      	movs	r0, #18
 80262ea:	bd10      	pop	{r4, pc}

080262ec <db_get_tx_power_value>:
 80262ec:	4601      	mov	r1, r0
 80262ee:	f649 7025 	movw	r0, #40741	@ 0x9f25
 80262f2:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80262f6:	7802      	ldrb	r2, [r0, #0]
 80262f8:	2000      	movs	r0, #0
 80262fa:	700a      	strb	r2, [r1, #0]
 80262fc:	4770      	bx	lr

080262fe <db_set_tx_power_value>:
 80262fe:	f649 7225 	movw	r2, #40741	@ 0x9f25
 8026302:	4601      	mov	r1, r0
 8026304:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8026308:	2000      	movs	r0, #0
 802630a:	7011      	strb	r1, [r2, #0]
 802630c:	4770      	bx	lr

0802630e <db_calc_rssi_compensated_value>:
 802630e:	f990 1000 	ldrsb.w	r1, [r0]
 8026312:	297f      	cmp	r1, #127	@ 0x7f
 8026314:	d016      	beq.n	8026344 <db_calc_rssi_compensated_value+0x36>
 8026316:	f649 7228 	movw	r2, #40744	@ 0x9f28
 802631a:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 802631e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8026322:	f246 6367 	movw	r3, #26215	@ 0x6667
 8026326:	fb02 f203 	mul.w	r2, r2, r3
 802632a:	1493      	asrs	r3, r2, #18
 802632c:	eb03 72d2 	add.w	r2, r3, r2, lsr #31
 8026330:	4411      	add	r1, r2
 8026332:	f111 0f7f 	cmn.w	r1, #127	@ 0x7f
 8026336:	bfd8      	it	le
 8026338:	f06f 017e 	mvnle.w	r1, #126	@ 0x7e
 802633c:	2914      	cmp	r1, #20
 802633e:	bfa8      	it	ge
 8026340:	2114      	movge	r1, #20
 8026342:	7001      	strb	r1, [r0, #0]
 8026344:	2000      	movs	r0, #0
 8026346:	4770      	bx	lr

08026348 <db_get_radiative_tx_pwr>:
 8026348:	f649 7226 	movw	r2, #40742	@ 0x9f26
 802634c:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8026350:	f9b2 2000 	ldrsh.w	r2, [r2]
 8026354:	f246 6367 	movw	r3, #26215	@ 0x6667
 8026358:	fb02 f203 	mul.w	r2, r2, r3
 802635c:	1493      	asrs	r3, r2, #18
 802635e:	eb03 72d2 	add.w	r2, r3, r2, lsr #31
 8026362:	4410      	add	r0, r2
 8026364:	f110 0f7f 	cmn.w	r0, #127	@ 0x7f
 8026368:	4602      	mov	r2, r0
 802636a:	bfb8      	it	lt
 802636c:	f06f 027e 	mvnlt.w	r2, #126	@ 0x7e
 8026370:	287f      	cmp	r0, #127	@ 0x7f
 8026372:	f04f 0000 	mov.w	r0, #0
 8026376:	bfc8      	it	gt
 8026378:	227f      	movgt	r2, #127	@ 0x7f
 802637a:	700a      	strb	r2, [r1, #0]
 802637c:	4770      	bx	lr

0802637e <db_get_phy_conf_tx_pwr>:
 802637e:	f649 7226 	movw	r2, #40742	@ 0x9f26
 8026382:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8026386:	f9b2 2000 	ldrsh.w	r2, [r2]
 802638a:	f246 6367 	movw	r3, #26215	@ 0x6667
 802638e:	fb02 f203 	mul.w	r2, r2, r3
 8026392:	1493      	asrs	r3, r2, #18
 8026394:	eb03 72d2 	add.w	r2, r3, r2, lsr #31
 8026398:	1a80      	subs	r0, r0, r2
 802639a:	f110 0f7f 	cmn.w	r0, #127	@ 0x7f
 802639e:	4602      	mov	r2, r0
 80263a0:	bfb8      	it	lt
 80263a2:	f06f 027e 	mvnlt.w	r2, #126	@ 0x7e
 80263a6:	287f      	cmp	r0, #127	@ 0x7f
 80263a8:	f04f 0000 	mov.w	r0, #0
 80263ac:	bfc8      	it	gt
 80263ae:	227f      	movgt	r2, #127	@ 0x7f
 80263b0:	700a      	strb	r2, [r1, #0]
 80263b2:	4770      	bx	lr

080263b4 <db_get_slp_clk_accuracy>:
 80263b4:	b510      	push	{r4, lr}
 80263b6:	2101      	movs	r1, #1
 80263b8:	4604      	mov	r4, r0
 80263ba:	2800      	cmp	r0, #0
 80263bc:	bf18      	it	ne
 80263be:	2001      	movne	r0, #1
 80263c0:	f7f9 fa2f 	bl	801f822 <bsp_assert>
 80263c4:	f649 7031 	movw	r0, #40753	@ 0x9f31
 80263c8:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80263cc:	7801      	ldrb	r1, [r0, #0]
 80263ce:	2000      	movs	r0, #0
 80263d0:	7021      	strb	r1, [r4, #0]
 80263d2:	bd10      	pop	{r4, pc}

080263d4 <db_get_local_vrsn_info>:
 80263d4:	b510      	push	{r4, lr}
 80263d6:	2101      	movs	r1, #1
 80263d8:	4604      	mov	r4, r0
 80263da:	2800      	cmp	r0, #0
 80263dc:	bf18      	it	ne
 80263de:	2001      	movne	r0, #1
 80263e0:	f7f9 fa1f 	bl	801f822 <bsp_assert>
 80263e4:	f44f 40c0 	mov.w	r0, #24576	@ 0x6000
 80263e8:	f640 510d 	movw	r1, #3341	@ 0xd0d
 80263ec:	8020      	strh	r0, [r4, #0]
 80263ee:	80e1      	strh	r1, [r4, #6]
 80263f0:	80a0      	strh	r0, [r4, #4]
 80263f2:	2130      	movs	r1, #48	@ 0x30
 80263f4:	2000      	movs	r0, #0
 80263f6:	8061      	strh	r1, [r4, #2]
 80263f8:	bd10      	pop	{r4, pc}

080263fa <db_get_le_feature_info>:
 80263fa:	b510      	push	{r4, lr}
 80263fc:	2101      	movs	r1, #1
 80263fe:	4604      	mov	r4, r0
 8026400:	2800      	cmp	r0, #0
 8026402:	bf18      	it	ne
 8026404:	2001      	movne	r0, #1
 8026406:	f7f9 fa0c 	bl	801f822 <bsp_assert>
 802640a:	f7fb ffb5 	bl	8022378 <ll_tx_pwr_if_is_le_power_class_1_supported>
 802640e:	f240 4178 	movw	r1, #1144	@ 0x478
 8026412:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8026416:	b128      	cbz	r0, 8026424 <db_get_le_feature_info+0x2a>
 8026418:	2801      	cmp	r0, #1
 802641a:	d107      	bne.n	802642c <db_get_le_feature_info+0x32>
 802641c:	7848      	ldrb	r0, [r1, #1]
 802641e:	f060 007f 	orn	r0, r0, #127	@ 0x7f
 8026422:	e002      	b.n	802642a <db_get_le_feature_info+0x30>
 8026424:	7848      	ldrb	r0, [r1, #1]
 8026426:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 802642a:	7048      	strb	r0, [r1, #1]
 802642c:	f240 4178 	movw	r1, #1144	@ 0x478
 8026430:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8026434:	4620      	mov	r0, r4
 8026436:	2208      	movs	r2, #8
 8026438:	f7fe f886 	bl	8024548 <ble_memcpy>
 802643c:	2000      	movs	r0, #0
 802643e:	bd10      	pop	{r4, pc}

08026440 <db_check_encryption>:
 8026440:	f240 4078 	movw	r0, #1144	@ 0x478
 8026444:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8026448:	7800      	ldrb	r0, [r0, #0]
 802644a:	2800      	cmp	r0, #0
 802644c:	bf18      	it	ne
 802644e:	2001      	movne	r0, #1
 8026450:	4770      	bx	lr

08026452 <db_set_bd_address>:
 8026452:	b510      	push	{r4, lr}
 8026454:	2100      	movs	r1, #0
 8026456:	4604      	mov	r4, r0
 8026458:	2800      	cmp	r0, #0
 802645a:	bf18      	it	ne
 802645c:	2001      	movne	r0, #1
 802645e:	f7f9 f9e0 	bl	801f822 <bsp_assert>
 8026462:	b14c      	cbz	r4, 8026478 <db_set_bd_address+0x26>
 8026464:	f240 4072 	movw	r0, #1138	@ 0x472
 8026468:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 802646c:	4621      	mov	r1, r4
 802646e:	2206      	movs	r2, #6
 8026470:	f7fe f86a 	bl	8024548 <ble_memcpy>
 8026474:	2000      	movs	r0, #0
 8026476:	bd10      	pop	{r4, pc}
 8026478:	2012      	movs	r0, #18
 802647a:	bd10      	pop	{r4, pc}

0802647c <db_set_random_address>:
 802647c:	b510      	push	{r4, lr}
 802647e:	2100      	movs	r1, #0
 8026480:	4604      	mov	r4, r0
 8026482:	2800      	cmp	r0, #0
 8026484:	bf18      	it	ne
 8026486:	2001      	movne	r0, #1
 8026488:	f7f9 f9cb 	bl	801f822 <bsp_assert>
 802648c:	b14c      	cbz	r4, 80264a2 <db_set_random_address+0x26>
 802648e:	f649 702b 	movw	r0, #40747	@ 0x9f2b
 8026492:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8026496:	4621      	mov	r1, r4
 8026498:	2206      	movs	r2, #6
 802649a:	f7fe f855 	bl	8024548 <ble_memcpy>
 802649e:	2000      	movs	r0, #0
 80264a0:	bd10      	pop	{r4, pc}
 80264a2:	2012      	movs	r0, #18
 80264a4:	bd10      	pop	{r4, pc}

080264a6 <db_le_set_default_phy_cmd>:
 80264a6:	f649 7c2a 	movw	ip, #40746	@ 0x9f2a
 80264aa:	f2c2 0c00 	movt	ip, #8192	@ 0x2000
 80264ae:	07c3      	lsls	r3, r0, #31
 80264b0:	f88c 0000 	strb.w	r0, [ip]
 80264b4:	bf02      	ittt	eq
 80264b6:	f240 4366 	movweq	r3, #1126	@ 0x466
 80264ba:	f2c2 0300 	movteq	r3, #8192	@ 0x2000
 80264be:	7019      	strbeq	r1, [r3, #0]
 80264c0:	0780      	lsls	r0, r0, #30
 80264c2:	bf5e      	ittt	pl
 80264c4:	f240 4067 	movwpl	r0, #1127	@ 0x467
 80264c8:	f2c2 0000 	movtpl	r0, #8192	@ 0x2000
 80264cc:	7002      	strbpl	r2, [r0, #0]
 80264ce:	2000      	movs	r0, #0
 80264d0:	4770      	bx	lr

080264d2 <db_le_get_default_phy_cmd>:
 80264d2:	f649 732a 	movw	r3, #40746	@ 0x9f2a
 80264d6:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80264da:	781b      	ldrb	r3, [r3, #0]
 80264dc:	7003      	strb	r3, [r0, #0]
 80264de:	f240 4066 	movw	r0, #1126	@ 0x466
 80264e2:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80264e6:	7800      	ldrb	r0, [r0, #0]
 80264e8:	7008      	strb	r0, [r1, #0]
 80264ea:	f240 4067 	movw	r0, #1127	@ 0x467
 80264ee:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80264f2:	7801      	ldrb	r1, [r0, #0]
 80264f4:	2000      	movs	r0, #0
 80264f6:	7011      	strb	r1, [r2, #0]
 80264f8:	4770      	bx	lr

080264fa <hw_ll_timer_init>:
 80264fa:	b510      	push	{r4, lr}
 80264fc:	2101      	movs	r1, #1
 80264fe:	4604      	mov	r4, r0
 8026500:	2800      	cmp	r0, #0
 8026502:	bf18      	it	ne
 8026504:	2001      	movne	r0, #1
 8026506:	f7f9 f98c 	bl	801f822 <bsp_assert>
 802650a:	4620      	mov	r0, r4
 802650c:	f7fb ff8f 	bl	802242e <llhwc_slptmr_init>
 8026510:	2000      	movs	r0, #0
 8026512:	bd10      	pop	{r4, pc}

08026514 <hw_ll_timer_start>:
 8026514:	b580      	push	{r7, lr}
 8026516:	b082      	sub	sp, #8
 8026518:	9000      	str	r0, [sp, #0]
 802651a:	2000      	movs	r0, #0
 802651c:	f8ad 0004 	strh.w	r0, [sp, #4]
 8026520:	f88d 1006 	strb.w	r1, [sp, #6]
 8026524:	4669      	mov	r1, sp
 8026526:	2001      	movs	r0, #1
 8026528:	f7fc fc1a 	bl	8022d60 <llhwc_slptmr_set>
 802652c:	2000      	movs	r0, #0
 802652e:	b002      	add	sp, #8
 8026530:	bd80      	pop	{r7, pc}

08026532 <hw_ll_timer_stop>:
 8026532:	b580      	push	{r7, lr}
 8026534:	2001      	movs	r0, #1
 8026536:	f7fc fe37 	bl	80231a8 <llhwc_slptmr_stop>
 802653a:	2000      	movs	r0, #0
 802653c:	bd80      	pop	{r7, pc}

0802653e <get_current_time>:
 802653e:	b580      	push	{r7, lr}
 8026540:	b082      	sub	sp, #8
 8026542:	a801      	add	r0, sp, #4
 8026544:	f7fb ff81 	bl	802244a <llhwc_slptmr_get>
 8026548:	9801      	ldr	r0, [sp, #4]
 802654a:	b002      	add	sp, #8
 802654c:	bd80      	pop	{r7, pc}

0802654e <hci_disconnection_complete_event>:
 802654e:	b580      	push	{r7, lr}
 8026550:	b0c2      	sub	sp, #264	@ 0x108
 8026552:	f000 fdb4 	bl	80270be <OUTLINED_FUNCTION_50>
 8026556:	2005      	movs	r0, #5
 8026558:	f000 fddb 	bl	8027112 <OUTLINED_FUNCTION_62>
 802655c:	f10d 0006 	add.w	r0, sp, #6
 8026560:	f000 f802 	bl	8026568 <hci_event>
 8026564:	b042      	add	sp, #264	@ 0x108
 8026566:	bd80      	pop	{r7, pc}

08026568 <hci_event>:
 8026568:	3101      	adds	r1, #1
 802656a:	2204      	movs	r2, #4
 802656c:	2300      	movs	r3, #0
 802656e:	7002      	strb	r2, [r0, #0]
 8026570:	b289      	uxth	r1, r1
 8026572:	2200      	movs	r2, #0
 8026574:	f7e2 bd12 	b.w	8008f9c <BLECB_Indication>

08026578 <hci_encryption_change_event>:
 8026578:	b580      	push	{r7, lr}
 802657a:	b0c2      	sub	sp, #264	@ 0x108
 802657c:	f000 fd9f 	bl	80270be <OUTLINED_FUNCTION_50>
 8026580:	2008      	movs	r0, #8
 8026582:	f000 fdc6 	bl	8027112 <OUTLINED_FUNCTION_62>
 8026586:	f10d 0006 	add.w	r0, sp, #6
 802658a:	f7ff ffed 	bl	8026568 <hci_event>
 802658e:	b042      	add	sp, #264	@ 0x108
 8026590:	bd80      	pop	{r7, pc}

08026592 <hci_read_remote_version_information_complete_event>:
 8026592:	b580      	push	{r7, lr}
 8026594:	b0c2      	sub	sp, #264	@ 0x108
 8026596:	f88d 0009 	strb.w	r0, [sp, #9]
 802659a:	2008      	movs	r0, #8
 802659c:	f88d 100a 	strb.w	r1, [sp, #10]
 80265a0:	f88d 200c 	strb.w	r2, [sp, #12]
 80265a4:	f88d 300d 	strb.w	r3, [sp, #13]
 80265a8:	f88d 0008 	strb.w	r0, [sp, #8]
 80265ac:	200c      	movs	r0, #12
 80265ae:	f88d 0007 	strb.w	r0, [sp, #7]
 80265b2:	9844      	ldr	r0, [sp, #272]	@ 0x110
 80265b4:	f88d 000f 	strb.w	r0, [sp, #15]
 80265b8:	0a00      	lsrs	r0, r0, #8
 80265ba:	f88d 0010 	strb.w	r0, [sp, #16]
 80265be:	0a18      	lsrs	r0, r3, #8
 80265c0:	f88d 000e 	strb.w	r0, [sp, #14]
 80265c4:	0a08      	lsrs	r0, r1, #8
 80265c6:	210b      	movs	r1, #11
 80265c8:	f88d 000b 	strb.w	r0, [sp, #11]
 80265cc:	f10d 0006 	add.w	r0, sp, #6
 80265d0:	f7ff ffca 	bl	8026568 <hci_event>
 80265d4:	b042      	add	sp, #264	@ 0x108
 80265d6:	bd80      	pop	{r7, pc}

080265d8 <hci_hardware_error_event>:
 80265d8:	b580      	push	{r7, lr}
 80265da:	b0c2      	sub	sp, #264	@ 0x108
 80265dc:	2101      	movs	r1, #1
 80265de:	f88d 0009 	strb.w	r0, [sp, #9]
 80265e2:	f10d 0006 	add.w	r0, sp, #6
 80265e6:	f88d 1008 	strb.w	r1, [sp, #8]
 80265ea:	2110      	movs	r1, #16
 80265ec:	f88d 1007 	strb.w	r1, [sp, #7]
 80265f0:	2104      	movs	r1, #4
 80265f2:	f7ff ffb9 	bl	8026568 <hci_event>
 80265f6:	b042      	add	sp, #264	@ 0x108
 80265f8:	bd80      	pop	{r7, pc}

080265fa <hci_encryption_key_refresh_complete_event>:
 80265fa:	b580      	push	{r7, lr}
 80265fc:	b0c2      	sub	sp, #264	@ 0x108
 80265fe:	f88d 0009 	strb.w	r0, [sp, #9]
 8026602:	2003      	movs	r0, #3
 8026604:	f88d 100a 	strb.w	r1, [sp, #10]
 8026608:	f88d 0008 	strb.w	r0, [sp, #8]
 802660c:	2030      	movs	r0, #48	@ 0x30
 802660e:	f88d 0007 	strb.w	r0, [sp, #7]
 8026612:	0a08      	lsrs	r0, r1, #8
 8026614:	2106      	movs	r1, #6
 8026616:	f88d 000b 	strb.w	r0, [sp, #11]
 802661a:	f10d 0006 	add.w	r0, sp, #6
 802661e:	f7ff ffa3 	bl	8026568 <hci_event>
 8026622:	b042      	add	sp, #264	@ 0x108
 8026624:	bd80      	pop	{r7, pc}

08026626 <hci_le_connection_complete_event>:
 8026626:	b510      	push	{r4, lr}
 8026628:	b0c2      	sub	sp, #264	@ 0x108
 802662a:	f88d 000a 	strb.w	r0, [sp, #10]
 802662e:	0a08      	lsrs	r0, r1, #8
 8026630:	f10d 0406 	add.w	r4, sp, #6
 8026634:	f88d 200d 	strb.w	r2, [sp, #13]
 8026638:	f88d 100b 	strb.w	r1, [sp, #11]
 802663c:	9944      	ldr	r1, [sp, #272]	@ 0x110
 802663e:	f000 fd59 	bl	80270f4 <OUTLINED_FUNCTION_55>
 8026642:	f7fd ff81 	bl	8024548 <ble_memcpy>
 8026646:	9848      	ldr	r0, [sp, #288]	@ 0x120
 8026648:	2116      	movs	r1, #22
 802664a:	f88d 001b 	strb.w	r0, [sp, #27]
 802664e:	2001      	movs	r0, #1
 8026650:	f88d 0009 	strb.w	r0, [sp, #9]
 8026654:	2013      	movs	r0, #19
 8026656:	f000 fcf1 	bl	802703c <OUTLINED_FUNCTION_31>
 802665a:	9847      	ldr	r0, [sp, #284]	@ 0x11c
 802665c:	f88d 0019 	strb.w	r0, [sp, #25]
 8026660:	0a00      	lsrs	r0, r0, #8
 8026662:	f88d 001a 	strb.w	r0, [sp, #26]
 8026666:	9846      	ldr	r0, [sp, #280]	@ 0x118
 8026668:	f88d 0017 	strb.w	r0, [sp, #23]
 802666c:	0a00      	lsrs	r0, r0, #8
 802666e:	f88d 0018 	strb.w	r0, [sp, #24]
 8026672:	9845      	ldr	r0, [sp, #276]	@ 0x114
 8026674:	f88d 0015 	strb.w	r0, [sp, #21]
 8026678:	0a00      	lsrs	r0, r0, #8
 802667a:	f88d 0016 	strb.w	r0, [sp, #22]
 802667e:	4620      	mov	r0, r4
 8026680:	f7ff ff72 	bl	8026568 <hci_event>
 8026684:	b042      	add	sp, #264	@ 0x108
 8026686:	bd10      	pop	{r4, pc}

08026688 <hci_le_advertising_report_event>:
 8026688:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802668c:	b0c2      	sub	sp, #264	@ 0x108
 802668e:	4604      	mov	r4, r0
 8026690:	f88d 000a 	strb.w	r0, [sp, #10]
 8026694:	f10d 0006 	add.w	r0, sp, #6
 8026698:	f8df 9088 	ldr.w	r9, [pc, #136]	@ 8026724 <__arm_cp.7_0>
 802669c:	f101 0708 	add.w	r7, r1, #8
 80266a0:	f04f 0a00 	mov.w	sl, #0
 80266a4:	f100 0804 	add.w	r8, r0, #4
 80266a8:	b344      	cbz	r4, 80266fc <hci_le_advertising_report_event+0x74>
 80266aa:	f817 0c08 	ldrb.w	r0, [r7, #-8]
 80266ae:	f817 1c07 	ldrb.w	r1, [r7, #-7]
 80266b2:	eb08 050a 	add.w	r5, r8, sl
 80266b6:	2206      	movs	r2, #6
 80266b8:	7068      	strb	r0, [r5, #1]
 80266ba:	70a9      	strb	r1, [r5, #2]
 80266bc:	1ce8      	adds	r0, r5, #3
 80266be:	1fb9      	subs	r1, r7, #6
 80266c0:	47c8      	blx	r9
 80266c2:	4639      	mov	r1, r7
 80266c4:	78b8      	ldrb	r0, [r7, #2]
 80266c6:	783a      	ldrb	r2, [r7, #0]
 80266c8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80266cc:	726a      	strb	r2, [r5, #9]
 80266ce:	350a      	adds	r5, #10
 80266d0:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 80266d4:	788b      	ldrb	r3, [r1, #2]
 80266d6:	78c9      	ldrb	r1, [r1, #3]
 80266d8:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 80266dc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80266e0:	4628      	mov	r0, r5
 80266e2:	47c8      	blx	r9
 80266e4:	783e      	ldrb	r6, [r7, #0]
 80266e6:	1d79      	adds	r1, r7, #5
 80266e8:	2201      	movs	r2, #1
 80266ea:	19a8      	adds	r0, r5, r6
 80266ec:	47c8      	blx	r9
 80266ee:	eb0a 0006 	add.w	r0, sl, r6
 80266f2:	370e      	adds	r7, #14
 80266f4:	3c01      	subs	r4, #1
 80266f6:	f100 0a0a 	add.w	sl, r0, #10
 80266fa:	e7d5      	b.n	80266a8 <hci_le_advertising_report_event+0x20>
 80266fc:	2002      	movs	r0, #2
 80266fe:	f88d 0009 	strb.w	r0, [sp, #9]
 8026702:	203e      	movs	r0, #62	@ 0x3e
 8026704:	f88d 0007 	strb.w	r0, [sp, #7]
 8026708:	f10a 0002 	add.w	r0, sl, #2
 802670c:	f88d 0008 	strb.w	r0, [sp, #8]
 8026710:	b2c0      	uxtb	r0, r0
 8026712:	1cc1      	adds	r1, r0, #3
 8026714:	f10d 0006 	add.w	r0, sp, #6
 8026718:	f7ff ff26 	bl	8026568 <hci_event>
 802671c:	b042      	add	sp, #264	@ 0x108
 802671e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8026722:	bf00      	nop

08026724 <__arm_cp.7_0>:
 8026724:	08024549 	.word	0x08024549

08026728 <hci_le_connection_update_complete_event>:
 8026728:	b580      	push	{r7, lr}
 802672a:	b0c2      	sub	sp, #264	@ 0x108
 802672c:	f88d 000a 	strb.w	r0, [sp, #10]
 8026730:	2003      	movs	r0, #3
 8026732:	f88d 100b 	strb.w	r1, [sp, #11]
 8026736:	f88d 300f 	strb.w	r3, [sp, #15]
 802673a:	f88d 200d 	strb.w	r2, [sp, #13]
 802673e:	f88d 0009 	strb.w	r0, [sp, #9]
 8026742:	200a      	movs	r0, #10
 8026744:	f000 fc7a 	bl	802703c <OUTLINED_FUNCTION_31>
 8026748:	9844      	ldr	r0, [sp, #272]	@ 0x110
 802674a:	f88d 0011 	strb.w	r0, [sp, #17]
 802674e:	0a00      	lsrs	r0, r0, #8
 8026750:	f88d 0012 	strb.w	r0, [sp, #18]
 8026754:	0a18      	lsrs	r0, r3, #8
 8026756:	f88d 0010 	strb.w	r0, [sp, #16]
 802675a:	0a10      	lsrs	r0, r2, #8
 802675c:	f88d 000e 	strb.w	r0, [sp, #14]
 8026760:	0a08      	lsrs	r0, r1, #8
 8026762:	210d      	movs	r1, #13
 8026764:	f88d 000c 	strb.w	r0, [sp, #12]
 8026768:	f10d 0006 	add.w	r0, sp, #6
 802676c:	f7ff fefc 	bl	8026568 <hci_event>
 8026770:	b042      	add	sp, #264	@ 0x108
 8026772:	bd80      	pop	{r7, pc}

08026774 <hci_le_read_remote_features_complete_event>:
 8026774:	b510      	push	{r4, lr}
 8026776:	b0c2      	sub	sp, #264	@ 0x108
 8026778:	f88d 000a 	strb.w	r0, [sp, #10]
 802677c:	0a08      	lsrs	r0, r1, #8
 802677e:	f10d 0406 	add.w	r4, sp, #6
 8026782:	f88d 100b 	strb.w	r1, [sp, #11]
 8026786:	4611      	mov	r1, r2
 8026788:	2208      	movs	r2, #8
 802678a:	f88d 000c 	strb.w	r0, [sp, #12]
 802678e:	1de0      	adds	r0, r4, #7
 8026790:	f7fd feda 	bl	8024548 <ble_memcpy>
 8026794:	2004      	movs	r0, #4
 8026796:	210f      	movs	r1, #15
 8026798:	f88d 0009 	strb.w	r0, [sp, #9]
 802679c:	200c      	movs	r0, #12
 802679e:	f000 fc86 	bl	80270ae <OUTLINED_FUNCTION_49>
 80267a2:	b042      	add	sp, #264	@ 0x108
 80267a4:	bd10      	pop	{r4, pc}

080267a6 <hci_le_long_term_key_request_event>:
 80267a6:	b5b0      	push	{r4, r5, r7, lr}
 80267a8:	b0c2      	sub	sp, #264	@ 0x108
 80267aa:	f88d 000a 	strb.w	r0, [sp, #10]
 80267ae:	0a00      	lsrs	r0, r0, #8
 80267b0:	f10d 0506 	add.w	r5, sp, #6
 80267b4:	4614      	mov	r4, r2
 80267b6:	2208      	movs	r2, #8
 80267b8:	f88d 000b 	strb.w	r0, [sp, #11]
 80267bc:	1da8      	adds	r0, r5, #6
 80267be:	f7fd fec3 	bl	8024548 <ble_memcpy>
 80267c2:	2005      	movs	r0, #5
 80267c4:	2110      	movs	r1, #16
 80267c6:	f88d 4014 	strb.w	r4, [sp, #20]
 80267ca:	f88d 0009 	strb.w	r0, [sp, #9]
 80267ce:	200d      	movs	r0, #13
 80267d0:	f000 fc34 	bl	802703c <OUTLINED_FUNCTION_31>
 80267d4:	0a20      	lsrs	r0, r4, #8
 80267d6:	f88d 0015 	strb.w	r0, [sp, #21]
 80267da:	4628      	mov	r0, r5
 80267dc:	f7ff fec4 	bl	8026568 <hci_event>
 80267e0:	b042      	add	sp, #264	@ 0x108
 80267e2:	bdb0      	pop	{r4, r5, r7, pc}

080267e4 <hci_le_data_length_change_event>:
 80267e4:	b510      	push	{r4, lr}
 80267e6:	b0c2      	sub	sp, #264	@ 0x108
 80267e8:	2407      	movs	r4, #7
 80267ea:	f88d 100c 	strb.w	r1, [sp, #12]
 80267ee:	0a09      	lsrs	r1, r1, #8
 80267f0:	f88d 000a 	strb.w	r0, [sp, #10]
 80267f4:	0a00      	lsrs	r0, r0, #8
 80267f6:	f88d 3010 	strb.w	r3, [sp, #16]
 80267fa:	0a1b      	lsrs	r3, r3, #8
 80267fc:	f88d 200e 	strb.w	r2, [sp, #14]
 8026800:	0a12      	lsrs	r2, r2, #8
 8026802:	f88d 4009 	strb.w	r4, [sp, #9]
 8026806:	240b      	movs	r4, #11
 8026808:	f000 fc69 	bl	80270de <OUTLINED_FUNCTION_53>
 802680c:	f10d 0006 	add.w	r0, sp, #6
 8026810:	210e      	movs	r1, #14
 8026812:	f88d 3011 	strb.w	r3, [sp, #17]
 8026816:	f88d 200f 	strb.w	r2, [sp, #15]
 802681a:	f88d 4008 	strb.w	r4, [sp, #8]
 802681e:	243e      	movs	r4, #62	@ 0x3e
 8026820:	f88d 4007 	strb.w	r4, [sp, #7]
 8026824:	9c44      	ldr	r4, [sp, #272]	@ 0x110
 8026826:	f88d 4012 	strb.w	r4, [sp, #18]
 802682a:	0a24      	lsrs	r4, r4, #8
 802682c:	f88d 4013 	strb.w	r4, [sp, #19]
 8026830:	f7ff fe9a 	bl	8026568 <hci_event>
 8026834:	b042      	add	sp, #264	@ 0x108
 8026836:	bd10      	pop	{r4, pc}

08026838 <hci_le_read_local_p256_public_key_complete_event>:
 8026838:	b510      	push	{r4, lr}
 802683a:	b0c2      	sub	sp, #264	@ 0x108
 802683c:	f10d 0406 	add.w	r4, sp, #6
 8026840:	f88d 000a 	strb.w	r0, [sp, #10]
 8026844:	2240      	movs	r2, #64	@ 0x40
 8026846:	1d60      	adds	r0, r4, #5
 8026848:	f7fd fe7e 	bl	8024548 <ble_memcpy>
 802684c:	2008      	movs	r0, #8
 802684e:	2145      	movs	r1, #69	@ 0x45
 8026850:	f88d 0009 	strb.w	r0, [sp, #9]
 8026854:	2042      	movs	r0, #66	@ 0x42
 8026856:	f000 fc2a 	bl	80270ae <OUTLINED_FUNCTION_49>
 802685a:	b042      	add	sp, #264	@ 0x108
 802685c:	bd10      	pop	{r4, pc}
	...

08026860 <hci_le_enhanced_connection_complete_event>:
 8026860:	b5b0      	push	{r4, r5, r7, lr}
 8026862:	b0c2      	sub	sp, #264	@ 0x108
 8026864:	f88d 000a 	strb.w	r0, [sp, #10]
 8026868:	0a08      	lsrs	r0, r1, #8
 802686a:	f10d 0406 	add.w	r4, sp, #6
 802686e:	4d1a      	ldr	r5, [pc, #104]	@ (80268d8 <__arm_cp.13_0>)
 8026870:	f88d 200d 	strb.w	r2, [sp, #13]
 8026874:	f88d 100b 	strb.w	r1, [sp, #11]
 8026878:	9946      	ldr	r1, [sp, #280]	@ 0x118
 802687a:	f000 fc3b 	bl	80270f4 <OUTLINED_FUNCTION_55>
 802687e:	47a8      	blx	r5
 8026880:	f104 000f 	add.w	r0, r4, #15
 8026884:	9947      	ldr	r1, [sp, #284]	@ 0x11c
 8026886:	2206      	movs	r2, #6
 8026888:	47a8      	blx	r5
 802688a:	f104 0015 	add.w	r0, r4, #21
 802688e:	9948      	ldr	r1, [sp, #288]	@ 0x120
 8026890:	2206      	movs	r2, #6
 8026892:	47a8      	blx	r5
 8026894:	984c      	ldr	r0, [sp, #304]	@ 0x130
 8026896:	2122      	movs	r1, #34	@ 0x22
 8026898:	f88d 0027 	strb.w	r0, [sp, #39]	@ 0x27
 802689c:	200a      	movs	r0, #10
 802689e:	f88d 0009 	strb.w	r0, [sp, #9]
 80268a2:	201f      	movs	r0, #31
 80268a4:	f000 fbca 	bl	802703c <OUTLINED_FUNCTION_31>
 80268a8:	984b      	ldr	r0, [sp, #300]	@ 0x12c
 80268aa:	f88d 0025 	strb.w	r0, [sp, #37]	@ 0x25
 80268ae:	0a00      	lsrs	r0, r0, #8
 80268b0:	f88d 0026 	strb.w	r0, [sp, #38]	@ 0x26
 80268b4:	984a      	ldr	r0, [sp, #296]	@ 0x128
 80268b6:	f88d 0023 	strb.w	r0, [sp, #35]	@ 0x23
 80268ba:	0a00      	lsrs	r0, r0, #8
 80268bc:	f88d 0024 	strb.w	r0, [sp, #36]	@ 0x24
 80268c0:	9849      	ldr	r0, [sp, #292]	@ 0x124
 80268c2:	f88d 0021 	strb.w	r0, [sp, #33]	@ 0x21
 80268c6:	0a00      	lsrs	r0, r0, #8
 80268c8:	f88d 0022 	strb.w	r0, [sp, #34]	@ 0x22
 80268cc:	4620      	mov	r0, r4
 80268ce:	f7ff fe4b 	bl	8026568 <hci_event>
 80268d2:	b042      	add	sp, #264	@ 0x108
 80268d4:	bdb0      	pop	{r4, r5, r7, pc}
 80268d6:	bf00      	nop

080268d8 <__arm_cp.13_0>:
 80268d8:	08024549 	.word	0x08024549

080268dc <hci_le_directed_advertising_report_event>:
 80268dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80268e0:	b0c1      	sub	sp, #260	@ 0x104
 80268e2:	460c      	mov	r4, r1
 80268e4:	ea4f 1900 	mov.w	r9, r0, lsl #4
 80268e8:	2600      	movs	r6, #0
 80268ea:	f10d 0802 	add.w	r8, sp, #2
 80268ee:	f88d 0006 	strb.w	r0, [sp, #6]
 80268f2:	45b1      	cmp	r9, r6
 80268f4:	d018      	beq.n	8026928 <hci_le_directed_advertising_report_event+0x4c>
 80268f6:	19a5      	adds	r5, r4, r6
 80268f8:	eb08 0706 	add.w	r7, r8, r6
 80268fc:	5da0      	ldrb	r0, [r4, r6]
 80268fe:	2206      	movs	r2, #6
 8026900:	7178      	strb	r0, [r7, #5]
 8026902:	7868      	ldrb	r0, [r5, #1]
 8026904:	1ca9      	adds	r1, r5, #2
 8026906:	71b8      	strb	r0, [r7, #6]
 8026908:	1df8      	adds	r0, r7, #7
 802690a:	f7fd fe1d 	bl	8024548 <ble_memcpy>
 802690e:	7a28      	ldrb	r0, [r5, #8]
 8026910:	f105 0109 	add.w	r1, r5, #9
 8026914:	2206      	movs	r2, #6
 8026916:	7378      	strb	r0, [r7, #13]
 8026918:	f107 000e 	add.w	r0, r7, #14
 802691c:	f7fd fe14 	bl	8024548 <ble_memcpy>
 8026920:	7be8      	ldrb	r0, [r5, #15]
 8026922:	3610      	adds	r6, #16
 8026924:	7538      	strb	r0, [r7, #20]
 8026926:	e7e4      	b.n	80268f2 <hci_le_directed_advertising_report_event+0x16>
 8026928:	200b      	movs	r0, #11
 802692a:	f88d 0005 	strb.w	r0, [sp, #5]
 802692e:	203e      	movs	r0, #62	@ 0x3e
 8026930:	f88d 0003 	strb.w	r0, [sp, #3]
 8026934:	f109 0002 	add.w	r0, r9, #2
 8026938:	f88d 0004 	strb.w	r0, [sp, #4]
 802693c:	f109 0005 	add.w	r0, r9, #5
 8026940:	b2c1      	uxtb	r1, r0
 8026942:	f10d 0002 	add.w	r0, sp, #2
 8026946:	f7ff fe0f 	bl	8026568 <hci_event>
 802694a:	b041      	add	sp, #260	@ 0x104
 802694c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08026950 <hci_le_phy_update_complete_event>:
 8026950:	b580      	push	{r7, lr}
 8026952:	b0c2      	sub	sp, #264	@ 0x108
 8026954:	f88d 000a 	strb.w	r0, [sp, #10]
 8026958:	200c      	movs	r0, #12
 802695a:	f88d 100b 	strb.w	r1, [sp, #11]
 802695e:	f88d 300e 	strb.w	r3, [sp, #14]
 8026962:	f88d 200d 	strb.w	r2, [sp, #13]
 8026966:	f88d 0009 	strb.w	r0, [sp, #9]
 802696a:	2006      	movs	r0, #6
 802696c:	f000 fb66 	bl	802703c <OUTLINED_FUNCTION_31>
 8026970:	0a08      	lsrs	r0, r1, #8
 8026972:	2109      	movs	r1, #9
 8026974:	f88d 000c 	strb.w	r0, [sp, #12]
 8026978:	f10d 0006 	add.w	r0, sp, #6
 802697c:	f7ff fdf4 	bl	8026568 <hci_event>
 8026980:	b042      	add	sp, #264	@ 0x108
 8026982:	bd80      	pop	{r7, pc}

08026984 <hci_le_channel_selection_algorithm_event>:
 8026984:	b580      	push	{r7, lr}
 8026986:	b0c2      	sub	sp, #264	@ 0x108
 8026988:	f88d 100c 	strb.w	r1, [sp, #12]
 802698c:	2114      	movs	r1, #20
 802698e:	f88d 000a 	strb.w	r0, [sp, #10]
 8026992:	0a00      	lsrs	r0, r0, #8
 8026994:	f88d 1009 	strb.w	r1, [sp, #9]
 8026998:	2104      	movs	r1, #4
 802699a:	f88d 000b 	strb.w	r0, [sp, #11]
 802699e:	f10d 0006 	add.w	r0, sp, #6
 80269a2:	f88d 1008 	strb.w	r1, [sp, #8]
 80269a6:	213e      	movs	r1, #62	@ 0x3e
 80269a8:	f000 fafe 	bl	8026fa8 <OUTLINED_FUNCTION_14>
 80269ac:	b042      	add	sp, #264	@ 0x108
 80269ae:	bd80      	pop	{r7, pc}

080269b0 <aci_hal_end_of_radio_activity_event>:
 80269b0:	b510      	push	{r4, lr}
 80269b2:	b0c2      	sub	sp, #264	@ 0x108
 80269b4:	f88d 000b 	strb.w	r0, [sp, #11]
 80269b8:	2000      	movs	r0, #0
 80269ba:	9c44      	ldr	r4, [sp, #272]	@ 0x110
 80269bc:	f88d 100c 	strb.w	r1, [sp, #12]
 80269c0:	210d      	movs	r1, #13
 80269c2:	f88d 3011 	strb.w	r3, [sp, #17]
 80269c6:	f88d 200d 	strb.w	r2, [sp, #13]
 80269ca:	f88d 000a 	strb.w	r0, [sp, #10]
 80269ce:	2004      	movs	r0, #4
 80269d0:	f88d 4012 	strb.w	r4, [sp, #18]
 80269d4:	f88d 0009 	strb.w	r0, [sp, #9]
 80269d8:	200a      	movs	r0, #10
 80269da:	f000 fb48 	bl	802706e <OUTLINED_FUNCTION_37>
 80269de:	0e10      	lsrs	r0, r2, #24
 80269e0:	f88d 0010 	strb.w	r0, [sp, #16]
 80269e4:	0c10      	lsrs	r0, r2, #16
 80269e6:	f88d 000f 	strb.w	r0, [sp, #15]
 80269ea:	0a10      	lsrs	r0, r2, #8
 80269ec:	f88d 000e 	strb.w	r0, [sp, #14]
 80269f0:	f10d 0006 	add.w	r0, sp, #6
 80269f4:	f7ff fdb8 	bl	8026568 <hci_event>
 80269f8:	b042      	add	sp, #264	@ 0x108
 80269fa:	bd10      	pop	{r4, pc}

080269fc <aci_hal_fw_error_event>:
 80269fc:	b5b0      	push	{r4, r5, r7, lr}
 80269fe:	b0c2      	sub	sp, #264	@ 0x108
 8026a00:	460c      	mov	r4, r1
 8026a02:	f10d 0506 	add.w	r5, sp, #6
 8026a06:	f88d 100c 	strb.w	r1, [sp, #12]
 8026a0a:	f88d 000b 	strb.w	r0, [sp, #11]
 8026a0e:	4611      	mov	r1, r2
 8026a10:	1de8      	adds	r0, r5, #7
 8026a12:	4622      	mov	r2, r4
 8026a14:	f7fd fd98 	bl	8024548 <ble_memcpy>
 8026a18:	2000      	movs	r0, #0
 8026a1a:	f88d 000a 	strb.w	r0, [sp, #10]
 8026a1e:	2006      	movs	r0, #6
 8026a20:	f000 fb62 	bl	80270e8 <OUTLINED_FUNCTION_54>
 8026a24:	1d20      	adds	r0, r4, #4
 8026a26:	f000 fa89 	bl	8026f3c <OUTLINED_FUNCTION_1>
 8026a2a:	b042      	add	sp, #264	@ 0x108
 8026a2c:	bdb0      	pop	{r4, r5, r7, pc}

08026a2e <aci_gap_limited_discoverable_event>:
 8026a2e:	b580      	push	{r7, lr}
 8026a30:	b0c2      	sub	sp, #264	@ 0x108
 8026a32:	f000 fb75 	bl	8027120 <OUTLINED_FUNCTION_63>
 8026a36:	2000      	movs	r0, #0
 8026a38:	f88d 0009 	strb.w	r0, [sp, #9]
 8026a3c:	2002      	movs	r0, #2
 8026a3e:	f000 fb16 	bl	802706e <OUTLINED_FUNCTION_37>
 8026a42:	f10d 0006 	add.w	r0, sp, #6
 8026a46:	f7ff fd8f 	bl	8026568 <hci_event>
 8026a4a:	b042      	add	sp, #264	@ 0x108
 8026a4c:	bd80      	pop	{r7, pc}

08026a4e <aci_gap_pairing_complete_event>:
 8026a4e:	b580      	push	{r7, lr}
 8026a50:	b0c2      	sub	sp, #264	@ 0x108
 8026a52:	f88d 100d 	strb.w	r1, [sp, #13]
 8026a56:	2104      	movs	r1, #4
 8026a58:	f000 faec 	bl	8027034 <OUTLINED_FUNCTION_30>
 8026a5c:	f88d 200e 	strb.w	r2, [sp, #14]
 8026a60:	f88d 100a 	strb.w	r1, [sp, #10]
 8026a64:	2101      	movs	r1, #1
 8026a66:	f88d 000c 	strb.w	r0, [sp, #12]
 8026a6a:	f10d 0006 	add.w	r0, sp, #6
 8026a6e:	f88d 1009 	strb.w	r1, [sp, #9]
 8026a72:	2106      	movs	r1, #6
 8026a74:	f000 fb2d 	bl	80270d2 <OUTLINED_FUNCTION_51>
 8026a78:	2109      	movs	r1, #9
 8026a7a:	f7ff fd75 	bl	8026568 <hci_event>
 8026a7e:	b042      	add	sp, #264	@ 0x108
 8026a80:	bd80      	pop	{r7, pc}

08026a82 <aci_gap_pass_key_req_event>:
 8026a82:	b580      	push	{r7, lr}
 8026a84:	b0c2      	sub	sp, #264	@ 0x108
 8026a86:	2104      	movs	r1, #4
 8026a88:	f000 fad4 	bl	8027034 <OUTLINED_FUNCTION_30>
 8026a8c:	2202      	movs	r2, #2
 8026a8e:	f000 fae6 	bl	802705e <OUTLINED_FUNCTION_34>
 8026a92:	f10d 0006 	add.w	r0, sp, #6
 8026a96:	f88d 2009 	strb.w	r2, [sp, #9]
 8026a9a:	f000 fa85 	bl	8026fa8 <OUTLINED_FUNCTION_14>
 8026a9e:	b042      	add	sp, #264	@ 0x108
 8026aa0:	bd80      	pop	{r7, pc}

08026aa2 <aci_gap_authorization_req_event>:
 8026aa2:	b580      	push	{r7, lr}
 8026aa4:	b0c2      	sub	sp, #264	@ 0x108
 8026aa6:	2104      	movs	r1, #4
 8026aa8:	f000 fac4 	bl	8027034 <OUTLINED_FUNCTION_30>
 8026aac:	2203      	movs	r2, #3
 8026aae:	f000 fad6 	bl	802705e <OUTLINED_FUNCTION_34>
 8026ab2:	f10d 0006 	add.w	r0, sp, #6
 8026ab6:	f88d 2009 	strb.w	r2, [sp, #9]
 8026aba:	f000 fa75 	bl	8026fa8 <OUTLINED_FUNCTION_14>
 8026abe:	b042      	add	sp, #264	@ 0x108
 8026ac0:	bd80      	pop	{r7, pc}

08026ac2 <aci_gap_peripheral_security_initiated_event>:
 8026ac2:	b580      	push	{r7, lr}
 8026ac4:	b0c2      	sub	sp, #264	@ 0x108
 8026ac6:	f000 fb2b 	bl	8027120 <OUTLINED_FUNCTION_63>
 8026aca:	f88d 0009 	strb.w	r0, [sp, #9]
 8026ace:	2002      	movs	r0, #2
 8026ad0:	f000 facd 	bl	802706e <OUTLINED_FUNCTION_37>
 8026ad4:	f10d 0006 	add.w	r0, sp, #6
 8026ad8:	f7ff fd46 	bl	8026568 <hci_event>
 8026adc:	b042      	add	sp, #264	@ 0x108
 8026ade:	bd80      	pop	{r7, pc}

08026ae0 <aci_gap_bond_lost_event>:
 8026ae0:	b580      	push	{r7, lr}
 8026ae2:	b0c2      	sub	sp, #264	@ 0x108
 8026ae4:	f000 fb1c 	bl	8027120 <OUTLINED_FUNCTION_63>
 8026ae8:	2002      	movs	r0, #2
 8026aea:	f000 fac0 	bl	802706e <OUTLINED_FUNCTION_37>
 8026aee:	2005      	movs	r0, #5
 8026af0:	f88d 0009 	strb.w	r0, [sp, #9]
 8026af4:	f10d 0006 	add.w	r0, sp, #6
 8026af8:	f7ff fd36 	bl	8026568 <hci_event>
 8026afc:	b042      	add	sp, #264	@ 0x108
 8026afe:	bd80      	pop	{r7, pc}

08026b00 <aci_gap_proc_complete_event>:
 8026b00:	b5b0      	push	{r4, r5, r7, lr}
 8026b02:	b0c2      	sub	sp, #264	@ 0x108
 8026b04:	f10d 0506 	add.w	r5, sp, #6
 8026b08:	f88d 100c 	strb.w	r1, [sp, #12]
 8026b0c:	f88d 000b 	strb.w	r0, [sp, #11]
 8026b10:	4619      	mov	r1, r3
 8026b12:	4614      	mov	r4, r2
 8026b14:	f88d 200d 	strb.w	r2, [sp, #13]
 8026b18:	f105 0008 	add.w	r0, r5, #8
 8026b1c:	f7fd fd14 	bl	8024548 <ble_memcpy>
 8026b20:	2004      	movs	r0, #4
 8026b22:	f88d 000a 	strb.w	r0, [sp, #10]
 8026b26:	2007      	movs	r0, #7
 8026b28:	f88d 0009 	strb.w	r0, [sp, #9]
 8026b2c:	20ff      	movs	r0, #255	@ 0xff
 8026b2e:	f88d 0007 	strb.w	r0, [sp, #7]
 8026b32:	1d60      	adds	r0, r4, #5
 8026b34:	f000 fa02 	bl	8026f3c <OUTLINED_FUNCTION_1>
 8026b38:	b042      	add	sp, #264	@ 0x108
 8026b3a:	bdb0      	pop	{r4, r5, r7, pc}

08026b3c <aci_gap_addr_not_resolved_event>:
 8026b3c:	b580      	push	{r7, lr}
 8026b3e:	b0c2      	sub	sp, #264	@ 0x108
 8026b40:	2104      	movs	r1, #4
 8026b42:	f000 fa77 	bl	8027034 <OUTLINED_FUNCTION_30>
 8026b46:	2208      	movs	r2, #8
 8026b48:	f000 fa89 	bl	802705e <OUTLINED_FUNCTION_34>
 8026b4c:	f10d 0006 	add.w	r0, sp, #6
 8026b50:	f88d 2009 	strb.w	r2, [sp, #9]
 8026b54:	f000 fa28 	bl	8026fa8 <OUTLINED_FUNCTION_14>
 8026b58:	b042      	add	sp, #264	@ 0x108
 8026b5a:	bd80      	pop	{r7, pc}

08026b5c <aci_gap_numeric_comparison_value_event>:
 8026b5c:	b580      	push	{r7, lr}
 8026b5e:	b0c2      	sub	sp, #264	@ 0x108
 8026b60:	2204      	movs	r2, #4
 8026b62:	f000 fa67 	bl	8027034 <OUTLINED_FUNCTION_30>
 8026b66:	f88d 100d 	strb.w	r1, [sp, #13]
 8026b6a:	f88d 200a 	strb.w	r2, [sp, #10]
 8026b6e:	2209      	movs	r2, #9
 8026b70:	f88d 000c 	strb.w	r0, [sp, #12]
 8026b74:	f10d 0006 	add.w	r0, sp, #6
 8026b78:	f88d 2009 	strb.w	r2, [sp, #9]
 8026b7c:	2208      	movs	r2, #8
 8026b7e:	f88d 2008 	strb.w	r2, [sp, #8]
 8026b82:	22ff      	movs	r2, #255	@ 0xff
 8026b84:	f88d 2007 	strb.w	r2, [sp, #7]
 8026b88:	0e0a      	lsrs	r2, r1, #24
 8026b8a:	f88d 2010 	strb.w	r2, [sp, #16]
 8026b8e:	0c0a      	lsrs	r2, r1, #16
 8026b90:	0a09      	lsrs	r1, r1, #8
 8026b92:	f88d 100e 	strb.w	r1, [sp, #14]
 8026b96:	210b      	movs	r1, #11
 8026b98:	f88d 200f 	strb.w	r2, [sp, #15]
 8026b9c:	f7ff fce4 	bl	8026568 <hci_event>
 8026ba0:	b042      	add	sp, #264	@ 0x108
 8026ba2:	bd80      	pop	{r7, pc}

08026ba4 <aci_gap_keypress_notification_event>:
 8026ba4:	b580      	push	{r7, lr}
 8026ba6:	b0c2      	sub	sp, #264	@ 0x108
 8026ba8:	f88d 100d 	strb.w	r1, [sp, #13]
 8026bac:	2104      	movs	r1, #4
 8026bae:	f88d 000b 	strb.w	r0, [sp, #11]
 8026bb2:	0a00      	lsrs	r0, r0, #8
 8026bb4:	f88d 100a 	strb.w	r1, [sp, #10]
 8026bb8:	210a      	movs	r1, #10
 8026bba:	f88d 000c 	strb.w	r0, [sp, #12]
 8026bbe:	f10d 0006 	add.w	r0, sp, #6
 8026bc2:	f000 fa41 	bl	8027048 <OUTLINED_FUNCTION_32>
 8026bc6:	b042      	add	sp, #264	@ 0x108
 8026bc8:	bd80      	pop	{r7, pc}

08026bca <aci_l2cap_connection_update_resp_event>:
 8026bca:	b580      	push	{r7, lr}
 8026bcc:	b0c2      	sub	sp, #264	@ 0x108
 8026bce:	2208      	movs	r2, #8
 8026bd0:	f000 fa27 	bl	8027022 <OUTLINED_FUNCTION_29>
 8026bd4:	2200      	movs	r2, #0
 8026bd6:	f000 fa50 	bl	802707a <OUTLINED_FUNCTION_38>
 8026bda:	f10d 0006 	add.w	r0, sp, #6
 8026bde:	f000 f9e8 	bl	8026fb2 <OUTLINED_FUNCTION_19>
 8026be2:	b042      	add	sp, #264	@ 0x108
 8026be4:	bd80      	pop	{r7, pc}

08026be6 <aci_l2cap_proc_timeout_event>:
 8026be6:	b5b0      	push	{r4, r5, r7, lr}
 8026be8:	b0c2      	sub	sp, #264	@ 0x108
 8026bea:	f000 fa23 	bl	8027034 <OUTLINED_FUNCTION_30>
 8026bee:	460c      	mov	r4, r1
 8026bf0:	f10d 0506 	add.w	r5, sp, #6
 8026bf4:	f88d 100d 	strb.w	r1, [sp, #13]
 8026bf8:	4611      	mov	r1, r2
 8026bfa:	f88d 000c 	strb.w	r0, [sp, #12]
 8026bfe:	f105 0008 	add.w	r0, r5, #8
 8026c02:	4622      	mov	r2, r4
 8026c04:	f7fd fca0 	bl	8024548 <ble_memcpy>
 8026c08:	2008      	movs	r0, #8
 8026c0a:	f88d 000a 	strb.w	r0, [sp, #10]
 8026c0e:	f000 fa79 	bl	8027104 <OUTLINED_FUNCTION_60>
 8026c12:	1d60      	adds	r0, r4, #5
 8026c14:	f000 f992 	bl	8026f3c <OUTLINED_FUNCTION_1>
 8026c18:	b042      	add	sp, #264	@ 0x108
 8026c1a:	bdb0      	pop	{r4, r5, r7, pc}

08026c1c <aci_l2cap_connection_update_req_event>:
 8026c1c:	b580      	push	{r7, lr}
 8026c1e:	b0c2      	sub	sp, #264	@ 0x108
 8026c20:	f88d 100d 	strb.w	r1, [sp, #13]
 8026c24:	2108      	movs	r1, #8
 8026c26:	f000 fa38 	bl	802709a <OUTLINED_FUNCTION_48>
 8026c2a:	2102      	movs	r1, #2
 8026c2c:	f88d 000c 	strb.w	r0, [sp, #12]
 8026c30:	f10d 0006 	add.w	r0, sp, #6
 8026c34:	f88d 1009 	strb.w	r1, [sp, #9]
 8026c38:	210f      	movs	r1, #15
 8026c3a:	f000 fa4a 	bl	80270d2 <OUTLINED_FUNCTION_51>
 8026c3e:	9946      	ldr	r1, [sp, #280]	@ 0x118
 8026c40:	f88d 1016 	strb.w	r1, [sp, #22]
 8026c44:	0a09      	lsrs	r1, r1, #8
 8026c46:	f88d 1017 	strb.w	r1, [sp, #23]
 8026c4a:	9945      	ldr	r1, [sp, #276]	@ 0x114
 8026c4c:	f88d 1014 	strb.w	r1, [sp, #20]
 8026c50:	0a09      	lsrs	r1, r1, #8
 8026c52:	f88d 1015 	strb.w	r1, [sp, #21]
 8026c56:	9944      	ldr	r1, [sp, #272]	@ 0x110
 8026c58:	f88d 1012 	strb.w	r1, [sp, #18]
 8026c5c:	0a09      	lsrs	r1, r1, #8
 8026c5e:	f88d 1013 	strb.w	r1, [sp, #19]
 8026c62:	0a19      	lsrs	r1, r3, #8
 8026c64:	f88d 1011 	strb.w	r1, [sp, #17]
 8026c68:	0a11      	lsrs	r1, r2, #8
 8026c6a:	f88d 100f 	strb.w	r1, [sp, #15]
 8026c6e:	2112      	movs	r1, #18
 8026c70:	f7ff fc7a 	bl	8026568 <hci_event>
 8026c74:	b042      	add	sp, #264	@ 0x108
 8026c76:	bd80      	pop	{r7, pc}

08026c78 <aci_l2cap_command_reject_event>:
 8026c78:	b5b0      	push	{r4, r5, r7, lr}
 8026c7a:	b0c2      	sub	sp, #264	@ 0x108
 8026c7c:	f88d 100d 	strb.w	r1, [sp, #13]
 8026c80:	0a11      	lsrs	r1, r2, #8
 8026c82:	f000 f9d7 	bl	8027034 <OUTLINED_FUNCTION_30>
 8026c86:	f10d 0506 	add.w	r5, sp, #6
 8026c8a:	f88d 200e 	strb.w	r2, [sp, #14]
 8026c8e:	461a      	mov	r2, r3
 8026c90:	461c      	mov	r4, r3
 8026c92:	f88d 3010 	strb.w	r3, [sp, #16]
 8026c96:	f88d 100f 	strb.w	r1, [sp, #15]
 8026c9a:	f88d 000c 	strb.w	r0, [sp, #12]
 8026c9e:	f105 000b 	add.w	r0, r5, #11
 8026ca2:	9946      	ldr	r1, [sp, #280]	@ 0x118
 8026ca4:	f7fd fc50 	bl	8024548 <ble_memcpy>
 8026ca8:	2008      	movs	r0, #8
 8026caa:	f88d 000a 	strb.w	r0, [sp, #10]
 8026cae:	200a      	movs	r0, #10
 8026cb0:	f88d 0009 	strb.w	r0, [sp, #9]
 8026cb4:	20ff      	movs	r0, #255	@ 0xff
 8026cb6:	f88d 0007 	strb.w	r0, [sp, #7]
 8026cba:	f104 0008 	add.w	r0, r4, #8
 8026cbe:	f000 f93d 	bl	8026f3c <OUTLINED_FUNCTION_1>
 8026cc2:	b042      	add	sp, #264	@ 0x108
 8026cc4:	bdb0      	pop	{r4, r5, r7, pc}

08026cc6 <aci_gatt_attribute_modified_event>:
 8026cc6:	b5b0      	push	{r4, r5, r7, lr}
 8026cc8:	b0c2      	sub	sp, #264	@ 0x108
 8026cca:	f000 f982 	bl	8026fd2 <OUTLINED_FUNCTION_23>
 8026cce:	f10d 0506 	add.w	r5, sp, #6
 8026cd2:	f000 f940 	bl	8026f56 <OUTLINED_FUNCTION_7>
 8026cd6:	f000 f9dc 	bl	8027092 <OUTLINED_FUNCTION_47>
 8026cda:	f000 fa13 	bl	8027104 <OUTLINED_FUNCTION_60>
 8026cde:	f104 000a 	add.w	r0, r4, #10
 8026ce2:	f000 f92b 	bl	8026f3c <OUTLINED_FUNCTION_1>
 8026ce6:	b042      	add	sp, #264	@ 0x108
 8026ce8:	bdb0      	pop	{r4, r5, r7, pc}

08026cea <aci_gatt_proc_timeout_event>:
 8026cea:	b580      	push	{r7, lr}
 8026cec:	b0c2      	sub	sp, #264	@ 0x108
 8026cee:	f000 f97b 	bl	8026fe8 <OUTLINED_FUNCTION_24>
 8026cf2:	2102      	movs	r1, #2
 8026cf4:	f88d 000c 	strb.w	r0, [sp, #12]
 8026cf8:	f10d 0006 	add.w	r0, sp, #6
 8026cfc:	f000 f93c 	bl	8026f78 <OUTLINED_FUNCTION_9>
 8026d00:	b042      	add	sp, #264	@ 0x108
 8026d02:	bd80      	pop	{r7, pc}

08026d04 <aci_att_exchange_mtu_resp_event>:
 8026d04:	b580      	push	{r7, lr}
 8026d06:	b0c2      	sub	sp, #264	@ 0x108
 8026d08:	220c      	movs	r2, #12
 8026d0a:	f000 f98a 	bl	8027022 <OUTLINED_FUNCTION_29>
 8026d0e:	2203      	movs	r2, #3
 8026d10:	f000 f9b3 	bl	802707a <OUTLINED_FUNCTION_38>
 8026d14:	f10d 0006 	add.w	r0, sp, #6
 8026d18:	f000 f94b 	bl	8026fb2 <OUTLINED_FUNCTION_19>
 8026d1c:	b042      	add	sp, #264	@ 0x108
 8026d1e:	bd80      	pop	{r7, pc}

08026d20 <aci_gatt_indication_event>:
 8026d20:	b5b0      	push	{r4, r5, r7, lr}
 8026d22:	b0c2      	sub	sp, #264	@ 0x108
 8026d24:	2af8      	cmp	r2, #248	@ 0xf8
 8026d26:	4614      	mov	r4, r2
 8026d28:	bf28      	it	cs
 8026d2a:	22f8      	movcs	r2, #248	@ 0xf8
 8026d2c:	f000 f9d7 	bl	80270de <OUTLINED_FUNCTION_53>
 8026d30:	f10d 0506 	add.w	r5, sp, #6
 8026d34:	f000 f92b 	bl	8026f8e <OUTLINED_FUNCTION_12>
 8026d38:	f000 f946 	bl	8026fc8 <OUTLINED_FUNCTION_22>
 8026d3c:	200e      	movs	r0, #14
 8026d3e:	f000 f9a1 	bl	8027084 <OUTLINED_FUNCTION_43>
 8026d42:	bf38      	it	cc
 8026d44:	4601      	movcc	r1, r0
 8026d46:	f000 f900 	bl	8026f4a <OUTLINED_FUNCTION_5>
 8026d4a:	b042      	add	sp, #264	@ 0x108
 8026d4c:	bdb0      	pop	{r4, r5, r7, pc}

08026d4e <aci_gatt_notification_event>:
 8026d4e:	b5b0      	push	{r4, r5, r7, lr}
 8026d50:	b0c2      	sub	sp, #264	@ 0x108
 8026d52:	2af8      	cmp	r2, #248	@ 0xf8
 8026d54:	4614      	mov	r4, r2
 8026d56:	bf28      	it	cs
 8026d58:	22f8      	movcs	r2, #248	@ 0xf8
 8026d5a:	f000 f9c0 	bl	80270de <OUTLINED_FUNCTION_53>
 8026d5e:	f10d 0506 	add.w	r5, sp, #6
 8026d62:	f000 f914 	bl	8026f8e <OUTLINED_FUNCTION_12>
 8026d66:	f000 f92f 	bl	8026fc8 <OUTLINED_FUNCTION_22>
 8026d6a:	200f      	movs	r0, #15
 8026d6c:	f000 f98a 	bl	8027084 <OUTLINED_FUNCTION_43>
 8026d70:	bf38      	it	cc
 8026d72:	4601      	movcc	r1, r0
 8026d74:	f000 f8e9 	bl	8026f4a <OUTLINED_FUNCTION_5>
 8026d78:	b042      	add	sp, #264	@ 0x108
 8026d7a:	bdb0      	pop	{r4, r5, r7, pc}

08026d7c <aci_gatt_proc_complete_event>:
 8026d7c:	b580      	push	{r7, lr}
 8026d7e:	b0c2      	sub	sp, #264	@ 0x108
 8026d80:	f88d 100d 	strb.w	r1, [sp, #13]
 8026d84:	f000 f930 	bl	8026fe8 <OUTLINED_FUNCTION_24>
 8026d88:	2110      	movs	r1, #16
 8026d8a:	f88d 000c 	strb.w	r0, [sp, #12]
 8026d8e:	f10d 0006 	add.w	r0, sp, #6
 8026d92:	f000 f959 	bl	8027048 <OUTLINED_FUNCTION_32>
 8026d96:	b042      	add	sp, #264	@ 0x108
 8026d98:	bd80      	pop	{r7, pc}

08026d9a <aci_gatt_write_permit_req_event>:
 8026d9a:	b5b0      	push	{r4, r5, r7, lr}
 8026d9c:	b0c2      	sub	sp, #264	@ 0x108
 8026d9e:	f000 f92a 	bl	8026ff6 <OUTLINED_FUNCTION_25>
 8026da2:	f10d 0506 	add.w	r5, sp, #6
 8026da6:	4614      	mov	r4, r2
 8026da8:	f88d 200f 	strb.w	r2, [sp, #15]
 8026dac:	f88d 100e 	strb.w	r1, [sp, #14]
 8026db0:	f88d 000c 	strb.w	r0, [sp, #12]
 8026db4:	f105 000a 	add.w	r0, r5, #10
 8026db8:	4619      	mov	r1, r3
 8026dba:	f7fd fbc5 	bl	8024548 <ble_memcpy>
 8026dbe:	f000 f968 	bl	8027092 <OUTLINED_FUNCTION_47>
 8026dc2:	2013      	movs	r0, #19
 8026dc4:	f000 f990 	bl	80270e8 <OUTLINED_FUNCTION_54>
 8026dc8:	1de0      	adds	r0, r4, #7
 8026dca:	f000 f8b7 	bl	8026f3c <OUTLINED_FUNCTION_1>
 8026dce:	b042      	add	sp, #264	@ 0x108
 8026dd0:	bdb0      	pop	{r4, r5, r7, pc}

08026dd2 <aci_gatt_read_permit_req_event>:
 8026dd2:	b580      	push	{r7, lr}
 8026dd4:	b0c2      	sub	sp, #264	@ 0x108
 8026dd6:	230c      	movs	r3, #12
 8026dd8:	f000 f90d 	bl	8026ff6 <OUTLINED_FUNCTION_25>
 8026ddc:	f88d 200f 	strb.w	r2, [sp, #15]
 8026de0:	0a12      	lsrs	r2, r2, #8
 8026de2:	f88d 300a 	strb.w	r3, [sp, #10]
 8026de6:	2314      	movs	r3, #20
 8026de8:	f000 f947 	bl	802707a <OUTLINED_FUNCTION_38>
 8026dec:	f10d 0006 	add.w	r0, sp, #6
 8026df0:	210b      	movs	r1, #11
 8026df2:	f88d 2010 	strb.w	r2, [sp, #16]
 8026df6:	f88d 3009 	strb.w	r3, [sp, #9]
 8026dfa:	2308      	movs	r3, #8
 8026dfc:	f88d 3008 	strb.w	r3, [sp, #8]
 8026e00:	23ff      	movs	r3, #255	@ 0xff
 8026e02:	f88d 3007 	strb.w	r3, [sp, #7]
 8026e06:	f7ff fbaf 	bl	8026568 <hci_event>
 8026e0a:	b042      	add	sp, #264	@ 0x108
 8026e0c:	bd80      	pop	{r7, pc}

08026e0e <aci_gatt_read_multi_permit_req_event>:
 8026e0e:	b5b0      	push	{r4, r5, r7, lr}
 8026e10:	b0c2      	sub	sp, #264	@ 0x108
 8026e12:	f000 f90f 	bl	8027034 <OUTLINED_FUNCTION_30>
 8026e16:	f10d 0306 	add.w	r3, sp, #6
 8026e1a:	f88d 100d 	strb.w	r1, [sp, #13]
 8026e1e:	f88d 000c 	strb.w	r0, [sp, #12]
 8026e22:	2000      	movs	r0, #0
 8026e24:	4281      	cmp	r1, r0
 8026e26:	d00a      	beq.n	8026e3e <aci_gatt_read_multi_permit_req_event+0x30>
 8026e28:	eb03 0440 	add.w	r4, r3, r0, lsl #1
 8026e2c:	f812 5010 	ldrb.w	r5, [r2, r0, lsl #1]
 8026e30:	7225      	strb	r5, [r4, #8]
 8026e32:	eb02 0540 	add.w	r5, r2, r0, lsl #1
 8026e36:	3001      	adds	r0, #1
 8026e38:	786d      	ldrb	r5, [r5, #1]
 8026e3a:	7265      	strb	r5, [r4, #9]
 8026e3c:	e7f2      	b.n	8026e24 <aci_gatt_read_multi_permit_req_event+0x16>
 8026e3e:	f000 f928 	bl	8027092 <OUTLINED_FUNCTION_47>
 8026e42:	2015      	movs	r0, #21
 8026e44:	f000 f950 	bl	80270e8 <OUTLINED_FUNCTION_54>
 8026e48:	2005      	movs	r0, #5
 8026e4a:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 8026e4e:	f88d 0008 	strb.w	r0, [sp, #8]
 8026e52:	b2c0      	uxtb	r0, r0
 8026e54:	1cc1      	adds	r1, r0, #3
 8026e56:	f10d 0006 	add.w	r0, sp, #6
 8026e5a:	f7ff fb85 	bl	8026568 <hci_event>
 8026e5e:	b042      	add	sp, #264	@ 0x108
 8026e60:	bdb0      	pop	{r4, r5, r7, pc}

08026e62 <aci_gatt_tx_pool_available_event>:
 8026e62:	b580      	push	{r7, lr}
 8026e64:	b0c2      	sub	sp, #264	@ 0x108
 8026e66:	220c      	movs	r2, #12
 8026e68:	f000 f8db 	bl	8027022 <OUTLINED_FUNCTION_29>
 8026e6c:	2216      	movs	r2, #22
 8026e6e:	f000 f904 	bl	802707a <OUTLINED_FUNCTION_38>
 8026e72:	f10d 0006 	add.w	r0, sp, #6
 8026e76:	f000 f89c 	bl	8026fb2 <OUTLINED_FUNCTION_19>
 8026e7a:	b042      	add	sp, #264	@ 0x108
 8026e7c:	bd80      	pop	{r7, pc}

08026e7e <aci_gatt_server_confirmation_event>:
 8026e7e:	b580      	push	{r7, lr}
 8026e80:	b0c2      	sub	sp, #264	@ 0x108
 8026e82:	f000 f8b1 	bl	8026fe8 <OUTLINED_FUNCTION_24>
 8026e86:	2117      	movs	r1, #23
 8026e88:	f88d 000c 	strb.w	r0, [sp, #12]
 8026e8c:	f10d 0006 	add.w	r0, sp, #6
 8026e90:	f000 f872 	bl	8026f78 <OUTLINED_FUNCTION_9>
 8026e94:	b042      	add	sp, #264	@ 0x108
 8026e96:	bd80      	pop	{r7, pc}

08026e98 <aci_gatt_prepare_write_permit_req_event>:
 8026e98:	b5b0      	push	{r4, r5, r7, lr}
 8026e9a:	b0c2      	sub	sp, #264	@ 0x108
 8026e9c:	f88d 200f 	strb.w	r2, [sp, #15]
 8026ea0:	0a12      	lsrs	r2, r2, #8
 8026ea2:	f000 f8a8 	bl	8026ff6 <OUTLINED_FUNCTION_25>
 8026ea6:	f10d 0506 	add.w	r5, sp, #6
 8026eaa:	f000 f8ab 	bl	8027004 <OUTLINED_FUNCTION_26>
 8026eae:	f000 f8f0 	bl	8027092 <OUTLINED_FUNCTION_47>
 8026eb2:	2018      	movs	r0, #24
 8026eb4:	f88d 0009 	strb.w	r0, [sp, #9]
 8026eb8:	20ff      	movs	r0, #255	@ 0xff
 8026eba:	f88d 0007 	strb.w	r0, [sp, #7]
 8026ebe:	f104 0009 	add.w	r0, r4, #9
 8026ec2:	f000 f83b 	bl	8026f3c <OUTLINED_FUNCTION_1>
 8026ec6:	b042      	add	sp, #264	@ 0x108
 8026ec8:	bdb0      	pop	{r4, r5, r7, pc}

08026eca <aci_gatt_notification_complete_event>:
 8026eca:	b580      	push	{r7, lr}
 8026ecc:	b0c2      	sub	sp, #264	@ 0x108
 8026ece:	f000 f88b 	bl	8026fe8 <OUTLINED_FUNCTION_24>
 8026ed2:	211b      	movs	r1, #27
 8026ed4:	f88d 000c 	strb.w	r0, [sp, #12]
 8026ed8:	f10d 0006 	add.w	r0, sp, #6
 8026edc:	f000 f84c 	bl	8026f78 <OUTLINED_FUNCTION_9>
 8026ee0:	b042      	add	sp, #264	@ 0x108
 8026ee2:	bd80      	pop	{r7, pc}

08026ee4 <aci_gatt_indication_ext_event>:
 8026ee4:	b5b0      	push	{r4, r5, r7, lr}
 8026ee6:	b0c2      	sub	sp, #264	@ 0x108
 8026ee8:	f000 f873 	bl	8026fd2 <OUTLINED_FUNCTION_23>
 8026eec:	f10d 0506 	add.w	r5, sp, #6
 8026ef0:	f000 f831 	bl	8026f56 <OUTLINED_FUNCTION_7>
 8026ef4:	f000 f8cd 	bl	8027092 <OUTLINED_FUNCTION_47>
 8026ef8:	201e      	movs	r0, #30
 8026efa:	f88d 0009 	strb.w	r0, [sp, #9]
 8026efe:	20ff      	movs	r0, #255	@ 0xff
 8026f00:	f88d 0007 	strb.w	r0, [sp, #7]
 8026f04:	f104 000a 	add.w	r0, r4, #10
 8026f08:	f000 f818 	bl	8026f3c <OUTLINED_FUNCTION_1>
 8026f0c:	b042      	add	sp, #264	@ 0x108
 8026f0e:	bdb0      	pop	{r4, r5, r7, pc}

08026f10 <aci_gatt_notification_ext_event>:
 8026f10:	b5b0      	push	{r4, r5, r7, lr}
 8026f12:	b0c2      	sub	sp, #264	@ 0x108
 8026f14:	f000 f85d 	bl	8026fd2 <OUTLINED_FUNCTION_23>
 8026f18:	f10d 0506 	add.w	r5, sp, #6
 8026f1c:	f000 f81b 	bl	8026f56 <OUTLINED_FUNCTION_7>
 8026f20:	f000 f8b7 	bl	8027092 <OUTLINED_FUNCTION_47>
 8026f24:	201f      	movs	r0, #31
 8026f26:	f88d 0009 	strb.w	r0, [sp, #9]
 8026f2a:	20ff      	movs	r0, #255	@ 0xff
 8026f2c:	f88d 0007 	strb.w	r0, [sp, #7]
 8026f30:	f104 000a 	add.w	r0, r4, #10
 8026f34:	f000 f802 	bl	8026f3c <OUTLINED_FUNCTION_1>
 8026f38:	b042      	add	sp, #264	@ 0x108
 8026f3a:	bdb0      	pop	{r4, r5, r7, pc}

08026f3c <OUTLINED_FUNCTION_1>:
 8026f3c:	f88d 0008 	strb.w	r0, [sp, #8]
 8026f40:	b2c0      	uxtb	r0, r0
 8026f42:	1cc1      	adds	r1, r0, #3
 8026f44:	4628      	mov	r0, r5
 8026f46:	f7ff bb0f 	b.w	8026568 <hci_event>

08026f4a <OUTLINED_FUNCTION_5>:
 8026f4a:	f88d 1008 	strb.w	r1, [sp, #8]
 8026f4e:	4628      	mov	r0, r5
 8026f50:	3103      	adds	r1, #3
 8026f52:	f7ff bb09 	b.w	8026568 <hci_event>

08026f56 <OUTLINED_FUNCTION_7>:
 8026f56:	f88d 3011 	strb.w	r3, [sp, #17]
 8026f5a:	0a1b      	lsrs	r3, r3, #8
 8026f5c:	f88d 2010 	strb.w	r2, [sp, #16]
 8026f60:	f88d 100e 	strb.w	r1, [sp, #14]
 8026f64:	f88d 000c 	strb.w	r0, [sp, #12]
 8026f68:	f105 000d 	add.w	r0, r5, #13
 8026f6c:	9946      	ldr	r1, [sp, #280]	@ 0x118
 8026f6e:	4622      	mov	r2, r4
 8026f70:	f88d 3012 	strb.w	r3, [sp, #18]
 8026f74:	f7fd bae8 	b.w	8024548 <ble_memcpy>

08026f78 <OUTLINED_FUNCTION_9>:
 8026f78:	f88d 1009 	strb.w	r1, [sp, #9]
 8026f7c:	2104      	movs	r1, #4
 8026f7e:	f88d 1008 	strb.w	r1, [sp, #8]
 8026f82:	21ff      	movs	r1, #255	@ 0xff
 8026f84:	f88d 1007 	strb.w	r1, [sp, #7]
 8026f88:	2107      	movs	r1, #7
 8026f8a:	f7ff baed 	b.w	8026568 <hci_event>

08026f8e <OUTLINED_FUNCTION_12>:
 8026f8e:	f88d 200f 	strb.w	r2, [sp, #15]
 8026f92:	0a09      	lsrs	r1, r1, #8
 8026f94:	0a00      	lsrs	r0, r0, #8
 8026f96:	f88d 100e 	strb.w	r1, [sp, #14]
 8026f9a:	f88d 000c 	strb.w	r0, [sp, #12]
 8026f9e:	f105 000a 	add.w	r0, r5, #10
 8026fa2:	4619      	mov	r1, r3
 8026fa4:	f7fd bad0 	b.w	8024548 <ble_memcpy>

08026fa8 <OUTLINED_FUNCTION_14>:
 8026fa8:	f88d 1007 	strb.w	r1, [sp, #7]
 8026fac:	2107      	movs	r1, #7
 8026fae:	f7ff badb 	b.w	8026568 <hci_event>

08026fb2 <OUTLINED_FUNCTION_19>:
 8026fb2:	2109      	movs	r1, #9
 8026fb4:	f88d 2009 	strb.w	r2, [sp, #9]
 8026fb8:	2206      	movs	r2, #6
 8026fba:	f88d 2008 	strb.w	r2, [sp, #8]
 8026fbe:	22ff      	movs	r2, #255	@ 0xff
 8026fc0:	f88d 2007 	strb.w	r2, [sp, #7]
 8026fc4:	f7ff bad0 	b.w	8026568 <hci_event>

08026fc8 <OUTLINED_FUNCTION_22>:
 8026fc8:	200c      	movs	r0, #12
 8026fca:	21ff      	movs	r1, #255	@ 0xff
 8026fcc:	f88d 000a 	strb.w	r0, [sp, #10]
 8026fd0:	4770      	bx	lr

08026fd2 <OUTLINED_FUNCTION_23>:
 8026fd2:	f88d 200f 	strb.w	r2, [sp, #15]
 8026fd6:	0a12      	lsrs	r2, r2, #8
 8026fd8:	f88d 100d 	strb.w	r1, [sp, #13]
 8026fdc:	0a09      	lsrs	r1, r1, #8
 8026fde:	f88d 000b 	strb.w	r0, [sp, #11]
 8026fe2:	0a00      	lsrs	r0, r0, #8
 8026fe4:	461c      	mov	r4, r3
 8026fe6:	4770      	bx	lr

08026fe8 <OUTLINED_FUNCTION_24>:
 8026fe8:	210c      	movs	r1, #12
 8026fea:	f88d 000b 	strb.w	r0, [sp, #11]
 8026fee:	0a00      	lsrs	r0, r0, #8
 8026ff0:	f88d 100a 	strb.w	r1, [sp, #10]
 8026ff4:	4770      	bx	lr

08026ff6 <OUTLINED_FUNCTION_25>:
 8026ff6:	f88d 100d 	strb.w	r1, [sp, #13]
 8026ffa:	0a09      	lsrs	r1, r1, #8
 8026ffc:	f88d 000b 	strb.w	r0, [sp, #11]
 8027000:	0a00      	lsrs	r0, r0, #8
 8027002:	4770      	bx	lr

08027004 <OUTLINED_FUNCTION_26>:
 8027004:	461c      	mov	r4, r3
 8027006:	f88d 3011 	strb.w	r3, [sp, #17]
 802700a:	f88d 2010 	strb.w	r2, [sp, #16]
 802700e:	f88d 100e 	strb.w	r1, [sp, #14]
 8027012:	f88d 000c 	strb.w	r0, [sp, #12]
 8027016:	f105 000c 	add.w	r0, r5, #12
 802701a:	9946      	ldr	r1, [sp, #280]	@ 0x118
 802701c:	461a      	mov	r2, r3
 802701e:	f7fd ba93 	b.w	8024548 <ble_memcpy>

08027022 <OUTLINED_FUNCTION_29>:
 8027022:	f88d 100d 	strb.w	r1, [sp, #13]
 8027026:	0a09      	lsrs	r1, r1, #8
 8027028:	f88d 000b 	strb.w	r0, [sp, #11]
 802702c:	0a00      	lsrs	r0, r0, #8
 802702e:	f88d 200a 	strb.w	r2, [sp, #10]
 8027032:	4770      	bx	lr

08027034 <OUTLINED_FUNCTION_30>:
 8027034:	f88d 000b 	strb.w	r0, [sp, #11]
 8027038:	0a00      	lsrs	r0, r0, #8
 802703a:	4770      	bx	lr

0802703c <OUTLINED_FUNCTION_31>:
 802703c:	f88d 0008 	strb.w	r0, [sp, #8]
 8027040:	203e      	movs	r0, #62	@ 0x3e
 8027042:	f88d 0007 	strb.w	r0, [sp, #7]
 8027046:	4770      	bx	lr

08027048 <OUTLINED_FUNCTION_32>:
 8027048:	f88d 1009 	strb.w	r1, [sp, #9]
 802704c:	2105      	movs	r1, #5
 802704e:	f88d 1008 	strb.w	r1, [sp, #8]
 8027052:	21ff      	movs	r1, #255	@ 0xff
 8027054:	f88d 1007 	strb.w	r1, [sp, #7]
 8027058:	2108      	movs	r1, #8
 802705a:	f7ff ba85 	b.w	8026568 <hci_event>

0802705e <OUTLINED_FUNCTION_34>:
 802705e:	f88d 100a 	strb.w	r1, [sp, #10]
 8027062:	f88d 1008 	strb.w	r1, [sp, #8]
 8027066:	21ff      	movs	r1, #255	@ 0xff
 8027068:	f88d 000c 	strb.w	r0, [sp, #12]
 802706c:	4770      	bx	lr

0802706e <OUTLINED_FUNCTION_37>:
 802706e:	f88d 0008 	strb.w	r0, [sp, #8]
 8027072:	20ff      	movs	r0, #255	@ 0xff
 8027074:	f88d 0007 	strb.w	r0, [sp, #7]
 8027078:	4770      	bx	lr

0802707a <OUTLINED_FUNCTION_38>:
 802707a:	f88d 100e 	strb.w	r1, [sp, #14]
 802707e:	f88d 000c 	strb.w	r0, [sp, #12]
 8027082:	4770      	bx	lr

08027084 <OUTLINED_FUNCTION_43>:
 8027084:	f88d 1007 	strb.w	r1, [sp, #7]
 8027088:	f88d 0009 	strb.w	r0, [sp, #9]
 802708c:	1de0      	adds	r0, r4, #7
 802708e:	28ff      	cmp	r0, #255	@ 0xff
 8027090:	4770      	bx	lr

08027092 <OUTLINED_FUNCTION_47>:
 8027092:	200c      	movs	r0, #12
 8027094:	f88d 000a 	strb.w	r0, [sp, #10]
 8027098:	4770      	bx	lr

0802709a <OUTLINED_FUNCTION_48>:
 802709a:	f88d 000b 	strb.w	r0, [sp, #11]
 802709e:	0a00      	lsrs	r0, r0, #8
 80270a0:	f88d 3010 	strb.w	r3, [sp, #16]
 80270a4:	f88d 200e 	strb.w	r2, [sp, #14]
 80270a8:	f88d 100a 	strb.w	r1, [sp, #10]
 80270ac:	4770      	bx	lr

080270ae <OUTLINED_FUNCTION_49>:
 80270ae:	f88d 0008 	strb.w	r0, [sp, #8]
 80270b2:	203e      	movs	r0, #62	@ 0x3e
 80270b4:	f88d 0007 	strb.w	r0, [sp, #7]
 80270b8:	4620      	mov	r0, r4
 80270ba:	f7ff ba55 	b.w	8026568 <hci_event>

080270be <OUTLINED_FUNCTION_50>:
 80270be:	f88d 0009 	strb.w	r0, [sp, #9]
 80270c2:	2004      	movs	r0, #4
 80270c4:	f88d 100a 	strb.w	r1, [sp, #10]
 80270c8:	f88d 200c 	strb.w	r2, [sp, #12]
 80270cc:	f88d 0008 	strb.w	r0, [sp, #8]
 80270d0:	4770      	bx	lr

080270d2 <OUTLINED_FUNCTION_51>:
 80270d2:	f88d 1008 	strb.w	r1, [sp, #8]
 80270d6:	21ff      	movs	r1, #255	@ 0xff
 80270d8:	f88d 1007 	strb.w	r1, [sp, #7]
 80270dc:	4770      	bx	lr

080270de <OUTLINED_FUNCTION_53>:
 80270de:	f88d 100d 	strb.w	r1, [sp, #13]
 80270e2:	f88d 000b 	strb.w	r0, [sp, #11]
 80270e6:	4770      	bx	lr

080270e8 <OUTLINED_FUNCTION_54>:
 80270e8:	f88d 0009 	strb.w	r0, [sp, #9]
 80270ec:	20ff      	movs	r0, #255	@ 0xff
 80270ee:	f88d 0007 	strb.w	r0, [sp, #7]
 80270f2:	4770      	bx	lr

080270f4 <OUTLINED_FUNCTION_55>:
 80270f4:	2206      	movs	r2, #6
 80270f6:	f88d 300e 	strb.w	r3, [sp, #14]
 80270fa:	f88d 000c 	strb.w	r0, [sp, #12]
 80270fe:	f104 0009 	add.w	r0, r4, #9
 8027102:	4770      	bx	lr

08027104 <OUTLINED_FUNCTION_60>:
 8027104:	2001      	movs	r0, #1
 8027106:	f88d 0009 	strb.w	r0, [sp, #9]
 802710a:	20ff      	movs	r0, #255	@ 0xff
 802710c:	f88d 0007 	strb.w	r0, [sp, #7]
 8027110:	4770      	bx	lr

08027112 <OUTLINED_FUNCTION_62>:
 8027112:	f88d 0007 	strb.w	r0, [sp, #7]
 8027116:	0a08      	lsrs	r0, r1, #8
 8027118:	2107      	movs	r1, #7
 802711a:	f88d 000b 	strb.w	r0, [sp, #11]
 802711e:	4770      	bx	lr

08027120 <OUTLINED_FUNCTION_63>:
 8027120:	2004      	movs	r0, #4
 8027122:	2105      	movs	r1, #5
 8027124:	f88d 000a 	strb.w	r0, [sp, #10]
 8027128:	4770      	bx	lr
	...

0802712c <BleStack_Init>:
 802712c:	b580      	push	{r7, lr}
 802712e:	4601      	mov	r1, r0
 8027130:	4804      	ldr	r0, [pc, #16]	@ (8027144 <__arm_cp.0_0>)
 8027132:	2228      	movs	r2, #40	@ 0x28
 8027134:	f7fd fa08 	bl	8024548 <ble_memcpy>
 8027138:	f000 fab6 	bl	80276a8 <LECTRL_LL_Init>
 802713c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8027140:	f000 b802 	b.w	8027148 <hci_reset>

08027144 <__arm_cp.0_0>:
 8027144:	20009f34 	.word	0x20009f34

08027148 <hci_reset>:
 8027148:	b5bc      	push	{r2, r3, r4, r5, r7, lr}
 802714a:	f7e2 fbc9 	bl	80098e0 <BLEPLAT_Init>
 802714e:	4826      	ldr	r0, [pc, #152]	@ (80271e8 <__arm_cp.1_0>)
 8027150:	2100      	movs	r1, #0
 8027152:	f44f 720f 	mov.w	r2, #572	@ 0x23c
 8027156:	f7fd fa47 	bl	80245e8 <ble_memset>
 802715a:	f000 fa8f 	bl	802767c <SLP_Init>
 802715e:	f000 ffd7 	bl	8028110 <CfgData_Init>
 8027162:	f000 fab1 	bl	80276c8 <LECTRL_Reset>
 8027166:	b100      	cbz	r0, 802716a <hci_reset+0x22>
 8027168:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}
 802716a:	4d20      	ldr	r5, [pc, #128]	@ (80271ec <__arm_cp.1_1>)
 802716c:	2100      	movs	r1, #0
 802716e:	682c      	ldr	r4, [r5, #0]
 8027170:	88aa      	ldrh	r2, [r5, #4]
 8027172:	4620      	mov	r0, r4
 8027174:	9400      	str	r4, [sp, #0]
 8027176:	f7fd fa37 	bl	80245e8 <ble_memset>
 802717a:	6868      	ldr	r0, [r5, #4]
 802717c:	f5b0 7f0f 	cmp.w	r0, #572	@ 0x23c
 8027180:	d30e      	bcc.n	80271a0 <hci_reset+0x58>
 8027182:	466c      	mov	r4, sp
 8027184:	4620      	mov	r0, r4
 8027186:	f004 ff85 	bl	802c094 <ACL_MemAlloc>
 802718a:	4620      	mov	r0, r4
 802718c:	f001 fc1c 	bl	80289c8 <GATT_MemAlloc>
 8027190:	4620      	mov	r0, r4
 8027192:	f005 fda7 	bl	802cce4 <SMP_MemAlloc>
 8027196:	4620      	mov	r0, r4
 8027198:	f004 fd80 	bl	802bc9c <L2C_MemAlloc>
 802719c:	6868      	ldr	r0, [r5, #4]
 802719e:	9c00      	ldr	r4, [sp, #0]
 80271a0:	6829      	ldr	r1, [r5, #0]
 80271a2:	1a61      	subs	r1, r4, r1
 80271a4:	4281      	cmp	r1, r0
 80271a6:	dc0e      	bgt.n	80271c6 <hci_reset+0x7e>
 80271a8:	68a8      	ldr	r0, [r5, #8]
 80271aa:	89aa      	ldrh	r2, [r5, #12]
 80271ac:	2100      	movs	r1, #0
 80271ae:	9001      	str	r0, [sp, #4]
 80271b0:	f7fd fa1a 	bl	80245e8 <ble_memset>
 80271b4:	a801      	add	r0, sp, #4
 80271b6:	f002 f80d 	bl	80291d4 <GATT_Db_MemAlloc>
 80271ba:	e9d5 0102 	ldrd	r0, r1, [r5, #8]
 80271be:	9a01      	ldr	r2, [sp, #4]
 80271c0:	1a10      	subs	r0, r2, r0
 80271c2:	4288      	cmp	r0, r1
 80271c4:	dd01      	ble.n	80271ca <hci_reset+0x82>
 80271c6:	2007      	movs	r0, #7
 80271c8:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}
 80271ca:	f004 ff79 	bl	802c0c0 <ACL_Init>
 80271ce:	f004 fd73 	bl	802bcb8 <L2C_Init>
 80271d2:	f005 fd95 	bl	802cd00 <SMP_Init>
 80271d6:	f001 fc11 	bl	80289fc <GATT_Init>
 80271da:	f001 f869 	bl	80282b0 <GAP_Init>
 80271de:	f000 f833 	bl	8027248 <EVT_Init>
 80271e2:	2000      	movs	r0, #0
 80271e4:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}
 80271e6:	bf00      	nop

080271e8 <__arm_cp.1_0>:
 80271e8:	20009f5c 	.word	0x20009f5c

080271ec <__arm_cp.1_1>:
 80271ec:	20009f34 	.word	0x20009f34

080271f0 <BleStack_Process>:
 80271f0:	b580      	push	{r7, lr}
 80271f2:	f001 fd0d 	bl	8028c10 <GATT_Process>
 80271f6:	f005 ff0d 	bl	802d014 <SMP_Process>
 80271fa:	f000 fa9b 	bl	8027734 <LECTRL_Process>
 80271fe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8027202:	f000 ba43 	b.w	802768c <SLP_SleepCheck>
	...

08027208 <BLEPLATCB_TimerExpiry>:
 8027208:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 802720c:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 8027210:	290c      	cmp	r1, #12
 8027212:	d80c      	bhi.n	802722e <BLEPLATCB_TimerExpiry+0x26>
 8027214:	e8df f001 	tbb	[pc, r1]
 8027218:	0c0b0907 	.word	0x0c0b0907
 802721c:	0f0b0b0b 	.word	0x0f0b0b0b
 8027220:	120b0b0b 	.word	0x120b0b0b
 8027224:	0015      	.short	0x0015
 8027226:	f001 b9e3 	b.w	80285f0 <GAP_Adv_Lim_Disc_Timeout_Cb>
 802722a:	f001 bba7 	b.w	802897c <GAP_Scan_Disc_Proc_Timeout_Cb>
 802722e:	4770      	bx	lr
 8027230:	b2c0      	uxtb	r0, r0
 8027232:	f004 be5f 	b.w	802bef4 <L2C_Timeout_Cb>
 8027236:	b2c0      	uxtb	r0, r0
 8027238:	f001 bed8 	b.w	8028fec <GATT_Timeout_Cb>
 802723c:	b2c0      	uxtb	r0, r0
 802723e:	f005 bf25 	b.w	802d08c <SMP_Timeout_Cb>
 8027242:	b2c0      	uxtb	r0, r0
 8027244:	f007 bba4 	b.w	802e990 <SMP_Rep_Attempts_Timeout_Cb>

08027248 <EVT_Init>:
 8027248:	4804      	ldr	r0, [pc, #16]	@ (802725c <__arm_cp.0_0>)
 802724a:	4905      	ldr	r1, [pc, #20]	@ (8027260 <__arm_cp.0_1>)
 802724c:	f8c0 1234 	str.w	r1, [r0, #564]	@ 0x234
 8027250:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8027254:	f8a0 1230 	strh.w	r1, [r0, #560]	@ 0x230
 8027258:	4770      	bx	lr
 802725a:	bf00      	nop

0802725c <__arm_cp.0_0>:
 802725c:	20009f5c 	.word	0x20009f5c

08027260 <__arm_cp.0_1>:
 8027260:	0003ffff 	.word	0x0003ffff

08027264 <EVT_aci_hal_fw_error>:
 8027264:	b580      	push	{r7, lr}
 8027266:	f7ff fbc9 	bl	80269fc <aci_hal_fw_error_event>
 802726a:	2000      	movs	r0, #0
 802726c:	bd80      	pop	{r7, pc}
	...

08027270 <EVT_aci_l2cap_connection_update_resp>:
 8027270:	b580      	push	{r7, lr}
 8027272:	4805      	ldr	r0, [pc, #20]	@ (8027288 <__arm_cp.2_0>)
 8027274:	f8b0 0230 	ldrh.w	r0, [r0, #560]	@ 0x230
 8027278:	0580      	lsls	r0, r0, #22
 802727a:	d503      	bpl.n	8027284 <EVT_aci_l2cap_connection_update_resp+0x14>
 802727c:	4608      	mov	r0, r1
 802727e:	4611      	mov	r1, r2
 8027280:	f7ff fca3 	bl	8026bca <aci_l2cap_connection_update_resp_event>
 8027284:	2000      	movs	r0, #0
 8027286:	bd80      	pop	{r7, pc}

08027288 <__arm_cp.2_0>:
 8027288:	20009f5c 	.word	0x20009f5c

0802728c <EVT_aci_l2cap_connection_update_req>:
 802728c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 802728e:	480b      	ldr	r0, [pc, #44]	@ (80272bc <__arm_cp.3_0>)
 8027290:	f8b0 0230 	ldrh.w	r0, [r0, #560]	@ 0x230
 8027294:	05c0      	lsls	r0, r0, #23
 8027296:	d50d      	bpl.n	80272b4 <EVT_aci_l2cap_connection_update_req+0x28>
 8027298:	6a10      	ldr	r0, [r2, #32]
 802729a:	7944      	ldrb	r4, [r0, #5]
 802729c:	88c2      	ldrh	r2, [r0, #6]
 802729e:	8903      	ldrh	r3, [r0, #8]
 80272a0:	8945      	ldrh	r5, [r0, #10]
 80272a2:	8986      	ldrh	r6, [r0, #12]
 80272a4:	89c0      	ldrh	r0, [r0, #14]
 80272a6:	9002      	str	r0, [sp, #8]
 80272a8:	4608      	mov	r0, r1
 80272aa:	4621      	mov	r1, r4
 80272ac:	e9cd 5600 	strd	r5, r6, [sp]
 80272b0:	f7ff fcb4 	bl	8026c1c <aci_l2cap_connection_update_req_event>
 80272b4:	2000      	movs	r0, #0
 80272b6:	b004      	add	sp, #16
 80272b8:	bd70      	pop	{r4, r5, r6, pc}
 80272ba:	bf00      	nop

080272bc <__arm_cp.3_0>:
 80272bc:	20009f5c 	.word	0x20009f5c

080272c0 <EVT_aci_l2cap_command_reject>:
 80272c0:	b5e0      	push	{r5, r6, r7, lr}
 80272c2:	4608      	mov	r0, r1
 80272c4:	6a11      	ldr	r1, [r2, #32]
 80272c6:	f10d 0307 	add.w	r3, sp, #7
 80272ca:	88ca      	ldrh	r2, [r1, #6]
 80272cc:	7949      	ldrb	r1, [r1, #5]
 80272ce:	9300      	str	r3, [sp, #0]
 80272d0:	2300      	movs	r3, #0
 80272d2:	f7ff fcd1 	bl	8026c78 <aci_l2cap_command_reject_event>
 80272d6:	2000      	movs	r0, #0
 80272d8:	bd8c      	pop	{r2, r3, r7, pc}
	...

080272dc <EVT_aci_l2cap_proc_timeout>:
 80272dc:	b580      	push	{r7, lr}
 80272de:	b0c0      	sub	sp, #256	@ 0x100
 80272e0:	4806      	ldr	r0, [pc, #24]	@ (80272fc <__arm_cp.5_0>)
 80272e2:	f8b0 0230 	ldrh.w	r0, [r0, #560]	@ 0x230
 80272e6:	0540      	lsls	r0, r0, #21
 80272e8:	d504      	bpl.n	80272f4 <EVT_aci_l2cap_proc_timeout+0x18>
 80272ea:	4608      	mov	r0, r1
 80272ec:	466a      	mov	r2, sp
 80272ee:	2100      	movs	r1, #0
 80272f0:	f7ff fc79 	bl	8026be6 <aci_l2cap_proc_timeout_event>
 80272f4:	2000      	movs	r0, #0
 80272f6:	b040      	add	sp, #256	@ 0x100
 80272f8:	bd80      	pop	{r7, pc}
 80272fa:	bf00      	nop

080272fc <__arm_cp.5_0>:
 80272fc:	20009f5c 	.word	0x20009f5c

08027300 <EVT_aci_gap_limited_discoverable>:
 8027300:	4803      	ldr	r0, [pc, #12]	@ (8027310 <__arm_cp.6_0>)
 8027302:	f8b0 0230 	ldrh.w	r0, [r0, #560]	@ 0x230
 8027306:	07c0      	lsls	r0, r0, #31
 8027308:	bf18      	it	ne
 802730a:	f7ff bb90 	bne.w	8026a2e <aci_gap_limited_discoverable_event>
 802730e:	4770      	bx	lr

08027310 <__arm_cp.6_0>:
 8027310:	20009f5c 	.word	0x20009f5c

08027314 <EVT_aci_gap_proc_complete>:
 8027314:	4805      	ldr	r0, [pc, #20]	@ (802732c <__arm_cp.7_0>)
 8027316:	f8b0 0230 	ldrh.w	r0, [r0, #560]	@ 0x230
 802731a:	0600      	lsls	r0, r0, #24
 802731c:	bf58      	it	pl
 802731e:	4770      	bxpl	lr
 8027320:	4608      	mov	r0, r1
 8027322:	4611      	mov	r1, r2
 8027324:	2200      	movs	r2, #0
 8027326:	2300      	movs	r3, #0
 8027328:	f7ff bbea 	b.w	8026b00 <aci_gap_proc_complete_event>

0802732c <__arm_cp.7_0>:
 802732c:	20009f5c 	.word	0x20009f5c

08027330 <EVT_aci_gap_pass_key_req>:
 8027330:	4804      	ldr	r0, [pc, #16]	@ (8027344 <__arm_cp.8_0>)
 8027332:	f8b0 0230 	ldrh.w	r0, [r0, #560]	@ 0x230
 8027336:	0740      	lsls	r0, r0, #29
 8027338:	bf44      	itt	mi
 802733a:	4608      	movmi	r0, r1
 802733c:	f7ff bba1 	bmi.w	8026a82 <aci_gap_pass_key_req_event>
 8027340:	4770      	bx	lr
 8027342:	bf00      	nop

08027344 <__arm_cp.8_0>:
 8027344:	20009f5c 	.word	0x20009f5c

08027348 <EVT_aci_gap_numeric_comparison_value>:
 8027348:	4804      	ldr	r0, [pc, #16]	@ (802735c <__arm_cp.9_0>)
 802734a:	f8b0 0230 	ldrh.w	r0, [r0, #560]	@ 0x230
 802734e:	0480      	lsls	r0, r0, #18
 8027350:	bf58      	it	pl
 8027352:	4770      	bxpl	lr
 8027354:	4608      	mov	r0, r1
 8027356:	4611      	mov	r1, r2
 8027358:	f7ff bc00 	b.w	8026b5c <aci_gap_numeric_comparison_value_event>

0802735c <__arm_cp.9_0>:
 802735c:	20009f5c 	.word	0x20009f5c

08027360 <EVT_aci_gap_keypress_notification>:
 8027360:	4804      	ldr	r0, [pc, #16]	@ (8027374 <__arm_cp.10_0>)
 8027362:	f8b0 0230 	ldrh.w	r0, [r0, #560]	@ 0x230
 8027366:	0440      	lsls	r0, r0, #17
 8027368:	bf58      	it	pl
 802736a:	4770      	bxpl	lr
 802736c:	4608      	mov	r0, r1
 802736e:	4611      	mov	r1, r2
 8027370:	f7ff bc18 	b.w	8026ba4 <aci_gap_keypress_notification_event>

08027374 <__arm_cp.10_0>:
 8027374:	20009f5c 	.word	0x20009f5c

08027378 <EVT_aci_gap_addr_not_resolved>:
 8027378:	4804      	ldr	r0, [pc, #16]	@ (802738c <__arm_cp.11_0>)
 802737a:	f8b0 0230 	ldrh.w	r0, [r0, #560]	@ 0x230
 802737e:	0500      	lsls	r0, r0, #20
 8027380:	bf44      	itt	mi
 8027382:	4608      	movmi	r0, r1
 8027384:	f7ff bbda 	bmi.w	8026b3c <aci_gap_addr_not_resolved_event>
 8027388:	4770      	bx	lr
 802738a:	bf00      	nop

0802738c <__arm_cp.11_0>:
 802738c:	20009f5c 	.word	0x20009f5c

08027390 <EVT_aci_gap_peripheral_security_initiated>:
 8027390:	4803      	ldr	r0, [pc, #12]	@ (80273a0 <__arm_cp.12_0>)
 8027392:	f8b0 0230 	ldrh.w	r0, [r0, #560]	@ 0x230
 8027396:	06c0      	lsls	r0, r0, #27
 8027398:	bf48      	it	mi
 802739a:	f7ff bb92 	bmi.w	8026ac2 <aci_gap_peripheral_security_initiated_event>
 802739e:	4770      	bx	lr

080273a0 <__arm_cp.12_0>:
 80273a0:	20009f5c 	.word	0x20009f5c

080273a4 <EVT_aci_gap_bond_lost>:
 80273a4:	4803      	ldr	r0, [pc, #12]	@ (80273b4 <__arm_cp.13_0>)
 80273a6:	f8b0 0230 	ldrh.w	r0, [r0, #560]	@ 0x230
 80273aa:	0680      	lsls	r0, r0, #26
 80273ac:	bf48      	it	mi
 80273ae:	f7ff bb97 	bmi.w	8026ae0 <aci_gap_bond_lost_event>
 80273b2:	4770      	bx	lr

080273b4 <__arm_cp.13_0>:
 80273b4:	20009f5c 	.word	0x20009f5c

080273b8 <EVT_aci_gap_pairing_complete>:
 80273b8:	4805      	ldr	r0, [pc, #20]	@ (80273d0 <__arm_cp.14_0>)
 80273ba:	f8b0 0230 	ldrh.w	r0, [r0, #560]	@ 0x230
 80273be:	0780      	lsls	r0, r0, #30
 80273c0:	bf58      	it	pl
 80273c2:	4770      	bxpl	lr
 80273c4:	4608      	mov	r0, r1
 80273c6:	4611      	mov	r1, r2
 80273c8:	461a      	mov	r2, r3
 80273ca:	f7ff bb40 	b.w	8026a4e <aci_gap_pairing_complete_event>
 80273ce:	bf00      	nop

080273d0 <__arm_cp.14_0>:
 80273d0:	20009f5c 	.word	0x20009f5c

080273d4 <EVT_aci_gap_authorization_req>:
 80273d4:	4804      	ldr	r0, [pc, #16]	@ (80273e8 <__arm_cp.15_0>)
 80273d6:	f8b0 0230 	ldrh.w	r0, [r0, #560]	@ 0x230
 80273da:	0700      	lsls	r0, r0, #28
 80273dc:	bf44      	itt	mi
 80273de:	4608      	movmi	r0, r1
 80273e0:	f7ff bb5f 	bmi.w	8026aa2 <aci_gap_authorization_req_event>
 80273e4:	4770      	bx	lr
 80273e6:	bf00      	nop

080273e8 <__arm_cp.15_0>:
 80273e8:	20009f5c 	.word	0x20009f5c

080273ec <EVT_aci_gatt_tx_pool_available>:
 80273ec:	4608      	mov	r0, r1
 80273ee:	4611      	mov	r1, r2
 80273f0:	f7ff bd37 	b.w	8026e62 <aci_gatt_tx_pool_available_event>

080273f4 <EVT_aci_gatt_server_confirmation>:
 80273f4:	4608      	mov	r0, r1
 80273f6:	f7ff bd42 	b.w	8026e7e <aci_gatt_server_confirmation_event>
	...

080273fc <EVT_aci_gatt_proc_complete>:
 80273fc:	4805      	ldr	r0, [pc, #20]	@ (8027414 <__arm_cp.18_0>)
 80273fe:	f890 0236 	ldrb.w	r0, [r0, #566]	@ 0x236
 8027402:	07c0      	lsls	r0, r0, #31
 8027404:	bf04      	itt	eq
 8027406:	2000      	moveq	r0, #0
 8027408:	4770      	bxeq	lr
 802740a:	4608      	mov	r0, r1
 802740c:	4611      	mov	r1, r2
 802740e:	f7ff bcb5 	b.w	8026d7c <aci_gatt_proc_complete_event>
 8027412:	bf00      	nop

08027414 <__arm_cp.18_0>:
 8027414:	20009f5c 	.word	0x20009f5c

08027418 <EVT_aci_gatt_proc_timeout>:
 8027418:	4804      	ldr	r0, [pc, #16]	@ (802742c <__arm_cp.19_0>)
 802741a:	f890 0234 	ldrb.w	r0, [r0, #564]	@ 0x234
 802741e:	0780      	lsls	r0, r0, #30
 8027420:	bf44      	itt	mi
 8027422:	4608      	movmi	r0, r1
 8027424:	f7ff bc61 	bmi.w	8026cea <aci_gatt_proc_timeout_event>
 8027428:	2000      	movs	r0, #0
 802742a:	4770      	bx	lr

0802742c <__arm_cp.19_0>:
 802742c:	20009f5c 	.word	0x20009f5c

08027430 <EVT_aci_gatt_read_permit_req>:
 8027430:	4608      	mov	r0, r1
 8027432:	4611      	mov	r1, r2
 8027434:	461a      	mov	r2, r3
 8027436:	f7ff bccc 	b.w	8026dd2 <aci_gatt_read_permit_req_event>

0802743a <EVT_aci_gatt_read_multi_permit_req>:
 802743a:	4608      	mov	r0, r1
 802743c:	0851      	lsrs	r1, r2, #1
 802743e:	461a      	mov	r2, r3
 8027440:	f7ff bce5 	b.w	8026e0e <aci_gatt_read_multi_permit_req_event>

08027444 <EVT_aci_gatt_write_permit_req>:
 8027444:	b5f0      	push	{r4, r5, r6, r7, lr}
 8027446:	b0c1      	sub	sp, #260	@ 0x104
 8027448:	e9dd 6046 	ldrd	r6, r0, [sp, #280]	@ 0x118
 802744c:	af01      	add	r7, sp, #4
 802744e:	4614      	mov	r4, r2
 8027450:	460d      	mov	r5, r1
 8027452:	1d19      	adds	r1, r3, #4
 8027454:	463b      	mov	r3, r7
 8027456:	4632      	mov	r2, r6
 8027458:	f004 ff03 	bl	802c262 <ACL_Get_Data>
 802745c:	4628      	mov	r0, r5
 802745e:	4621      	mov	r1, r4
 8027460:	4632      	mov	r2, r6
 8027462:	463b      	mov	r3, r7
 8027464:	f7ff fc99 	bl	8026d9a <aci_gatt_write_permit_req_event>
 8027468:	b041      	add	sp, #260	@ 0x104
 802746a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0802746c <EVT_aci_gatt_prepare_write_permit_req>:
 802746c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8027470:	b0c2      	sub	sp, #264	@ 0x108
 8027472:	9848      	ldr	r0, [sp, #288]	@ 0x120
 8027474:	460e      	mov	r6, r1
 8027476:	af02      	add	r7, sp, #8
 8027478:	461c      	mov	r4, r3
 802747a:	4615      	mov	r5, r2
 802747c:	1d01      	adds	r1, r0, #4
 802747e:	e9dd 8049 	ldrd	r8, r0, [sp, #292]	@ 0x124
 8027482:	463b      	mov	r3, r7
 8027484:	4642      	mov	r2, r8
 8027486:	f004 feec 	bl	802c262 <ACL_Get_Data>
 802748a:	4630      	mov	r0, r6
 802748c:	4629      	mov	r1, r5
 802748e:	4622      	mov	r2, r4
 8027490:	4643      	mov	r3, r8
 8027492:	9700      	str	r7, [sp, #0]
 8027494:	f7ff fd00 	bl	8026e98 <aci_gatt_prepare_write_permit_req_event>
 8027498:	b042      	add	sp, #264	@ 0x108
 802749a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080274a0 <EVT_aci_att_exchange_mtu_resp>:
 80274a0:	4805      	ldr	r0, [pc, #20]	@ (80274b8 <__arm_cp.26_0>)
 80274a2:	f890 0234 	ldrb.w	r0, [r0, #564]	@ 0x234
 80274a6:	0740      	lsls	r0, r0, #29
 80274a8:	bf5c      	itt	pl
 80274aa:	2000      	movpl	r0, #0
 80274ac:	4770      	bxpl	lr
 80274ae:	4608      	mov	r0, r1
 80274b0:	4611      	mov	r1, r2
 80274b2:	f7ff bc27 	b.w	8026d04 <aci_att_exchange_mtu_resp_event>
 80274b6:	bf00      	nop

080274b8 <__arm_cp.26_0>:
 80274b8:	20009f5c 	.word	0x20009f5c

080274bc <EVT_aci_gatt_notification_complete>:
 80274bc:	4608      	mov	r0, r1
 80274be:	f7ff bd04 	b.w	8026eca <aci_gatt_notification_complete_event>
	...

080274c4 <EVT_GATT_Attribute_Modified>:
 80274c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80274c8:	b0c3      	sub	sp, #268	@ 0x10c
 80274ca:	4604      	mov	r4, r0
 80274cc:	481d      	ldr	r0, [pc, #116]	@ (8027544 <__arm_cp.34_0>)
 80274ce:	f890 0234 	ldrb.w	r0, [r0, #564]	@ 0x234
 80274d2:	07c0      	lsls	r0, r0, #31
 80274d4:	d031      	beq.n	802753a <EVT_GATT_Attribute_Modified+0x76>
 80274d6:	4615      	mov	r5, r2
 80274d8:	f44f 4700 	mov.w	r7, #32768	@ 0x8000
 80274dc:	f04f 0b00 	mov.w	fp, #0
 80274e0:	4688      	mov	r8, r1
 80274e2:	9304      	str	r3, [sp, #16]
 80274e4:	e9cd 4102 	strd	r4, r1, [sp, #8]
 80274e8:	fa1f f885 	uxth.w	r8, r5
 80274ec:	46a9      	mov	r9, r5
 80274ee:	fa1f fa8b 	uxth.w	sl, fp
 80274f2:	f10d 0417 	add.w	r4, sp, #23
 80274f6:	4620      	mov	r0, r4
 80274f8:	f1b8 0ff6 	cmp.w	r8, #246	@ 0xf6
 80274fc:	bf28      	it	cs
 80274fe:	f04f 09f5 	movcs.w	r9, #245	@ 0xf5
 8027502:	fa1f f689 	uxth.w	r6, r9
 8027506:	eb03 010a 	add.w	r1, r3, sl
 802750a:	4632      	mov	r2, r6
 802750c:	f7fd f81c 	bl	8024548 <ble_memcpy>
 8027510:	9400      	str	r4, [sp, #0]
 8027512:	e9dd 4102 	ldrd	r4, r1, [sp, #8]
 8027516:	f1b8 0ff6 	cmp.w	r8, #246	@ 0xf6
 802751a:	bf38      	it	cc
 802751c:	2700      	movcc	r7, #0
 802751e:	ea47 000b 	orr.w	r0, r7, fp
 8027522:	4633      	mov	r3, r6
 8027524:	b282      	uxth	r2, r0
 8027526:	4620      	mov	r0, r4
 8027528:	f7ff fbcd 	bl	8026cc6 <aci_gatt_attribute_modified_event>
 802752c:	eba5 0509 	sub.w	r5, r5, r9
 8027530:	9b04      	ldr	r3, [sp, #16]
 8027532:	eb0a 0b06 	add.w	fp, sl, r6
 8027536:	0428      	lsls	r0, r5, #16
 8027538:	d1d6      	bne.n	80274e8 <EVT_GATT_Attribute_Modified+0x24>
 802753a:	2000      	movs	r0, #0
 802753c:	b043      	add	sp, #268	@ 0x10c
 802753e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027542:	bf00      	nop

08027544 <__arm_cp.34_0>:
 8027544:	20009f5c 	.word	0x20009f5c

08027548 <EVT_GATT_Indication>:
 8027548:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802754c:	b0c0      	sub	sp, #256	@ 0x100
 802754e:	4604      	mov	r4, r0
 8027550:	480c      	ldr	r0, [pc, #48]	@ (8027584 <__arm_cp.39_0>)
 8027552:	f890 0235 	ldrb.w	r0, [r0, #565]	@ 0x235
 8027556:	0680      	lsls	r0, r0, #26
 8027558:	d507      	bpl.n	802756a <EVT_GATT_Indication+0x22>
 802755a:	88a0      	ldrh	r0, [r4, #4]
 802755c:	1fc6      	subs	r6, r0, #7
 802755e:	b2b2      	uxth	r2, r6
 8027560:	2af5      	cmp	r2, #245	@ 0xf5
 8027562:	d304      	bcc.n	802756e <EVT_GATT_Indication+0x26>
 8027564:	4620      	mov	r0, r4
 8027566:	f000 f80f 	bl	8027588 <EVT_GATT_Ext_B>
 802756a:	2000      	movs	r0, #0
 802756c:	e007      	b.n	802757e <EVT_GATT_Indication+0x36>
 802756e:	6a20      	ldr	r0, [r4, #32]
 8027570:	46e8      	mov	r8, sp
 8027572:	f000 f86d 	bl	8027650 <OUTLINED_FUNCTION_2>
 8027576:	f000 f879 	bl	802766c <OUTLINED_FUNCTION_6>
 802757a:	f7ff fbd1 	bl	8026d20 <aci_gatt_indication_event>
 802757e:	b040      	add	sp, #256	@ 0x100
 8027580:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08027584 <__arm_cp.39_0>:
 8027584:	20009f5c 	.word	0x20009f5c

08027588 <EVT_GATT_Ext_B>:
 8027588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802758c:	b0c3      	sub	sp, #268	@ 0x10c
 802758e:	4682      	mov	sl, r0
 8027590:	8880      	ldrh	r0, [r0, #4]
 8027592:	f44f 4b00 	mov.w	fp, #32768	@ 0x8000
 8027596:	2400      	movs	r4, #0
 8027598:	f10d 090c 	add.w	r9, sp, #12
 802759c:	1fc7      	subs	r7, r0, #7
 802759e:	f8da 0020 	ldr.w	r0, [sl, #32]
 80275a2:	7941      	ldrb	r1, [r0, #5]
 80275a4:	7980      	ldrb	r0, [r0, #6]
 80275a6:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
 80275aa:	9002      	str	r0, [sp, #8]
 80275ac:	fa1f f887 	uxth.w	r8, r7
 80275b0:	4620      	mov	r0, r4
 80275b2:	463d      	mov	r5, r7
 80275b4:	464b      	mov	r3, r9
 80275b6:	f36f 30df 	bfc	r0, #15, #17
 80275ba:	f1b8 0ff6 	cmp.w	r8, #246	@ 0xf6
 80275be:	bf28      	it	cs
 80275c0:	25f5      	movcs	r5, #245	@ 0xf5
 80275c2:	b2ae      	uxth	r6, r5
 80275c4:	1dc1      	adds	r1, r0, #7
 80275c6:	4650      	mov	r0, sl
 80275c8:	4632      	mov	r2, r6
 80275ca:	f004 fe4a 	bl	802c262 <ACL_Get_Data>
 80275ce:	f1b8 0ff6 	cmp.w	r8, #246	@ 0xf6
 80275d2:	bf38      	it	cc
 80275d4:	f04f 0b00 	movcc.w	fp, #0
 80275d8:	f8da 1020 	ldr.w	r1, [sl, #32]
 80275dc:	f8ba 0008 	ldrh.w	r0, [sl, #8]
 80275e0:	ea4b 0204 	orr.w	r2, fp, r4
 80275e4:	7909      	ldrb	r1, [r1, #4]
 80275e6:	291d      	cmp	r1, #29
 80275e8:	d104      	bne.n	80275f4 <EVT_GATT_Ext_B+0x6c>
 80275ea:	f000 f838 	bl	802765e <OUTLINED_FUNCTION_3>
 80275ee:	f7ff fc79 	bl	8026ee4 <aci_gatt_indication_ext_event>
 80275f2:	e003      	b.n	80275fc <EVT_GATT_Ext_B+0x74>
 80275f4:	f000 f833 	bl	802765e <OUTLINED_FUNCTION_3>
 80275f8:	f7ff fc8a 	bl	8026f10 <aci_gatt_notification_ext_event>
 80275fc:	b2a0      	uxth	r0, r4
 80275fe:	1b7f      	subs	r7, r7, r5
 8027600:	1984      	adds	r4, r0, r6
 8027602:	0438      	lsls	r0, r7, #16
 8027604:	bf04      	itt	eq
 8027606:	b043      	addeq	sp, #268	@ 0x10c
 8027608:	e8bd 8ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802760c:	e7ce      	b.n	80275ac <EVT_GATT_Ext_B+0x24>
	...

08027610 <EVT_GATT_Notification>:
 8027610:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8027614:	b0c0      	sub	sp, #256	@ 0x100
 8027616:	4604      	mov	r4, r0
 8027618:	480c      	ldr	r0, [pc, #48]	@ (802764c <__arm_cp.41_0>)
 802761a:	f890 0235 	ldrb.w	r0, [r0, #565]	@ 0x235
 802761e:	0640      	lsls	r0, r0, #25
 8027620:	d507      	bpl.n	8027632 <EVT_GATT_Notification+0x22>
 8027622:	88a0      	ldrh	r0, [r4, #4]
 8027624:	1fc6      	subs	r6, r0, #7
 8027626:	b2b2      	uxth	r2, r6
 8027628:	2af5      	cmp	r2, #245	@ 0xf5
 802762a:	d304      	bcc.n	8027636 <EVT_GATT_Notification+0x26>
 802762c:	4620      	mov	r0, r4
 802762e:	f7ff ffab 	bl	8027588 <EVT_GATT_Ext_B>
 8027632:	2000      	movs	r0, #0
 8027634:	e007      	b.n	8027646 <EVT_GATT_Notification+0x36>
 8027636:	6a20      	ldr	r0, [r4, #32]
 8027638:	46e8      	mov	r8, sp
 802763a:	f000 f809 	bl	8027650 <OUTLINED_FUNCTION_2>
 802763e:	f000 f815 	bl	802766c <OUTLINED_FUNCTION_6>
 8027642:	f7ff fb84 	bl	8026d4e <aci_gatt_notification_event>
 8027646:	b040      	add	sp, #256	@ 0x100
 8027648:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0802764c <__arm_cp.41_0>:
 802764c:	20009f5c 	.word	0x20009f5c

08027650 <OUTLINED_FUNCTION_2>:
 8027650:	2107      	movs	r1, #7
 8027652:	7947      	ldrb	r7, [r0, #5]
 8027654:	7985      	ldrb	r5, [r0, #6]
 8027656:	4620      	mov	r0, r4
 8027658:	4643      	mov	r3, r8
 802765a:	f004 be02 	b.w	802c262 <ACL_Get_Data>

0802765e <OUTLINED_FUNCTION_3>:
 802765e:	9902      	ldr	r1, [sp, #8]
 8027660:	b292      	uxth	r2, r2
 8027662:	4633      	mov	r3, r6
 8027664:	f8cd 9000 	str.w	r9, [sp]
 8027668:	b289      	uxth	r1, r1
 802766a:	4770      	bx	lr

0802766c <OUTLINED_FUNCTION_6>:
 802766c:	ea47 2105 	orr.w	r1, r7, r5, lsl #8
 8027670:	8920      	ldrh	r0, [r4, #8]
 8027672:	b2f2      	uxtb	r2, r6
 8027674:	4643      	mov	r3, r8
 8027676:	b289      	uxth	r1, r1
 8027678:	4770      	bx	lr
	...

0802767c <SLP_Init>:
 802767c:	4802      	ldr	r0, [pc, #8]	@ (8027688 <__arm_cp.0_0>)
 802767e:	2106      	movs	r1, #6
 8027680:	f880 103a 	strb.w	r1, [r0, #58]	@ 0x3a
 8027684:	4770      	bx	lr
 8027686:	bf00      	nop

08027688 <__arm_cp.0_0>:
 8027688:	20009f5c 	.word	0x20009f5c

0802768c <SLP_SleepCheck>:
 802768c:	4805      	ldr	r0, [pc, #20]	@ (80276a4 <__arm_cp.1_0>)
 802768e:	f890 1039 	ldrb.w	r1, [r0, #57]	@ 0x39
 8027692:	f890 003a 	ldrb.w	r0, [r0, #58]	@ 0x3a
 8027696:	4001      	ands	r1, r0
 8027698:	1a08      	subs	r0, r1, r0
 802769a:	fab0 f080 	clz	r0, r0
 802769e:	0940      	lsrs	r0, r0, #5
 80276a0:	4770      	bx	lr
 80276a2:	bf00      	nop

080276a4 <__arm_cp.1_0>:
 80276a4:	20009f5c 	.word	0x20009f5c

080276a8 <LECTRL_LL_Init>:
 80276a8:	b510      	push	{r4, lr}
 80276aa:	4c05      	ldr	r4, [pc, #20]	@ (80276c0 <__arm_cp.0_0>)
 80276ac:	7820      	ldrb	r0, [r4, #0]
 80276ae:	b100      	cbz	r0, 80276b2 <LECTRL_LL_Init+0xa>
 80276b0:	bd10      	pop	{r4, pc}
 80276b2:	4804      	ldr	r0, [pc, #16]	@ (80276c4 <__arm_cp.0_1>)
 80276b4:	f7e0 fd6e 	bl	8008194 <ll_sys_ble_cntrl_init>
 80276b8:	2001      	movs	r0, #1
 80276ba:	7020      	strb	r0, [r4, #0]
 80276bc:	bd10      	pop	{r4, pc}
 80276be:	bf00      	nop

080276c0 <__arm_cp.0_0>:
 80276c0:	2000a198 	.word	0x2000a198

080276c4 <__arm_cp.0_1>:
 80276c4:	08027ae1 	.word	0x08027ae1

080276c8 <LECTRL_Reset>:
 80276c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80276cc:	f8df 8050 	ldr.w	r8, [pc, #80]	@ 8027720 <__arm_cp.1_0>
 80276d0:	4914      	ldr	r1, [pc, #80]	@ (8027724 <__arm_cp.1_1>)
 80276d2:	4f15      	ldr	r7, [pc, #84]	@ (8027728 <__arm_cp.1_2>)
 80276d4:	2208      	movs	r2, #8
 80276d6:	f108 0403 	add.w	r4, r8, #3
 80276da:	4620      	mov	r0, r4
 80276dc:	47b8      	blx	r7
 80276de:	f108 050b 	add.w	r5, r8, #11
 80276e2:	4912      	ldr	r1, [pc, #72]	@ (802772c <__arm_cp.1_3>)
 80276e4:	2208      	movs	r2, #8
 80276e6:	4628      	mov	r0, r5
 80276e8:	47b8      	blx	r7
 80276ea:	f108 0613 	add.w	r6, r8, #19
 80276ee:	4910      	ldr	r1, [pc, #64]	@ (8027730 <__arm_cp.1_4>)
 80276f0:	2208      	movs	r2, #8
 80276f2:	4630      	mov	r0, r6
 80276f4:	47b8      	blx	r7
 80276f6:	4620      	mov	r0, r4
 80276f8:	f7ed fb8f 	bl	8014e1a <ll_intf_set_event_mask>
 80276fc:	4630      	mov	r0, r6
 80276fe:	f7ed fb8e 	bl	8014e1e <ll_intf_set_event_mask_page2>
 8027702:	4628      	mov	r0, r5
 8027704:	f7ed fb8d 	bl	8014e22 <ll_intf_set_le_event_mask>
 8027708:	2014      	movs	r0, #20
 802770a:	f7ed fba2 	bl	8014e52 <ll_intf_set_custom_event_mask>
 802770e:	200a      	movs	r0, #10
 8027710:	f888 0001 	strb.w	r0, [r8, #1]
 8027714:	f7ed f98e 	bl	8014a34 <ll_intf_reset>
 8027718:	b2c0      	uxtb	r0, r0
 802771a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802771e:	bf00      	nop

08027720 <__arm_cp.1_0>:
 8027720:	2000a198 	.word	0x2000a198

08027724 <__arm_cp.1_1>:
 8027724:	08031da3 	.word	0x08031da3

08027728 <__arm_cp.1_2>:
 8027728:	08024549 	.word	0x08024549

0802772c <__arm_cp.1_3>:
 802772c:	08031dab 	.word	0x08031dab

08027730 <__arm_cp.1_4>:
 8027730:	08031db3 	.word	0x08031db3

08027734 <LECTRL_Process>:
 8027734:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8027738:	4d14      	ldr	r5, [pc, #80]	@ (802778c <__arm_cp.2_0>)
 802773a:	78a8      	ldrb	r0, [r5, #2]
 802773c:	b120      	cbz	r0, 8027748 <LECTRL_Process+0x14>
 802773e:	2000      	movs	r0, #0
 8027740:	70a8      	strb	r0, [r5, #2]
 8027742:	2002      	movs	r0, #2
 8027744:	f7ed fb52 	bl	8014dec <ll_intf_chng_evnt_hndlr_state>
 8027748:	2000      	movs	r0, #0
 802774a:	6a6f      	ldr	r7, [r5, #36]	@ 0x24
 802774c:	f10d 0803 	add.w	r8, sp, #3
 8027750:	f105 0624 	add.w	r6, r5, #36	@ 0x24
 8027754:	9003      	str	r0, [sp, #12]
 8027756:	e9cd 0001 	strd	r0, r0, [sp, #4]
 802775a:	f88d 0003 	strb.w	r0, [sp, #3]
 802775e:	ac01      	add	r4, sp, #4
 8027760:	b197      	cbz	r7, 8027788 <LECTRL_Process+0x54>
 8027762:	88b8      	ldrh	r0, [r7, #4]
 8027764:	4621      	mov	r1, r4
 8027766:	4642      	mov	r2, r8
 8027768:	683d      	ldr	r5, [r7, #0]
 802776a:	f000 f835 	bl	80277d8 <LECTRL_AllocateACLDataInLL>
 802776e:	b958      	cbnz	r0, 8027788 <LECTRL_Process+0x54>
 8027770:	4630      	mov	r0, r6
 8027772:	4639      	mov	r1, r7
 8027774:	f004 fe50 	bl	802c418 <ACL_List_Remove>
 8027778:	f89d 2003 	ldrb.w	r2, [sp, #3]
 802777c:	4638      	mov	r0, r7
 802777e:	4621      	mov	r1, r4
 8027780:	f000 f888 	bl	8027894 <LECTRL_SendAclDataToLL>
 8027784:	462f      	mov	r7, r5
 8027786:	e7eb      	b.n	8027760 <LECTRL_Process+0x2c>
 8027788:	e8bd 81ff 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, pc}

0802778c <__arm_cp.2_0>:
 802778c:	2000a198 	.word	0x2000a198

08027790 <LECTRL_SendAclDataFromHostToController>:
 8027790:	b5bf      	push	{r0, r1, r2, r3, r4, r5, r7, lr}
 8027792:	4d10      	ldr	r5, [pc, #64]	@ (80277d4 <__arm_cp.4_0>)
 8027794:	4604      	mov	r4, r0
 8027796:	2000      	movs	r0, #0
 8027798:	9003      	str	r0, [sp, #12]
 802779a:	e9cd 0001 	strd	r0, r0, [sp, #4]
 802779e:	f88d 0003 	strb.w	r0, [sp, #3]
 80277a2:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 80277a4:	b930      	cbnz	r0, 80277b4 <LECTRL_SendAclDataFromHostToController+0x24>
 80277a6:	88a0      	ldrh	r0, [r4, #4]
 80277a8:	a901      	add	r1, sp, #4
 80277aa:	f10d 0203 	add.w	r2, sp, #3
 80277ae:	f000 f813 	bl	80277d8 <LECTRL_AllocateACLDataInLL>
 80277b2:	b138      	cbz	r0, 80277c4 <LECTRL_SendAclDataFromHostToController+0x34>
 80277b4:	f105 0024 	add.w	r0, r5, #36	@ 0x24
 80277b8:	4621      	mov	r1, r4
 80277ba:	f004 fe1d 	bl	802c3f8 <ACL_List_Insert_Tail>
 80277be:	2000      	movs	r0, #0
 80277c0:	b004      	add	sp, #16
 80277c2:	bdb0      	pop	{r4, r5, r7, pc}
 80277c4:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80277c8:	a901      	add	r1, sp, #4
 80277ca:	4620      	mov	r0, r4
 80277cc:	f000 f862 	bl	8027894 <LECTRL_SendAclDataToLL>
 80277d0:	e7f6      	b.n	80277c0 <LECTRL_SendAclDataFromHostToController+0x30>
 80277d2:	bf00      	nop

080277d4 <__arm_cp.4_0>:
 80277d4:	2000a198 	.word	0x2000a198

080277d8 <LECTRL_AllocateACLDataInLL>:
 80277d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80277dc:	b280      	uxth	r0, r0
 80277de:	460c      	mov	r4, r1
 80277e0:	21fb      	movs	r1, #251	@ 0xfb
 80277e2:	2700      	movs	r7, #0
 80277e4:	4690      	mov	r8, r2
 80277e6:	30fa      	adds	r0, #250	@ 0xfa
 80277e8:	fbb0 f9f1 	udiv	r9, r0, r1
 80277ec:	2000      	movs	r0, #0
 80277ee:	fa5f f589 	uxtb.w	r5, r9
 80277f2:	2d04      	cmp	r5, #4
 80277f4:	bf38      	it	cc
 80277f6:	2001      	movcc	r0, #1
 80277f8:	2101      	movs	r1, #1
 80277fa:	f7f8 f812 	bl	801f822 <bsp_assert>
 80277fe:	4e24      	ldr	r6, [pc, #144]	@ (8027890 <__arm_cp.5_0>)
 8027800:	42bd      	cmp	r5, r7
 8027802:	d014      	beq.n	802782e <LECTRL_AllocateACLDataInLL+0x56>
 8027804:	4630      	mov	r0, r6
 8027806:	f7fa f919 	bl	8021a3c <os_mem_pool_alloc>
 802780a:	f844 0027 	str.w	r0, [r4, r7, lsl #2]
 802780e:	b198      	cbz	r0, 8027838 <LECTRL_AllocateACLDataInLL+0x60>
 8027810:	2100      	movs	r1, #0
 8027812:	2210      	movs	r2, #16
 8027814:	f7fc fee8 	bl	80245e8 <ble_memset>
 8027818:	f7ed fa97 	bl	8014d4a <ll_intf_alloc_ll_pkt>
 802781c:	f854 1027 	ldr.w	r1, [r4, r7, lsl #2]
 8027820:	6008      	str	r0, [r1, #0]
 8027822:	f854 0027 	ldr.w	r0, [r4, r7, lsl #2]
 8027826:	6800      	ldr	r0, [r0, #0]
 8027828:	b1d0      	cbz	r0, 8027860 <LECTRL_AllocateACLDataInLL+0x88>
 802782a:	3701      	adds	r7, #1
 802782c:	e7e8      	b.n	8027800 <LECTRL_AllocateACLDataInLL+0x28>
 802782e:	2000      	movs	r0, #0
 8027830:	f888 9000 	strb.w	r9, [r8]
 8027834:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8027838:	2500      	movs	r5, #0
 802783a:	2600      	movs	r6, #0
 802783c:	42b7      	cmp	r7, r6
 802783e:	d023      	beq.n	8027888 <LECTRL_AllocateACLDataInLL+0xb0>
 8027840:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
 8027844:	6801      	ldr	r1, [r0, #0]
 8027846:	b139      	cbz	r1, 8027858 <LECTRL_AllocateACLDataInLL+0x80>
 8027848:	1f08      	subs	r0, r1, #4
 802784a:	f7fa f8f9 	bl	8021a40 <os_mem_pool_free>
 802784e:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
 8027852:	6005      	str	r5, [r0, #0]
 8027854:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
 8027858:	f7fa f8f2 	bl	8021a40 <os_mem_pool_free>
 802785c:	3601      	adds	r6, #1
 802785e:	e7ed      	b.n	802783c <LECTRL_AllocateACLDataInLL+0x64>
 8027860:	2500      	movs	r5, #0
 8027862:	2600      	movs	r6, #0
 8027864:	42be      	cmp	r6, r7
 8027866:	d80f      	bhi.n	8027888 <LECTRL_AllocateACLDataInLL+0xb0>
 8027868:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
 802786c:	6801      	ldr	r1, [r0, #0]
 802786e:	b139      	cbz	r1, 8027880 <LECTRL_AllocateACLDataInLL+0xa8>
 8027870:	1f08      	subs	r0, r1, #4
 8027872:	f7fa f8e5 	bl	8021a40 <os_mem_pool_free>
 8027876:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
 802787a:	6005      	str	r5, [r0, #0]
 802787c:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
 8027880:	f7fa f8de 	bl	8021a40 <os_mem_pool_free>
 8027884:	3601      	adds	r6, #1
 8027886:	e7ed      	b.n	8027864 <LECTRL_AllocateACLDataInLL+0x8c>
 8027888:	2007      	movs	r0, #7
 802788a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802788e:	bf00      	nop

08027890 <__arm_cp.5_0>:
 8027890:	20009460 	.word	0x20009460

08027894 <LECTRL_SendAclDataToLL>:
 8027894:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027898:	f8b0 a004 	ldrh.w	sl, [r0, #4]
 802789c:	4690      	mov	r8, r2
 802789e:	460e      	mov	r6, r1
 80278a0:	4681      	mov	r9, r0
 80278a2:	f04f 0b00 	mov.w	fp, #0
 80278a6:	27fb      	movs	r7, #251	@ 0xfb
 80278a8:	2501      	movs	r5, #1
 80278aa:	2400      	movs	r4, #0
 80278ac:	45a0      	cmp	r8, r4
 80278ae:	d046      	beq.n	802793e <LECTRL_SendAclDataToLL+0xaa>
 80278b0:	b2b8      	uxth	r0, r7
 80278b2:	fa1f f78a 	uxth.w	r7, sl
 80278b6:	fa1f f18b 	uxth.w	r1, fp
 80278ba:	42b8      	cmp	r0, r7
 80278bc:	bf38      	it	cc
 80278be:	4607      	movcc	r7, r0
 80278c0:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80278c4:	463a      	mov	r2, r7
 80278c6:	6800      	ldr	r0, [r0, #0]
 80278c8:	1d03      	adds	r3, r0, #4
 80278ca:	4648      	mov	r0, r9
 80278cc:	f004 fcc9 	bl	802c262 <ACL_Get_Data>
 80278d0:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
 80278d4:	2004      	movs	r0, #4
 80278d6:	8148      	strh	r0, [r1, #10]
 80278d8:	07e8      	lsls	r0, r5, #31
 80278da:	818f      	strh	r7, [r1, #12]
 80278dc:	d005      	beq.n	80278ea <LECTRL_SendAclDataToLL+0x56>
 80278de:	f899 000a 	ldrb.w	r0, [r9, #10]
 80278e2:	3801      	subs	r0, #1
 80278e4:	bf18      	it	ne
 80278e6:	2001      	movne	r0, #1
 80278e8:	e000      	b.n	80278ec <LECTRL_SendAclDataToLL+0x58>
 80278ea:	2000      	movs	r0, #0
 80278ec:	7388      	strb	r0, [r1, #14]
 80278ee:	f8b9 0008 	ldrh.w	r0, [r9, #8]
 80278f2:	3801      	subs	r0, #1
 80278f4:	b280      	uxth	r0, r0
 80278f6:	f7ed f95a 	bl	8014bae <ll_intf_acl_data_from_host_to_cntrlr>
 80278fa:	4605      	mov	r5, r0
 80278fc:	0600      	lsls	r0, r0, #24
 80278fe:	d105      	bne.n	802790c <LECTRL_SendAclDataToLL+0x78>
 8027900:	44bb      	add	fp, r7
 8027902:	ebaa 0a07 	sub.w	sl, sl, r7
 8027906:	3401      	adds	r4, #1
 8027908:	2500      	movs	r5, #0
 802790a:	e7cf      	b.n	80278ac <LECTRL_SendAclDataToLL+0x18>
 802790c:	f1a8 0701 	sub.w	r7, r8, #1
 8027910:	f04f 0a00 	mov.w	sl, #0
 8027914:	42a7      	cmp	r7, r4
 8027916:	dd10      	ble.n	802793a <LECTRL_SendAclDataToLL+0xa6>
 8027918:	f856 0027 	ldr.w	r0, [r6, r7, lsl #2]
 802791c:	6801      	ldr	r1, [r0, #0]
 802791e:	b141      	cbz	r1, 8027932 <LECTRL_SendAclDataToLL+0x9e>
 8027920:	1f08      	subs	r0, r1, #4
 8027922:	f7fa f88d 	bl	8021a40 <os_mem_pool_free>
 8027926:	f856 0027 	ldr.w	r0, [r6, r7, lsl #2]
 802792a:	f8c0 a000 	str.w	sl, [r0]
 802792e:	f856 0027 	ldr.w	r0, [r6, r7, lsl #2]
 8027932:	f7fa f885 	bl	8021a40 <os_mem_pool_free>
 8027936:	3f01      	subs	r7, #1
 8027938:	e7ec      	b.n	8027914 <LECTRL_SendAclDataToLL+0x80>
 802793a:	4544      	cmp	r4, r8
 802793c:	d305      	bcc.n	802794a <LECTRL_SendAclDataToLL+0xb6>
 802793e:	4804      	ldr	r0, [pc, #16]	@ (8027950 <__arm_cp.6_0>)
 8027940:	4649      	mov	r1, r9
 8027942:	301c      	adds	r0, #28
 8027944:	f004 fd58 	bl	802c3f8 <ACL_List_Insert_Tail>
 8027948:	2500      	movs	r5, #0
 802794a:	b2e8      	uxtb	r0, r5
 802794c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08027950 <__arm_cp.6_0>:
 8027950:	2000a198 	.word	0x2000a198

08027954 <hci_le_set_advertising_parameters>:
 8027954:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8027956:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8027958:	f8ad 1002 	strh.w	r1, [sp, #2]
 802795c:	f8ad 0000 	strh.w	r0, [sp]
 8027960:	4668      	mov	r0, sp
 8027962:	f88d 3005 	strb.w	r3, [sp, #5]
 8027966:	f88d 2004 	strb.w	r2, [sp, #4]
 802796a:	f88d 400e 	strb.w	r4, [sp, #14]
 802796e:	9c08      	ldr	r4, [sp, #32]
 8027970:	3007      	adds	r0, #7
 8027972:	f88d 400d 	strb.w	r4, [sp, #13]
 8027976:	e9dd 4106 	ldrd	r4, r1, [sp, #24]
 802797a:	b119      	cbz	r1, 8027984 <hci_le_set_advertising_parameters+0x30>
 802797c:	2206      	movs	r2, #6
 802797e:	f7fc fde3 	bl	8024548 <ble_memcpy>
 8027982:	e003      	b.n	802798c <hci_le_set_advertising_parameters+0x38>
 8027984:	2100      	movs	r1, #0
 8027986:	2206      	movs	r2, #6
 8027988:	f7fc fe2e 	bl	80245e8 <ble_memset>
 802798c:	4668      	mov	r0, sp
 802798e:	f88d 4006 	strb.w	r4, [sp, #6]
 8027992:	f7ec ffed 	bl	8014970 <ll_intf_le_set_adv_params>
 8027996:	b2c0      	uxtb	r0, r0
 8027998:	b004      	add	sp, #16
 802799a:	bd10      	pop	{r4, pc}

0802799c <hci_le_set_advertising_data>:
 802799c:	b580      	push	{r7, lr}
 802799e:	f7ec ffdd 	bl	801495c <ll_intf_le_set_adv_data>
 80279a2:	b2c0      	uxtb	r0, r0
 80279a4:	bd80      	pop	{r7, pc}

080279a6 <hci_le_set_advertising_enable>:
 80279a6:	b580      	push	{r7, lr}
 80279a8:	f7ec ffcf 	bl	801494a <ll_intf_le_set_adv_enable>
 80279ac:	b2c0      	uxtb	r0, r0
 80279ae:	bd80      	pop	{r7, pc}

080279b0 <hci_le_set_scan_enable>:
 80279b0:	b580      	push	{r7, lr}
 80279b2:	f7ed f8bb 	bl	8014b2c <ll_intf_le_set_scan_enable>
 80279b6:	b2c0      	uxtb	r0, r0
 80279b8:	bd80      	pop	{r7, pc}

080279ba <hci_le_set_address_resolution_enable>:
 80279ba:	b580      	push	{r7, lr}
 80279bc:	f7ed f89a 	bl	8014af4 <ll_intf_le_set_addr_rsln_enble>
 80279c0:	b2c0      	uxtb	r0, r0
 80279c2:	bd80      	pop	{r7, pc}

080279c4 <hci_le_clear_filter_accept_list>:
 80279c4:	b580      	push	{r7, lr}
 80279c6:	f7ed f8cb 	bl	8014b60 <ll_intf_le_clear_white_list>
 80279ca:	b2c0      	uxtb	r0, r0
 80279cc:	bd80      	pop	{r7, pc}

080279ce <hci_le_add_device_to_filter_accept_list>:
 80279ce:	b580      	push	{r7, lr}
 80279d0:	f7ed f8b9 	bl	8014b46 <ll_intf_le_add_device_white_list>
 80279d4:	b2c0      	uxtb	r0, r0
 80279d6:	bd80      	pop	{r7, pc}

080279d8 <hci_le_set_default_phy>:
 80279d8:	b580      	push	{r7, lr}
 80279da:	f7ed f8d1 	bl	8014b80 <ll_intf_le_set_default_phy_cmd>
 80279de:	b2c0      	uxtb	r0, r0
 80279e0:	bd80      	pop	{r7, pc}

080279e2 <hci_le_read_advertising_physical_channel_tx_power>:
 80279e2:	b580      	push	{r7, lr}
 80279e4:	f7ed f88c 	bl	8014b00 <ll_intf_le_read_adv_channel_tx_power>
 80279e8:	b2c0      	uxtb	r0, r0
 80279ea:	bd80      	pop	{r7, pc}

080279ec <hci_le_long_term_key_request_negative_reply>:
 80279ec:	b580      	push	{r7, lr}
 80279ee:	3801      	subs	r0, #1
 80279f0:	2100      	movs	r1, #0
 80279f2:	b280      	uxth	r0, r0
 80279f4:	f7ed f86c 	bl	8014ad0 <ll_intf_rcvd_long_trm_key>
 80279f8:	b2c0      	uxtb	r0, r0
 80279fa:	bd80      	pop	{r7, pc}

080279fc <hci_le_long_term_key_request_reply>:
 80279fc:	b580      	push	{r7, lr}
 80279fe:	3801      	subs	r0, #1
 8027a00:	b280      	uxth	r0, r0
 8027a02:	f7ed f865 	bl	8014ad0 <ll_intf_rcvd_long_trm_key>
 8027a06:	b2c0      	uxtb	r0, r0
 8027a08:	bd80      	pop	{r7, pc}

08027a0a <hci_le_enable_encryption>:
 8027a0a:	b580      	push	{r7, lr}
 8027a0c:	3801      	subs	r0, #1
 8027a0e:	b280      	uxth	r0, r0
 8027a10:	f7ed f865 	bl	8014ade <ll_intf_le_strt_encrpt>
 8027a14:	b2c0      	uxtb	r0, r0
 8027a16:	bd80      	pop	{r7, pc}

08027a18 <hci_le_set_random_address>:
 8027a18:	b580      	push	{r7, lr}
 8027a1a:	f7ed f8ab 	bl	8014b74 <ll_intf_le_set_random_addr>
 8027a1e:	b2c0      	uxtb	r0, r0
 8027a20:	bd80      	pop	{r7, pc}
	...

08027a24 <LECTRL_Enhanced_Conn_Complete_Event_Unmask>:
 8027a24:	4803      	ldr	r0, [pc, #12]	@ (8027a34 <__arm_cp.74_0>)
 8027a26:	7b01      	ldrb	r1, [r0, #12]
 8027a28:	f041 0102 	orr.w	r1, r1, #2
 8027a2c:	7301      	strb	r1, [r0, #12]
 8027a2e:	300b      	adds	r0, #11
 8027a30:	f7ed b9f7 	b.w	8014e22 <ll_intf_set_le_event_mask>

08027a34 <__arm_cp.74_0>:
 8027a34:	2000a198 	.word	0x2000a198

08027a38 <aci_hal_write_config_data>:
 8027a38:	b570      	push	{r4, r5, r6, lr}
 8027a3a:	4614      	mov	r4, r2
 8027a3c:	460d      	mov	r5, r1
 8027a3e:	4606      	mov	r6, r0
 8027a40:	b910      	cbnz	r0, 8027a48 <aci_hal_write_config_data+0x10>
 8027a42:	4620      	mov	r0, r4
 8027a44:	f7ec ff79 	bl	801493a <ll_intf_write_bd_addr>
 8027a48:	4630      	mov	r0, r6
 8027a4a:	4629      	mov	r1, r5
 8027a4c:	4622      	mov	r2, r4
 8027a4e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8027a52:	f000 bb81 	b.w	8028158 <CfgData_Write>
	...

08027a58 <aci_hal_set_tx_power_level>:
 8027a58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8027a5c:	b093      	sub	sp, #76	@ 0x4c
 8027a5e:	481f      	ldr	r0, [pc, #124]	@ (8027adc <__arm_cp.77_0>)
 8027a60:	f06f 0513 	mvn.w	r5, #19
 8027a64:	2904      	cmp	r1, #4
 8027a66:	bf88      	it	hi
 8027a68:	f1a1 0519 	subhi.w	r5, r1, #25
 8027a6c:	7045      	strb	r5, [r0, #1]
 8027a6e:	b268      	sxtb	r0, r5
 8027a70:	f7ed f8eb 	bl	8014c4a <ll_intf_le_write_tx_pwr>
 8027a74:	0601      	lsls	r1, r0, #24
 8027a76:	d12d      	bne.n	8027ad4 <aci_hal_set_tx_power_level+0x7c>
 8027a78:	f10d 0931 	add.w	r9, sp, #49	@ 0x31
 8027a7c:	f10d 0805 	add.w	r8, sp, #5
 8027a80:	4648      	mov	r0, r9
 8027a82:	4641      	mov	r1, r8
 8027a84:	f7ed f967 	bl	8014d56 <ll_intf_get_link_status>
 8027a88:	f88d 504b 	strb.w	r5, [sp, #75]	@ 0x4b
 8027a8c:	2500      	movs	r5, #0
 8027a8e:	ae12      	add	r6, sp, #72	@ 0x48
 8027a90:	f10d 0747 	add.w	r7, sp, #71	@ 0x47
 8027a94:	b2ec      	uxtb	r4, r5
 8027a96:	f7e0 fb6b 	bl	8008170 <ll_sys_get_concurrent_state_machines_num>
 8027a9a:	3002      	adds	r0, #2
 8027a9c:	42a0      	cmp	r0, r4
 8027a9e:	d918      	bls.n	8027ad2 <aci_hal_set_tx_power_level+0x7a>
 8027aa0:	f819 0004 	ldrb.w	r0, [r9, r4]
 8027aa4:	2805      	cmp	r0, #5
 8027aa6:	bf18      	it	ne
 8027aa8:	2802      	cmpne	r0, #2
 8027aaa:	d110      	bne.n	8027ace <aci_hal_set_tx_power_level+0x76>
 8027aac:	f818 0014 	ldrb.w	r0, [r8, r4, lsl #1]
 8027ab0:	2401      	movs	r4, #1
 8027ab2:	ea40 2000 	orr.w	r0, r0, r0, lsl #8
 8027ab6:	f8ad 0048 	strh.w	r0, [sp, #72]	@ 0x48
 8027aba:	2c04      	cmp	r4, #4
 8027abc:	d807      	bhi.n	8027ace <aci_hal_set_tx_power_level+0x76>
 8027abe:	4630      	mov	r0, r6
 8027ac0:	4639      	mov	r1, r7
 8027ac2:	f88d 404a 	strb.w	r4, [sp, #74]	@ 0x4a
 8027ac6:	f7ed f8a2 	bl	8014c0e <ll_intf_set_conn_tx_power_level>
 8027aca:	3401      	adds	r4, #1
 8027acc:	e7f5      	b.n	8027aba <aci_hal_set_tx_power_level+0x62>
 8027ace:	3501      	adds	r5, #1
 8027ad0:	e7e0      	b.n	8027a94 <aci_hal_set_tx_power_level+0x3c>
 8027ad2:	2000      	movs	r0, #0
 8027ad4:	b2c0      	uxtb	r0, r0
 8027ad6:	b013      	add	sp, #76	@ 0x4c
 8027ad8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08027adc <__arm_cp.77_0>:
 8027adc:	2000a198 	.word	0x2000a198

08027ae0 <LECTRL_UpperLayerCallback>:
 8027ae0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027ae4:	4604      	mov	r4, r0
 8027ae6:	2800      	cmp	r0, #0
 8027ae8:	d073      	beq.n	8027bd2 <LECTRL_UpperLayerCallback+0xf2>
 8027aea:	89a0      	ldrh	r0, [r4, #12]
 8027aec:	2802      	cmp	r0, #2
 8027aee:	d370      	bcc.n	8027bd2 <LECTRL_UpperLayerCallback+0xf2>
 8027af0:	7ba1      	ldrb	r1, [r4, #14]
 8027af2:	2910      	cmp	r1, #16
 8027af4:	d01b      	beq.n	8027b2e <LECTRL_UpperLayerCallback+0x4e>
 8027af6:	2908      	cmp	r1, #8
 8027af8:	d16b      	bne.n	8027bd2 <LECTRL_UpperLayerCallback+0xf2>
 8027afa:	8960      	ldrh	r0, [r4, #10]
 8027afc:	6821      	ldr	r1, [r4, #0]
 8027afe:	5c0a      	ldrb	r2, [r1, r0]
 8027b00:	180b      	adds	r3, r1, r0
 8027b02:	7859      	ldrb	r1, [r3, #1]
 8027b04:	2aff      	cmp	r2, #255	@ 0xff
 8027b06:	d045      	beq.n	8027b94 <LECTRL_UpperLayerCallback+0xb4>
 8027b08:	2a3e      	cmp	r2, #62	@ 0x3e
 8027b0a:	d152      	bne.n	8027bb2 <LECTRL_UpperLayerCallback+0xd2>
 8027b0c:	4d3a      	ldr	r5, [pc, #232]	@ (8027bf8 <__arm_cp.0_1>)
 8027b0e:	1cd8      	adds	r0, r3, #3
 8027b10:	789a      	ldrb	r2, [r3, #2]
 8027b12:	2300      	movs	r3, #0
 8027b14:	2b0b      	cmp	r3, #11
 8027b16:	d05c      	beq.n	8027bd2 <LECTRL_UpperLayerCallback+0xf2>
 8027b18:	f815 6033 	ldrb.w	r6, [r5, r3, lsl #3]
 8027b1c:	42b2      	cmp	r2, r6
 8027b1e:	d104      	bne.n	8027b2a <LECTRL_UpperLayerCallback+0x4a>
 8027b20:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
 8027b24:	7877      	ldrb	r7, [r6, #1]
 8027b26:	428f      	cmp	r7, r1
 8027b28:	d25f      	bcs.n	8027bea <LECTRL_UpperLayerCallback+0x10a>
 8027b2a:	3301      	adds	r3, #1
 8027b2c:	e7f2      	b.n	8027b14 <LECTRL_UpperLayerCallback+0x34>
 8027b2e:	2804      	cmp	r0, #4
 8027b30:	d34f      	bcc.n	8027bd2 <LECTRL_UpperLayerCallback+0xf2>
 8027b32:	8961      	ldrh	r1, [r4, #10]
 8027b34:	6822      	ldr	r2, [r4, #0]
 8027b36:	f1a0 0b04 	sub.w	fp, r0, #4
 8027b3a:	2000      	movs	r0, #0
 8027b3c:	2500      	movs	r5, #0
 8027b3e:	eb02 0901 	add.w	r9, r2, r1
 8027b42:	5c53      	ldrb	r3, [r2, r1]
 8027b44:	fa1f f88b 	uxth.w	r8, fp
 8027b48:	f899 a001 	ldrb.w	sl, [r9, #1]
 8027b4c:	4642      	mov	r2, r8
 8027b4e:	ea43 210a 	orr.w	r1, r3, sl, lsl #8
 8027b52:	1c4f      	adds	r7, r1, #1
 8027b54:	f36f 371f 	bfc	r7, #12, #20
 8027b58:	4639      	mov	r1, r7
 8027b5a:	f004 fadf 	bl	802c11c <ACL_New>
 8027b5e:	b1a8      	cbz	r0, 8027b8c <LECTRL_UpperLayerCallback+0xac>
 8027b60:	4606      	mov	r6, r0
 8027b62:	6005      	str	r5, [r0, #0]
 8027b64:	f8a0 b004 	strh.w	fp, [r0, #4]
 8027b68:	8107      	strh	r7, [r0, #8]
 8027b6a:	ea4f 101a 	mov.w	r0, sl, lsr #4
 8027b6e:	f109 0304 	add.w	r3, r9, #4
 8027b72:	2100      	movs	r1, #0
 8027b74:	4642      	mov	r2, r8
 8027b76:	72b0      	strb	r0, [r6, #10]
 8027b78:	4630      	mov	r0, r6
 8027b7a:	f004 fb92 	bl	802c2a2 <ACL_Set_Data>
 8027b7e:	4630      	mov	r0, r6
 8027b80:	f004 f8aa 	bl	802bcd8 <L2C_Rx_Data_Handler>
 8027b84:	b330      	cbz	r0, 8027bd4 <LECTRL_UpperLayerCallback+0xf4>
 8027b86:	4630      	mov	r0, r6
 8027b88:	f004 fafe 	bl	802c188 <ACL_Release>
 8027b8c:	4819      	ldr	r0, [pc, #100]	@ (8027bf4 <__arm_cp.0_0>)
 8027b8e:	2501      	movs	r5, #1
 8027b90:	7085      	strb	r5, [r0, #2]
 8027b92:	e01f      	b.n	8027bd4 <LECTRL_UpperLayerCallback+0xf4>
 8027b94:	7898      	ldrb	r0, [r3, #2]
 8027b96:	2500      	movs	r5, #0
 8027b98:	2805      	cmp	r0, #5
 8027b9a:	d11b      	bne.n	8027bd4 <LECTRL_UpperLayerCallback+0xf4>
 8027b9c:	2909      	cmp	r1, #9
 8027b9e:	d819      	bhi.n	8027bd4 <LECTRL_UpperLayerCallback+0xf4>
 8027ba0:	2200      	movs	r2, #0
 8027ba2:	78d8      	ldrb	r0, [r3, #3]
 8027ba4:	7959      	ldrb	r1, [r3, #5]
 8027ba6:	2300      	movs	r3, #0
 8027ba8:	9200      	str	r2, [sp, #0]
 8027baa:	2200      	movs	r2, #0
 8027bac:	f7fe ff00 	bl	80269b0 <aci_hal_end_of_radio_activity_event>
 8027bb0:	e01d      	b.n	8027bee <LECTRL_UpperLayerCallback+0x10e>
 8027bb2:	4d12      	ldr	r5, [pc, #72]	@ (8027bfc <__arm_cp.0_2>)
 8027bb4:	1c98      	adds	r0, r3, #2
 8027bb6:	2300      	movs	r3, #0
 8027bb8:	2b08      	cmp	r3, #8
 8027bba:	d00a      	beq.n	8027bd2 <LECTRL_UpperLayerCallback+0xf2>
 8027bbc:	f815 6033 	ldrb.w	r6, [r5, r3, lsl #3]
 8027bc0:	42b2      	cmp	r2, r6
 8027bc2:	d104      	bne.n	8027bce <LECTRL_UpperLayerCallback+0xee>
 8027bc4:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
 8027bc8:	7877      	ldrb	r7, [r6, #1]
 8027bca:	428f      	cmp	r7, r1
 8027bcc:	d20d      	bcs.n	8027bea <LECTRL_UpperLayerCallback+0x10a>
 8027bce:	3301      	adds	r3, #1
 8027bd0:	e7f2      	b.n	8027bb8 <LECTRL_UpperLayerCallback+0xd8>
 8027bd2:	2500      	movs	r5, #0
 8027bd4:	fab5 f085 	clz	r0, r5
 8027bd8:	0940      	lsrs	r0, r0, #5
 8027bda:	b124      	cbz	r4, 8027be6 <LECTRL_UpperLayerCallback+0x106>
 8027bdc:	b91d      	cbnz	r5, 8027be6 <LECTRL_UpperLayerCallback+0x106>
 8027bde:	4620      	mov	r0, r4
 8027be0:	f7ec fffe 	bl	8014be0 <ll_intf_free_ll_pkt_hndlr>
 8027be4:	2001      	movs	r0, #1
 8027be6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027bea:	6871      	ldr	r1, [r6, #4]
 8027bec:	4788      	blx	r1
 8027bee:	4605      	mov	r5, r0
 8027bf0:	e7f0      	b.n	8027bd4 <LECTRL_UpperLayerCallback+0xf4>
 8027bf2:	bf00      	nop

08027bf4 <__arm_cp.0_0>:
 8027bf4:	2000a198 	.word	0x2000a198

08027bf8 <__arm_cp.0_1>:
 8027bf8:	08031dbc 	.word	0x08031dbc

08027bfc <__arm_cp.0_2>:
 8027bfc:	08031e14 	.word	0x08031e14

08027c00 <LECTRL_LeReadLocalP256PublicKeyCompleteEvent>:
 8027c00:	b5b0      	push	{r4, r5, r7, lr}
 8027c02:	460d      	mov	r5, r1
 8027c04:	4608      	mov	r0, r1
 8027c06:	4611      	mov	r1, r2
 8027c08:	4614      	mov	r4, r2
 8027c0a:	f006 ff89 	bl	802eb20 <SMP_Read_Local_P256key_Complete_Handler>
 8027c0e:	4808      	ldr	r0, [pc, #32]	@ (8027c30 <__arm_cp.1_0>)
 8027c10:	7a81      	ldrb	r1, [r0, #10]
 8027c12:	0689      	lsls	r1, r1, #26
 8027c14:	d504      	bpl.n	8027c20 <LECTRL_LeReadLocalP256PublicKeyCompleteEvent+0x20>
 8027c16:	f990 000b 	ldrsb.w	r0, [r0, #11]
 8027c1a:	f1b0 3fff 	cmp.w	r0, #4294967295	@ 0xffffffff
 8027c1e:	dd00      	ble.n	8027c22 <LECTRL_LeReadLocalP256PublicKeyCompleteEvent+0x22>
 8027c20:	bdb0      	pop	{r4, r5, r7, pc}
 8027c22:	4628      	mov	r0, r5
 8027c24:	4621      	mov	r1, r4
 8027c26:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8027c2a:	f7fe be05 	b.w	8026838 <hci_le_read_local_p256_public_key_complete_event>
 8027c2e:	bf00      	nop

08027c30 <__arm_cp.1_0>:
 8027c30:	2000a198 	.word	0x2000a198

08027c34 <LECTRL_LeGeneratedDHKeyCompleteEvent>:
 8027c34:	4608      	mov	r0, r1
 8027c36:	4611      	mov	r1, r2
 8027c38:	f006 bfd8 	b.w	802ebec <SMP_Generate_DHkey_Complete_Handler>

08027c3c <LECTRL_LeConnectionCompleteEvent>:
 8027c3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027c40:	b089      	sub	sp, #36	@ 0x24
 8027c42:	7ac1      	ldrb	r1, [r0, #11]
 8027c44:	7882      	ldrb	r2, [r0, #2]
 8027c46:	f890 800e 	ldrb.w	r8, [r0, #14]
 8027c4a:	f890 900f 	ldrb.w	r9, [r0, #15]
 8027c4e:	f890 a010 	ldrb.w	sl, [r0, #16]
 8027c52:	7904      	ldrb	r4, [r0, #4]
 8027c54:	7805      	ldrb	r5, [r0, #0]
 8027c56:	78c6      	ldrb	r6, [r0, #3]
 8027c58:	f100 0b05 	add.w	fp, r0, #5
 8027c5c:	2300      	movs	r3, #0
 8027c5e:	9108      	str	r1, [sp, #32]
 8027c60:	7b01      	ldrb	r1, [r0, #12]
 8027c62:	9106      	str	r1, [sp, #24]
 8027c64:	7b41      	ldrb	r1, [r0, #13]
 8027c66:	9105      	str	r1, [sp, #20]
 8027c68:	7c41      	ldrb	r1, [r0, #17]
 8027c6a:	9107      	str	r1, [sp, #28]
 8027c6c:	7841      	ldrb	r1, [r0, #1]
 8027c6e:	e9cd b300 	strd	fp, r3, [sp]
 8027c72:	4623      	mov	r3, r4
 8027c74:	ea41 2002 	orr.w	r0, r1, r2, lsl #8
 8027c78:	4632      	mov	r2, r6
 8027c7a:	3001      	adds	r0, #1
 8027c7c:	b287      	uxth	r7, r0
 8027c7e:	4628      	mov	r0, r5
 8027c80:	4639      	mov	r1, r7
 8027c82:	f000 fb49 	bl	8028318 <GAP_Connection_Complete_Handler>
 8027c86:	9905      	ldr	r1, [sp, #20]
 8027c88:	ea49 200a 	orr.w	r0, r9, sl, lsl #8
 8027c8c:	9a08      	ldr	r2, [sp, #32]
 8027c8e:	9b06      	ldr	r3, [sp, #24]
 8027c90:	ea41 2108 	orr.w	r1, r1, r8, lsl #8
 8027c94:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8027c98:	4623      	mov	r3, r4
 8027c9a:	b280      	uxth	r0, r0
 8027c9c:	b289      	uxth	r1, r1
 8027c9e:	b292      	uxth	r2, r2
 8027ca0:	e9cd 1002 	strd	r1, r0, [sp, #8]
 8027ca4:	9807      	ldr	r0, [sp, #28]
 8027ca6:	e9cd b200 	strd	fp, r2, [sp]
 8027caa:	4639      	mov	r1, r7
 8027cac:	4632      	mov	r2, r6
 8027cae:	9004      	str	r0, [sp, #16]
 8027cb0:	4628      	mov	r0, r5
 8027cb2:	f7fe fcb8 	bl	8026626 <hci_le_connection_complete_event>
 8027cb6:	b009      	add	sp, #36	@ 0x24
 8027cb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08027cbc <LECTRL_LeAdvertisingReportEvent>:
 8027cbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027cc0:	b085      	sub	sp, #20
 8027cc2:	f10d 0804 	add.w	r8, sp, #4
 8027cc6:	f890 a000 	ldrb.w	sl, [r0]
 8027cca:	4604      	mov	r4, r0
 8027ccc:	f04f 0b00 	mov.w	fp, #0
 8027cd0:	2701      	movs	r7, #1
 8027cd2:	2600      	movs	r6, #0
 8027cd4:	2500      	movs	r5, #0
 8027cd6:	f108 0902 	add.w	r9, r8, #2
 8027cda:	4555      	cmp	r5, sl
 8027cdc:	d23b      	bcs.n	8027d56 <LECTRL_LeAdvertisingReportEvent+0x9a>
 8027cde:	b2f8      	uxtb	r0, r7
 8027ce0:	2206      	movs	r2, #6
 8027ce2:	5c20      	ldrb	r0, [r4, r0]
 8027ce4:	f88d 0004 	strb.w	r0, [sp, #4]
 8027ce8:	1c78      	adds	r0, r7, #1
 8027cea:	b2c0      	uxtb	r0, r0
 8027cec:	5c20      	ldrb	r0, [r4, r0]
 8027cee:	f88d 0005 	strb.w	r0, [sp, #5]
 8027cf2:	1cb8      	adds	r0, r7, #2
 8027cf4:	b2c0      	uxtb	r0, r0
 8027cf6:	1821      	adds	r1, r4, r0
 8027cf8:	4648      	mov	r0, r9
 8027cfa:	f7fc fc25 	bl	8024548 <ble_memcpy>
 8027cfe:	f107 0008 	add.w	r0, r7, #8
 8027d02:	b2c0      	uxtb	r0, r0
 8027d04:	5c22      	ldrb	r2, [r4, r0]
 8027d06:	f107 0009 	add.w	r0, r7, #9
 8027d0a:	b2c1      	uxtb	r1, r0
 8027d0c:	1817      	adds	r7, r2, r0
 8027d0e:	f88d 200c 	strb.w	r2, [sp, #12]
 8027d12:	1863      	adds	r3, r4, r1
 8027d14:	b2f8      	uxtb	r0, r7
 8027d16:	0e19      	lsrs	r1, r3, #24
 8027d18:	5c20      	ldrb	r0, [r4, r0]
 8027d1a:	f88d 300d 	strb.w	r3, [sp, #13]
 8027d1e:	f88d 1010 	strb.w	r1, [sp, #16]
 8027d22:	0c19      	lsrs	r1, r3, #16
 8027d24:	f88d 0011 	strb.w	r0, [sp, #17]
 8027d28:	2000      	movs	r0, #0
 8027d2a:	f88d 100f 	strb.w	r1, [sp, #15]
 8027d2e:	0a19      	lsrs	r1, r3, #8
 8027d30:	f88d 100e 	strb.w	r1, [sp, #14]
 8027d34:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8027d38:	f000 fd62 	bl	8028800 <GAP_Advertising_Report_Handler>
 8027d3c:	b140      	cbz	r0, 8027d50 <LECTRL_LeAdvertisingReportEvent+0x94>
 8027d3e:	2001      	movs	r0, #1
 8027d40:	4641      	mov	r1, r8
 8027d42:	f7fe fca1 	bl	8026688 <hci_le_advertising_report_event>
 8027d46:	4683      	mov	fp, r0
 8027d48:	b108      	cbz	r0, 8027d4e <LECTRL_LeAdvertisingReportEvent+0x92>
 8027d4a:	0630      	lsls	r0, r6, #24
 8027d4c:	d003      	beq.n	8027d56 <LECTRL_LeAdvertisingReportEvent+0x9a>
 8027d4e:	3601      	adds	r6, #1
 8027d50:	3701      	adds	r7, #1
 8027d52:	3501      	adds	r5, #1
 8027d54:	e7c1      	b.n	8027cda <LECTRL_LeAdvertisingReportEvent+0x1e>
 8027d56:	fa5f f08b 	uxtb.w	r0, fp
 8027d5a:	b005      	add	sp, #20
 8027d5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08027d60 <LECTRL_LeConnectionUpdateCompleteEvent>:
 8027d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8027d62:	7a01      	ldrb	r1, [r0, #8]
 8027d64:	79c2      	ldrb	r2, [r0, #7]
 8027d66:	7943      	ldrb	r3, [r0, #5]
 8027d68:	7985      	ldrb	r5, [r0, #6]
 8027d6a:	7804      	ldrb	r4, [r0, #0]
 8027d6c:	7846      	ldrb	r6, [r0, #1]
 8027d6e:	7887      	ldrb	r7, [r0, #2]
 8027d70:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
 8027d74:	7902      	ldrb	r2, [r0, #4]
 8027d76:	78c0      	ldrb	r0, [r0, #3]
 8027d78:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 8027d7c:	b289      	uxth	r1, r1
 8027d7e:	b282      	uxth	r2, r0
 8027d80:	ea43 2005 	orr.w	r0, r3, r5, lsl #8
 8027d84:	9100      	str	r1, [sp, #0]
 8027d86:	b283      	uxth	r3, r0
 8027d88:	ea46 2007 	orr.w	r0, r6, r7, lsl #8
 8027d8c:	3001      	adds	r0, #1
 8027d8e:	b281      	uxth	r1, r0
 8027d90:	4620      	mov	r0, r4
 8027d92:	f7fe fcc9 	bl	8026728 <hci_le_connection_update_complete_event>
 8027d96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08027d98 <LECTRL_LeReadRemoteUsedFeaturesCompleteEvent>:
 8027d98:	1cc2      	adds	r2, r0, #3
 8027d9a:	7803      	ldrb	r3, [r0, #0]
 8027d9c:	7841      	ldrb	r1, [r0, #1]
 8027d9e:	7880      	ldrb	r0, [r0, #2]
 8027da0:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
 8027da4:	3001      	adds	r0, #1
 8027da6:	b281      	uxth	r1, r0
 8027da8:	4618      	mov	r0, r3
 8027daa:	f7fe bce3 	b.w	8026774 <hci_le_read_remote_features_complete_event>

08027dae <LECTRL_LeLongTermKeyRequestEvent>:
 8027dae:	b570      	push	{r4, r5, r6, lr}
 8027db0:	4604      	mov	r4, r0
 8027db2:	f814 0b02 	ldrb.w	r0, [r4], #2
 8027db6:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 8027dba:	7a22      	ldrb	r2, [r4, #8]
 8027dbc:	7a63      	ldrb	r3, [r4, #9]
 8027dbe:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8027dc2:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
 8027dc6:	4621      	mov	r1, r4
 8027dc8:	b295      	uxth	r5, r2
 8027dca:	3001      	adds	r0, #1
 8027dcc:	462a      	mov	r2, r5
 8027dce:	b286      	uxth	r6, r0
 8027dd0:	4630      	mov	r0, r6
 8027dd2:	f005 f851 	bl	802ce78 <SMP_LTK_Request_Handler>
 8027dd6:	b130      	cbz	r0, 8027de6 <LECTRL_LeLongTermKeyRequestEvent+0x38>
 8027dd8:	4630      	mov	r0, r6
 8027dda:	4621      	mov	r1, r4
 8027ddc:	462a      	mov	r2, r5
 8027dde:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8027de2:	f7fe bce0 	b.w	80267a6 <hci_le_long_term_key_request_event>
 8027de6:	2000      	movs	r0, #0
 8027de8:	bd70      	pop	{r4, r5, r6, pc}

08027dea <LECTRL_LeRemoteConnParamReqEvent>:
 8027dea:	2000      	movs	r0, #0
 8027dec:	4770      	bx	lr

08027dee <LECTRL_LeDataLengthChangeEvent>:
 8027dee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8027df0:	7a41      	ldrb	r1, [r0, #9]
 8027df2:	7a02      	ldrb	r2, [r0, #8]
 8027df4:	f890 c000 	ldrb.w	ip, [r0]
 8027df8:	7845      	ldrb	r5, [r0, #1]
 8027dfa:	7886      	ldrb	r6, [r0, #2]
 8027dfc:	78c7      	ldrb	r7, [r0, #3]
 8027dfe:	7983      	ldrb	r3, [r0, #6]
 8027e00:	79c4      	ldrb	r4, [r0, #7]
 8027e02:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
 8027e06:	7902      	ldrb	r2, [r0, #4]
 8027e08:	7940      	ldrb	r0, [r0, #5]
 8027e0a:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
 8027e0e:	b289      	uxth	r1, r1
 8027e10:	b282      	uxth	r2, r0
 8027e12:	ea43 2004 	orr.w	r0, r3, r4, lsl #8
 8027e16:	9100      	str	r1, [sp, #0]
 8027e18:	b283      	uxth	r3, r0
 8027e1a:	ea46 2007 	orr.w	r0, r6, r7, lsl #8
 8027e1e:	b281      	uxth	r1, r0
 8027e20:	ea4c 2005 	orr.w	r0, ip, r5, lsl #8
 8027e24:	3001      	adds	r0, #1
 8027e26:	b280      	uxth	r0, r0
 8027e28:	f7fe fcdc 	bl	80267e4 <hci_le_data_length_change_event>
 8027e2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08027e2e <LECTRL_LeEnhancedConnectionCompleteEvent>:
 8027e2e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027e32:	b08d      	sub	sp, #52	@ 0x34
 8027e34:	7dc1      	ldrb	r1, [r0, #23]
 8027e36:	7906      	ldrb	r6, [r0, #4]
 8027e38:	f890 a01c 	ldrb.w	sl, [r0, #28]
 8027e3c:	7804      	ldrb	r4, [r0, #0]
 8027e3e:	7882      	ldrb	r2, [r0, #2]
 8027e40:	78c5      	ldrb	r5, [r0, #3]
 8027e42:	f100 0b0b 	add.w	fp, r0, #11
 8027e46:	f100 0805 	add.w	r8, r0, #5
 8027e4a:	f100 0911 	add.w	r9, r0, #17
 8027e4e:	910b      	str	r1, [sp, #44]	@ 0x2c
 8027e50:	7e01      	ldrb	r1, [r0, #24]
 8027e52:	4633      	mov	r3, r6
 8027e54:	910a      	str	r1, [sp, #40]	@ 0x28
 8027e56:	7e41      	ldrb	r1, [r0, #25]
 8027e58:	9109      	str	r1, [sp, #36]	@ 0x24
 8027e5a:	7e81      	ldrb	r1, [r0, #26]
 8027e5c:	9108      	str	r1, [sp, #32]
 8027e5e:	7ec1      	ldrb	r1, [r0, #27]
 8027e60:	9107      	str	r1, [sp, #28]
 8027e62:	7f41      	ldrb	r1, [r0, #29]
 8027e64:	910c      	str	r1, [sp, #48]	@ 0x30
 8027e66:	7841      	ldrb	r1, [r0, #1]
 8027e68:	07b0      	lsls	r0, r6, #30
 8027e6a:	4648      	mov	r0, r9
 8027e6c:	bf58      	it	pl
 8027e6e:	4640      	movpl	r0, r8
 8027e70:	e9cd 0b00 	strd	r0, fp, [sp]
 8027e74:	2e00      	cmp	r6, #0
 8027e76:	bf18      	it	ne
 8027e78:	2301      	movne	r3, #1
 8027e7a:	ea41 2002 	orr.w	r0, r1, r2, lsl #8
 8027e7e:	462a      	mov	r2, r5
 8027e80:	3001      	adds	r0, #1
 8027e82:	b287      	uxth	r7, r0
 8027e84:	4620      	mov	r0, r4
 8027e86:	4639      	mov	r1, r7
 8027e88:	f000 fa46 	bl	8028318 <GAP_Connection_Complete_Handler>
 8027e8c:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 8027e90:	9807      	ldr	r0, [sp, #28]
 8027e92:	e9cd 8b00 	strd	r8, fp, [sp]
 8027e96:	ea40 200a 	orr.w	r0, r0, sl, lsl #8
 8027e9a:	b280      	uxth	r0, r0
 8027e9c:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
 8027ea0:	e9dd 320a 	ldrd	r3, r2, [sp, #40]	@ 0x28
 8027ea4:	b289      	uxth	r1, r1
 8027ea6:	e9cd 1004 	strd	r1, r0, [sp, #16]
 8027eaa:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8027eac:	4639      	mov	r1, r7
 8027eae:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8027eb2:	9006      	str	r0, [sp, #24]
 8027eb4:	4620      	mov	r0, r4
 8027eb6:	4633      	mov	r3, r6
 8027eb8:	b292      	uxth	r2, r2
 8027eba:	e9cd 9202 	strd	r9, r2, [sp, #8]
 8027ebe:	462a      	mov	r2, r5
 8027ec0:	f7fe fcce 	bl	8026860 <hci_le_enhanced_connection_complete_event>
 8027ec4:	b00d      	add	sp, #52	@ 0x34
 8027ec6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08027eca <LECTRL_LeDirectedAdvertisingReportEvent>:
 8027eca:	b5bf      	push	{r0, r1, r2, r3, r4, r5, r7, lr}
 8027ecc:	4604      	mov	r4, r0
 8027ece:	7840      	ldrb	r0, [r0, #1]
 8027ed0:	466d      	mov	r5, sp
 8027ed2:	2206      	movs	r2, #6
 8027ed4:	78a1      	ldrb	r1, [r4, #2]
 8027ed6:	f88d 0000 	strb.w	r0, [sp]
 8027eda:	1ca8      	adds	r0, r5, #2
 8027edc:	f88d 1001 	strb.w	r1, [sp, #1]
 8027ee0:	1ce1      	adds	r1, r4, #3
 8027ee2:	f7fc fb31 	bl	8024548 <ble_memcpy>
 8027ee6:	7a60      	ldrb	r0, [r4, #9]
 8027ee8:	f104 010a 	add.w	r1, r4, #10
 8027eec:	2206      	movs	r2, #6
 8027eee:	f88d 0008 	strb.w	r0, [sp, #8]
 8027ef2:	f105 0009 	add.w	r0, r5, #9
 8027ef6:	f7fc fb27 	bl	8024548 <ble_memcpy>
 8027efa:	7c20      	ldrb	r0, [r4, #16]
 8027efc:	4629      	mov	r1, r5
 8027efe:	f88d 000f 	strb.w	r0, [sp, #15]
 8027f02:	2001      	movs	r0, #1
 8027f04:	f7fe fcea 	bl	80268dc <hci_le_directed_advertising_report_event>
 8027f08:	b004      	add	sp, #16
 8027f0a:	bdb0      	pop	{r4, r5, r7, pc}

08027f0c <LECTRL_LePhyUpdateCompleteEvent>:
 8027f0c:	b5b0      	push	{r4, r5, r7, lr}
 8027f0e:	7841      	ldrb	r1, [r0, #1]
 8027f10:	7885      	ldrb	r5, [r0, #2]
 8027f12:	7903      	ldrb	r3, [r0, #4]
 8027f14:	7804      	ldrb	r4, [r0, #0]
 8027f16:	78c2      	ldrb	r2, [r0, #3]
 8027f18:	ea41 2005 	orr.w	r0, r1, r5, lsl #8
 8027f1c:	3001      	adds	r0, #1
 8027f1e:	b281      	uxth	r1, r0
 8027f20:	4620      	mov	r0, r4
 8027f22:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8027f26:	f7fe bd13 	b.w	8026950 <hci_le_phy_update_complete_event>

08027f2a <LECTRL_LeChannelSelectionAlgorithmEvent>:
 8027f2a:	7802      	ldrb	r2, [r0, #0]
 8027f2c:	7843      	ldrb	r3, [r0, #1]
 8027f2e:	7881      	ldrb	r1, [r0, #2]
 8027f30:	ea42 2003 	orr.w	r0, r2, r3, lsl #8
 8027f34:	3001      	adds	r0, #1
 8027f36:	b280      	uxth	r0, r0
 8027f38:	f7fe bd24 	b.w	8026984 <hci_le_channel_selection_algorithm_event>

08027f3c <LECTRL_DisconnectionComplete>:
 8027f3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8027f40:	7841      	ldrb	r1, [r0, #1]
 8027f42:	7882      	ldrb	r2, [r0, #2]
 8027f44:	4c12      	ldr	r4, [pc, #72]	@ (8027f90 <__arm_cp.14_0>)
 8027f46:	f890 8000 	ldrb.w	r8, [r0]
 8027f4a:	78c5      	ldrb	r5, [r0, #3]
 8027f4c:	2301      	movs	r3, #1
 8027f4e:	ea41 2702 	orr.w	r7, r1, r2, lsl #8
 8027f52:	2200      	movs	r2, #0
 8027f54:	f104 001c 	add.w	r0, r4, #28
 8027f58:	1c79      	adds	r1, r7, #1
 8027f5a:	b28e      	uxth	r6, r1
 8027f5c:	4631      	mov	r1, r6
 8027f5e:	f000 f8a1 	bl	80280a4 <LECTRL_AclPacketTransmitted>
 8027f62:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8027f66:	4631      	mov	r1, r6
 8027f68:	2200      	movs	r2, #0
 8027f6a:	2301      	movs	r3, #1
 8027f6c:	f000 f89a 	bl	80280a4 <LECTRL_AclPacketTransmitted>
 8027f70:	4630      	mov	r0, r6
 8027f72:	f000 f9f3 	bl	802835c <GAP_Disconnection_Complete_Handler>
 8027f76:	4640      	mov	r0, r8
 8027f78:	4631      	mov	r1, r6
 8027f7a:	462a      	mov	r2, r5
 8027f7c:	f7fe fae7 	bl	802654e <hci_disconnection_complete_event>
 8027f80:	4604      	mov	r4, r0
 8027f82:	b910      	cbnz	r0, 8027f8a <LECTRL_DisconnectionComplete+0x4e>
 8027f84:	b2b8      	uxth	r0, r7
 8027f86:	f7ec ff4e 	bl	8014e26 <ll_intf_clear_event>
 8027f8a:	4620      	mov	r0, r4
 8027f8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08027f90 <__arm_cp.14_0>:
 8027f90:	2000a198 	.word	0x2000a198

08027f94 <LECTRL_EncryptionChangeEvent>:
 8027f94:	b570      	push	{r4, r5, r6, lr}
 8027f96:	7841      	ldrb	r1, [r0, #1]
 8027f98:	7882      	ldrb	r2, [r0, #2]
 8027f9a:	78c5      	ldrb	r5, [r0, #3]
 8027f9c:	7804      	ldrb	r4, [r0, #0]
 8027f9e:	ea41 2002 	orr.w	r0, r1, r2, lsl #8
 8027fa2:	4621      	mov	r1, r4
 8027fa4:	462b      	mov	r3, r5
 8027fa6:	3001      	adds	r0, #1
 8027fa8:	b286      	uxth	r6, r0
 8027faa:	2000      	movs	r0, #0
 8027fac:	4632      	mov	r2, r6
 8027fae:	f004 ffbb 	bl	802cf28 <SMP_Encryption_Update_Handler>
 8027fb2:	4620      	mov	r0, r4
 8027fb4:	4631      	mov	r1, r6
 8027fb6:	462a      	mov	r2, r5
 8027fb8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8027fbc:	f7fe badc 	b.w	8026578 <hci_encryption_change_event>

08027fc0 <LECTRL_ReadRemoteVersionInformationComplete>:
 8027fc0:	b57c      	push	{r2, r3, r4, r5, r6, lr}
 8027fc2:	79c1      	ldrb	r1, [r0, #7]
 8027fc4:	7982      	ldrb	r2, [r0, #6]
 8027fc6:	7804      	ldrb	r4, [r0, #0]
 8027fc8:	7845      	ldrb	r5, [r0, #1]
 8027fca:	7886      	ldrb	r6, [r0, #2]
 8027fcc:	7903      	ldrb	r3, [r0, #4]
 8027fce:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
 8027fd2:	78c2      	ldrb	r2, [r0, #3]
 8027fd4:	7940      	ldrb	r0, [r0, #5]
 8027fd6:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 8027fda:	b289      	uxth	r1, r1
 8027fdc:	b283      	uxth	r3, r0
 8027fde:	ea45 2006 	orr.w	r0, r5, r6, lsl #8
 8027fe2:	9100      	str	r1, [sp, #0]
 8027fe4:	3001      	adds	r0, #1
 8027fe6:	b281      	uxth	r1, r0
 8027fe8:	4620      	mov	r0, r4
 8027fea:	f7fe fad2 	bl	8026592 <hci_read_remote_version_information_complete_event>
 8027fee:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

08027ff0 <LECTRL_HwErrorEvent>:
 8027ff0:	7800      	ldrb	r0, [r0, #0]
 8027ff2:	f7fe baf1 	b.w	80265d8 <hci_hardware_error_event>
	...

08027ff8 <LECTRL_NumberOfCompletedPacketsEvent>:
 8027ff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027ffc:	b0bf      	sub	sp, #252	@ 0xfc
 8027ffe:	46e8      	mov	r8, sp
 8028000:	4681      	mov	r9, r0
 8028002:	7804      	ldrb	r4, [r0, #0]
 8028004:	2100      	movs	r1, #0
 8028006:	22fc      	movs	r2, #252	@ 0xfc
 8028008:	2700      	movs	r7, #0
 802800a:	4640      	mov	r0, r8
 802800c:	f7fc faec 	bl	80245e8 <ble_memset>
 8028010:	f004 007f 	and.w	r0, r4, #127	@ 0x7f
 8028014:	ea4f 0b44 	mov.w	fp, r4, lsl #1
 8028018:	2502      	movs	r5, #2
 802801a:	eb09 0a40 	add.w	sl, r9, r0, lsl #1
 802801e:	4814      	ldr	r0, [pc, #80]	@ (8028070 <__arm_cp.18_0>)
 8028020:	f100 061c 	add.w	r6, r0, #28
 8028024:	45bb      	cmp	fp, r7
 8028026:	d01f      	beq.n	8028068 <LECTRL_NumberOfCompletedPacketsEvent+0x70>
 8028028:	eb09 0107 	add.w	r1, r9, r7
 802802c:	eb0a 0007 	add.w	r0, sl, r7
 8028030:	eb08 0305 	add.w	r3, r8, r5
 8028034:	784c      	ldrb	r4, [r1, #1]
 8028036:	7889      	ldrb	r1, [r1, #2]
 8028038:	7842      	ldrb	r2, [r0, #1]
 802803a:	7880      	ldrb	r0, [r0, #2]
 802803c:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
 8028040:	f808 2005 	strb.w	r2, [r8, r5]
 8028044:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8028048:	7058      	strb	r0, [r3, #1]
 802804a:	4630      	mov	r0, r6
 802804c:	3101      	adds	r1, #1
 802804e:	f803 1c02 	strb.w	r1, [r3, #-2]
 8028052:	f36f 311f 	bfc	r1, #12, #20
 8028056:	0a0c      	lsrs	r4, r1, #8
 8028058:	f803 4c01 	strb.w	r4, [r3, #-1]
 802805c:	2300      	movs	r3, #0
 802805e:	f000 f821 	bl	80280a4 <LECTRL_AclPacketTransmitted>
 8028062:	3504      	adds	r5, #4
 8028064:	3702      	adds	r7, #2
 8028066:	e7dd      	b.n	8028024 <LECTRL_NumberOfCompletedPacketsEvent+0x2c>
 8028068:	2000      	movs	r0, #0
 802806a:	b03f      	add	sp, #252	@ 0xfc
 802806c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08028070 <__arm_cp.18_0>:
 8028070:	2000a198 	.word	0x2000a198

08028074 <LECTRL_DataBufferOverflowEvent>:
 8028074:	2000      	movs	r0, #0
 8028076:	4770      	bx	lr

08028078 <LECTRL_EncryptionKeyRefreshCompleteEvent>:
 8028078:	b5b0      	push	{r4, r5, r7, lr}
 802807a:	7804      	ldrb	r4, [r0, #0]
 802807c:	7841      	ldrb	r1, [r0, #1]
 802807e:	7880      	ldrb	r0, [r0, #2]
 8028080:	2301      	movs	r3, #1
 8028082:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
 8028086:	4621      	mov	r1, r4
 8028088:	3001      	adds	r0, #1
 802808a:	b285      	uxth	r5, r0
 802808c:	2001      	movs	r0, #1
 802808e:	462a      	mov	r2, r5
 8028090:	f004 ff4a 	bl	802cf28 <SMP_Encryption_Update_Handler>
 8028094:	4620      	mov	r0, r4
 8028096:	4629      	mov	r1, r5
 8028098:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 802809c:	f7fe baad 	b.w	80265fa <hci_encryption_key_refresh_complete_event>

080280a0 <LECTRL_AutPayloadTimeoutEvent>:
 80280a0:	2000      	movs	r0, #0
 80280a2:	4770      	bx	lr

080280a4 <LECTRL_AclPacketTransmitted>:
 80280a4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80280a8:	4680      	mov	r8, r0
 80280aa:	6805      	ldr	r5, [r0, #0]
 80280ac:	4618      	mov	r0, r3
 80280ae:	2b00      	cmp	r3, #0
 80280b0:	461c      	mov	r4, r3
 80280b2:	4692      	mov	sl, r2
 80280b4:	460e      	mov	r6, r1
 80280b6:	f04f 0b00 	mov.w	fp, #0
 80280ba:	bf18      	it	ne
 80280bc:	2001      	movne	r0, #1
 80280be:	ea4f 0980 	mov.w	r9, r0, lsl #2
 80280c2:	fa5f f08b 	uxtb.w	r0, fp
 80280c6:	4621      	mov	r1, r4
 80280c8:	4550      	cmp	r0, sl
 80280ca:	f04f 0000 	mov.w	r0, #0
 80280ce:	bf38      	it	cc
 80280d0:	2001      	movcc	r0, #1
 80280d2:	2c00      	cmp	r4, #0
 80280d4:	bf18      	it	ne
 80280d6:	2101      	movne	r1, #1
 80280d8:	4308      	orrs	r0, r1
 80280da:	b1bd      	cbz	r5, 802810c <LECTRL_AclPacketTransmitted+0x68>
 80280dc:	f090 0101 	eors.w	r1, r0, #1
 80280e0:	d114      	bne.n	802810c <LECTRL_AclPacketTransmitted+0x68>
 80280e2:	462f      	mov	r7, r5
 80280e4:	682d      	ldr	r5, [r5, #0]
 80280e6:	8939      	ldrh	r1, [r7, #8]
 80280e8:	42b1      	cmp	r1, r6
 80280ea:	d1f6      	bne.n	80280da <LECTRL_AclPacketTransmitted+0x36>
 80280ec:	79b8      	ldrb	r0, [r7, #6]
 80280ee:	4639      	mov	r1, r7
 80280f0:	f000 00fb 	and.w	r0, r0, #251	@ 0xfb
 80280f4:	ea40 0009 	orr.w	r0, r0, r9
 80280f8:	71b8      	strb	r0, [r7, #6]
 80280fa:	4640      	mov	r0, r8
 80280fc:	f004 f98c 	bl	802c418 <ACL_List_Remove>
 8028100:	4638      	mov	r0, r7
 8028102:	f003 febf 	bl	802be84 <L2C_Tx_Data_Conplete_Handler>
 8028106:	f10b 0b01 	add.w	fp, fp, #1
 802810a:	e7da      	b.n	80280c2 <LECTRL_AclPacketTransmitted+0x1e>
 802810c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08028110 <CfgData_Init>:
 8028110:	b510      	push	{r4, lr}
 8028112:	4c0f      	ldr	r4, [pc, #60]	@ (8028150 <__arm_cp.0_0>)
 8028114:	f44f 7020 	mov.w	r0, #640	@ 0x280
 8028118:	80a0      	strh	r0, [r4, #4]
 802811a:	20e1      	movs	r0, #225	@ 0xe1
 802811c:	70e0      	strb	r0, [r4, #3]
 802811e:	480d      	ldr	r0, [pc, #52]	@ (8028154 <__arm_cp.0_1>)
 8028120:	f890 0024 	ldrb.w	r0, [r0, #36]	@ 0x24
 8028124:	06c0      	lsls	r0, r0, #27
 8028126:	bf58      	it	pl
 8028128:	bd10      	poppl	{r4, pc}
 802812a:	f104 0008 	add.w	r0, r4, #8
 802812e:	21dd      	movs	r1, #221	@ 0xdd
 8028130:	2210      	movs	r2, #16
 8028132:	f7fc fa59 	bl	80245e8 <ble_memset>
 8028136:	f104 0018 	add.w	r0, r4, #24
 802813a:	21aa      	movs	r1, #170	@ 0xaa
 802813c:	2210      	movs	r2, #16
 802813e:	f7fc fa53 	bl	80245e8 <ble_memset>
 8028142:	f104 002e 	add.w	r0, r4, #46	@ 0x2e
 8028146:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802814a:	f007 b84f 	b.w	802f1ec <RndAddr_Generate_Static_Address>
 802814e:	bf00      	nop

08028150 <__arm_cp.0_0>:
 8028150:	20009f5c 	.word	0x20009f5c

08028154 <__arm_cp.0_1>:
 8028154:	20009f34 	.word	0x20009f34

08028158 <CfgData_Write>:
 8028158:	b580      	push	{r7, lr}
 802815a:	460b      	mov	r3, r1
 802815c:	b908      	cbnz	r0, 8028162 <CfgData_Write+0xa>
 802815e:	2b06      	cmp	r3, #6
 8028160:	d01c      	beq.n	802819c <CfgData_Write+0x44>
 8028162:	2808      	cmp	r0, #8
 8028164:	bf08      	it	eq
 8028166:	2b10      	cmpeq	r3, #16
 8028168:	d018      	beq.n	802819c <CfgData_Write+0x44>
 802816a:	2818      	cmp	r0, #24
 802816c:	bf08      	it	eq
 802816e:	2b10      	cmpeq	r3, #16
 8028170:	d014      	beq.n	802819c <CfgData_Write+0x44>
 8028172:	282e      	cmp	r0, #46	@ 0x2e
 8028174:	bf08      	it	eq
 8028176:	2b06      	cmpeq	r3, #6
 8028178:	d010      	beq.n	802819c <CfgData_Write+0x44>
 802817a:	2834      	cmp	r0, #52	@ 0x34
 802817c:	bf08      	it	eq
 802817e:	2b01      	cmpeq	r3, #1
 8028180:	d00c      	beq.n	802819c <CfgData_Write+0x44>
 8028182:	2835      	cmp	r0, #53	@ 0x35
 8028184:	bf08      	it	eq
 8028186:	2b01      	cmpeq	r3, #1
 8028188:	d008      	beq.n	802819c <CfgData_Write+0x44>
 802818a:	28b0      	cmp	r0, #176	@ 0xb0
 802818c:	bf1c      	itt	ne
 802818e:	2012      	movne	r0, #18
 8028190:	bd80      	popne	{r7, pc}
 8028192:	4906      	ldr	r1, [pc, #24]	@ (80281ac <__arm_cp.1_0>)
 8028194:	7810      	ldrb	r0, [r2, #0]
 8028196:	f881 0098 	strb.w	r0, [r1, #152]	@ 0x98
 802819a:	e005      	b.n	80281a8 <CfgData_Write+0x50>
 802819c:	4903      	ldr	r1, [pc, #12]	@ (80281ac <__arm_cp.1_0>)
 802819e:	4408      	add	r0, r1
 80281a0:	4611      	mov	r1, r2
 80281a2:	461a      	mov	r2, r3
 80281a4:	f7fc f9d0 	bl	8024548 <ble_memcpy>
 80281a8:	2000      	movs	r0, #0
 80281aa:	bd80      	pop	{r7, pc}

080281ac <__arm_cp.1_0>:
 80281ac:	20009f5c 	.word	0x20009f5c

080281b0 <hci_le_read_local_p256_public_key>:
 80281b0:	b570      	push	{r4, r5, r6, lr}
 80281b2:	4e14      	ldr	r6, [pc, #80]	@ (8028204 <__arm_cp.1_0>)
 80281b4:	f896 0060 	ldrb.w	r0, [r6, #96]	@ 0x60
 80281b8:	b9e8      	cbnz	r0, 80281f6 <hci_le_read_local_p256_public_key+0x46>
 80281ba:	f896 0035 	ldrb.w	r0, [r6, #53]	@ 0x35
 80281be:	b130      	cbz	r0, 80281ce <hci_le_read_local_p256_public_key+0x1e>
 80281c0:	4911      	ldr	r1, [pc, #68]	@ (8028208 <__arm_cp.1_1>)
 80281c2:	f106 0040 	add.w	r0, r6, #64	@ 0x40
 80281c6:	2220      	movs	r2, #32
 80281c8:	f7fc f9be 	bl	8024548 <ble_memcpy>
 80281cc:	e00e      	b.n	80281ec <hci_le_read_local_p256_public_key+0x3c>
 80281ce:	4d0f      	ldr	r5, [pc, #60]	@ (802820c <__arm_cp.1_2>)
 80281d0:	f106 0440 	add.w	r4, r6, #64	@ 0x40
 80281d4:	2008      	movs	r0, #8
 80281d6:	4621      	mov	r1, r4
 80281d8:	f7e1 fbd9 	bl	800998e <BLEPLAT_RngGet>
 80281dc:	4620      	mov	r0, r4
 80281de:	4629      	mov	r1, r5
 80281e0:	2220      	movs	r2, #32
 80281e2:	f007 f87c 	bl	802f2de <Memcmp_Rev>
 80281e6:	f1b0 3fff 	cmp.w	r0, #4294967295	@ 0xffffffff
 80281ea:	dcf3      	bgt.n	80281d4 <hci_le_read_local_p256_public_key+0x24>
 80281ec:	f106 0040 	add.w	r0, r6, #64	@ 0x40
 80281f0:	f7e1 fc06 	bl	8009a00 <BLEPLAT_PkaStartP256Key>
 80281f4:	b108      	cbz	r0, 80281fa <hci_le_read_local_p256_public_key+0x4a>
 80281f6:	203a      	movs	r0, #58	@ 0x3a
 80281f8:	bd70      	pop	{r4, r5, r6, pc}
 80281fa:	2001      	movs	r0, #1
 80281fc:	f886 0060 	strb.w	r0, [r6, #96]	@ 0x60
 8028200:	2000      	movs	r0, #0
 8028202:	bd70      	pop	{r4, r5, r6, pc}

08028204 <__arm_cp.1_0>:
 8028204:	20009f5c 	.word	0x20009f5c

08028208 <__arm_cp.1_1>:
 8028208:	08031e54 	.word	0x08031e54

0802820c <__arm_cp.1_2>:
 802820c:	08031e74 	.word	0x08031e74

08028210 <hci_le_generate_dhkey>:
 8028210:	b5f0      	push	{r4, r5, r6, r7, lr}
 8028212:	b091      	sub	sp, #68	@ 0x44
 8028214:	4f10      	ldr	r7, [pc, #64]	@ (8028258 <__arm_cp.2_0>)
 8028216:	4604      	mov	r4, r0
 8028218:	f897 0060 	ldrb.w	r0, [r7, #96]	@ 0x60
 802821c:	b108      	cbz	r0, 8028222 <hci_le_generate_dhkey+0x12>
 802821e:	203a      	movs	r0, #58	@ 0x3a
 8028220:	e007      	b.n	8028232 <hci_le_generate_dhkey+0x22>
 8028222:	f107 0540 	add.w	r5, r7, #64	@ 0x40
 8028226:	2120      	movs	r1, #32
 8028228:	4628      	mov	r0, r5
 802822a:	f007 f842 	bl	802f2b2 <Is_Empty>
 802822e:	b110      	cbz	r0, 8028236 <hci_le_generate_dhkey+0x26>
 8028230:	201f      	movs	r0, #31
 8028232:	b011      	add	sp, #68	@ 0x44
 8028234:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8028236:	ae01      	add	r6, sp, #4
 8028238:	4621      	mov	r1, r4
 802823a:	2240      	movs	r2, #64	@ 0x40
 802823c:	4630      	mov	r0, r6
 802823e:	f7fc f983 	bl	8024548 <ble_memcpy>
 8028242:	4628      	mov	r0, r5
 8028244:	4631      	mov	r1, r6
 8028246:	f7e1 fbf2 	bl	8009a2e <BLEPLAT_PkaStartDhKey>
 802824a:	2800      	cmp	r0, #0
 802824c:	d1e7      	bne.n	802821e <hci_le_generate_dhkey+0xe>
 802824e:	2002      	movs	r0, #2
 8028250:	f887 0060 	strb.w	r0, [r7, #96]	@ 0x60
 8028254:	2000      	movs	r0, #0
 8028256:	e7ec      	b.n	8028232 <hci_le_generate_dhkey+0x22>

08028258 <__arm_cp.2_0>:
 8028258:	20009f5c 	.word	0x20009f5c

0802825c <BLEPLATCB_PkaComplete>:
 802825c:	b5b0      	push	{r4, r5, r7, lr}
 802825e:	b090      	sub	sp, #64	@ 0x40
 8028260:	4d12      	ldr	r5, [pc, #72]	@ (80282ac <__arm_cp.3_0>)
 8028262:	f895 0060 	ldrb.w	r0, [r5, #96]	@ 0x60
 8028266:	2802      	cmp	r0, #2
 8028268:	d00b      	beq.n	8028282 <BLEPLATCB_PkaComplete+0x26>
 802826a:	2801      	cmp	r0, #1
 802826c:	d119      	bne.n	80282a2 <BLEPLATCB_PkaComplete+0x46>
 802826e:	466c      	mov	r4, sp
 8028270:	4620      	mov	r0, r4
 8028272:	f7e1 fbd1 	bl	8009a18 <BLEPLAT_PkaReadP256Key>
 8028276:	2000      	movs	r0, #0
 8028278:	2100      	movs	r1, #0
 802827a:	4622      	mov	r2, r4
 802827c:	f7ff fcc0 	bl	8027c00 <LECTRL_LeReadLocalP256PublicKeyCompleteEvent>
 8028280:	e00f      	b.n	80282a2 <BLEPLATCB_PkaComplete+0x46>
 8028282:	4668      	mov	r0, sp
 8028284:	f7e1 fbe1 	bl	8009a4a <BLEPLAT_PkaReadDhKey>
 8028288:	b130      	cbz	r0, 8028298 <BLEPLATCB_PkaComplete+0x3c>
 802828a:	4668      	mov	r0, sp
 802828c:	21ff      	movs	r1, #255	@ 0xff
 802828e:	2220      	movs	r2, #32
 8028290:	f7fc f9aa 	bl	80245e8 <ble_memset>
 8028294:	2112      	movs	r1, #18
 8028296:	e000      	b.n	802829a <BLEPLATCB_PkaComplete+0x3e>
 8028298:	2100      	movs	r1, #0
 802829a:	466a      	mov	r2, sp
 802829c:	2000      	movs	r0, #0
 802829e:	f7ff fcc9 	bl	8027c34 <LECTRL_LeGeneratedDHKeyCompleteEvent>
 80282a2:	2000      	movs	r0, #0
 80282a4:	f885 0060 	strb.w	r0, [r5, #96]	@ 0x60
 80282a8:	b010      	add	sp, #64	@ 0x40
 80282aa:	bdb0      	pop	{r4, r5, r7, pc}

080282ac <__arm_cp.3_0>:
 80282ac:	20009f5c 	.word	0x20009f5c

080282b0 <GAP_Init>:
 80282b0:	4770      	bx	lr
	...

080282b4 <aci_gap_init>:
 80282b4:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
 80282b8:	4d16      	ldr	r5, [pc, #88]	@ (8028314 <__arm_cp.1_0>)
 80282ba:	4607      	mov	r7, r0
 80282bc:	f895 01a8 	ldrb.w	r0, [r5, #424]	@ 0x1a8
 80282c0:	b110      	cbz	r0, 80282c8 <aci_gap_init+0x14>
 80282c2:	200c      	movs	r0, #12
 80282c4:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
 80282c8:	f017 080f 	ands.w	r8, r7, #15
 80282cc:	bf04      	itt	eq
 80282ce:	2092      	moveq	r0, #146	@ 0x92
 80282d0:	e8bd 81fc 	ldmiaeq.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
 80282d4:	4608      	mov	r0, r1
 80282d6:	461c      	mov	r4, r3
 80282d8:	4616      	mov	r6, r2
 80282da:	f000 fab9 	bl	8028850 <GAP_Enable_Privacy>
 80282de:	b110      	cbz	r0, 80282e6 <aci_gap_init+0x32>
 80282e0:	2097      	movs	r0, #151	@ 0x97
 80282e2:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
 80282e6:	f895 0037 	ldrb.w	r0, [r5, #55]	@ 0x37
 80282ea:	b108      	cbz	r0, 80282f0 <aci_gap_init+0x3c>
 80282ec:	f7ff fb9a 	bl	8027a24 <LECTRL_Enhanced_Conn_Complete_Event_Unmask>
 80282f0:	f017 0f05 	tst.w	r7, #5
 80282f4:	d009      	beq.n	802830a <aci_gap_init+0x56>
 80282f6:	e9dd 3008 	ldrd	r3, r0, [sp, #32]
 80282fa:	4631      	mov	r1, r6
 80282fc:	4622      	mov	r2, r4
 80282fe:	9000      	str	r0, [sp, #0]
 8028300:	4640      	mov	r0, r8
 8028302:	f003 f81b 	bl	802b33c <GATT_Gap_Add_Service>
 8028306:	2800      	cmp	r0, #0
 8028308:	d1ea      	bne.n	80282e0 <aci_gap_init+0x2c>
 802830a:	2000      	movs	r0, #0
 802830c:	f885 81a8 	strb.w	r8, [r5, #424]	@ 0x1a8
 8028310:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}

08028314 <__arm_cp.1_0>:
 8028314:	20009f5c 	.word	0x20009f5c

08028318 <GAP_Connection_Complete_Handler>:
 8028318:	b57c      	push	{r2, r3, r4, r5, r6, lr}
 802831a:	4614      	mov	r4, r2
 802831c:	b980      	cbnz	r0, 8028340 <GAP_Connection_Complete_Handler+0x28>
 802831e:	e9dd 6006 	ldrd	r6, r0, [sp, #24]
 8028322:	461a      	mov	r2, r3
 8028324:	460d      	mov	r5, r1
 8028326:	4633      	mov	r3, r6
 8028328:	9000      	str	r0, [sp, #0]
 802832a:	4608      	mov	r0, r1
 802832c:	4621      	mov	r1, r4
 802832e:	f004 fcff 	bl	802cd30 <SMP_Connection_Complete_Handler>
 8028332:	4628      	mov	r0, r5
 8028334:	f000 fece 	bl	80290d4 <GATT_Connection_Complete_Handler>
 8028338:	4628      	mov	r0, r5
 802833a:	4621      	mov	r1, r4
 802833c:	f003 fda4 	bl	802be88 <L2C_Connection_Complete_Handler>
 8028340:	4805      	ldr	r0, [pc, #20]	@ (8028358 <__arm_cp.2_0>)
 8028342:	f500 70d4 	add.w	r0, r0, #424	@ 0x1a8
 8028346:	b11c      	cbz	r4, 8028350 <GAP_Connection_Complete_Handler+0x38>
 8028348:	e8bd 407c 	ldmia.w	sp!, {r2, r3, r4, r5, r6, lr}
 802834c:	f000 b962 	b.w	8028614 <GAP_Adv_Connection_Complete_Handler>
 8028350:	e8bd 407c 	ldmia.w	sp!, {r2, r3, r4, r5, r6, lr}
 8028354:	f000 bb26 	b.w	80289a4 <GAP_Proc_Connection_Complete_Handler>

08028358 <__arm_cp.2_0>:
 8028358:	20009f5c 	.word	0x20009f5c

0802835c <GAP_Disconnection_Complete_Handler>:
 802835c:	b510      	push	{r4, lr}
 802835e:	4604      	mov	r4, r0
 8028360:	f000 feda 	bl	8029118 <GATT_Disconnection_Complete_Handler>
 8028364:	4620      	mov	r0, r4
 8028366:	f004 fd3b 	bl	802cde0 <SMP_Disconnection_Complete_Handler>
 802836a:	4620      	mov	r0, r4
 802836c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8028370:	f003 bd9b 	b.w	802beaa <L2C_Disconnection_Complete_Handler>

08028374 <GAP_Adv_Start>:
 8028374:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028378:	b08f      	sub	sp, #60	@ 0x3c
 802837a:	f10d 0818 	add.w	r8, sp, #24
 802837e:	460d      	mov	r5, r1
 8028380:	4604      	mov	r4, r0
 8028382:	211f      	movs	r1, #31
 8028384:	461e      	mov	r6, r3
 8028386:	4617      	mov	r7, r2
 8028388:	4640      	mov	r0, r8
 802838a:	f007 f845 	bl	802f418 <__aeabi_memclr>
 802838e:	f8df a1fc 	ldr.w	sl, [pc, #508]	@ 802858c <__arm_cp.1_0>
 8028392:	f89a 01a9 	ldrb.w	r0, [sl, #425]	@ 0x1a9
 8028396:	b108      	cbz	r0, 802839c <GAP_Adv_Start+0x28>
 8028398:	200c      	movs	r0, #12
 802839a:	e03f      	b.n	802841c <GAP_Adv_Start+0xa8>
 802839c:	1f29      	subs	r1, r5, #4
 802839e:	9818      	ldr	r0, [sp, #96]	@ 0x60
 80283a0:	b2c9      	uxtb	r1, r1
 80283a2:	29fd      	cmp	r1, #253	@ 0xfd
 80283a4:	d803      	bhi.n	80283ae <GAP_Adv_Start+0x3a>
 80283a6:	2803      	cmp	r0, #3
 80283a8:	d101      	bne.n	80283ae <GAP_Adv_Start+0x3a>
 80283aa:	2092      	movs	r0, #146	@ 0x92
 80283ac:	e036      	b.n	802841c <GAP_Adv_Start+0xa8>
 80283ae:	ea56 0107 	orrs.w	r1, r6, r7
 80283b2:	d10b      	bne.n	80283cc <GAP_Adv_Start+0x58>
 80283b4:	2d04      	cmp	r5, #4
 80283b6:	d807      	bhi.n	80283c8 <GAP_Adv_Start+0x54>
 80283b8:	4a75      	ldr	r2, [pc, #468]	@ (8028590 <__arm_cp.1_1>)
 80283ba:	b269      	sxtb	r1, r5
 80283bc:	f832 7011 	ldrh.w	r7, [r2, r1, lsl #1]
 80283c0:	4a74      	ldr	r2, [pc, #464]	@ (8028594 <__arm_cp.1_2>)
 80283c2:	f832 6011 	ldrh.w	r6, [r2, r1, lsl #1]
 80283c6:	e001      	b.n	80283cc <GAP_Adv_Start+0x58>
 80283c8:	2606      	movs	r6, #6
 80283ca:	2706      	movs	r7, #6
 80283cc:	f89a 11a8 	ldrb.w	r1, [sl, #424]	@ 0x1a8
 80283d0:	2c40      	cmp	r4, #64	@ 0x40
 80283d2:	d102      	bne.n	80283da <GAP_Adv_Start+0x66>
 80283d4:	0789      	lsls	r1, r1, #30
 80283d6:	d5df      	bpl.n	8028398 <GAP_Adv_Start+0x24>
 80283d8:	e00a      	b.n	80283f0 <GAP_Adv_Start+0x7c>
 80283da:	07c9      	lsls	r1, r1, #31
 80283dc:	d0dc      	beq.n	8028398 <GAP_Adv_Start+0x24>
 80283de:	2c20      	cmp	r4, #32
 80283e0:	d00c      	beq.n	80283fc <GAP_Adv_Start+0x88>
 80283e2:	2c04      	cmp	r4, #4
 80283e4:	d00e      	beq.n	8028404 <GAP_Adv_Start+0x90>
 80283e6:	2c02      	cmp	r4, #2
 80283e8:	d102      	bne.n	80283f0 <GAP_Adv_Start+0x7c>
 80283ea:	f04f 0b05 	mov.w	fp, #5
 80283ee:	e00b      	b.n	8028408 <GAP_Adv_Start+0x94>
 80283f0:	2101      	movs	r1, #1
 80283f2:	f04f 0b00 	mov.w	fp, #0
 80283f6:	f04f 0901 	mov.w	r9, #1
 80283fa:	e008      	b.n	802840e <GAP_Adv_Start+0x9a>
 80283fc:	2101      	movs	r1, #1
 80283fe:	f04f 0b04 	mov.w	fp, #4
 8028402:	e002      	b.n	802840a <GAP_Adv_Start+0x96>
 8028404:	f04f 0b06 	mov.w	fp, #6
 8028408:	2100      	movs	r1, #0
 802840a:	f04f 0900 	mov.w	r9, #0
 802840e:	9104      	str	r1, [sp, #16]
 8028410:	f10d 0117 	add.w	r1, sp, #23
 8028414:	2200      	movs	r2, #0
 8028416:	f000 fa43 	bl	80288a0 <GAP_Set_Own_Address>
 802841a:	b110      	cbz	r0, 8028422 <GAP_Adv_Start+0xae>
 802841c:	b00f      	add	sp, #60	@ 0x3c
 802841e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028422:	e9dd 311e 	ldrd	r3, r1, [sp, #120]	@ 0x78
 8028426:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8028428:	f1b9 0f00 	cmp.w	r9, #0
 802842c:	f8ad 303a 	strh.w	r3, [sp, #58]	@ 0x3a
 8028430:	f8ad 1038 	strh.w	r1, [sp, #56]	@ 0x38
 8028434:	d002      	beq.n	802843c <GAP_Adv_Start+0xc8>
 8028436:	f04f 0b00 	mov.w	fp, #0
 802843a:	e007      	b.n	802844c <GAP_Adv_Start+0xd8>
 802843c:	f88d b01a 	strb.w	fp, [sp, #26]
 8028440:	f44f 7081 	mov.w	r0, #258	@ 0x102
 8028444:	f04f 0b03 	mov.w	fp, #3
 8028448:	f8ad 0018 	strh.w	r0, [sp, #24]
 802844c:	b1a2      	cbz	r2, 8028478 <GAP_Adv_Start+0x104>
 802844e:	f89a 0037 	ldrb.w	r0, [sl, #55]	@ 0x37
 8028452:	b988      	cbnz	r0, 8028478 <GAP_Adv_Start+0x104>
 8028454:	eb0b 0002 	add.w	r0, fp, r2
 8028458:	281e      	cmp	r0, #30
 802845a:	d8a6      	bhi.n	80283aa <GAP_Adv_Start+0x36>
 802845c:	eb08 000b 	add.w	r0, r8, fp
 8028460:	f10b 0901 	add.w	r9, fp, #1
 8028464:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 8028466:	4693      	mov	fp, r2
 8028468:	7002      	strb	r2, [r0, #0]
 802846a:	eb08 0009 	add.w	r0, r8, r9
 802846e:	f7fc f86b 	bl	8024548 <ble_memcpy>
 8028472:	e9dd 311e 	ldrd	r3, r1, [sp, #120]	@ 0x78
 8028476:	44cb      	add	fp, r9
 8028478:	f8dd 9070 	ldr.w	r9, [sp, #112]	@ 0x70
 802847c:	f1b9 0f00 	cmp.w	r9, #0
 8028480:	d014      	beq.n	80284ac <GAP_Adv_Start+0x138>
 8028482:	fa5f f08b 	uxtb.w	r0, fp
 8028486:	eb00 0109 	add.w	r1, r0, r9
 802848a:	291e      	cmp	r1, #30
 802848c:	f63f af8d 	bhi.w	80283aa <GAP_Adv_Start+0x36>
 8028490:	f10b 0b01 	add.w	fp, fp, #1
 8028494:	f808 9000 	strb.w	r9, [r8, r0]
 8028498:	991d      	ldr	r1, [sp, #116]	@ 0x74
 802849a:	464a      	mov	r2, r9
 802849c:	fa5f f08b 	uxtb.w	r0, fp
 80284a0:	4440      	add	r0, r8
 80284a2:	f7fc f851 	bl	8024548 <ble_memcpy>
 80284a6:	e9dd 311e 	ldrd	r3, r1, [sp, #120]	@ 0x78
 80284aa:	44cb      	add	fp, r9
 80284ac:	b1f3      	cbz	r3, 80284ec <GAP_Adv_Start+0x178>
 80284ae:	b1e9      	cbz	r1, 80284ec <GAP_Adv_Start+0x178>
 80284b0:	fa5f f08b 	uxtb.w	r0, fp
 80284b4:	281a      	cmp	r0, #26
 80284b6:	f63f af78 	bhi.w	80283aa <GAP_Adv_Start+0x36>
 80284ba:	2105      	movs	r1, #5
 80284bc:	2202      	movs	r2, #2
 80284be:	f808 1000 	strb.w	r1, [r8, r0]
 80284c2:	4440      	add	r0, r8
 80284c4:	2112      	movs	r1, #18
 80284c6:	7041      	strb	r1, [r0, #1]
 80284c8:	f10b 0002 	add.w	r0, fp, #2
 80284cc:	f10d 013a 	add.w	r1, sp, #58	@ 0x3a
 80284d0:	b2c0      	uxtb	r0, r0
 80284d2:	eb08 0900 	add.w	r9, r8, r0
 80284d6:	4648      	mov	r0, r9
 80284d8:	f7fc f836 	bl	8024548 <ble_memcpy>
 80284dc:	f109 0002 	add.w	r0, r9, #2
 80284e0:	a90e      	add	r1, sp, #56	@ 0x38
 80284e2:	2202      	movs	r2, #2
 80284e4:	f7fc f830 	bl	8024548 <ble_memcpy>
 80284e8:	f10b 0b06 	add.w	fp, fp, #6
 80284ec:	9804      	ldr	r0, [sp, #16]
 80284ee:	b990      	cbnz	r0, 8028516 <GAP_Adv_Start+0x1a2>
 80284f0:	fa5f f08b 	uxtb.w	r0, fp
 80284f4:	281c      	cmp	r0, #28
 80284f6:	f63f af58 	bhi.w	80283aa <GAP_Adv_Start+0x36>
 80284fa:	2102      	movs	r1, #2
 80284fc:	f808 1000 	strb.w	r1, [r8, r0]
 8028500:	4440      	add	r0, r8
 8028502:	210a      	movs	r1, #10
 8028504:	7041      	strb	r1, [r0, #1]
 8028506:	f10b 0002 	add.w	r0, fp, #2
 802850a:	b2c0      	uxtb	r0, r0
 802850c:	4440      	add	r0, r8
 802850e:	f7ff fa68 	bl	80279e2 <hci_le_read_advertising_physical_channel_tx_power>
 8028512:	f10b 0b03 	add.w	fp, fp, #3
 8028516:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8028518:	b15a      	cbz	r2, 8028532 <GAP_Adv_Start+0x1be>
 802851a:	fa5f f08b 	uxtb.w	r0, fp
 802851e:	eb00 0b02 	add.w	fp, r0, r2
 8028522:	f1bb 0f1f 	cmp.w	fp, #31
 8028526:	f63f af40 	bhi.w	80283aa <GAP_Adv_Start+0x36>
 802852a:	9923      	ldr	r1, [sp, #140]	@ 0x8c
 802852c:	4440      	add	r0, r8
 802852e:	f7fc f80b 	bl	8024548 <ble_memcpy>
 8028532:	fa5f f08b 	uxtb.w	r0, fp
 8028536:	a906      	add	r1, sp, #24
 8028538:	f000 f8ee 	bl	8028718 <GAP_Adv_SetData>
 802853c:	2800      	cmp	r0, #0
 802853e:	f47f af6d 	bne.w	802841c <GAP_Adv_Start+0xa8>
 8028542:	e9dd e020 	ldrd	lr, r0, [sp, #128]	@ 0x80
 8028546:	2107      	movs	r1, #7
 8028548:	f89a 21cc 	ldrb.w	r2, [sl, #460]	@ 0x1cc
 802854c:	f8dd c064 	ldr.w	ip, [sp, #100]	@ 0x64
 8028550:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8028554:	2800      	cmp	r0, #0
 8028556:	bf0c      	ite	eq
 8028558:	f20a 10cd 	addweq	r0, sl, #461	@ 0x1cd
 802855c:	4672      	movne	r2, lr
 802855e:	e9cd 1c02 	strd	r1, ip, [sp, #8]
 8028562:	4631      	mov	r1, r6
 8028564:	b2d2      	uxtb	r2, r2
 8028566:	e9cd 2000 	strd	r2, r0, [sp]
 802856a:	4638      	mov	r0, r7
 802856c:	462a      	mov	r2, r5
 802856e:	f7ff f9f1 	bl	8027954 <hci_le_set_advertising_parameters>
 8028572:	2800      	cmp	r0, #0
 8028574:	f47f af52 	bne.w	802841c <GAP_Adv_Start+0xa8>
 8028578:	2001      	movs	r0, #1
 802857a:	f7ff fa14 	bl	80279a6 <hci_le_set_advertising_enable>
 802857e:	2800      	cmp	r0, #0
 8028580:	f47f af4c 	bne.w	802841c <GAP_Adv_Start+0xa8>
 8028584:	2000      	movs	r0, #0
 8028586:	f88a 41a9 	strb.w	r4, [sl, #425]	@ 0x1a9
 802858a:	e747      	b.n	802841c <GAP_Adv_Start+0xa8>

0802858c <__arm_cp.1_0>:
 802858c:	20009f5c 	.word	0x20009f5c

08028590 <__arm_cp.1_1>:
 8028590:	08031e9e 	.word	0x08031e9e

08028594 <__arm_cp.1_2>:
 8028594:	08031e94 	.word	0x08031e94

08028598 <GAP_Adv_DiscParamsCheck>:
 8028598:	ea52 0301 	orrs.w	r3, r2, r1
 802859c:	d00b      	beq.n	80285b6 <GAP_Adv_DiscParamsCheck+0x1e>
 802859e:	428a      	cmp	r2, r1
 80285a0:	bf28      	it	cs
 80285a2:	2906      	cmpcs	r1, #6
 80285a4:	d201      	bcs.n	80285aa <GAP_Adv_DiscParamsCheck+0x12>
 80285a6:	2192      	movs	r1, #146	@ 0x92
 80285a8:	e00e      	b.n	80285c8 <GAP_Adv_DiscParamsCheck+0x30>
 80285aa:	f6a2 4181 	subw	r1, r2, #3201	@ 0xc81
 80285ae:	f24f 327e 	movw	r2, #62334	@ 0xf37e
 80285b2:	4291      	cmp	r1, r2
 80285b4:	d3f7      	bcc.n	80285a6 <GAP_Adv_DiscParamsCheck+0xe>
 80285b6:	2100      	movs	r1, #0
 80285b8:	2804      	cmp	r0, #4
 80285ba:	bf08      	it	eq
 80285bc:	f06f 016d 	mvneq.w	r1, #109	@ 0x6d
 80285c0:	2801      	cmp	r0, #1
 80285c2:	bf08      	it	eq
 80285c4:	f06f 016d 	mvneq.w	r1, #109	@ 0x6d
 80285c8:	b2c8      	uxtb	r0, r1
 80285ca:	4770      	bx	lr

080285cc <aci_gap_set_discoverable>:
 80285cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80285d0:	b08d      	sub	sp, #52	@ 0x34
 80285d2:	f000 f8ff 	bl	80287d4 <OUTLINED_FUNCTION_2>
 80285d6:	d108      	bne.n	80285ea <aci_gap_set_discoverable+0x1e>
 80285d8:	f000 f8ee 	bl	80287b8 <OUTLINED_FUNCTION_0>
 80285dc:	2004      	movs	r0, #4
 80285de:	e9cd 3202 	strd	r3, r2, [sp, #8]
 80285e2:	e9cd 1c04 	strd	r1, ip, [sp, #16]
 80285e6:	f000 f905 	bl	80287f4 <OUTLINED_FUNCTION_3>
 80285ea:	b00d      	add	sp, #52	@ 0x34
 80285ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080285f0 <GAP_Adv_Lim_Disc_Timeout_Cb>:
 80285f0:	b5b0      	push	{r4, r5, r7, lr}
 80285f2:	4c07      	ldr	r4, [pc, #28]	@ (8028610 <__arm_cp.8_0>)
 80285f4:	f894 01a9 	ldrb.w	r0, [r4, #425]	@ 0x1a9
 80285f8:	0780      	lsls	r0, r0, #30
 80285fa:	d508      	bpl.n	802860e <GAP_Adv_Lim_Disc_Timeout_Cb+0x1e>
 80285fc:	2000      	movs	r0, #0
 80285fe:	2500      	movs	r5, #0
 8028600:	f7ff f9d1 	bl	80279a6 <hci_le_set_advertising_enable>
 8028604:	2001      	movs	r0, #1
 8028606:	f7fe fe7b 	bl	8027300 <EVT_aci_gap_limited_discoverable>
 802860a:	f884 51a9 	strb.w	r5, [r4, #425]	@ 0x1a9
 802860e:	bdb0      	pop	{r4, r5, r7, pc}

08028610 <__arm_cp.8_0>:
 8028610:	20009f5c 	.word	0x20009f5c

08028614 <GAP_Adv_Connection_Complete_Handler>:
 8028614:	f000 b800 	b.w	8028618 <GAP_Adv_Reset_State>

08028618 <GAP_Adv_Reset_State>:
 8028618:	b510      	push	{r4, lr}
 802861a:	4604      	mov	r4, r0
 802861c:	7840      	ldrb	r0, [r0, #1]
 802861e:	0780      	lsls	r0, r0, #30
 8028620:	bf44      	itt	mi
 8028622:	f44f 7080 	movmi.w	r0, #256	@ 0x100
 8028626:	f7e1 fa34 	blmi	8009a92 <BLEPLAT_TimerStop>
 802862a:	2000      	movs	r0, #0
 802862c:	7060      	strb	r0, [r4, #1]
 802862e:	bd10      	pop	{r4, pc}

08028630 <aci_gap_update_adv_data>:
 8028630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028634:	b089      	sub	sp, #36	@ 0x24
 8028636:	281f      	cmp	r0, #31
 8028638:	d903      	bls.n	8028642 <aci_gap_update_adv_data+0x12>
 802863a:	2092      	movs	r0, #146	@ 0x92
 802863c:	b009      	add	sp, #36	@ 0x24
 802863e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028642:	f8df 80d0 	ldr.w	r8, [pc, #208]	@ 8028714 <__arm_cp.11_0>
 8028646:	4605      	mov	r5, r0
 8028648:	f10d 0005 	add.w	r0, sp, #5
 802864c:	460c      	mov	r4, r1
 802864e:	462a      	mov	r2, r5
 8028650:	f898 a1ab 	ldrb.w	sl, [r8, #427]	@ 0x1ab
 8028654:	f7fb ff78 	bl	8024548 <ble_memcpy>
 8028658:	f04f 0b00 	mov.w	fp, #0
 802865c:	46a9      	mov	r9, r5
 802865e:	ea5f 600a 	movs.w	r0, sl, lsl #24
 8028662:	d03c      	beq.n	80286de <aci_gap_update_adv_data+0xae>
 8028664:	fa5f fc8b 	uxtb.w	ip, fp
 8028668:	2300      	movs	r3, #0
 802866a:	462a      	mov	r2, r5
 802866c:	f10c 0101 	add.w	r1, ip, #1
 8028670:	b2db      	uxtb	r3, r3
 8028672:	42ab      	cmp	r3, r5
 8028674:	d212      	bcs.n	802869c <aci_gap_update_adv_data+0x6c>
 8028676:	5ce7      	ldrb	r7, [r4, r3]
 8028678:	b2d0      	uxtb	r0, r2
 802867a:	4287      	cmp	r7, r0
 802867c:	d8dd      	bhi.n	802863a <aci_gap_update_adv_data+0xa>
 802867e:	d101      	bne.n	8028684 <aci_gap_update_adv_data+0x54>
 8028680:	0610      	lsls	r0, r2, #24
 8028682:	d1da      	bne.n	802863a <aci_gap_update_adv_data+0xa>
 8028684:	eb08 0001 	add.w	r0, r8, r1
 8028688:	191e      	adds	r6, r3, r4
 802868a:	f890 01ac 	ldrb.w	r0, [r0, #428]	@ 0x1ac
 802868e:	7876      	ldrb	r6, [r6, #1]
 8028690:	4286      	cmp	r6, r0
 8028692:	d01b      	beq.n	80286cc <aci_gap_update_adv_data+0x9c>
 8028694:	1c78      	adds	r0, r7, #1
 8028696:	4403      	add	r3, r0
 8028698:	1a12      	subs	r2, r2, r0
 802869a:	e7e9      	b.n	8028670 <aci_gap_update_adv_data+0x40>
 802869c:	eb08 000c 	add.w	r0, r8, ip
 80286a0:	fa5f f289 	uxtb.w	r2, r9
 80286a4:	f890 11ac 	ldrb.w	r1, [r0, #428]	@ 0x1ac
 80286a8:	188b      	adds	r3, r1, r2
 80286aa:	2b1e      	cmp	r3, #30
 80286ac:	d82b      	bhi.n	8028706 <aci_gap_update_adv_data+0xd6>
 80286ae:	f500 77d6 	add.w	r7, r0, #428	@ 0x1ac
 80286b2:	f10d 0005 	add.w	r0, sp, #5
 80286b6:	4410      	add	r0, r2
 80286b8:	1c4a      	adds	r2, r1, #1
 80286ba:	4639      	mov	r1, r7
 80286bc:	f7fb ff44 	bl	8024548 <ble_memcpy>
 80286c0:	7838      	ldrb	r0, [r7, #0]
 80286c2:	eb09 0100 	add.w	r1, r9, r0
 80286c6:	f101 0901 	add.w	r9, r1, #1
 80286ca:	e003      	b.n	80286d4 <aci_gap_update_adv_data+0xa4>
 80286cc:	eb08 000c 	add.w	r0, r8, ip
 80286d0:	f890 01ac 	ldrb.w	r0, [r0, #428]	@ 0x1ac
 80286d4:	3001      	adds	r0, #1
 80286d6:	4483      	add	fp, r0
 80286d8:	ebaa 0a00 	sub.w	sl, sl, r0
 80286dc:	e7bf      	b.n	802865e <aci_gap_update_adv_data+0x2e>
 80286de:	2100      	movs	r1, #0
 80286e0:	4628      	mov	r0, r5
 80286e2:	b2c9      	uxtb	r1, r1
 80286e4:	42a9      	cmp	r1, r5
 80286e6:	d20a      	bcs.n	80286fe <aci_gap_update_adv_data+0xce>
 80286e8:	5c62      	ldrb	r2, [r4, r1]
 80286ea:	b2c3      	uxtb	r3, r0
 80286ec:	429a      	cmp	r2, r3
 80286ee:	d8a4      	bhi.n	802863a <aci_gap_update_adv_data+0xa>
 80286f0:	d101      	bne.n	80286f6 <aci_gap_update_adv_data+0xc6>
 80286f2:	0603      	lsls	r3, r0, #24
 80286f4:	d1a1      	bne.n	802863a <aci_gap_update_adv_data+0xa>
 80286f6:	3201      	adds	r2, #1
 80286f8:	4411      	add	r1, r2
 80286fa:	1a80      	subs	r0, r0, r2
 80286fc:	e7f1      	b.n	80286e2 <aci_gap_update_adv_data+0xb2>
 80286fe:	fa5f f089 	uxtb.w	r0, r9
 8028702:	281f      	cmp	r0, #31
 8028704:	d901      	bls.n	802870a <aci_gap_update_adv_data+0xda>
 8028706:	2091      	movs	r0, #145	@ 0x91
 8028708:	e798      	b.n	802863c <aci_gap_update_adv_data+0xc>
 802870a:	f10d 0105 	add.w	r1, sp, #5
 802870e:	f000 f803 	bl	8028718 <GAP_Adv_SetData>
 8028712:	e793      	b.n	802863c <aci_gap_update_adv_data+0xc>

08028714 <__arm_cp.11_0>:
 8028714:	20009f5c 	.word	0x20009f5c

08028718 <GAP_Adv_SetData>:
 8028718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802871a:	460d      	mov	r5, r1
 802871c:	4604      	mov	r4, r0
 802871e:	f7ff f93d 	bl	802799c <hci_le_set_advertising_data>
 8028722:	4606      	mov	r6, r0
 8028724:	b940      	cbnz	r0, 8028738 <GAP_Adv_SetData+0x20>
 8028726:	4f05      	ldr	r7, [pc, #20]	@ (802873c <__arm_cp.12_0>)
 8028728:	4629      	mov	r1, r5
 802872a:	4622      	mov	r2, r4
 802872c:	f507 70d6 	add.w	r0, r7, #428	@ 0x1ac
 8028730:	f7fb ff0a 	bl	8024548 <ble_memcpy>
 8028734:	f887 41ab 	strb.w	r4, [r7, #427]	@ 0x1ab
 8028738:	4630      	mov	r0, r6
 802873a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0802873c <__arm_cp.12_0>:
 802873c:	20009f5c 	.word	0x20009f5c

08028740 <aci_gap_delete_ad_type>:
 8028740:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8028744:	b089      	sub	sp, #36	@ 0x24
 8028746:	f8df 906c 	ldr.w	r9, [pc, #108]	@ 80287b4 <__arm_cp.13_0>
 802874a:	f10d 0805 	add.w	r8, sp, #5
 802874e:	4606      	mov	r6, r0
 8028750:	4640      	mov	r0, r8
 8028752:	f899 51ab 	ldrb.w	r5, [r9, #427]	@ 0x1ab
 8028756:	f509 71d6 	add.w	r1, r9, #428	@ 0x1ac
 802875a:	462a      	mov	r2, r5
 802875c:	f7fb fef4 	bl	8024548 <ble_memcpy>
 8028760:	2100      	movs	r1, #0
 8028762:	2000      	movs	r0, #0
 8028764:	4604      	mov	r4, r0
 8028766:	0628      	lsls	r0, r5, #24
 8028768:	d01f      	beq.n	80287aa <aci_gap_delete_ad_type+0x6a>
 802876a:	b2c9      	uxtb	r1, r1
 802876c:	eb09 0201 	add.w	r2, r9, r1
 8028770:	f892 01ac 	ldrb.w	r0, [r2, #428]	@ 0x1ac
 8028774:	1c43      	adds	r3, r0, #1
 8028776:	b2e8      	uxtb	r0, r5
 8028778:	b2df      	uxtb	r7, r3
 802877a:	42b8      	cmp	r0, r7
 802877c:	d315      	bcc.n	80287aa <aci_gap_delete_ad_type+0x6a>
 802877e:	f892 21ad 	ldrb.w	r2, [r2, #429]	@ 0x1ad
 8028782:	1918      	adds	r0, r3, r4
 8028784:	1aed      	subs	r5, r5, r3
 8028786:	4439      	add	r1, r7
 8028788:	42b2      	cmp	r2, r6
 802878a:	d1eb      	bne.n	8028764 <aci_gap_delete_ad_type+0x24>
 802878c:	b2c9      	uxtb	r1, r1
 802878e:	b2e0      	uxtb	r0, r4
 8028790:	b2ea      	uxtb	r2, r5
 8028792:	4449      	add	r1, r9
 8028794:	4440      	add	r0, r8
 8028796:	f501 71d6 	add.w	r1, r1, #428	@ 0x1ac
 802879a:	f7fb fed5 	bl	8024548 <ble_memcpy>
 802879e:	1928      	adds	r0, r5, r4
 80287a0:	4641      	mov	r1, r8
 80287a2:	b2c0      	uxtb	r0, r0
 80287a4:	f7ff ffb8 	bl	8028718 <GAP_Adv_SetData>
 80287a8:	e000      	b.n	80287ac <aci_gap_delete_ad_type+0x6c>
 80287aa:	201f      	movs	r0, #31
 80287ac:	b009      	add	sp, #36	@ 0x24
 80287ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80287b2:	bf00      	nop

080287b4 <__arm_cp.13_0>:
 80287b4:	20009f5c 	.word	0x20009f5c

080287b8 <OUTLINED_FUNCTION_0>:
 80287b8:	e9dd 1c17 	ldrd	r1, ip, [sp, #92]	@ 0x5c
 80287bc:	e9dd 3215 	ldrd	r3, r2, [sp, #84]	@ 0x54
 80287c0:	2000      	movs	r0, #0
 80287c2:	e9cd 7906 	strd	r7, r9, [sp, #24]
 80287c6:	e9cd 0008 	strd	r0, r0, [sp, #32]
 80287ca:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
 80287ce:	e9cd 4000 	strd	r4, r0, [sp]
 80287d2:	4770      	bx	lr

080287d4 <OUTLINED_FUNCTION_2>:
 80287d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80287d8:	e9dd 791b 	ldrd	r7, r9, [sp, #108]	@ 0x6c
 80287dc:	4690      	mov	r8, r2
 80287de:	460d      	mov	r5, r1
 80287e0:	461c      	mov	r4, r3
 80287e2:	4606      	mov	r6, r0
 80287e4:	4639      	mov	r1, r7
 80287e6:	464a      	mov	r2, r9
 80287e8:	f7ff fed6 	bl	8028598 <GAP_Adv_DiscParamsCheck>
 80287ec:	2800      	cmp	r0, #0
 80287ee:	f85d eb08 	ldr.w	lr, [sp], #8
 80287f2:	4770      	bx	lr

080287f4 <OUTLINED_FUNCTION_3>:
 80287f4:	4631      	mov	r1, r6
 80287f6:	462a      	mov	r2, r5
 80287f8:	4643      	mov	r3, r8
 80287fa:	f7ff bdbb 	b.w	8028374 <GAP_Adv_Start>
	...

08028800 <GAP_Advertising_Report_Handler>:
 8028800:	b5f0      	push	{r4, r5, r6, r7, lr}
 8028802:	4812      	ldr	r0, [pc, #72]	@ (802884c <__arm_cp.0_0>)
 8028804:	f890 01aa 	ldrb.w	r0, [r0, #426]	@ 0x1aa
 8028808:	f010 0fb3 	tst.w	r0, #179	@ 0xb3
 802880c:	d01b      	beq.n	8028846 <GAP_Advertising_Report_Handler+0x46>
 802880e:	0784      	lsls	r4, r0, #30
 8028810:	bf18      	it	ne
 8028812:	2904      	cmpne	r1, #4
 8028814:	d101      	bne.n	802881a <GAP_Advertising_Report_Handler+0x1a>
 8028816:	2001      	movs	r0, #1
 8028818:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802881a:	2500      	movs	r5, #0
 802881c:	1ca9      	adds	r1, r5, #2
 802881e:	4291      	cmp	r1, r2
 8028820:	d211      	bcs.n	8028846 <GAP_Advertising_Report_Handler+0x46>
 8028822:	5d5e      	ldrb	r6, [r3, r5]
 8028824:	b17e      	cbz	r6, 8028846 <GAP_Advertising_Report_Handler+0x46>
 8028826:	1c6f      	adds	r7, r5, #1
 8028828:	19bd      	adds	r5, r7, r6
 802882a:	5dde      	ldrb	r6, [r3, r7]
 802882c:	2e01      	cmp	r6, #1
 802882e:	d1f5      	bne.n	802881c <GAP_Advertising_Report_Handler+0x1c>
 8028830:	07c0      	lsls	r0, r0, #31
 8028832:	d105      	bne.n	8028840 <GAP_Advertising_Report_Handler+0x40>
 8028834:	2c00      	cmp	r4, #0
 8028836:	d506      	bpl.n	8028846 <GAP_Advertising_Report_Handler+0x46>
 8028838:	5c58      	ldrb	r0, [r3, r1]
 802883a:	0780      	lsls	r0, r0, #30
 802883c:	d1eb      	bne.n	8028816 <GAP_Advertising_Report_Handler+0x16>
 802883e:	e002      	b.n	8028846 <GAP_Advertising_Report_Handler+0x46>
 8028840:	5c58      	ldrb	r0, [r3, r1]
 8028842:	07c0      	lsls	r0, r0, #31
 8028844:	d1e7      	bne.n	8028816 <GAP_Advertising_Report_Handler+0x16>
 8028846:	2000      	movs	r0, #0
 8028848:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802884a:	bf00      	nop

0802884c <__arm_cp.0_0>:
 802884c:	20009f5c 	.word	0x20009f5c

08028850 <GAP_Enable_Privacy>:
 8028850:	4904      	ldr	r1, [pc, #16]	@ (8028864 <__arm_cp.0_0>)
 8028852:	f881 0037 	strb.w	r0, [r1, #55]	@ 0x37
 8028856:	b110      	cbz	r0, 802885e <GAP_Enable_Privacy+0xe>
 8028858:	2001      	movs	r0, #1
 802885a:	f7ff b8ae 	b.w	80279ba <hci_le_set_address_resolution_enable>
 802885e:	2000      	movs	r0, #0
 8028860:	4770      	bx	lr
 8028862:	bf00      	nop

08028864 <__arm_cp.0_0>:
 8028864:	20009f5c 	.word	0x20009f5c

08028868 <aci_gap_configure_filter_accept_list>:
 8028868:	b5b0      	push	{r4, r5, r7, lr}
 802886a:	b094      	sub	sp, #80	@ 0x50
 802886c:	f7ff f8aa 	bl	80279c4 <hci_le_clear_filter_accept_list>
 8028870:	b9a0      	cbnz	r0, 802889c <aci_gap_configure_filter_accept_list+0x34>
 8028872:	466c      	mov	r4, sp
 8028874:	2100      	movs	r1, #0
 8028876:	f104 053e 	add.w	r5, r4, #62	@ 0x3e
 802887a:	b2c8      	uxtb	r0, r1
 802887c:	4621      	mov	r1, r4
 802887e:	f003 fde0 	bl	802c442 <SDB_Get_Sec_Record>
 8028882:	b950      	cbnz	r0, 802889a <aci_gap_configure_filter_accept_list+0x32>
 8028884:	f89d 0001 	ldrb.w	r0, [sp, #1]
 8028888:	4629      	mov	r1, r5
 802888a:	f000 0001 	and.w	r0, r0, #1
 802888e:	f7ff f89e 	bl	80279ce <hci_le_add_device_to_filter_accept_list>
 8028892:	2101      	movs	r1, #1
 8028894:	2800      	cmp	r0, #0
 8028896:	d0f0      	beq.n	802887a <aci_gap_configure_filter_accept_list+0x12>
 8028898:	e000      	b.n	802889c <aci_gap_configure_filter_accept_list+0x34>
 802889a:	2000      	movs	r0, #0
 802889c:	b014      	add	sp, #80	@ 0x50
 802889e:	bdb0      	pop	{r4, r5, r7, pc}

080288a0 <GAP_Set_Own_Address>:
 80288a0:	e92d 43fe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, lr}
 80288a4:	f8df 90b0 	ldr.w	r9, [pc, #176]	@ 8028958 <__arm_cp.4_0>
 80288a8:	f10d 0406 	add.w	r4, sp, #6
 80288ac:	2a00      	cmp	r2, #0
 80288ae:	4605      	mov	r5, r0
 80288b0:	4616      	mov	r6, r2
 80288b2:	460f      	mov	r7, r1
 80288b4:	bf18      	it	ne
 80288b6:	4614      	movne	r4, r2
 80288b8:	f899 0037 	ldrb.w	r0, [r9, #55]	@ 0x37
 80288bc:	b180      	cbz	r0, 80288e0 <GAP_Set_Own_Address+0x40>
 80288be:	1f28      	subs	r0, r5, #4
 80288c0:	f110 0f02 	cmn.w	r0, #2
 80288c4:	d31d      	bcc.n	8028902 <GAP_Set_Own_Address+0x62>
 80288c6:	f004 fa2d 	bl	802cd24 <SMP_Get_Identity_Address_Type>
 80288ca:	4680      	mov	r8, r0
 80288cc:	2d03      	cmp	r5, #3
 80288ce:	d11b      	bne.n	8028908 <GAP_Set_Own_Address+0x68>
 80288d0:	2001      	movs	r0, #1
 80288d2:	7038      	strb	r0, [r7, #0]
 80288d4:	4620      	mov	r0, r4
 80288d6:	f006 fc9b 	bl	802f210 <RndAddr_Generate_Non_Resolvable_Address>
 80288da:	bbc6      	cbnz	r6, 802894e <GAP_Set_Own_Address+0xae>
 80288dc:	2503      	movs	r5, #3
 80288de:	e024      	b.n	802892a <GAP_Set_Own_Address+0x8a>
 80288e0:	2d01      	cmp	r5, #1
 80288e2:	d80e      	bhi.n	8028902 <GAP_Set_Own_Address+0x62>
 80288e4:	f899 01a9 	ldrb.w	r0, [r9, #425]	@ 0x1a9
 80288e8:	f899 11aa 	ldrb.w	r1, [r9, #426]	@ 0x1aa
 80288ec:	4308      	orrs	r0, r1
 80288ee:	d003      	beq.n	80288f8 <GAP_Set_Own_Address+0x58>
 80288f0:	f899 0036 	ldrb.w	r0, [r9, #54]	@ 0x36
 80288f4:	42a8      	cmp	r0, r5
 80288f6:	d104      	bne.n	8028902 <GAP_Set_Own_Address+0x62>
 80288f8:	b1ed      	cbz	r5, 8028936 <GAP_Set_Own_Address+0x96>
 80288fa:	2001      	movs	r0, #1
 80288fc:	f04f 0801 	mov.w	r8, #1
 8028900:	e006      	b.n	8028910 <GAP_Set_Own_Address+0x70>
 8028902:	2092      	movs	r0, #146	@ 0x92
 8028904:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}
 8028908:	f1b8 0f00 	cmp.w	r8, #0
 802890c:	d018      	beq.n	8028940 <GAP_Set_Own_Address+0xa0>
 802890e:	2003      	movs	r0, #3
 8028910:	7038      	strb	r0, [r7, #0]
 8028912:	f109 012e 	add.w	r1, r9, #46	@ 0x2e
 8028916:	4620      	mov	r0, r4
 8028918:	2206      	movs	r2, #6
 802891a:	f7fb fe15 	bl	8024548 <ble_memcpy>
 802891e:	b9b6      	cbnz	r6, 802894e <GAP_Set_Own_Address+0xae>
 8028920:	f899 01cb 	ldrb.w	r0, [r9, #459]	@ 0x1cb
 8028924:	2801      	cmp	r0, #1
 8028926:	d012      	beq.n	802894e <GAP_Set_Own_Address+0xae>
 8028928:	2501      	movs	r5, #1
 802892a:	4620      	mov	r0, r4
 802892c:	f7ff f874 	bl	8027a18 <hci_le_set_random_address>
 8028930:	b158      	cbz	r0, 802894a <GAP_Set_Own_Address+0xaa>
 8028932:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}
 8028936:	f04f 0800 	mov.w	r8, #0
 802893a:	f887 8000 	strb.w	r8, [r7]
 802893e:	e006      	b.n	802894e <GAP_Set_Own_Address+0xae>
 8028940:	2002      	movs	r0, #2
 8028942:	f04f 0800 	mov.w	r8, #0
 8028946:	7038      	strb	r0, [r7, #0]
 8028948:	e001      	b.n	802894e <GAP_Set_Own_Address+0xae>
 802894a:	f889 51cb 	strb.w	r5, [r9, #459]	@ 0x1cb
 802894e:	2000      	movs	r0, #0
 8028950:	f889 8036 	strb.w	r8, [r9, #54]	@ 0x36
 8028954:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}

08028958 <__arm_cp.4_0>:
 8028958:	20009f5c 	.word	0x20009f5c

0802895c <GAP_Stop_Scan>:
 802895c:	b580      	push	{r7, lr}
 802895e:	2000      	movs	r0, #0
 8028960:	2100      	movs	r1, #0
 8028962:	f7ff f825 	bl	80279b0 <hci_le_set_scan_enable>
 8028966:	4904      	ldr	r1, [pc, #16]	@ (8028978 <__arm_cp.9_0>)
 8028968:	f891 21aa 	ldrb.w	r2, [r1, #426]	@ 0x1aa
 802896c:	f002 024c 	and.w	r2, r2, #76	@ 0x4c
 8028970:	f881 21aa 	strb.w	r2, [r1, #426]	@ 0x1aa
 8028974:	bd80      	pop	{r7, pc}
 8028976:	bf00      	nop

08028978 <__arm_cp.9_0>:
 8028978:	20009f5c 	.word	0x20009f5c

0802897c <GAP_Scan_Disc_Proc_Timeout_Cb>:
 802897c:	b510      	push	{r4, lr}
 802897e:	4808      	ldr	r0, [pc, #32]	@ (80289a0 <__arm_cp.13_0>)
 8028980:	f890 01aa 	ldrb.w	r0, [r0, #426]	@ 0x1aa
 8028984:	f010 0403 	ands.w	r4, r0, #3
 8028988:	bf08      	it	eq
 802898a:	bd10      	popeq	{r4, pc}
 802898c:	f7ff ffe6 	bl	802895c <GAP_Stop_Scan>
 8028990:	2001      	movs	r0, #1
 8028992:	4621      	mov	r1, r4
 8028994:	2200      	movs	r2, #0
 8028996:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802899a:	f7fe bcbb 	b.w	8027314 <EVT_aci_gap_proc_complete>
 802899e:	bf00      	nop

080289a0 <__arm_cp.13_0>:
 80289a0:	20009f5c 	.word	0x20009f5c

080289a4 <GAP_Proc_Connection_Complete_Handler>:
 80289a4:	4807      	ldr	r0, [pc, #28]	@ (80289c4 <__arm_cp.14_0>)
 80289a6:	f890 21aa 	ldrb.w	r2, [r0, #426]	@ 0x1aa
 80289aa:	f012 014c 	ands.w	r1, r2, #76	@ 0x4c
 80289ae:	bf08      	it	eq
 80289b0:	4770      	bxeq	lr
 80289b2:	f002 02b3 	and.w	r2, r2, #179	@ 0xb3
 80289b6:	f880 21aa 	strb.w	r2, [r0, #426]	@ 0x1aa
 80289ba:	2000      	movs	r0, #0
 80289bc:	2200      	movs	r2, #0
 80289be:	f7fe bca9 	b.w	8027314 <EVT_aci_gap_proc_complete>
 80289c2:	bf00      	nop

080289c4 <__arm_cp.14_0>:
 80289c4:	20009f5c 	.word	0x20009f5c

080289c8 <GATT_MemAlloc>:
 80289c8:	b5b0      	push	{r4, r5, r7, lr}
 80289ca:	4604      	mov	r4, r0
 80289cc:	4809      	ldr	r0, [pc, #36]	@ (80289f4 <__arm_cp.0_0>)
 80289ce:	4d0a      	ldr	r5, [pc, #40]	@ (80289f8 <__arm_cp.0_1>)
 80289d0:	2224      	movs	r2, #36	@ 0x24
 80289d2:	7d81      	ldrb	r1, [r0, #22]
 80289d4:	4620      	mov	r0, r4
 80289d6:	f885 11d5 	strb.w	r1, [r5, #469]	@ 0x1d5
 80289da:	f006 fc8e 	bl	802f2fa <Mem_Assign>
 80289de:	f8c5 01f8 	str.w	r0, [r5, #504]	@ 0x1f8
 80289e2:	4620      	mov	r0, r4
 80289e4:	2101      	movs	r1, #1
 80289e6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80289ea:	f006 fc86 	bl	802f2fa <Mem_Assign>
 80289ee:	f8c5 022c 	str.w	r0, [r5, #556]	@ 0x22c
 80289f2:	bdb0      	pop	{r4, r5, r7, pc}

080289f4 <__arm_cp.0_0>:
 80289f4:	20009f34 	.word	0x20009f34

080289f8 <__arm_cp.0_1>:
 80289f8:	20009f5c 	.word	0x20009f5c

080289fc <GATT_Init>:
 80289fc:	480d      	ldr	r0, [pc, #52]	@ (8028a34 <__arm_cp.1_0>)
 80289fe:	2317      	movs	r3, #23
 8028a00:	f8d0 21f8 	ldr.w	r2, [r0, #504]	@ 0x1f8
 8028a04:	f890 11d5 	ldrb.w	r1, [r0, #469]	@ 0x1d5
 8028a08:	3202      	adds	r2, #2
 8028a0a:	b119      	cbz	r1, 8028a14 <GATT_Init+0x18>
 8028a0c:	f822 3b24 	strh.w	r3, [r2], #36
 8028a10:	3901      	subs	r1, #1
 8028a12:	e7fa      	b.n	8028a0a <GATT_Init+0xe>
 8028a14:	4908      	ldr	r1, [pc, #32]	@ (8028a38 <__arm_cp.1_1>)
 8028a16:	8b49      	ldrh	r1, [r1, #26]
 8028a18:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8028a1c:	f8a0 11d6 	strh.w	r1, [r0, #470]	@ 0x1d6
 8028a20:	d902      	bls.n	8028a28 <GATT_Init+0x2c>
 8028a22:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8028a26:	e002      	b.n	8028a2e <GATT_Init+0x32>
 8028a28:	2916      	cmp	r1, #22
 8028a2a:	d802      	bhi.n	8028a32 <GATT_Init+0x36>
 8028a2c:	2117      	movs	r1, #23
 8028a2e:	f8a0 11d6 	strh.w	r1, [r0, #470]	@ 0x1d6
 8028a32:	4770      	bx	lr

08028a34 <__arm_cp.1_0>:
 8028a34:	20009f5c 	.word	0x20009f5c

08028a38 <__arm_cp.1_1>:
 8028a38:	20009f34 	.word	0x20009f34

08028a3c <GATT_L2cap_Data_Handler>:
 8028a3c:	b570      	push	{r4, r5, r6, lr}
 8028a3e:	4604      	mov	r4, r0
 8028a40:	f000 f8b2 	bl	8028ba8 <GATT_Get_Packet_Bearer>
 8028a44:	4605      	mov	r5, r0
 8028a46:	79a0      	ldrb	r0, [r4, #6]
 8028a48:	b180      	cbz	r0, 8028a6c <GATT_L2cap_Data_Handler+0x30>
 8028a4a:	0740      	lsls	r0, r0, #29
 8028a4c:	bf48      	it	mi
 8028a4e:	2500      	movmi	r5, #0
 8028a50:	6a20      	ldr	r0, [r4, #32]
 8028a52:	7900      	ldrb	r0, [r0, #4]
 8028a54:	281b      	cmp	r0, #27
 8028a56:	d021      	beq.n	8028a9c <GATT_L2cap_Data_Handler+0x60>
 8028a58:	281d      	cmp	r0, #29
 8028a5a:	d126      	bne.n	8028aaa <GATT_L2cap_Data_Handler+0x6e>
 8028a5c:	b11d      	cbz	r5, 8028a66 <GATT_L2cap_Data_Handler+0x2a>
 8028a5e:	4628      	mov	r0, r5
 8028a60:	2101      	movs	r1, #1
 8028a62:	f000 f8c3 	bl	8028bec <GATT_Start_Timer>
 8028a66:	2001      	movs	r0, #1
 8028a68:	2102      	movs	r1, #2
 8028a6a:	e019      	b.n	8028aa0 <GATT_L2cap_Data_Handler+0x64>
 8028a6c:	2d00      	cmp	r5, #0
 8028a6e:	d04d      	beq.n	8028b0c <GATT_L2cap_Data_Handler+0xd0>
 8028a70:	88a0      	ldrh	r0, [r4, #4]
 8028a72:	1f01      	subs	r1, r0, #4
 8028a74:	0408      	lsls	r0, r1, #16
 8028a76:	d049      	beq.n	8028b0c <GATT_L2cap_Data_Handler+0xd0>
 8028a78:	6868      	ldr	r0, [r5, #4]
 8028a7a:	0742      	lsls	r2, r0, #29
 8028a7c:	d41d      	bmi.n	8028aba <GATT_L2cap_Data_Handler+0x7e>
 8028a7e:	6a22      	ldr	r2, [r4, #32]
 8028a80:	7916      	ldrb	r6, [r2, #4]
 8028a82:	0672      	lsls	r2, r6, #25
 8028a84:	d433      	bmi.n	8028aee <GATT_L2cap_Data_Handler+0xb2>
 8028a86:	2e1b      	cmp	r6, #27
 8028a88:	bf18      	it	ne
 8028a8a:	2e1d      	cmpne	r6, #29
 8028a8c:	d155      	bne.n	8028b3a <GATT_L2cap_Data_Handler+0xfe>
 8028a8e:	b288      	uxth	r0, r1
 8028a90:	2803      	cmp	r0, #3
 8028a92:	d33b      	bcc.n	8028b0c <GATT_L2cap_Data_Handler+0xd0>
 8028a94:	4843      	ldr	r0, [pc, #268]	@ (8028ba4 <__arm_cp.2_0>)
 8028a96:	f500 7001 	add.w	r0, r0, #516	@ 0x204
 8028a9a:	e033      	b.n	8028b04 <GATT_L2cap_Data_Handler+0xc8>
 8028a9c:	2001      	movs	r0, #1
 8028a9e:	2101      	movs	r1, #1
 8028aa0:	4622      	mov	r2, r4
 8028aa2:	f001 fa6b 	bl	8029f7c <GATT_Send_Notif_Or_Ind>
 8028aa6:	bb98      	cbnz	r0, 8028b10 <GATT_L2cap_Data_Handler+0xd4>
 8028aa8:	e011      	b.n	8028ace <GATT_L2cap_Data_Handler+0x92>
 8028aaa:	b185      	cbz	r5, 8028ace <GATT_L2cap_Data_Handler+0x92>
 8028aac:	07c1      	lsls	r1, r0, #31
 8028aae:	d106      	bne.n	8028abe <GATT_L2cap_Data_Handler+0x82>
 8028ab0:	281e      	cmp	r0, #30
 8028ab2:	d130      	bne.n	8028b16 <GATT_L2cap_Data_Handler+0xda>
 8028ab4:	4628      	mov	r0, r5
 8028ab6:	2103      	movs	r1, #3
 8028ab8:	e007      	b.n	8028aca <GATT_L2cap_Data_Handler+0x8e>
 8028aba:	2495      	movs	r4, #149	@ 0x95
 8028abc:	e029      	b.n	8028b12 <GATT_L2cap_Data_Handler+0xd6>
 8028abe:	6868      	ldr	r0, [r5, #4]
 8028ac0:	2100      	movs	r1, #0
 8028ac2:	f020 0010 	bic.w	r0, r0, #16
 8028ac6:	6068      	str	r0, [r5, #4]
 8028ac8:	4628      	mov	r0, r5
 8028aca:	f000 f871 	bl	8028bb0 <GATT_Stop_Timer>
 8028ace:	f000 fb73 	bl	80291b8 <OUTLINED_FUNCTION_1>
 8028ad2:	4834      	ldr	r0, [pc, #208]	@ (8028ba4 <__arm_cp.2_0>)
 8028ad4:	f990 01d4 	ldrsb.w	r0, [r0, #468]	@ 0x1d4
 8028ad8:	f1b0 3fff 	cmp.w	r0, #4294967295	@ 0xffffffff
 8028adc:	dc18      	bgt.n	8028b10 <GATT_L2cap_Data_Handler+0xd4>
 8028ade:	4831      	ldr	r0, [pc, #196]	@ (8028ba4 <__arm_cp.2_0>)
 8028ae0:	f890 1039 	ldrb.w	r1, [r0, #57]	@ 0x39
 8028ae4:	f001 01fd 	and.w	r1, r1, #253	@ 0xfd
 8028ae8:	f880 1039 	strb.w	r1, [r0, #57]	@ 0x39
 8028aec:	e010      	b.n	8028b10 <GATT_L2cap_Data_Handler+0xd4>
 8028aee:	8868      	ldrh	r0, [r5, #2]
 8028af0:	b289      	uxth	r1, r1
 8028af2:	4281      	cmp	r1, r0
 8028af4:	d80a      	bhi.n	8028b0c <GATT_L2cap_Data_Handler+0xd0>
 8028af6:	f046 0080 	orr.w	r0, r6, #128	@ 0x80
 8028afa:	28d2      	cmp	r0, #210	@ 0xd2
 8028afc:	d106      	bne.n	8028b0c <GATT_L2cap_Data_Handler+0xd0>
 8028afe:	4829      	ldr	r0, [pc, #164]	@ (8028ba4 <__arm_cp.2_0>)
 8028b00:	f500 70fe 	add.w	r0, r0, #508	@ 0x1fc
 8028b04:	4621      	mov	r1, r4
 8028b06:	f003 fc77 	bl	802c3f8 <ACL_List_Insert_Tail>
 8028b0a:	e7e8      	b.n	8028ade <GATT_L2cap_Data_Handler+0xa2>
 8028b0c:	f000 fb54 	bl	80291b8 <OUTLINED_FUNCTION_1>
 8028b10:	2400      	movs	r4, #0
 8028b12:	4620      	mov	r0, r4
 8028b14:	bd70      	pop	{r4, r5, r6, pc}
 8028b16:	6869      	ldr	r1, [r5, #4]
 8028b18:	f021 0040 	bic.w	r0, r1, #64	@ 0x40
 8028b1c:	0509      	lsls	r1, r1, #20
 8028b1e:	6068      	str	r0, [r5, #4]
 8028b20:	d5d5      	bpl.n	8028ace <GATT_L2cap_Data_Handler+0x92>
 8028b22:	f440 7080 	orr.w	r0, r0, #256	@ 0x100
 8028b26:	2102      	movs	r1, #2
 8028b28:	6068      	str	r0, [r5, #4]
 8028b2a:	4628      	mov	r0, r5
 8028b2c:	f000 f85e 	bl	8028bec <GATT_Start_Timer>
 8028b30:	6868      	ldr	r0, [r5, #4]
 8028b32:	f420 6000 	bic.w	r0, r0, #2048	@ 0x800
 8028b36:	6068      	str	r0, [r5, #4]
 8028b38:	e7c9      	b.n	8028ace <GATT_L2cap_Data_Handler+0x92>
 8028b3a:	2e1e      	cmp	r6, #30
 8028b3c:	d111      	bne.n	8028b62 <GATT_L2cap_Data_Handler+0x126>
 8028b3e:	f000 fb3b 	bl	80291b8 <OUTLINED_FUNCTION_1>
 8028b42:	6868      	ldr	r0, [r5, #4]
 8028b44:	0701      	lsls	r1, r0, #28
 8028b46:	d5e3      	bpl.n	8028b10 <GATT_L2cap_Data_Handler+0xd4>
 8028b48:	f020 0008 	bic.w	r0, r0, #8
 8028b4c:	2101      	movs	r1, #1
 8028b4e:	6068      	str	r0, [r5, #4]
 8028b50:	4628      	mov	r0, r5
 8028b52:	f000 f82d 	bl	8028bb0 <GATT_Stop_Timer>
 8028b56:	8829      	ldrh	r1, [r5, #0]
 8028b58:	2000      	movs	r0, #0
 8028b5a:	2400      	movs	r4, #0
 8028b5c:	f7fe fc4a 	bl	80273f4 <EVT_aci_gatt_server_confirmation>
 8028b60:	e7d7      	b.n	8028b12 <GATT_L2cap_Data_Handler+0xd6>
 8028b62:	07f1      	lsls	r1, r6, #31
 8028b64:	bf18      	it	ne
 8028b66:	2e15      	cmpne	r6, #21
 8028b68:	d109      	bne.n	8028b7e <GATT_L2cap_Data_Handler+0x142>
 8028b6a:	06c1      	lsls	r1, r0, #27
 8028b6c:	d410      	bmi.n	8028b90 <GATT_L2cap_Data_Handler+0x154>
 8028b6e:	f040 0010 	orr.w	r0, r0, #16
 8028b72:	2100      	movs	r1, #0
 8028b74:	6068      	str	r0, [r5, #4]
 8028b76:	4628      	mov	r0, r5
 8028b78:	f000 f838 	bl	8028bec <GATT_Start_Timer>
 8028b7c:	e78a      	b.n	8028a94 <GATT_L2cap_Data_Handler+0x58>
 8028b7e:	2e19      	cmp	r6, #25
 8028b80:	d8f3      	bhi.n	8028b6a <GATT_L2cap_Data_Handler+0x12e>
 8028b82:	0541      	lsls	r1, r0, #21
 8028b84:	d40c      	bmi.n	8028ba0 <GATT_L2cap_Data_Handler+0x164>
 8028b86:	f440 6080 	orr.w	r0, r0, #1024	@ 0x400
 8028b8a:	622c      	str	r4, [r5, #32]
 8028b8c:	6068      	str	r0, [r5, #4]
 8028b8e:	e7a6      	b.n	8028ade <GATT_L2cap_Data_Handler+0xa2>
 8028b90:	f000 fb12 	bl	80291b8 <OUTLINED_FUNCTION_1>
 8028b94:	8828      	ldrh	r0, [r5, #0]
 8028b96:	4631      	mov	r1, r6
 8028b98:	2201      	movs	r2, #1
 8028b9a:	f000 f81b 	bl	8028bd4 <GATT_ReportUnexpectedMsg>
 8028b9e:	e7b7      	b.n	8028b10 <GATT_L2cap_Data_Handler+0xd4>
 8028ba0:	2491      	movs	r4, #145	@ 0x91
 8028ba2:	e7b6      	b.n	8028b12 <GATT_L2cap_Data_Handler+0xd6>

08028ba4 <__arm_cp.2_0>:
 8028ba4:	20009f5c 	.word	0x20009f5c

08028ba8 <GATT_Get_Packet_Bearer>:
 8028ba8:	8900      	ldrh	r0, [r0, #8]
 8028baa:	f000 bac5 	b.w	8029138 <GATT_Get_Root_Bearer>
	...

08028bb0 <GATT_Stop_Timer>:
 8028bb0:	4a06      	ldr	r2, [pc, #24]	@ (8028bcc <__arm_cp.4_0>)
 8028bb2:	f8d2 21f8 	ldr.w	r2, [r2, #504]	@ 0x1f8
 8028bb6:	1a80      	subs	r0, r0, r2
 8028bb8:	2224      	movs	r2, #36	@ 0x24
 8028bba:	fb90 f0f2 	sdiv	r0, r0, r2
 8028bbe:	b2c0      	uxtb	r0, r0
 8028bc0:	ea41 0080 	orr.w	r0, r1, r0, lsl #2
 8028bc4:	f500 6000 	add.w	r0, r0, #2048	@ 0x800
 8028bc8:	f7e0 bf63 	b.w	8009a92 <BLEPLAT_TimerStop>

08028bcc <__arm_cp.4_0>:
 8028bcc:	20009f5c 	.word	0x20009f5c

08028bd0 <GATT_Evt_Handle>:
 8028bd0:	8800      	ldrh	r0, [r0, #0]
 8028bd2:	4770      	bx	lr

08028bd4 <GATT_ReportUnexpectedMsg>:
 8028bd4:	b5e0      	push	{r5, r6, r7, lr}
 8028bd6:	0612      	lsls	r2, r2, #24
 8028bd8:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
 8028bdc:	4408      	add	r0, r1
 8028bde:	2104      	movs	r1, #4
 8028be0:	9001      	str	r0, [sp, #4]
 8028be2:	aa01      	add	r2, sp, #4
 8028be4:	2002      	movs	r0, #2
 8028be6:	f7fe fb3d 	bl	8027264 <EVT_aci_hal_fw_error>
 8028bea:	bd8c      	pop	{r2, r3, r7, pc}

08028bec <GATT_Start_Timer>:
 8028bec:	4a07      	ldr	r2, [pc, #28]	@ (8028c0c <__arm_cp.7_0>)
 8028bee:	f8d2 21f8 	ldr.w	r2, [r2, #504]	@ 0x1f8
 8028bf2:	1a80      	subs	r0, r0, r2
 8028bf4:	2224      	movs	r2, #36	@ 0x24
 8028bf6:	fb90 f0f2 	sdiv	r0, r0, r2
 8028bfa:	b2c0      	uxtb	r0, r0
 8028bfc:	ea41 0080 	orr.w	r0, r1, r0, lsl #2
 8028c00:	f247 5130 	movw	r1, #30000	@ 0x7530
 8028c04:	f500 6000 	add.w	r0, r0, #2048	@ 0x800
 8028c08:	f7e0 bf33 	b.w	8009a72 <BLEPLAT_TimerStart>

08028c0c <__arm_cp.7_0>:
 8028c0c:	20009f5c 	.word	0x20009f5c

08028c10 <GATT_Process>:
 8028c10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028c14:	b085      	sub	sp, #20
 8028c16:	f8df a398 	ldr.w	sl, [pc, #920]	@ 8028fb0 <__arm_cp.8_0>
 8028c1a:	f89a 0039 	ldrb.w	r0, [sl, #57]	@ 0x39
 8028c1e:	f89a 11d4 	ldrb.w	r1, [sl, #468]	@ 0x1d4
 8028c22:	f040 0002 	orr.w	r0, r0, #2
 8028c26:	f88a 0039 	strb.w	r0, [sl, #57]	@ 0x39
 8028c2a:	07c8      	lsls	r0, r1, #31
 8028c2c:	f000 81bc 	beq.w	8028fa8 <GATT_Process+0x398>
 8028c30:	2500      	movs	r5, #0
 8028c32:	2600      	movs	r6, #0
 8028c34:	f89a 01d5 	ldrb.w	r0, [sl, #469]	@ 0x1d5
 8028c38:	4286      	cmp	r6, r0
 8028c3a:	d21c      	bcs.n	8028c76 <GATT_Process+0x66>
 8028c3c:	f8da 01f8 	ldr.w	r0, [sl, #504]	@ 0x1f8
 8028c40:	5b41      	ldrh	r1, [r0, r5]
 8028c42:	b1a9      	cbz	r1, 8028c70 <GATT_Process+0x60>
 8028c44:	1944      	adds	r4, r0, r5
 8028c46:	6860      	ldr	r0, [r4, #4]
 8028c48:	0242      	lsls	r2, r0, #9
 8028c4a:	d40e      	bmi.n	8028c6a <GATT_Process+0x5a>
 8028c4c:	0282      	lsls	r2, r0, #10
 8028c4e:	d409      	bmi.n	8028c64 <GATT_Process+0x54>
 8028c50:	0740      	lsls	r0, r0, #29
 8028c52:	d50d      	bpl.n	8028c70 <GATT_Process+0x60>
 8028c54:	4620      	mov	r0, r4
 8028c56:	f001 f959 	bl	8029f0c <GATT_Check_For_Service_Change>
 8028c5a:	6860      	ldr	r0, [r4, #4]
 8028c5c:	f020 0004 	bic.w	r0, r0, #4
 8028c60:	6060      	str	r0, [r4, #4]
 8028c62:	e005      	b.n	8028c70 <GATT_Process+0x60>
 8028c64:	2001      	movs	r0, #1
 8028c66:	f7fe fbd7 	bl	8027418 <EVT_aci_gatt_proc_timeout>
 8028c6a:	4620      	mov	r0, r4
 8028c6c:	f000 f9a2 	bl	8028fb4 <GATT_Reset_To_Closed_State>
 8028c70:	3524      	adds	r5, #36	@ 0x24
 8028c72:	3601      	adds	r6, #1
 8028c74:	e7de      	b.n	8028c34 <GATT_Process+0x24>
 8028c76:	f04f 0800 	mov.w	r8, #0
 8028c7a:	f04f 0900 	mov.w	r9, #0
 8028c7e:	4581      	cmp	r9, r0
 8028c80:	f080 8080 	bcs.w	8028d84 <GATT_Process+0x174>
 8028c84:	eb09 01c9 	add.w	r1, r9, r9, lsl #3
 8028c88:	f8da 21f8 	ldr.w	r2, [sl, #504]	@ 0x1f8
 8028c8c:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8028c90:	2b00      	cmp	r3, #0
 8028c92:	d074      	beq.n	8028d7e <GATT_Process+0x16e>
 8028c94:	eb02 0481 	add.w	r4, r2, r1, lsl #2
 8028c98:	4627      	mov	r7, r4
 8028c9a:	f857 0f20 	ldr.w	r0, [r7, #32]!
 8028c9e:	b3b8      	cbz	r0, 8028d10 <GATT_Process+0x100>
 8028ca0:	4626      	mov	r6, r4
 8028ca2:	f856 1f04 	ldr.w	r1, [r6, #4]!
 8028ca6:	05ca      	lsls	r2, r1, #23
 8028ca8:	6a02      	ldr	r2, [r0, #32]
 8028caa:	7915      	ldrb	r5, [r2, #4]
 8028cac:	d523      	bpl.n	8028cf6 <GATT_Process+0xe6>
 8028cae:	054b      	lsls	r3, r1, #21
 8028cb0:	d521      	bpl.n	8028cf6 <GATT_Process+0xe6>
 8028cb2:	f894 c01a 	ldrb.w	ip, [r4, #26]
 8028cb6:	4565      	cmp	r5, ip
 8028cb8:	d114      	bne.n	8028ce4 <GATT_Process+0xd4>
 8028cba:	f421 6080 	bic.w	r0, r1, #1024	@ 0x400
 8028cbe:	2102      	movs	r1, #2
 8028cc0:	6030      	str	r0, [r6, #0]
 8028cc2:	4620      	mov	r0, r4
 8028cc4:	f7ff ff74 	bl	8028bb0 <GATT_Stop_Timer>
 8028cc8:	6830      	ldr	r0, [r6, #0]
 8028cca:	69e1      	ldr	r1, [r4, #28]
 8028ccc:	f420 7080 	bic.w	r0, r0, #256	@ 0x100
 8028cd0:	6030      	str	r0, [r6, #0]
 8028cd2:	4620      	mov	r0, r4
 8028cd4:	4788      	blx	r1
 8028cd6:	2895      	cmp	r0, #149	@ 0x95
 8028cd8:	bf02      	ittt	eq
 8028cda:	6830      	ldreq	r0, [r6, #0]
 8028cdc:	f440 6080 	orreq.w	r0, r0, #1024	@ 0x400
 8028ce0:	6030      	streq	r0, [r6, #0]
 8028ce2:	e015      	b.n	8028d10 <GATT_Process+0x100>
 8028ce4:	2d01      	cmp	r5, #1
 8028ce6:	d106      	bne.n	8028cf6 <GATT_Process+0xe6>
 8028ce8:	8883      	ldrh	r3, [r0, #4]
 8028cea:	2b06      	cmp	r3, #6
 8028cec:	d303      	bcc.n	8028cf6 <GATT_Process+0xe6>
 8028cee:	7952      	ldrb	r2, [r2, #5]
 8028cf0:	3201      	adds	r2, #1
 8028cf2:	4562      	cmp	r2, ip
 8028cf4:	d0e1      	beq.n	8028cba <GATT_Process+0xaa>
 8028cf6:	f003 fa47 	bl	802c188 <ACL_Release>
 8028cfa:	6830      	ldr	r0, [r6, #0]
 8028cfc:	4629      	mov	r1, r5
 8028cfe:	2200      	movs	r2, #0
 8028d00:	f8c7 8000 	str.w	r8, [r7]
 8028d04:	f420 6080 	bic.w	r0, r0, #1024	@ 0x400
 8028d08:	6030      	str	r0, [r6, #0]
 8028d0a:	8820      	ldrh	r0, [r4, #0]
 8028d0c:	f7ff ff62 	bl	8028bd4 <GATT_ReportUnexpectedMsg>
 8028d10:	f8da 7204 	ldr.w	r7, [sl, #516]	@ 0x204
 8028d14:	1d26      	adds	r6, r4, #4
 8028d16:	b387      	cbz	r7, 8028d7a <GATT_Process+0x16a>
 8028d18:	8938      	ldrh	r0, [r7, #8]
 8028d1a:	8821      	ldrh	r1, [r4, #0]
 8028d1c:	463d      	mov	r5, r7
 8028d1e:	683f      	ldr	r7, [r7, #0]
 8028d20:	4288      	cmp	r0, r1
 8028d22:	d1f8      	bne.n	8028d16 <GATT_Process+0x106>
 8028d24:	6a29      	ldr	r1, [r5, #32]
 8028d26:	7909      	ldrb	r1, [r1, #4]
 8028d28:	291d      	cmp	r1, #29
 8028d2a:	d112      	bne.n	8028d52 <GATT_Process+0x142>
 8028d2c:	7871      	ldrb	r1, [r6, #1]
 8028d2e:	06c9      	lsls	r1, r1, #27
 8028d30:	d416      	bmi.n	8028d60 <GATT_Process+0x150>
 8028d32:	4628      	mov	r0, r5
 8028d34:	f7fe fc08 	bl	8027548 <EVT_GATT_Indication>
 8028d38:	8821      	ldrh	r1, [r4, #0]
 8028d3a:	2800      	cmp	r0, #0
 8028d3c:	8129      	strh	r1, [r5, #8]
 8028d3e:	d1ea      	bne.n	8028d16 <GATT_Process+0x106>
 8028d40:	6830      	ldr	r0, [r6, #0]
 8028d42:	2103      	movs	r1, #3
 8028d44:	f440 5080 	orr.w	r0, r0, #4096	@ 0x1000
 8028d48:	6030      	str	r0, [r6, #0]
 8028d4a:	4620      	mov	r0, r4
 8028d4c:	f7ff ff4e 	bl	8028bec <GATT_Start_Timer>
 8028d50:	e00a      	b.n	8028d68 <GATT_Process+0x158>
 8028d52:	4620      	mov	r0, r4
 8028d54:	4629      	mov	r1, r5
 8028d56:	f000 f93b 	bl	8028fd0 <GATT_Handle_Notif>
 8028d5a:	2800      	cmp	r0, #0
 8028d5c:	d1db      	bne.n	8028d16 <GATT_Process+0x106>
 8028d5e:	e003      	b.n	8028d68 <GATT_Process+0x158>
 8028d60:	211d      	movs	r1, #29
 8028d62:	2202      	movs	r2, #2
 8028d64:	f7ff ff36 	bl	8028bd4 <GATT_ReportUnexpectedMsg>
 8028d68:	f50a 7001 	add.w	r0, sl, #516	@ 0x204
 8028d6c:	4629      	mov	r1, r5
 8028d6e:	f003 fb53 	bl	802c418 <ACL_List_Remove>
 8028d72:	4628      	mov	r0, r5
 8028d74:	f003 fa08 	bl	802c188 <ACL_Release>
 8028d78:	e7cd      	b.n	8028d16 <GATT_Process+0x106>
 8028d7a:	f89a 01d5 	ldrb.w	r0, [sl, #469]	@ 0x1d5
 8028d7e:	f109 0901 	add.w	r9, r9, #1
 8028d82:	e77c      	b.n	8028c7e <GATT_Process+0x6e>
 8028d84:	f8da b204 	ldr.w	fp, [sl, #516]	@ 0x204
 8028d88:	f50a 7801 	add.w	r8, sl, #516	@ 0x204
 8028d8c:	f1bb 0f00 	cmp.w	fp, #0
 8028d90:	f000 809d 	beq.w	8028ece <GATT_Process+0x2be>
 8028d94:	465d      	mov	r5, fp
 8028d96:	f8db b000 	ldr.w	fp, [fp]
 8028d9a:	6a28      	ldr	r0, [r5, #32]
 8028d9c:	7904      	ldrb	r4, [r0, #4]
 8028d9e:	4628      	mov	r0, r5
 8028da0:	f7ff ff02 	bl	8028ba8 <GATT_Get_Packet_Bearer>
 8028da4:	b1c0      	cbz	r0, 8028dd8 <GATT_Process+0x1c8>
 8028da6:	211c      	movs	r1, #28
 8028da8:	4607      	mov	r7, r0
 8028daa:	f000 f9df 	bl	802916c <GATT_New_PDU>
 8028dae:	2800      	cmp	r0, #0
 8028db0:	f000 808d 	beq.w	8028ece <GATT_Process+0x2be>
 8028db4:	88a9      	ldrh	r1, [r5, #4]
 8028db6:	4606      	mov	r6, r0
 8028db8:	8878      	ldrh	r0, [r7, #2]
 8028dba:	3904      	subs	r1, #4
 8028dbc:	4281      	cmp	r1, r0
 8028dbe:	dd11      	ble.n	8028de4 <GATT_Process+0x1d4>
 8028dc0:	2004      	movs	r0, #4
 8028dc2:	e023      	b.n	8028e0c <GATT_Process+0x1fc>
 8028dc4:	6878      	ldr	r0, [r7, #4]
 8028dc6:	f020 7080 	bic.w	r0, r0, #16777216	@ 0x1000000
 8028dca:	6078      	str	r0, [r7, #4]
 8028dcc:	4630      	mov	r0, r6
 8028dce:	f000 f9d5 	bl	802917c <GATT_Send_Packet>
 8028dd2:	f1b9 0f00 	cmp.w	r9, #0
 8028dd6:	d1d9      	bne.n	8028d8c <GATT_Process+0x17c>
 8028dd8:	4640      	mov	r0, r8
 8028dda:	4629      	mov	r1, r5
 8028ddc:	f003 fb1c 	bl	802c418 <ACL_List_Remove>
 8028de0:	462e      	mov	r6, r5
 8028de2:	e069      	b.n	8028eb8 <GATT_Process+0x2a8>
 8028de4:	1ea1      	subs	r1, r4, #2
 8028de6:	2006      	movs	r0, #6
 8028de8:	291b      	cmp	r1, #27
 8028dea:	d80f      	bhi.n	8028e0c <GATT_Process+0x1fc>
 8028dec:	e8df f001 	tbb	[pc, r1]
 8028df0:	0e1b0e16 	.word	0x0e1b0e16
 8028df4:	0e250e20 	.word	0x0e250e20
 8028df8:	0e350e2d 	.word	0x0e350e2d
 8028dfc:	0e450e3d 	.word	0x0e450e3d
 8028e00:	0e0e0e4a 	.word	0x0e0e0e4a
 8028e04:	0e5a0e52 	.word	0x0e5a0e52
 8028e08:	640e0e0e 	.word	0x640e0e0e
 8028e0c:	4621      	mov	r1, r4
 8028e0e:	2200      	movs	r2, #0
 8028e10:	4633      	mov	r3, r6
 8028e12:	f04f 0900 	mov.w	r9, #0
 8028e16:	f001 fa2d 	bl	802a274 <ATT_Build_Error_Rsp>
 8028e1a:	e7d3      	b.n	8028dc4 <GATT_Process+0x1b4>
 8028e1c:	f000 f9c8 	bl	80291b0 <OUTLINED_FUNCTION_0>
 8028e20:	f002 fa18 	bl	802b254 <ATT_Build_Exchg_Mtu_Rsp>
 8028e24:	e042      	b.n	8028eac <GATT_Process+0x29c>
 8028e26:	f000 f9c3 	bl	80291b0 <OUTLINED_FUNCTION_0>
 8028e2a:	f002 f90b 	bl	802b044 <ATT_Build_Find_Info_Rsp>
 8028e2e:	e03d      	b.n	8028eac <GATT_Process+0x29c>
 8028e30:	f000 f9be 	bl	80291b0 <OUTLINED_FUNCTION_0>
 8028e34:	f001 f92c 	bl	802a090 <ATT_Build_Find_By_Type_Val_Rsp>
 8028e38:	e038      	b.n	8028eac <GATT_Process+0x29c>
 8028e3a:	79b8      	ldrb	r0, [r7, #6]
 8028e3c:	0700      	lsls	r0, r0, #28
 8028e3e:	d43b      	bmi.n	8028eb8 <GATT_Process+0x2a8>
 8028e40:	f000 f9b6 	bl	80291b0 <OUTLINED_FUNCTION_0>
 8028e44:	f001 faa6 	bl	802a394 <ATT_Build_Read_By_Type_Rsp>
 8028e48:	e030      	b.n	8028eac <GATT_Process+0x29c>
 8028e4a:	79b8      	ldrb	r0, [r7, #6]
 8028e4c:	0700      	lsls	r0, r0, #28
 8028e4e:	d433      	bmi.n	8028eb8 <GATT_Process+0x2a8>
 8028e50:	f000 f9ae 	bl	80291b0 <OUTLINED_FUNCTION_0>
 8028e54:	f001 fc3a 	bl	802a6cc <ATT_Build_Read_Rsp>
 8028e58:	e028      	b.n	8028eac <GATT_Process+0x29c>
 8028e5a:	79b8      	ldrb	r0, [r7, #6]
 8028e5c:	0700      	lsls	r0, r0, #28
 8028e5e:	d42b      	bmi.n	8028eb8 <GATT_Process+0x2a8>
 8028e60:	f000 f9a6 	bl	80291b0 <OUTLINED_FUNCTION_0>
 8028e64:	f001 fcaf 	bl	802a7c6 <ATT_Build_Read_Blob_Rsp>
 8028e68:	e020      	b.n	8028eac <GATT_Process+0x29c>
 8028e6a:	79b8      	ldrb	r0, [r7, #6]
 8028e6c:	0700      	lsls	r0, r0, #28
 8028e6e:	d423      	bmi.n	8028eb8 <GATT_Process+0x2a8>
 8028e70:	f000 f99e 	bl	80291b0 <OUTLINED_FUNCTION_0>
 8028e74:	f001 fd1c 	bl	802a8b0 <ATT_Build_Read_Multi_Rsp>
 8028e78:	e018      	b.n	8028eac <GATT_Process+0x29c>
 8028e7a:	f000 f999 	bl	80291b0 <OUTLINED_FUNCTION_0>
 8028e7e:	f001 fdbb 	bl	802a9f8 <ATT_Build_Read_By_Grp_Type_Rsp>
 8028e82:	e013      	b.n	8028eac <GATT_Process+0x29c>
 8028e84:	79b8      	ldrb	r0, [r7, #6]
 8028e86:	0780      	lsls	r0, r0, #30
 8028e88:	d416      	bmi.n	8028eb8 <GATT_Process+0x2a8>
 8028e8a:	f000 f991 	bl	80291b0 <OUTLINED_FUNCTION_0>
 8028e8e:	f001 fe8f 	bl	802abb0 <ATT_Build_Write_Rsp>
 8028e92:	e00b      	b.n	8028eac <GATT_Process+0x29c>
 8028e94:	79b8      	ldrb	r0, [r7, #6]
 8028e96:	0780      	lsls	r0, r0, #30
 8028e98:	d40e      	bmi.n	8028eb8 <GATT_Process+0x2a8>
 8028e9a:	f000 f989 	bl	80291b0 <OUTLINED_FUNCTION_0>
 8028e9e:	f001 ff29 	bl	802acf4 <ATT_Build_Prepare_Write_Rsp>
 8028ea2:	e003      	b.n	8028eac <GATT_Process+0x29c>
 8028ea4:	f000 f984 	bl	80291b0 <OUTLINED_FUNCTION_0>
 8028ea8:	f001 ff9e 	bl	802ade8 <ATT_Build_Exec_Write_Rsp>
 8028eac:	4681      	mov	r9, r0
 8028eae:	280c      	cmp	r0, #12
 8028eb0:	bf18      	it	ne
 8028eb2:	f1b9 0f69 	cmpne.w	r9, #105	@ 0x69
 8028eb6:	d103      	bne.n	8028ec0 <GATT_Process+0x2b0>
 8028eb8:	4630      	mov	r0, r6
 8028eba:	f003 f965 	bl	802c188 <ACL_Release>
 8028ebe:	e765      	b.n	8028d8c <GATT_Process+0x17c>
 8028ec0:	f1b9 0f95 	cmp.w	r9, #149	@ 0x95
 8028ec4:	f47f af7e 	bne.w	8028dc4 <GATT_Process+0x1b4>
 8028ec8:	4630      	mov	r0, r6
 8028eca:	f003 f95d 	bl	802c188 <ACL_Release>
 8028ece:	f8da 71fc 	ldr.w	r7, [sl, #508]	@ 0x1fc
 8028ed2:	f50a 74fe 	add.w	r4, sl, #508	@ 0x1fc
 8028ed6:	b1ff      	cbz	r7, 8028f18 <GATT_Process+0x308>
 8028ed8:	463d      	mov	r5, r7
 8028eda:	683f      	ldr	r7, [r7, #0]
 8028edc:	4628      	mov	r0, r5
 8028ede:	f7ff fe63 	bl	8028ba8 <GATT_Get_Packet_Bearer>
 8028ee2:	b188      	cbz	r0, 8028f08 <GATT_Process+0x2f8>
 8028ee4:	4606      	mov	r6, r0
 8028ee6:	6a28      	ldr	r0, [r5, #32]
 8028ee8:	7900      	ldrb	r0, [r0, #4]
 8028eea:	f040 0080 	orr.w	r0, r0, #128	@ 0x80
 8028eee:	28d2      	cmp	r0, #210	@ 0xd2
 8028ef0:	d107      	bne.n	8028f02 <GATT_Process+0x2f2>
 8028ef2:	79b0      	ldrb	r0, [r6, #6]
 8028ef4:	0740      	lsls	r0, r0, #29
 8028ef6:	d404      	bmi.n	8028f02 <GATT_Process+0x2f2>
 8028ef8:	4630      	mov	r0, r6
 8028efa:	4629      	mov	r1, r5
 8028efc:	2201      	movs	r2, #1
 8028efe:	f002 f83c 	bl	802af7a <ATT_Handle_Write_Cmd>
 8028f02:	79b0      	ldrb	r0, [r6, #6]
 8028f04:	0740      	lsls	r0, r0, #29
 8028f06:	d4e6      	bmi.n	8028ed6 <GATT_Process+0x2c6>
 8028f08:	4620      	mov	r0, r4
 8028f0a:	4629      	mov	r1, r5
 8028f0c:	f003 fa84 	bl	802c418 <ACL_List_Remove>
 8028f10:	4628      	mov	r0, r5
 8028f12:	f003 f939 	bl	802c188 <ACL_Release>
 8028f16:	e7de      	b.n	8028ed6 <GATT_Process+0x2c6>
 8028f18:	46eb      	mov	fp, sp
 8028f1a:	2114      	movs	r1, #20
 8028f1c:	4658      	mov	r0, fp
 8028f1e:	f006 fa7b 	bl	802f418 <__aeabi_memclr>
 8028f22:	f8da 7218 	ldr.w	r7, [sl, #536]	@ 0x218
 8028f26:	f04f 0924 	mov.w	r9, #36	@ 0x24
 8028f2a:	f50a 7506 	add.w	r5, sl, #536	@ 0x218
 8028f2e:	f04f 0801 	mov.w	r8, #1
 8028f32:	b307      	cbz	r7, 8028f76 <GATT_Process+0x366>
 8028f34:	463e      	mov	r6, r7
 8028f36:	683f      	ldr	r7, [r7, #0]
 8028f38:	4630      	mov	r0, r6
 8028f3a:	f7ff fe35 	bl	8028ba8 <GATT_Get_Packet_Bearer>
 8028f3e:	2800      	cmp	r0, #0
 8028f40:	d0f7      	beq.n	8028f32 <GATT_Process+0x322>
 8028f42:	f8da 11f8 	ldr.w	r1, [sl, #504]	@ 0x1f8
 8028f46:	1a40      	subs	r0, r0, r1
 8028f48:	fb90 f0f9 	sdiv	r0, r0, r9
 8028f4c:	b2c4      	uxtb	r4, r0
 8028f4e:	f81b 0004 	ldrb.w	r0, [fp, r4]
 8028f52:	2800      	cmp	r0, #0
 8028f54:	d1ed      	bne.n	8028f32 <GATT_Process+0x322>
 8028f56:	4628      	mov	r0, r5
 8028f58:	4631      	mov	r1, r6
 8028f5a:	f003 fa5d 	bl	802c418 <ACL_List_Remove>
 8028f5e:	4630      	mov	r0, r6
 8028f60:	f000 f920 	bl	80291a4 <GATT_Send_Packet_Once>
 8028f64:	2800      	cmp	r0, #0
 8028f66:	d0e4      	beq.n	8028f32 <GATT_Process+0x322>
 8028f68:	4628      	mov	r0, r5
 8028f6a:	4631      	mov	r1, r6
 8028f6c:	f003 fa4e 	bl	802c40c <ACL_List_Insert_Head>
 8028f70:	f80b 8004 	strb.w	r8, [fp, r4]
 8028f74:	e7dd      	b.n	8028f32 <GATT_Process+0x322>
 8028f76:	f99a 01d4 	ldrsb.w	r0, [sl, #468]	@ 0x1d4
 8028f7a:	f1b0 3fff 	cmp.w	r0, #4294967295	@ 0xffffffff
 8028f7e:	dc13      	bgt.n	8028fa8 <GATT_Process+0x398>
 8028f80:	f8da 0204 	ldr.w	r0, [sl, #516]	@ 0x204
 8028f84:	b980      	cbnz	r0, 8028fa8 <GATT_Process+0x398>
 8028f86:	f8ba 01d6 	ldrh.w	r0, [sl, #470]	@ 0x1d6
 8028f8a:	f003 f9ff 	bl	802c38c <ACL_Tx_Pool_Size>
 8028f8e:	b158      	cbz	r0, 8028fa8 <GATT_Process+0x398>
 8028f90:	4602      	mov	r2, r0
 8028f92:	2000      	movs	r0, #0
 8028f94:	2100      	movs	r1, #0
 8028f96:	f7fe fa29 	bl	80273ec <EVT_aci_gatt_tx_pool_available>
 8028f9a:	b928      	cbnz	r0, 8028fa8 <GATT_Process+0x398>
 8028f9c:	f89a 01d4 	ldrb.w	r0, [sl, #468]	@ 0x1d4
 8028fa0:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 8028fa4:	f88a 01d4 	strb.w	r0, [sl, #468]	@ 0x1d4
 8028fa8:	b005      	add	sp, #20
 8028faa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028fae:	bf00      	nop

08028fb0 <__arm_cp.8_0>:
 8028fb0:	20009f5c 	.word	0x20009f5c

08028fb4 <GATT_Reset_To_Closed_State>:
 8028fb4:	b5b0      	push	{r4, r5, r7, lr}
 8028fb6:	2101      	movs	r1, #1
 8028fb8:	4604      	mov	r4, r0
 8028fba:	f002 fd81 	bl	802bac0 <GATT_Store_Server_Database>
 8028fbe:	4620      	mov	r0, r4
 8028fc0:	8825      	ldrh	r5, [r4, #0]
 8028fc2:	f000 f831 	bl	8029028 <GATT_Reset_Bearer>
 8028fc6:	4628      	mov	r0, r5
 8028fc8:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8028fcc:	f004 b8c9 	b.w	802d162 <SMP_Forget_Device>

08028fd0 <GATT_Handle_Notif>:
 8028fd0:	b580      	push	{r7, lr}
 8028fd2:	6a0a      	ldr	r2, [r1, #32]
 8028fd4:	7912      	ldrb	r2, [r2, #4]
 8028fd6:	2a1b      	cmp	r2, #27
 8028fd8:	bf1c      	itt	ne
 8028fda:	2091      	movne	r0, #145	@ 0x91
 8028fdc:	bd80      	popne	{r7, pc}
 8028fde:	8800      	ldrh	r0, [r0, #0]
 8028fe0:	8108      	strh	r0, [r1, #8]
 8028fe2:	4608      	mov	r0, r1
 8028fe4:	f7fe fb14 	bl	8027610 <EVT_GATT_Notification>
 8028fe8:	2000      	movs	r0, #0
 8028fea:	bd80      	pop	{r7, pc}

08028fec <GATT_Timeout_Cb>:
 8028fec:	4907      	ldr	r1, [pc, #28]	@ (802900c <__arm_cp.11_0>)
 8028fee:	0880      	lsrs	r0, r0, #2
 8028ff0:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 8028ff4:	f8d1 11f8 	ldr.w	r1, [r1, #504]	@ 0x1f8
 8028ff8:	f831 2020 	ldrh.w	r2, [r1, r0, lsl #2]
 8028ffc:	b12a      	cbz	r2, 802900a <GATT_Timeout_Cb+0x1e>
 8028ffe:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 8029002:	6841      	ldr	r1, [r0, #4]
 8029004:	f441 1100 	orr.w	r1, r1, #2097152	@ 0x200000
 8029008:	6041      	str	r1, [r0, #4]
 802900a:	4770      	bx	lr

0802900c <__arm_cp.11_0>:
 802900c:	20009f5c 	.word	0x20009f5c

08029010 <GATT_Bearer_Index>:
 8029010:	4904      	ldr	r1, [pc, #16]	@ (8029024 <__arm_cp.12_0>)
 8029012:	f8d1 11f8 	ldr.w	r1, [r1, #504]	@ 0x1f8
 8029016:	1a40      	subs	r0, r0, r1
 8029018:	2124      	movs	r1, #36	@ 0x24
 802901a:	fb90 f0f1 	sdiv	r0, r0, r1
 802901e:	b2c0      	uxtb	r0, r0
 8029020:	4770      	bx	lr
 8029022:	bf00      	nop

08029024 <__arm_cp.12_0>:
 8029024:	20009f5c 	.word	0x20009f5c

08029028 <GATT_Reset_Bearer>:
 8029028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802902a:	4d1d      	ldr	r5, [pc, #116]	@ (80290a0 <__arm_cp.13_0>)
 802902c:	4f1d      	ldr	r7, [pc, #116]	@ (80290a4 <__arm_cp.13_1>)
 802902e:	4604      	mov	r4, r0
 8029030:	f505 71fe 	add.w	r1, r5, #508	@ 0x1fc
 8029034:	47b8      	blx	r7
 8029036:	f505 7103 	add.w	r1, r5, #524	@ 0x20c
 802903a:	4620      	mov	r0, r4
 802903c:	47b8      	blx	r7
 802903e:	2600      	movs	r6, #0
 8029040:	f505 7101 	add.w	r1, r5, #516	@ 0x204
 8029044:	4620      	mov	r0, r4
 8029046:	f8a5 6214 	strh.w	r6, [r5, #532]	@ 0x214
 802904a:	47b8      	blx	r7
 802904c:	f505 7106 	add.w	r1, r5, #536	@ 0x218
 8029050:	4620      	mov	r0, r4
 8029052:	47b8      	blx	r7
 8029054:	4f14      	ldr	r7, [pc, #80]	@ (80290a8 <__arm_cp.13_2>)
 8029056:	4620      	mov	r0, r4
 8029058:	2100      	movs	r1, #0
 802905a:	47b8      	blx	r7
 802905c:	4620      	mov	r0, r4
 802905e:	2101      	movs	r1, #1
 8029060:	47b8      	blx	r7
 8029062:	4620      	mov	r0, r4
 8029064:	2102      	movs	r1, #2
 8029066:	47b8      	blx	r7
 8029068:	4620      	mov	r0, r4
 802906a:	2103      	movs	r1, #3
 802906c:	47b8      	blx	r7
 802906e:	f8d5 0228 	ldr.w	r0, [r5, #552]	@ 0x228
 8029072:	42a0      	cmp	r0, r4
 8029074:	bf08      	it	eq
 8029076:	f8c5 6228 	streq.w	r6, [r5, #552]	@ 0x228
 802907a:	7960      	ldrb	r0, [r4, #5]
 802907c:	0680      	lsls	r0, r0, #26
 802907e:	d503      	bpl.n	8029088 <GATT_Reset_Bearer+0x60>
 8029080:	4620      	mov	r0, r4
 8029082:	2191      	movs	r1, #145	@ 0x91
 8029084:	f000 f89b 	bl	80291be <GATT_Send_Complete_Event>
 8029088:	6a20      	ldr	r0, [r4, #32]
 802908a:	b108      	cbz	r0, 8029090 <GATT_Reset_Bearer+0x68>
 802908c:	f003 f87c 	bl	802c188 <ACL_Release>
 8029090:	4620      	mov	r0, r4
 8029092:	2100      	movs	r1, #0
 8029094:	2224      	movs	r2, #36	@ 0x24
 8029096:	f7fb faa7 	bl	80245e8 <ble_memset>
 802909a:	2017      	movs	r0, #23
 802909c:	8060      	strh	r0, [r4, #2]
 802909e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080290a0 <__arm_cp.13_0>:
 80290a0:	20009f5c 	.word	0x20009f5c

080290a4 <__arm_cp.13_1>:
 80290a4:	080290ad 	.word	0x080290ad

080290a8 <__arm_cp.13_2>:
 80290a8:	08028bb1 	.word	0x08028bb1

080290ac <GATT_Flush_Acl_List>:
 80290ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80290ae:	460c      	mov	r4, r1
 80290b0:	4605      	mov	r5, r0
 80290b2:	680f      	ldr	r7, [r1, #0]
 80290b4:	b16f      	cbz	r7, 80290d2 <GATT_Flush_Acl_List+0x26>
 80290b6:	463e      	mov	r6, r7
 80290b8:	8828      	ldrh	r0, [r5, #0]
 80290ba:	683f      	ldr	r7, [r7, #0]
 80290bc:	8931      	ldrh	r1, [r6, #8]
 80290be:	4281      	cmp	r1, r0
 80290c0:	d1f8      	bne.n	80290b4 <GATT_Flush_Acl_List+0x8>
 80290c2:	4620      	mov	r0, r4
 80290c4:	4631      	mov	r1, r6
 80290c6:	f003 f9a7 	bl	802c418 <ACL_List_Remove>
 80290ca:	4630      	mov	r0, r6
 80290cc:	f003 f85c 	bl	802c188 <ACL_Release>
 80290d0:	e7f0      	b.n	80290b4 <GATT_Flush_Acl_List+0x8>
 80290d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080290d4 <GATT_Connection_Complete_Handler>:
 80290d4:	4a0e      	ldr	r2, [pc, #56]	@ (8029110 <__arm_cp.15_0>)
 80290d6:	f892 11d4 	ldrb.w	r1, [r2, #468]	@ 0x1d4
 80290da:	07cb      	lsls	r3, r1, #31
 80290dc:	d016      	beq.n	802910c <GATT_Connection_Complete_Handler+0x38>
 80290de:	f041 0102 	orr.w	r1, r1, #2
 80290e2:	f882 11d4 	strb.w	r1, [r2, #468]	@ 0x1d4
 80290e6:	490b      	ldr	r1, [pc, #44]	@ (8029114 <__arm_cp.15_1>)
 80290e8:	f8d2 21f8 	ldr.w	r2, [r2, #504]	@ 0x1f8
 80290ec:	7d89      	ldrb	r1, [r1, #22]
 80290ee:	3a24      	subs	r2, #36	@ 0x24
 80290f0:	3101      	adds	r1, #1
 80290f2:	3901      	subs	r1, #1
 80290f4:	d00a      	beq.n	802910c <GATT_Connection_Complete_Handler+0x38>
 80290f6:	f102 0324 	add.w	r3, r2, #36	@ 0x24
 80290fa:	8c92      	ldrh	r2, [r2, #36]	@ 0x24
 80290fc:	2a00      	cmp	r2, #0
 80290fe:	461a      	mov	r2, r3
 8029100:	d1f7      	bne.n	80290f2 <GATT_Connection_Complete_Handler+0x1e>
 8029102:	8018      	strh	r0, [r3, #0]
 8029104:	6858      	ldr	r0, [r3, #4]
 8029106:	f040 0004 	orr.w	r0, r0, #4
 802910a:	6058      	str	r0, [r3, #4]
 802910c:	4770      	bx	lr
 802910e:	bf00      	nop

08029110 <__arm_cp.15_0>:
 8029110:	20009f5c 	.word	0x20009f5c

08029114 <__arm_cp.15_1>:
 8029114:	20009f34 	.word	0x20009f34

08029118 <GATT_Disconnection_Complete_Handler>:
 8029118:	b580      	push	{r7, lr}
 802911a:	4906      	ldr	r1, [pc, #24]	@ (8029134 <__arm_cp.16_0>)
 802911c:	f891 11d4 	ldrb.w	r1, [r1, #468]	@ 0x1d4
 8029120:	07c9      	lsls	r1, r1, #31
 8029122:	d006      	beq.n	8029132 <GATT_Disconnection_Complete_Handler+0x1a>
 8029124:	f000 f808 	bl	8029138 <GATT_Get_Root_Bearer>
 8029128:	b118      	cbz	r0, 8029132 <GATT_Disconnection_Complete_Handler+0x1a>
 802912a:	6841      	ldr	r1, [r0, #4]
 802912c:	f441 0180 	orr.w	r1, r1, #4194304	@ 0x400000
 8029130:	6041      	str	r1, [r0, #4]
 8029132:	bd80      	pop	{r7, pc}

08029134 <__arm_cp.16_0>:
 8029134:	20009f5c 	.word	0x20009f5c

08029138 <GATT_Get_Root_Bearer>:
 8029138:	b180      	cbz	r0, 802915c <GATT_Get_Root_Bearer+0x24>
 802913a:	490a      	ldr	r1, [pc, #40]	@ (8029164 <__arm_cp.17_0>)
 802913c:	f8d1 11f8 	ldr.w	r1, [r1, #504]	@ 0x1f8
 8029140:	f1a1 0224 	sub.w	r2, r1, #36	@ 0x24
 8029144:	4908      	ldr	r1, [pc, #32]	@ (8029168 <__arm_cp.17_1>)
 8029146:	7d89      	ldrb	r1, [r1, #22]
 8029148:	1c4b      	adds	r3, r1, #1
 802914a:	3b01      	subs	r3, #1
 802914c:	d006      	beq.n	802915c <GATT_Get_Root_Bearer+0x24>
 802914e:	f102 0124 	add.w	r1, r2, #36	@ 0x24
 8029152:	8c92      	ldrh	r2, [r2, #36]	@ 0x24
 8029154:	4282      	cmp	r2, r0
 8029156:	460a      	mov	r2, r1
 8029158:	d1f7      	bne.n	802914a <GATT_Get_Root_Bearer+0x12>
 802915a:	e000      	b.n	802915e <GATT_Get_Root_Bearer+0x26>
 802915c:	2100      	movs	r1, #0
 802915e:	4608      	mov	r0, r1
 8029160:	4770      	bx	lr
 8029162:	bf00      	nop

08029164 <__arm_cp.17_0>:
 8029164:	20009f5c 	.word	0x20009f5c

08029168 <__arm_cp.17_1>:
 8029168:	20009f34 	.word	0x20009f34

0802916c <GATT_New_PDU>:
 802916c:	8803      	ldrh	r3, [r0, #0]
 802916e:	1d08      	adds	r0, r1, #4
 8029170:	b282      	uxth	r2, r0
 8029172:	2001      	movs	r0, #1
 8029174:	4619      	mov	r1, r3
 8029176:	f002 bfd1 	b.w	802c11c <ACL_New>
	...

0802917c <GATT_Send_Packet>:
 802917c:	b5b0      	push	{r4, r5, r7, lr}
 802917e:	4d08      	ldr	r5, [pc, #32]	@ (80291a0 <__arm_cp.19_0>)
 8029180:	4604      	mov	r4, r0
 8029182:	f8d5 0218 	ldr.w	r0, [r5, #536]	@ 0x218
 8029186:	b918      	cbnz	r0, 8029190 <GATT_Send_Packet+0x14>
 8029188:	4620      	mov	r0, r4
 802918a:	f000 f80b 	bl	80291a4 <GATT_Send_Packet_Once>
 802918e:	b130      	cbz	r0, 802919e <GATT_Send_Packet+0x22>
 8029190:	f505 7006 	add.w	r0, r5, #536	@ 0x218
 8029194:	4621      	mov	r1, r4
 8029196:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 802919a:	f003 b92d 	b.w	802c3f8 <ACL_List_Insert_Tail>
 802919e:	bdb0      	pop	{r4, r5, r7, pc}

080291a0 <__arm_cp.19_0>:
 80291a0:	20009f5c 	.word	0x20009f5c

080291a4 <GATT_Send_Packet_Once>:
 80291a4:	4601      	mov	r1, r0
 80291a6:	2004      	movs	r0, #4
 80291a8:	f002 bd87 	b.w	802bcba <L2C_Send_Data>

080291ac <GATT_Get_Bearer>:
 80291ac:	f7ff bfc4 	b.w	8029138 <GATT_Get_Root_Bearer>

080291b0 <OUTLINED_FUNCTION_0>:
 80291b0:	4638      	mov	r0, r7
 80291b2:	4629      	mov	r1, r5
 80291b4:	4632      	mov	r2, r6
 80291b6:	4770      	bx	lr

080291b8 <OUTLINED_FUNCTION_1>:
 80291b8:	4620      	mov	r0, r4
 80291ba:	f002 bfe5 	b.w	802c188 <ACL_Release>

080291be <GATT_Send_Complete_Event>:
 80291be:	b510      	push	{r4, lr}
 80291c0:	460c      	mov	r4, r1
 80291c2:	f7ff fd05 	bl	8028bd0 <GATT_Evt_Handle>
 80291c6:	4601      	mov	r1, r0
 80291c8:	2001      	movs	r0, #1
 80291ca:	4622      	mov	r2, r4
 80291cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80291d0:	f7fe b914 	b.w	80273fc <EVT_aci_gatt_proc_complete>

080291d4 <GATT_Db_MemAlloc>:
 80291d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80291d8:	f8df 9078 	ldr.w	r9, [pc, #120]	@ 8029254 <__arm_cp.0_0>
 80291dc:	4e1e      	ldr	r6, [pc, #120]	@ (8029258 <__arm_cp.0_1>)
 80291de:	2101      	movs	r1, #1
 80291e0:	4604      	mov	r4, r0
 80291e2:	f8b9 2014 	ldrh.w	r2, [r9, #20]
 80291e6:	47b0      	blx	r6
 80291e8:	f8df 8070 	ldr.w	r8, [pc, #112]	@ 802925c <__arm_cp.0_2>
 80291ec:	f8b9 1010 	ldrh.w	r1, [r9, #16]
 80291f0:	2228      	movs	r2, #40	@ 0x28
 80291f2:	f8c8 01dc 	str.w	r0, [r8, #476]	@ 0x1dc
 80291f6:	4620      	mov	r0, r4
 80291f8:	47b0      	blx	r6
 80291fa:	f8b9 1012 	ldrh.w	r1, [r9, #18]
 80291fe:	4605      	mov	r5, r0
 8029200:	4620      	mov	r0, r4
 8029202:	2230      	movs	r2, #48	@ 0x30
 8029204:	47b0      	blx	r6
 8029206:	4604      	mov	r4, r0
 8029208:	f508 70f0 	add.w	r0, r8, #480	@ 0x1e0
 802920c:	f508 76f8 	add.w	r6, r8, #496	@ 0x1f0
 8029210:	2700      	movs	r7, #0
 8029212:	e9c8 0078 	strd	r0, r0, [r8, #480]	@ 0x1e0
 8029216:	e9c8 667c 	strd	r6, r6, [r8, #496]	@ 0x1f0
 802921a:	f8b9 0010 	ldrh.w	r0, [r9, #16]
 802921e:	4287      	cmp	r7, r0
 8029220:	d205      	bcs.n	802922e <GATT_Db_MemAlloc+0x5a>
 8029222:	4630      	mov	r0, r6
 8029224:	f000 ff2c 	bl	802a080 <OUTLINED_FUNCTION_0>
 8029228:	3528      	adds	r5, #40	@ 0x28
 802922a:	3701      	adds	r7, #1
 802922c:	e7f5      	b.n	802921a <GATT_Db_MemAlloc+0x46>
 802922e:	f508 75f4 	add.w	r5, r8, #488	@ 0x1e8
 8029232:	2600      	movs	r6, #0
 8029234:	e9c8 557a 	strd	r5, r5, [r8, #488]	@ 0x1e8
 8029238:	f8b9 0012 	ldrh.w	r0, [r9, #18]
 802923c:	4286      	cmp	r6, r0
 802923e:	bf28      	it	cs
 8029240:	e8bd 83f8 	ldmiacs.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8029244:	4628      	mov	r0, r5
 8029246:	4621      	mov	r1, r4
 8029248:	f005 ffb9 	bl	802f1be <CList_Insert>
 802924c:	3430      	adds	r4, #48	@ 0x30
 802924e:	3601      	adds	r6, #1
 8029250:	e7f2      	b.n	8029238 <GATT_Db_MemAlloc+0x64>
 8029252:	bf00      	nop

08029254 <__arm_cp.0_0>:
 8029254:	20009f34 	.word	0x20009f34

08029258 <__arm_cp.0_1>:
 8029258:	0802f2fb 	.word	0x0802f2fb

0802925c <__arm_cp.0_2>:
 802925c:	20009f5c 	.word	0x20009f5c

08029260 <GATT_Is_Multiple_Val_Attr>:
 8029260:	2801      	cmp	r0, #1
 8029262:	bf1c      	itt	ne
 8029264:	2000      	movne	r0, #0
 8029266:	4770      	bxne	lr
 8029268:	8808      	ldrh	r0, [r1, #0]
 802926a:	f642 1102 	movw	r1, #10498	@ 0x2902
 802926e:	4288      	cmp	r0, r1
 8029270:	bf04      	itt	eq
 8029272:	2001      	moveq	r0, #1
 8029274:	4770      	bxeq	lr
 8029276:	f642 3129 	movw	r1, #11049	@ 0x2b29
 802927a:	1a40      	subs	r0, r0, r1
 802927c:	fab0 f080 	clz	r0, r0
 8029280:	0940      	lsrs	r0, r0, #5
 8029282:	4770      	bx	lr

08029284 <GATT_Attr_Val>:
 8029284:	b510      	push	{r4, lr}
 8029286:	4604      	mov	r4, r0
 8029288:	f000 f805 	bl	8029296 <GATT_Val_Index>
 802928c:	69a1      	ldr	r1, [r4, #24]
 802928e:	8c22      	ldrh	r2, [r4, #32]
 8029290:	fb02 1000 	mla	r0, r2, r0, r1
 8029294:	bd10      	pop	{r4, pc}

08029296 <GATT_Val_Index>:
 8029296:	b160      	cbz	r0, 80292b2 <GATT_Val_Index+0x1c>
 8029298:	f890 2023 	ldrb.w	r2, [r0, #35]	@ 0x23
 802929c:	2a01      	cmp	r2, #1
 802929e:	d10b      	bne.n	80292b8 <GATT_Val_Index+0x22>
 80292a0:	8900      	ldrh	r0, [r0, #8]
 80292a2:	f642 3229 	movw	r2, #11049	@ 0x2b29
 80292a6:	4290      	cmp	r0, r2
 80292a8:	d003      	beq.n	80292b2 <GATT_Val_Index+0x1c>
 80292aa:	f642 1202 	movw	r2, #10498	@ 0x2902
 80292ae:	4290      	cmp	r0, r2
 80292b0:	d102      	bne.n	80292b8 <GATT_Val_Index+0x22>
 80292b2:	4608      	mov	r0, r1
 80292b4:	f7ff beac 	b.w	8029010 <GATT_Bearer_Index>
 80292b8:	2000      	movs	r0, #0
 80292ba:	4770      	bx	lr

080292bc <aci_gatt_init>:
 80292bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80292be:	b08f      	sub	sp, #60	@ 0x3c
 80292c0:	4e2a      	ldr	r6, [pc, #168]	@ (802936c <__arm_cp.4_0>)
 80292c2:	f896 01d4 	ldrb.w	r0, [r6, #468]	@ 0x1d4
 80292c6:	07c0      	lsls	r0, r0, #31
 80292c8:	d11a      	bne.n	8029300 <aci_gatt_init+0x44>
 80292ca:	4f29      	ldr	r7, [pc, #164]	@ (8029370 <__arm_cp.4_1>)
 80292cc:	f641 0001 	movw	r0, #6145	@ 0x1801
 80292d0:	2501      	movs	r5, #1
 80292d2:	f10d 013a 	add.w	r1, sp, #58	@ 0x3a
 80292d6:	2301      	movs	r3, #1
 80292d8:	f8ad 000c 	strh.w	r0, [sp, #12]
 80292dc:	f886 51d4 	strb.w	r5, [r6, #468]	@ 0x1d4
 80292e0:	9100      	str	r1, [sp, #0]
 80292e2:	8c38      	ldrh	r0, [r7, #32]
 80292e4:	0780      	lsls	r0, r0, #30
 80292e6:	bf58      	it	pl
 80292e8:	2304      	movpl	r3, #4
 80292ea:	a903      	add	r1, sp, #12
 80292ec:	2001      	movs	r0, #1
 80292ee:	2201      	movs	r2, #1
 80292f0:	f000 f842 	bl	8029378 <aci_gatt_add_service>
 80292f4:	b140      	cbz	r0, 8029308 <aci_gatt_init+0x4c>
 80292f6:	2000      	movs	r0, #0
 80292f8:	2497      	movs	r4, #151	@ 0x97
 80292fa:	f886 01d4 	strb.w	r0, [r6, #468]	@ 0x1d4
 80292fe:	e000      	b.n	8029302 <aci_gatt_init+0x46>
 8029300:	2462      	movs	r4, #98	@ 0x62
 8029302:	4620      	mov	r0, r4
 8029304:	b00f      	add	sp, #60	@ 0x3c
 8029306:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8029308:	f44f 60e0 	mov.w	r0, #1792	@ 0x700
 802930c:	2400      	movs	r4, #0
 802930e:	f88d 501e 	strb.w	r5, [sp, #30]
 8029312:	f8bd 503a 	ldrh.w	r5, [sp, #58]	@ 0x3a
 8029316:	f8ad 0034 	strh.w	r0, [sp, #52]	@ 0x34
 802931a:	f897 0020 	ldrb.w	r0, [r7, #32]
 802931e:	f88d 4036 	strb.w	r4, [sp, #54]	@ 0x36
 8029322:	f88d 4033 	strb.w	r4, [sp, #51]	@ 0x33
 8029326:	f8ad 501c 	strh.w	r5, [sp, #28]
 802932a:	0780      	lsls	r0, r0, #30
 802932c:	d4e9      	bmi.n	8029302 <aci_gatt_init+0x46>
 802932e:	2020      	movs	r0, #32
 8029330:	f88d 0032 	strb.w	r0, [sp, #50]	@ 0x32
 8029334:	2004      	movs	r0, #4
 8029336:	f8ad 0030 	strh.w	r0, [sp, #48]	@ 0x30
 802933a:	f642 2005 	movw	r0, #10757	@ 0x2a05
 802933e:	f8ad 0020 	strh.w	r0, [sp, #32]
 8029342:	a80e      	add	r0, sp, #56	@ 0x38
 8029344:	a907      	add	r1, sp, #28
 8029346:	f000 f8b5 	bl	80294b4 <GATT_Add_Char_Core>
 802934a:	2800      	cmp	r0, #0
 802934c:	d1d3      	bne.n	80292f6 <aci_gatt_init+0x3a>
 802934e:	4809      	ldr	r0, [pc, #36]	@ (8029374 <__arm_cp.4_2>)
 8029350:	f8bd 1038 	ldrh.w	r1, [sp, #56]	@ 0x38
 8029354:	2200      	movs	r2, #0
 8029356:	2304      	movs	r3, #4
 8029358:	2400      	movs	r4, #0
 802935a:	9002      	str	r0, [sp, #8]
 802935c:	a802      	add	r0, sp, #8
 802935e:	9000      	str	r0, [sp, #0]
 8029360:	4628      	mov	r0, r5
 8029362:	f000 fa49 	bl	80297f8 <aci_gatt_update_char_value>
 8029366:	2800      	cmp	r0, #0
 8029368:	d1c5      	bne.n	80292f6 <aci_gatt_init+0x3a>
 802936a:	e7ca      	b.n	8029302 <aci_gatt_init+0x46>

0802936c <__arm_cp.4_0>:
 802936c:	20009f5c 	.word	0x20009f5c

08029370 <__arm_cp.4_1>:
 8029370:	20009f34 	.word	0x20009f34

08029374 <__arm_cp.4_2>:
 8029374:	ffff0001 	.word	0xffff0001

08029378 <aci_gatt_add_service>:
 8029378:	e92d 4ffe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802937c:	469b      	mov	fp, r3
 802937e:	4617      	mov	r7, r2
 8029380:	460e      	mov	r6, r1
 8029382:	4605      	mov	r5, r0
 8029384:	f000 fa68 	bl	8029858 <GATT_Server_Db_Check>
 8029388:	b108      	cbz	r0, 802938e <aci_gatt_add_service+0x16>
 802938a:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802938e:	f1bb 0f00 	cmp.w	fp, #0
 8029392:	d057      	beq.n	8029444 <aci_gatt_add_service+0xcc>
 8029394:	f8df a118 	ldr.w	sl, [pc, #280]	@ 80294b0 <__arm_cp.5_0>
 8029398:	f8da 11e8 	ldr.w	r1, [sl, #488]	@ 0x1e8
 802939c:	f50a 70f4 	add.w	r0, sl, #488	@ 0x1e8
 80293a0:	4281      	cmp	r1, r0
 80293a2:	d00b      	beq.n	80293bc <aci_gatt_add_service+0x44>
 80293a4:	f50a 70f8 	add.w	r0, sl, #496	@ 0x1f0
 80293a8:	f10d 010a 	add.w	r1, sp, #10
 80293ac:	f005 ff14 	bl	802f1d8 <CList_Get_Size>
 80293b0:	f8bd 000a 	ldrh.w	r0, [sp, #10]
 80293b4:	f1ab 0401 	sub.w	r4, fp, #1
 80293b8:	4284      	cmp	r4, r0
 80293ba:	d902      	bls.n	80293c2 <aci_gatt_add_service+0x4a>
 80293bc:	2098      	movs	r0, #152	@ 0x98
 80293be:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80293c2:	f50a 79f0 	add.w	r9, sl, #480	@ 0x1e0
 80293c6:	a902      	add	r1, sp, #8
 80293c8:	4648      	mov	r0, r9
 80293ca:	f005 ff05 	bl	802f1d8 <CList_Get_Size>
 80293ce:	f8bd 0008 	ldrh.w	r0, [sp, #8]
 80293d2:	b1b8      	cbz	r0, 8029404 <aci_gatt_add_service+0x8c>
 80293d4:	f8da 81e4 	ldr.w	r8, [sl, #484]	@ 0x1e4
 80293d8:	f10d 010a 	add.w	r1, sp, #10
 80293dc:	f108 0018 	add.w	r0, r8, #24
 80293e0:	f005 fefa 	bl	802f1d8 <CList_Get_Size>
 80293e4:	f108 0020 	add.w	r0, r8, #32
 80293e8:	a902      	add	r1, sp, #8
 80293ea:	f005 fef5 	bl	802f1d8 <CList_Get_Size>
 80293ee:	f8b8 0028 	ldrh.w	r0, [r8, #40]	@ 0x28
 80293f2:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 80293f6:	4408      	add	r0, r1
 80293f8:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 80293fc:	4408      	add	r0, r1
 80293fe:	f100 0801 	add.w	r8, r0, #1
 8029402:	e001      	b.n	8029408 <aci_gatt_add_service+0x90>
 8029404:	f04f 0801 	mov.w	r8, #1
 8029408:	ea6f 0008 	mvn.w	r0, r8
 802940c:	b280      	uxth	r0, r0
 802940e:	3001      	adds	r0, #1
 8029410:	4558      	cmp	r0, fp
 8029412:	bf3c      	itt	cc
 8029414:	2061      	movcc	r0, #97	@ 0x61
 8029416:	e8bd 8ffe 	ldmiacc.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802941a:	f8cd 9004 	str.w	r9, [sp, #4]
 802941e:	f8da 91e8 	ldr.w	r9, [sl, #488]	@ 0x1e8
 8029422:	2f01      	cmp	r7, #1
 8029424:	d004      	beq.n	8029430 <aci_gatt_add_service+0xb8>
 8029426:	2f02      	cmp	r7, #2
 8029428:	d10c      	bne.n	8029444 <aci_gatt_add_service+0xcc>
 802942a:	f642 0001 	movw	r0, #10241	@ 0x2801
 802942e:	e001      	b.n	8029434 <aci_gatt_add_service+0xbc>
 8029430:	f44f 5020 	mov.w	r0, #10240	@ 0x2800
 8029434:	2d01      	cmp	r5, #1
 8029436:	f8a9 002a 	strh.w	r0, [r9, #42]	@ 0x2a
 802943a:	d006      	beq.n	802944a <aci_gatt_add_service+0xd2>
 802943c:	2d02      	cmp	r5, #2
 802943e:	d101      	bne.n	8029444 <aci_gatt_add_service+0xcc>
 8029440:	2210      	movs	r2, #16
 8029442:	e003      	b.n	802944c <aci_gatt_add_service+0xd4>
 8029444:	2092      	movs	r0, #146	@ 0x92
 8029446:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802944a:	2202      	movs	r2, #2
 802944c:	f109 0008 	add.w	r0, r9, #8
 8029450:	4631      	mov	r1, r6
 8029452:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 8029454:	f7fb f878 	bl	8024548 <ble_memcpy>
 8029458:	4648      	mov	r0, r9
 802945a:	f8a7 8000 	strh.w	r8, [r7]
 802945e:	f889 502c 	strb.w	r5, [r9, #44]	@ 0x2c
 8029462:	f8a9 8028 	strh.w	r8, [r9, #40]	@ 0x28
 8029466:	f005 feb1 	bl	802f1cc <CList_Remove>
 802946a:	9801      	ldr	r0, [sp, #4]
 802946c:	4649      	mov	r1, r9
 802946e:	f005 fea6 	bl	802f1be <CList_Insert>
 8029472:	f109 0518 	add.w	r5, r9, #24
 8029476:	f109 0020 	add.w	r0, r9, #32
 802947a:	e9c9 5506 	strd	r5, r5, [r9, #24]
 802947e:	e9c9 0008 	strd	r0, r0, [r9, #32]
 8029482:	2c00      	cmp	r4, #0
 8029484:	dd0a      	ble.n	802949c <aci_gatt_add_service+0x124>
 8029486:	f8da 61f0 	ldr.w	r6, [sl, #496]	@ 0x1f0
 802948a:	4630      	mov	r0, r6
 802948c:	f005 fe9e 	bl	802f1cc <CList_Remove>
 8029490:	4628      	mov	r0, r5
 8029492:	4631      	mov	r1, r6
 8029494:	f005 fe93 	bl	802f1be <CList_Insert>
 8029498:	3c01      	subs	r4, #1
 802949a:	e7f2      	b.n	8029482 <aci_gatt_add_service+0x10a>
 802949c:	8838      	ldrh	r0, [r7, #0]
 802949e:	eb0b 0100 	add.w	r1, fp, r0
 80294a2:	3901      	subs	r1, #1
 80294a4:	b289      	uxth	r1, r1
 80294a6:	f000 f9eb 	bl	8029880 <GATT_Notify_Service_Change>
 80294aa:	2000      	movs	r0, #0
 80294ac:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

080294b0 <__arm_cp.5_0>:
 80294b0:	20009f5c 	.word	0x20009f5c

080294b4 <GATT_Add_Char_Core>:
 80294b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80294b8:	b0a1      	sub	sp, #132	@ 0x84
 80294ba:	460e      	mov	r6, r1
 80294bc:	900f      	str	r0, [sp, #60]	@ 0x3c
 80294be:	f891 8002 	ldrb.w	r8, [r1, #2]
 80294c2:	2210      	movs	r2, #16
 80294c4:	f836 9b04 	ldrh.w	r9, [r6], #4
 80294c8:	a81d      	add	r0, sp, #116	@ 0x74
 80294ca:	4631      	mov	r1, r6
 80294cc:	f005 ffa2 	bl	802f414 <__aeabi_memcpy>
 80294d0:	2000      	movs	r0, #0
 80294d2:	8a34      	ldrh	r4, [r6, #16]
 80294d4:	7cf5      	ldrb	r5, [r6, #19]
 80294d6:	7d37      	ldrb	r7, [r6, #20]
 80294d8:	f896 a015 	ldrb.w	sl, [r6, #21]
 80294dc:	f896 b016 	ldrb.w	fp, [r6, #22]
 80294e0:	f996 6012 	ldrsb.w	r6, [r6, #18]
 80294e4:	f8ad 006e 	strh.w	r0, [sp, #110]	@ 0x6e
 80294e8:	f000 f9b6 	bl	8029858 <GATT_Server_Db_Check>
 80294ec:	2800      	cmp	r0, #0
 80294ee:	f040 817a 	bne.w	80297e6 <GATT_Add_Char_Core+0x332>
 80294f2:	f5b4 7f00 	cmp.w	r4, #512	@ 0x200
 80294f6:	e9cd ba09 	strd	fp, sl, [sp, #36]	@ 0x24
 80294fa:	e9cd 890d 	strd	r8, r9, [sp, #52]	@ 0x34
 80294fe:	e9cd 750b 	strd	r7, r5, [sp, #44]	@ 0x2c
 8029502:	d901      	bls.n	8029508 <GATT_Add_Char_Core+0x54>
 8029504:	2092      	movs	r0, #146	@ 0x92
 8029506:	e16e      	b.n	80297e6 <GATT_Add_Char_Core+0x332>
 8029508:	a91c      	add	r1, sp, #112	@ 0x70
 802950a:	980e      	ldr	r0, [sp, #56]	@ 0x38
 802950c:	f000 f9be 	bl	802988c <GATT_Search_Service_Handle>
 8029510:	b108      	cbz	r0, 8029516 <GATT_Add_Char_Core+0x62>
 8029512:	2060      	movs	r0, #96	@ 0x60
 8029514:	e167      	b.n	80297e6 <GATT_Add_Char_Core+0x332>
 8029516:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 802951a:	f8df b2d0 	ldr.w	fp, [pc, #720]	@ 80297ec <__arm_cp.6_0>
 802951e:	f10d 016a 	add.w	r1, sp, #106	@ 0x6a
 8029522:	b2f7      	uxtb	r7, r6
 8029524:	f10a 0518 	add.w	r5, sl, #24
 8029528:	f89b 9016 	ldrb.w	r9, [fp, #22]
 802952c:	4628      	mov	r0, r5
 802952e:	f005 fe53 	bl	802f1d8 <CList_Get_Size>
 8029532:	f017 0830 	ands.w	r8, r7, #48	@ 0x30
 8029536:	4630      	mov	r0, r6
 8029538:	4646      	mov	r6, r8
 802953a:	4641      	mov	r1, r8
 802953c:	bf18      	it	ne
 802953e:	ea4f 0649 	movne.w	r6, r9, lsl #1
 8029542:	f017 0201 	ands.w	r2, r7, #1
 8029546:	bf18      	it	ne
 8029548:	3602      	addne	r6, #2
 802954a:	f1b0 3fff 	cmp.w	r0, #4294967295	@ 0xffffffff
 802954e:	9008      	str	r0, [sp, #32]
 8029550:	bfd8      	it	le
 8029552:	3602      	addle	r6, #2
 8029554:	2002      	movs	r0, #2
 8029556:	f1b8 0f00 	cmp.w	r8, #0
 802955a:	bf0c      	ite	eq
 802955c:	2001      	moveq	r0, #1
 802955e:	2101      	movne	r1, #1
 8029560:	2a00      	cmp	r2, #0
 8029562:	bf18      	it	ne
 8029564:	4601      	movne	r1, r0
 8029566:	eb01 19d7 	add.w	r9, r1, r7, lsr #7
 802956a:	f8bd 006a 	ldrh.w	r0, [sp, #106]	@ 0x6a
 802956e:	f109 0702 	add.w	r7, r9, #2
 8029572:	4287      	cmp	r7, r0
 8029574:	d901      	bls.n	802957a <GATT_Add_Char_Core+0xc6>
 8029576:	2098      	movs	r0, #152	@ 0x98
 8029578:	e135      	b.n	80297e6 <GATT_Add_Char_Core+0x332>
 802957a:	9206      	str	r2, [sp, #24]
 802957c:	f10a 0020 	add.w	r0, sl, #32
 8029580:	a91a      	add	r1, sp, #104	@ 0x68
 8029582:	9007      	str	r0, [sp, #28]
 8029584:	f005 fe28 	bl	802f1d8 <CList_Get_Size>
 8029588:	f8bd 0068 	ldrh.w	r0, [sp, #104]	@ 0x68
 802958c:	b168      	cbz	r0, 80295aa <GATT_Add_Char_Core+0xf6>
 802958e:	f8ba 1028 	ldrh.w	r1, [sl, #40]	@ 0x28
 8029592:	4408      	add	r0, r1
 8029594:	f8bd 106a 	ldrh.w	r1, [sp, #106]	@ 0x6a
 8029598:	4408      	add	r0, r1
 802959a:	f8da 1024 	ldr.w	r1, [sl, #36]	@ 0x24
 802959e:	8b89      	ldrh	r1, [r1, #28]
 80295a0:	1a40      	subs	r0, r0, r1
 80295a2:	42b8      	cmp	r0, r7
 80295a4:	d201      	bcs.n	80295aa <GATT_Add_Char_Core+0xf6>
 80295a6:	2061      	movs	r0, #97	@ 0x61
 80295a8:	e11d      	b.n	80297e6 <GATT_Add_Char_Core+0x332>
 80295aa:	6829      	ldr	r1, [r5, #0]
 80295ac:	465b      	mov	r3, fp
 80295ae:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80295b0:	f8cd a014 	str.w	sl, [sp, #20]
 80295b4:	f8d1 b000 	ldr.w	fp, [r1]
 80295b8:	2801      	cmp	r0, #1
 80295ba:	d10d      	bne.n	80295d8 <GATT_Add_Char_Core+0x124>
 80295bc:	2005      	movs	r0, #5
 80295be:	9103      	str	r1, [sp, #12]
 80295c0:	83c8      	strh	r0, [r1, #30]
 80295c2:	f8bd 0074 	ldrh.w	r0, [sp, #116]	@ 0x74
 80295c6:	b281      	uxth	r1, r0
 80295c8:	f642 1002 	movw	r0, #10498	@ 0x2902
 80295cc:	4281      	cmp	r1, r0
 80295ce:	d109      	bne.n	80295e4 <GATT_Add_Char_Core+0x130>
 80295d0:	461d      	mov	r5, r3
 80295d2:	7d99      	ldrb	r1, [r3, #22]
 80295d4:	2005      	movs	r0, #5
 80295d6:	e00f      	b.n	80295f8 <GATT_Add_Char_Core+0x144>
 80295d8:	2802      	cmp	r0, #2
 80295da:	d193      	bne.n	8029504 <GATT_Add_Char_Core+0x50>
 80295dc:	2013      	movs	r0, #19
 80295de:	9103      	str	r1, [sp, #12]
 80295e0:	83c8      	strh	r0, [r1, #30]
 80295e2:	e007      	b.n	80295f4 <GATT_Add_Char_Core+0x140>
 80295e4:	2005      	movs	r0, #5
 80295e6:	f642 3229 	movw	r2, #11049	@ 0x2b29
 80295ea:	4291      	cmp	r1, r2
 80295ec:	d102      	bne.n	80295f4 <GATT_Add_Char_Core+0x140>
 80295ee:	461d      	mov	r5, r3
 80295f0:	7d99      	ldrb	r1, [r3, #22]
 80295f2:	e001      	b.n	80295f8 <GATT_Add_Char_Core+0x144>
 80295f4:	2101      	movs	r1, #1
 80295f6:	461d      	mov	r5, r3
 80295f8:	4a7d      	ldr	r2, [pc, #500]	@ (80297f0 <__arm_cp.6_1>)
 80295fa:	4430      	add	r0, r6
 80295fc:	8aaf      	ldrh	r7, [r5, #20]
 80295fe:	fb04 0001 	mla	r0, r4, r1, r0
 8029602:	f8b2 31da 	ldrh.w	r3, [r2, #474]	@ 0x1da
 8029606:	b286      	uxth	r6, r0
 8029608:	2098      	movs	r0, #152	@ 0x98
 802960a:	1afb      	subs	r3, r7, r3
 802960c:	42b3      	cmp	r3, r6
 802960e:	f2c0 80ea 	blt.w	80297e6 <GATT_Add_Char_Core+0x332>
 8029612:	f8d2 21dc 	ldr.w	r2, [r2, #476]	@ 0x1dc
 8029616:	2a00      	cmp	r2, #0
 8029618:	f000 80e5 	beq.w	80297e6 <GATT_Add_Char_Core+0x332>
 802961c:	fb04 f501 	mul.w	r5, r4, r1
 8029620:	a91a      	add	r1, sp, #104	@ 0x68
 8029622:	9807      	ldr	r0, [sp, #28]
 8029624:	f005 fdd8 	bl	802f1d8 <CList_Get_Size>
 8029628:	f8bd 0068 	ldrh.w	r0, [sp, #104]	@ 0x68
 802962c:	f8cd 9010 	str.w	r9, [sp, #16]
 8029630:	e9cd 8501 	strd	r8, r5, [sp, #4]
 8029634:	465e      	mov	r6, fp
 8029636:	46a2      	mov	sl, r4
 8029638:	2800      	cmp	r0, #0
 802963a:	9805      	ldr	r0, [sp, #20]
 802963c:	bf0e      	itee	eq
 802963e:	3028      	addeq	r0, #40	@ 0x28
 8029640:	6a40      	ldrne	r0, [r0, #36]	@ 0x24
 8029642:	301c      	addne	r0, #28
 8029644:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8029648:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 802964a:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 802964c:	8800      	ldrh	r0, [r0, #0]
 802964e:	3001      	adds	r0, #1
 8029650:	8008      	strh	r0, [r1, #0]
 8029652:	f8a8 001c 	strh.w	r0, [r8, #28]
 8029656:	2000      	movs	r0, #0
 8029658:	f888 0026 	strb.w	r0, [r8, #38]	@ 0x26
 802965c:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8029660:	f8a8 0022 	strh.w	r0, [r8, #34]	@ 0x22
 8029664:	8808      	ldrh	r0, [r1, #0]
 8029666:	3001      	adds	r0, #1
 8029668:	f826 0f1c 	strh.w	r0, [r6, #28]!
 802966c:	f642 0003 	movw	r0, #10243	@ 0x2803
 8029670:	f8a8 0008 	strh.w	r0, [r8, #8]
 8029674:	f8b8 001e 	ldrh.w	r0, [r8, #30]
 8029678:	f000 f91c 	bl	80298b4 <GATT_New_Value>
 802967c:	f8b8 101e 	ldrh.w	r1, [r8, #30]
 8029680:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8029684:	f8c8 0018 	str.w	r0, [r8, #24]
 8029688:	4f5a      	ldr	r7, [pc, #360]	@ (80297f4 <__arm_cp.6_2>)
 802968a:	2202      	movs	r2, #2
 802968c:	f8a8 1020 	strh.w	r1, [r8, #32]
 8029690:	f880 9000 	strb.w	r9, [r0]
 8029694:	4631      	mov	r1, r6
 8029696:	f8d8 0018 	ldr.w	r0, [r8, #24]
 802969a:	3001      	adds	r0, #1
 802969c:	47b8      	blx	r7
 802969e:	2610      	movs	r6, #16
 80296a0:	2c01      	cmp	r4, #1
 80296a2:	bf08      	it	eq
 80296a4:	2602      	moveq	r6, #2
 80296a6:	f8d8 0018 	ldr.w	r0, [r8, #24]
 80296aa:	ad1d      	add	r5, sp, #116	@ 0x74
 80296ac:	4632      	mov	r2, r6
 80296ae:	4629      	mov	r1, r5
 80296b0:	3003      	adds	r0, #3
 80296b2:	47b8      	blx	r7
 80296b4:	f10b 0008 	add.w	r0, fp, #8
 80296b8:	4629      	mov	r1, r5
 80296ba:	4632      	mov	r2, r6
 80296bc:	47b8      	blx	r7
 80296be:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80296c0:	f88b 4023 	strb.w	r4, [fp, #35]	@ 0x23
 80296c4:	f8ab a01e 	strh.w	sl, [fp, #30]
 80296c8:	f8ab a020 	strh.w	sl, [fp, #32]
 80296cc:	f88b 0022 	strb.w	r0, [fp, #34]	@ 0x22
 80296d0:	9802      	ldr	r0, [sp, #8]
 80296d2:	b286      	uxth	r6, r0
 80296d4:	4630      	mov	r0, r6
 80296d6:	f000 f8ed 	bl	80298b4 <GATT_New_Value>
 80296da:	4632      	mov	r2, r6
 80296dc:	2100      	movs	r1, #0
 80296de:	f8cb 0018 	str.w	r0, [fp, #24]
 80296e2:	464e      	mov	r6, r9
 80296e4:	f7fa ff80 	bl	80245e8 <ble_memset>
 80296e8:	2501      	movs	r5, #1
 80296ea:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80296ec:	2110      	movs	r1, #16
 80296ee:	f3c9 0240 	ubfx	r2, r9, #1, #1
 80296f2:	2807      	cmp	r0, #7
 80296f4:	f8a8 5024 	strh.w	r5, [r8, #36]	@ 0x24
 80296f8:	bf98      	it	ls
 80296fa:	2007      	movls	r0, #7
 80296fc:	2810      	cmp	r0, #16
 80296fe:	bf28      	it	cs
 8029700:	4608      	movcs	r0, r1
 8029702:	f88b 0027 	strb.w	r0, [fp, #39]	@ 0x27
 8029706:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 8029708:	2102      	movs	r1, #2
 802970a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 802970c:	f88b 7025 	strb.w	r7, [fp, #37]	@ 0x25
 8029710:	ea01 0199 	and.w	r1, r1, r9, lsr #2
 8029714:	f88b 0026 	strb.w	r0, [fp, #38]	@ 0x26
 8029718:	2008      	movs	r0, #8
 802971a:	ea00 00d9 	and.w	r0, r0, r9, lsr #3
 802971e:	4411      	add	r1, r2
 8029720:	f009 0204 	and.w	r2, r9, #4
 8029724:	4411      	add	r1, r2
 8029726:	4408      	add	r0, r1
 8029728:	f88b 0024 	strb.w	r0, [fp, #36]	@ 0x24
 802972c:	4640      	mov	r0, r8
 802972e:	f005 fd4d 	bl	802f1cc <CList_Remove>
 8029732:	9c07      	ldr	r4, [sp, #28]
 8029734:	4641      	mov	r1, r8
 8029736:	4620      	mov	r0, r4
 8029738:	f005 fd41 	bl	802f1be <CList_Insert>
 802973c:	4658      	mov	r0, fp
 802973e:	f005 fd45 	bl	802f1cc <CList_Remove>
 8029742:	4620      	mov	r0, r4
 8029744:	4659      	mov	r1, fp
 8029746:	f005 fd3a 	bl	802f1be <CList_Insert>
 802974a:	9804      	ldr	r0, [sp, #16]
 802974c:	2800      	cmp	r0, #0
 802974e:	d041      	beq.n	80297d4 <GATT_Add_Char_Core+0x320>
 8029750:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8029752:	f88d 5062 	strb.w	r5, [sp, #98]	@ 0x62
 8029756:	f88d 5058 	strb.w	r5, [sp, #88]	@ 0x58
 802975a:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 802975e:	f10d 006e 	add.w	r0, sp, #110	@ 0x6e
 8029762:	9017      	str	r0, [sp, #92]	@ 0x5c
 8029764:	f04f 1002 	mov.w	r0, #131074	@ 0x20002
 8029768:	9015      	str	r0, [sp, #84]	@ 0x54
 802976a:	200f      	movs	r0, #15
 802976c:	f88d 0061 	strb.w	r0, [sp, #97]	@ 0x61
 8029770:	2000      	movs	r0, #0
 8029772:	f88d 0064 	strb.w	r0, [sp, #100]	@ 0x64
 8029776:	f8b8 001c 	ldrh.w	r0, [r8, #28]
 802977a:	f8ad 0042 	strh.w	r0, [sp, #66]	@ 0x42
 802977e:	f007 0038 	and.w	r0, r7, #56	@ 0x38
 8029782:	f88d 0060 	strb.w	r0, [sp, #96]	@ 0x60
 8029786:	f89b 0027 	ldrb.w	r0, [fp, #39]	@ 0x27
 802978a:	f88d 0063 	strb.w	r0, [sp, #99]	@ 0x63
 802978e:	9806      	ldr	r0, [sp, #24]
 8029790:	b138      	cbz	r0, 80297a2 <GATT_Add_Char_Core+0x2ee>
 8029792:	f642 1003 	movw	r0, #10499	@ 0x2903
 8029796:	f8ad 0044 	strh.w	r0, [sp, #68]	@ 0x44
 802979a:	a81b      	add	r0, sp, #108	@ 0x6c
 802979c:	a910      	add	r1, sp, #64	@ 0x40
 802979e:	f000 f8a1 	bl	80298e4 <GATT_Add_Char_Desc_Core>
 80297a2:	9801      	ldr	r0, [sp, #4]
 80297a4:	b138      	cbz	r0, 80297b6 <GATT_Add_Char_Core+0x302>
 80297a6:	f642 1002 	movw	r0, #10498	@ 0x2902
 80297aa:	f8ad 0044 	strh.w	r0, [sp, #68]	@ 0x44
 80297ae:	a81b      	add	r0, sp, #108	@ 0x6c
 80297b0:	a910      	add	r1, sp, #64	@ 0x40
 80297b2:	f000 f897 	bl	80298e4 <GATT_Add_Char_Desc_Core>
 80297b6:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 80297ba:	dc0b      	bgt.n	80297d4 <GATT_Add_Char_Core+0x320>
 80297bc:	f44f 5024 	mov.w	r0, #10496	@ 0x2900
 80297c0:	f8ad 0044 	strh.w	r0, [sp, #68]	@ 0x44
 80297c4:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80297c8:	f8ad 0060 	strh.w	r0, [sp, #96]	@ 0x60
 80297cc:	a81b      	add	r0, sp, #108	@ 0x6c
 80297ce:	a910      	add	r1, sp, #64	@ 0x40
 80297d0:	f000 f888 	bl	80298e4 <GATT_Add_Char_Desc_Core>
 80297d4:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 80297d6:	9904      	ldr	r1, [sp, #16]
 80297d8:	8800      	ldrh	r0, [r0, #0]
 80297da:	4401      	add	r1, r0
 80297dc:	3101      	adds	r1, #1
 80297de:	b289      	uxth	r1, r1
 80297e0:	f000 f84e 	bl	8029880 <GATT_Notify_Service_Change>
 80297e4:	2000      	movs	r0, #0
 80297e6:	b021      	add	sp, #132	@ 0x84
 80297e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080297ec <__arm_cp.6_0>:
 80297ec:	20009f34 	.word	0x20009f34

080297f0 <__arm_cp.6_1>:
 80297f0:	20009f5c 	.word	0x20009f5c

080297f4 <__arm_cp.6_2>:
 80297f4:	08024549 	.word	0x08024549

080297f8 <aci_gatt_update_char_value>:
 80297f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80297fa:	b087      	sub	sp, #28
 80297fc:	4605      	mov	r5, r0
 80297fe:	4815      	ldr	r0, [pc, #84]	@ (8029854 <__arm_cp.7_0>)
 8029800:	f890 01d4 	ldrb.w	r0, [r0, #468]	@ 0x1d4
 8029804:	07c0      	lsls	r0, r0, #31
 8029806:	d101      	bne.n	802980c <aci_gatt_update_char_value+0x14>
 8029808:	2097      	movs	r0, #151	@ 0x97
 802980a:	e00e      	b.n	802982a <aci_gatt_update_char_value+0x32>
 802980c:	460c      	mov	r4, r1
 802980e:	a906      	add	r1, sp, #24
 8029810:	4628      	mov	r0, r5
 8029812:	461e      	mov	r6, r3
 8029814:	4617      	mov	r7, r2
 8029816:	f000 f839 	bl	802988c <GATT_Search_Service_Handle>
 802981a:	b928      	cbnz	r0, 8029828 <aci_gatt_update_char_value+0x30>
 802981c:	9906      	ldr	r1, [sp, #24]
 802981e:	aa05      	add	r2, sp, #20
 8029820:	4620      	mov	r0, r4
 8029822:	f000 f9c6 	bl	8029bb2 <GATT_Search_Handle>
 8029826:	b110      	cbz	r0, 802982e <aci_gatt_update_char_value+0x36>
 8029828:	2060      	movs	r0, #96	@ 0x60
 802982a:	b007      	add	sp, #28
 802982c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802982e:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8029830:	b11f      	cbz	r7, 802983a <aci_gatt_update_char_value+0x42>
 8029832:	9905      	ldr	r1, [sp, #20]
 8029834:	6809      	ldr	r1, [r1, #0]
 8029836:	8c09      	ldrh	r1, [r1, #32]
 8029838:	e000      	b.n	802983c <aci_gatt_update_char_value+0x44>
 802983a:	4631      	mov	r1, r6
 802983c:	e9cd 1700 	strd	r1, r7, [sp]
 8029840:	e9cd 6002 	strd	r6, r0, [sp, #8]
 8029844:	2000      	movs	r0, #0
 8029846:	4629      	mov	r1, r5
 8029848:	4622      	mov	r2, r4
 802984a:	2303      	movs	r3, #3
 802984c:	f000 f9c0 	bl	8029bd0 <GATT_Update_Char_Value_Core>
 8029850:	e7eb      	b.n	802982a <aci_gatt_update_char_value+0x32>
 8029852:	bf00      	nop

08029854 <__arm_cp.7_0>:
 8029854:	20009f5c 	.word	0x20009f5c

08029858 <GATT_Server_Db_Check>:
 8029858:	b580      	push	{r7, lr}
 802985a:	4808      	ldr	r0, [pc, #32]	@ (802987c <__arm_cp.8_0>)
 802985c:	f890 01d4 	ldrb.w	r0, [r0, #468]	@ 0x1d4
 8029860:	07c1      	lsls	r1, r0, #31
 8029862:	bf04      	itt	eq
 8029864:	2097      	moveq	r0, #151	@ 0x97
 8029866:	bd80      	popeq	{r7, pc}
 8029868:	0780      	lsls	r0, r0, #30
 802986a:	d503      	bpl.n	8029874 <GATT_Server_Db_Check+0x1c>
 802986c:	201c      	movs	r0, #28
 802986e:	f002 fd8d 	bl	802c38c <ACL_Tx_Pool_Size>
 8029872:	b108      	cbz	r0, 8029878 <GATT_Server_Db_Check+0x20>
 8029874:	2000      	movs	r0, #0
 8029876:	bd80      	pop	{r7, pc}
 8029878:	2064      	movs	r0, #100	@ 0x64
 802987a:	bd80      	pop	{r7, pc}

0802987c <__arm_cp.8_0>:
 802987c:	20009f5c 	.word	0x20009f5c

08029880 <GATT_Notify_Service_Change>:
 8029880:	460b      	mov	r3, r1
 8029882:	4602      	mov	r2, r0
 8029884:	2000      	movs	r0, #0
 8029886:	2100      	movs	r1, #0
 8029888:	f000 bb50 	b.w	8029f2c <GATT_Update_For_Service_Change>

0802988c <GATT_Search_Service_Handle>:
 802988c:	b510      	push	{r4, lr}
 802988e:	4a08      	ldr	r2, [pc, #32]	@ (80298b0 <__arm_cp.11_0>)
 8029890:	f502 72f0 	add.w	r2, r2, #480	@ 0x1e0
 8029894:	4613      	mov	r3, r2
 8029896:	681b      	ldr	r3, [r3, #0]
 8029898:	4293      	cmp	r3, r2
 802989a:	bf04      	itt	eq
 802989c:	2091      	moveq	r0, #145	@ 0x91
 802989e:	bd10      	popeq	{r4, pc}
 80298a0:	8d1c      	ldrh	r4, [r3, #40]	@ 0x28
 80298a2:	4284      	cmp	r4, r0
 80298a4:	bf02      	ittt	eq
 80298a6:	600b      	streq	r3, [r1, #0]
 80298a8:	2000      	moveq	r0, #0
 80298aa:	bd10      	popeq	{r4, pc}
 80298ac:	e7f3      	b.n	8029896 <GATT_Search_Service_Handle+0xa>
 80298ae:	bf00      	nop

080298b0 <__arm_cp.11_0>:
 80298b0:	20009f5c 	.word	0x20009f5c

080298b4 <GATT_New_Value>:
 80298b4:	b510      	push	{r4, lr}
 80298b6:	4a09      	ldr	r2, [pc, #36]	@ (80298dc <__arm_cp.12_0>)
 80298b8:	4909      	ldr	r1, [pc, #36]	@ (80298e0 <__arm_cp.12_1>)
 80298ba:	f8b2 31da 	ldrh.w	r3, [r2, #474]	@ 0x1da
 80298be:	8a89      	ldrh	r1, [r1, #20]
 80298c0:	1acc      	subs	r4, r1, r3
 80298c2:	f8d2 11dc 	ldr.w	r1, [r2, #476]	@ 0x1dc
 80298c6:	4284      	cmp	r4, r0
 80298c8:	4419      	add	r1, r3
 80298ca:	bfb8      	it	lt
 80298cc:	2100      	movlt	r1, #0
 80298ce:	b111      	cbz	r1, 80298d6 <GATT_New_Value+0x22>
 80298d0:	4418      	add	r0, r3
 80298d2:	f8a2 01da 	strh.w	r0, [r2, #474]	@ 0x1da
 80298d6:	4608      	mov	r0, r1
 80298d8:	bd10      	pop	{r4, pc}
 80298da:	bf00      	nop

080298dc <__arm_cp.12_0>:
 80298dc:	20009f5c 	.word	0x20009f5c

080298e0 <__arm_cp.12_1>:
 80298e0:	20009f34 	.word	0x20009f34

080298e4 <GATT_Add_Char_Desc_Core>:
 80298e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80298e8:	b097      	sub	sp, #92	@ 0x5c
 80298ea:	900f      	str	r0, [sp, #60]	@ 0x3c
 80298ec:	f891 0024 	ldrb.w	r0, [r1, #36]	@ 0x24
 80298f0:	e9d1 6a01 	ldrd	r6, sl, [r1, #4]
 80298f4:	e9d1 4803 	ldrd	r4, r8, [r1, #12]
 80298f8:	f8b1 b002 	ldrh.w	fp, [r1, #2]
 80298fc:	f8b1 9000 	ldrh.w	r9, [r1]
 8029900:	8acf      	ldrh	r7, [r1, #22]
 8029902:	8a8d      	ldrh	r5, [r1, #20]
 8029904:	900e      	str	r0, [sp, #56]	@ 0x38
 8029906:	f891 0023 	ldrb.w	r0, [r1, #35]	@ 0x23
 802990a:	900b      	str	r0, [sp, #44]	@ 0x2c
 802990c:	f891 0022 	ldrb.w	r0, [r1, #34]	@ 0x22
 8029910:	900a      	str	r0, [sp, #40]	@ 0x28
 8029912:	f891 0021 	ldrb.w	r0, [r1, #33]	@ 0x21
 8029916:	9009      	str	r0, [sp, #36]	@ 0x24
 8029918:	f891 0020 	ldrb.w	r0, [r1, #32]
 802991c:	9008      	str	r0, [sp, #32]
 802991e:	69c8      	ldr	r0, [r1, #28]
 8029920:	900d      	str	r0, [sp, #52]	@ 0x34
 8029922:	7e08      	ldrb	r0, [r1, #24]
 8029924:	900c      	str	r0, [sp, #48]	@ 0x30
 8029926:	f7ff ff97 	bl	8029858 <GATT_Server_Db_Check>
 802992a:	b978      	cbnz	r0, 802994c <GATT_Add_Char_Desc_Core+0x68>
 802992c:	464a      	mov	r2, r9
 802992e:	e9cd 8402 	strd	r8, r4, [sp, #8]
 8029932:	e9cd a604 	strd	sl, r6, [sp, #16]
 8029936:	e9cd b706 	strd	fp, r7, [sp, #24]
 802993a:	f8dd 903c 	ldr.w	r9, [sp, #60]	@ 0x3c
 802993e:	f5b5 7f00 	cmp.w	r5, #512	@ 0x200
 8029942:	bf9c      	itt	ls
 8029944:	9807      	ldrls	r0, [sp, #28]
 8029946:	4285      	cmpls	r5, r0
 8029948:	d903      	bls.n	8029952 <GATT_Add_Char_Desc_Core+0x6e>
 802994a:	2092      	movs	r0, #146	@ 0x92
 802994c:	b017      	add	sp, #92	@ 0x5c
 802994e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8029952:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8029954:	b909      	cbnz	r1, 802995a <GATT_Add_Char_Desc_Core+0x76>
 8029956:	4285      	cmp	r5, r0
 8029958:	d1f7      	bne.n	802994a <GATT_Add_Char_Desc_Core+0x66>
 802995a:	a912      	add	r1, sp, #72	@ 0x48
 802995c:	4610      	mov	r0, r2
 802995e:	f7ff ff95 	bl	802988c <GATT_Search_Service_Handle>
 8029962:	b930      	cbnz	r0, 8029972 <GATT_Add_Char_Desc_Core+0x8e>
 8029964:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8029966:	aa11      	add	r2, sp, #68	@ 0x44
 8029968:	9806      	ldr	r0, [sp, #24]
 802996a:	4621      	mov	r1, r4
 802996c:	f000 f921 	bl	8029bb2 <GATT_Search_Handle>
 8029970:	b108      	cbz	r0, 8029976 <GATT_Add_Char_Desc_Core+0x92>
 8029972:	2060      	movs	r0, #96	@ 0x60
 8029974:	e7ea      	b.n	802994c <GATT_Add_Char_Desc_Core+0x68>
 8029976:	f104 0718 	add.w	r7, r4, #24
 802997a:	f10d 0142 	add.w	r1, sp, #66	@ 0x42
 802997e:	4638      	mov	r0, r7
 8029980:	f005 fc2a 	bl	802f1d8 <CList_Get_Size>
 8029984:	f8bd 0042 	ldrh.w	r0, [sp, #66]	@ 0x42
 8029988:	2800      	cmp	r0, #0
 802998a:	f000 8089 	beq.w	8029aa0 <GATT_Add_Char_Desc_Core+0x1bc>
 802998e:	f104 0020 	add.w	r0, r4, #32
 8029992:	a910      	add	r1, sp, #64	@ 0x40
 8029994:	4680      	mov	r8, r0
 8029996:	f005 fc1f 	bl	802f1d8 <CList_Get_Size>
 802999a:	f8bd 1042 	ldrh.w	r1, [sp, #66]	@ 0x42
 802999e:	8d20      	ldrh	r0, [r4, #40]	@ 0x28
 80299a0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80299a2:	4408      	add	r0, r1
 80299a4:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 80299a8:	4408      	add	r0, r1
 80299aa:	8b99      	ldrh	r1, [r3, #28]
 80299ac:	4288      	cmp	r0, r1
 80299ae:	d101      	bne.n	80299b4 <GATT_Add_Char_Desc_Core+0xd0>
 80299b0:	2061      	movs	r0, #97	@ 0x61
 80299b2:	e7cb      	b.n	802994c <GATT_Add_Char_Desc_Core+0x68>
 80299b4:	9811      	ldr	r0, [sp, #68]	@ 0x44
 80299b6:	f642 0203 	movw	r2, #10243	@ 0x2803
 80299ba:	8901      	ldrh	r1, [r0, #8]
 80299bc:	4291      	cmp	r1, r2
 80299be:	d1c4      	bne.n	802994a <GATT_Add_Char_Desc_Core+0x66>
 80299c0:	f890 1023 	ldrb.w	r1, [r0, #35]	@ 0x23
 80299c4:	2901      	cmp	r1, #1
 80299c6:	d1c0      	bne.n	802994a <GATT_Add_Char_Desc_Core+0x66>
 80299c8:	e9dd ec04 	ldrd	lr, ip, [sp, #16]
 80299cc:	e9dd a602 	ldrd	sl, r6, [sp, #8]
 80299d0:	6800      	ldr	r0, [r0, #0]
 80299d2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80299d4:	9306      	str	r3, [sp, #24]
 80299d6:	6804      	ldr	r4, [r0, #0]
 80299d8:	2a01      	cmp	r2, #1
 80299da:	d131      	bne.n	8029a40 <GATT_Add_Char_Desc_Core+0x15c>
 80299dc:	fa1f f08c 	uxth.w	r0, ip
 80299e0:	f5a0 5024 	sub.w	r0, r0, #10496	@ 0x2900
 80299e4:	2805      	cmp	r0, #5
 80299e6:	d82b      	bhi.n	8029a40 <GATT_Add_Char_Desc_Core+0x15c>
 80299e8:	e8df f000 	tbb	[pc, r0]
 80299ec:	03032a03 	.word	0x03032a03
 80299f0:	0906      	.short	0x0906
 80299f2:	2d02      	cmp	r5, #2
 80299f4:	d1a9      	bne.n	802994a <GATT_Add_Char_Desc_Core+0x66>
 80299f6:	e023      	b.n	8029a40 <GATT_Add_Char_Desc_Core+0x15c>
 80299f8:	2d07      	cmp	r5, #7
 80299fa:	d1a6      	bne.n	802994a <GATT_Add_Char_Desc_Core+0x66>
 80299fc:	e020      	b.n	8029a40 <GATT_Add_Char_Desc_Core+0x15c>
 80299fe:	2092      	movs	r0, #146	@ 0x92
 8029a00:	9501      	str	r5, [sp, #4]
 8029a02:	2d04      	cmp	r5, #4
 8029a04:	d3a2      	bcc.n	802994c <GATT_Add_Char_Desc_Core+0x68>
 8029a06:	e9dd ec04 	ldrd	lr, ip, [sp, #16]
 8029a0a:	e9dd a602 	ldrd	sl, r6, [sp, #8]
 8029a0e:	9d01      	ldr	r5, [sp, #4]
 8029a10:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8029a12:	f015 0101 	ands.w	r1, r5, #1
 8029a16:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8029a18:	f47f af98 	bne.w	802994c <GATT_Add_Char_Desc_Core+0x68>
 8029a1c:	b181      	cbz	r1, 8029a40 <GATT_Add_Char_Desc_Core+0x15c>
 8029a1e:	2092      	movs	r0, #146	@ 0x92
 8029a20:	9907      	ldr	r1, [sp, #28]
 8029a22:	2904      	cmp	r1, #4
 8029a24:	f4ff af92 	bcc.w	802994c <GATT_Add_Char_Desc_Core+0x68>
 8029a28:	e9dd 6e03 	ldrd	r6, lr, [sp, #12]
 8029a2c:	e9dd 5a01 	ldrd	r5, sl, [sp, #4]
 8029a30:	9907      	ldr	r1, [sp, #28]
 8029a32:	f8dd c014 	ldr.w	ip, [sp, #20]
 8029a36:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8029a38:	f011 0101 	ands.w	r1, r1, #1
 8029a3c:	f47f af86 	bne.w	802994c <GATT_Add_Char_Desc_Core+0x68>
 8029a40:	fa1f f18c 	uxth.w	r1, ip
 8029a44:	e9cd 6a15 	strd	r6, sl, [sp, #84]	@ 0x54
 8029a48:	46ab      	mov	fp, r5
 8029a4a:	2a01      	cmp	r2, #1
 8029a4c:	e9cd ce13 	strd	ip, lr, [sp, #76]	@ 0x4c
 8029a50:	468a      	mov	sl, r1
 8029a52:	d10a      	bne.n	8029a6a <GATT_Add_Char_Desc_Core+0x186>
 8029a54:	f642 1002 	movw	r0, #10498	@ 0x2902
 8029a58:	4281      	cmp	r1, r0
 8029a5a:	bf1c      	itt	ne
 8029a5c:	f642 3029 	movwne	r0, #11049	@ 0x2b29
 8029a60:	4281      	cmpne	r1, r0
 8029a62:	d102      	bne.n	8029a6a <GATT_Add_Char_Desc_Core+0x186>
 8029a64:	4837      	ldr	r0, [pc, #220]	@ (8029b44 <__arm_cp.13_0>)
 8029a66:	7d85      	ldrb	r5, [r0, #22]
 8029a68:	e000      	b.n	8029a6c <GATT_Add_Char_Desc_Core+0x188>
 8029a6a:	2501      	movs	r5, #1
 8029a6c:	9807      	ldr	r0, [sp, #28]
 8029a6e:	4368      	muls	r0, r5
 8029a70:	b280      	uxth	r0, r0
 8029a72:	f7ff ff1f 	bl	80298b4 <GATT_New_Value>
 8029a76:	b198      	cbz	r0, 8029aa0 <GATT_Add_Char_Desc_Core+0x1bc>
 8029a78:	4606      	mov	r6, r0
 8029a7a:	4642      	mov	r2, r8
 8029a7c:	4653      	mov	r3, sl
 8029a7e:	4294      	cmp	r4, r2
 8029a80:	d010      	beq.n	8029aa4 <GATT_Add_Char_Desc_Core+0x1c0>
 8029a82:	f894 0023 	ldrb.w	r0, [r4, #35]	@ 0x23
 8029a86:	2801      	cmp	r0, #1
 8029a88:	d108      	bne.n	8029a9c <GATT_Add_Char_Desc_Core+0x1b8>
 8029a8a:	8920      	ldrh	r0, [r4, #8]
 8029a8c:	f5a0 5124 	sub.w	r1, r0, #10496	@ 0x2900
 8029a90:	2905      	cmp	r1, #5
 8029a92:	d803      	bhi.n	8029a9c <GATT_Add_Char_Desc_Core+0x1b8>
 8029a94:	2904      	cmp	r1, #4
 8029a96:	d001      	beq.n	8029a9c <GATT_Add_Char_Desc_Core+0x1b8>
 8029a98:	4298      	cmp	r0, r3
 8029a9a:	d051      	beq.n	8029b40 <GATT_Add_Char_Desc_Core+0x25c>
 8029a9c:	6824      	ldr	r4, [r4, #0]
 8029a9e:	e7ee      	b.n	8029a7e <GATT_Add_Char_Desc_Core+0x19a>
 8029aa0:	2098      	movs	r0, #152	@ 0x98
 8029aa2:	e753      	b.n	802994c <GATT_Add_Char_Desc_Core+0x68>
 8029aa4:	683f      	ldr	r7, [r7, #0]
 8029aa6:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8029aa8:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8029aaa:	f887 0022 	strb.w	r0, [r7, #34]	@ 0x22
 8029aae:	9807      	ldr	r0, [sp, #28]
 8029ab0:	f8a7 b01e 	strh.w	fp, [r7, #30]
 8029ab4:	8438      	strh	r0, [r7, #32]
 8029ab6:	9806      	ldr	r0, [sp, #24]
 8029ab8:	8b80      	ldrh	r0, [r0, #28]
 8029aba:	3001      	adds	r0, #1
 8029abc:	83b8      	strh	r0, [r7, #28]
 8029abe:	f107 0008 	add.w	r0, r7, #8
 8029ac2:	2c01      	cmp	r4, #1
 8029ac4:	d104      	bne.n	8029ad0 <GATT_Add_Char_Desc_Core+0x1ec>
 8029ac6:	ac13      	add	r4, sp, #76	@ 0x4c
 8029ac8:	cc1e      	ldmia	r4, {r1, r2, r3, r4}
 8029aca:	c01e      	stmia	r0!, {r1, r2, r3, r4}
 8029acc:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8029ace:	e003      	b.n	8029ad8 <GATT_Add_Char_Desc_Core+0x1f4>
 8029ad0:	a913      	add	r1, sp, #76	@ 0x4c
 8029ad2:	2210      	movs	r2, #16
 8029ad4:	f7fa fd38 	bl	8024548 <ble_memcpy>
 8029ad8:	f887 4023 	strb.w	r4, [r7, #35]	@ 0x23
 8029adc:	2400      	movs	r4, #0
 8029ade:	61be      	str	r6, [r7, #24]
 8029ae0:	b14d      	cbz	r5, 8029af6 <GATT_Add_Char_Desc_Core+0x212>
 8029ae2:	69b8      	ldr	r0, [r7, #24]
 8029ae4:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8029ae6:	465a      	mov	r2, fp
 8029ae8:	4420      	add	r0, r4
 8029aea:	f7fa fd2d 	bl	8024548 <ble_memcpy>
 8029aee:	9807      	ldr	r0, [sp, #28]
 8029af0:	3d01      	subs	r5, #1
 8029af2:	4404      	add	r4, r0
 8029af4:	e7f4      	b.n	8029ae0 <GATT_Add_Char_Desc_Core+0x1fc>
 8029af6:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8029af8:	f887 0026 	strb.w	r0, [r7, #38]	@ 0x26
 8029afc:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8029afe:	f887 0024 	strb.w	r0, [r7, #36]	@ 0x24
 8029b02:	9808      	ldr	r0, [sp, #32]
 8029b04:	f887 0025 	strb.w	r0, [r7, #37]	@ 0x25
 8029b08:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8029b0a:	2807      	cmp	r0, #7
 8029b0c:	bf98      	it	ls
 8029b0e:	2007      	movls	r0, #7
 8029b10:	2810      	cmp	r0, #16
 8029b12:	bf28      	it	cs
 8029b14:	2010      	movcs	r0, #16
 8029b16:	f887 0027 	strb.w	r0, [r7, #39]	@ 0x27
 8029b1a:	4638      	mov	r0, r7
 8029b1c:	f005 fb56 	bl	802f1cc <CList_Remove>
 8029b20:	4640      	mov	r0, r8
 8029b22:	4639      	mov	r1, r7
 8029b24:	f005 fb4b 	bl	802f1be <CList_Insert>
 8029b28:	8bb8      	ldrh	r0, [r7, #28]
 8029b2a:	f642 1102 	movw	r1, #10498	@ 0x2902
 8029b2e:	f8a9 0000 	strh.w	r0, [r9]
 8029b32:	458a      	cmp	sl, r1
 8029b34:	bf1c      	itt	ne
 8029b36:	4601      	movne	r1, r0
 8029b38:	f7ff fea2 	blne	8029880 <GATT_Notify_Service_Change>
 8029b3c:	2000      	movs	r0, #0
 8029b3e:	e705      	b.n	802994c <GATT_Add_Char_Desc_Core+0x68>
 8029b40:	2062      	movs	r0, #98	@ 0x62
 8029b42:	e703      	b.n	802994c <GATT_Add_Char_Desc_Core+0x68>

08029b44 <__arm_cp.13_0>:
 8029b44:	20009f34 	.word	0x20009f34

08029b48 <aci_gatt_add_char>:
 8029b48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8029b4a:	b087      	sub	sp, #28
 8029b4c:	460c      	mov	r4, r1
 8029b4e:	4606      	mov	r6, r0
 8029b50:	4668      	mov	r0, sp
 8029b52:	4611      	mov	r1, r2
 8029b54:	461d      	mov	r5, r3
 8029b56:	3004      	adds	r0, #4
 8029b58:	4622      	mov	r2, r4
 8029b5a:	f000 f81c 	bl	8029b96 <GATT_Set_UUID>
 8029b5e:	b9c0      	cbnz	r0, 8029b92 <aci_gatt_add_char+0x4a>
 8029b60:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	@ 0x38
 8029b64:	e9dd c70c 	ldrd	ip, r7, [sp, #48]	@ 0x30
 8029b68:	e9dd 1010 	ldrd	r1, r0, [sp, #64]	@ 0x40
 8029b6c:	f8ad 5014 	strh.w	r5, [sp, #20]
 8029b70:	f8ad 6000 	strh.w	r6, [sp]
 8029b74:	f88d 4002 	strb.w	r4, [sp, #2]
 8029b78:	f88d 101a 	strb.w	r1, [sp, #26]
 8029b7c:	4669      	mov	r1, sp
 8029b7e:	f88d 3018 	strb.w	r3, [sp, #24]
 8029b82:	f88d c016 	strb.w	ip, [sp, #22]
 8029b86:	f88d 2019 	strb.w	r2, [sp, #25]
 8029b8a:	f88d 7017 	strb.w	r7, [sp, #23]
 8029b8e:	f7ff fc91 	bl	80294b4 <GATT_Add_Char_Core>
 8029b92:	b007      	add	sp, #28
 8029b94:	bdf0      	pop	{r4, r5, r6, r7, pc}

08029b96 <GATT_Set_UUID>:
 8029b96:	2a01      	cmp	r2, #1
 8029b98:	d005      	beq.n	8029ba6 <GATT_Set_UUID+0x10>
 8029b9a:	2a02      	cmp	r2, #2
 8029b9c:	bf1c      	itt	ne
 8029b9e:	2092      	movne	r0, #146	@ 0x92
 8029ba0:	4770      	bxne	lr
 8029ba2:	2210      	movs	r2, #16
 8029ba4:	e000      	b.n	8029ba8 <GATT_Set_UUID+0x12>
 8029ba6:	2202      	movs	r2, #2
 8029ba8:	b580      	push	{r7, lr}
 8029baa:	f7fa fccd 	bl	8024548 <ble_memcpy>
 8029bae:	2000      	movs	r0, #0
 8029bb0:	bd80      	pop	{r7, pc}

08029bb2 <GATT_Search_Handle>:
 8029bb2:	b510      	push	{r4, lr}
 8029bb4:	3120      	adds	r1, #32
 8029bb6:	460b      	mov	r3, r1
 8029bb8:	681b      	ldr	r3, [r3, #0]
 8029bba:	428b      	cmp	r3, r1
 8029bbc:	bf04      	itt	eq
 8029bbe:	2091      	moveq	r0, #145	@ 0x91
 8029bc0:	bd10      	popeq	{r4, pc}
 8029bc2:	8b9c      	ldrh	r4, [r3, #28]
 8029bc4:	4284      	cmp	r4, r0
 8029bc6:	bf02      	ittt	eq
 8029bc8:	6013      	streq	r3, [r2, #0]
 8029bca:	2000      	moveq	r0, #0
 8029bcc:	bd10      	popeq	{r4, pc}
 8029bce:	e7f3      	b.n	8029bb8 <GATT_Search_Handle+0x6>

08029bd0 <GATT_Update_Char_Value_Core>:
 8029bd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029bd4:	b093      	sub	sp, #76	@ 0x4c
 8029bd6:	f10d 0830 	add.w	r8, sp, #48	@ 0x30
 8029bda:	460d      	mov	r5, r1
 8029bdc:	4606      	mov	r6, r0
 8029bde:	2114      	movs	r1, #20
 8029be0:	461c      	mov	r4, r3
 8029be2:	4617      	mov	r7, r2
 8029be4:	4640      	mov	r0, r8
 8029be6:	f005 fc17 	bl	802f418 <__aeabi_memclr>
 8029bea:	f8df a31c 	ldr.w	sl, [pc, #796]	@ 8029f08 <__arm_cp.19_0>
 8029bee:	f89a 01d4 	ldrb.w	r0, [sl, #468]	@ 0x1d4
 8029bf2:	07c0      	lsls	r0, r0, #31
 8029bf4:	d101      	bne.n	8029bfa <GATT_Update_Char_Value_Core+0x2a>
 8029bf6:	2797      	movs	r7, #151	@ 0x97
 8029bf8:	e00c      	b.n	8029c14 <GATT_Update_Char_Value_Core+0x44>
 8029bfa:	a912      	add	r1, sp, #72	@ 0x48
 8029bfc:	4628      	mov	r0, r5
 8029bfe:	f7ff fe45 	bl	802988c <GATT_Search_Service_Handle>
 8029c02:	b930      	cbnz	r0, 8029c12 <GATT_Update_Char_Value_Core+0x42>
 8029c04:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 8029c06:	aa11      	add	r2, sp, #68	@ 0x44
 8029c08:	4638      	mov	r0, r7
 8029c0a:	4629      	mov	r1, r5
 8029c0c:	f7ff ffd1 	bl	8029bb2 <GATT_Search_Handle>
 8029c10:	b120      	cbz	r0, 8029c1c <GATT_Update_Char_Value_Core+0x4c>
 8029c12:	2760      	movs	r7, #96	@ 0x60
 8029c14:	b2f8      	uxtb	r0, r7
 8029c16:	b013      	add	sp, #76	@ 0x4c
 8029c18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8029c1c:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8029c1e:	f890 1023 	ldrb.w	r1, [r0, #35]	@ 0x23
 8029c22:	2901      	cmp	r1, #1
 8029c24:	d117      	bne.n	8029c56 <GATT_Update_Char_Value_Core+0x86>
 8029c26:	8901      	ldrh	r1, [r0, #8]
 8029c28:	f642 0203 	movw	r2, #10243	@ 0x2803
 8029c2c:	4291      	cmp	r1, r2
 8029c2e:	d112      	bne.n	8029c56 <GATT_Update_Char_Value_Core+0x86>
 8029c30:	e9dd c21d 	ldrd	ip, r2, [sp, #116]	@ 0x74
 8029c34:	f8d0 9000 	ldr.w	r9, [r0]
 8029c38:	f8b9 7020 	ldrh.w	r7, [r9, #32]
 8029c3c:	eb02 010c 	add.w	r1, r2, ip
 8029c40:	42b9      	cmp	r1, r7
 8029c42:	d808      	bhi.n	8029c56 <GATT_Update_Char_Value_Core+0x86>
 8029c44:	f899 3022 	ldrb.w	r3, [r9, #34]	@ 0x22
 8029c48:	b13b      	cbz	r3, 8029c5a <GATT_Update_Char_Value_Core+0x8a>
 8029c4a:	f8dd b070 	ldr.w	fp, [sp, #112]	@ 0x70
 8029c4e:	455f      	cmp	r7, fp
 8029c50:	d301      	bcc.n	8029c56 <GATT_Update_Char_Value_Core+0x86>
 8029c52:	4559      	cmp	r1, fp
 8029c54:	d903      	bls.n	8029c5e <GATT_Update_Char_Value_Core+0x8e>
 8029c56:	2792      	movs	r7, #146	@ 0x92
 8029c58:	e7dc      	b.n	8029c14 <GATT_Update_Char_Value_Core+0x44>
 8029c5a:	f8b9 b01e 	ldrh.w	fp, [r9, #30]
 8029c5e:	07e1      	lsls	r1, r4, #31
 8029c60:	bf0f      	iteee	eq
 8029c62:	2700      	moveq	r7, #0
 8029c64:	6981      	ldrne	r1, [r0, #24]
 8029c66:	7809      	ldrbne	r1, [r1, #0]
 8029c68:	f3c1 1700 	ubfxne	r7, r1, #4, #1
 8029c6c:	07a1      	lsls	r1, r4, #30
 8029c6e:	bf51      	iteee	pl
 8029c70:	2100      	movpl	r1, #0
 8029c72:	6980      	ldrmi	r0, [r0, #24]
 8029c74:	7800      	ldrbmi	r0, [r0, #0]
 8029c76:	f3c0 1140 	ubfxmi	r1, r0, #5, #1
 8029c7a:	ea47 0001 	orr.w	r0, r7, r1
 8029c7e:	2801      	cmp	r0, #1
 8029c80:	d103      	bne.n	8029c8a <GATT_Update_Char_Value_Core+0xba>
 8029c82:	f89a 01d4 	ldrb.w	r0, [sl, #468]	@ 0x1d4
 8029c86:	0780      	lsls	r0, r0, #30
 8029c88:	d458      	bmi.n	8029d3c <GATT_Update_Char_Value_Core+0x16c>
 8029c8a:	970b      	str	r7, [sp, #44]	@ 0x2c
 8029c8c:	2000      	movs	r0, #0
 8029c8e:	2501      	movs	r5, #1
 8029c90:	2700      	movs	r7, #0
 8029c92:	2600      	movs	r6, #0
 8029c94:	f04f 0800 	mov.w	r8, #0
 8029c98:	2400      	movs	r4, #0
 8029c9a:	900a      	str	r0, [sp, #40]	@ 0x28
 8029c9c:	f8d9 0018 	ldr.w	r0, [r9, #24]
 8029ca0:	991f      	ldr	r1, [sp, #124]	@ 0x7c
 8029ca2:	4460      	add	r0, ip
 8029ca4:	f7fa fc50 	bl	8024548 <ble_memcpy>
 8029ca8:	f899 0022 	ldrb.w	r0, [r9, #34]	@ 0x22
 8029cac:	b108      	cbz	r0, 8029cb2 <GATT_Update_Char_Value_Core+0xe2>
 8029cae:	f8a9 b01e 	strh.w	fp, [r9, #30]
 8029cb2:	b135      	cbz	r5, 8029cc2 <GATT_Update_Char_Value_Core+0xf2>
 8029cb4:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8029cb6:	2800      	cmp	r0, #0
 8029cb8:	d0ac      	beq.n	8029c14 <GATT_Update_Char_Value_Core+0x44>
 8029cba:	4648      	mov	r0, r9
 8029cbc:	f000 f9b4 	bl	802a028 <GATT_Send_Notification_Complete_Event>
 8029cc0:	e7a8      	b.n	8029c14 <GATT_Update_Char_Value_Core+0x44>
 8029cc2:	f8da 11f8 	ldr.w	r1, [sl, #504]	@ 0x1f8
 8029cc6:	f89a 01d5 	ldrb.w	r0, [sl, #469]	@ 0x1d5
 8029cca:	46a4      	mov	ip, r4
 8029ccc:	aa0c      	add	r2, sp, #48	@ 0x30
 8029cce:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8029cd0:	3104      	adds	r1, #4
 8029cd2:	b150      	cbz	r0, 8029cea <GATT_Update_Char_Value_Core+0x11a>
 8029cd4:	f831 3c04 	ldrh.w	r3, [r1, #-4]
 8029cd8:	b11b      	cbz	r3, 8029ce2 <GATT_Update_Char_Value_Core+0x112>
 8029cda:	7813      	ldrb	r3, [r2, #0]
 8029cdc:	680d      	ldr	r5, [r1, #0]
 8029cde:	432b      	orrs	r3, r5
 8029ce0:	600b      	str	r3, [r1, #0]
 8029ce2:	3201      	adds	r2, #1
 8029ce4:	3124      	adds	r1, #36	@ 0x24
 8029ce6:	3801      	subs	r0, #1
 8029ce8:	e7f3      	b.n	8029cd2 <GATT_Update_Char_Value_Core+0x102>
 8029cea:	07a0      	lsls	r0, r4, #30
 8029cec:	d510      	bpl.n	8029d10 <GATT_Update_Char_Value_Core+0x140>
 8029cee:	1cf0      	adds	r0, r6, #3
 8029cf0:	f8d9 3018 	ldr.w	r3, [r9, #24]
 8029cf4:	f8b9 101c 	ldrh.w	r1, [r9, #28]
 8029cf8:	4665      	mov	r5, ip
 8029cfa:	f8cd c000 	str.w	ip, [sp]
 8029cfe:	b282      	uxth	r2, r0
 8029d00:	2002      	movs	r0, #2
 8029d02:	f001 fae1 	bl	802b2c8 <ATT_Build_Notif_Or_Ind>
 8029d06:	2000      	movs	r0, #0
 8029d08:	2102      	movs	r1, #2
 8029d0a:	462a      	mov	r2, r5
 8029d0c:	f000 f936 	bl	8029f7c <GATT_Send_Notif_Or_Ind>
 8029d10:	07e0      	lsls	r0, r4, #31
 8029d12:	f43f af7f 	beq.w	8029c14 <GATT_Update_Char_Value_Core+0x44>
 8029d16:	f8ca 9224 	str.w	r9, [sl, #548]	@ 0x224
 8029d1a:	1cf0      	adds	r0, r6, #3
 8029d1c:	f8d9 3018 	ldr.w	r3, [r9, #24]
 8029d20:	f8b9 101c 	ldrh.w	r1, [r9, #28]
 8029d24:	b282      	uxth	r2, r0
 8029d26:	2001      	movs	r0, #1
 8029d28:	f8cd 8000 	str.w	r8, [sp]
 8029d2c:	f001 facc 	bl	802b2c8 <ATT_Build_Notif_Or_Ind>
 8029d30:	2000      	movs	r0, #0
 8029d32:	2101      	movs	r1, #1
 8029d34:	4642      	mov	r2, r8
 8029d36:	f000 f921 	bl	8029f7c <GATT_Send_Notif_Or_Ind>
 8029d3a:	e76b      	b.n	8029c14 <GATT_Update_Char_Value_Core+0x44>
 8029d3c:	9107      	str	r1, [sp, #28]
 8029d3e:	f105 0020 	add.w	r0, r5, #32
 8029d42:	f642 0103 	movw	r1, #10243	@ 0x2803
 8029d46:	f642 1202 	movw	r2, #10498	@ 0x2902
 8029d4a:	464c      	mov	r4, r9
 8029d4c:	6824      	ldr	r4, [r4, #0]
 8029d4e:	4284      	cmp	r4, r0
 8029d50:	f43f af81 	beq.w	8029c56 <GATT_Update_Char_Value_Core+0x86>
 8029d54:	f894 3023 	ldrb.w	r3, [r4, #35]	@ 0x23
 8029d58:	2b01      	cmp	r3, #1
 8029d5a:	d1f7      	bne.n	8029d4c <GATT_Update_Char_Value_Core+0x17c>
 8029d5c:	8923      	ldrh	r3, [r4, #8]
 8029d5e:	428b      	cmp	r3, r1
 8029d60:	f43f af79 	beq.w	8029c56 <GATT_Update_Char_Value_Core+0x86>
 8029d64:	4293      	cmp	r3, r2
 8029d66:	d1f1      	bne.n	8029d4c <GATT_Update_Char_Value_Core+0x17c>
 8029d68:	4630      	mov	r0, r6
 8029d6a:	970b      	str	r7, [sp, #44]	@ 0x2c
 8029d6c:	e9cd 9b02 	strd	r9, fp, [sp, #8]
 8029d70:	f7ff fa1c 	bl	80291ac <GATT_Get_Bearer>
 8029d74:	4601      	mov	r1, r0
 8029d76:	2000      	movs	r0, #0
 8029d78:	f04f 0900 	mov.w	r9, #0
 8029d7c:	2200      	movs	r2, #0
 8029d7e:	2700      	movs	r7, #0
 8029d80:	f04f 0b00 	mov.w	fp, #0
 8029d84:	900a      	str	r0, [sp, #40]	@ 0x28
 8029d86:	4608      	mov	r0, r1
 8029d88:	9106      	str	r1, [sp, #24]
 8029d8a:	9108      	str	r1, [sp, #32]
 8029d8c:	f89a 01d5 	ldrb.w	r0, [sl, #469]	@ 0x1d5
 8029d90:	4583      	cmp	fp, r0
 8029d92:	d259      	bcs.n	8029e48 <GATT_Update_Char_Value_Core+0x278>
 8029d94:	f8da 01f8 	ldr.w	r0, [sl, #504]	@ 0x1f8
 8029d98:	f830 1009 	ldrh.w	r1, [r0, r9]
 8029d9c:	2900      	cmp	r1, #0
 8029d9e:	d04d      	beq.n	8029e3c <GATT_Update_Char_Value_Core+0x26c>
 8029da0:	eb00 0509 	add.w	r5, r0, r9
 8029da4:	b116      	cbz	r6, 8029dac <GATT_Update_Char_Value_Core+0x1dc>
 8029da6:	9806      	ldr	r0, [sp, #24]
 8029da8:	4285      	cmp	r5, r0
 8029daa:	d147      	bne.n	8029e3c <GATT_Update_Char_Value_Core+0x26c>
 8029dac:	4628      	mov	r0, r5
 8029dae:	9209      	str	r2, [sp, #36]	@ 0x24
 8029db0:	f7ff f92e 	bl	8029010 <GATT_Bearer_Index>
 8029db4:	69a1      	ldr	r1, [r4, #24]
 8029db6:	f811 0010 	ldrb.w	r0, [r1, r0, lsl #1]
 8029dba:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8029dbc:	ea10 0201 	ands.w	r2, r0, r1
 8029dc0:	f000 0002 	and.w	r0, r0, #2
 8029dc4:	9907      	ldr	r1, [sp, #28]
 8029dc6:	ea01 0050 	and.w	r0, r1, r0, lsr #1
 8029dca:	bf08      	it	eq
 8029dcc:	2800      	cmpeq	r0, #0
 8029dce:	d00a      	beq.n	8029de6 <GATT_Update_Char_Value_Core+0x216>
 8029dd0:	e9cd 0204 	strd	r0, r2, [sp, #16]
 8029dd4:	4628      	mov	r0, r5
 8029dd6:	4621      	mov	r1, r4
 8029dd8:	2202      	movs	r2, #2
 8029dda:	f000 fa74 	bl	802a2c6 <ATT_Check_Perm>
 8029dde:	b128      	cbz	r0, 8029dec <GATT_Update_Char_Value_Core+0x21c>
 8029de0:	2765      	movs	r7, #101	@ 0x65
 8029de2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8029de4:	e02a      	b.n	8029e3c <GATT_Update_Char_Value_Core+0x26c>
 8029de6:	e9dd 5208 	ldrd	r5, r2, [sp, #32]
 8029dea:	e025      	b.n	8029e38 <GATT_Update_Char_Value_Core+0x268>
 8029dec:	9805      	ldr	r0, [sp, #20]
 8029dee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8029df0:	b178      	cbz	r0, 8029e12 <GATT_Update_Char_Value_Core+0x242>
 8029df2:	f818 000b 	ldrb.w	r0, [r8, fp]
 8029df6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8029df8:	f041 0101 	orr.w	r1, r1, #1
 8029dfc:	f040 0001 	orr.w	r0, r0, #1
 8029e00:	910a      	str	r1, [sp, #40]	@ 0x28
 8029e02:	b291      	uxth	r1, r2
 8029e04:	f808 000b 	strb.w	r0, [r8, fp]
 8029e08:	8868      	ldrh	r0, [r5, #2]
 8029e0a:	4288      	cmp	r0, r1
 8029e0c:	d901      	bls.n	8029e12 <GATT_Update_Char_Value_Core+0x242>
 8029e0e:	9508      	str	r5, [sp, #32]
 8029e10:	e000      	b.n	8029e14 <GATT_Update_Char_Value_Core+0x244>
 8029e12:	4610      	mov	r0, r2
 8029e14:	9904      	ldr	r1, [sp, #16]
 8029e16:	b169      	cbz	r1, 8029e34 <GATT_Update_Char_Value_Core+0x264>
 8029e18:	f818 100b 	ldrb.w	r1, [r8, fp]
 8029e1c:	886a      	ldrh	r2, [r5, #2]
 8029e1e:	f041 0102 	orr.w	r1, r1, #2
 8029e22:	f808 100b 	strb.w	r1, [r8, fp]
 8029e26:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8029e28:	f041 0102 	orr.w	r1, r1, #2
 8029e2c:	910a      	str	r1, [sp, #40]	@ 0x28
 8029e2e:	b281      	uxth	r1, r0
 8029e30:	428a      	cmp	r2, r1
 8029e32:	d801      	bhi.n	8029e38 <GATT_Update_Char_Value_Core+0x268>
 8029e34:	4602      	mov	r2, r0
 8029e36:	9d08      	ldr	r5, [sp, #32]
 8029e38:	b92e      	cbnz	r6, 8029e46 <GATT_Update_Char_Value_Core+0x276>
 8029e3a:	9508      	str	r5, [sp, #32]
 8029e3c:	f109 0924 	add.w	r9, r9, #36	@ 0x24
 8029e40:	f10b 0b01 	add.w	fp, fp, #1
 8029e44:	e7a2      	b.n	8029d8c <GATT_Update_Char_Value_Core+0x1bc>
 8029e46:	9508      	str	r5, [sp, #32]
 8029e48:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8029e4a:	b319      	cbz	r1, 8029e94 <GATT_Update_Char_Value_Core+0x2c4>
 8029e4c:	f99a 01d4 	ldrsb.w	r0, [sl, #468]	@ 0x1d4
 8029e50:	2800      	cmp	r0, #0
 8029e52:	d456      	bmi.n	8029f02 <GATT_Update_Char_Value_Core+0x332>
 8029e54:	4694      	mov	ip, r2
 8029e56:	f8da 21f8 	ldr.w	r2, [sl, #504]	@ 0x1f8
 8029e5a:	f001 0601 	and.w	r6, r1, #1
 8029e5e:	f001 0002 	and.w	r0, r1, #2
 8029e62:	f89a 11d5 	ldrb.w	r1, [sl, #469]	@ 0x1d5
 8029e66:	ab0c      	add	r3, sp, #48	@ 0x30
 8029e68:	3204      	adds	r2, #4
 8029e6a:	b1d1      	cbz	r1, 8029ea2 <GATT_Update_Char_Value_Core+0x2d2>
 8029e6c:	f832 4c04 	ldrh.w	r4, [r2, #-4]
 8029e70:	b164      	cbz	r4, 8029e8c <GATT_Update_Char_Value_Core+0x2bc>
 8029e72:	b138      	cbz	r0, 8029e84 <GATT_Update_Char_Value_Core+0x2b4>
 8029e74:	6814      	ldr	r4, [r2, #0]
 8029e76:	07a5      	lsls	r5, r4, #30
 8029e78:	d41e      	bmi.n	8029eb8 <GATT_Update_Char_Value_Core+0x2e8>
 8029e7a:	781d      	ldrb	r5, [r3, #0]
 8029e7c:	07ad      	lsls	r5, r5, #30
 8029e7e:	d501      	bpl.n	8029e84 <GATT_Update_Char_Value_Core+0x2b4>
 8029e80:	0724      	lsls	r4, r4, #28
 8029e82:	d431      	bmi.n	8029ee8 <GATT_Update_Char_Value_Core+0x318>
 8029e84:	b116      	cbz	r6, 8029e8c <GATT_Update_Char_Value_Core+0x2bc>
 8029e86:	7814      	ldrb	r4, [r2, #0]
 8029e88:	07e4      	lsls	r4, r4, #31
 8029e8a:	d115      	bne.n	8029eb8 <GATT_Update_Char_Value_Core+0x2e8>
 8029e8c:	3301      	adds	r3, #1
 8029e8e:	3224      	adds	r2, #36	@ 0x24
 8029e90:	3901      	subs	r1, #1
 8029e92:	e7ea      	b.n	8029e6a <GATT_Update_Char_Value_Core+0x29a>
 8029e94:	2000      	movs	r0, #0
 8029e96:	e9dd c21d 	ldrd	ip, r2, [sp, #116]	@ 0x74
 8029e9a:	e9dd 9b02 	ldrd	r9, fp, [sp, #8]
 8029e9e:	2501      	movs	r5, #1
 8029ea0:	e6f7      	b.n	8029c92 <GATT_Update_Char_Value_Core+0xc2>
 8029ea2:	f1ac 0103 	sub.w	r1, ip, #3
 8029ea6:	b28c      	uxth	r4, r1
 8029ea8:	9903      	ldr	r1, [sp, #12]
 8029eaa:	42a1      	cmp	r1, r4
 8029eac:	bf38      	it	cc
 8029eae:	460c      	movcc	r4, r1
 8029eb0:	b920      	cbnz	r0, 8029ebc <GATT_Update_Char_Value_Core+0x2ec>
 8029eb2:	2000      	movs	r0, #0
 8029eb4:	9009      	str	r0, [sp, #36]	@ 0x24
 8029eb6:	e006      	b.n	8029ec6 <GATT_Update_Char_Value_Core+0x2f6>
 8029eb8:	2793      	movs	r7, #147	@ 0x93
 8029eba:	e6ab      	b.n	8029c14 <GATT_Update_Char_Value_Core+0x44>
 8029ebc:	f000 f8e3 	bl	802a086 <OUTLINED_FUNCTION_1>
 8029ec0:	4601      	mov	r1, r0
 8029ec2:	9009      	str	r0, [sp, #36]	@ 0x24
 8029ec4:	b1b8      	cbz	r0, 8029ef6 <GATT_Update_Char_Value_Core+0x326>
 8029ec6:	b91e      	cbnz	r6, 8029ed0 <GATT_Update_Char_Value_Core+0x300>
 8029ec8:	2500      	movs	r5, #0
 8029eca:	f04f 0800 	mov.w	r8, #0
 8029ece:	e004      	b.n	8029eda <GATT_Update_Char_Value_Core+0x30a>
 8029ed0:	f000 f8d9 	bl	802a086 <OUTLINED_FUNCTION_1>
 8029ed4:	b150      	cbz	r0, 8029eec <GATT_Update_Char_Value_Core+0x31c>
 8029ed6:	4680      	mov	r8, r0
 8029ed8:	2500      	movs	r5, #0
 8029eda:	e9dd c21d 	ldrd	ip, r2, [sp, #116]	@ 0x74
 8029ede:	e9dd 9b02 	ldrd	r9, fp, [sp, #8]
 8029ee2:	4626      	mov	r6, r4
 8029ee4:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8029ee6:	e6d9      	b.n	8029c9c <GATT_Update_Char_Value_Core+0xcc>
 8029ee8:	270c      	movs	r7, #12
 8029eea:	e693      	b.n	8029c14 <GATT_Update_Char_Value_Core+0x44>
 8029eec:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8029eee:	b110      	cbz	r0, 8029ef6 <GATT_Update_Char_Value_Core+0x326>
 8029ef0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8029ef2:	f002 f949 	bl	802c188 <ACL_Release>
 8029ef6:	f89a 01d4 	ldrb.w	r0, [sl, #468]	@ 0x1d4
 8029efa:	f040 0080 	orr.w	r0, r0, #128	@ 0x80
 8029efe:	f88a 01d4 	strb.w	r0, [sl, #468]	@ 0x1d4
 8029f02:	2764      	movs	r7, #100	@ 0x64
 8029f04:	e686      	b.n	8029c14 <GATT_Update_Char_Value_Core+0x44>
 8029f06:	bf00      	nop

08029f08 <__arm_cp.19_0>:
 8029f08:	20009f5c 	.word	0x20009f5c

08029f0c <GATT_Check_For_Service_Change>:
 8029f0c:	b51c      	push	{r2, r3, r4, lr}
 8029f0e:	f10d 0106 	add.w	r1, sp, #6
 8029f12:	aa01      	add	r2, sp, #4
 8029f14:	4604      	mov	r4, r0
 8029f16:	f001 fb73 	bl	802b600 <GATT_Get_Change_Vs_Server_Database>
 8029f1a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8029f1e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8029f22:	4601      	mov	r1, r0
 8029f24:	4620      	mov	r0, r4
 8029f26:	f000 f801 	bl	8029f2c <GATT_Update_For_Service_Change>
 8029f2a:	bd1c      	pop	{r2, r3, r4, pc}

08029f2c <GATT_Update_For_Service_Change>:
 8029f2c:	b510      	push	{r4, lr}
 8029f2e:	b086      	sub	sp, #24
 8029f30:	4c10      	ldr	r4, [pc, #64]	@ (8029f74 <__arm_cp.32_0>)
 8029f32:	f894 41d4 	ldrb.w	r4, [r4, #468]	@ 0x1d4
 8029f36:	07a4      	lsls	r4, r4, #30
 8029f38:	d519      	bpl.n	8029f6e <GATT_Update_For_Service_Change+0x42>
 8029f3a:	b9c1      	cbnz	r1, 8029f6e <GATT_Update_For_Service_Change+0x42>
 8029f3c:	490e      	ldr	r1, [pc, #56]	@ (8029f78 <__arm_cp.32_1>)
 8029f3e:	8c09      	ldrh	r1, [r1, #32]
 8029f40:	f011 0102 	ands.w	r1, r1, #2
 8029f44:	d113      	bne.n	8029f6e <GATT_Update_For_Service_Change+0x42>
 8029f46:	2100      	movs	r1, #0
 8029f48:	b108      	cbz	r0, 8029f4e <GATT_Update_For_Service_Change+0x22>
 8029f4a:	8800      	ldrh	r0, [r0, #0]
 8029f4c:	e000      	b.n	8029f50 <GATT_Update_For_Service_Change+0x24>
 8029f4e:	2000      	movs	r0, #0
 8029f50:	f8ad 3016 	strh.w	r3, [sp, #22]
 8029f54:	f8ad 2014 	strh.w	r2, [sp, #20]
 8029f58:	aa05      	add	r2, sp, #20
 8029f5a:	2304      	movs	r3, #4
 8029f5c:	e9cd 3100 	strd	r3, r1, [sp]
 8029f60:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8029f64:	2101      	movs	r1, #1
 8029f66:	2202      	movs	r2, #2
 8029f68:	2302      	movs	r3, #2
 8029f6a:	f7ff fe31 	bl	8029bd0 <GATT_Update_Char_Value_Core>
 8029f6e:	b006      	add	sp, #24
 8029f70:	bd10      	pop	{r4, pc}
 8029f72:	bf00      	nop

08029f74 <__arm_cp.32_0>:
 8029f74:	20009f5c 	.word	0x20009f5c

08029f78 <__arm_cp.32_1>:
 8029f78:	20009f34 	.word	0x20009f34

08029f7c <GATT_Send_Notif_Or_Ind>:
 8029f7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8029f80:	4691      	mov	r9, r2
 8029f82:	460c      	mov	r4, r1
 8029f84:	b130      	cbz	r0, 8029f94 <GATT_Send_Notif_Or_Ind+0x18>
 8029f86:	2c01      	cmp	r4, #1
 8029f88:	d104      	bne.n	8029f94 <GATT_Send_Notif_Or_Ind+0x18>
 8029f8a:	4826      	ldr	r0, [pc, #152]	@ (802a024 <__arm_cp.35_0>)
 8029f8c:	f8d0 0220 	ldr.w	r0, [r0, #544]	@ 0x220
 8029f90:	4548      	cmp	r0, r9
 8029f92:	d138      	bne.n	802a006 <GATT_Send_Notif_Or_Ind+0x8a>
 8029f94:	f8df 808c 	ldr.w	r8, [pc, #140]	@ 802a024 <__arm_cp.35_0>
 8029f98:	2600      	movs	r6, #0
 8029f9a:	2200      	movs	r2, #0
 8029f9c:	2700      	movs	r7, #0
 8029f9e:	f8d8 01f8 	ldr.w	r0, [r8, #504]	@ 0x1f8
 8029fa2:	f898 11d5 	ldrb.w	r1, [r8, #469]	@ 0x1d5
 8029fa6:	b161      	cbz	r1, 8029fc2 <GATT_Send_Notif_Or_Ind+0x46>
 8029fa8:	6843      	ldr	r3, [r0, #4]
 8029faa:	4223      	tst	r3, r4
 8029fac:	d006      	beq.n	8029fbc <GATT_Send_Notif_Or_Ind+0x40>
 8029fae:	8843      	ldrh	r3, [r0, #2]
 8029fb0:	3201      	adds	r2, #1
 8029fb2:	b2b5      	uxth	r5, r6
 8029fb4:	42ab      	cmp	r3, r5
 8029fb6:	bf84      	itt	hi
 8029fb8:	461e      	movhi	r6, r3
 8029fba:	4607      	movhi	r7, r0
 8029fbc:	3024      	adds	r0, #36	@ 0x24
 8029fbe:	3901      	subs	r1, #1
 8029fc0:	e7f1      	b.n	8029fa6 <GATT_Send_Notif_Or_Ind+0x2a>
 8029fc2:	2c01      	cmp	r4, #1
 8029fc4:	d10a      	bne.n	8029fdc <GATT_Send_Notif_Or_Ind+0x60>
 8029fc6:	b2d0      	uxtb	r0, r2
 8029fc8:	2802      	cmp	r0, #2
 8029fca:	d207      	bcs.n	8029fdc <GATT_Send_Notif_Or_Ind+0x60>
 8029fcc:	f8d8 0224 	ldr.w	r0, [r8, #548]	@ 0x224
 8029fd0:	b120      	cbz	r0, 8029fdc <GATT_Send_Notif_Or_Ind+0x60>
 8029fd2:	f000 f829 	bl	802a028 <GATT_Send_Notification_Complete_Event>
 8029fd6:	2000      	movs	r0, #0
 8029fd8:	f8c8 0224 	str.w	r0, [r8, #548]	@ 0x224
 8029fdc:	b19f      	cbz	r7, 802a006 <GATT_Send_Notif_Or_Ind+0x8a>
 8029fde:	f8b9 1004 	ldrh.w	r1, [r9, #4]
 8029fe2:	b2b0      	uxth	r0, r6
 8029fe4:	3904      	subs	r1, #4
 8029fe6:	4281      	cmp	r1, r0
 8029fe8:	bfc4      	itt	gt
 8029fea:	1d30      	addgt	r0, r6, #4
 8029fec:	f8a9 0004 	strhgt.w	r0, [r9, #4]
 8029ff0:	8838      	ldrh	r0, [r7, #0]
 8029ff2:	f8a9 0008 	strh.w	r0, [r9, #8]
 8029ff6:	4648      	mov	r0, r9
 8029ff8:	f7ff f8c0 	bl	802917c <GATT_Send_Packet>
 8029ffc:	2c01      	cmp	r4, #1
 8029ffe:	d105      	bne.n	802a00c <GATT_Send_Notif_Or_Ind+0x90>
 802a000:	f8c8 9220 	str.w	r9, [r8, #544]	@ 0x220
 802a004:	e008      	b.n	802a018 <GATT_Send_Notif_Or_Ind+0x9c>
 802a006:	2000      	movs	r0, #0
 802a008:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802a00c:	2c02      	cmp	r4, #2
 802a00e:	bf02      	ittt	eq
 802a010:	6878      	ldreq	r0, [r7, #4]
 802a012:	f040 0008 	orreq.w	r0, r0, #8
 802a016:	6078      	streq	r0, [r7, #4]
 802a018:	6878      	ldr	r0, [r7, #4]
 802a01a:	43a0      	bics	r0, r4
 802a01c:	6078      	str	r0, [r7, #4]
 802a01e:	2093      	movs	r0, #147	@ 0x93
 802a020:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0802a024 <__arm_cp.35_0>:
 802a024:	20009f5c 	.word	0x20009f5c

0802a028 <GATT_Send_Notification_Complete_Event>:
 802a028:	f890 1026 	ldrb.w	r1, [r0, #38]	@ 0x26
 802a02c:	0709      	lsls	r1, r1, #28
 802a02e:	bf58      	it	pl
 802a030:	4770      	bxpl	lr
 802a032:	8b81      	ldrh	r1, [r0, #28]
 802a034:	2001      	movs	r0, #1
 802a036:	f7fd ba41 	b.w	80274bc <EVT_aci_gatt_notification_complete>
	...

0802a03c <GATT_Find_Srv_Owner_Of_Handle>:
 802a03c:	b510      	push	{r4, lr}
 802a03e:	b1d8      	cbz	r0, 802a078 <GATT_Find_Srv_Owner_Of_Handle+0x3c>
 802a040:	4601      	mov	r1, r0
 802a042:	480e      	ldr	r0, [pc, #56]	@ (802a07c <__arm_cp.37_0>)
 802a044:	f8d0 31e0 	ldr.w	r3, [r0, #480]	@ 0x1e0
 802a048:	f500 72f0 	add.w	r2, r0, #480	@ 0x1e0
 802a04c:	4618      	mov	r0, r3
 802a04e:	681b      	ldr	r3, [r3, #0]
 802a050:	4293      	cmp	r3, r2
 802a052:	d003      	beq.n	802a05c <GATT_Find_Srv_Owner_Of_Handle+0x20>
 802a054:	8d1c      	ldrh	r4, [r3, #40]	@ 0x28
 802a056:	428c      	cmp	r4, r1
 802a058:	d9f8      	bls.n	802a04c <GATT_Find_Srv_Owner_Of_Handle+0x10>
 802a05a:	bd10      	pop	{r4, pc}
 802a05c:	8d02      	ldrh	r2, [r0, #40]	@ 0x28
 802a05e:	428a      	cmp	r2, r1
 802a060:	d2fb      	bcs.n	802a05a <GATT_Find_Srv_Owner_Of_Handle+0x1e>
 802a062:	4602      	mov	r2, r0
 802a064:	f852 3f20 	ldr.w	r3, [r2, #32]!
 802a068:	429a      	cmp	r2, r3
 802a06a:	d005      	beq.n	802a078 <GATT_Find_Srv_Owner_Of_Handle+0x3c>
 802a06c:	6a42      	ldr	r2, [r0, #36]	@ 0x24
 802a06e:	8b92      	ldrh	r2, [r2, #28]
 802a070:	428a      	cmp	r2, r1
 802a072:	bf38      	it	cc
 802a074:	2000      	movcc	r0, #0
 802a076:	bd10      	pop	{r4, pc}
 802a078:	2000      	movs	r0, #0
 802a07a:	bd10      	pop	{r4, pc}

0802a07c <__arm_cp.37_0>:
 802a07c:	20009f5c 	.word	0x20009f5c

0802a080 <OUTLINED_FUNCTION_0>:
 802a080:	4629      	mov	r1, r5
 802a082:	f005 b89c 	b.w	802f1be <CList_Insert>

0802a086 <OUTLINED_FUNCTION_1>:
 802a086:	1ce0      	adds	r0, r4, #3
 802a088:	b281      	uxth	r1, r0
 802a08a:	9808      	ldr	r0, [sp, #32]
 802a08c:	f7ff b86e 	b.w	802916c <GATT_New_PDU>

0802a090 <ATT_Build_Find_By_Type_Val_Rsp>:
 802a090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a094:	b089      	sub	sp, #36	@ 0x24
 802a096:	888c      	ldrh	r4, [r1, #4]
 802a098:	4617      	mov	r7, r2
 802a09a:	2c0a      	cmp	r4, #10
 802a09c:	d807      	bhi.n	802a0ae <ATT_Build_Find_By_Type_Val_Rsp+0x1e>
 802a09e:	2004      	movs	r0, #4
 802a0a0:	2106      	movs	r1, #6
 802a0a2:	2200      	movs	r2, #0
 802a0a4:	463b      	mov	r3, r7
 802a0a6:	2400      	movs	r4, #0
 802a0a8:	f000 f8e4 	bl	802a274 <ATT_Build_Error_Rsp>
 802a0ac:	e023      	b.n	802a0f6 <ATT_Build_Find_By_Type_Val_Rsp+0x66>
 802a0ae:	4606      	mov	r6, r0
 802a0b0:	6a08      	ldr	r0, [r1, #32]
 802a0b2:	4689      	mov	r9, r1
 802a0b4:	7941      	ldrb	r1, [r0, #5]
 802a0b6:	7982      	ldrb	r2, [r0, #6]
 802a0b8:	79c3      	ldrb	r3, [r0, #7]
 802a0ba:	7a05      	ldrb	r5, [r0, #8]
 802a0bc:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
 802a0c0:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 802a0c4:	fa1f fb81 	uxth.w	fp, r1
 802a0c8:	455b      	cmp	r3, fp
 802a0ca:	d30d      	bcc.n	802a0e8 <ATT_Build_Find_By_Type_Val_Rsp+0x58>
 802a0cc:	0409      	lsls	r1, r1, #16
 802a0ce:	d00b      	beq.n	802a0e8 <ATT_Build_Find_By_Type_Val_Rsp+0x58>
 802a0d0:	f890 800a 	ldrb.w	r8, [r0, #10]
 802a0d4:	f890 a009 	ldrb.w	sl, [r0, #9]
 802a0d8:	8871      	ldrh	r1, [r6, #2]
 802a0da:	4638      	mov	r0, r7
 802a0dc:	9304      	str	r3, [sp, #16]
 802a0de:	f002 f879 	bl	802c1d4 <ACL_Resize>
 802a0e2:	b160      	cbz	r0, 802a0fe <ATT_Build_Find_By_Type_Val_Rsp+0x6e>
 802a0e4:	2495      	movs	r4, #149	@ 0x95
 802a0e6:	e006      	b.n	802a0f6 <ATT_Build_Find_By_Type_Val_Rsp+0x66>
 802a0e8:	2001      	movs	r0, #1
 802a0ea:	2106      	movs	r1, #6
 802a0ec:	465a      	mov	r2, fp
 802a0ee:	463b      	mov	r3, r7
 802a0f0:	f000 f8c0 	bl	802a274 <ATT_Build_Error_Rsp>
 802a0f4:	2400      	movs	r4, #0
 802a0f6:	4620      	mov	r0, r4
 802a0f8:	b009      	add	sp, #36	@ 0x24
 802a0fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802a0fe:	6a38      	ldr	r0, [r7, #32]
 802a100:	2107      	movs	r1, #7
 802a102:	9605      	str	r6, [sp, #20]
 802a104:	7101      	strb	r1, [r0, #4]
 802a106:	2001      	movs	r0, #1
 802a108:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 802a10c:	4658      	mov	r0, fp
 802a10e:	f7ff ff95 	bl	802a03c <GATT_Find_Srv_Owner_Of_Handle>
 802a112:	2800      	cmp	r0, #0
 802a114:	f000 80a9 	beq.w	802a26a <ATT_Build_Find_By_Type_Val_Rsp+0x1da>
 802a118:	ea4a 2108 	orr.w	r1, sl, r8, lsl #8
 802a11c:	4605      	mov	r5, r0
 802a11e:	f1a4 000b 	sub.w	r0, r4, #11
 802a122:	9700      	str	r7, [sp, #0]
 802a124:	b280      	uxth	r0, r0
 802a126:	9103      	str	r1, [sp, #12]
 802a128:	f021 0101 	bic.w	r1, r1, #1
 802a12c:	9007      	str	r0, [sp, #28]
 802a12e:	9101      	str	r1, [sp, #4]
 802a130:	494f      	ldr	r1, [pc, #316]	@ (802a270 <__arm_cp.0_0>)
 802a132:	f501 71f0 	add.w	r1, r1, #480	@ 0x1e0
 802a136:	9102      	str	r1, [sp, #8]
 802a138:	e9dd 6104 	ldrd	r6, r1, [sp, #16]
 802a13c:	9802      	ldr	r0, [sp, #8]
 802a13e:	4285      	cmp	r5, r0
 802a140:	f000 808b 	beq.w	802a25a <ATT_Build_Find_By_Type_Val_Rsp+0x1ca>
 802a144:	462c      	mov	r4, r5
 802a146:	f834 3f28 	ldrh.w	r3, [r4, #40]!
 802a14a:	42b3      	cmp	r3, r6
 802a14c:	f200 8085 	bhi.w	802a25a <ATT_Build_Find_By_Type_Val_Rsp+0x1ca>
 802a150:	f8bd 0022 	ldrh.w	r0, [sp, #34]	@ 0x22
 802a154:	884a      	ldrh	r2, [r1, #2]
 802a156:	1a12      	subs	r2, r2, r0
 802a158:	2a04      	cmp	r2, #4
 802a15a:	f0c0 8080 	bcc.w	802a25e <ATT_Build_Find_By_Type_Val_Rsp+0x1ce>
 802a15e:	9801      	ldr	r0, [sp, #4]
 802a160:	9506      	str	r5, [sp, #24]
 802a162:	f5b0 5f20 	cmp.w	r0, #10240	@ 0x2800
 802a166:	d123      	bne.n	802a1b0 <ATT_Build_Find_By_Type_Val_Rsp+0x120>
 802a168:	459b      	cmp	fp, r3
 802a16a:	d874      	bhi.n	802a256 <ATT_Build_Find_By_Type_Val_Rsp+0x1c6>
 802a16c:	f105 0308 	add.w	r3, r5, #8
 802a170:	f001 f8da 	bl	802b328 <OUTLINED_FUNCTION_5>
 802a174:	e9dd 1505 	ldrd	r1, r5, [sp, #20]
 802a178:	9b03      	ldr	r3, [sp, #12]
 802a17a:	8d6a      	ldrh	r2, [r5, #42]	@ 0x2a
 802a17c:	4293      	cmp	r3, r2
 802a17e:	d16a      	bne.n	802a256 <ATT_Build_Find_By_Type_Val_Rsp+0x1c6>
 802a180:	9a07      	ldr	r2, [sp, #28]
 802a182:	2a02      	cmp	r2, #2
 802a184:	bf14      	ite	ne
 802a186:	2a10      	cmpne	r2, #16
 802a188:	2800      	cmpeq	r0, #0
 802a18a:	d164      	bne.n	802a256 <ATT_Build_Find_By_Type_Val_Rsp+0x1c6>
 802a18c:	4628      	mov	r0, r5
 802a18e:	4623      	mov	r3, r4
 802a190:	4622      	mov	r2, r4
 802a192:	f850 1f20 	ldr.w	r1, [r0, #32]!
 802a196:	4288      	cmp	r0, r1
 802a198:	bf1c      	itt	ne
 802a19a:	6a68      	ldrne	r0, [r5, #36]	@ 0x24
 802a19c:	f100 031c 	addne.w	r3, r0, #28
 802a1a0:	f10d 0122 	add.w	r1, sp, #34	@ 0x22
 802a1a4:	9800      	ldr	r0, [sp, #0]
 802a1a6:	f000 f874 	bl	802a292 <ATT_fill_type_val_entry>
 802a1aa:	e9dd 1505 	ldrd	r1, r5, [sp, #20]
 802a1ae:	e052      	b.n	802a256 <ATT_Build_Find_By_Type_Val_Rsp+0x1c6>
 802a1b0:	46a8      	mov	r8, r5
 802a1b2:	f858 4f20 	ldr.w	r4, [r8, #32]!
 802a1b6:	45a0      	cmp	r8, r4
 802a1b8:	d04d      	beq.n	802a256 <ATT_Build_Find_By_Type_Val_Rsp+0x1c6>
 802a1ba:	4544      	cmp	r4, r8
 802a1bc:	d04b      	beq.n	802a256 <ATT_Build_Find_By_Type_Val_Rsp+0x1c6>
 802a1be:	46a2      	mov	sl, r4
 802a1c0:	f83a 0f1c 	ldrh.w	r0, [sl, #28]!
 802a1c4:	4558      	cmp	r0, fp
 802a1c6:	d322      	bcc.n	802a20e <ATT_Build_Find_By_Type_Val_Rsp+0x17e>
 802a1c8:	42b0      	cmp	r0, r6
 802a1ca:	d846      	bhi.n	802a25a <ATT_Build_Find_By_Type_Val_Rsp+0x1ca>
 802a1cc:	f894 0023 	ldrb.w	r0, [r4, #35]	@ 0x23
 802a1d0:	2801      	cmp	r0, #1
 802a1d2:	d11c      	bne.n	802a20e <ATT_Build_Find_By_Type_Val_Rsp+0x17e>
 802a1d4:	4620      	mov	r0, r4
 802a1d6:	460e      	mov	r6, r1
 802a1d8:	f7ff f854 	bl	8029284 <GATT_Attr_Val>
 802a1dc:	4603      	mov	r3, r0
 802a1de:	f001 f8a3 	bl	802b328 <OUTLINED_FUNCTION_5>
 802a1e2:	4605      	mov	r5, r0
 802a1e4:	4630      	mov	r0, r6
 802a1e6:	4621      	mov	r1, r4
 802a1e8:	f001 f898 	bl	802b31c <OUTLINED_FUNCTION_3>
 802a1ec:	8921      	ldrh	r1, [r4, #8]
 802a1ee:	9a03      	ldr	r2, [sp, #12]
 802a1f0:	428a      	cmp	r2, r1
 802a1f2:	bf08      	it	eq
 802a1f4:	2800      	cmpeq	r0, #0
 802a1f6:	d105      	bne.n	802a204 <ATT_Build_Find_By_Type_Val_Rsp+0x174>
 802a1f8:	8be0      	ldrh	r0, [r4, #30]
 802a1fa:	9a07      	ldr	r2, [sp, #28]
 802a1fc:	4290      	cmp	r0, r2
 802a1fe:	bf08      	it	eq
 802a200:	2d00      	cmpeq	r5, #0
 802a202:	d007      	beq.n	802a214 <ATT_Build_Find_By_Type_Val_Rsp+0x184>
 802a204:	4627      	mov	r7, r4
 802a206:	9e04      	ldr	r6, [sp, #16]
 802a208:	e9dd 1505 	ldrd	r1, r5, [sp, #20]
 802a20c:	e000      	b.n	802a210 <ATT_Build_Find_By_Type_Val_Rsp+0x180>
 802a20e:	4627      	mov	r7, r4
 802a210:	683c      	ldr	r4, [r7, #0]
 802a212:	e7d2      	b.n	802a1ba <ATT_Build_Find_By_Type_Val_Rsp+0x12a>
 802a214:	9805      	ldr	r0, [sp, #20]
 802a216:	8842      	ldrh	r2, [r0, #2]
 802a218:	f8bd 0022 	ldrh.w	r0, [sp, #34]	@ 0x22
 802a21c:	1a12      	subs	r2, r2, r0
 802a21e:	2a04      	cmp	r2, #4
 802a220:	d31d      	bcc.n	802a25e <ATT_Build_Find_By_Type_Val_Rsp+0x1ce>
 802a222:	f642 0003 	movw	r0, #10243	@ 0x2803
 802a226:	4281      	cmp	r1, r0
 802a228:	f642 0103 	movw	r1, #10243	@ 0x2803
 802a22c:	d108      	bne.n	802a240 <ATT_Build_Find_By_Type_Val_Rsp+0x1b0>
 802a22e:	9e04      	ldr	r6, [sp, #16]
 802a230:	4627      	mov	r7, r4
 802a232:	6824      	ldr	r4, [r4, #0]
 802a234:	4544      	cmp	r4, r8
 802a236:	bf1c      	itt	ne
 802a238:	8920      	ldrhne	r0, [r4, #8]
 802a23a:	4288      	cmpne	r0, r1
 802a23c:	d1f8      	bne.n	802a230 <ATT_Build_Find_By_Type_Val_Rsp+0x1a0>
 802a23e:	e001      	b.n	802a244 <ATT_Build_Find_By_Type_Val_Rsp+0x1b4>
 802a240:	4627      	mov	r7, r4
 802a242:	9e04      	ldr	r6, [sp, #16]
 802a244:	f107 031c 	add.w	r3, r7, #28
 802a248:	9800      	ldr	r0, [sp, #0]
 802a24a:	f10d 0122 	add.w	r1, sp, #34	@ 0x22
 802a24e:	4652      	mov	r2, sl
 802a250:	f000 f81f 	bl	802a292 <ATT_fill_type_val_entry>
 802a254:	e7d8      	b.n	802a208 <ATT_Build_Find_By_Type_Val_Rsp+0x178>
 802a256:	682d      	ldr	r5, [r5, #0]
 802a258:	e770      	b.n	802a13c <ATT_Build_Find_By_Type_Val_Rsp+0xac>
 802a25a:	f8bd 0022 	ldrh.w	r0, [sp, #34]	@ 0x22
 802a25e:	9f00      	ldr	r7, [sp, #0]
 802a260:	2802      	cmp	r0, #2
 802a262:	d302      	bcc.n	802a26a <ATT_Build_Find_By_Type_Val_Rsp+0x1da>
 802a264:	3004      	adds	r0, #4
 802a266:	80b8      	strh	r0, [r7, #4]
 802a268:	e744      	b.n	802a0f4 <ATT_Build_Find_By_Type_Val_Rsp+0x64>
 802a26a:	200a      	movs	r0, #10
 802a26c:	e73d      	b.n	802a0ea <ATT_Build_Find_By_Type_Val_Rsp+0x5a>
 802a26e:	bf00      	nop

0802a270 <__arm_cp.0_0>:
 802a270:	20009f5c 	.word	0x20009f5c

0802a274 <ATT_Build_Error_Rsp>:
 802a274:	b5b0      	push	{r4, r5, r7, lr}
 802a276:	6a1c      	ldr	r4, [r3, #32]
 802a278:	2501      	movs	r5, #1
 802a27a:	7125      	strb	r5, [r4, #4]
 802a27c:	6a1c      	ldr	r4, [r3, #32]
 802a27e:	7161      	strb	r1, [r4, #5]
 802a280:	0a11      	lsrs	r1, r2, #8
 802a282:	6a1c      	ldr	r4, [r3, #32]
 802a284:	71e1      	strb	r1, [r4, #7]
 802a286:	71a2      	strb	r2, [r4, #6]
 802a288:	6a19      	ldr	r1, [r3, #32]
 802a28a:	7208      	strb	r0, [r1, #8]
 802a28c:	2009      	movs	r0, #9
 802a28e:	8098      	strh	r0, [r3, #4]
 802a290:	bdb0      	pop	{r4, r5, r7, pc}

0802a292 <ATT_fill_type_val_entry>:
 802a292:	b570      	push	{r4, r5, r6, lr}
 802a294:	4606      	mov	r6, r0
 802a296:	8808      	ldrh	r0, [r1, #0]
 802a298:	461c      	mov	r4, r3
 802a29a:	4613      	mov	r3, r2
 802a29c:	460d      	mov	r5, r1
 802a29e:	2202      	movs	r2, #2
 802a2a0:	3004      	adds	r0, #4
 802a2a2:	b281      	uxth	r1, r0
 802a2a4:	4630      	mov	r0, r6
 802a2a6:	f001 fffc 	bl	802c2a2 <ACL_Set_Data>
 802a2aa:	8828      	ldrh	r0, [r5, #0]
 802a2ac:	2202      	movs	r2, #2
 802a2ae:	4623      	mov	r3, r4
 802a2b0:	1c81      	adds	r1, r0, #2
 802a2b2:	3006      	adds	r0, #6
 802a2b4:	8029      	strh	r1, [r5, #0]
 802a2b6:	b281      	uxth	r1, r0
 802a2b8:	4630      	mov	r0, r6
 802a2ba:	f001 fff2 	bl	802c2a2 <ACL_Set_Data>
 802a2be:	8828      	ldrh	r0, [r5, #0]
 802a2c0:	3002      	adds	r0, #2
 802a2c2:	8028      	strh	r0, [r5, #0]
 802a2c4:	bd70      	pop	{r4, r5, r6, pc}

0802a2c6 <ATT_Check_Perm>:
 802a2c6:	b5b0      	push	{r4, r5, r7, lr}
 802a2c8:	460c      	mov	r4, r1
 802a2ca:	f891 1027 	ldrb.w	r1, [r1, #39]	@ 0x27
 802a2ce:	8800      	ldrh	r0, [r0, #0]
 802a2d0:	4615      	mov	r5, r2
 802a2d2:	f002 ff37 	bl	802d144 <SMP_Get_Sec_Status>
 802a2d6:	2d01      	cmp	r5, #1
 802a2d8:	d11c      	bne.n	802a314 <ATT_Check_Perm+0x4e>
 802a2da:	f894 1025 	ldrb.w	r1, [r4, #37]	@ 0x25
 802a2de:	07ca      	lsls	r2, r1, #31
 802a2e0:	d004      	beq.n	802a2ec <ATT_Check_Perm+0x26>
 802a2e2:	f010 0f60 	tst.w	r0, #96	@ 0x60
 802a2e6:	d034      	beq.n	802a352 <ATT_Check_Perm+0x8c>
 802a2e8:	06c2      	lsls	r2, r0, #27
 802a2ea:	d532      	bpl.n	802a352 <ATT_Check_Perm+0x8c>
 802a2ec:	078a      	lsls	r2, r1, #30
 802a2ee:	bf44      	itt	mi
 802a2f0:	b242      	sxtbmi	r2, r0
 802a2f2:	2a00      	cmpmi	r2, #0
 802a2f4:	d43b      	bmi.n	802a36e <ATT_Check_Perm+0xa8>
 802a2f6:	f011 0104 	ands.w	r1, r1, #4
 802a2fa:	d002      	beq.n	802a302 <ATT_Check_Perm+0x3c>
 802a2fc:	f010 0210 	ands.w	r2, r0, #16
 802a300:	d01d      	beq.n	802a33e <ATT_Check_Perm+0x78>
 802a302:	b109      	cbz	r1, 802a308 <ATT_Check_Perm+0x42>
 802a304:	0700      	lsls	r0, r0, #28
 802a306:	d434      	bmi.n	802a372 <ATT_Check_Perm+0xac>
 802a308:	f894 0024 	ldrb.w	r0, [r4, #36]	@ 0x24
 802a30c:	2102      	movs	r1, #2
 802a30e:	ea21 0040 	bic.w	r0, r1, r0, lsl #1
 802a312:	bdb0      	pop	{r4, r5, r7, pc}
 802a314:	2d08      	cmp	r5, #8
 802a316:	d103      	bne.n	802a320 <ATT_Check_Perm+0x5a>
 802a318:	06c1      	lsls	r1, r0, #27
 802a31a:	bf44      	itt	mi
 802a31c:	2004      	movmi	r0, #4
 802a31e:	bdb0      	popmi	{r4, r5, r7, pc}
 802a320:	f894 1025 	ldrb.w	r1, [r4, #37]	@ 0x25
 802a324:	070a      	lsls	r2, r1, #28
 802a326:	d40c      	bmi.n	802a342 <ATT_Check_Perm+0x7c>
 802a328:	06ca      	lsls	r2, r1, #27
 802a32a:	bf44      	itt	mi
 802a32c:	b242      	sxtbmi	r2, r0
 802a32e:	2a00      	cmpmi	r2, #0
 802a330:	d41d      	bmi.n	802a36e <ATT_Check_Perm+0xa8>
 802a332:	f011 0120 	ands.w	r1, r1, #32
 802a336:	d00e      	beq.n	802a356 <ATT_Check_Perm+0x90>
 802a338:	f010 0210 	ands.w	r2, r0, #16
 802a33c:	d10b      	bne.n	802a356 <ATT_Check_Perm+0x90>
 802a33e:	200f      	movs	r0, #15
 802a340:	bdb0      	pop	{r4, r5, r7, pc}
 802a342:	f010 0f60 	tst.w	r0, #96	@ 0x60
 802a346:	d004      	beq.n	802a352 <ATT_Check_Perm+0x8c>
 802a348:	2d08      	cmp	r5, #8
 802a34a:	d0ed      	beq.n	802a328 <ATT_Check_Perm+0x62>
 802a34c:	f010 0210 	ands.w	r2, r0, #16
 802a350:	d1ea      	bne.n	802a328 <ATT_Check_Perm+0x62>
 802a352:	2005      	movs	r0, #5
 802a354:	bdb0      	pop	{r4, r5, r7, pc}
 802a356:	b109      	cbz	r1, 802a35c <ATT_Check_Perm+0x96>
 802a358:	0700      	lsls	r0, r0, #28
 802a35a:	d40a      	bmi.n	802a372 <ATT_Check_Perm+0xac>
 802a35c:	2d04      	cmp	r5, #4
 802a35e:	d00a      	beq.n	802a376 <ATT_Check_Perm+0xb0>
 802a360:	2d02      	cmp	r5, #2
 802a362:	d10d      	bne.n	802a380 <ATT_Check_Perm+0xba>
 802a364:	f894 0024 	ldrb.w	r0, [r4, #36]	@ 0x24
 802a368:	0780      	lsls	r0, r0, #30
 802a36a:	d50f      	bpl.n	802a38c <ATT_Check_Perm+0xc6>
 802a36c:	e010      	b.n	802a390 <ATT_Check_Perm+0xca>
 802a36e:	2008      	movs	r0, #8
 802a370:	bdb0      	pop	{r4, r5, r7, pc}
 802a372:	200c      	movs	r0, #12
 802a374:	bdb0      	pop	{r4, r5, r7, pc}
 802a376:	f894 0024 	ldrb.w	r0, [r4, #36]	@ 0x24
 802a37a:	0740      	lsls	r0, r0, #29
 802a37c:	d506      	bpl.n	802a38c <ATT_Check_Perm+0xc6>
 802a37e:	e007      	b.n	802a390 <ATT_Check_Perm+0xca>
 802a380:	2d08      	cmp	r5, #8
 802a382:	d105      	bne.n	802a390 <ATT_Check_Perm+0xca>
 802a384:	f894 0024 	ldrb.w	r0, [r4, #36]	@ 0x24
 802a388:	0700      	lsls	r0, r0, #28
 802a38a:	d401      	bmi.n	802a390 <ATT_Check_Perm+0xca>
 802a38c:	2003      	movs	r0, #3
 802a38e:	bdb0      	pop	{r4, r5, r7, pc}
 802a390:	2000      	movs	r0, #0
 802a392:	bdb0      	pop	{r4, r5, r7, pc}

0802a394 <ATT_Build_Read_By_Type_Rsp>:
 802a394:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a398:	b0d1      	sub	sp, #324	@ 0x144
 802a39a:	4605      	mov	r5, r0
 802a39c:	8888      	ldrh	r0, [r1, #4]
 802a39e:	4614      	mov	r4, r2
 802a3a0:	460f      	mov	r7, r1
 802a3a2:	280b      	cmp	r0, #11
 802a3a4:	bf18      	it	ne
 802a3a6:	2819      	cmpne	r0, #25
 802a3a8:	d126      	bne.n	802a3f8 <ATT_Build_Read_By_Type_Rsp+0x64>
 802a3aa:	6a38      	ldr	r0, [r7, #32]
 802a3ac:	7941      	ldrb	r1, [r0, #5]
 802a3ae:	7982      	ldrb	r2, [r0, #6]
 802a3b0:	79c3      	ldrb	r3, [r0, #7]
 802a3b2:	7a00      	ldrb	r0, [r0, #8]
 802a3b4:	ea43 2b00 	orr.w	fp, r3, r0, lsl #8
 802a3b8:	ea41 2002 	orr.w	r0, r1, r2, lsl #8
 802a3bc:	fa1f f980 	uxth.w	r9, r0
 802a3c0:	45cb      	cmp	fp, r9
 802a3c2:	d311      	bcc.n	802a3e8 <ATT_Build_Read_By_Type_Rsp+0x54>
 802a3c4:	0400      	lsls	r0, r0, #16
 802a3c6:	d00f      	beq.n	802a3e8 <ATT_Build_Read_By_Type_Rsp+0x54>
 802a3c8:	49a9      	ldr	r1, [pc, #676]	@ (802a670 <__arm_cp.4_0>)
 802a3ca:	a84d      	add	r0, sp, #308	@ 0x134
 802a3cc:	2210      	movs	r2, #16
 802a3ce:	f7fa f8bb 	bl	8024548 <ble_memcpy>
 802a3d2:	a949      	add	r1, sp, #292	@ 0x124
 802a3d4:	4638      	mov	r0, r7
 802a3d6:	f000 f94f 	bl	802a678 <ATT_Get_UUID128_From_Read_By_Type_Req>
 802a3da:	8869      	ldrh	r1, [r5, #2]
 802a3dc:	4620      	mov	r0, r4
 802a3de:	f001 fef9 	bl	802c1d4 <ACL_Resize>
 802a3e2:	b188      	cbz	r0, 802a408 <ATT_Build_Read_By_Type_Rsp+0x74>
 802a3e4:	2595      	movs	r5, #149	@ 0x95
 802a3e6:	e00b      	b.n	802a400 <ATT_Build_Read_By_Type_Rsp+0x6c>
 802a3e8:	2001      	movs	r0, #1
 802a3ea:	2108      	movs	r1, #8
 802a3ec:	464a      	mov	r2, r9
 802a3ee:	4623      	mov	r3, r4
 802a3f0:	f7ff ff40 	bl	802a274 <ATT_Build_Error_Rsp>
 802a3f4:	2500      	movs	r5, #0
 802a3f6:	e003      	b.n	802a400 <ATT_Build_Read_By_Type_Rsp+0x6c>
 802a3f8:	2004      	movs	r0, #4
 802a3fa:	2108      	movs	r1, #8
 802a3fc:	f000 ff84 	bl	802b308 <OUTLINED_FUNCTION_1>
 802a400:	4628      	mov	r0, r5
 802a402:	b051      	add	sp, #324	@ 0x144
 802a404:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802a408:	4648      	mov	r0, r9
 802a40a:	f7ff fe17 	bl	802a03c <GATT_Find_Srv_Owner_Of_Handle>
 802a40e:	2800      	cmp	r0, #0
 802a410:	f000 811c 	beq.w	802a64c <ATT_Build_Read_By_Type_Rsp+0x2b8>
 802a414:	4607      	mov	r7, r0
 802a416:	a84d      	add	r0, sp, #308	@ 0x134
 802a418:	f04f 0800 	mov.w	r8, #0
 802a41c:	9405      	str	r4, [sp, #20]
 802a41e:	9508      	str	r5, [sp, #32]
 802a420:	f8cd b008 	str.w	fp, [sp, #8]
 802a424:	300c      	adds	r0, #12
 802a426:	9006      	str	r0, [sp, #24]
 802a428:	2000      	movs	r0, #0
 802a42a:	9001      	str	r0, [sp, #4]
 802a42c:	2002      	movs	r0, #2
 802a42e:	9009      	str	r0, [sp, #36]	@ 0x24
 802a430:	4890      	ldr	r0, [pc, #576]	@ (802a674 <__arm_cp.4_1>)
 802a432:	f500 70f0 	add.w	r0, r0, #480	@ 0x1e0
 802a436:	9003      	str	r0, [sp, #12]
 802a438:	2000      	movs	r0, #0
 802a43a:	9004      	str	r0, [sp, #16]
 802a43c:	9803      	ldr	r0, [sp, #12]
 802a43e:	4287      	cmp	r7, r0
 802a440:	f000 80f4 	beq.w	802a62c <ATT_Build_Read_By_Type_Rsp+0x298>
 802a444:	9707      	str	r7, [sp, #28]
 802a446:	f837 0f28 	ldrh.w	r0, [r7, #40]!
 802a44a:	4558      	cmp	r0, fp
 802a44c:	f200 80ee 	bhi.w	802a62c <ATT_Build_Read_By_Type_Rsp+0x298>
 802a450:	9809      	ldr	r0, [sp, #36]	@ 0x24
 802a452:	8869      	ldrh	r1, [r5, #2]
 802a454:	fa5f f588 	uxtb.w	r5, r8
 802a458:	b280      	uxth	r0, r0
 802a45a:	1a08      	subs	r0, r1, r0
 802a45c:	42a8      	cmp	r0, r5
 802a45e:	f2c0 80e4 	blt.w	802a62a <ATT_Build_Read_By_Type_Rsp+0x296>
 802a462:	9e07      	ldr	r6, [sp, #28]
 802a464:	9806      	ldr	r0, [sp, #24]
 802a466:	2202      	movs	r2, #2
 802a468:	f106 012a 	add.w	r1, r6, #42	@ 0x2a
 802a46c:	f7fa f86c 	bl	8024548 <ble_memcpy>
 802a470:	a84d      	add	r0, sp, #308	@ 0x134
 802a472:	a949      	add	r1, sp, #292	@ 0x124
 802a474:	2210      	movs	r2, #16
 802a476:	f7fa f8ef 	bl	8024658 <ble_memcmp>
 802a47a:	2800      	cmp	r0, #0
 802a47c:	f000 8095 	beq.w	802a5aa <ATT_Build_Read_By_Type_Rsp+0x216>
 802a480:	4634      	mov	r4, r6
 802a482:	f854 7f20 	ldr.w	r7, [r4, #32]!
 802a486:	42bc      	cmp	r4, r7
 802a488:	f000 8099 	beq.w	802a5be <ATT_Build_Read_By_Type_Rsp+0x22a>
 802a48c:	9d08      	ldr	r5, [sp, #32]
 802a48e:	42a7      	cmp	r7, r4
 802a490:	f000 8096 	beq.w	802a5c0 <ATT_Build_Read_By_Type_Rsp+0x22c>
 802a494:	46ba      	mov	sl, r7
 802a496:	f83a 0f1c 	ldrh.w	r0, [sl, #28]!
 802a49a:	4548      	cmp	r0, r9
 802a49c:	f0c0 8083 	bcc.w	802a5a6 <ATT_Build_Read_By_Type_Rsp+0x212>
 802a4a0:	4558      	cmp	r0, fp
 802a4a2:	f200 80c3 	bhi.w	802a62c <ATT_Build_Read_By_Type_Rsp+0x298>
 802a4a6:	f897 0023 	ldrb.w	r0, [r7, #35]	@ 0x23
 802a4aa:	f107 0108 	add.w	r1, r7, #8
 802a4ae:	2801      	cmp	r0, #1
 802a4b0:	d104      	bne.n	802a4bc <ATT_Build_Read_By_Type_Rsp+0x128>
 802a4b2:	9806      	ldr	r0, [sp, #24]
 802a4b4:	2202      	movs	r2, #2
 802a4b6:	f7fa f847 	bl	8024548 <ble_memcpy>
 802a4ba:	a94d      	add	r1, sp, #308	@ 0x134
 802a4bc:	4608      	mov	r0, r1
 802a4be:	a949      	add	r1, sp, #292	@ 0x124
 802a4c0:	2210      	movs	r2, #16
 802a4c2:	f7fa f8c9 	bl	8024658 <ble_memcmp>
 802a4c6:	2800      	cmp	r0, #0
 802a4c8:	d16d      	bne.n	802a5a6 <ATT_Build_Read_By_Type_Rsp+0x212>
 802a4ca:	4628      	mov	r0, r5
 802a4cc:	4639      	mov	r1, r7
 802a4ce:	f000 ff25 	bl	802b31c <OUTLINED_FUNCTION_3>
 802a4d2:	ea5f 6108 	movs.w	r1, r8, lsl #24
 802a4d6:	d001      	beq.n	802a4dc <ATT_Build_Read_By_Type_Rsp+0x148>
 802a4d8:	8869      	ldrh	r1, [r5, #2]
 802a4da:	e012      	b.n	802a502 <ATT_Build_Read_By_Type_Rsp+0x16e>
 802a4dc:	2800      	cmp	r0, #0
 802a4de:	f040 80c1 	bne.w	802a664 <ATT_Build_Read_By_Type_Rsp+0x2d0>
 802a4e2:	8bfa      	ldrh	r2, [r7, #30]
 802a4e4:	f102 0802 	add.w	r8, r2, #2
 802a4e8:	4611      	mov	r1, r2
 802a4ea:	9204      	str	r2, [sp, #16]
 802a4ec:	2afd      	cmp	r2, #253	@ 0xfd
 802a4ee:	bf88      	it	hi
 802a4f0:	f04f 38ff 	movhi.w	r8, #4294967295	@ 0xffffffff
 802a4f4:	8869      	ldrh	r1, [r5, #2]
 802a4f6:	fa5f f288 	uxtb.w	r2, r8
 802a4fa:	1e8b      	subs	r3, r1, #2
 802a4fc:	4293      	cmp	r3, r2
 802a4fe:	bf38      	it	cc
 802a500:	4698      	movcc	r8, r3
 802a502:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802a504:	fa5f f588 	uxtb.w	r5, r8
 802a508:	b292      	uxth	r2, r2
 802a50a:	1a89      	subs	r1, r1, r2
 802a50c:	42a9      	cmp	r1, r5
 802a50e:	f2c0 808c 	blt.w	802a62a <ATT_Build_Read_By_Type_Rsp+0x296>
 802a512:	2800      	cmp	r0, #0
 802a514:	f040 8089 	bne.w	802a62a <ATT_Build_Read_By_Type_Rsp+0x296>
 802a518:	9804      	ldr	r0, [sp, #16]
 802a51a:	8bf9      	ldrh	r1, [r7, #30]
 802a51c:	b280      	uxth	r0, r0
 802a51e:	4281      	cmp	r1, r0
 802a520:	f040 8083 	bne.w	802a62a <ATT_Build_Read_By_Type_Rsp+0x296>
 802a524:	9808      	ldr	r0, [sp, #32]
 802a526:	7980      	ldrb	r0, [r0, #6]
 802a528:	0700      	lsls	r0, r0, #28
 802a52a:	d410      	bmi.n	802a54e <ATT_Build_Read_By_Type_Rsp+0x1ba>
 802a52c:	f897 0026 	ldrb.w	r0, [r7, #38]	@ 0x26
 802a530:	0740      	lsls	r0, r0, #29
 802a532:	d50c      	bpl.n	802a54e <ATT_Build_Read_By_Type_Rsp+0x1ba>
 802a534:	9a01      	ldr	r2, [sp, #4]
 802a536:	f8ba 0000 	ldrh.w	r0, [sl]
 802a53a:	f10d 032a 	add.w	r3, sp, #42	@ 0x2a
 802a53e:	b2d1      	uxtb	r1, r2
 802a540:	3201      	adds	r2, #1
 802a542:	f823 0011 	strh.w	r0, [r3, r1, lsl #1]
 802a546:	b2d0      	uxtb	r0, r2
 802a548:	9201      	str	r2, [sp, #4]
 802a54a:	287c      	cmp	r0, #124	@ 0x7c
 802a54c:	d86d      	bhi.n	802a62a <ATT_Build_Read_By_Type_Rsp+0x296>
 802a54e:	464e      	mov	r6, r9
 802a550:	f8dd 9024 	ldr.w	r9, [sp, #36]	@ 0x24
 802a554:	46c3      	mov	fp, r8
 802a556:	f8dd 8014 	ldr.w	r8, [sp, #20]
 802a55a:	2202      	movs	r2, #2
 802a55c:	4653      	mov	r3, sl
 802a55e:	f109 0004 	add.w	r0, r9, #4
 802a562:	b281      	uxth	r1, r0
 802a564:	4640      	mov	r0, r8
 802a566:	f001 fe9c 	bl	802c2a2 <ACL_Set_Data>
 802a56a:	46a2      	mov	sl, r4
 802a56c:	9c08      	ldr	r4, [sp, #32]
 802a56e:	4638      	mov	r0, r7
 802a570:	4621      	mov	r1, r4
 802a572:	f7fe fe87 	bl	8029284 <GATT_Attr_Val>
 802a576:	4603      	mov	r3, r0
 802a578:	f109 0006 	add.w	r0, r9, #6
 802a57c:	b281      	uxth	r1, r0
 802a57e:	1ea8      	subs	r0, r5, #2
 802a580:	b282      	uxth	r2, r0
 802a582:	4640      	mov	r0, r8
 802a584:	46d8      	mov	r8, fp
 802a586:	f001 fe8c 	bl	802c2a2 <ACL_Set_Data>
 802a58a:	44a9      	add	r9, r5
 802a58c:	8861      	ldrh	r1, [r4, #2]
 802a58e:	f8dd b008 	ldr.w	fp, [sp, #8]
 802a592:	fa1f f089 	uxth.w	r0, r9
 802a596:	f8cd 9024 	str.w	r9, [sp, #36]	@ 0x24
 802a59a:	46b1      	mov	r9, r6
 802a59c:	1a08      	subs	r0, r1, r0
 802a59e:	42a8      	cmp	r0, r5
 802a5a0:	4625      	mov	r5, r4
 802a5a2:	4654      	mov	r4, sl
 802a5a4:	db42      	blt.n	802a62c <ATT_Build_Read_By_Type_Rsp+0x298>
 802a5a6:	683f      	ldr	r7, [r7, #0]
 802a5a8:	e771      	b.n	802a48e <ATT_Build_Read_By_Type_Rsp+0xfa>
 802a5aa:	b165      	cbz	r5, 802a5c6 <ATT_Build_Read_By_Type_Rsp+0x232>
 802a5ac:	2d04      	cmp	r5, #4
 802a5ae:	d018      	beq.n	802a5e2 <ATT_Build_Read_By_Type_Rsp+0x24e>
 802a5b0:	2d12      	cmp	r5, #18
 802a5b2:	d13a      	bne.n	802a62a <ATT_Build_Read_By_Type_Rsp+0x296>
 802a5b4:	9807      	ldr	r0, [sp, #28]
 802a5b6:	9d08      	ldr	r5, [sp, #32]
 802a5b8:	f890 002c 	ldrb.w	r0, [r0, #44]	@ 0x2c
 802a5bc:	e00c      	b.n	802a5d8 <ATT_Build_Read_By_Type_Rsp+0x244>
 802a5be:	9d08      	ldr	r5, [sp, #32]
 802a5c0:	9c05      	ldr	r4, [sp, #20]
 802a5c2:	9f07      	ldr	r7, [sp, #28]
 802a5c4:	e02f      	b.n	802a626 <ATT_Build_Read_By_Type_Rsp+0x292>
 802a5c6:	9807      	ldr	r0, [sp, #28]
 802a5c8:	9d08      	ldr	r5, [sp, #32]
 802a5ca:	f890 002c 	ldrb.w	r0, [r0, #44]	@ 0x2c
 802a5ce:	2801      	cmp	r0, #1
 802a5d0:	d102      	bne.n	802a5d8 <ATT_Build_Read_By_Type_Rsp+0x244>
 802a5d2:	f04f 0804 	mov.w	r8, #4
 802a5d6:	e00c      	b.n	802a5f2 <ATT_Build_Read_By_Type_Rsp+0x25e>
 802a5d8:	f04f 0812 	mov.w	r8, #18
 802a5dc:	2802      	cmp	r0, #2
 802a5de:	d008      	beq.n	802a5f2 <ATT_Build_Read_By_Type_Rsp+0x25e>
 802a5e0:	e024      	b.n	802a62c <ATT_Build_Read_By_Type_Rsp+0x298>
 802a5e2:	9807      	ldr	r0, [sp, #28]
 802a5e4:	f04f 0804 	mov.w	r8, #4
 802a5e8:	9d08      	ldr	r5, [sp, #32]
 802a5ea:	f890 002c 	ldrb.w	r0, [r0, #44]	@ 0x2c
 802a5ee:	2801      	cmp	r0, #1
 802a5f0:	d11c      	bne.n	802a62c <ATT_Build_Read_By_Type_Rsp+0x298>
 802a5f2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 802a5f4:	46c2      	mov	sl, r8
 802a5f6:	2202      	movs	r2, #2
 802a5f8:	463b      	mov	r3, r7
 802a5fa:	4680      	mov	r8, r0
 802a5fc:	3004      	adds	r0, #4
 802a5fe:	b281      	uxth	r1, r0
 802a600:	4620      	mov	r0, r4
 802a602:	f001 fe4e 	bl	802c2a2 <ACL_Set_Data>
 802a606:	f108 0006 	add.w	r0, r8, #6
 802a60a:	9f07      	ldr	r7, [sp, #28]
 802a60c:	b281      	uxth	r1, r0
 802a60e:	f1aa 0002 	sub.w	r0, sl, #2
 802a612:	f107 0308 	add.w	r3, r7, #8
 802a616:	b282      	uxth	r2, r0
 802a618:	4620      	mov	r0, r4
 802a61a:	f001 fe42 	bl	802c2a2 <ACL_Set_Data>
 802a61e:	44d0      	add	r8, sl
 802a620:	f8cd 8024 	str.w	r8, [sp, #36]	@ 0x24
 802a624:	46d0      	mov	r8, sl
 802a626:	683f      	ldr	r7, [r7, #0]
 802a628:	e708      	b.n	802a43c <ATT_Build_Read_By_Type_Rsp+0xa8>
 802a62a:	9d08      	ldr	r5, [sp, #32]
 802a62c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 802a62e:	9c05      	ldr	r4, [sp, #20]
 802a630:	b280      	uxth	r0, r0
 802a632:	2803      	cmp	r0, #3
 802a634:	d30a      	bcc.n	802a64c <ATT_Build_Read_By_Type_Rsp+0x2b8>
 802a636:	9901      	ldr	r1, [sp, #4]
 802a638:	0608      	lsls	r0, r1, #24
 802a63a:	d009      	beq.n	802a650 <ATT_Build_Read_By_Type_Rsp+0x2bc>
 802a63c:	b2c9      	uxtb	r1, r1
 802a63e:	f10d 022a 	add.w	r2, sp, #42	@ 0x2a
 802a642:	4628      	mov	r0, r5
 802a644:	f000 f836 	bl	802a6b4 <GATT_Read_Multi_Permit_Req_Event>
 802a648:	2569      	movs	r5, #105	@ 0x69
 802a64a:	e6d9      	b.n	802a400 <ATT_Build_Read_By_Type_Rsp+0x6c>
 802a64c:	200a      	movs	r0, #10
 802a64e:	e6cc      	b.n	802a3ea <ATT_Build_Read_By_Type_Rsp+0x56>
 802a650:	6a20      	ldr	r0, [r4, #32]
 802a652:	2109      	movs	r1, #9
 802a654:	7101      	strb	r1, [r0, #4]
 802a656:	6a20      	ldr	r0, [r4, #32]
 802a658:	f880 8005 	strb.w	r8, [r0, #5]
 802a65c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 802a65e:	3004      	adds	r0, #4
 802a660:	80a0      	strh	r0, [r4, #4]
 802a662:	e6c7      	b.n	802a3f4 <ATT_Build_Read_By_Type_Rsp+0x60>
 802a664:	f8ba 2000 	ldrh.w	r2, [sl]
 802a668:	2108      	movs	r1, #8
 802a66a:	9b05      	ldr	r3, [sp, #20]
 802a66c:	e6c0      	b.n	802a3f0 <ATT_Build_Read_By_Type_Rsp+0x5c>
 802a66e:	bf00      	nop

0802a670 <__arm_cp.4_0>:
 802a670:	08031ea8 	.word	0x08031ea8

0802a674 <__arm_cp.4_1>:
 802a674:	20009f5c 	.word	0x20009f5c

0802a678 <ATT_Get_UUID128_From_Read_By_Type_Req>:
 802a678:	b5b0      	push	{r4, r5, r7, lr}
 802a67a:	4605      	mov	r5, r0
 802a67c:	8880      	ldrh	r0, [r0, #4]
 802a67e:	460c      	mov	r4, r1
 802a680:	280b      	cmp	r0, #11
 802a682:	d10d      	bne.n	802a6a0 <ATT_Get_UUID128_From_Read_By_Type_Req+0x28>
 802a684:	490a      	ldr	r1, [pc, #40]	@ (802a6b0 <__arm_cp.5_0>)
 802a686:	4620      	mov	r0, r4
 802a688:	2210      	movs	r2, #16
 802a68a:	f7f9 ff5d 	bl	8024548 <ble_memcpy>
 802a68e:	f104 030c 	add.w	r3, r4, #12
 802a692:	4628      	mov	r0, r5
 802a694:	2109      	movs	r1, #9
 802a696:	2202      	movs	r2, #2
 802a698:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 802a69c:	f001 bde1 	b.w	802c262 <ACL_Get_Data>
 802a6a0:	4628      	mov	r0, r5
 802a6a2:	2109      	movs	r1, #9
 802a6a4:	2210      	movs	r2, #16
 802a6a6:	4623      	mov	r3, r4
 802a6a8:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 802a6ac:	f001 bdd9 	b.w	802c262 <ACL_Get_Data>

0802a6b0 <__arm_cp.5_0>:
 802a6b0:	08031ea8 	.word	0x08031ea8

0802a6b4 <GATT_Read_Multi_Permit_Req_Event>:
 802a6b4:	b5b0      	push	{r4, r5, r7, lr}
 802a6b6:	f000 fe1f 	bl	802b2f8 <OUTLINED_FUNCTION_0>
 802a6ba:	4601      	mov	r1, r0
 802a6bc:	0068      	lsls	r0, r5, #1
 802a6be:	4623      	mov	r3, r4
 802a6c0:	b2c2      	uxtb	r2, r0
 802a6c2:	2001      	movs	r0, #1
 802a6c4:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 802a6c8:	f7fc beb7 	b.w	802743a <EVT_aci_gatt_read_multi_permit_req>

0802a6cc <ATT_Build_Read_Rsp>:
 802a6cc:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
 802a6d0:	4606      	mov	r6, r0
 802a6d2:	8888      	ldrh	r0, [r1, #4]
 802a6d4:	4614      	mov	r4, r2
 802a6d6:	2807      	cmp	r0, #7
 802a6d8:	d121      	bne.n	802a71e <ATT_Build_Read_Rsp+0x52>
 802a6da:	6a08      	ldr	r0, [r1, #32]
 802a6dc:	f000 fe19 	bl	802b312 <OUTLINED_FUNCTION_2>
 802a6e0:	b285      	uxth	r5, r0
 802a6e2:	4628      	mov	r0, r5
 802a6e4:	f7ff fcaa 	bl	802a03c <GATT_Find_Srv_Owner_Of_Handle>
 802a6e8:	b318      	cbz	r0, 802a732 <ATT_Build_Read_Rsp+0x66>
 802a6ea:	4601      	mov	r1, r0
 802a6ec:	8d00      	ldrh	r0, [r0, #40]	@ 0x28
 802a6ee:	42a8      	cmp	r0, r5
 802a6f0:	d11a      	bne.n	802a728 <ATT_Build_Read_Rsp+0x5c>
 802a6f2:	6a20      	ldr	r0, [r4, #32]
 802a6f4:	220b      	movs	r2, #11
 802a6f6:	f101 0308 	add.w	r3, r1, #8
 802a6fa:	7102      	strb	r2, [r0, #4]
 802a6fc:	2210      	movs	r2, #16
 802a6fe:	4620      	mov	r0, r4
 802a700:	f891 502c 	ldrb.w	r5, [r1, #44]	@ 0x2c
 802a704:	2d01      	cmp	r5, #1
 802a706:	bf08      	it	eq
 802a708:	2202      	moveq	r2, #2
 802a70a:	2105      	movs	r1, #5
 802a70c:	f001 fdc9 	bl	802c2a2 <ACL_Set_Data>
 802a710:	2011      	movs	r0, #17
 802a712:	2d01      	cmp	r5, #1
 802a714:	bf08      	it	eq
 802a716:	2003      	moveq	r0, #3
 802a718:	3004      	adds	r0, #4
 802a71a:	80a0      	strh	r0, [r4, #4]
 802a71c:	e00e      	b.n	802a73c <ATT_Build_Read_Rsp+0x70>
 802a71e:	2004      	movs	r0, #4
 802a720:	210a      	movs	r1, #10
 802a722:	f000 fdf1 	bl	802b308 <OUTLINED_FUNCTION_1>
 802a726:	e00a      	b.n	802a73e <ATT_Build_Read_Rsp+0x72>
 802a728:	aa01      	add	r2, sp, #4
 802a72a:	4628      	mov	r0, r5
 802a72c:	f7ff fa41 	bl	8029bb2 <GATT_Search_Handle>
 802a730:	b140      	cbz	r0, 802a744 <ATT_Build_Read_Rsp+0x78>
 802a732:	2001      	movs	r0, #1
 802a734:	210a      	movs	r1, #10
 802a736:	462a      	mov	r2, r5
 802a738:	f000 fdf3 	bl	802b322 <OUTLINED_FUNCTION_4>
 802a73c:	2500      	movs	r5, #0
 802a73e:	4628      	mov	r0, r5
 802a740:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
 802a744:	9901      	ldr	r1, [sp, #4]
 802a746:	4630      	mov	r0, r6
 802a748:	f000 fde8 	bl	802b31c <OUTLINED_FUNCTION_3>
 802a74c:	2800      	cmp	r0, #0
 802a74e:	d1f1      	bne.n	802a734 <ATT_Build_Read_Rsp+0x68>
 802a750:	9901      	ldr	r1, [sp, #4]
 802a752:	f891 0026 	ldrb.w	r0, [r1, #38]	@ 0x26
 802a756:	0740      	lsls	r0, r0, #29
 802a758:	d508      	bpl.n	802a76c <ATT_Build_Read_Rsp+0xa0>
 802a75a:	79b0      	ldrb	r0, [r6, #6]
 802a75c:	0700      	lsls	r0, r0, #28
 802a75e:	d405      	bmi.n	802a76c <ATT_Build_Read_Rsp+0xa0>
 802a760:	4630      	mov	r0, r6
 802a762:	2200      	movs	r2, #0
 802a764:	f000 f824 	bl	802a7b0 <GATT_Read_Permit_Req_Event>
 802a768:	2569      	movs	r5, #105	@ 0x69
 802a76a:	e7e8      	b.n	802a73e <ATT_Build_Read_Rsp+0x72>
 802a76c:	8871      	ldrh	r1, [r6, #2]
 802a76e:	4620      	mov	r0, r4
 802a770:	f001 fd30 	bl	802c1d4 <ACL_Resize>
 802a774:	b108      	cbz	r0, 802a77a <ATT_Build_Read_Rsp+0xae>
 802a776:	2595      	movs	r5, #149	@ 0x95
 802a778:	e7e1      	b.n	802a73e <ATT_Build_Read_Rsp+0x72>
 802a77a:	6a20      	ldr	r0, [r4, #32]
 802a77c:	210b      	movs	r1, #11
 802a77e:	7101      	strb	r1, [r0, #4]
 802a780:	9801      	ldr	r0, [sp, #4]
 802a782:	4631      	mov	r1, r6
 802a784:	f8b6 8002 	ldrh.w	r8, [r6, #2]
 802a788:	8bc7      	ldrh	r7, [r0, #30]
 802a78a:	f7fe fd7b 	bl	8029284 <GATT_Attr_Val>
 802a78e:	4603      	mov	r3, r0
 802a790:	f1a8 0001 	sub.w	r0, r8, #1
 802a794:	b280      	uxth	r0, r0
 802a796:	42b8      	cmp	r0, r7
 802a798:	bf38      	it	cc
 802a79a:	4607      	movcc	r7, r0
 802a79c:	4620      	mov	r0, r4
 802a79e:	463a      	mov	r2, r7
 802a7a0:	2105      	movs	r1, #5
 802a7a2:	f001 fd7e 	bl	802c2a2 <ACL_Set_Data>
 802a7a6:	1c78      	adds	r0, r7, #1
 802a7a8:	b281      	uxth	r1, r0
 802a7aa:	4281      	cmp	r1, r0
 802a7ac:	d0b4      	beq.n	802a718 <ATT_Build_Read_Rsp+0x4c>
 802a7ae:	e7c0      	b.n	802a732 <ATT_Build_Read_Rsp+0x66>

0802a7b0 <GATT_Read_Permit_Req_Event>:
 802a7b0:	b5b0      	push	{r4, r5, r7, lr}
 802a7b2:	f000 fda1 	bl	802b2f8 <OUTLINED_FUNCTION_0>
 802a7b6:	4601      	mov	r1, r0
 802a7b8:	8baa      	ldrh	r2, [r5, #28]
 802a7ba:	2001      	movs	r0, #1
 802a7bc:	4623      	mov	r3, r4
 802a7be:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 802a7c2:	f7fc be35 	b.w	8027430 <EVT_aci_gatt_read_permit_req>

0802a7c6 <ATT_Build_Read_Blob_Rsp>:
 802a7c6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802a7ca:	4606      	mov	r6, r0
 802a7cc:	8888      	ldrh	r0, [r1, #4]
 802a7ce:	4614      	mov	r4, r2
 802a7d0:	2809      	cmp	r0, #9
 802a7d2:	d112      	bne.n	802a7fa <ATT_Build_Read_Blob_Rsp+0x34>
 802a7d4:	6a08      	ldr	r0, [r1, #32]
 802a7d6:	7941      	ldrb	r1, [r0, #5]
 802a7d8:	7982      	ldrb	r2, [r0, #6]
 802a7da:	f890 8007 	ldrb.w	r8, [r0, #7]
 802a7de:	7a07      	ldrb	r7, [r0, #8]
 802a7e0:	ea41 2002 	orr.w	r0, r1, r2, lsl #8
 802a7e4:	b285      	uxth	r5, r0
 802a7e6:	4628      	mov	r0, r5
 802a7e8:	f7ff fc28 	bl	802a03c <GATT_Find_Srv_Owner_Of_Handle>
 802a7ec:	b178      	cbz	r0, 802a80e <ATT_Build_Read_Blob_Rsp+0x48>
 802a7ee:	4601      	mov	r1, r0
 802a7f0:	8d00      	ldrh	r0, [r0, #40]	@ 0x28
 802a7f2:	42a8      	cmp	r0, r5
 802a7f4:	d106      	bne.n	802a804 <ATT_Build_Read_Blob_Rsp+0x3e>
 802a7f6:	200b      	movs	r0, #11
 802a7f8:	e00a      	b.n	802a810 <ATT_Build_Read_Blob_Rsp+0x4a>
 802a7fa:	2004      	movs	r0, #4
 802a7fc:	210c      	movs	r1, #12
 802a7fe:	f000 fd83 	bl	802b308 <OUTLINED_FUNCTION_1>
 802a802:	e00a      	b.n	802a81a <ATT_Build_Read_Blob_Rsp+0x54>
 802a804:	466a      	mov	r2, sp
 802a806:	4628      	mov	r0, r5
 802a808:	f7ff f9d3 	bl	8029bb2 <GATT_Search_Handle>
 802a80c:	b140      	cbz	r0, 802a820 <ATT_Build_Read_Blob_Rsp+0x5a>
 802a80e:	2001      	movs	r0, #1
 802a810:	210c      	movs	r1, #12
 802a812:	462a      	mov	r2, r5
 802a814:	f000 fd85 	bl	802b322 <OUTLINED_FUNCTION_4>
 802a818:	2500      	movs	r5, #0
 802a81a:	4628      	mov	r0, r5
 802a81c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802a820:	9900      	ldr	r1, [sp, #0]
 802a822:	4630      	mov	r0, r6
 802a824:	f000 fd7a 	bl	802b31c <OUTLINED_FUNCTION_3>
 802a828:	2800      	cmp	r0, #0
 802a82a:	d1f1      	bne.n	802a810 <ATT_Build_Read_Blob_Rsp+0x4a>
 802a82c:	9900      	ldr	r1, [sp, #0]
 802a82e:	8872      	ldrh	r2, [r6, #2]
 802a830:	8bc8      	ldrh	r0, [r1, #30]
 802a832:	1ed3      	subs	r3, r2, #3
 802a834:	4283      	cmp	r3, r0
 802a836:	d2de      	bcs.n	802a7f6 <ATT_Build_Read_Blob_Rsp+0x30>
 802a838:	ea48 2707 	orr.w	r7, r8, r7, lsl #8
 802a83c:	fa1f f887 	uxth.w	r8, r7
 802a840:	4580      	cmp	r8, r0
 802a842:	d901      	bls.n	802a848 <ATT_Build_Read_Blob_Rsp+0x82>
 802a844:	2007      	movs	r0, #7
 802a846:	e7e3      	b.n	802a810 <ATT_Build_Read_Blob_Rsp+0x4a>
 802a848:	f891 0026 	ldrb.w	r0, [r1, #38]	@ 0x26
 802a84c:	0740      	lsls	r0, r0, #29
 802a84e:	d508      	bpl.n	802a862 <ATT_Build_Read_Blob_Rsp+0x9c>
 802a850:	79b0      	ldrb	r0, [r6, #6]
 802a852:	0700      	lsls	r0, r0, #28
 802a854:	d405      	bmi.n	802a862 <ATT_Build_Read_Blob_Rsp+0x9c>
 802a856:	4630      	mov	r0, r6
 802a858:	4642      	mov	r2, r8
 802a85a:	f7ff ffa9 	bl	802a7b0 <GATT_Read_Permit_Req_Event>
 802a85e:	2569      	movs	r5, #105	@ 0x69
 802a860:	e7db      	b.n	802a81a <ATT_Build_Read_Blob_Rsp+0x54>
 802a862:	4620      	mov	r0, r4
 802a864:	4611      	mov	r1, r2
 802a866:	f001 fcb5 	bl	802c1d4 <ACL_Resize>
 802a86a:	b108      	cbz	r0, 802a870 <ATT_Build_Read_Blob_Rsp+0xaa>
 802a86c:	2595      	movs	r5, #149	@ 0x95
 802a86e:	e7d4      	b.n	802a81a <ATT_Build_Read_Blob_Rsp+0x54>
 802a870:	6a20      	ldr	r0, [r4, #32]
 802a872:	210d      	movs	r1, #13
 802a874:	7101      	strb	r1, [r0, #4]
 802a876:	9800      	ldr	r0, [sp, #0]
 802a878:	8bc1      	ldrh	r1, [r0, #30]
 802a87a:	f8b6 9002 	ldrh.w	r9, [r6, #2]
 802a87e:	1bc9      	subs	r1, r1, r7
 802a880:	b28f      	uxth	r7, r1
 802a882:	4631      	mov	r1, r6
 802a884:	f7fe fcfe 	bl	8029284 <GATT_Attr_Val>
 802a888:	f1a9 0101 	sub.w	r1, r9, #1
 802a88c:	eb00 0308 	add.w	r3, r0, r8
 802a890:	4620      	mov	r0, r4
 802a892:	b28e      	uxth	r6, r1
 802a894:	42b7      	cmp	r7, r6
 802a896:	bf38      	it	cc
 802a898:	463e      	movcc	r6, r7
 802a89a:	4632      	mov	r2, r6
 802a89c:	2105      	movs	r1, #5
 802a89e:	f001 fd00 	bl	802c2a2 <ACL_Set_Data>
 802a8a2:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 802a8a6:	4286      	cmp	r6, r0
 802a8a8:	d0b1      	beq.n	802a80e <ATT_Build_Read_Blob_Rsp+0x48>
 802a8aa:	1d70      	adds	r0, r6, #5
 802a8ac:	80a0      	strh	r0, [r4, #4]
 802a8ae:	e7b3      	b.n	802a818 <ATT_Build_Read_Blob_Rsp+0x52>

0802a8b0 <ATT_Build_Read_Multi_Rsp>:
 802a8b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a8b4:	b0c3      	sub	sp, #268	@ 0x10c
 802a8b6:	4605      	mov	r5, r0
 802a8b8:	8888      	ldrh	r0, [r1, #4]
 802a8ba:	4693      	mov	fp, r2
 802a8bc:	3805      	subs	r0, #5
 802a8be:	2804      	cmp	r0, #4
 802a8c0:	d30a      	bcc.n	802a8d8 <ATT_Build_Read_Multi_Rsp+0x28>
 802a8c2:	f010 0001 	ands.w	r0, r0, #1
 802a8c6:	d107      	bne.n	802a8d8 <ATT_Build_Read_Multi_Rsp+0x28>
 802a8c8:	460e      	mov	r6, r1
 802a8ca:	8869      	ldrh	r1, [r5, #2]
 802a8cc:	4658      	mov	r0, fp
 802a8ce:	f001 fc81 	bl	802c1d4 <ACL_Resize>
 802a8d2:	b130      	cbz	r0, 802a8e2 <ATT_Build_Read_Multi_Rsp+0x32>
 802a8d4:	2595      	movs	r5, #149	@ 0x95
 802a8d6:	e082      	b.n	802a9de <ATT_Build_Read_Multi_Rsp+0x12e>
 802a8d8:	2004      	movs	r0, #4
 802a8da:	210e      	movs	r1, #14
 802a8dc:	f000 fd29 	bl	802b332 <OUTLINED_FUNCTION_6>
 802a8e0:	e07d      	b.n	802a9de <ATT_Build_Read_Multi_Rsp+0x12e>
 802a8e2:	88b0      	ldrh	r0, [r6, #4]
 802a8e4:	f50d 7985 	add.w	r9, sp, #266	@ 0x10a
 802a8e8:	2401      	movs	r4, #1
 802a8ea:	3805      	subs	r0, #5
 802a8ec:	fa1f f880 	uxth.w	r8, r0
 802a8f0:	2000      	movs	r0, #0
 802a8f2:	9001      	str	r0, [sp, #4]
 802a8f4:	2001      	movs	r0, #1
 802a8f6:	fa1f fa80 	uxth.w	sl, r0
 802a8fa:	45c2      	cmp	sl, r8
 802a8fc:	d25a      	bcs.n	802a9b4 <ATT_Build_Read_Multi_Rsp+0x104>
 802a8fe:	3004      	adds	r0, #4
 802a900:	2202      	movs	r2, #2
 802a902:	464b      	mov	r3, r9
 802a904:	b281      	uxth	r1, r0
 802a906:	4630      	mov	r0, r6
 802a908:	f001 fcab 	bl	802c262 <ACL_Get_Data>
 802a90c:	f8bd 010a 	ldrh.w	r0, [sp, #266]	@ 0x10a
 802a910:	f7ff fb94 	bl	802a03c <GATT_Find_Srv_Owner_Of_Handle>
 802a914:	2800      	cmp	r0, #0
 802a916:	d049      	beq.n	802a9ac <ATT_Build_Read_Multi_Rsp+0xfc>
 802a918:	4601      	mov	r1, r0
 802a91a:	8d02      	ldrh	r2, [r0, #40]	@ 0x28
 802a91c:	f8bd 010a 	ldrh.w	r0, [sp, #266]	@ 0x10a
 802a920:	4282      	cmp	r2, r0
 802a922:	d10c      	bne.n	802a93e <ATT_Build_Read_Multi_Rsp+0x8e>
 802a924:	8868      	ldrh	r0, [r5, #2]
 802a926:	b2a2      	uxth	r2, r4
 802a928:	4290      	cmp	r0, r2
 802a92a:	d93c      	bls.n	802a9a6 <ATT_Build_Read_Multi_Rsp+0xf6>
 802a92c:	f891 202c 	ldrb.w	r2, [r1, #44]	@ 0x2c
 802a930:	2710      	movs	r7, #16
 802a932:	f101 0308 	add.w	r3, r1, #8
 802a936:	2a01      	cmp	r2, #1
 802a938:	bf08      	it	eq
 802a93a:	2702      	moveq	r7, #2
 802a93c:	e027      	b.n	802a98e <ATT_Build_Read_Multi_Rsp+0xde>
 802a93e:	aa41      	add	r2, sp, #260	@ 0x104
 802a940:	f7ff f937 	bl	8029bb2 <GATT_Search_Handle>
 802a944:	bb90      	cbnz	r0, 802a9ac <ATT_Build_Read_Multi_Rsp+0xfc>
 802a946:	9941      	ldr	r1, [sp, #260]	@ 0x104
 802a948:	4628      	mov	r0, r5
 802a94a:	f000 fce7 	bl	802b31c <OUTLINED_FUNCTION_3>
 802a94e:	2800      	cmp	r0, #0
 802a950:	d13e      	bne.n	802a9d0 <ATT_Build_Read_Multi_Rsp+0x120>
 802a952:	b2a0      	uxth	r0, r4
 802a954:	8869      	ldrh	r1, [r5, #2]
 802a956:	4281      	cmp	r1, r0
 802a958:	d925      	bls.n	802a9a6 <ATT_Build_Read_Multi_Rsp+0xf6>
 802a95a:	79a8      	ldrb	r0, [r5, #6]
 802a95c:	0700      	lsls	r0, r0, #28
 802a95e:	9841      	ldr	r0, [sp, #260]	@ 0x104
 802a960:	d40f      	bmi.n	802a982 <ATT_Build_Read_Multi_Rsp+0xd2>
 802a962:	f890 1026 	ldrb.w	r1, [r0, #38]	@ 0x26
 802a966:	0749      	lsls	r1, r1, #29
 802a968:	d50b      	bpl.n	802a982 <ATT_Build_Read_Multi_Rsp+0xd2>
 802a96a:	9b01      	ldr	r3, [sp, #4]
 802a96c:	8b81      	ldrh	r1, [r0, #28]
 802a96e:	f10d 070a 	add.w	r7, sp, #10
 802a972:	b2da      	uxtb	r2, r3
 802a974:	3301      	adds	r3, #1
 802a976:	f827 1012 	strh.w	r1, [r7, r2, lsl #1]
 802a97a:	b2d9      	uxtb	r1, r3
 802a97c:	9301      	str	r3, [sp, #4]
 802a97e:	297c      	cmp	r1, #124	@ 0x7c
 802a980:	d818      	bhi.n	802a9b4 <ATT_Build_Read_Multi_Rsp+0x104>
 802a982:	4629      	mov	r1, r5
 802a984:	8bc7      	ldrh	r7, [r0, #30]
 802a986:	f7fe fc7d 	bl	8029284 <GATT_Attr_Val>
 802a98a:	4603      	mov	r3, r0
 802a98c:	8868      	ldrh	r0, [r5, #2]
 802a98e:	1b00      	subs	r0, r0, r4
 802a990:	b280      	uxth	r0, r0
 802a992:	42b8      	cmp	r0, r7
 802a994:	bf38      	it	cc
 802a996:	4607      	movcc	r7, r0
 802a998:	463a      	mov	r2, r7
 802a99a:	1d20      	adds	r0, r4, #4
 802a99c:	b281      	uxth	r1, r0
 802a99e:	4658      	mov	r0, fp
 802a9a0:	f001 fc7f 	bl	802c2a2 <ACL_Set_Data>
 802a9a4:	443c      	add	r4, r7
 802a9a6:	f10a 0002 	add.w	r0, sl, #2
 802a9aa:	e7a4      	b.n	802a8f6 <ATT_Build_Read_Multi_Rsp+0x46>
 802a9ac:	f8bd 210a 	ldrh.w	r2, [sp, #266]	@ 0x10a
 802a9b0:	2001      	movs	r0, #1
 802a9b2:	e00f      	b.n	802a9d4 <ATT_Build_Read_Multi_Rsp+0x124>
 802a9b4:	b2a0      	uxth	r0, r4
 802a9b6:	2802      	cmp	r0, #2
 802a9b8:	d310      	bcc.n	802a9dc <ATT_Build_Read_Multi_Rsp+0x12c>
 802a9ba:	9901      	ldr	r1, [sp, #4]
 802a9bc:	0608      	lsls	r0, r1, #24
 802a9be:	d012      	beq.n	802a9e6 <ATT_Build_Read_Multi_Rsp+0x136>
 802a9c0:	b2c9      	uxtb	r1, r1
 802a9c2:	f10d 020a 	add.w	r2, sp, #10
 802a9c6:	4628      	mov	r0, r5
 802a9c8:	f7ff fe74 	bl	802a6b4 <GATT_Read_Multi_Permit_Req_Event>
 802a9cc:	2569      	movs	r5, #105	@ 0x69
 802a9ce:	e006      	b.n	802a9de <ATT_Build_Read_Multi_Rsp+0x12e>
 802a9d0:	f8bd 210a 	ldrh.w	r2, [sp, #266]	@ 0x10a
 802a9d4:	210e      	movs	r1, #14
 802a9d6:	465b      	mov	r3, fp
 802a9d8:	f7ff fc4c 	bl	802a274 <ATT_Build_Error_Rsp>
 802a9dc:	2500      	movs	r5, #0
 802a9de:	4628      	mov	r0, r5
 802a9e0:	b043      	add	sp, #268	@ 0x10c
 802a9e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802a9e6:	f8db 0020 	ldr.w	r0, [fp, #32]
 802a9ea:	210f      	movs	r1, #15
 802a9ec:	7101      	strb	r1, [r0, #4]
 802a9ee:	1d20      	adds	r0, r4, #4
 802a9f0:	f8ab 0004 	strh.w	r0, [fp, #4]
 802a9f4:	e7f2      	b.n	802a9dc <ATT_Build_Read_Multi_Rsp+0x12c>
	...

0802a9f8 <ATT_Build_Read_By_Grp_Type_Rsp>:
 802a9f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a9fc:	b089      	sub	sp, #36	@ 0x24
 802a9fe:	4680      	mov	r8, r0
 802aa00:	8888      	ldrh	r0, [r1, #4]
 802aa02:	4692      	mov	sl, r2
 802aa04:	280b      	cmp	r0, #11
 802aa06:	bf18      	it	ne
 802aa08:	2819      	cmpne	r0, #25
 802aa0a:	d13f      	bne.n	802aa8c <ATT_Build_Read_By_Grp_Type_Rsp+0x94>
 802aa0c:	6a08      	ldr	r0, [r1, #32]
 802aa0e:	7942      	ldrb	r2, [r0, #5]
 802aa10:	7983      	ldrb	r3, [r0, #6]
 802aa12:	79c4      	ldrb	r4, [r0, #7]
 802aa14:	7a00      	ldrb	r0, [r0, #8]
 802aa16:	ea44 2900 	orr.w	r9, r4, r0, lsl #8
 802aa1a:	ea42 2003 	orr.w	r0, r2, r3, lsl #8
 802aa1e:	b285      	uxth	r5, r0
 802aa20:	45a9      	cmp	r9, r5
 802aa22:	d32b      	bcc.n	802aa7c <ATT_Build_Read_By_Grp_Type_Rsp+0x84>
 802aa24:	0400      	lsls	r0, r0, #16
 802aa26:	d029      	beq.n	802aa7c <ATT_Build_Read_By_Grp_Type_Rsp+0x84>
 802aa28:	f10d 0712 	add.w	r7, sp, #18
 802aa2c:	4608      	mov	r0, r1
 802aa2e:	4639      	mov	r1, r7
 802aa30:	f7ff fe22 	bl	802a678 <ATT_Get_UUID128_From_Read_By_Type_Req>
 802aa34:	f107 010c 	add.w	r1, r7, #12
 802aa38:	f10d 0022 	add.w	r0, sp, #34	@ 0x22
 802aa3c:	2202      	movs	r2, #2
 802aa3e:	f7f9 fd83 	bl	8024548 <ble_memcpy>
 802aa42:	f8bd 0022 	ldrh.w	r0, [sp, #34]	@ 0x22
 802aa46:	f020 0001 	bic.w	r0, r0, #1
 802aa4a:	f5b0 5f20 	cmp.w	r0, #10240	@ 0x2800
 802aa4e:	d128      	bne.n	802aaa2 <ATT_Build_Read_By_Grp_Type_Rsp+0xaa>
 802aa50:	4856      	ldr	r0, [pc, #344]	@ (802abac <__arm_cp.11_0>)
 802aa52:	f500 76f0 	add.w	r6, r0, #480	@ 0x1e0
 802aa56:	4637      	mov	r7, r6
 802aa58:	683f      	ldr	r7, [r7, #0]
 802aa5a:	42b7      	cmp	r7, r6
 802aa5c:	f000 80a4 	beq.w	802aba8 <ATT_Build_Read_By_Grp_Type_Rsp+0x1b0>
 802aa60:	8d38      	ldrh	r0, [r7, #40]	@ 0x28
 802aa62:	42a8      	cmp	r0, r5
 802aa64:	d3f8      	bcc.n	802aa58 <ATT_Build_Read_By_Grp_Type_Rsp+0x60>
 802aa66:	2f00      	cmp	r7, #0
 802aa68:	f000 809e 	beq.w	802aba8 <ATT_Build_Read_By_Grp_Type_Rsp+0x1b0>
 802aa6c:	f8b8 1002 	ldrh.w	r1, [r8, #2]
 802aa70:	4650      	mov	r0, sl
 802aa72:	f001 fbaf 	bl	802c1d4 <ACL_Resize>
 802aa76:	b1b0      	cbz	r0, 802aaa6 <ATT_Build_Read_By_Grp_Type_Rsp+0xae>
 802aa78:	2595      	movs	r5, #149	@ 0x95
 802aa7a:	e00e      	b.n	802aa9a <ATT_Build_Read_By_Grp_Type_Rsp+0xa2>
 802aa7c:	2001      	movs	r0, #1
 802aa7e:	2110      	movs	r1, #16
 802aa80:	462a      	mov	r2, r5
 802aa82:	4653      	mov	r3, sl
 802aa84:	f7ff fbf6 	bl	802a274 <ATT_Build_Error_Rsp>
 802aa88:	2500      	movs	r5, #0
 802aa8a:	e006      	b.n	802aa9a <ATT_Build_Read_By_Grp_Type_Rsp+0xa2>
 802aa8c:	2004      	movs	r0, #4
 802aa8e:	2110      	movs	r1, #16
 802aa90:	2200      	movs	r2, #0
 802aa92:	4653      	mov	r3, sl
 802aa94:	2500      	movs	r5, #0
 802aa96:	f7ff fbed 	bl	802a274 <ATT_Build_Error_Rsp>
 802aa9a:	4628      	mov	r0, r5
 802aa9c:	b009      	add	sp, #36	@ 0x24
 802aa9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802aaa2:	2010      	movs	r0, #16
 802aaa4:	e7eb      	b.n	802aa7e <ATT_Build_Read_By_Grp_Type_Rsp+0x86>
 802aaa6:	f04f 0b00 	mov.w	fp, #0
 802aaaa:	2000      	movs	r0, #0
 802aaac:	9001      	str	r0, [sp, #4]
 802aaae:	42b7      	cmp	r7, r6
 802aab0:	d072      	beq.n	802ab98 <ATT_Build_Read_By_Grp_Type_Rsp+0x1a0>
 802aab2:	463c      	mov	r4, r7
 802aab4:	f834 0f28 	ldrh.w	r0, [r4, #40]!
 802aab8:	4548      	cmp	r0, r9
 802aaba:	d86d      	bhi.n	802ab98 <ATT_Build_Read_By_Grp_Type_Rsp+0x1a0>
 802aabc:	f8bd 1022 	ldrh.w	r1, [sp, #34]	@ 0x22
 802aac0:	8d78      	ldrh	r0, [r7, #42]	@ 0x2a
 802aac2:	4288      	cmp	r0, r1
 802aac4:	d166      	bne.n	802ab94 <ATT_Build_Read_By_Grp_Type_Rsp+0x19c>
 802aac6:	ea5f 400b 	movs.w	r0, fp, lsl #16
 802aaca:	d10f      	bne.n	802aaec <ATT_Build_Read_By_Grp_Type_Rsp+0xf4>
 802aacc:	f8da 0020 	ldr.w	r0, [sl, #32]
 802aad0:	2111      	movs	r1, #17
 802aad2:	f04f 0b02 	mov.w	fp, #2
 802aad6:	7101      	strb	r1, [r0, #4]
 802aad8:	2114      	movs	r1, #20
 802aada:	f897 002c 	ldrb.w	r0, [r7, #44]	@ 0x2c
 802aade:	2801      	cmp	r0, #1
 802aae0:	bf08      	it	eq
 802aae2:	2106      	moveq	r1, #6
 802aae4:	f8da 0020 	ldr.w	r0, [sl, #32]
 802aae8:	9101      	str	r1, [sp, #4]
 802aaea:	7141      	strb	r1, [r0, #5]
 802aaec:	fa1f f08b 	uxth.w	r0, fp
 802aaf0:	f8b8 1002 	ldrh.w	r1, [r8, #2]
 802aaf4:	1a08      	subs	r0, r1, r0
 802aaf6:	2804      	cmp	r0, #4
 802aaf8:	d351      	bcc.n	802ab9e <ATT_Build_Read_By_Grp_Type_Rsp+0x1a6>
 802aafa:	9801      	ldr	r0, [sp, #4]
 802aafc:	b2c1      	uxtb	r1, r0
 802aafe:	2914      	cmp	r1, #20
 802ab00:	d006      	beq.n	802ab10 <ATT_Build_Read_By_Grp_Type_Rsp+0x118>
 802ab02:	2906      	cmp	r1, #6
 802ab04:	d14b      	bne.n	802ab9e <ATT_Build_Read_By_Grp_Type_Rsp+0x1a6>
 802ab06:	f897 002c 	ldrb.w	r0, [r7, #44]	@ 0x2c
 802ab0a:	2801      	cmp	r0, #1
 802ab0c:	d004      	beq.n	802ab18 <ATT_Build_Read_By_Grp_Type_Rsp+0x120>
 802ab0e:	e046      	b.n	802ab9e <ATT_Build_Read_By_Grp_Type_Rsp+0x1a6>
 802ab10:	f897 002c 	ldrb.w	r0, [r7, #44]	@ 0x2c
 802ab14:	2802      	cmp	r0, #2
 802ab16:	d142      	bne.n	802ab9e <ATT_Build_Read_By_Grp_Type_Rsp+0x1a6>
 802ab18:	f10b 0004 	add.w	r0, fp, #4
 802ab1c:	9103      	str	r1, [sp, #12]
 802ab1e:	2202      	movs	r2, #2
 802ab20:	4623      	mov	r3, r4
 802ab22:	9002      	str	r0, [sp, #8]
 802ab24:	b281      	uxth	r1, r0
 802ab26:	4650      	mov	r0, sl
 802ab28:	f001 fbbb 	bl	802c2a2 <ACL_Set_Data>
 802ab2c:	4638      	mov	r0, r7
 802ab2e:	f850 1f20 	ldr.w	r1, [r0, #32]!
 802ab32:	4288      	cmp	r0, r1
 802ab34:	d007      	beq.n	802ab46 <ATT_Build_Read_By_Grp_Type_Rsp+0x14e>
 802ab36:	f10b 0106 	add.w	r1, fp, #6
 802ab3a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 802ab3c:	2202      	movs	r2, #2
 802ab3e:	f100 031c 	add.w	r3, r0, #28
 802ab42:	b289      	uxth	r1, r1
 802ab44:	e004      	b.n	802ab50 <ATT_Build_Read_By_Grp_Type_Rsp+0x158>
 802ab46:	f10b 0006 	add.w	r0, fp, #6
 802ab4a:	2202      	movs	r2, #2
 802ab4c:	4623      	mov	r3, r4
 802ab4e:	b281      	uxth	r1, r0
 802ab50:	4650      	mov	r0, sl
 802ab52:	f001 fba6 	bl	802c2a2 <ACL_Set_Data>
 802ab56:	4659      	mov	r1, fp
 802ab58:	f8b8 0002 	ldrh.w	r0, [r8, #2]
 802ab5c:	f8dd b008 	ldr.w	fp, [sp, #8]
 802ab60:	f107 0308 	add.w	r3, r7, #8
 802ab64:	eba0 000b 	sub.w	r0, r0, fp
 802ab68:	b284      	uxth	r4, r0
 802ab6a:	9803      	ldr	r0, [sp, #12]
 802ab6c:	3804      	subs	r0, #4
 802ab6e:	b280      	uxth	r0, r0
 802ab70:	42a0      	cmp	r0, r4
 802ab72:	bf38      	it	cc
 802ab74:	4604      	movcc	r4, r0
 802ab76:	f101 0008 	add.w	r0, r1, #8
 802ab7a:	4622      	mov	r2, r4
 802ab7c:	b281      	uxth	r1, r0
 802ab7e:	4650      	mov	r0, sl
 802ab80:	f001 fb8f 	bl	802c2a2 <ACL_Set_Data>
 802ab84:	44a3      	add	fp, r4
 802ab86:	f8b8 1002 	ldrh.w	r1, [r8, #2]
 802ab8a:	fa1f f08b 	uxth.w	r0, fp
 802ab8e:	1a08      	subs	r0, r1, r0
 802ab90:	2804      	cmp	r0, #4
 802ab92:	d301      	bcc.n	802ab98 <ATT_Build_Read_By_Grp_Type_Rsp+0x1a0>
 802ab94:	683f      	ldr	r7, [r7, #0]
 802ab96:	e78a      	b.n	802aaae <ATT_Build_Read_By_Grp_Type_Rsp+0xb6>
 802ab98:	ea5f 400b 	movs.w	r0, fp, lsl #16
 802ab9c:	d004      	beq.n	802aba8 <ATT_Build_Read_By_Grp_Type_Rsp+0x1b0>
 802ab9e:	f10b 0004 	add.w	r0, fp, #4
 802aba2:	f8aa 0004 	strh.w	r0, [sl, #4]
 802aba6:	e76f      	b.n	802aa88 <ATT_Build_Read_By_Grp_Type_Rsp+0x90>
 802aba8:	200a      	movs	r0, #10
 802abaa:	e768      	b.n	802aa7e <ATT_Build_Read_By_Grp_Type_Rsp+0x86>

0802abac <__arm_cp.11_0>:
 802abac:	20009f5c 	.word	0x20009f5c

0802abb0 <ATT_Build_Write_Rsp>:
 802abb0:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
 802abb4:	4605      	mov	r5, r0
 802abb6:	8888      	ldrh	r0, [r1, #4]
 802abb8:	4614      	mov	r4, r2
 802abba:	2807      	cmp	r0, #7
 802abbc:	d202      	bcs.n	802abc4 <ATT_Build_Write_Rsp+0x14>
 802abbe:	2700      	movs	r7, #0
 802abc0:	2004      	movs	r0, #4
 802abc2:	e00c      	b.n	802abde <ATT_Build_Write_Rsp+0x2e>
 802abc4:	6a08      	ldr	r0, [r1, #32]
 802abc6:	460e      	mov	r6, r1
 802abc8:	2302      	movs	r3, #2
 802abca:	7941      	ldrb	r1, [r0, #5]
 802abcc:	7980      	ldrb	r0, [r0, #6]
 802abce:	aa01      	add	r2, sp, #4
 802abd0:	ea41 2700 	orr.w	r7, r1, r0, lsl #8
 802abd4:	4628      	mov	r0, r5
 802abd6:	b2b9      	uxth	r1, r7
 802abd8:	f000 f84a 	bl	802ac70 <ATT_Find_Attribute_To_Write>
 802abdc:	b130      	cbz	r0, 802abec <ATT_Build_Write_Rsp+0x3c>
 802abde:	b2ba      	uxth	r2, r7
 802abe0:	2112      	movs	r1, #18
 802abe2:	f000 fb9e 	bl	802b322 <OUTLINED_FUNCTION_4>
 802abe6:	2000      	movs	r0, #0
 802abe8:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
 802abec:	9901      	ldr	r1, [sp, #4]
 802abee:	88b2      	ldrh	r2, [r6, #4]
 802abf0:	f891 0022 	ldrb.w	r0, [r1, #34]	@ 0x22
 802abf4:	f1a2 0807 	sub.w	r8, r2, #7
 802abf8:	2801      	cmp	r0, #1
 802abfa:	d002      	beq.n	802ac02 <ATT_Build_Write_Rsp+0x52>
 802abfc:	b940      	cbnz	r0, 802ac10 <ATT_Build_Write_Rsp+0x60>
 802abfe:	8bc8      	ldrh	r0, [r1, #30]
 802ac00:	e000      	b.n	802ac04 <ATT_Build_Write_Rsp+0x54>
 802ac02:	8c08      	ldrh	r0, [r1, #32]
 802ac04:	fa1f f288 	uxth.w	r2, r8
 802ac08:	4282      	cmp	r2, r0
 802ac0a:	d901      	bls.n	802ac10 <ATT_Build_Write_Rsp+0x60>
 802ac0c:	200d      	movs	r0, #13
 802ac0e:	e7e6      	b.n	802abde <ATT_Build_Write_Rsp+0x2e>
 802ac10:	f891 0026 	ldrb.w	r0, [r1, #38]	@ 0x26
 802ac14:	0780      	lsls	r0, r0, #30
 802ac16:	d503      	bpl.n	802ac20 <ATT_Build_Write_Rsp+0x70>
 802ac18:	88e8      	ldrh	r0, [r5, #6]
 802ac1a:	f410 7f81 	tst.w	r0, #258	@ 0x102
 802ac1e:	d01b      	beq.n	802ac58 <ATT_Build_Write_Rsp+0xa8>
 802ac20:	4608      	mov	r0, r1
 802ac22:	4629      	mov	r1, r5
 802ac24:	f7fe fb2e 	bl	8029284 <GATT_Attr_Val>
 802ac28:	4607      	mov	r7, r0
 802ac2a:	fa1f f288 	uxth.w	r2, r8
 802ac2e:	4630      	mov	r0, r6
 802ac30:	2107      	movs	r1, #7
 802ac32:	463b      	mov	r3, r7
 802ac34:	f001 fb15 	bl	802c262 <ACL_Get_Data>
 802ac38:	9901      	ldr	r1, [sp, #4]
 802ac3a:	f891 0022 	ldrb.w	r0, [r1, #34]	@ 0x22
 802ac3e:	b108      	cbz	r0, 802ac44 <ATT_Build_Write_Rsp+0x94>
 802ac40:	f8a1 801e 	strh.w	r8, [r1, #30]
 802ac44:	6a20      	ldr	r0, [r4, #32]
 802ac46:	2213      	movs	r2, #19
 802ac48:	7102      	strb	r2, [r0, #4]
 802ac4a:	2005      	movs	r0, #5
 802ac4c:	463a      	mov	r2, r7
 802ac4e:	80a0      	strh	r0, [r4, #4]
 802ac50:	4628      	mov	r0, r5
 802ac52:	f000 f83e 	bl	802acd2 <GATT_Attribute_Modified_Event>
 802ac56:	e7c6      	b.n	802abe6 <ATT_Build_Write_Rsp+0x36>
 802ac58:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 802ac5c:	fa1f f288 	uxth.w	r2, r8
 802ac60:	4633      	mov	r3, r6
 802ac62:	9000      	str	r0, [sp, #0]
 802ac64:	4628      	mov	r0, r5
 802ac66:	f000 f820 	bl	802acaa <GATT_Write_Permit_Req_Event>
 802ac6a:	2069      	movs	r0, #105	@ 0x69
 802ac6c:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}

0802ac70 <ATT_Find_Attribute_To_Write>:
 802ac70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802ac72:	4606      	mov	r6, r0
 802ac74:	4608      	mov	r0, r1
 802ac76:	461c      	mov	r4, r3
 802ac78:	4615      	mov	r5, r2
 802ac7a:	460f      	mov	r7, r1
 802ac7c:	f7ff f9de 	bl	802a03c <GATT_Find_Srv_Owner_Of_Handle>
 802ac80:	b150      	cbz	r0, 802ac98 <ATT_Find_Attribute_To_Write+0x28>
 802ac82:	4601      	mov	r1, r0
 802ac84:	8d00      	ldrh	r0, [r0, #40]	@ 0x28
 802ac86:	42b8      	cmp	r0, r7
 802ac88:	bf04      	itt	eq
 802ac8a:	2003      	moveq	r0, #3
 802ac8c:	bdf8      	popeq	{r3, r4, r5, r6, r7, pc}
 802ac8e:	4638      	mov	r0, r7
 802ac90:	462a      	mov	r2, r5
 802ac92:	f7fe ff8e 	bl	8029bb2 <GATT_Search_Handle>
 802ac96:	b108      	cbz	r0, 802ac9c <ATT_Find_Attribute_To_Write+0x2c>
 802ac98:	2001      	movs	r0, #1
 802ac9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802ac9c:	6829      	ldr	r1, [r5, #0]
 802ac9e:	4630      	mov	r0, r6
 802aca0:	4622      	mov	r2, r4
 802aca2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 802aca6:	f7ff bb0e 	b.w	802a2c6 <ATT_Check_Perm>

0802acaa <GATT_Write_Permit_Req_Event>:
 802acaa:	b57c      	push	{r2, r3, r4, r5, r6, lr}
 802acac:	4615      	mov	r5, r2
 802acae:	460e      	mov	r6, r1
 802acb0:	6841      	ldr	r1, [r0, #4]
 802acb2:	9a06      	ldr	r2, [sp, #24]
 802acb4:	461c      	mov	r4, r3
 802acb6:	4311      	orrs	r1, r2
 802acb8:	6041      	str	r1, [r0, #4]
 802acba:	f7fd ff89 	bl	8028bd0 <GATT_Evt_Handle>
 802acbe:	4601      	mov	r1, r0
 802acc0:	b2e8      	uxtb	r0, r5
 802acc2:	8bb2      	ldrh	r2, [r6, #28]
 802acc4:	2303      	movs	r3, #3
 802acc6:	e9cd 0400 	strd	r0, r4, [sp]
 802acca:	2001      	movs	r0, #1
 802accc:	f7fc fbba 	bl	8027444 <EVT_aci_gatt_write_permit_req>
 802acd0:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

0802acd2 <GATT_Attribute_Modified_Event>:
 802acd2:	b5b0      	push	{r4, r5, r7, lr}
 802acd4:	460d      	mov	r5, r1
 802acd6:	f891 1026 	ldrb.w	r1, [r1, #38]	@ 0x26
 802acda:	07c9      	lsls	r1, r1, #31
 802acdc:	bf08      	it	eq
 802acde:	bdb0      	popeq	{r4, r5, r7, pc}
 802ace0:	4614      	mov	r4, r2
 802ace2:	f7fd ff75 	bl	8028bd0 <GATT_Evt_Handle>
 802ace6:	8bea      	ldrh	r2, [r5, #30]
 802ace8:	8ba9      	ldrh	r1, [r5, #28]
 802acea:	4623      	mov	r3, r4
 802acec:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 802acf0:	f7fc bbe8 	b.w	80274c4 <EVT_GATT_Attribute_Modified>

0802acf4 <ATT_Build_Prepare_Write_Rsp>:
 802acf4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 802acf8:	b085      	sub	sp, #20
 802acfa:	4607      	mov	r7, r0
 802acfc:	4608      	mov	r0, r1
 802acfe:	4615      	mov	r5, r2
 802ad00:	460c      	mov	r4, r1
 802ad02:	f001 fb71 	bl	802c3e8 <ACL_Get_Count>
 802ad06:	4681      	mov	r9, r0
 802ad08:	88a0      	ldrh	r0, [r4, #4]
 802ad0a:	2809      	cmp	r0, #9
 802ad0c:	d202      	bcs.n	802ad14 <ATT_Build_Prepare_Write_Rsp+0x20>
 802ad0e:	2600      	movs	r6, #0
 802ad10:	2004      	movs	r0, #4
 802ad12:	e015      	b.n	802ad40 <ATT_Build_Prepare_Write_Rsp+0x4c>
 802ad14:	6a20      	ldr	r0, [r4, #32]
 802ad16:	2302      	movs	r3, #2
 802ad18:	7941      	ldrb	r1, [r0, #5]
 802ad1a:	7980      	ldrb	r0, [r0, #6]
 802ad1c:	aa04      	add	r2, sp, #16
 802ad1e:	ea41 2600 	orr.w	r6, r1, r0, lsl #8
 802ad22:	4638      	mov	r0, r7
 802ad24:	b2b1      	uxth	r1, r6
 802ad26:	f7ff ffa3 	bl	802ac70 <ATT_Find_Attribute_To_Write>
 802ad2a:	b948      	cbnz	r0, 802ad40 <ATT_Build_Prepare_Write_Rsp+0x4c>
 802ad2c:	f8df 80b0 	ldr.w	r8, [pc, #176]	@ 802ade0 <__arm_cp.16_0>
 802ad30:	492c      	ldr	r1, [pc, #176]	@ (802ade4 <__arm_cp.16_1>)
 802ad32:	f8b8 0214 	ldrh.w	r0, [r8, #532]	@ 0x214
 802ad36:	7dc9      	ldrb	r1, [r1, #23]
 802ad38:	4448      	add	r0, r9
 802ad3a:	4288      	cmp	r0, r1
 802ad3c:	d909      	bls.n	802ad52 <ATT_Build_Prepare_Write_Rsp+0x5e>
 802ad3e:	2009      	movs	r0, #9
 802ad40:	b2b2      	uxth	r2, r6
 802ad42:	2116      	movs	r1, #22
 802ad44:	462b      	mov	r3, r5
 802ad46:	f7ff fa95 	bl	802a274 <ATT_Build_Error_Rsp>
 802ad4a:	2000      	movs	r0, #0
 802ad4c:	b005      	add	sp, #20
 802ad4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802ad52:	9e04      	ldr	r6, [sp, #16]
 802ad54:	f896 0026 	ldrb.w	r0, [r6, #38]	@ 0x26
 802ad58:	0780      	lsls	r0, r0, #30
 802ad5a:	d503      	bpl.n	802ad64 <ATT_Build_Prepare_Write_Rsp+0x70>
 802ad5c:	6878      	ldr	r0, [r7, #4]
 802ad5e:	f010 7f81 	tst.w	r0, #16908288	@ 0x1020000
 802ad62:	d020      	beq.n	802ada6 <ATT_Build_Prepare_Write_Rsp+0xb2>
 802ad64:	88a0      	ldrh	r0, [r4, #4]
 802ad66:	3804      	subs	r0, #4
 802ad68:	b281      	uxth	r1, r0
 802ad6a:	4628      	mov	r0, r5
 802ad6c:	f001 fa32 	bl	802c1d4 <ACL_Resize>
 802ad70:	b108      	cbz	r0, 802ad76 <ATT_Build_Prepare_Write_Rsp+0x82>
 802ad72:	2095      	movs	r0, #149	@ 0x95
 802ad74:	e7ea      	b.n	802ad4c <ATT_Build_Prepare_Write_Rsp+0x58>
 802ad76:	4628      	mov	r0, r5
 802ad78:	4621      	mov	r1, r4
 802ad7a:	f001 fab1 	bl	802c2e0 <ACL_Copy_Data>
 802ad7e:	6a28      	ldr	r0, [r5, #32]
 802ad80:	2117      	movs	r1, #23
 802ad82:	7101      	strb	r1, [r0, #4]
 802ad84:	f508 7001 	add.w	r0, r8, #516	@ 0x204
 802ad88:	4621      	mov	r1, r4
 802ad8a:	f001 fb45 	bl	802c418 <ACL_List_Remove>
 802ad8e:	f508 7003 	add.w	r0, r8, #524	@ 0x20c
 802ad92:	4621      	mov	r1, r4
 802ad94:	f001 fb30 	bl	802c3f8 <ACL_List_Insert_Tail>
 802ad98:	f8b8 0214 	ldrh.w	r0, [r8, #532]	@ 0x214
 802ad9c:	4448      	add	r0, r9
 802ad9e:	f8a8 0214 	strh.w	r0, [r8, #532]	@ 0x214
 802ada2:	2067      	movs	r0, #103	@ 0x67
 802ada4:	e7d2      	b.n	802ad4c <ATT_Build_Prepare_Write_Rsp+0x58>
 802ada6:	6a21      	ldr	r1, [r4, #32]
 802ada8:	f440 3000 	orr.w	r0, r0, #131072	@ 0x20000
 802adac:	7925      	ldrb	r5, [r4, #4]
 802adae:	f891 8007 	ldrb.w	r8, [r1, #7]
 802adb2:	f891 9008 	ldrb.w	r9, [r1, #8]
 802adb6:	6078      	str	r0, [r7, #4]
 802adb8:	4638      	mov	r0, r7
 802adba:	f7fd ff09 	bl	8028bd0 <GATT_Evt_Handle>
 802adbe:	4601      	mov	r1, r0
 802adc0:	f1a5 0009 	sub.w	r0, r5, #9
 802adc4:	2305      	movs	r3, #5
 802adc6:	8bb2      	ldrh	r2, [r6, #28]
 802adc8:	9402      	str	r4, [sp, #8]
 802adca:	b2c0      	uxtb	r0, r0
 802adcc:	e9cd 3000 	strd	r3, r0, [sp]
 802add0:	ea48 2009 	orr.w	r0, r8, r9, lsl #8
 802add4:	b283      	uxth	r3, r0
 802add6:	2001      	movs	r0, #1
 802add8:	f7fc fb48 	bl	802746c <EVT_aci_gatt_prepare_write_permit_req>
 802addc:	2069      	movs	r0, #105	@ 0x69
 802adde:	e7b5      	b.n	802ad4c <ATT_Build_Prepare_Write_Rsp+0x58>

0802ade0 <__arm_cp.16_0>:
 802ade0:	20009f5c 	.word	0x20009f5c

0802ade4 <__arm_cp.16_1>:
 802ade4:	20009f34 	.word	0x20009f34

0802ade8 <ATT_Build_Exec_Write_Rsp>:
 802ade8:	e92d 4ffe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802adec:	4680      	mov	r8, r0
 802adee:	8888      	ldrh	r0, [r1, #4]
 802adf0:	4692      	mov	sl, r2
 802adf2:	2806      	cmp	r0, #6
 802adf4:	d128      	bne.n	802ae48 <ATT_Build_Exec_Write_Rsp+0x60>
 802adf6:	4f57      	ldr	r7, [pc, #348]	@ (802af54 <__arm_cp.17_0>)
 802adf8:	460e      	mov	r6, r1
 802adfa:	6a09      	ldr	r1, [r1, #32]
 802adfc:	2000      	movs	r0, #0
 802adfe:	f10d 0b04 	add.w	fp, sp, #4
 802ae02:	7949      	ldrb	r1, [r1, #5]
 802ae04:	9001      	str	r0, [sp, #4]
 802ae06:	9002      	str	r0, [sp, #8]
 802ae08:	f8d7 920c 	ldr.w	r9, [r7, #524]	@ 0x20c
 802ae0c:	f507 7403 	add.w	r4, r7, #524	@ 0x20c
 802ae10:	9100      	str	r1, [sp, #0]
 802ae12:	f1b9 0f00 	cmp.w	r9, #0
 802ae16:	d020      	beq.n	802ae5a <ATT_Build_Exec_Write_Rsp+0x72>
 802ae18:	464d      	mov	r5, r9
 802ae1a:	f8d9 9000 	ldr.w	r9, [r9]
 802ae1e:	8930      	ldrh	r0, [r6, #8]
 802ae20:	8929      	ldrh	r1, [r5, #8]
 802ae22:	4281      	cmp	r1, r0
 802ae24:	d1f5      	bne.n	802ae12 <ATT_Build_Exec_Write_Rsp+0x2a>
 802ae26:	4620      	mov	r0, r4
 802ae28:	4629      	mov	r1, r5
 802ae2a:	f001 faf5 	bl	802c418 <ACL_List_Remove>
 802ae2e:	4628      	mov	r0, r5
 802ae30:	f001 fada 	bl	802c3e8 <ACL_Get_Count>
 802ae34:	f8b7 1214 	ldrh.w	r1, [r7, #532]	@ 0x214
 802ae38:	1a08      	subs	r0, r1, r0
 802ae3a:	4629      	mov	r1, r5
 802ae3c:	f8a7 0214 	strh.w	r0, [r7, #532]	@ 0x214
 802ae40:	4658      	mov	r0, fp
 802ae42:	f001 fad9 	bl	802c3f8 <ACL_List_Insert_Tail>
 802ae46:	e7e4      	b.n	802ae12 <ATT_Build_Exec_Write_Rsp+0x2a>
 802ae48:	2004      	movs	r0, #4
 802ae4a:	2118      	movs	r1, #24
 802ae4c:	2200      	movs	r2, #0
 802ae4e:	4653      	mov	r3, sl
 802ae50:	f7ff fa10 	bl	802a274 <ATT_Build_Error_Rsp>
 802ae54:	2000      	movs	r0, #0
 802ae56:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802ae5a:	f8da 0020 	ldr.w	r0, [sl, #32]
 802ae5e:	2119      	movs	r1, #25
 802ae60:	9f00      	ldr	r7, [sp, #0]
 802ae62:	7101      	strb	r1, [r0, #4]
 802ae64:	2005      	movs	r0, #5
 802ae66:	2f01      	cmp	r7, #1
 802ae68:	f8aa 0004 	strh.w	r0, [sl, #4]
 802ae6c:	d132      	bne.n	802aed4 <ATT_Build_Exec_Write_Rsp+0xec>
 802ae6e:	9d01      	ldr	r5, [sp, #4]
 802ae70:	b32d      	cbz	r5, 802aebe <ATT_Build_Exec_Write_Rsp+0xd6>
 802ae72:	6a28      	ldr	r0, [r5, #32]
 802ae74:	682c      	ldr	r4, [r5, #0]
 802ae76:	f000 fa4c 	bl	802b312 <OUTLINED_FUNCTION_2>
 802ae7a:	b286      	uxth	r6, r0
 802ae7c:	4630      	mov	r0, r6
 802ae7e:	f000 f86b 	bl	802af58 <GATT_Find_Char_Attribute>
 802ae82:	b1f0      	cbz	r0, 802aec2 <ATT_Build_Exec_Write_Rsp+0xda>
 802ae84:	6a2a      	ldr	r2, [r5, #32]
 802ae86:	88a9      	ldrh	r1, [r5, #4]
 802ae88:	f890 3022 	ldrb.w	r3, [r0, #34]	@ 0x22
 802ae8c:	79d5      	ldrb	r5, [r2, #7]
 802ae8e:	7a12      	ldrb	r2, [r2, #8]
 802ae90:	3909      	subs	r1, #9
 802ae92:	ea45 2202 	orr.w	r2, r5, r2, lsl #8
 802ae96:	2b01      	cmp	r3, #1
 802ae98:	d005      	beq.n	802aea6 <ATT_Build_Exec_Write_Rsp+0xbe>
 802ae9a:	2b00      	cmp	r3, #0
 802ae9c:	4625      	mov	r5, r4
 802ae9e:	d1e7      	bne.n	802ae70 <ATT_Build_Exec_Write_Rsp+0x88>
 802aea0:	b292      	uxth	r2, r2
 802aea2:	8bc0      	ldrh	r0, [r0, #30]
 802aea4:	e001      	b.n	802aeaa <ATT_Build_Exec_Write_Rsp+0xc2>
 802aea6:	b292      	uxth	r2, r2
 802aea8:	8c00      	ldrh	r0, [r0, #32]
 802aeaa:	1e43      	subs	r3, r0, #1
 802aeac:	4293      	cmp	r3, r2
 802aeae:	d30a      	bcc.n	802aec6 <ATT_Build_Exec_Write_Rsp+0xde>
 802aeb0:	b289      	uxth	r1, r1
 802aeb2:	4625      	mov	r5, r4
 802aeb4:	4411      	add	r1, r2
 802aeb6:	4281      	cmp	r1, r0
 802aeb8:	d9da      	bls.n	802ae70 <ATT_Build_Exec_Write_Rsp+0x88>
 802aeba:	200d      	movs	r0, #13
 802aebc:	e004      	b.n	802aec8 <ATT_Build_Exec_Write_Rsp+0xe0>
 802aebe:	2701      	movs	r7, #1
 802aec0:	e008      	b.n	802aed4 <ATT_Build_Exec_Write_Rsp+0xec>
 802aec2:	2001      	movs	r0, #1
 802aec4:	e000      	b.n	802aec8 <ATT_Build_Exec_Write_Rsp+0xe0>
 802aec6:	2007      	movs	r0, #7
 802aec8:	2118      	movs	r1, #24
 802aeca:	4632      	mov	r2, r6
 802aecc:	4653      	mov	r3, sl
 802aece:	f7ff f9d1 	bl	802a274 <ATT_Build_Error_Rsp>
 802aed2:	2700      	movs	r7, #0
 802aed4:	9d01      	ldr	r5, [sp, #4]
 802aed6:	9700      	str	r7, [sp, #0]
 802aed8:	2d00      	cmp	r5, #0
 802aeda:	d0bb      	beq.n	802ae54 <ATT_Build_Exec_Write_Rsp+0x6c>
 802aedc:	682c      	ldr	r4, [r5, #0]
 802aede:	2f01      	cmp	r7, #1
 802aee0:	d133      	bne.n	802af4a <ATT_Build_Exec_Write_Rsp+0x162>
 802aee2:	6a28      	ldr	r0, [r5, #32]
 802aee4:	f000 fa15 	bl	802b312 <OUTLINED_FUNCTION_2>
 802aee8:	fa1f fb80 	uxth.w	fp, r0
 802aeec:	4658      	mov	r0, fp
 802aeee:	f000 f833 	bl	802af58 <GATT_Find_Char_Attribute>
 802aef2:	4641      	mov	r1, r8
 802aef4:	4606      	mov	r6, r0
 802aef6:	46c2      	mov	sl, r8
 802aef8:	f7fe f9c4 	bl	8029284 <GATT_Attr_Val>
 802aefc:	4681      	mov	r9, r0
 802aefe:	6a28      	ldr	r0, [r5, #32]
 802af00:	79c1      	ldrb	r1, [r0, #7]
 802af02:	7a00      	ldrb	r0, [r0, #8]
 802af04:	ea41 2700 	orr.w	r7, r1, r0, lsl #8
 802af08:	88a8      	ldrh	r0, [r5, #4]
 802af0a:	2109      	movs	r1, #9
 802af0c:	f1a0 0809 	sub.w	r8, r0, #9
 802af10:	4628      	mov	r0, r5
 802af12:	fa1f f288 	uxth.w	r2, r8
 802af16:	eb09 0307 	add.w	r3, r9, r7
 802af1a:	f001 f9a2 	bl	802c262 <ACL_Get_Data>
 802af1e:	f896 0022 	ldrb.w	r0, [r6, #34]	@ 0x22
 802af22:	b110      	cbz	r0, 802af2a <ATT_Build_Exec_Write_Rsp+0x142>
 802af24:	eb08 0007 	add.w	r0, r8, r7
 802af28:	83f0      	strh	r0, [r6, #30]
 802af2a:	b11c      	cbz	r4, 802af34 <ATT_Build_Exec_Write_Rsp+0x14c>
 802af2c:	6a20      	ldr	r0, [r4, #32]
 802af2e:	f000 f9f0 	bl	802b312 <OUTLINED_FUNCTION_2>
 802af32:	e000      	b.n	802af36 <ATT_Build_Exec_Write_Rsp+0x14e>
 802af34:	2000      	movs	r0, #0
 802af36:	b280      	uxth	r0, r0
 802af38:	9f00      	ldr	r7, [sp, #0]
 802af3a:	46d0      	mov	r8, sl
 802af3c:	4583      	cmp	fp, r0
 802af3e:	d004      	beq.n	802af4a <ATT_Build_Exec_Write_Rsp+0x162>
 802af40:	4640      	mov	r0, r8
 802af42:	4631      	mov	r1, r6
 802af44:	464a      	mov	r2, r9
 802af46:	f7ff fec4 	bl	802acd2 <GATT_Attribute_Modified_Event>
 802af4a:	4628      	mov	r0, r5
 802af4c:	f001 f91c 	bl	802c188 <ACL_Release>
 802af50:	4625      	mov	r5, r4
 802af52:	e7c1      	b.n	802aed8 <ATT_Build_Exec_Write_Rsp+0xf0>

0802af54 <__arm_cp.17_0>:
 802af54:	20009f5c 	.word	0x20009f5c

0802af58 <GATT_Find_Char_Attribute>:
 802af58:	b5bc      	push	{r2, r3, r4, r5, r7, lr}
 802af5a:	4605      	mov	r5, r0
 802af5c:	f7ff f86e 	bl	802a03c <GATT_Find_Srv_Owner_Of_Handle>
 802af60:	2400      	movs	r4, #0
 802af62:	b140      	cbz	r0, 802af76 <GATT_Find_Char_Attribute+0x1e>
 802af64:	4601      	mov	r1, r0
 802af66:	aa01      	add	r2, sp, #4
 802af68:	4628      	mov	r0, r5
 802af6a:	f7fe fe22 	bl	8029bb2 <GATT_Search_Handle>
 802af6e:	9901      	ldr	r1, [sp, #4]
 802af70:	2800      	cmp	r0, #0
 802af72:	bf08      	it	eq
 802af74:	460c      	moveq	r4, r1
 802af76:	4620      	mov	r0, r4
 802af78:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}

0802af7a <ATT_Handle_Write_Cmd>:
 802af7a:	e92d 43fe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, lr}
 802af7e:	4681      	mov	r9, r0
 802af80:	6a08      	ldr	r0, [r1, #32]
 802af82:	460d      	mov	r5, r1
 802af84:	2608      	movs	r6, #8
 802af86:	210f      	movs	r1, #15
 802af88:	7907      	ldrb	r7, [r0, #4]
 802af8a:	2f52      	cmp	r7, #82	@ 0x52
 802af8c:	bf08      	it	eq
 802af8e:	2604      	moveq	r6, #4
 802af90:	bf08      	it	eq
 802af92:	2103      	moveq	r1, #3
 802af94:	88ab      	ldrh	r3, [r5, #4]
 802af96:	3b04      	subs	r3, #4
 802af98:	428b      	cmp	r3, r1
 802af9a:	db0e      	blt.n	802afba <ATT_Handle_Write_Cmd+0x40>
 802af9c:	7941      	ldrb	r1, [r0, #5]
 802af9e:	7980      	ldrb	r0, [r0, #6]
 802afa0:	ea41 2400 	orr.w	r4, r1, r0, lsl #8
 802afa4:	0420      	lsls	r0, r4, #16
 802afa6:	d008      	beq.n	802afba <ATT_Handle_Write_Cmd+0x40>
 802afa8:	b14a      	cbz	r2, 802afbe <ATT_Handle_Write_Cmd+0x44>
 802afaa:	2fd2      	cmp	r7, #210	@ 0xd2
 802afac:	d107      	bne.n	802afbe <ATT_Handle_Write_Cmd+0x44>
 802afae:	f8b9 0000 	ldrh.w	r0, [r9]
 802afb2:	4629      	mov	r1, r5
 802afb4:	f004 f8b9 	bl	802f12a <SMP_Validate_Signed_Packet>
 802afb8:	b108      	cbz	r0, 802afbe <ATT_Handle_Write_Cmd+0x44>
 802afba:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}
 802afbe:	b2a1      	uxth	r1, r4
 802afc0:	aa02      	add	r2, sp, #8
 802afc2:	4648      	mov	r0, r9
 802afc4:	4633      	mov	r3, r6
 802afc6:	f7ff fe53 	bl	802ac70 <ATT_Find_Attribute_To_Write>
 802afca:	2800      	cmp	r0, #0
 802afcc:	d1f5      	bne.n	802afba <ATT_Handle_Write_Cmd+0x40>
 802afce:	f64f 70ed 	movw	r0, #65517	@ 0xffed
 802afd2:	2f52      	cmp	r7, #82	@ 0x52
 802afd4:	bf08      	it	eq
 802afd6:	f64f 70f9 	movweq	r0, #65529	@ 0xfff9
 802afda:	88a9      	ldrh	r1, [r5, #4]
 802afdc:	1847      	adds	r7, r0, r1
 802afde:	9902      	ldr	r1, [sp, #8]
 802afe0:	f891 0022 	ldrb.w	r0, [r1, #34]	@ 0x22
 802afe4:	b2be      	uxth	r6, r7
 802afe6:	b108      	cbz	r0, 802afec <ATT_Handle_Write_Cmd+0x72>
 802afe8:	8c08      	ldrh	r0, [r1, #32]
 802afea:	e000      	b.n	802afee <ATT_Handle_Write_Cmd+0x74>
 802afec:	8bc8      	ldrh	r0, [r1, #30]
 802afee:	4286      	cmp	r6, r0
 802aff0:	d8e3      	bhi.n	802afba <ATT_Handle_Write_Cmd+0x40>
 802aff2:	f891 0026 	ldrb.w	r0, [r1, #38]	@ 0x26
 802aff6:	0780      	lsls	r0, r0, #30
 802aff8:	d50d      	bpl.n	802b016 <ATT_Handle_Write_Cmd+0x9c>
 802affa:	f899 0006 	ldrb.w	r0, [r9, #6]
 802affe:	0740      	lsls	r0, r0, #29
 802b000:	d409      	bmi.n	802b016 <ATT_Handle_Write_Cmd+0x9c>
 802b002:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 802b006:	4632      	mov	r2, r6
 802b008:	462b      	mov	r3, r5
 802b00a:	9000      	str	r0, [sp, #0]
 802b00c:	4648      	mov	r0, r9
 802b00e:	f7ff fe4c 	bl	802acaa <GATT_Write_Permit_Req_Event>
 802b012:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}
 802b016:	4608      	mov	r0, r1
 802b018:	4649      	mov	r1, r9
 802b01a:	f7fe f933 	bl	8029284 <GATT_Attr_Val>
 802b01e:	4680      	mov	r8, r0
 802b020:	4628      	mov	r0, r5
 802b022:	2107      	movs	r1, #7
 802b024:	4632      	mov	r2, r6
 802b026:	4643      	mov	r3, r8
 802b028:	f001 f91b 	bl	802c262 <ACL_Get_Data>
 802b02c:	9902      	ldr	r1, [sp, #8]
 802b02e:	f891 0022 	ldrb.w	r0, [r1, #34]	@ 0x22
 802b032:	b100      	cbz	r0, 802b036 <ATT_Handle_Write_Cmd+0xbc>
 802b034:	83cf      	strh	r7, [r1, #30]
 802b036:	4648      	mov	r0, r9
 802b038:	4642      	mov	r2, r8
 802b03a:	f7ff fe4a 	bl	802acd2 <GATT_Attribute_Modified_Event>
 802b03e:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}
	...

0802b044 <ATT_Build_Find_Info_Rsp>:
 802b044:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802b048:	b085      	sub	sp, #20
 802b04a:	4606      	mov	r6, r0
 802b04c:	8888      	ldrh	r0, [r1, #4]
 802b04e:	4693      	mov	fp, r2
 802b050:	2809      	cmp	r0, #9
 802b052:	d115      	bne.n	802b080 <ATT_Build_Find_Info_Rsp+0x3c>
 802b054:	6a08      	ldr	r0, [r1, #32]
 802b056:	7941      	ldrb	r1, [r0, #5]
 802b058:	7982      	ldrb	r2, [r0, #6]
 802b05a:	79c3      	ldrb	r3, [r0, #7]
 802b05c:	7a00      	ldrb	r0, [r0, #8]
 802b05e:	ea43 2500 	orr.w	r5, r3, r0, lsl #8
 802b062:	ea41 2002 	orr.w	r0, r1, r2, lsl #8
 802b066:	fa1f f980 	uxth.w	r9, r0
 802b06a:	454d      	cmp	r5, r9
 802b06c:	d30d      	bcc.n	802b08a <ATT_Build_Find_Info_Rsp+0x46>
 802b06e:	0400      	lsls	r0, r0, #16
 802b070:	d00b      	beq.n	802b08a <ATT_Build_Find_Info_Rsp+0x46>
 802b072:	8871      	ldrh	r1, [r6, #2]
 802b074:	4658      	mov	r0, fp
 802b076:	f001 f8ad 	bl	802c1d4 <ACL_Resize>
 802b07a:	b188      	cbz	r0, 802b0a0 <ATT_Build_Find_Info_Rsp+0x5c>
 802b07c:	2595      	movs	r5, #149	@ 0x95
 802b07e:	e00b      	b.n	802b098 <ATT_Build_Find_Info_Rsp+0x54>
 802b080:	2004      	movs	r0, #4
 802b082:	2104      	movs	r1, #4
 802b084:	f000 f955 	bl	802b332 <OUTLINED_FUNCTION_6>
 802b088:	e006      	b.n	802b098 <ATT_Build_Find_Info_Rsp+0x54>
 802b08a:	2001      	movs	r0, #1
 802b08c:	2104      	movs	r1, #4
 802b08e:	464a      	mov	r2, r9
 802b090:	465b      	mov	r3, fp
 802b092:	f7ff f8ef 	bl	802a274 <ATT_Build_Error_Rsp>
 802b096:	2500      	movs	r5, #0
 802b098:	4628      	mov	r0, r5
 802b09a:	b005      	add	sp, #20
 802b09c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802b0a0:	4648      	mov	r0, r9
 802b0a2:	f7fe ffcb 	bl	802a03c <GATT_Find_Srv_Owner_Of_Handle>
 802b0a6:	2800      	cmp	r0, #0
 802b0a8:	9004      	str	r0, [sp, #16]
 802b0aa:	f000 80cf 	beq.w	802b24c <ATT_Build_Find_Info_Rsp+0x208>
 802b0ae:	4868      	ldr	r0, [pc, #416]	@ (802b250 <__arm_cp.20_0>)
 802b0b0:	f04f 0e00 	mov.w	lr, #0
 802b0b4:	f04f 0c00 	mov.w	ip, #0
 802b0b8:	f500 72f0 	add.w	r2, r0, #480	@ 0x1e0
 802b0bc:	9202      	str	r2, [sp, #8]
 802b0be:	9804      	ldr	r0, [sp, #16]
 802b0c0:	f100 0420 	add.w	r4, r0, #32
 802b0c4:	f100 012a 	add.w	r1, r0, #42	@ 0x2a
 802b0c8:	f100 0828 	add.w	r8, r0, #40	@ 0x28
 802b0cc:	9101      	str	r1, [sp, #4]
 802b0ce:	9403      	str	r4, [sp, #12]
 802b0d0:	9804      	ldr	r0, [sp, #16]
 802b0d2:	4290      	cmp	r0, r2
 802b0d4:	f000 80b2 	beq.w	802b23c <ATT_Build_Find_Info_Rsp+0x1f8>
 802b0d8:	f8b8 0000 	ldrh.w	r0, [r8]
 802b0dc:	4548      	cmp	r0, r9
 802b0de:	bf28      	it	cs
 802b0e0:	4285      	cmpcs	r5, r0
 802b0e2:	d204      	bcs.n	802b0ee <ATT_Build_Find_Info_Rsp+0xaa>
 802b0e4:	f8d4 a000 	ldr.w	sl, [r4]
 802b0e8:	4554      	cmp	r4, sl
 802b0ea:	d0f1      	beq.n	802b0d0 <ATT_Build_Find_Info_Rsp+0x8c>
 802b0ec:	e09f      	b.n	802b22e <ATT_Build_Find_Info_Rsp+0x1ea>
 802b0ee:	ea5f 400c 	movs.w	r0, ip, lsl #16
 802b0f2:	d10b      	bne.n	802b10c <ATT_Build_Find_Info_Rsp+0xc8>
 802b0f4:	f8db 0020 	ldr.w	r0, [fp, #32]
 802b0f8:	2105      	movs	r1, #5
 802b0fa:	f04f 0e01 	mov.w	lr, #1
 802b0fe:	f04f 0c02 	mov.w	ip, #2
 802b102:	7101      	strb	r1, [r0, #4]
 802b104:	f8db 0020 	ldr.w	r0, [fp, #32]
 802b108:	f880 e005 	strb.w	lr, [r0, #5]
 802b10c:	fa1f f08c 	uxth.w	r0, ip
 802b110:	8871      	ldrh	r1, [r6, #2]
 802b112:	1a08      	subs	r0, r1, r0
 802b114:	2804      	cmp	r0, #4
 802b116:	f0c0 8094 	bcc.w	802b242 <ATT_Build_Find_Info_Rsp+0x1fe>
 802b11a:	f1be 0f01 	cmp.w	lr, #1
 802b11e:	f040 8090 	bne.w	802b242 <ATT_Build_Find_Info_Rsp+0x1fe>
 802b122:	462f      	mov	r7, r5
 802b124:	4635      	mov	r5, r6
 802b126:	f10c 0604 	add.w	r6, ip, #4
 802b12a:	4658      	mov	r0, fp
 802b12c:	2202      	movs	r2, #2
 802b12e:	4643      	mov	r3, r8
 802b130:	4664      	mov	r4, ip
 802b132:	b2b1      	uxth	r1, r6
 802b134:	f001 f8b5 	bl	802c2a2 <ACL_Set_Data>
 802b138:	1da0      	adds	r0, r4, #6
 802b13a:	2202      	movs	r2, #2
 802b13c:	9b01      	ldr	r3, [sp, #4]
 802b13e:	b281      	uxth	r1, r0
 802b140:	4658      	mov	r0, fp
 802b142:	f001 f8ae 	bl	802c2a2 <ACL_Set_Data>
 802b146:	f8b8 0000 	ldrh.w	r0, [r8]
 802b14a:	4287      	cmp	r7, r0
 802b14c:	d075      	beq.n	802b23a <ATT_Build_Find_Info_Rsp+0x1f6>
 802b14e:	e9dd 2402 	ldrd	r2, r4, [sp, #8]
 802b152:	46b4      	mov	ip, r6
 802b154:	462e      	mov	r6, r5
 802b156:	f04f 0e01 	mov.w	lr, #1
 802b15a:	463d      	mov	r5, r7
 802b15c:	4639      	mov	r1, r7
 802b15e:	e7c1      	b.n	802b0e4 <ATT_Build_Find_Info_Rsp+0xa0>
 802b160:	4653      	mov	r3, sl
 802b162:	f833 0f1c 	ldrh.w	r0, [r3, #28]!
 802b166:	4548      	cmp	r0, r9
 802b168:	d35f      	bcc.n	802b22a <ATT_Build_Find_Info_Rsp+0x1e6>
 802b16a:	42a8      	cmp	r0, r5
 802b16c:	d866      	bhi.n	802b23c <ATT_Build_Find_Info_Rsp+0x1f8>
 802b16e:	fa1f f08c 	uxth.w	r0, ip
 802b172:	f89a 7023 	ldrb.w	r7, [sl, #35]	@ 0x23
 802b176:	b330      	cbz	r0, 802b1c6 <ATT_Build_Find_Info_Rsp+0x182>
 802b178:	4577      	cmp	r7, lr
 802b17a:	d162      	bne.n	802b242 <ATT_Build_Find_Info_Rsp+0x1fe>
 802b17c:	8871      	ldrh	r1, [r6, #2]
 802b17e:	1a08      	subs	r0, r1, r0
 802b180:	2804      	cmp	r0, #4
 802b182:	d302      	bcc.n	802b18a <ATT_Build_Find_Info_Rsp+0x146>
 802b184:	f1be 0f01 	cmp.w	lr, #1
 802b188:	d004      	beq.n	802b194 <ATT_Build_Find_Info_Rsp+0x150>
 802b18a:	2812      	cmp	r0, #18
 802b18c:	d359      	bcc.n	802b242 <ATT_Build_Find_Info_Rsp+0x1fe>
 802b18e:	f1be 0f02 	cmp.w	lr, #2
 802b192:	d156      	bne.n	802b242 <ATT_Build_Find_Info_Rsp+0x1fe>
 802b194:	f10c 0804 	add.w	r8, ip, #4
 802b198:	4658      	mov	r0, fp
 802b19a:	2202      	movs	r2, #2
 802b19c:	4664      	mov	r4, ip
 802b19e:	4677      	mov	r7, lr
 802b1a0:	fa1f f188 	uxth.w	r1, r8
 802b1a4:	f001 f87d 	bl	802c2a2 <ACL_Set_Data>
 802b1a8:	4620      	mov	r0, r4
 802b1aa:	f10a 0308 	add.w	r3, sl, #8
 802b1ae:	1da0      	adds	r0, r4, #6
 802b1b0:	b281      	uxth	r1, r0
 802b1b2:	4658      	mov	r0, fp
 802b1b4:	2f01      	cmp	r7, #1
 802b1b6:	d123      	bne.n	802b200 <ATT_Build_Find_Info_Rsp+0x1bc>
 802b1b8:	2202      	movs	r2, #2
 802b1ba:	f001 f872 	bl	802c2a2 <ACL_Set_Data>
 802b1be:	f04f 0e01 	mov.w	lr, #1
 802b1c2:	46c4      	mov	ip, r8
 802b1c4:	e024      	b.n	802b210 <ATT_Build_Find_Info_Rsp+0x1cc>
 802b1c6:	f8db 0020 	ldr.w	r0, [fp, #32]
 802b1ca:	2105      	movs	r1, #5
 802b1cc:	f10a 0308 	add.w	r3, sl, #8
 802b1d0:	7101      	strb	r1, [r0, #4]
 802b1d2:	f8db 0020 	ldr.w	r0, [fp, #32]
 802b1d6:	7147      	strb	r7, [r0, #5]
 802b1d8:	f8db 0020 	ldr.w	r0, [fp, #32]
 802b1dc:	f8ba 101c 	ldrh.w	r1, [sl, #28]
 802b1e0:	7181      	strb	r1, [r0, #6]
 802b1e2:	0a09      	lsrs	r1, r1, #8
 802b1e4:	2f01      	cmp	r7, #1
 802b1e6:	71c1      	strb	r1, [r0, #7]
 802b1e8:	d115      	bne.n	802b216 <ATT_Build_Find_Info_Rsp+0x1d2>
 802b1ea:	f8db 0020 	ldr.w	r0, [fp, #32]
 802b1ee:	8819      	ldrh	r1, [r3, #0]
 802b1f0:	f04f 0c06 	mov.w	ip, #6
 802b1f4:	f04f 0e01 	mov.w	lr, #1
 802b1f8:	7201      	strb	r1, [r0, #8]
 802b1fa:	0a09      	lsrs	r1, r1, #8
 802b1fc:	7241      	strb	r1, [r0, #9]
 802b1fe:	e014      	b.n	802b22a <ATT_Build_Find_Info_Rsp+0x1e6>
 802b200:	2210      	movs	r2, #16
 802b202:	f001 f84e 	bl	802c2a2 <ACL_Set_Data>
 802b206:	46a4      	mov	ip, r4
 802b208:	f04f 0e02 	mov.w	lr, #2
 802b20c:	f104 0c12 	add.w	ip, r4, #18
 802b210:	e9dd 2402 	ldrd	r2, r4, [sp, #8]
 802b214:	e009      	b.n	802b22a <ATT_Build_Find_Info_Rsp+0x1e6>
 802b216:	4658      	mov	r0, fp
 802b218:	2108      	movs	r1, #8
 802b21a:	2210      	movs	r2, #16
 802b21c:	f001 f841 	bl	802c2a2 <ACL_Set_Data>
 802b220:	e9dd 2402 	ldrd	r2, r4, [sp, #8]
 802b224:	f04f 0c14 	mov.w	ip, #20
 802b228:	46be      	mov	lr, r7
 802b22a:	f8da a000 	ldr.w	sl, [sl]
 802b22e:	45a2      	cmp	sl, r4
 802b230:	d196      	bne.n	802b160 <ATT_Build_Find_Info_Rsp+0x11c>
 802b232:	9804      	ldr	r0, [sp, #16]
 802b234:	6800      	ldr	r0, [r0, #0]
 802b236:	9004      	str	r0, [sp, #16]
 802b238:	e741      	b.n	802b0be <ATT_Build_Find_Info_Rsp+0x7a>
 802b23a:	46b4      	mov	ip, r6
 802b23c:	ea5f 400c 	movs.w	r0, ip, lsl #16
 802b240:	d004      	beq.n	802b24c <ATT_Build_Find_Info_Rsp+0x208>
 802b242:	f10c 0004 	add.w	r0, ip, #4
 802b246:	f8ab 0004 	strh.w	r0, [fp, #4]
 802b24a:	e724      	b.n	802b096 <ATT_Build_Find_Info_Rsp+0x52>
 802b24c:	200a      	movs	r0, #10
 802b24e:	e71d      	b.n	802b08c <ATT_Build_Find_Info_Rsp+0x48>

0802b250 <__arm_cp.20_0>:
 802b250:	20009f5c 	.word	0x20009f5c

0802b254 <ATT_Build_Exchg_Mtu_Rsp>:
 802b254:	b510      	push	{r4, lr}
 802b256:	4614      	mov	r4, r2
 802b258:	888a      	ldrh	r2, [r1, #4]
 802b25a:	2a07      	cmp	r2, #7
 802b25c:	d10c      	bne.n	802b278 <ATT_Build_Exchg_Mtu_Rsp+0x24>
 802b25e:	6843      	ldr	r3, [r0, #4]
 802b260:	059a      	lsls	r2, r3, #22
 802b262:	d420      	bmi.n	802b2a6 <ATT_Build_Exchg_Mtu_Rsp+0x52>
 802b264:	6a09      	ldr	r1, [r1, #32]
 802b266:	794a      	ldrb	r2, [r1, #5]
 802b268:	7989      	ldrb	r1, [r1, #6]
 802b26a:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
 802b26e:	b28a      	uxth	r2, r1
 802b270:	2a17      	cmp	r2, #23
 802b272:	d207      	bcs.n	802b284 <ATT_Build_Exchg_Mtu_Rsp+0x30>
 802b274:	2217      	movs	r2, #23
 802b276:	e00e      	b.n	802b296 <ATT_Build_Exchg_Mtu_Rsp+0x42>
 802b278:	2004      	movs	r0, #4
 802b27a:	2102      	movs	r1, #2
 802b27c:	2200      	movs	r2, #0
 802b27e:	f000 f850 	bl	802b322 <OUTLINED_FUNCTION_4>
 802b282:	e01c      	b.n	802b2be <ATT_Build_Exchg_Mtu_Rsp+0x6a>
 802b284:	490f      	ldr	r1, [pc, #60]	@ (802b2c4 <__arm_cp.21_0>)
 802b286:	f8b1 11d6 	ldrh.w	r1, [r1, #470]	@ 0x1d6
 802b28a:	428a      	cmp	r2, r1
 802b28c:	bf28      	it	cs
 802b28e:	460a      	movcs	r2, r1
 802b290:	2917      	cmp	r1, #23
 802b292:	bf38      	it	cc
 802b294:	2217      	movcc	r2, #23
 802b296:	f443 7100 	orr.w	r1, r3, #512	@ 0x200
 802b29a:	8042      	strh	r2, [r0, #2]
 802b29c:	6041      	str	r1, [r0, #4]
 802b29e:	8801      	ldrh	r1, [r0, #0]
 802b2a0:	2001      	movs	r0, #1
 802b2a2:	f7fc f8fd 	bl	80274a0 <EVT_aci_att_exchange_mtu_resp>
 802b2a6:	6a20      	ldr	r0, [r4, #32]
 802b2a8:	2103      	movs	r1, #3
 802b2aa:	7101      	strb	r1, [r0, #4]
 802b2ac:	4905      	ldr	r1, [pc, #20]	@ (802b2c4 <__arm_cp.21_0>)
 802b2ae:	6a20      	ldr	r0, [r4, #32]
 802b2b0:	f8b1 11d6 	ldrh.w	r1, [r1, #470]	@ 0x1d6
 802b2b4:	7141      	strb	r1, [r0, #5]
 802b2b6:	0a09      	lsrs	r1, r1, #8
 802b2b8:	7181      	strb	r1, [r0, #6]
 802b2ba:	2007      	movs	r0, #7
 802b2bc:	80a0      	strh	r0, [r4, #4]
 802b2be:	2000      	movs	r0, #0
 802b2c0:	bd10      	pop	{r4, pc}
 802b2c2:	bf00      	nop

0802b2c4 <__arm_cp.21_0>:
 802b2c4:	20009f5c 	.word	0x20009f5c

0802b2c8 <ATT_Build_Notif_Or_Ind>:
 802b2c8:	b570      	push	{r4, r5, r6, lr}
 802b2ca:	9c04      	ldr	r4, [sp, #16]
 802b2cc:	b19c      	cbz	r4, 802b2f6 <ATT_Build_Notif_Or_Ind+0x2e>
 802b2ce:	4616      	mov	r6, r2
 802b2d0:	4605      	mov	r5, r0
 802b2d2:	6a20      	ldr	r0, [r4, #32]
 802b2d4:	0a0a      	lsrs	r2, r1, #8
 802b2d6:	7141      	strb	r1, [r0, #5]
 802b2d8:	7182      	strb	r2, [r0, #6]
 802b2da:	1ef0      	subs	r0, r6, #3
 802b2dc:	2107      	movs	r1, #7
 802b2de:	b282      	uxth	r2, r0
 802b2e0:	4620      	mov	r0, r4
 802b2e2:	f000 ffde 	bl	802c2a2 <ACL_Set_Data>
 802b2e6:	1d30      	adds	r0, r6, #4
 802b2e8:	80a0      	strh	r0, [r4, #4]
 802b2ea:	201d      	movs	r0, #29
 802b2ec:	2d01      	cmp	r5, #1
 802b2ee:	bf08      	it	eq
 802b2f0:	201b      	moveq	r0, #27
 802b2f2:	6a21      	ldr	r1, [r4, #32]
 802b2f4:	7108      	strb	r0, [r1, #4]
 802b2f6:	bd70      	pop	{r4, r5, r6, pc}

0802b2f8 <OUTLINED_FUNCTION_0>:
 802b2f8:	460d      	mov	r5, r1
 802b2fa:	6841      	ldr	r1, [r0, #4]
 802b2fc:	4614      	mov	r4, r2
 802b2fe:	f441 2100 	orr.w	r1, r1, #524288	@ 0x80000
 802b302:	6041      	str	r1, [r0, #4]
 802b304:	f7fd bc64 	b.w	8028bd0 <GATT_Evt_Handle>

0802b308 <OUTLINED_FUNCTION_1>:
 802b308:	2200      	movs	r2, #0
 802b30a:	4623      	mov	r3, r4
 802b30c:	2500      	movs	r5, #0
 802b30e:	f7fe bfb1 	b.w	802a274 <ATT_Build_Error_Rsp>

0802b312 <OUTLINED_FUNCTION_2>:
 802b312:	7941      	ldrb	r1, [r0, #5]
 802b314:	7980      	ldrb	r0, [r0, #6]
 802b316:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
 802b31a:	4770      	bx	lr

0802b31c <OUTLINED_FUNCTION_3>:
 802b31c:	2201      	movs	r2, #1
 802b31e:	f7fe bfd2 	b.w	802a2c6 <ATT_Check_Perm>

0802b322 <OUTLINED_FUNCTION_4>:
 802b322:	4623      	mov	r3, r4
 802b324:	f7fe bfa6 	b.w	802a274 <ATT_Build_Error_Rsp>

0802b328 <OUTLINED_FUNCTION_5>:
 802b328:	4648      	mov	r0, r9
 802b32a:	210b      	movs	r1, #11
 802b32c:	9a07      	ldr	r2, [sp, #28]
 802b32e:	f000 bf76 	b.w	802c21e <ACL_Cmp_Data>

0802b332 <OUTLINED_FUNCTION_6>:
 802b332:	2200      	movs	r2, #0
 802b334:	465b      	mov	r3, fp
 802b336:	2500      	movs	r5, #0
 802b338:	f7fe bf9c 	b.w	802a274 <ATT_Build_Error_Rsp>

0802b33c <GATT_Gap_Add_Service>:
 802b33c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 802b340:	b08f      	sub	sp, #60	@ 0x3c
 802b342:	4680      	mov	r8, r0
 802b344:	4866      	ldr	r0, [pc, #408]	@ (802b4e0 <__arm_cp.0_0>)
 802b346:	f8df 91a0 	ldr.w	r9, [pc, #416]	@ 802b4e8 <__arm_cp.0_2>
 802b34a:	4617      	mov	r7, r2
 802b34c:	460d      	mov	r5, r1
 802b34e:	f10d 022a 	add.w	r2, sp, #42	@ 0x2a
 802b352:	461e      	mov	r6, r3
 802b354:	9009      	str	r0, [sp, #36]	@ 0x24
 802b356:	4863      	ldr	r0, [pc, #396]	@ (802b4e4 <__arm_cp.0_1>)
 802b358:	9200      	str	r2, [sp, #0]
 802b35a:	2209      	movs	r2, #9
 802b35c:	9008      	str	r0, [sp, #32]
 802b35e:	f44f 50c0 	mov.w	r0, #6144	@ 0x1800
 802b362:	f899 1037 	ldrb.w	r1, [r9, #55]	@ 0x37
 802b366:	f8ad 002c 	strh.w	r0, [sp, #44]	@ 0x2c
 802b36a:	f899 0034 	ldrb.w	r0, [r9, #52]	@ 0x34
 802b36e:	2900      	cmp	r1, #0
 802b370:	bf08      	it	eq
 802b372:	2207      	moveq	r2, #7
 802b374:	a90b      	add	r1, sp, #44	@ 0x2c
 802b376:	4410      	add	r0, r2
 802b378:	2201      	movs	r2, #1
 802b37a:	2401      	movs	r4, #1
 802b37c:	b2c3      	uxtb	r3, r0
 802b37e:	2001      	movs	r0, #1
 802b380:	f7fd fffa 	bl	8029378 <aci_gatt_add_service>
 802b384:	2800      	cmp	r0, #0
 802b386:	d158      	bne.n	802b43a <GATT_Gap_Add_Service+0xfe>
 802b388:	f8bd 002a 	ldrh.w	r0, [sp, #42]	@ 0x2a
 802b38c:	2100      	movs	r1, #0
 802b38e:	f88d 4006 	strb.w	r4, [sp, #6]
 802b392:	f8ad 5018 	strh.w	r5, [sp, #24]
 802b396:	f88d 401e 	strb.w	r4, [sp, #30]
 802b39a:	f88d 101b 	strb.w	r1, [sp, #27]
 802b39e:	8038      	strh	r0, [r7, #0]
 802b3a0:	f8ad 0004 	strh.w	r0, [sp, #4]
 802b3a4:	f44f 5028 	mov.w	r0, #10752	@ 0x2a00
 802b3a8:	4f50      	ldr	r7, [pc, #320]	@ (802b4ec <__arm_cp.0_3>)
 802b3aa:	f8ad 0008 	strh.w	r0, [sp, #8]
 802b3ae:	f240 7001 	movw	r0, #1793	@ 0x701
 802b3b2:	f8ad 001c 	strh.w	r0, [sp, #28]
 802b3b6:	8c38      	ldrh	r0, [r7, #32]
 802b3b8:	0740      	lsls	r0, r0, #29
 802b3ba:	f04f 0002 	mov.w	r0, #2
 802b3be:	bf58      	it	pl
 802b3c0:	200a      	movpl	r0, #10
 802b3c2:	f88d 001a 	strb.w	r0, [sp, #26]
 802b3c6:	a80a      	add	r0, sp, #40	@ 0x28
 802b3c8:	a901      	add	r1, sp, #4
 802b3ca:	f7fe f873 	bl	80294b4 <GATT_Add_Char_Core>
 802b3ce:	bba0      	cbnz	r0, 802b43a <GATT_Gap_Add_Service+0xfe>
 802b3d0:	f8bd 1028 	ldrh.w	r1, [sp, #40]	@ 0x28
 802b3d4:	f8bd 002a 	ldrh.w	r0, [sp, #42]	@ 0x2a
 802b3d8:	2d08      	cmp	r5, #8
 802b3da:	8031      	strh	r1, [r6, #0]
 802b3dc:	ae08      	add	r6, sp, #32
 802b3de:	9600      	str	r6, [sp, #0]
 802b3e0:	bf28      	it	cs
 802b3e2:	2508      	movcs	r5, #8
 802b3e4:	2200      	movs	r2, #0
 802b3e6:	462b      	mov	r3, r5
 802b3e8:	2400      	movs	r4, #0
 802b3ea:	f7fe fa05 	bl	80297f8 <aci_gatt_update_char_value>
 802b3ee:	bb20      	cbnz	r0, 802b43a <GATT_Gap_Add_Service+0xfe>
 802b3f0:	2002      	movs	r0, #2
 802b3f2:	f88d 401e 	strb.w	r4, [sp, #30]
 802b3f6:	f8ad 0018 	strh.w	r0, [sp, #24]
 802b3fa:	f642 2001 	movw	r0, #10753	@ 0x2a01
 802b3fe:	f8ad 0008 	strh.w	r0, [sp, #8]
 802b402:	8c38      	ldrh	r0, [r7, #32]
 802b404:	05c0      	lsls	r0, r0, #23
 802b406:	f04f 000a 	mov.w	r0, #10
 802b40a:	bf58      	it	pl
 802b40c:	2002      	movpl	r0, #2
 802b40e:	f88d 001a 	strb.w	r0, [sp, #26]
 802b412:	a80a      	add	r0, sp, #40	@ 0x28
 802b414:	a901      	add	r1, sp, #4
 802b416:	f7fe f84d 	bl	80294b4 <GATT_Add_Char_Core>
 802b41a:	b970      	cbnz	r0, 802b43a <GATT_Gap_Add_Service+0xfe>
 802b41c:	f8bd 1028 	ldrh.w	r1, [sp, #40]	@ 0x28
 802b420:	9816      	ldr	r0, [sp, #88]	@ 0x58
 802b422:	2200      	movs	r2, #0
 802b424:	2302      	movs	r3, #2
 802b426:	8001      	strh	r1, [r0, #0]
 802b428:	2000      	movs	r0, #0
 802b42a:	9600      	str	r6, [sp, #0]
 802b42c:	f8ad 0020 	strh.w	r0, [sp, #32]
 802b430:	f8bd 002a 	ldrh.w	r0, [sp, #42]	@ 0x2a
 802b434:	f7fe f9e0 	bl	80297f8 <aci_gatt_update_char_value>
 802b438:	b118      	cbz	r0, 802b442 <GATT_Gap_Add_Service+0x106>
 802b43a:	2097      	movs	r0, #151	@ 0x97
 802b43c:	b00f      	add	sp, #60	@ 0x3c
 802b43e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802b442:	ea5f 70c8 	movs.w	r0, r8, lsl #31
 802b446:	d126      	bne.n	802b496 <GATT_Gap_Add_Service+0x15a>
 802b448:	f899 0037 	ldrb.w	r0, [r9, #55]	@ 0x37
 802b44c:	b308      	cbz	r0, 802b492 <GATT_Gap_Add_Service+0x156>
 802b44e:	2000      	movs	r0, #0
 802b450:	2401      	movs	r4, #1
 802b452:	f88d 001e 	strb.w	r0, [sp, #30]
 802b456:	f88d 001c 	strb.w	r0, [sp, #28]
 802b45a:	2002      	movs	r0, #2
 802b45c:	f8ad 4018 	strh.w	r4, [sp, #24]
 802b460:	f88d 001a 	strb.w	r0, [sp, #26]
 802b464:	f642 20a6 	movw	r0, #10918	@ 0x2aa6
 802b468:	f8ad 0008 	strh.w	r0, [sp, #8]
 802b46c:	a80a      	add	r0, sp, #40	@ 0x28
 802b46e:	a901      	add	r1, sp, #4
 802b470:	f7fe f820 	bl	80294b4 <GATT_Add_Char_Core>
 802b474:	2800      	cmp	r0, #0
 802b476:	d1e0      	bne.n	802b43a <GATT_Gap_Add_Service+0xfe>
 802b478:	f8bd 1028 	ldrh.w	r1, [sp, #40]	@ 0x28
 802b47c:	f8bd 002a 	ldrh.w	r0, [sp, #42]	@ 0x2a
 802b480:	2200      	movs	r2, #0
 802b482:	2301      	movs	r3, #1
 802b484:	f88d 4020 	strb.w	r4, [sp, #32]
 802b488:	9600      	str	r6, [sp, #0]
 802b48a:	f7fe f9b5 	bl	80297f8 <aci_gatt_update_char_value>
 802b48e:	2800      	cmp	r0, #0
 802b490:	d1d3      	bne.n	802b43a <GATT_Gap_Add_Service+0xfe>
 802b492:	2000      	movs	r0, #0
 802b494:	e7d2      	b.n	802b43c <GATT_Gap_Add_Service+0x100>
 802b496:	2000      	movs	r0, #0
 802b498:	f88d 001c 	strb.w	r0, [sp, #28]
 802b49c:	2002      	movs	r0, #2
 802b49e:	f88d 001a 	strb.w	r0, [sp, #26]
 802b4a2:	2008      	movs	r0, #8
 802b4a4:	f8ad 0018 	strh.w	r0, [sp, #24]
 802b4a8:	f642 2004 	movw	r0, #10756	@ 0x2a04
 802b4ac:	f8ad 0008 	strh.w	r0, [sp, #8]
 802b4b0:	a80a      	add	r0, sp, #40	@ 0x28
 802b4b2:	a901      	add	r1, sp, #4
 802b4b4:	f7fd fffe 	bl	80294b4 <GATT_Add_Char_Core>
 802b4b8:	2800      	cmp	r0, #0
 802b4ba:	d1be      	bne.n	802b43a <GATT_Gap_Add_Service+0xfe>
 802b4bc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802b4c0:	f8bd 1028 	ldrh.w	r1, [sp, #40]	@ 0x28
 802b4c4:	2200      	movs	r2, #0
 802b4c6:	2308      	movs	r3, #8
 802b4c8:	9600      	str	r6, [sp, #0]
 802b4ca:	9008      	str	r0, [sp, #32]
 802b4cc:	4808      	ldr	r0, [pc, #32]	@ (802b4f0 <__arm_cp.0_4>)
 802b4ce:	9009      	str	r0, [sp, #36]	@ 0x24
 802b4d0:	f8bd 002a 	ldrh.w	r0, [sp, #42]	@ 0x2a
 802b4d4:	f7fe f990 	bl	80297f8 <aci_gatt_update_char_value>
 802b4d8:	2800      	cmp	r0, #0
 802b4da:	d1ae      	bne.n	802b43a <GATT_Gap_Add_Service+0xfe>
 802b4dc:	e7b4      	b.n	802b448 <GATT_Gap_Add_Service+0x10c>
 802b4de:	bf00      	nop

0802b4e0 <__arm_cp.0_0>:
 802b4e0:	21425732 	.word	0x21425732

0802b4e4 <__arm_cp.0_1>:
 802b4e4:	334d5453 	.word	0x334d5453

0802b4e8 <__arm_cp.0_2>:
 802b4e8:	20009f5c 	.word	0x20009f5c

0802b4ec <__arm_cp.0_3>:
 802b4ec:	20009f34 	.word	0x20009f34

0802b4f0 <__arm_cp.0_4>:
 802b4f0:	ffff0000 	.word	0xffff0000

0802b4f4 <GATT_Compute_Database_Hash>:
 802b4f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802b4f8:	b08b      	sub	sp, #44	@ 0x2c
 802b4fa:	2700      	movs	r7, #0
 802b4fc:	9201      	str	r2, [sp, #4]
 802b4fe:	4606      	mov	r6, r0
 802b500:	460d      	mov	r5, r1
 802b502:	e9cd 7709 	strd	r7, r7, [sp, #36]	@ 0x24
 802b506:	e9cd 7707 	strd	r7, r7, [sp, #28]
 802b50a:	a807      	add	r0, sp, #28
 802b50c:	f7de fa5e 	bl	80099cc <BLEPLAT_AesCmacSetKey>
 802b510:	4c3a      	ldr	r4, [pc, #232]	@ (802b5fc <__arm_cp.0_0>)
 802b512:	f106 0908 	add.w	r9, r6, #8
 802b516:	f8ad 700c 	strh.w	r7, [sp, #12]
 802b51a:	ae03      	add	r6, sp, #12
 802b51c:	f642 1a01 	movw	sl, #10497	@ 0x2901
 802b520:	f8cd 9008 	str.w	r9, [sp, #8]
 802b524:	f8d9 9000 	ldr.w	r9, [r9]
 802b528:	9802      	ldr	r0, [sp, #8]
 802b52a:	4581      	cmp	r9, r0
 802b52c:	d052      	beq.n	802b5d4 <GATT_Compute_Database_Hash+0xe0>
 802b52e:	b2b8      	uxth	r0, r7
 802b530:	f109 0128 	add.w	r1, r9, #40	@ 0x28
 802b534:	f000 fb98 	bl	802bc68 <OUTLINED_FUNCTION_0>
 802b538:	f8bd 000c 	ldrh.w	r0, [sp, #12]
 802b53c:	f109 012a 	add.w	r1, r9, #42	@ 0x2a
 802b540:	f000 fb92 	bl	802bc68 <OUTLINED_FUNCTION_0>
 802b544:	f8bd 000c 	ldrh.w	r0, [sp, #12]
 802b548:	f899 102c 	ldrb.w	r1, [r9, #44]	@ 0x2c
 802b54c:	2210      	movs	r2, #16
 802b54e:	4633      	mov	r3, r6
 802b550:	2901      	cmp	r1, #1
 802b552:	4428      	add	r0, r5
 802b554:	f109 0108 	add.w	r1, r9, #8
 802b558:	bf08      	it	eq
 802b55a:	2202      	moveq	r2, #2
 802b55c:	47a0      	blx	r4
 802b55e:	f109 0820 	add.w	r8, r9, #32
 802b562:	4647      	mov	r7, r8
 802b564:	683f      	ldr	r7, [r7, #0]
 802b566:	4547      	cmp	r7, r8
 802b568:	d031      	beq.n	802b5ce <GATT_Compute_Database_Hash+0xda>
 802b56a:	f897 0023 	ldrb.w	r0, [r7, #35]	@ 0x23
 802b56e:	2801      	cmp	r0, #1
 802b570:	d1f8      	bne.n	802b564 <GATT_Compute_Database_Hash+0x70>
 802b572:	46bb      	mov	fp, r7
 802b574:	f83b 0f08 	ldrh.w	r0, [fp, #8]!
 802b578:	eba0 010a 	sub.w	r1, r0, sl
 802b57c:	2905      	cmp	r1, #5
 802b57e:	d20b      	bcs.n	802b598 <GATT_Compute_Database_Hash+0xa4>
 802b580:	f8bd 000c 	ldrh.w	r0, [sp, #12]
 802b584:	f107 011c 	add.w	r1, r7, #28
 802b588:	f000 fb7c 	bl	802bc84 <OUTLINED_FUNCTION_3>
 802b58c:	f8bd 000c 	ldrh.w	r0, [sp, #12]
 802b590:	4659      	mov	r1, fp
 802b592:	f000 fb77 	bl	802bc84 <OUTLINED_FUNCTION_3>
 802b596:	e7e5      	b.n	802b564 <GATT_Compute_Database_Hash+0x70>
 802b598:	f642 0102 	movw	r1, #10242	@ 0x2802
 802b59c:	1a41      	subs	r1, r0, r1
 802b59e:	2902      	cmp	r1, #2
 802b5a0:	d302      	bcc.n	802b5a8 <GATT_Compute_Database_Hash+0xb4>
 802b5a2:	f5b0 5f24 	cmp.w	r0, #10496	@ 0x2900
 802b5a6:	d1dd      	bne.n	802b564 <GATT_Compute_Database_Hash+0x70>
 802b5a8:	f8bd 000c 	ldrh.w	r0, [sp, #12]
 802b5ac:	f107 011c 	add.w	r1, r7, #28
 802b5b0:	f000 fb5a 	bl	802bc68 <OUTLINED_FUNCTION_0>
 802b5b4:	f8bd 000c 	ldrh.w	r0, [sp, #12]
 802b5b8:	4659      	mov	r1, fp
 802b5ba:	f000 fb55 	bl	802bc68 <OUTLINED_FUNCTION_0>
 802b5be:	f8bd 000c 	ldrh.w	r0, [sp, #12]
 802b5c2:	69b9      	ldr	r1, [r7, #24]
 802b5c4:	8bfa      	ldrh	r2, [r7, #30]
 802b5c6:	4633      	mov	r3, r6
 802b5c8:	4428      	add	r0, r5
 802b5ca:	47a0      	blx	r4
 802b5cc:	e7ca      	b.n	802b564 <GATT_Compute_Database_Hash+0x70>
 802b5ce:	f8bd 700c 	ldrh.w	r7, [sp, #12]
 802b5d2:	e7a7      	b.n	802b524 <GATT_Compute_Database_Hash+0x30>
 802b5d4:	b2b9      	uxth	r1, r7
 802b5d6:	4628      	mov	r0, r5
 802b5d8:	f5b1 7f28 	cmp.w	r1, #672	@ 0x2a0
 802b5dc:	bf28      	it	cs
 802b5de:	f44f 7128 	movcs.w	r1, #672	@ 0x2a0
 802b5e2:	ae03      	add	r6, sp, #12
 802b5e4:	4632      	mov	r2, r6
 802b5e6:	f7de f9fc 	bl	80099e2 <BLEPLAT_AesCmacCompute>
 802b5ea:	9801      	ldr	r0, [sp, #4]
 802b5ec:	4631      	mov	r1, r6
 802b5ee:	2210      	movs	r2, #16
 802b5f0:	f003 fe6d 	bl	802f2ce <Memcpy_Rev>
 802b5f4:	b00b      	add	sp, #44	@ 0x2c
 802b5f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802b5fa:	bf00      	nop

0802b5fc <__arm_cp.0_0>:
 802b5fc:	0802bc4d 	.word	0x0802bc4d

0802b600 <GATT_Get_Change_Vs_Server_Database>:
 802b600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802b604:	f5ad 7d35 	sub.w	sp, sp, #724	@ 0x2d4
 802b608:	f8df 4468 	ldr.w	r4, [pc, #1128]	@ 802ba74 <__arm_cp.1_0>
 802b60c:	4683      	mov	fp, r0
 802b60e:	f44f 7028 	mov.w	r0, #672	@ 0x2a0
 802b612:	4615      	mov	r5, r2
 802b614:	460e      	mov	r6, r1
 802b616:	9008      	str	r0, [sp, #32]
 802b618:	8c20      	ldrh	r0, [r4, #32]
 802b61a:	f000 0022 	and.w	r0, r0, #34	@ 0x22
 802b61e:	2820      	cmp	r0, #32
 802b620:	d107      	bne.n	802b632 <GATT_Get_Change_Vs_Server_Database+0x32>
 802b622:	f8df 0454 	ldr.w	r0, [pc, #1108]	@ 802ba78 <__arm_cp.1_1>
 802b626:	a90d      	add	r1, sp, #52	@ 0x34
 802b628:	aa09      	add	r2, sp, #36	@ 0x24
 802b62a:	f500 70ec 	add.w	r0, r0, #472	@ 0x1d8
 802b62e:	f7ff ff61 	bl	802b4f4 <GATT_Compute_Database_Hash>
 802b632:	f8bb 0000 	ldrh.w	r0, [fp]
 802b636:	a908      	add	r1, sp, #32
 802b638:	aa0d      	add	r2, sp, #52	@ 0x34
 802b63a:	f001 fd6e 	bl	802d11a <SMP_Retrieve_GATT_Data>
 802b63e:	b118      	cbz	r0, 802b648 <GATT_Get_Change_Vs_Server_Database+0x48>
 802b640:	f50d 7d35 	add.w	sp, sp, #724	@ 0x2d4
 802b644:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802b648:	8c20      	ldrh	r0, [r4, #32]
 802b64a:	0681      	lsls	r1, r0, #26
 802b64c:	d40e      	bmi.n	802b66c <GATT_Get_Change_Vs_Server_Database+0x6c>
 802b64e:	9808      	ldr	r0, [sp, #32]
 802b650:	2804      	cmp	r0, #4
 802b652:	d314      	bcc.n	802b67e <GATT_Get_Change_Vs_Server_Database+0x7e>
 802b654:	3801      	subs	r0, #1
 802b656:	2104      	movs	r1, #4
 802b658:	040a      	lsls	r2, r1, #16
 802b65a:	d012      	beq.n	802b682 <GATT_Get_Change_Vs_Server_Database+0x82>
 802b65c:	aa0d      	add	r2, sp, #52	@ 0x34
 802b65e:	5c12      	ldrb	r2, [r2, r0]
 802b660:	2a0b      	cmp	r2, #11
 802b662:	d10e      	bne.n	802b682 <GATT_Get_Change_Vs_Server_Database+0x82>
 802b664:	9008      	str	r0, [sp, #32]
 802b666:	3901      	subs	r1, #1
 802b668:	3801      	subs	r0, #1
 802b66a:	e7f5      	b.n	802b658 <GATT_Get_Change_Vs_Server_Database+0x58>
 802b66c:	0780      	lsls	r0, r0, #30
 802b66e:	f64f 79ff 	movw	r9, #65535	@ 0xffff
 802b672:	f100 81b3 	bmi.w	802b9dc <GATT_Get_Change_Vs_Server_Database+0x3dc>
 802b676:	9808      	ldr	r0, [sp, #32]
 802b678:	2810      	cmp	r0, #16
 802b67a:	f080 81b5 	bcs.w	802b9e8 <GATT_Get_Change_Vs_Server_Database+0x3e8>
 802b67e:	2097      	movs	r0, #151	@ 0x97
 802b680:	e7de      	b.n	802b640 <GATT_Get_Change_Vs_Server_Database+0x40>
 802b682:	f8df 03f4 	ldr.w	r0, [pc, #1012]	@ 802ba78 <__arm_cp.1_1>
 802b686:	e9cd 6501 	strd	r6, r5, [sp, #4]
 802b68a:	ae05      	add	r6, sp, #20
 802b68c:	f04f 0800 	mov.w	r8, #0
 802b690:	f64f 79ff 	movw	r9, #65535	@ 0xffff
 802b694:	2101      	movs	r1, #1
 802b696:	f04f 0a01 	mov.w	sl, #1
 802b69a:	f8cd b000 	str.w	fp, [sp]
 802b69e:	f500 70f0 	add.w	r0, r0, #480	@ 0x1e0
 802b6a2:	9003      	str	r0, [sp, #12]
 802b6a4:	2000      	movs	r0, #0
 802b6a6:	9004      	str	r0, [sp, #16]
 802b6a8:	ac0d      	add	r4, sp, #52	@ 0x34
 802b6aa:	b2c8      	uxtb	r0, r1
 802b6ac:	2801      	cmp	r0, #1
 802b6ae:	f040 81d1 	bne.w	802ba54 <GATT_Get_Change_Vs_Server_Database+0x454>
 802b6b2:	fa1f f788 	uxth.w	r7, r8
 802b6b6:	f10d 001e 	add.w	r0, sp, #30
 802b6ba:	2202      	movs	r2, #2
 802b6bc:	19e5      	adds	r5, r4, r7
 802b6be:	4629      	mov	r1, r5
 802b6c0:	f7f8 ff42 	bl	8024548 <ble_memcpy>
 802b6c4:	f8bd 001e 	ldrh.w	r0, [sp, #30]
 802b6c8:	4631      	mov	r1, r6
 802b6ca:	aa06      	add	r2, sp, #24
 802b6cc:	f000 f9d6 	bl	802ba7c <GATT_Fetch_Handle>
 802b6d0:	2802      	cmp	r0, #2
 802b6d2:	d04d      	beq.n	802b770 <GATT_Get_Change_Vs_Server_Database+0x170>
 802b6d4:	2801      	cmp	r0, #1
 802b6d6:	d16b      	bne.n	802b7b0 <GATT_Get_Change_Vs_Server_Database+0x1b0>
 802b6d8:	9804      	ldr	r0, [sp, #16]
 802b6da:	0600      	lsls	r0, r0, #24
 802b6dc:	f040 80e0 	bne.w	802b8a0 <GATT_Get_Change_Vs_Server_Database+0x2a0>
 802b6e0:	f8dd b014 	ldr.w	fp, [sp, #20]
 802b6e4:	4628      	mov	r0, r5
 802b6e6:	2202      	movs	r2, #2
 802b6e8:	f10b 0628 	add.w	r6, fp, #40	@ 0x28
 802b6ec:	4631      	mov	r1, r6
 802b6ee:	f7f8 ffb3 	bl	8024658 <ble_memcmp>
 802b6f2:	3702      	adds	r7, #2
 802b6f4:	b9e8      	cbnz	r0, 802b732 <GATT_Get_Change_Vs_Server_Database+0x132>
 802b6f6:	a80d      	add	r0, sp, #52	@ 0x34
 802b6f8:	5dc1      	ldrb	r1, [r0, r7]
 802b6fa:	f89b 002c 	ldrb.w	r0, [fp, #44]	@ 0x2c
 802b6fe:	4288      	cmp	r0, r1
 802b700:	d117      	bne.n	802b732 <GATT_Get_Change_Vs_Server_Database+0x132>
 802b702:	2801      	cmp	r0, #1
 802b704:	d10a      	bne.n	802b71c <GATT_Get_Change_Vs_Server_Database+0x11c>
 802b706:	1ce9      	adds	r1, r5, #3
 802b708:	f10b 0008 	add.w	r0, fp, #8
 802b70c:	2202      	movs	r2, #2
 802b70e:	f7f8 ffa3 	bl	8024658 <ble_memcmp>
 802b712:	2800      	cmp	r0, #0
 802b714:	f000 80c8 	beq.w	802b8a8 <GATT_Get_Change_Vs_Server_Database+0x2a8>
 802b718:	a80d      	add	r0, sp, #52	@ 0x34
 802b71a:	5dc0      	ldrb	r0, [r0, r7]
 802b71c:	2802      	cmp	r0, #2
 802b71e:	d108      	bne.n	802b732 <GATT_Get_Change_Vs_Server_Database+0x132>
 802b720:	1ce9      	adds	r1, r5, #3
 802b722:	f10b 0008 	add.w	r0, fp, #8
 802b726:	2210      	movs	r2, #16
 802b728:	f7f8 ff96 	bl	8024658 <ble_memcmp>
 802b72c:	2800      	cmp	r0, #0
 802b72e:	f000 80bb 	beq.w	802b8a8 <GATT_Get_Change_Vs_Server_Database+0x2a8>
 802b732:	fa1f fa8a 	uxth.w	sl, sl
 802b736:	8836      	ldrh	r6, [r6, #0]
 802b738:	fa1f f089 	uxth.w	r0, r9
 802b73c:	45b2      	cmp	sl, r6
 802b73e:	bf98      	it	ls
 802b740:	46b2      	movls	sl, r6
 802b742:	42b0      	cmp	r0, r6
 802b744:	bf38      	it	cc
 802b746:	4606      	movcc	r6, r0
 802b748:	a90d      	add	r1, sp, #52	@ 0x34
 802b74a:	5dc8      	ldrb	r0, [r1, r7]
 802b74c:	2801      	cmp	r0, #1
 802b74e:	f04f 0013 	mov.w	r0, #19
 802b752:	bf08      	it	eq
 802b754:	2005      	moveq	r0, #5
 802b756:	f000 fa9a 	bl	802bc8e <OUTLINED_FUNCTION_4>
 802b75a:	d94b      	bls.n	802b7f4 <GATT_Get_Change_Vs_Server_Database+0x1f4>
 802b75c:	4439      	add	r1, r7
 802b75e:	f10d 001e 	add.w	r0, sp, #30
 802b762:	2202      	movs	r2, #2
 802b764:	4664      	mov	r4, ip
 802b766:	f7f8 feef 	bl	8024548 <ble_memcpy>
 802b76a:	46a4      	mov	ip, r4
 802b76c:	2000      	movs	r0, #0
 802b76e:	e042      	b.n	802b7f6 <GATT_Get_Change_Vs_Server_Database+0x1f6>
 802b770:	9804      	ldr	r0, [sp, #16]
 802b772:	0600      	lsls	r0, r0, #24
 802b774:	f040 8094 	bne.w	802b8a0 <GATT_Get_Change_Vs_Server_Database+0x2a0>
 802b778:	9f05      	ldr	r7, [sp, #20]
 802b77a:	4628      	mov	r0, r5
 802b77c:	2202      	movs	r2, #2
 802b77e:	78ae      	ldrb	r6, [r5, #2]
 802b780:	f107 041c 	add.w	r4, r7, #28
 802b784:	4621      	mov	r1, r4
 802b786:	f7f8 ff67 	bl	8024658 <ble_memcmp>
 802b78a:	2800      	cmp	r0, #0
 802b78c:	f040 8095 	bne.w	802b8ba <GATT_Get_Change_Vs_Server_Database+0x2ba>
 802b790:	f897 0023 	ldrb.w	r0, [r7, #35]	@ 0x23
 802b794:	42b0      	cmp	r0, r6
 802b796:	f040 8090 	bne.w	802b8ba <GATT_Get_Change_Vs_Server_Database+0x2ba>
 802b79a:	1ce9      	adds	r1, r5, #3
 802b79c:	2e02      	cmp	r6, #2
 802b79e:	f000 8085 	beq.w	802b8ac <GATT_Get_Change_Vs_Server_Database+0x2ac>
 802b7a2:	2e01      	cmp	r6, #1
 802b7a4:	f040 8089 	bne.w	802b8ba <GATT_Get_Change_Vs_Server_Database+0x2ba>
 802b7a8:	f107 0008 	add.w	r0, r7, #8
 802b7ac:	2202      	movs	r2, #2
 802b7ae:	e080      	b.n	802b8b2 <GATT_Get_Change_Vs_Server_Database+0x2b2>
 802b7b0:	fa1f fa8a 	uxth.w	sl, sl
 802b7b4:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 802b7b8:	fa1f f089 	uxth.w	r0, r9
 802b7bc:	458a      	cmp	sl, r1
 802b7be:	bf98      	it	ls
 802b7c0:	468a      	movls	sl, r1
 802b7c2:	4288      	cmp	r0, r1
 802b7c4:	bf38      	it	cc
 802b7c6:	4601      	movcc	r1, r0
 802b7c8:	1cb8      	adds	r0, r7, #2
 802b7ca:	5c22      	ldrb	r2, [r4, r0]
 802b7cc:	2a01      	cmp	r2, #1
 802b7ce:	d10e      	bne.n	802b7ee <GATT_Get_Change_Vs_Server_Database+0x1ee>
 802b7d0:	78ea      	ldrb	r2, [r5, #3]
 802b7d2:	792b      	ldrb	r3, [r5, #4]
 802b7d4:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 802b7d8:	f642 3329 	movw	r3, #11049	@ 0x2b29
 802b7dc:	b292      	uxth	r2, r2
 802b7de:	429a      	cmp	r2, r3
 802b7e0:	d04f      	beq.n	802b882 <GATT_Get_Change_Vs_Server_Database+0x282>
 802b7e2:	f642 1302 	movw	r3, #10498	@ 0x2902
 802b7e6:	429a      	cmp	r2, r3
 802b7e8:	bf08      	it	eq
 802b7ea:	4680      	moveq	r8, r0
 802b7ec:	e04b      	b.n	802b886 <GATT_Get_Change_Vs_Server_Database+0x286>
 802b7ee:	f108 0813 	add.w	r8, r8, #19
 802b7f2:	e04a      	b.n	802b88a <GATT_Get_Change_Vs_Server_Database+0x28a>
 802b7f4:	2001      	movs	r0, #1
 802b7f6:	2100      	movs	r1, #0
 802b7f8:	9004      	str	r0, [sp, #16]
 802b7fa:	45bc      	cmp	ip, r7
 802b7fc:	bf98      	it	ls
 802b7fe:	2101      	movls	r1, #1
 802b800:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 802b804:	9803      	ldr	r0, [sp, #12]
 802b806:	4583      	cmp	fp, r0
 802b808:	d04c      	beq.n	802b8a4 <GATT_Get_Change_Vs_Server_Database+0x2a4>
 802b80a:	f10b 0020 	add.w	r0, fp, #32
 802b80e:	4603      	mov	r3, r0
 802b810:	681b      	ldr	r3, [r3, #0]
 802b812:	4283      	cmp	r3, r0
 802b814:	d014      	beq.n	802b840 <GATT_Get_Change_Vs_Server_Database+0x240>
 802b816:	8b9d      	ldrh	r5, [r3, #28]
 802b818:	42aa      	cmp	r2, r5
 802b81a:	d806      	bhi.n	802b82a <GATT_Get_Change_Vs_Server_Database+0x22a>
 802b81c:	f04f 0400 	mov.w	r4, #0
 802b820:	bf38      	it	cc
 802b822:	2401      	movcc	r4, #1
 802b824:	400c      	ands	r4, r1
 802b826:	2c01      	cmp	r4, #1
 802b828:	d128      	bne.n	802b87c <GATT_Get_Change_Vs_Server_Database+0x27c>
 802b82a:	fa1f fa8a 	uxth.w	sl, sl
 802b82e:	b2b4      	uxth	r4, r6
 802b830:	45aa      	cmp	sl, r5
 802b832:	bf98      	it	ls
 802b834:	46aa      	movls	sl, r5
 802b836:	42ac      	cmp	r4, r5
 802b838:	bf38      	it	cc
 802b83a:	4625      	movcc	r5, r4
 802b83c:	462e      	mov	r6, r5
 802b83e:	e7e7      	b.n	802b810 <GATT_Get_Change_Vs_Server_Database+0x210>
 802b840:	f8db b000 	ldr.w	fp, [fp]
 802b844:	9803      	ldr	r0, [sp, #12]
 802b846:	4583      	cmp	fp, r0
 802b848:	d0dc      	beq.n	802b804 <GATT_Get_Change_Vs_Server_Database+0x204>
 802b84a:	f8bb 9028 	ldrh.w	r9, [fp, #40]	@ 0x28
 802b84e:	454a      	cmp	r2, r9
 802b850:	d806      	bhi.n	802b860 <GATT_Get_Change_Vs_Server_Database+0x260>
 802b852:	f04f 0000 	mov.w	r0, #0
 802b856:	bf38      	it	cc
 802b858:	2001      	movcc	r0, #1
 802b85a:	4008      	ands	r0, r1
 802b85c:	2801      	cmp	r0, #1
 802b85e:	d1d1      	bne.n	802b804 <GATT_Get_Change_Vs_Server_Database+0x204>
 802b860:	fa1f fa8a 	uxth.w	sl, sl
 802b864:	b2b0      	uxth	r0, r6
 802b866:	45ca      	cmp	sl, r9
 802b868:	bf98      	it	ls
 802b86a:	46ca      	movls	sl, r9
 802b86c:	4548      	cmp	r0, r9
 802b86e:	bf38      	it	cc
 802b870:	4681      	movcc	r9, r0
 802b872:	464e      	mov	r6, r9
 802b874:	2001      	movs	r0, #1
 802b876:	45bc      	cmp	ip, r7
 802b878:	d9c4      	bls.n	802b804 <GATT_Get_Change_Vs_Server_Database+0x204>
 802b87a:	e089      	b.n	802b990 <GATT_Get_Change_Vs_Server_Database+0x390>
 802b87c:	2001      	movs	r0, #1
 802b87e:	46b1      	mov	r9, r6
 802b880:	e086      	b.n	802b990 <GATT_Get_Change_Vs_Server_Database+0x390>
 802b882:	f108 0801 	add.w	r8, r8, #1
 802b886:	f108 0805 	add.w	r8, r8, #5
 802b88a:	fa1f f788 	uxth.w	r7, r8
 802b88e:	9808      	ldr	r0, [sp, #32]
 802b890:	9a04      	ldr	r2, [sp, #16]
 802b892:	4689      	mov	r9, r1
 802b894:	42b8      	cmp	r0, r7
 802b896:	f04f 0001 	mov.w	r0, #1
 802b89a:	bf98      	it	ls
 802b89c:	4602      	movls	r2, r0
 802b89e:	9204      	str	r2, [sp, #16]
 802b8a0:	2000      	movs	r0, #0
 802b8a2:	e077      	b.n	802b994 <GATT_Get_Change_Vs_Server_Database+0x394>
 802b8a4:	2000      	movs	r0, #0
 802b8a6:	e7ea      	b.n	802b87e <GATT_Get_Change_Vs_Server_Database+0x27e>
 802b8a8:	464e      	mov	r6, r9
 802b8aa:	e74d      	b.n	802b748 <GATT_Get_Change_Vs_Server_Database+0x148>
 802b8ac:	f107 0008 	add.w	r0, r7, #8
 802b8b0:	2210      	movs	r2, #16
 802b8b2:	f7f8 fed1 	bl	8024658 <ble_memcmp>
 802b8b6:	2800      	cmp	r0, #0
 802b8b8:	d07a      	beq.n	802b9b0 <GATT_Get_Change_Vs_Server_Database+0x3b0>
 802b8ba:	fa1f fa8a 	uxth.w	sl, sl
 802b8be:	f8b4 b000 	ldrh.w	fp, [r4]
 802b8c2:	fa1f f089 	uxth.w	r0, r9
 802b8c6:	463d      	mov	r5, r7
 802b8c8:	45da      	cmp	sl, fp
 802b8ca:	bf98      	it	ls
 802b8cc:	46da      	movls	sl, fp
 802b8ce:	4558      	cmp	r0, fp
 802b8d0:	bf38      	it	cc
 802b8d2:	4683      	movcc	fp, r0
 802b8d4:	2013      	movs	r0, #19
 802b8d6:	2e01      	cmp	r6, #1
 802b8d8:	bf08      	it	eq
 802b8da:	2005      	moveq	r0, #5
 802b8dc:	f000 f9d7 	bl	802bc8e <OUTLINED_FUNCTION_4>
 802b8e0:	d90a      	bls.n	802b8f8 <GATT_Get_Change_Vs_Server_Database+0x2f8>
 802b8e2:	a80d      	add	r0, sp, #52	@ 0x34
 802b8e4:	2202      	movs	r2, #2
 802b8e6:	4664      	mov	r4, ip
 802b8e8:	19c1      	adds	r1, r0, r7
 802b8ea:	f10d 001e 	add.w	r0, sp, #30
 802b8ee:	f7f8 fe2b 	bl	8024548 <ble_memcpy>
 802b8f2:	46a4      	mov	ip, r4
 802b8f4:	2000      	movs	r0, #0
 802b8f6:	e000      	b.n	802b8fa <GATT_Get_Change_Vs_Server_Database+0x2fa>
 802b8f8:	2001      	movs	r0, #1
 802b8fa:	2100      	movs	r1, #0
 802b8fc:	9004      	str	r0, [sp, #16]
 802b8fe:	ae05      	add	r6, sp, #20
 802b900:	45bc      	cmp	ip, r7
 802b902:	bf98      	it	ls
 802b904:	2101      	movls	r1, #1
 802b906:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 802b90a:	682d      	ldr	r5, [r5, #0]
 802b90c:	9b06      	ldr	r3, [sp, #24]
 802b90e:	9803      	ldr	r0, [sp, #12]
 802b910:	4283      	cmp	r3, r0
 802b912:	d049      	beq.n	802b9a8 <GATT_Get_Change_Vs_Server_Database+0x3a8>
 802b914:	f103 0020 	add.w	r0, r3, #32
 802b918:	4285      	cmp	r5, r0
 802b91a:	d016      	beq.n	802b94a <GATT_Get_Change_Vs_Server_Database+0x34a>
 802b91c:	8bac      	ldrh	r4, [r5, #28]
 802b91e:	42a2      	cmp	r2, r4
 802b920:	d806      	bhi.n	802b930 <GATT_Get_Change_Vs_Server_Database+0x330>
 802b922:	f04f 0600 	mov.w	r6, #0
 802b926:	bf38      	it	cc
 802b928:	2601      	movcc	r6, #1
 802b92a:	400e      	ands	r6, r1
 802b92c:	2e01      	cmp	r6, #1
 802b92e:	d12d      	bne.n	802b98c <GATT_Get_Change_Vs_Server_Database+0x38c>
 802b930:	fa1f fa8a 	uxth.w	sl, sl
 802b934:	fa1f f68b 	uxth.w	r6, fp
 802b938:	45a2      	cmp	sl, r4
 802b93a:	bf98      	it	ls
 802b93c:	46a2      	movls	sl, r4
 802b93e:	42a6      	cmp	r6, r4
 802b940:	bf38      	it	cc
 802b942:	4634      	movcc	r4, r6
 802b944:	682d      	ldr	r5, [r5, #0]
 802b946:	46a3      	mov	fp, r4
 802b948:	e7e6      	b.n	802b918 <GATT_Get_Change_Vs_Server_Database+0x318>
 802b94a:	681b      	ldr	r3, [r3, #0]
 802b94c:	9c03      	ldr	r4, [sp, #12]
 802b94e:	4605      	mov	r5, r0
 802b950:	ae05      	add	r6, sp, #20
 802b952:	42a3      	cmp	r3, r4
 802b954:	d0db      	beq.n	802b90e <GATT_Get_Change_Vs_Server_Database+0x30e>
 802b956:	f8b3 9028 	ldrh.w	r9, [r3, #40]	@ 0x28
 802b95a:	6a1d      	ldr	r5, [r3, #32]
 802b95c:	454a      	cmp	r2, r9
 802b95e:	d806      	bhi.n	802b96e <GATT_Get_Change_Vs_Server_Database+0x36e>
 802b960:	f04f 0000 	mov.w	r0, #0
 802b964:	bf38      	it	cc
 802b966:	2001      	movcc	r0, #1
 802b968:	4008      	ands	r0, r1
 802b96a:	2801      	cmp	r0, #1
 802b96c:	d1cf      	bne.n	802b90e <GATT_Get_Change_Vs_Server_Database+0x30e>
 802b96e:	fa1f fa8a 	uxth.w	sl, sl
 802b972:	fa1f f08b 	uxth.w	r0, fp
 802b976:	45ca      	cmp	sl, r9
 802b978:	bf98      	it	ls
 802b97a:	46ca      	movls	sl, r9
 802b97c:	4548      	cmp	r0, r9
 802b97e:	bf38      	it	cc
 802b980:	4681      	movcc	r9, r0
 802b982:	46cb      	mov	fp, r9
 802b984:	2001      	movs	r0, #1
 802b986:	45bc      	cmp	ip, r7
 802b988:	d9c1      	bls.n	802b90e <GATT_Get_Change_Vs_Server_Database+0x30e>
 802b98a:	e00f      	b.n	802b9ac <GATT_Get_Change_Vs_Server_Database+0x3ac>
 802b98c:	2001      	movs	r0, #1
 802b98e:	46d9      	mov	r9, fp
 802b990:	ac0d      	add	r4, sp, #52	@ 0x34
 802b992:	ae05      	add	r6, sp, #20
 802b994:	9a08      	ldr	r2, [sp, #32]
 802b996:	1bd1      	subs	r1, r2, r7
 802b998:	2903      	cmp	r1, #3
 802b99a:	4601      	mov	r1, r0
 802b99c:	bf88      	it	hi
 802b99e:	2101      	movhi	r1, #1
 802b9a0:	42ba      	cmp	r2, r7
 802b9a2:	bf98      	it	ls
 802b9a4:	4601      	movls	r1, r0
 802b9a6:	e680      	b.n	802b6aa <GATT_Get_Change_Vs_Server_Database+0xaa>
 802b9a8:	2000      	movs	r0, #0
 802b9aa:	46d9      	mov	r9, fp
 802b9ac:	ac0d      	add	r4, sp, #52	@ 0x34
 802b9ae:	e7f1      	b.n	802b994 <GATT_Get_Change_Vs_Server_Database+0x394>
 802b9b0:	f107 0108 	add.w	r1, r7, #8
 802b9b4:	4630      	mov	r0, r6
 802b9b6:	f7fd fc53 	bl	8029260 <GATT_Is_Multiple_Val_Attr>
 802b9ba:	b160      	cbz	r0, 802b9d6 <GATT_Get_Change_Vs_Server_Database+0x3d6>
 802b9bc:	4638      	mov	r0, r7
 802b9be:	9900      	ldr	r1, [sp, #0]
 802b9c0:	f7fd fc60 	bl	8029284 <GATT_Attr_Val>
 802b9c4:	1d69      	adds	r1, r5, #5
 802b9c6:	8c3a      	ldrh	r2, [r7, #32]
 802b9c8:	f7f8 fdbe 	bl	8024548 <ble_memcpy>
 802b9cc:	8c38      	ldrh	r0, [r7, #32]
 802b9ce:	463d      	mov	r5, r7
 802b9d0:	46cb      	mov	fp, r9
 802b9d2:	4480      	add	r8, r0
 802b9d4:	e77e      	b.n	802b8d4 <GATT_Get_Change_Vs_Server_Database+0x2d4>
 802b9d6:	463d      	mov	r5, r7
 802b9d8:	46cb      	mov	fp, r9
 802b9da:	e77b      	b.n	802b8d4 <GATT_Get_Change_Vs_Server_Database+0x2d4>
 802b9dc:	e9cd 6501 	strd	r6, r5, [sp, #4]
 802b9e0:	f04f 0a01 	mov.w	sl, #1
 802b9e4:	2700      	movs	r7, #0
 802b9e6:	e010      	b.n	802ba0a <GATT_Get_Change_Vs_Server_Database+0x40a>
 802b9e8:	e9cd 6501 	strd	r6, r5, [sp, #4]
 802b9ec:	a809      	add	r0, sp, #36	@ 0x24
 802b9ee:	a90d      	add	r1, sp, #52	@ 0x34
 802b9f0:	2210      	movs	r2, #16
 802b9f2:	2710      	movs	r7, #16
 802b9f4:	f7f8 fe30 	bl	8024658 <ble_memcmp>
 802b9f8:	2800      	cmp	r0, #0
 802b9fa:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 802b9fe:	bf14      	ite	ne
 802ba00:	2001      	movne	r0, #1
 802ba02:	f04f 0901 	moveq.w	r9, #1
 802ba06:	46ca      	mov	sl, r9
 802ba08:	4681      	mov	r9, r0
 802ba0a:	f10d 0814 	add.w	r8, sp, #20
 802ba0e:	ad06      	add	r5, sp, #24
 802ba10:	b2b8      	uxth	r0, r7
 802ba12:	9908      	ldr	r1, [sp, #32]
 802ba14:	1cc7      	adds	r7, r0, #3
 802ba16:	428f      	cmp	r7, r1
 802ba18:	d81c      	bhi.n	802ba54 <GATT_Get_Change_Vs_Server_Database+0x454>
 802ba1a:	aa0d      	add	r2, sp, #52	@ 0x34
 802ba1c:	1814      	adds	r4, r2, r0
 802ba1e:	5c11      	ldrb	r1, [r2, r0]
 802ba20:	462a      	mov	r2, r5
 802ba22:	7860      	ldrb	r0, [r4, #1]
 802ba24:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
 802ba28:	4641      	mov	r1, r8
 802ba2a:	b280      	uxth	r0, r0
 802ba2c:	f000 f826 	bl	802ba7c <GATT_Fetch_Handle>
 802ba30:	2802      	cmp	r0, #2
 802ba32:	d1ed      	bne.n	802ba10 <GATT_Get_Change_Vs_Server_Database+0x410>
 802ba34:	9e05      	ldr	r6, [sp, #20]
 802ba36:	f896 0023 	ldrb.w	r0, [r6, #35]	@ 0x23
 802ba3a:	f106 0108 	add.w	r1, r6, #8
 802ba3e:	f7fd fc0f 	bl	8029260 <GATT_Is_Multiple_Val_Attr>
 802ba42:	2800      	cmp	r0, #0
 802ba44:	d0e4      	beq.n	802ba10 <GATT_Get_Change_Vs_Server_Database+0x410>
 802ba46:	4630      	mov	r0, r6
 802ba48:	4659      	mov	r1, fp
 802ba4a:	f7fd fc1b 	bl	8029284 <GATT_Attr_Val>
 802ba4e:	78a1      	ldrb	r1, [r4, #2]
 802ba50:	7001      	strb	r1, [r0, #0]
 802ba52:	e7dd      	b.n	802ba10 <GATT_Get_Change_Vs_Server_Database+0x410>
 802ba54:	fa1f f08a 	uxth.w	r0, sl
 802ba58:	fa1f f189 	uxth.w	r1, r9
 802ba5c:	4281      	cmp	r1, r0
 802ba5e:	d901      	bls.n	802ba64 <GATT_Get_Change_Vs_Server_Database+0x464>
 802ba60:	2091      	movs	r0, #145	@ 0x91
 802ba62:	e5ed      	b.n	802b640 <GATT_Get_Change_Vs_Server_Database+0x40>
 802ba64:	9801      	ldr	r0, [sp, #4]
 802ba66:	f8a0 9000 	strh.w	r9, [r0]
 802ba6a:	9802      	ldr	r0, [sp, #8]
 802ba6c:	f8a0 a000 	strh.w	sl, [r0]
 802ba70:	2000      	movs	r0, #0
 802ba72:	e5e5      	b.n	802b640 <GATT_Get_Change_Vs_Server_Database+0x40>

0802ba74 <__arm_cp.1_0>:
 802ba74:	20009f34 	.word	0x20009f34

0802ba78 <__arm_cp.1_1>:
 802ba78:	20009f5c 	.word	0x20009f5c

0802ba7c <GATT_Fetch_Handle>:
 802ba7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802ba7e:	4b0f      	ldr	r3, [pc, #60]	@ (802babc <__arm_cp.2_0>)
 802ba80:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 802ba84:	461c      	mov	r4, r3
 802ba86:	6824      	ldr	r4, [r4, #0]
 802ba88:	429c      	cmp	r4, r3
 802ba8a:	bf04      	itt	eq
 802ba8c:	2000      	moveq	r0, #0
 802ba8e:	bdf0      	popeq	{r4, r5, r6, r7, pc}
 802ba90:	8d25      	ldrh	r5, [r4, #40]	@ 0x28
 802ba92:	4285      	cmp	r5, r0
 802ba94:	d00d      	beq.n	802bab2 <GATT_Fetch_Handle+0x36>
 802ba96:	f104 0520 	add.w	r5, r4, #32
 802ba9a:	6014      	str	r4, [r2, #0]
 802ba9c:	462e      	mov	r6, r5
 802ba9e:	6836      	ldr	r6, [r6, #0]
 802baa0:	42ae      	cmp	r6, r5
 802baa2:	d0f0      	beq.n	802ba86 <GATT_Fetch_Handle+0xa>
 802baa4:	8bb7      	ldrh	r7, [r6, #28]
 802baa6:	4287      	cmp	r7, r0
 802baa8:	bf02      	ittt	eq
 802baaa:	600e      	streq	r6, [r1, #0]
 802baac:	2002      	moveq	r0, #2
 802baae:	bdf0      	popeq	{r4, r5, r6, r7, pc}
 802bab0:	e7f5      	b.n	802ba9e <GATT_Fetch_Handle+0x22>
 802bab2:	2001      	movs	r0, #1
 802bab4:	600c      	str	r4, [r1, #0]
 802bab6:	6013      	str	r3, [r2, #0]
 802bab8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802baba:	bf00      	nop

0802babc <__arm_cp.2_0>:
 802babc:	20009f5c 	.word	0x20009f5c

0802bac0 <GATT_Store_Server_Database>:
 802bac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802bac4:	f5ad 7d33 	sub.w	sp, sp, #716	@ 0x2cc
 802bac8:	e9cd 1003 	strd	r1, r0, [sp, #12]
 802bacc:	2000      	movs	r0, #0
 802bace:	4e5c      	ldr	r6, [pc, #368]	@ (802bc40 <__arm_cp.3_0>)
 802bad0:	f8ad 0016 	strh.w	r0, [sp, #22]
 802bad4:	485b      	ldr	r0, [pc, #364]	@ (802bc44 <__arm_cp.3_1>)
 802bad6:	f8d6 71e0 	ldr.w	r7, [r6, #480]	@ 0x1e0
 802bada:	8c00      	ldrh	r0, [r0, #32]
 802badc:	f000 0022 	and.w	r0, r0, #34	@ 0x22
 802bae0:	2820      	cmp	r0, #32
 802bae2:	d10f      	bne.n	802bb04 <GATT_Store_Server_Database+0x44>
 802bae4:	f10d 042a 	add.w	r4, sp, #42	@ 0x2a
 802bae8:	ad06      	add	r5, sp, #24
 802baea:	f506 70ec 	add.w	r0, r6, #472	@ 0x1d8
 802baee:	1c61      	adds	r1, r4, #1
 802baf0:	462a      	mov	r2, r5
 802baf2:	f7ff fcff 	bl	802b4f4 <GATT_Compute_Database_Hash>
 802baf6:	f10d 0316 	add.w	r3, sp, #22
 802bafa:	4620      	mov	r0, r4
 802bafc:	4629      	mov	r1, r5
 802bafe:	2210      	movs	r2, #16
 802bb00:	f000 f8a4 	bl	802bc4c <GATT_Store>
 802bb04:	f8df 9140 	ldr.w	r9, [pc, #320]	@ 802bc48 <__arm_cp.3_2>
 802bb08:	f506 70f0 	add.w	r0, r6, #480	@ 0x1e0
 802bb0c:	2497      	movs	r4, #151	@ 0x97
 802bb0e:	f10d 082a 	add.w	r8, sp, #42	@ 0x2a
 802bb12:	f10d 0a16 	add.w	sl, sp, #22
 802bb16:	9001      	str	r0, [sp, #4]
 802bb18:	9801      	ldr	r0, [sp, #4]
 802bb1a:	4287      	cmp	r7, r0
 802bb1c:	d071      	beq.n	802bc02 <GATT_Store_Server_Database+0x142>
 802bb1e:	4849      	ldr	r0, [pc, #292]	@ (802bc44 <__arm_cp.3_1>)
 802bb20:	8c00      	ldrh	r0, [r0, #32]
 802bb22:	0680      	lsls	r0, r0, #26
 802bb24:	d417      	bmi.n	802bb56 <GATT_Store_Server_Database+0x96>
 802bb26:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 802bb2a:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 802bb2e:	2202      	movs	r2, #2
 802bb30:	f000 f89e 	bl	802bc70 <OUTLINED_FUNCTION_1>
 802bb34:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 802bb38:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 802bb3c:	2201      	movs	r2, #1
 802bb3e:	f000 f897 	bl	802bc70 <OUTLINED_FUNCTION_1>
 802bb42:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 802bb46:	f897 102c 	ldrb.w	r1, [r7, #44]	@ 0x2c
 802bb4a:	f000 f894 	bl	802bc76 <OUTLINED_FUNCTION_2>
 802bb4e:	bf08      	it	eq
 802bb50:	2202      	moveq	r2, #2
 802bb52:	47c8      	blx	r9
 802bb54:	4604      	mov	r4, r0
 802bb56:	f107 0b20 	add.w	fp, r7, #32
 802bb5a:	9702      	str	r7, [sp, #8]
 802bb5c:	465f      	mov	r7, fp
 802bb5e:	683f      	ldr	r7, [r7, #0]
 802bb60:	455f      	cmp	r7, fp
 802bb62:	d04b      	beq.n	802bbfc <GATT_Store_Server_Database+0x13c>
 802bb64:	4837      	ldr	r0, [pc, #220]	@ (802bc44 <__arm_cp.3_1>)
 802bb66:	8c00      	ldrh	r0, [r0, #32]
 802bb68:	0680      	lsls	r0, r0, #26
 802bb6a:	d417      	bmi.n	802bb9c <GATT_Store_Server_Database+0xdc>
 802bb6c:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 802bb70:	f107 011c 	add.w	r1, r7, #28
 802bb74:	2202      	movs	r2, #2
 802bb76:	f000 f87b 	bl	802bc70 <OUTLINED_FUNCTION_1>
 802bb7a:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 802bb7e:	f107 0123 	add.w	r1, r7, #35	@ 0x23
 802bb82:	2201      	movs	r2, #1
 802bb84:	f000 f874 	bl	802bc70 <OUTLINED_FUNCTION_1>
 802bb88:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 802bb8c:	f897 1023 	ldrb.w	r1, [r7, #35]	@ 0x23
 802bb90:	f000 f871 	bl	802bc76 <OUTLINED_FUNCTION_2>
 802bb94:	bf08      	it	eq
 802bb96:	2202      	moveq	r2, #2
 802bb98:	47c8      	blx	r9
 802bb9a:	4604      	mov	r4, r0
 802bb9c:	f897 0023 	ldrb.w	r0, [r7, #35]	@ 0x23
 802bba0:	f107 0108 	add.w	r1, r7, #8
 802bba4:	f7fd fb5c 	bl	8029260 <GATT_Is_Multiple_Val_Attr>
 802bba8:	2800      	cmp	r0, #0
 802bbaa:	d0d8      	beq.n	802bb5e <GATT_Store_Server_Database+0x9e>
 802bbac:	4638      	mov	r0, r7
 802bbae:	9904      	ldr	r1, [sp, #16]
 802bbb0:	8c3d      	ldrh	r5, [r7, #32]
 802bbb2:	f7fd fb67 	bl	8029284 <GATT_Attr_Val>
 802bbb6:	4923      	ldr	r1, [pc, #140]	@ (802bc44 <__arm_cp.3_1>)
 802bbb8:	4606      	mov	r6, r0
 802bbba:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 802bbbe:	8c09      	ldrh	r1, [r1, #32]
 802bbc0:	4440      	add	r0, r8
 802bbc2:	0689      	lsls	r1, r1, #26
 802bbc4:	d402      	bmi.n	802bbcc <GATT_Store_Server_Database+0x10c>
 802bbc6:	4631      	mov	r1, r6
 802bbc8:	462a      	mov	r2, r5
 802bbca:	e00a      	b.n	802bbe2 <GATT_Store_Server_Database+0x122>
 802bbcc:	f107 011c 	add.w	r1, r7, #28
 802bbd0:	2202      	movs	r2, #2
 802bbd2:	4653      	mov	r3, sl
 802bbd4:	f000 f83a 	bl	802bc4c <GATT_Store>
 802bbd8:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 802bbdc:	4631      	mov	r1, r6
 802bbde:	2201      	movs	r2, #1
 802bbe0:	4440      	add	r0, r8
 802bbe2:	4653      	mov	r3, sl
 802bbe4:	f000 f832 	bl	802bc4c <GATT_Store>
 802bbe8:	4604      	mov	r4, r0
 802bbea:	9803      	ldr	r0, [sp, #12]
 802bbec:	2800      	cmp	r0, #0
 802bbee:	d0b6      	beq.n	802bb5e <GATT_Store_Server_Database+0x9e>
 802bbf0:	4630      	mov	r0, r6
 802bbf2:	2100      	movs	r1, #0
 802bbf4:	462a      	mov	r2, r5
 802bbf6:	f7f8 fcf7 	bl	80245e8 <ble_memset>
 802bbfa:	e7b0      	b.n	802bb5e <GATT_Store_Server_Database+0x9e>
 802bbfc:	9f02      	ldr	r7, [sp, #8]
 802bbfe:	683f      	ldr	r7, [r7, #0]
 802bc00:	e78a      	b.n	802bb18 <GATT_Store_Server_Database+0x58>
 802bc02:	b9cc      	cbnz	r4, 802bc38 <GATT_Store_Server_Database+0x178>
 802bc04:	480f      	ldr	r0, [pc, #60]	@ (802bc44 <__arm_cp.3_1>)
 802bc06:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 802bc0a:	8c00      	ldrh	r0, [r0, #32]
 802bc0c:	0680      	lsls	r0, r0, #26
 802bc0e:	d40c      	bmi.n	802bc2a <GATT_Store_Server_Database+0x16a>
 802bc10:	0788      	lsls	r0, r1, #30
 802bc12:	d00a      	beq.n	802bc2a <GATT_Store_Server_Database+0x16a>
 802bc14:	f021 0203 	bic.w	r2, r1, #3
 802bc18:	eb08 0001 	add.w	r0, r8, r1
 802bc1c:	1d14      	adds	r4, r2, #4
 802bc1e:	1a61      	subs	r1, r4, r1
 802bc20:	b28a      	uxth	r2, r1
 802bc22:	210b      	movs	r1, #11
 802bc24:	f7f8 fce0 	bl	80245e8 <ble_memset>
 802bc28:	4621      	mov	r1, r4
 802bc2a:	9804      	ldr	r0, [sp, #16]
 802bc2c:	b289      	uxth	r1, r1
 802bc2e:	f10d 022a 	add.w	r2, sp, #42	@ 0x2a
 802bc32:	8800      	ldrh	r0, [r0, #0]
 802bc34:	f001 fa46 	bl	802d0c4 <SMP_Save_GATT_Data>
 802bc38:	f50d 7d33 	add.w	sp, sp, #716	@ 0x2cc
 802bc3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802bc40 <__arm_cp.3_0>:
 802bc40:	20009f5c 	.word	0x20009f5c

0802bc44 <__arm_cp.3_1>:
 802bc44:	20009f34 	.word	0x20009f34

0802bc48 <__arm_cp.3_2>:
 802bc48:	0802bc4d 	.word	0x0802bc4d

0802bc4c <GATT_Store>:
 802bc4c:	b510      	push	{r4, lr}
 802bc4e:	881c      	ldrh	r4, [r3, #0]
 802bc50:	4414      	add	r4, r2
 802bc52:	801c      	strh	r4, [r3, #0]
 802bc54:	b2a3      	uxth	r3, r4
 802bc56:	f5b3 7f28 	cmp.w	r3, #672	@ 0x2a0
 802bc5a:	bf84      	itt	hi
 802bc5c:	2091      	movhi	r0, #145	@ 0x91
 802bc5e:	bd10      	pophi	{r4, pc}
 802bc60:	f7f8 fc72 	bl	8024548 <ble_memcpy>
 802bc64:	2000      	movs	r0, #0
 802bc66:	bd10      	pop	{r4, pc}

0802bc68 <OUTLINED_FUNCTION_0>:
 802bc68:	2202      	movs	r2, #2
 802bc6a:	4633      	mov	r3, r6
 802bc6c:	4428      	add	r0, r5
 802bc6e:	4720      	bx	r4

0802bc70 <OUTLINED_FUNCTION_1>:
 802bc70:	4653      	mov	r3, sl
 802bc72:	4440      	add	r0, r8
 802bc74:	4748      	bx	r9

0802bc76 <OUTLINED_FUNCTION_2>:
 802bc76:	2210      	movs	r2, #16
 802bc78:	4653      	mov	r3, sl
 802bc7a:	2901      	cmp	r1, #1
 802bc7c:	4440      	add	r0, r8
 802bc7e:	f107 0108 	add.w	r1, r7, #8
 802bc82:	4770      	bx	lr

0802bc84 <OUTLINED_FUNCTION_3>:
 802bc84:	2202      	movs	r2, #2
 802bc86:	4633      	mov	r3, r6
 802bc88:	4428      	add	r0, r5
 802bc8a:	f7ff bfdf 	b.w	802bc4c <GATT_Store>

0802bc8e <OUTLINED_FUNCTION_4>:
 802bc8e:	4480      	add	r8, r0
 802bc90:	f8dd c020 	ldr.w	ip, [sp, #32]
 802bc94:	fa1f f788 	uxth.w	r7, r8
 802bc98:	45bc      	cmp	ip, r7
 802bc9a:	4770      	bx	lr

0802bc9c <L2C_MemAlloc>:
 802bc9c:	b580      	push	{r7, lr}
 802bc9e:	4904      	ldr	r1, [pc, #16]	@ (802bcb0 <__arm_cp.0_0>)
 802bca0:	220c      	movs	r2, #12
 802bca2:	7d89      	ldrb	r1, [r1, #22]
 802bca4:	f003 fb29 	bl	802f2fa <Mem_Assign>
 802bca8:	4902      	ldr	r1, [pc, #8]	@ (802bcb4 <__arm_cp.0_1>)
 802bcaa:	f8c1 0080 	str.w	r0, [r1, #128]	@ 0x80
 802bcae:	bd80      	pop	{r7, pc}

0802bcb0 <__arm_cp.0_0>:
 802bcb0:	20009f34 	.word	0x20009f34

0802bcb4 <__arm_cp.0_1>:
 802bcb4:	20009f5c 	.word	0x20009f5c

0802bcb8 <L2C_Init>:
 802bcb8:	4770      	bx	lr

0802bcba <L2C_Send_Data>:
 802bcba:	888b      	ldrh	r3, [r1, #4]
 802bcbc:	6a0a      	ldr	r2, [r1, #32]
 802bcbe:	3b04      	subs	r3, #4
 802bcc0:	7013      	strb	r3, [r2, #0]
 802bcc2:	0a1b      	lsrs	r3, r3, #8
 802bcc4:	7053      	strb	r3, [r2, #1]
 802bcc6:	0a02      	lsrs	r2, r0, #8
 802bcc8:	6a0b      	ldr	r3, [r1, #32]
 802bcca:	7098      	strb	r0, [r3, #2]
 802bccc:	2002      	movs	r0, #2
 802bcce:	70da      	strb	r2, [r3, #3]
 802bcd0:	7288      	strb	r0, [r1, #10]
 802bcd2:	4608      	mov	r0, r1
 802bcd4:	f7fb bd5c 	b.w	8027790 <LECTRL_SendAclDataFromHostToController>

0802bcd8 <L2C_Rx_Data_Handler>:
 802bcd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802bcda:	4604      	mov	r4, r0
 802bcdc:	8900      	ldrh	r0, [r0, #8]
 802bcde:	f10d 0103 	add.w	r1, sp, #3
 802bce2:	f000 f84f 	bl	802bd84 <L2C_Get_Connection>
 802bce6:	2800      	cmp	r0, #0
 802bce8:	d041      	beq.n	802bd6e <L2C_Rx_Data_Handler+0x96>
 802bcea:	7aa7      	ldrb	r7, [r4, #10]
 802bcec:	4605      	mov	r5, r0
 802bcee:	6880      	ldr	r0, [r0, #8]
 802bcf0:	2f02      	cmp	r7, #2
 802bcf2:	d106      	bne.n	802bd02 <L2C_Rx_Data_Handler+0x2a>
 802bcf4:	b178      	cbz	r0, 802bd16 <L2C_Rx_Data_Handler+0x3e>
 802bcf6:	88e9      	ldrh	r1, [r5, #6]
 802bcf8:	2695      	movs	r6, #149	@ 0x95
 802bcfa:	2904      	cmp	r1, #4
 802bcfc:	d32c      	bcc.n	802bd58 <L2C_Rx_Data_Handler+0x80>
 802bcfe:	2201      	movs	r2, #1
 802bd00:	e012      	b.n	802bd28 <L2C_Rx_Data_Handler+0x50>
 802bd02:	b330      	cbz	r0, 802bd52 <L2C_Rx_Data_Handler+0x7a>
 802bd04:	88a1      	ldrh	r1, [r4, #4]
 802bd06:	b149      	cbz	r1, 802bd1c <L2C_Rx_Data_Handler+0x44>
 802bd08:	88ea      	ldrh	r2, [r5, #6]
 802bd0a:	4411      	add	r1, r2
 802bd0c:	80e9      	strh	r1, [r5, #6]
 802bd0e:	4621      	mov	r1, r4
 802bd10:	f000 faf4 	bl	802c2fc <ACL_Append>
 802bd14:	e002      	b.n	802bd1c <L2C_Rx_Data_Handler+0x44>
 802bd16:	88a0      	ldrh	r0, [r4, #4]
 802bd18:	60ac      	str	r4, [r5, #8]
 802bd1a:	80e8      	strh	r0, [r5, #6]
 802bd1c:	88e9      	ldrh	r1, [r5, #6]
 802bd1e:	2904      	cmp	r1, #4
 802bd20:	d315      	bcc.n	802bd4e <L2C_Rx_Data_Handler+0x76>
 802bd22:	68a8      	ldr	r0, [r5, #8]
 802bd24:	2600      	movs	r6, #0
 802bd26:	2200      	movs	r2, #0
 802bd28:	6a03      	ldr	r3, [r0, #32]
 802bd2a:	881b      	ldrh	r3, [r3, #0]
 802bd2c:	3304      	adds	r3, #4
 802bd2e:	b29b      	uxth	r3, r3
 802bd30:	4299      	cmp	r1, r3
 802bd32:	d811      	bhi.n	802bd58 <L2C_Rx_Data_Handler+0x80>
 802bd34:	d10f      	bne.n	802bd56 <L2C_Rx_Data_Handler+0x7e>
 802bd36:	8081      	strh	r1, [r0, #4]
 802bd38:	f000 f83c 	bl	802bdb4 <L2C_Mux_Acl_Packet>
 802bd3c:	b1e8      	cbz	r0, 802bd7a <L2C_Rx_Data_Handler+0xa2>
 802bd3e:	68a8      	ldr	r0, [r5, #8]
 802bd40:	42a0      	cmp	r0, r4
 802bd42:	d102      	bne.n	802bd4a <L2C_Rx_Data_Handler+0x72>
 802bd44:	2000      	movs	r0, #0
 802bd46:	80e8      	strh	r0, [r5, #6]
 802bd48:	60a8      	str	r0, [r5, #8]
 802bd4a:	2695      	movs	r6, #149	@ 0x95
 802bd4c:	e013      	b.n	802bd76 <L2C_Rx_Data_Handler+0x9e>
 802bd4e:	2600      	movs	r6, #0
 802bd50:	e00a      	b.n	802bd68 <L2C_Rx_Data_Handler+0x90>
 802bd52:	2600      	movs	r6, #0
 802bd54:	e000      	b.n	802bd58 <L2C_Rx_Data_Handler+0x80>
 802bd56:	b13a      	cbz	r2, 802bd68 <L2C_Rx_Data_Handler+0x90>
 802bd58:	2001      	movs	r0, #1
 802bd5a:	2102      	movs	r1, #2
 802bd5c:	462a      	mov	r2, r5
 802bd5e:	f7fb fa81 	bl	8027264 <EVT_aci_hal_fw_error>
 802bd62:	4628      	mov	r0, r5
 802bd64:	f000 f884 	bl	802be70 <L2C_Discard_Recomb_Data>
 802bd68:	b92e      	cbnz	r6, 802bd76 <L2C_Rx_Data_Handler+0x9e>
 802bd6a:	2f01      	cmp	r7, #1
 802bd6c:	d103      	bne.n	802bd76 <L2C_Rx_Data_Handler+0x9e>
 802bd6e:	4620      	mov	r0, r4
 802bd70:	f000 fa0a 	bl	802c188 <ACL_Release>
 802bd74:	2600      	movs	r6, #0
 802bd76:	4630      	mov	r0, r6
 802bd78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802bd7a:	2000      	movs	r0, #0
 802bd7c:	80e8      	strh	r0, [r5, #6]
 802bd7e:	60a8      	str	r0, [r5, #8]
 802bd80:	e7f2      	b.n	802bd68 <L2C_Rx_Data_Handler+0x90>
	...

0802bd84 <L2C_Get_Connection>:
 802bd84:	b5b0      	push	{r4, r5, r7, lr}
 802bd86:	4602      	mov	r2, r0
 802bd88:	4808      	ldr	r0, [pc, #32]	@ (802bdac <__arm_cp.4_0>)
 802bd8a:	4b09      	ldr	r3, [pc, #36]	@ (802bdb0 <__arm_cp.4_1>)
 802bd8c:	f8d0 0080 	ldr.w	r0, [r0, #128]	@ 0x80
 802bd90:	7d9c      	ldrb	r4, [r3, #22]
 802bd92:	2300      	movs	r3, #0
 802bd94:	429c      	cmp	r4, r3
 802bd96:	bf04      	itt	eq
 802bd98:	2000      	moveq	r0, #0
 802bd9a:	bdb0      	popeq	{r4, r5, r7, pc}
 802bd9c:	8805      	ldrh	r5, [r0, #0]
 802bd9e:	4295      	cmp	r5, r2
 802bda0:	bf04      	itt	eq
 802bda2:	700b      	strbeq	r3, [r1, #0]
 802bda4:	bdb0      	popeq	{r4, r5, r7, pc}
 802bda6:	300c      	adds	r0, #12
 802bda8:	3301      	adds	r3, #1
 802bdaa:	e7f3      	b.n	802bd94 <L2C_Get_Connection+0x10>

0802bdac <__arm_cp.4_0>:
 802bdac:	20009f5c 	.word	0x20009f5c

0802bdb0 <__arm_cp.4_1>:
 802bdb0:	20009f34 	.word	0x20009f34

0802bdb4 <L2C_Mux_Acl_Packet>:
 802bdb4:	b5bc      	push	{r2, r3, r4, r5, r7, lr}
 802bdb6:	4604      	mov	r4, r0
 802bdb8:	6a00      	ldr	r0, [r0, #32]
 802bdba:	8840      	ldrh	r0, [r0, #2]
 802bdbc:	2806      	cmp	r0, #6
 802bdbe:	d007      	beq.n	802bdd0 <L2C_Mux_Acl_Packet+0x1c>
 802bdc0:	2805      	cmp	r0, #5
 802bdc2:	d009      	beq.n	802bdd8 <L2C_Mux_Acl_Packet+0x24>
 802bdc4:	2804      	cmp	r0, #4
 802bdc6:	d109      	bne.n	802bddc <L2C_Mux_Acl_Packet+0x28>
 802bdc8:	4620      	mov	r0, r4
 802bdca:	f7fc fe37 	bl	8028a3c <GATT_L2cap_Data_Handler>
 802bdce:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}
 802bdd0:	4620      	mov	r0, r4
 802bdd2:	f001 f87d 	bl	802ced0 <SMP_L2cap_Data_Handler>
 802bdd6:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}
 802bdd8:	79a0      	ldrb	r0, [r4, #6]
 802bdda:	b120      	cbz	r0, 802bde6 <L2C_Mux_Acl_Packet+0x32>
 802bddc:	4620      	mov	r0, r4
 802bdde:	f000 f9d3 	bl	802c188 <ACL_Release>
 802bde2:	2000      	movs	r0, #0
 802bde4:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}
 802bde6:	8920      	ldrh	r0, [r4, #8]
 802bde8:	f10d 0107 	add.w	r1, sp, #7
 802bdec:	f7ff ffca 	bl	802bd84 <L2C_Get_Connection>
 802bdf0:	2800      	cmp	r0, #0
 802bdf2:	d0f3      	beq.n	802bddc <L2C_Mux_Acl_Packet+0x28>
 802bdf4:	6a20      	ldr	r0, [r4, #32]
 802bdf6:	7901      	ldrb	r1, [r0, #4]
 802bdf8:	2913      	cmp	r1, #19
 802bdfa:	d01f      	beq.n	802be3c <L2C_Mux_Acl_Packet+0x88>
 802bdfc:	2912      	cmp	r1, #18
 802bdfe:	d023      	beq.n	802be48 <L2C_Mux_Acl_Packet+0x94>
 802be00:	2901      	cmp	r1, #1
 802be02:	d127      	bne.n	802be54 <L2C_Mux_Acl_Packet+0xa0>
 802be04:	4a19      	ldr	r2, [pc, #100]	@ (802be6c <__arm_cp.5_0>)
 802be06:	f89d 5007 	ldrb.w	r5, [sp, #7]
 802be0a:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 802be0e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 802be12:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 802be16:	788a      	ldrb	r2, [r1, #2]
 802be18:	0792      	lsls	r2, r2, #30
 802be1a:	d5df      	bpl.n	802bddc <L2C_Mux_Acl_Packet+0x28>
 802be1c:	78c9      	ldrb	r1, [r1, #3]
 802be1e:	7940      	ldrb	r0, [r0, #5]
 802be20:	4281      	cmp	r1, r0
 802be22:	d1db      	bne.n	802bddc <L2C_Mux_Acl_Packet+0x28>
 802be24:	4628      	mov	r0, r5
 802be26:	f000 f879 	bl	802bf1c <L2C_Increment_Identifier>
 802be2a:	4628      	mov	r0, r5
 802be2c:	f000 f84e 	bl	802becc <L2C_Stop_Timer>
 802be30:	8921      	ldrh	r1, [r4, #8]
 802be32:	2000      	movs	r0, #0
 802be34:	4622      	mov	r2, r4
 802be36:	f7fb fa43 	bl	80272c0 <EVT_aci_l2cap_command_reject>
 802be3a:	e7cf      	b.n	802bddc <L2C_Mux_Acl_Packet+0x28>
 802be3c:	f89d 0007 	ldrb.w	r0, [sp, #7]
 802be40:	4621      	mov	r1, r4
 802be42:	f000 f8c9 	bl	802bfd8 <L2C_CPU_Rsp_Rx_Handler>
 802be46:	e00e      	b.n	802be66 <L2C_Mux_Acl_Packet+0xb2>
 802be48:	f89d 0007 	ldrb.w	r0, [sp, #7]
 802be4c:	4621      	mov	r1, r4
 802be4e:	f000 f8f3 	bl	802c038 <L2C_CPU_Req_Rx_Handler>
 802be52:	e008      	b.n	802be66 <L2C_Mux_Acl_Packet+0xb2>
 802be54:	7941      	ldrb	r1, [r0, #5]
 802be56:	2200      	movs	r2, #0
 802be58:	f89d 0007 	ldrb.w	r0, [sp, #7]
 802be5c:	2300      	movs	r3, #0
 802be5e:	9200      	str	r2, [sp, #0]
 802be60:	2200      	movs	r2, #0
 802be62:	f000 f8a0 	bl	802bfa6 <L2C_Send_Command_Reject>
 802be66:	2800      	cmp	r0, #0
 802be68:	d1bc      	bne.n	802bde4 <L2C_Mux_Acl_Packet+0x30>
 802be6a:	e7b7      	b.n	802bddc <L2C_Mux_Acl_Packet+0x28>

0802be6c <__arm_cp.5_0>:
 802be6c:	20009f5c 	.word	0x20009f5c

0802be70 <L2C_Discard_Recomb_Data>:
 802be70:	b510      	push	{r4, lr}
 802be72:	4604      	mov	r4, r0
 802be74:	6880      	ldr	r0, [r0, #8]
 802be76:	b120      	cbz	r0, 802be82 <L2C_Discard_Recomb_Data+0x12>
 802be78:	f000 f986 	bl	802c188 <ACL_Release>
 802be7c:	2000      	movs	r0, #0
 802be7e:	80e0      	strh	r0, [r4, #6]
 802be80:	60a0      	str	r0, [r4, #8]
 802be82:	bd10      	pop	{r4, pc}

0802be84 <L2C_Tx_Data_Conplete_Handler>:
 802be84:	f7ff bf96 	b.w	802bdb4 <L2C_Mux_Acl_Packet>

0802be88 <L2C_Connection_Complete_Handler>:
 802be88:	b5bc      	push	{r2, r3, r4, r5, r7, lr}
 802be8a:	460c      	mov	r4, r1
 802be8c:	4605      	mov	r5, r0
 802be8e:	f10d 0107 	add.w	r1, sp, #7
 802be92:	2000      	movs	r0, #0
 802be94:	f7ff ff76 	bl	802bd84 <L2C_Get_Connection>
 802be98:	b130      	cbz	r0, 802bea8 <L2C_Connection_Complete_Handler+0x20>
 802be9a:	2101      	movs	r1, #1
 802be9c:	8005      	strh	r5, [r0, #0]
 802be9e:	70c1      	strb	r1, [r0, #3]
 802bea0:	fab4 f184 	clz	r1, r4
 802bea4:	0949      	lsrs	r1, r1, #5
 802bea6:	7081      	strb	r1, [r0, #2]
 802bea8:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}

0802beaa <L2C_Disconnection_Complete_Handler>:
 802beaa:	b51c      	push	{r2, r3, r4, lr}
 802beac:	f10d 0107 	add.w	r1, sp, #7
 802beb0:	f7ff ff68 	bl	802bd84 <L2C_Get_Connection>
 802beb4:	b140      	cbz	r0, 802bec8 <L2C_Disconnection_Complete_Handler+0x1e>
 802beb6:	4604      	mov	r4, r0
 802beb8:	f7ff ffda 	bl	802be70 <L2C_Discard_Recomb_Data>
 802bebc:	f89d 0007 	ldrb.w	r0, [sp, #7]
 802bec0:	f000 f804 	bl	802becc <L2C_Stop_Timer>
 802bec4:	2000      	movs	r0, #0
 802bec6:	8020      	strh	r0, [r4, #0]
 802bec8:	bd1c      	pop	{r2, r3, r4, pc}
	...

0802becc <L2C_Stop_Timer>:
 802becc:	b5b0      	push	{r4, r5, r7, lr}
 802bece:	4604      	mov	r4, r0
 802bed0:	4807      	ldr	r0, [pc, #28]	@ (802bef0 <__arm_cp.10_0>)
 802bed2:	f8d0 5080 	ldr.w	r5, [r0, #128]	@ 0x80
 802bed6:	f504 6080 	add.w	r0, r4, #1024	@ 0x400
 802beda:	f7dd fdda 	bl	8009a92 <BLEPLAT_TimerStop>
 802bede:	eb04 0044 	add.w	r0, r4, r4, lsl #1
 802bee2:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 802bee6:	7881      	ldrb	r1, [r0, #2]
 802bee8:	f001 01f9 	and.w	r1, r1, #249	@ 0xf9
 802beec:	7081      	strb	r1, [r0, #2]
 802beee:	bdb0      	pop	{r4, r5, r7, pc}

0802bef0 <__arm_cp.10_0>:
 802bef0:	20009f5c 	.word	0x20009f5c

0802bef4 <L2C_Timeout_Cb>:
 802bef4:	4908      	ldr	r1, [pc, #32]	@ (802bf18 <__arm_cp.12_0>)
 802bef6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802befa:	f8d1 2080 	ldr.w	r2, [r1, #128]	@ 0x80
 802befe:	f832 1020 	ldrh.w	r1, [r2, r0, lsl #2]
 802bf02:	b141      	cbz	r1, 802bf16 <L2C_Timeout_Cb+0x22>
 802bf04:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 802bf08:	7882      	ldrb	r2, [r0, #2]
 802bf0a:	f002 02f9 	and.w	r2, r2, #249	@ 0xf9
 802bf0e:	7082      	strb	r2, [r0, #2]
 802bf10:	2001      	movs	r0, #1
 802bf12:	f7fb b9e3 	b.w	80272dc <EVT_aci_l2cap_proc_timeout>
 802bf16:	4770      	bx	lr

0802bf18 <__arm_cp.12_0>:
 802bf18:	20009f5c 	.word	0x20009f5c

0802bf1c <L2C_Increment_Identifier>:
 802bf1c:	4907      	ldr	r1, [pc, #28]	@ (802bf3c <__arm_cp.13_0>)
 802bf1e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802bf22:	f8d1 1080 	ldr.w	r1, [r1, #128]	@ 0x80
 802bf26:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 802bf2a:	78c1      	ldrb	r1, [r0, #3]
 802bf2c:	3101      	adds	r1, #1
 802bf2e:	b2ca      	uxtb	r2, r1
 802bf30:	428a      	cmp	r2, r1
 802bf32:	bf18      	it	ne
 802bf34:	2201      	movne	r2, #1
 802bf36:	70c2      	strb	r2, [r0, #3]
 802bf38:	4770      	bx	lr
 802bf3a:	bf00      	nop

0802bf3c <__arm_cp.13_0>:
 802bf3c:	20009f5c 	.word	0x20009f5c

0802bf40 <L2C_Send_Packet>:
 802bf40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802bf42:	460c      	mov	r4, r1
 802bf44:	4913      	ldr	r1, [pc, #76]	@ (802bf94 <__arm_cp.14_0>)
 802bf46:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802bf4a:	4616      	mov	r6, r2
 802bf4c:	461d      	mov	r5, r3
 802bf4e:	f8d1 1080 	ldr.w	r1, [r1, #128]	@ 0x80
 802bf52:	f831 1020 	ldrh.w	r1, [r1, r0, lsl #2]
 802bf56:	2001      	movs	r0, #1
 802bf58:	2c05      	cmp	r4, #5
 802bf5a:	bf08      	it	eq
 802bf5c:	2002      	moveq	r0, #2
 802bf5e:	3204      	adds	r2, #4
 802bf60:	b292      	uxth	r2, r2
 802bf62:	f000 f8db 	bl	802c11c <ACL_New>
 802bf66:	b178      	cbz	r0, 802bf88 <L2C_Send_Packet+0x48>
 802bf68:	2104      	movs	r1, #4
 802bf6a:	4632      	mov	r2, r6
 802bf6c:	462b      	mov	r3, r5
 802bf6e:	4607      	mov	r7, r0
 802bf70:	f000 f997 	bl	802c2a2 <ACL_Set_Data>
 802bf74:	4620      	mov	r0, r4
 802bf76:	4639      	mov	r1, r7
 802bf78:	f7ff fe9f 	bl	802bcba <L2C_Send_Data>
 802bf7c:	b130      	cbz	r0, 802bf8c <L2C_Send_Packet+0x4c>
 802bf7e:	4604      	mov	r4, r0
 802bf80:	4638      	mov	r0, r7
 802bf82:	f000 f901 	bl	802c188 <ACL_Release>
 802bf86:	e002      	b.n	802bf8e <L2C_Send_Packet+0x4e>
 802bf88:	2464      	movs	r4, #100	@ 0x64
 802bf8a:	e000      	b.n	802bf8e <L2C_Send_Packet+0x4e>
 802bf8c:	2400      	movs	r4, #0
 802bf8e:	4620      	mov	r0, r4
 802bf90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802bf92:	bf00      	nop

0802bf94 <__arm_cp.14_0>:
 802bf94:	20009f5c 	.word	0x20009f5c

0802bf98 <L2C_Send_Signaling_Packet>:
 802bf98:	460b      	mov	r3, r1
 802bf9a:	8849      	ldrh	r1, [r1, #2]
 802bf9c:	3104      	adds	r1, #4
 802bf9e:	b28a      	uxth	r2, r1
 802bfa0:	2105      	movs	r1, #5
 802bfa2:	f7ff bfcd 	b.w	802bf40 <L2C_Send_Packet>

0802bfa6 <L2C_Send_Command_Reject>:
 802bfa6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802bfa8:	f8ad 300c 	strh.w	r3, [sp, #12]
 802bfac:	2302      	movs	r3, #2
 802bfae:	9c06      	ldr	r4, [sp, #24]
 802bfb0:	f8ad 200a 	strh.w	r2, [sp, #10]
 802bfb4:	2a02      	cmp	r2, #2
 802bfb6:	f8ad 400e 	strh.w	r4, [sp, #14]
 802bfba:	bf08      	it	eq
 802bfbc:	2306      	moveq	r3, #6
 802bfbe:	f8ad 3008 	strh.w	r3, [sp, #8]
 802bfc2:	0209      	lsls	r1, r1, #8
 802bfc4:	3101      	adds	r1, #1
 802bfc6:	f8ad 1006 	strh.w	r1, [sp, #6]
 802bfca:	f10d 0106 	add.w	r1, sp, #6
 802bfce:	f7ff ffe3 	bl	802bf98 <L2C_Send_Signaling_Packet>
 802bfd2:	b004      	add	sp, #16
 802bfd4:	bd10      	pop	{r4, pc}
	...

0802bfd8 <L2C_CPU_Rsp_Rx_Handler>:
 802bfd8:	b5bc      	push	{r2, r3, r4, r5, r7, lr}
 802bfda:	460d      	mov	r5, r1
 802bfdc:	4915      	ldr	r1, [pc, #84]	@ (802c034 <__arm_cp.1_0>)
 802bfde:	4604      	mov	r4, r0
 802bfe0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802bfe4:	f8d1 1080 	ldr.w	r1, [r1, #128]	@ 0x80
 802bfe8:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 802bfec:	7882      	ldrb	r2, [r0, #2]
 802bfee:	07d1      	lsls	r1, r2, #31
 802bff0:	6a29      	ldr	r1, [r5, #32]
 802bff2:	7949      	ldrb	r1, [r1, #5]
 802bff4:	d101      	bne.n	802bffa <L2C_CPU_Rsp_Rx_Handler+0x22>
 802bff6:	0752      	lsls	r2, r2, #29
 802bff8:	d409      	bmi.n	802c00e <L2C_CPU_Rsp_Rx_Handler+0x36>
 802bffa:	2000      	movs	r0, #0
 802bffc:	2200      	movs	r2, #0
 802bffe:	2300      	movs	r3, #0
 802c000:	9000      	str	r0, [sp, #0]
 802c002:	4620      	mov	r0, r4
 802c004:	f7ff ffcf 	bl	802bfa6 <L2C_Send_Command_Reject>
 802c008:	4604      	mov	r4, r0
 802c00a:	4620      	mov	r0, r4
 802c00c:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}
 802c00e:	78c0      	ldrb	r0, [r0, #3]
 802c010:	4281      	cmp	r1, r0
 802c012:	d10d      	bne.n	802c030 <L2C_CPU_Rsp_Rx_Handler+0x58>
 802c014:	4620      	mov	r0, r4
 802c016:	f7ff ff81 	bl	802bf1c <L2C_Increment_Identifier>
 802c01a:	4620      	mov	r0, r4
 802c01c:	f7ff ff56 	bl	802becc <L2C_Stop_Timer>
 802c020:	6a28      	ldr	r0, [r5, #32]
 802c022:	8929      	ldrh	r1, [r5, #8]
 802c024:	2400      	movs	r4, #0
 802c026:	8902      	ldrh	r2, [r0, #8]
 802c028:	2000      	movs	r0, #0
 802c02a:	f7fb f921 	bl	8027270 <EVT_aci_l2cap_connection_update_resp>
 802c02e:	e7ec      	b.n	802c00a <L2C_CPU_Rsp_Rx_Handler+0x32>
 802c030:	2400      	movs	r4, #0
 802c032:	e7ea      	b.n	802c00a <L2C_CPU_Rsp_Rx_Handler+0x32>

0802c034 <__arm_cp.1_0>:
 802c034:	20009f5c 	.word	0x20009f5c

0802c038 <L2C_CPU_Req_Rx_Handler>:
 802c038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802c03a:	4b15      	ldr	r3, [pc, #84]	@ (802c090 <__arm_cp.2_0>)
 802c03c:	460a      	mov	r2, r1
 802c03e:	eb00 0140 	add.w	r1, r0, r0, lsl #1
 802c042:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 802c046:	eb03 0781 	add.w	r7, r3, r1, lsl #2
 802c04a:	463e      	mov	r6, r7
 802c04c:	f816 1f02 	ldrb.w	r1, [r6, #2]!
 802c050:	070b      	lsls	r3, r1, #28
 802c052:	6a13      	ldr	r3, [r2, #32]
 802c054:	795c      	ldrb	r4, [r3, #5]
 802c056:	d40c      	bmi.n	802c072 <L2C_CPU_Req_Rx_Handler+0x3a>
 802c058:	07c9      	lsls	r1, r1, #31
 802c05a:	d00f      	beq.n	802c07c <L2C_CPU_Req_Rx_Handler+0x44>
 802c05c:	8911      	ldrh	r1, [r2, #8]
 802c05e:	2000      	movs	r0, #0
 802c060:	2500      	movs	r5, #0
 802c062:	f7fb f913 	bl	802728c <EVT_aci_l2cap_connection_update_req>
 802c066:	7830      	ldrb	r0, [r6, #0]
 802c068:	713c      	strb	r4, [r7, #4]
 802c06a:	f040 0008 	orr.w	r0, r0, #8
 802c06e:	7030      	strb	r0, [r6, #0]
 802c070:	e00c      	b.n	802c08c <L2C_CPU_Req_Rx_Handler+0x54>
 802c072:	7939      	ldrb	r1, [r7, #4]
 802c074:	42a1      	cmp	r1, r4
 802c076:	d101      	bne.n	802c07c <L2C_CPU_Req_Rx_Handler+0x44>
 802c078:	2500      	movs	r5, #0
 802c07a:	e007      	b.n	802c08c <L2C_CPU_Req_Rx_Handler+0x54>
 802c07c:	2100      	movs	r1, #0
 802c07e:	2200      	movs	r2, #0
 802c080:	2300      	movs	r3, #0
 802c082:	9100      	str	r1, [sp, #0]
 802c084:	4621      	mov	r1, r4
 802c086:	f7ff ff8e 	bl	802bfa6 <L2C_Send_Command_Reject>
 802c08a:	4605      	mov	r5, r0
 802c08c:	4628      	mov	r0, r5
 802c08e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0802c090 <__arm_cp.2_0>:
 802c090:	20009f5c 	.word	0x20009f5c

0802c094 <ACL_MemAlloc>:
 802c094:	b570      	push	{r4, r5, r6, lr}
 802c096:	4d08      	ldr	r5, [pc, #32]	@ (802c0b8 <__arm_cp.0_0>)
 802c098:	2224      	movs	r2, #36	@ 0x24
 802c09a:	4604      	mov	r4, r0
 802c09c:	8b29      	ldrh	r1, [r5, #24]
 802c09e:	f003 f92c 	bl	802f2fa <Mem_Assign>
 802c0a2:	4e06      	ldr	r6, [pc, #24]	@ (802c0bc <__arm_cp.0_1>)
 802c0a4:	2204      	movs	r2, #4
 802c0a6:	67f0      	str	r0, [r6, #124]	@ 0x7c
 802c0a8:	8b28      	ldrh	r0, [r5, #24]
 802c0aa:	3001      	adds	r0, #1
 802c0ac:	b281      	uxth	r1, r0
 802c0ae:	4620      	mov	r0, r4
 802c0b0:	f003 f923 	bl	802f2fa <Mem_Assign>
 802c0b4:	67b0      	str	r0, [r6, #120]	@ 0x78
 802c0b6:	bd70      	pop	{r4, r5, r6, pc}

0802c0b8 <__arm_cp.0_0>:
 802c0b8:	20009f34 	.word	0x20009f34

0802c0bc <__arm_cp.0_1>:
 802c0bc:	20009f5c 	.word	0x20009f5c

0802c0c0 <ACL_Init>:
 802c0c0:	b510      	push	{r4, lr}
 802c0c2:	4a15      	ldr	r2, [pc, #84]	@ (802c118 <__arm_cp.1_1>)
 802c0c4:	2401      	movs	r4, #1
 802c0c6:	4813      	ldr	r0, [pc, #76]	@ (802c114 <__arm_cp.1_0>)
 802c0c8:	2100      	movs	r1, #0
 802c0ca:	8b53      	ldrh	r3, [r2, #26]
 802c0cc:	f8a0 106c 	strh.w	r1, [r0, #108]	@ 0x6c
 802c0d0:	8b11      	ldrh	r1, [r2, #24]
 802c0d2:	7d92      	ldrb	r2, [r2, #22]
 802c0d4:	3323      	adds	r3, #35	@ 0x23
 802c0d6:	f8a0 1074 	strh.w	r1, [r0, #116]	@ 0x74
 802c0da:	eb04 1453 	add.w	r4, r4, r3, lsr #5
 802c0de:	f8a0 406a 	strh.w	r4, [r0, #106]	@ 0x6a
 802c0e2:	2402      	movs	r4, #2
 802c0e4:	eb04 1353 	add.w	r3, r4, r3, lsr #5
 802c0e8:	435a      	muls	r2, r3
 802c0ea:	3201      	adds	r2, #1
 802c0ec:	f8a0 2068 	strh.w	r2, [r0, #104]	@ 0x68
 802c0f0:	b171      	cbz	r1, 802c110 <ACL_Init+0x50>
 802c0f2:	6fc3      	ldr	r3, [r0, #124]	@ 0x7c
 802c0f4:	2201      	movs	r2, #1
 802c0f6:	6f84      	ldr	r4, [r0, #120]	@ 0x78
 802c0f8:	4291      	cmp	r1, r2
 802c0fa:	f844 3022 	str.w	r3, [r4, r2, lsl #2]
 802c0fe:	d005      	beq.n	802c10c <ACL_Init+0x4c>
 802c100:	f103 0424 	add.w	r4, r3, #36	@ 0x24
 802c104:	3201      	adds	r2, #1
 802c106:	621c      	str	r4, [r3, #32]
 802c108:	4623      	mov	r3, r4
 802c10a:	e7f4      	b.n	802c0f6 <ACL_Init+0x36>
 802c10c:	2000      	movs	r0, #0
 802c10e:	6218      	str	r0, [r3, #32]
 802c110:	bd10      	pop	{r4, pc}
 802c112:	bf00      	nop

0802c114 <__arm_cp.1_0>:
 802c114:	20009f5c 	.word	0x20009f5c

0802c118 <__arm_cp.1_1>:
 802c118:	20009f34 	.word	0x20009f34

0802c11c <ACL_New>:
 802c11c:	b570      	push	{r4, r5, r6, lr}
 802c11e:	460e      	mov	r6, r1
 802c120:	4605      	mov	r5, r0
 802c122:	f102 001f 	add.w	r0, r2, #31
 802c126:	2101      	movs	r1, #1
 802c128:	4614      	mov	r4, r2
 802c12a:	eb01 1150 	add.w	r1, r1, r0, lsr #5
 802c12e:	4628      	mov	r0, r5
 802c130:	f000 f806 	bl	802c140 <ACL_Alloc>
 802c134:	b110      	cbz	r0, 802c13c <ACL_New+0x20>
 802c136:	8106      	strh	r6, [r0, #8]
 802c138:	7185      	strb	r5, [r0, #6]
 802c13a:	8084      	strh	r4, [r0, #4]
 802c13c:	bd70      	pop	{r4, r5, r6, pc}
	...

0802c140 <ACL_Alloc>:
 802c140:	b5b0      	push	{r4, r5, r7, lr}
 802c142:	460c      	mov	r4, r1
 802c144:	4605      	mov	r5, r0
 802c146:	f000 f92d 	bl	802c3a4 <ACL_Available_Blocks>
 802c14a:	42a0      	cmp	r0, r4
 802c14c:	bf3c      	itt	cc
 802c14e:	2000      	movcc	r0, #0
 802c150:	bdb0      	popcc	{r4, r5, r7, pc}
 802c152:	480c      	ldr	r0, [pc, #48]	@ (802c184 <__arm_cp.3_0>)
 802c154:	eb00 0145 	add.w	r1, r0, r5, lsl #1
 802c158:	f8b1 206e 	ldrh.w	r2, [r1, #110]	@ 0x6e
 802c15c:	4422      	add	r2, r4
 802c15e:	f8a1 206e 	strh.w	r2, [r1, #110]	@ 0x6e
 802c162:	6f82      	ldr	r2, [r0, #120]	@ 0x78
 802c164:	f8b0 1074 	ldrh.w	r1, [r0, #116]	@ 0x74
 802c168:	1b09      	subs	r1, r1, r4
 802c16a:	f8a0 1074 	strh.w	r1, [r0, #116]	@ 0x74
 802c16e:	b289      	uxth	r1, r1
 802c170:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 802c174:	6840      	ldr	r0, [r0, #4]
 802c176:	bf1e      	ittt	ne
 802c178:	f852 1021 	ldrne.w	r1, [r2, r1, lsl #2]
 802c17c:	2200      	movne	r2, #0
 802c17e:	620a      	strne	r2, [r1, #32]
 802c180:	bdb0      	pop	{r4, r5, r7, pc}
 802c182:	bf00      	nop

0802c184 <__arm_cp.3_0>:
 802c184:	20009f5c 	.word	0x20009f5c

0802c188 <ACL_Release>:
 802c188:	7981      	ldrb	r1, [r0, #6]
 802c18a:	f000 b801 	b.w	802c190 <ACL_Free>
	...

0802c190 <ACL_Free>:
 802c190:	b570      	push	{r4, r5, r6, lr}
 802c192:	4a0f      	ldr	r2, [pc, #60]	@ (802c1d0 <__arm_cp.5_0>)
 802c194:	f8b2 3074 	ldrh.w	r3, [r2, #116]	@ 0x74
 802c198:	b11b      	cbz	r3, 802c1a2 <ACL_Free+0x12>
 802c19a:	6f94      	ldr	r4, [r2, #120]	@ 0x78
 802c19c:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]
 802c1a0:	6220      	str	r0, [r4, #32]
 802c1a2:	461c      	mov	r4, r3
 802c1a4:	b140      	cbz	r0, 802c1b8 <ACL_Free+0x28>
 802c1a6:	3401      	adds	r4, #1
 802c1a8:	6f95      	ldr	r5, [r2, #120]	@ 0x78
 802c1aa:	b2a6      	uxth	r6, r4
 802c1ac:	f8a2 4074 	strh.w	r4, [r2, #116]	@ 0x74
 802c1b0:	f845 0026 	str.w	r0, [r5, r6, lsl #2]
 802c1b4:	6a00      	ldr	r0, [r0, #32]
 802c1b6:	e7f5      	b.n	802c1a4 <ACL_Free+0x14>
 802c1b8:	f001 0103 	and.w	r1, r1, #3
 802c1bc:	1b18      	subs	r0, r3, r4
 802c1be:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 802c1c2:	f8b1 206e 	ldrh.w	r2, [r1, #110]	@ 0x6e
 802c1c6:	4410      	add	r0, r2
 802c1c8:	f8a1 006e 	strh.w	r0, [r1, #110]	@ 0x6e
 802c1cc:	bd70      	pop	{r4, r5, r6, pc}
 802c1ce:	bf00      	nop

0802c1d0 <__arm_cp.5_0>:
 802c1d0:	20009f5c 	.word	0x20009f5c

0802c1d4 <ACL_Resize>:
 802c1d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802c1d6:	1d0d      	adds	r5, r1, #4
 802c1d8:	4604      	mov	r4, r0
 802c1da:	6a00      	ldr	r0, [r0, #32]
 802c1dc:	2100      	movs	r1, #0
 802c1de:	b2aa      	uxth	r2, r5
 802c1e0:	4606      	mov	r6, r0
 802c1e2:	b168      	cbz	r0, 802c200 <ACL_Resize+0x2c>
 802c1e4:	3120      	adds	r1, #32
 802c1e6:	4607      	mov	r7, r0
 802c1e8:	6a00      	ldr	r0, [r0, #32]
 802c1ea:	b28b      	uxth	r3, r1
 802c1ec:	463e      	mov	r6, r7
 802c1ee:	4293      	cmp	r3, r2
 802c1f0:	d3f7      	bcc.n	802c1e2 <ACL_Resize+0xe>
 802c1f2:	b178      	cbz	r0, 802c214 <ACL_Resize+0x40>
 802c1f4:	79a1      	ldrb	r1, [r4, #6]
 802c1f6:	f7ff ffcb 	bl	802c190 <ACL_Free>
 802c1fa:	2000      	movs	r0, #0
 802c1fc:	6238      	str	r0, [r7, #32]
 802c1fe:	e009      	b.n	802c214 <ACL_Resize+0x40>
 802c200:	b288      	uxth	r0, r1
 802c202:	1a10      	subs	r0, r2, r0
 802c204:	301f      	adds	r0, #31
 802c206:	f3c0 114f 	ubfx	r1, r0, #5, #16
 802c20a:	79a0      	ldrb	r0, [r4, #6]
 802c20c:	f7ff ff98 	bl	802c140 <ACL_Alloc>
 802c210:	b118      	cbz	r0, 802c21a <ACL_Resize+0x46>
 802c212:	6230      	str	r0, [r6, #32]
 802c214:	2000      	movs	r0, #0
 802c216:	80a5      	strh	r5, [r4, #4]
 802c218:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802c21a:	2091      	movs	r0, #145	@ 0x91
 802c21c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0802c21e <ACL_Cmp_Data>:
 802c21e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802c220:	461d      	mov	r5, r3
 802c222:	4614      	mov	r4, r2
 802c224:	4606      	mov	r6, r0
 802c226:	0420      	lsls	r0, r4, #16
 802c228:	bf04      	itt	eq
 802c22a:	2000      	moveq	r0, #0
 802c22c:	bdf8      	popeq	{r3, r4, r5, r6, r7, pc}
 802c22e:	6a36      	ldr	r6, [r6, #32]
 802c230:	b1ae      	cbz	r6, 802c25e <ACL_Cmp_Data+0x40>
 802c232:	b288      	uxth	r0, r1
 802c234:	2820      	cmp	r0, #32
 802c236:	d301      	bcc.n	802c23c <ACL_Cmp_Data+0x1e>
 802c238:	3920      	subs	r1, #32
 802c23a:	e7f4      	b.n	802c226 <ACL_Cmp_Data+0x8>
 802c23c:	f1c1 0120 	rsb	r1, r1, #32
 802c240:	b2a7      	uxth	r7, r4
 802c242:	4430      	add	r0, r6
 802c244:	b289      	uxth	r1, r1
 802c246:	42b9      	cmp	r1, r7
 802c248:	bf38      	it	cc
 802c24a:	460f      	movcc	r7, r1
 802c24c:	4629      	mov	r1, r5
 802c24e:	463a      	mov	r2, r7
 802c250:	f7f8 fa02 	bl	8024658 <ble_memcmp>
 802c254:	b920      	cbnz	r0, 802c260 <ACL_Cmp_Data+0x42>
 802c256:	1be4      	subs	r4, r4, r7
 802c258:	443d      	add	r5, r7
 802c25a:	2100      	movs	r1, #0
 802c25c:	e7e3      	b.n	802c226 <ACL_Cmp_Data+0x8>
 802c25e:	b2a0      	uxth	r0, r4
 802c260:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0802c262 <ACL_Get_Data>:
 802c262:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802c264:	461c      	mov	r4, r3
 802c266:	4615      	mov	r5, r2
 802c268:	4606      	mov	r6, r0
 802c26a:	e014      	b.n	802c296 <ACL_Get_Data+0x34>
 802c26c:	b288      	uxth	r0, r1
 802c26e:	2820      	cmp	r0, #32
 802c270:	d301      	bcc.n	802c276 <ACL_Get_Data+0x14>
 802c272:	3920      	subs	r1, #32
 802c274:	e00f      	b.n	802c296 <ACL_Get_Data+0x34>
 802c276:	1832      	adds	r2, r6, r0
 802c278:	f1c1 0020 	rsb	r0, r1, #32
 802c27c:	b2af      	uxth	r7, r5
 802c27e:	b280      	uxth	r0, r0
 802c280:	4611      	mov	r1, r2
 802c282:	42b8      	cmp	r0, r7
 802c284:	bf38      	it	cc
 802c286:	4607      	movcc	r7, r0
 802c288:	4620      	mov	r0, r4
 802c28a:	463a      	mov	r2, r7
 802c28c:	f7f8 f95c 	bl	8024548 <ble_memcpy>
 802c290:	1bed      	subs	r5, r5, r7
 802c292:	443c      	add	r4, r7
 802c294:	2100      	movs	r1, #0
 802c296:	0428      	lsls	r0, r5, #16
 802c298:	bf1c      	itt	ne
 802c29a:	6a36      	ldrne	r6, [r6, #32]
 802c29c:	2e00      	cmpne	r6, #0
 802c29e:	d1e5      	bne.n	802c26c <ACL_Get_Data+0xa>
 802c2a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0802c2a2 <ACL_Set_Data>:
 802c2a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802c2a4:	461c      	mov	r4, r3
 802c2a6:	4615      	mov	r5, r2
 802c2a8:	4606      	mov	r6, r0
 802c2aa:	e013      	b.n	802c2d4 <ACL_Set_Data+0x32>
 802c2ac:	b288      	uxth	r0, r1
 802c2ae:	2820      	cmp	r0, #32
 802c2b0:	d301      	bcc.n	802c2b6 <ACL_Set_Data+0x14>
 802c2b2:	3920      	subs	r1, #32
 802c2b4:	e00e      	b.n	802c2d4 <ACL_Set_Data+0x32>
 802c2b6:	f1c1 0120 	rsb	r1, r1, #32
 802c2ba:	b2af      	uxth	r7, r5
 802c2bc:	4430      	add	r0, r6
 802c2be:	b289      	uxth	r1, r1
 802c2c0:	42b9      	cmp	r1, r7
 802c2c2:	bf38      	it	cc
 802c2c4:	460f      	movcc	r7, r1
 802c2c6:	4621      	mov	r1, r4
 802c2c8:	463a      	mov	r2, r7
 802c2ca:	f7f8 f93d 	bl	8024548 <ble_memcpy>
 802c2ce:	1bed      	subs	r5, r5, r7
 802c2d0:	443c      	add	r4, r7
 802c2d2:	2100      	movs	r1, #0
 802c2d4:	0428      	lsls	r0, r5, #16
 802c2d6:	bf1c      	itt	ne
 802c2d8:	6a36      	ldrne	r6, [r6, #32]
 802c2da:	2e00      	cmpne	r6, #0
 802c2dc:	d1e6      	bne.n	802c2ac <ACL_Set_Data+0xa>
 802c2de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0802c2e0 <ACL_Copy_Data>:
 802c2e0:	b5b0      	push	{r4, r5, r7, lr}
 802c2e2:	460c      	mov	r4, r1
 802c2e4:	4605      	mov	r5, r0
 802c2e6:	6a2d      	ldr	r5, [r5, #32]
 802c2e8:	b13d      	cbz	r5, 802c2fa <ACL_Copy_Data+0x1a>
 802c2ea:	6a24      	ldr	r4, [r4, #32]
 802c2ec:	b12c      	cbz	r4, 802c2fa <ACL_Copy_Data+0x1a>
 802c2ee:	4628      	mov	r0, r5
 802c2f0:	4621      	mov	r1, r4
 802c2f2:	2220      	movs	r2, #32
 802c2f4:	f7f8 f928 	bl	8024548 <ble_memcpy>
 802c2f8:	e7f5      	b.n	802c2e6 <ACL_Copy_Data+0x6>
 802c2fa:	bdb0      	pop	{r4, r5, r7, pc}

0802c2fc <ACL_Append>:
 802c2fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802c300:	b089      	sub	sp, #36	@ 0x24
 802c302:	4680      	mov	r8, r0
 802c304:	6a02      	ldr	r2, [r0, #32]
 802c306:	4610      	mov	r0, r2
 802c308:	6a12      	ldr	r2, [r2, #32]
 802c30a:	2a00      	cmp	r2, #0
 802c30c:	d1fb      	bne.n	802c306 <ACL_Append+0xa>
 802c30e:	6a0a      	ldr	r2, [r1, #32]
 802c310:	6202      	str	r2, [r0, #32]
 802c312:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 802c316:	888a      	ldrh	r2, [r1, #4]
 802c318:	18d4      	adds	r4, r2, r3
 802c31a:	f8a8 4004 	strh.w	r4, [r8, #4]
 802c31e:	2400      	movs	r4, #0
 802c320:	f013 051f 	ands.w	r5, r3, #31
 802c324:	620c      	str	r4, [r1, #32]
 802c326:	808c      	strh	r4, [r1, #4]
 802c328:	d02a      	beq.n	802c380 <ACL_Append+0x84>
 802c32a:	f002 011f 	and.w	r1, r2, #31
 802c32e:	f10d 0904 	add.w	r9, sp, #4
 802c332:	f8df a054 	ldr.w	sl, [pc, #84]	@ 802c388 <__arm_cp.12_0>
 802c336:	f1c5 0720 	rsb	r7, r5, #32
 802c33a:	9100      	str	r1, [sp, #0]
 802c33c:	eba9 0105 	sub.w	r1, r9, r5
 802c340:	f101 0b20 	add.w	fp, r1, #32
 802c344:	6a01      	ldr	r1, [r0, #32]
 802c346:	4604      	mov	r4, r0
 802c348:	4648      	mov	r0, r9
 802c34a:	2220      	movs	r2, #32
 802c34c:	460e      	mov	r6, r1
 802c34e:	47d0      	blx	sl
 802c350:	1960      	adds	r0, r4, r5
 802c352:	4649      	mov	r1, r9
 802c354:	463a      	mov	r2, r7
 802c356:	47d0      	blx	sl
 802c358:	4630      	mov	r0, r6
 802c35a:	4659      	mov	r1, fp
 802c35c:	462a      	mov	r2, r5
 802c35e:	47d0      	blx	sl
 802c360:	6a31      	ldr	r1, [r6, #32]
 802c362:	4630      	mov	r0, r6
 802c364:	2900      	cmp	r1, #0
 802c366:	d1ee      	bne.n	802c346 <ACL_Append+0x4a>
 802c368:	9800      	ldr	r0, [sp, #0]
 802c36a:	b148      	cbz	r0, 802c380 <ACL_Append+0x84>
 802c36c:	4428      	add	r0, r5
 802c36e:	2820      	cmp	r0, #32
 802c370:	d806      	bhi.n	802c380 <ACL_Append+0x84>
 802c372:	f898 1006 	ldrb.w	r1, [r8, #6]
 802c376:	4630      	mov	r0, r6
 802c378:	f7ff ff0a 	bl	802c190 <ACL_Free>
 802c37c:	2000      	movs	r0, #0
 802c37e:	6220      	str	r0, [r4, #32]
 802c380:	b009      	add	sp, #36	@ 0x24
 802c382:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802c386:	bf00      	nop

0802c388 <__arm_cp.12_0>:
 802c388:	08024549 	.word	0x08024549

0802c38c <ACL_Tx_Pool_Size>:
 802c38c:	b510      	push	{r4, lr}
 802c38e:	3023      	adds	r0, #35	@ 0x23
 802c390:	2101      	movs	r1, #1
 802c392:	eb01 1450 	add.w	r4, r1, r0, lsr #5
 802c396:	2001      	movs	r0, #1
 802c398:	f000 f804 	bl	802c3a4 <ACL_Available_Blocks>
 802c39c:	fbb0 f0f4 	udiv	r0, r0, r4
 802c3a0:	bd10      	pop	{r4, pc}
	...

0802c3a4 <ACL_Available_Blocks>:
 802c3a4:	b510      	push	{r4, lr}
 802c3a6:	490f      	ldr	r1, [pc, #60]	@ (802c3e4 <__arm_cp.14_0>)
 802c3a8:	f8b1 2074 	ldrh.w	r2, [r1, #116]	@ 0x74
 802c3ac:	b1ba      	cbz	r2, 802c3de <ACL_Available_Blocks+0x3a>
 802c3ae:	fab0 f380 	clz	r3, r0
 802c3b2:	095b      	lsrs	r3, r3, #5
 802c3b4:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 802c3b8:	f8b3 406e 	ldrh.w	r4, [r3, #110]	@ 0x6e
 802c3bc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 802c3c0:	1b1b      	subs	r3, r3, r4
 802c3c2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 802c3c6:	1ad2      	subs	r2, r2, r3
 802c3c8:	2802      	cmp	r0, #2
 802c3ca:	d009      	beq.n	802c3e0 <ACL_Available_Blocks+0x3c>
 802c3cc:	f8b1 0072 	ldrh.w	r0, [r1, #114]	@ 0x72
 802c3d0:	f8b1 106c 	ldrh.w	r1, [r1, #108]	@ 0x6c
 802c3d4:	1a08      	subs	r0, r1, r0
 802c3d6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 802c3da:	1a12      	subs	r2, r2, r0
 802c3dc:	e000      	b.n	802c3e0 <ACL_Available_Blocks+0x3c>
 802c3de:	2200      	movs	r2, #0
 802c3e0:	b290      	uxth	r0, r2
 802c3e2:	bd10      	pop	{r4, pc}

0802c3e4 <__arm_cp.14_0>:
 802c3e4:	20009f5c 	.word	0x20009f5c

0802c3e8 <ACL_Get_Count>:
 802c3e8:	2100      	movs	r1, #0
 802c3ea:	460a      	mov	r2, r1
 802c3ec:	3101      	adds	r1, #1
 802c3ee:	6a00      	ldr	r0, [r0, #32]
 802c3f0:	2800      	cmp	r0, #0
 802c3f2:	d1fa      	bne.n	802c3ea <ACL_Get_Count+0x2>
 802c3f4:	b290      	uxth	r0, r2
 802c3f6:	4770      	bx	lr

0802c3f8 <ACL_List_Insert_Tail>:
 802c3f8:	2200      	movs	r2, #0
 802c3fa:	600a      	str	r2, [r1, #0]
 802c3fc:	6802      	ldr	r2, [r0, #0]
 802c3fe:	2a00      	cmp	r2, #0
 802c400:	4602      	mov	r2, r0
 802c402:	bf18      	it	ne
 802c404:	6842      	ldrne	r2, [r0, #4]
 802c406:	6011      	str	r1, [r2, #0]
 802c408:	6041      	str	r1, [r0, #4]
 802c40a:	4770      	bx	lr

0802c40c <ACL_List_Insert_Head>:
 802c40c:	6802      	ldr	r2, [r0, #0]
 802c40e:	600a      	str	r2, [r1, #0]
 802c410:	b902      	cbnz	r2, 802c414 <ACL_List_Insert_Head+0x8>
 802c412:	6041      	str	r1, [r0, #4]
 802c414:	6001      	str	r1, [r0, #0]
 802c416:	4770      	bx	lr

0802c418 <ACL_List_Remove>:
 802c418:	6803      	ldr	r3, [r0, #0]
 802c41a:	428b      	cmp	r3, r1
 802c41c:	d00a      	beq.n	802c434 <ACL_List_Remove+0x1c>
 802c41e:	461a      	mov	r2, r3
 802c420:	681b      	ldr	r3, [r3, #0]
 802c422:	428b      	cmp	r3, r1
 802c424:	d1fb      	bne.n	802c41e <ACL_List_Remove+0x6>
 802c426:	680b      	ldr	r3, [r1, #0]
 802c428:	6013      	str	r3, [r2, #0]
 802c42a:	6843      	ldr	r3, [r0, #4]
 802c42c:	428b      	cmp	r3, r1
 802c42e:	bf08      	it	eq
 802c430:	6042      	streq	r2, [r0, #4]
 802c432:	e002      	b.n	802c43a <ACL_List_Remove+0x22>
 802c434:	6809      	ldr	r1, [r1, #0]
 802c436:	6001      	str	r1, [r0, #0]
 802c438:	b101      	cbz	r1, 802c43c <ACL_List_Remove+0x24>
 802c43a:	4770      	bx	lr
 802c43c:	2100      	movs	r1, #0
 802c43e:	6041      	str	r1, [r0, #4]
 802c440:	4770      	bx	lr

0802c442 <SDB_Get_Sec_Record>:
 802c442:	b51c      	push	{r2, r3, r4, lr}
 802c444:	460b      	mov	r3, r1
 802c446:	2150      	movs	r1, #80	@ 0x50
 802c448:	2200      	movs	r2, #0
 802c44a:	2400      	movs	r4, #0
 802c44c:	9100      	str	r1, [sp, #0]
 802c44e:	2100      	movs	r1, #0
 802c450:	f7dd fa66 	bl	8009920 <BLEPLAT_NvmGet>
 802c454:	3003      	adds	r0, #3
 802c456:	bf08      	it	eq
 802c458:	245c      	moveq	r4, #92	@ 0x5c
 802c45a:	4620      	mov	r0, r4
 802c45c:	bd1c      	pop	{r2, r3, r4, pc}

0802c45e <SDB_Read_Sec_Record>:
 802c45e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802c462:	4614      	mov	r4, r2
 802c464:	4689      	mov	r9, r1
 802c466:	4606      	mov	r6, r0
 802c468:	b139      	cbz	r1, 802c47a <SDB_Read_Sec_Record+0x1c>
 802c46a:	7970      	ldrb	r0, [r6, #5]
 802c46c:	f000 00c0 	and.w	r0, r0, #192	@ 0xc0
 802c470:	3840      	subs	r0, #64	@ 0x40
 802c472:	fab0 f080 	clz	r0, r0
 802c476:	0945      	lsrs	r5, r0, #5
 802c478:	e000      	b.n	802c47c <SDB_Read_Sec_Record+0x1e>
 802c47a:	2500      	movs	r5, #0
 802c47c:	f104 071e 	add.w	r7, r4, #30
 802c480:	f104 083e 	add.w	r8, r4, #62	@ 0x3e
 802c484:	2100      	movs	r1, #0
 802c486:	b2c8      	uxtb	r0, r1
 802c488:	4621      	mov	r1, r4
 802c48a:	f7ff ffda 	bl	802c442 <SDB_Get_Sec_Record>
 802c48e:	b9b0      	cbnz	r0, 802c4be <SDB_Read_Sec_Record+0x60>
 802c490:	b125      	cbz	r5, 802c49c <SDB_Read_Sec_Record+0x3e>
 802c492:	4638      	mov	r0, r7
 802c494:	4631      	mov	r1, r6
 802c496:	f002 fefe 	bl	802f296 <RndAddr_Check_Resolvable_Address>
 802c49a:	e00a      	b.n	802c4b2 <SDB_Read_Sec_Record+0x54>
 802c49c:	7860      	ldrb	r0, [r4, #1]
 802c49e:	2101      	movs	r1, #1
 802c4a0:	f000 0001 	and.w	r0, r0, #1
 802c4a4:	4548      	cmp	r0, r9
 802c4a6:	d1ee      	bne.n	802c486 <SDB_Read_Sec_Record+0x28>
 802c4a8:	4640      	mov	r0, r8
 802c4aa:	4631      	mov	r1, r6
 802c4ac:	2206      	movs	r2, #6
 802c4ae:	f7f8 f8d3 	bl	8024658 <ble_memcmp>
 802c4b2:	2101      	movs	r1, #1
 802c4b4:	2800      	cmp	r0, #0
 802c4b6:	d1e6      	bne.n	802c486 <SDB_Read_Sec_Record+0x28>
 802c4b8:	2000      	movs	r0, #0
 802c4ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802c4be:	205c      	movs	r0, #92	@ 0x5c
 802c4c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0802c4c4 <SDB_Get_Number_Of_Sec_Records>:
 802c4c4:	b5bc      	push	{r2, r3, r4, r5, r7, lr}
 802c4c6:	2400      	movs	r4, #0
 802c4c8:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 802c4cc:	2000      	movs	r0, #0
 802c4ce:	b2c0      	uxtb	r0, r0
 802c4d0:	2100      	movs	r1, #0
 802c4d2:	2200      	movs	r2, #0
 802c4d4:	2300      	movs	r3, #0
 802c4d6:	9400      	str	r4, [sp, #0]
 802c4d8:	f7dd fa22 	bl	8009920 <BLEPLAT_NvmGet>
 802c4dc:	3003      	adds	r0, #3
 802c4de:	f105 0501 	add.w	r5, r5, #1
 802c4e2:	f04f 0001 	mov.w	r0, #1
 802c4e6:	d1f2      	bne.n	802c4ce <SDB_Get_Number_Of_Sec_Records+0xa>
 802c4e8:	b2e8      	uxtb	r0, r5
 802c4ea:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}

0802c4ec <SDB_Find_Gatt_Record>:
 802c4ec:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 802c4f0:	ae01      	add	r6, sp, #4
 802c4f2:	4688      	mov	r8, r1
 802c4f4:	4605      	mov	r5, r0
 802c4f6:	2100      	movs	r1, #0
 802c4f8:	240c      	movs	r4, #12
 802c4fa:	1c77      	adds	r7, r6, #1
 802c4fc:	b2c8      	uxtb	r0, r1
 802c4fe:	2101      	movs	r1, #1
 802c500:	2200      	movs	r2, #0
 802c502:	4633      	mov	r3, r6
 802c504:	9400      	str	r4, [sp, #0]
 802c506:	f7dd fa0b 	bl	8009920 <BLEPLAT_NvmGet>
 802c50a:	3003      	adds	r0, #3
 802c50c:	d00c      	beq.n	802c528 <SDB_Find_Gatt_Record+0x3c>
 802c50e:	4638      	mov	r0, r7
 802c510:	4629      	mov	r1, r5
 802c512:	2206      	movs	r2, #6
 802c514:	f7f8 f8a0 	bl	8024658 <ble_memcmp>
 802c518:	2101      	movs	r1, #1
 802c51a:	2800      	cmp	r0, #0
 802c51c:	d1ee      	bne.n	802c4fc <SDB_Find_Gatt_Record+0x10>
 802c51e:	9803      	ldr	r0, [sp, #12]
 802c520:	f8c8 0000 	str.w	r0, [r8]
 802c524:	2000      	movs	r0, #0
 802c526:	e001      	b.n	802c52c <SDB_Find_Gatt_Record+0x40>
 802c528:	f06f 0002 	mvn.w	r0, #2
 802c52c:	b004      	add	sp, #16
 802c52e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0802c532 <SDB_Write_Sec_Record>:
 802c532:	b570      	push	{r4, r5, r6, lr}
 802c534:	b096      	sub	sp, #88	@ 0x58
 802c536:	4604      	mov	r4, r0
 802c538:	7840      	ldrb	r0, [r0, #1]
 802c53a:	aa02      	add	r2, sp, #8
 802c53c:	f104 063e 	add.w	r6, r4, #62	@ 0x3e
 802c540:	f000 0101 	and.w	r1, r0, #1
 802c544:	4630      	mov	r0, r6
 802c546:	f7ff ff8a 	bl	802c45e <SDB_Read_Sec_Record>
 802c54a:	b168      	cbz	r0, 802c568 <SDB_Write_Sec_Record+0x36>
 802c54c:	7860      	ldrb	r0, [r4, #1]
 802c54e:	2810      	cmp	r0, #16
 802c550:	d359      	bcc.n	802c606 <SDB_Write_Sec_Record+0xd4>
 802c552:	2500      	movs	r5, #0
 802c554:	f000 f90a 	bl	802c76c <OUTLINED_FUNCTION_0>
 802c558:	1c41      	adds	r1, r0, #1
 802c55a:	d04f      	beq.n	802c5fc <SDB_Write_Sec_Record+0xca>
 802c55c:	3004      	adds	r0, #4
 802c55e:	d152      	bne.n	802c606 <SDB_Write_Sec_Record+0xd4>
 802c560:	2000      	movs	r0, #0
 802c562:	f000 f852 	bl	802c60a <SDB_Warning_Event>
 802c566:	e04e      	b.n	802c606 <SDB_Write_Sec_Record+0xd4>
 802c568:	ad02      	add	r5, sp, #8
 802c56a:	4620      	mov	r0, r4
 802c56c:	2250      	movs	r2, #80	@ 0x50
 802c56e:	4629      	mov	r1, r5
 802c570:	f7f8 f872 	bl	8024658 <ble_memcmp>
 802c574:	2800      	cmp	r0, #0
 802c576:	d046      	beq.n	802c606 <SDB_Write_Sec_Record+0xd4>
 802c578:	f000 f8ff 	bl	802c77a <OUTLINED_FUNCTION_1>
 802c57c:	f89d 100b 	ldrb.w	r1, [sp, #11]
 802c580:	78e0      	ldrb	r0, [r4, #3]
 802c582:	4288      	cmp	r0, r1
 802c584:	d1e2      	bne.n	802c54c <SDB_Write_Sec_Record+0x1a>
 802c586:	7860      	ldrb	r0, [r4, #1]
 802c588:	06c1      	lsls	r1, r0, #27
 802c58a:	d40e      	bmi.n	802c5aa <SDB_Write_Sec_Record+0x78>
 802c58c:	f89d 1009 	ldrb.w	r1, [sp, #9]
 802c590:	06c9      	lsls	r1, r1, #27
 802c592:	d50a      	bpl.n	802c5aa <SDB_Write_Sec_Record+0x78>
 802c594:	f104 0044 	add.w	r0, r4, #68	@ 0x44
 802c598:	f105 0144 	add.w	r1, r5, #68	@ 0x44
 802c59c:	2202      	movs	r2, #2
 802c59e:	f7f7 ffd3 	bl	8024548 <ble_memcpy>
 802c5a2:	7860      	ldrb	r0, [r4, #1]
 802c5a4:	f040 0010 	orr.w	r0, r0, #16
 802c5a8:	7060      	strb	r0, [r4, #1]
 802c5aa:	0681      	lsls	r1, r0, #26
 802c5ac:	d414      	bmi.n	802c5d8 <SDB_Write_Sec_Record+0xa6>
 802c5ae:	f89d 1009 	ldrb.w	r1, [sp, #9]
 802c5b2:	0689      	lsls	r1, r1, #26
 802c5b4:	d510      	bpl.n	802c5d8 <SDB_Write_Sec_Record+0xa6>
 802c5b6:	f104 001e 	add.w	r0, r4, #30
 802c5ba:	f105 011e 	add.w	r1, r5, #30
 802c5be:	2210      	movs	r2, #16
 802c5c0:	f7f7 ffc2 	bl	8024548 <ble_memcpy>
 802c5c4:	f105 013e 	add.w	r1, r5, #62	@ 0x3e
 802c5c8:	4630      	mov	r0, r6
 802c5ca:	2206      	movs	r2, #6
 802c5cc:	f7f7 ffbc 	bl	8024548 <ble_memcpy>
 802c5d0:	7860      	ldrb	r0, [r4, #1]
 802c5d2:	f040 0020 	orr.w	r0, r0, #32
 802c5d6:	7060      	strb	r0, [r4, #1]
 802c5d8:	0640      	lsls	r0, r0, #25
 802c5da:	d4ba      	bmi.n	802c552 <SDB_Write_Sec_Record+0x20>
 802c5dc:	f89d 0009 	ldrb.w	r0, [sp, #9]
 802c5e0:	0640      	lsls	r0, r0, #25
 802c5e2:	d5b3      	bpl.n	802c54c <SDB_Write_Sec_Record+0x1a>
 802c5e4:	f104 002e 	add.w	r0, r4, #46	@ 0x2e
 802c5e8:	f105 012e 	add.w	r1, r5, #46	@ 0x2e
 802c5ec:	2210      	movs	r2, #16
 802c5ee:	f7f7 ffab 	bl	8024548 <ble_memcpy>
 802c5f2:	7860      	ldrb	r0, [r4, #1]
 802c5f4:	f040 0040 	orr.w	r0, r0, #64	@ 0x40
 802c5f8:	7060      	strb	r0, [r4, #1]
 802c5fa:	e7aa      	b.n	802c552 <SDB_Write_Sec_Record+0x20>
 802c5fc:	2003      	movs	r0, #3
 802c5fe:	f7dd f9b9 	bl	8009974 <BLEPLAT_NvmDiscard>
 802c602:	f000 f8b3 	bl	802c76c <OUTLINED_FUNCTION_0>
 802c606:	b016      	add	sp, #88	@ 0x58
 802c608:	bd70      	pop	{r4, r5, r6, pc}

0802c60a <SDB_Warning_Event>:
 802c60a:	b5e0      	push	{r5, r6, r7, lr}
 802c60c:	f88d 0007 	strb.w	r0, [sp, #7]
 802c610:	f10d 0207 	add.w	r2, sp, #7
 802c614:	2003      	movs	r0, #3
 802c616:	2101      	movs	r1, #1
 802c618:	f7fa fe24 	bl	8027264 <EVT_aci_hal_fw_error>
 802c61c:	bd8c      	pop	{r2, r3, r7, pc}

0802c61e <SDB_Write_Gatt_Data>:
 802c61e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802c622:	b09c      	sub	sp, #112	@ 0x70
 802c624:	461c      	mov	r4, r3
 802c626:	4617      	mov	r7, r2
 802c628:	460d      	mov	r5, r1
 802c62a:	4606      	mov	r6, r0
 802c62c:	b191      	cbz	r1, 802c654 <SDB_Write_Gatt_Data+0x36>
 802c62e:	7970      	ldrb	r0, [r6, #5]
 802c630:	f000 00c0 	and.w	r0, r0, #192	@ 0xc0
 802c634:	2840      	cmp	r0, #64	@ 0x40
 802c636:	d10d      	bne.n	802c654 <SDB_Write_Gatt_Data+0x36>
 802c638:	f10d 0808 	add.w	r8, sp, #8
 802c63c:	4630      	mov	r0, r6
 802c63e:	4629      	mov	r1, r5
 802c640:	4642      	mov	r2, r8
 802c642:	f7ff ff0c 	bl	802c45e <SDB_Read_Sec_Record>
 802c646:	2800      	cmp	r0, #0
 802c648:	d167      	bne.n	802c71a <SDB_Write_Gatt_Data+0xfc>
 802c64a:	f108 013e 	add.w	r1, r8, #62	@ 0x3e
 802c64e:	f10d 006a 	add.w	r0, sp, #106	@ 0x6a
 802c652:	e002      	b.n	802c65a <SDB_Write_Gatt_Data+0x3c>
 802c654:	f10d 006a 	add.w	r0, sp, #106	@ 0x6a
 802c658:	4631      	mov	r1, r6
 802c65a:	2206      	movs	r2, #6
 802c65c:	f7f7 ff74 	bl	8024548 <ble_memcpy>
 802c660:	f10d 006a 	add.w	r0, sp, #106	@ 0x6a
 802c664:	a919      	add	r1, sp, #100	@ 0x64
 802c666:	f7ff ff41 	bl	802c4ec <SDB_Find_Gatt_Record>
 802c66a:	b958      	cbnz	r0, 802c684 <SDB_Write_Gatt_Data+0x66>
 802c66c:	9819      	ldr	r0, [sp, #100]	@ 0x64
 802c66e:	42b8      	cmp	r0, r7
 802c670:	d106      	bne.n	802c680 <SDB_Write_Gatt_Data+0x62>
 802c672:	b2ba      	uxth	r2, r7
 802c674:	200c      	movs	r0, #12
 802c676:	4621      	mov	r1, r4
 802c678:	f7dd f969 	bl	800994e <BLEPLAT_NvmCompare>
 802c67c:	2800      	cmp	r0, #0
 802c67e:	d04e      	beq.n	802c71e <SDB_Write_Gatt_Data+0x100>
 802c680:	f000 f87b 	bl	802c77a <OUTLINED_FUNCTION_1>
 802c684:	20fe      	movs	r0, #254	@ 0xfe
 802c686:	f89d 106b 	ldrb.w	r1, [sp, #107]	@ 0x6b
 802c68a:	f89d 206c 	ldrb.w	r2, [sp, #108]	@ 0x6c
 802c68e:	f89d 306d 	ldrb.w	r3, [sp, #109]	@ 0x6d
 802c692:	9718      	str	r7, [sp, #96]	@ 0x60
 802c694:	b2bf      	uxth	r7, r7
 802c696:	f88d 0058 	strb.w	r0, [sp, #88]	@ 0x58
 802c69a:	f89d 006a 	ldrb.w	r0, [sp, #106]	@ 0x6a
 802c69e:	9700      	str	r7, [sp, #0]
 802c6a0:	f88d 205b 	strb.w	r2, [sp, #91]	@ 0x5b
 802c6a4:	f88d 305c 	strb.w	r3, [sp, #92]	@ 0x5c
 802c6a8:	f88d 105a 	strb.w	r1, [sp, #90]	@ 0x5a
 802c6ac:	220c      	movs	r2, #12
 802c6ae:	4623      	mov	r3, r4
 802c6b0:	f88d 0059 	strb.w	r0, [sp, #89]	@ 0x59
 802c6b4:	f89d 006e 	ldrb.w	r0, [sp, #110]	@ 0x6e
 802c6b8:	f88d 005d 	strb.w	r0, [sp, #93]	@ 0x5d
 802c6bc:	20ff      	movs	r0, #255	@ 0xff
 802c6be:	f88d 005f 	strb.w	r0, [sp, #95]	@ 0x5f
 802c6c2:	f89d 006f 	ldrb.w	r0, [sp, #111]	@ 0x6f
 802c6c6:	f88d 005e 	strb.w	r0, [sp, #94]	@ 0x5e
 802c6ca:	a916      	add	r1, sp, #88	@ 0x58
 802c6cc:	2001      	movs	r0, #1
 802c6ce:	f7dd f911 	bl	80098f4 <BLEPLAT_NvmAdd>
 802c6d2:	b320      	cbz	r0, 802c71e <SDB_Write_Gatt_Data+0x100>
 802c6d4:	1c41      	adds	r1, r0, #1
 802c6d6:	d005      	beq.n	802c6e4 <SDB_Write_Gatt_Data+0xc6>
 802c6d8:	3004      	adds	r0, #4
 802c6da:	d11e      	bne.n	802c71a <SDB_Write_Gatt_Data+0xfc>
 802c6dc:	2001      	movs	r0, #1
 802c6de:	f7ff ff94 	bl	802c60a <SDB_Warning_Event>
 802c6e2:	e01c      	b.n	802c71e <SDB_Write_Gatt_Data+0x100>
 802c6e4:	aa02      	add	r2, sp, #8
 802c6e6:	4630      	mov	r0, r6
 802c6e8:	4629      	mov	r1, r5
 802c6ea:	f7ff feb8 	bl	802c45e <SDB_Read_Sec_Record>
 802c6ee:	4605      	mov	r5, r0
 802c6f0:	2003      	movs	r0, #3
 802c6f2:	f7dd f93f 	bl	8009974 <BLEPLAT_NvmDiscard>
 802c6f6:	b945      	cbnz	r5, 802c70a <SDB_Write_Gatt_Data+0xec>
 802c6f8:	2000      	movs	r0, #0
 802c6fa:	2250      	movs	r2, #80	@ 0x50
 802c6fc:	2300      	movs	r3, #0
 802c6fe:	9000      	str	r0, [sp, #0]
 802c700:	a902      	add	r1, sp, #8
 802c702:	2000      	movs	r0, #0
 802c704:	f7dd f8f6 	bl	80098f4 <BLEPLAT_NvmAdd>
 802c708:	b938      	cbnz	r0, 802c71a <SDB_Write_Gatt_Data+0xfc>
 802c70a:	9700      	str	r7, [sp, #0]
 802c70c:	a916      	add	r1, sp, #88	@ 0x58
 802c70e:	2001      	movs	r0, #1
 802c710:	220c      	movs	r2, #12
 802c712:	4623      	mov	r3, r4
 802c714:	f7dd f8ee 	bl	80098f4 <BLEPLAT_NvmAdd>
 802c718:	b108      	cbz	r0, 802c71e <SDB_Write_Gatt_Data+0x100>
 802c71a:	2097      	movs	r0, #151	@ 0x97
 802c71c:	e000      	b.n	802c720 <SDB_Write_Gatt_Data+0x102>
 802c71e:	2000      	movs	r0, #0
 802c720:	b01c      	add	sp, #112	@ 0x70
 802c722:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0802c726 <SDB_Read_Gatt_Data>:
 802c726:	b570      	push	{r4, r5, r6, lr}
 802c728:	b096      	sub	sp, #88	@ 0x58
 802c72a:	ae02      	add	r6, sp, #8
 802c72c:	4615      	mov	r5, r2
 802c72e:	461c      	mov	r4, r3
 802c730:	4632      	mov	r2, r6
 802c732:	f7ff fe94 	bl	802c45e <SDB_Read_Sec_Record>
 802c736:	b928      	cbnz	r0, 802c744 <SDB_Read_Gatt_Data+0x1e>
 802c738:	f106 003e 	add.w	r0, r6, #62	@ 0x3e
 802c73c:	a901      	add	r1, sp, #4
 802c73e:	f7ff fed5 	bl	802c4ec <SDB_Find_Gatt_Record>
 802c742:	b110      	cbz	r0, 802c74a <SDB_Read_Gatt_Data+0x24>
 802c744:	205c      	movs	r0, #92	@ 0x5c
 802c746:	b016      	add	sp, #88	@ 0x58
 802c748:	bd70      	pop	{r4, r5, r6, pc}
 802c74a:	6829      	ldr	r1, [r5, #0]
 802c74c:	9801      	ldr	r0, [sp, #4]
 802c74e:	4288      	cmp	r0, r1
 802c750:	d901      	bls.n	802c756 <SDB_Read_Gatt_Data+0x30>
 802c752:	2098      	movs	r0, #152	@ 0x98
 802c754:	e7f7      	b.n	802c746 <SDB_Read_Gatt_Data+0x20>
 802c756:	6028      	str	r0, [r5, #0]
 802c758:	b280      	uxth	r0, r0
 802c75a:	2101      	movs	r1, #1
 802c75c:	220c      	movs	r2, #12
 802c75e:	4623      	mov	r3, r4
 802c760:	9000      	str	r0, [sp, #0]
 802c762:	2002      	movs	r0, #2
 802c764:	f7dd f8dc 	bl	8009920 <BLEPLAT_NvmGet>
 802c768:	2000      	movs	r0, #0
 802c76a:	e7ec      	b.n	802c746 <SDB_Read_Gatt_Data+0x20>

0802c76c <OUTLINED_FUNCTION_0>:
 802c76c:	2000      	movs	r0, #0
 802c76e:	4621      	mov	r1, r4
 802c770:	2250      	movs	r2, #80	@ 0x50
 802c772:	2300      	movs	r3, #0
 802c774:	9500      	str	r5, [sp, #0]
 802c776:	f7dd b8bd 	b.w	80098f4 <BLEPLAT_NvmAdd>

0802c77a <OUTLINED_FUNCTION_1>:
 802c77a:	2002      	movs	r0, #2
 802c77c:	f7dd b8fa 	b.w	8009974 <BLEPLAT_NvmDiscard>

0802c780 <SMA_Compute_EDIV>:
 802c780:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802c784:	b08e      	sub	sp, #56	@ 0x38
 802c786:	4605      	mov	r5, r0
 802c788:	2003      	movs	r0, #3
 802c78a:	f10d 0804 	add.w	r8, sp, #4
 802c78e:	460e      	mov	r6, r1
 802c790:	4614      	mov	r4, r2
 802c792:	f10d 0116 	add.w	r1, sp, #22
 802c796:	f8ad 0016 	strh.w	r0, [sp, #22]
 802c79a:	2000      	movs	r0, #0
 802c79c:	4643      	mov	r3, r8
 802c79e:	f8ad 0014 	strh.w	r0, [sp, #20]
 802c7a2:	4814      	ldr	r0, [pc, #80]	@ (802c7f4 <__arm_cp.0_0>)
 802c7a4:	aa05      	add	r2, sp, #20
 802c7a6:	3018      	adds	r0, #24
 802c7a8:	f000 f826 	bl	802c7f8 <SMA_Diversify>
 802c7ac:	af0a      	add	r7, sp, #40	@ 0x28
 802c7ae:	2100      	movs	r1, #0
 802c7b0:	2210      	movs	r2, #16
 802c7b2:	4638      	mov	r0, r7
 802c7b4:	f7f7 ff18 	bl	80245e8 <ble_memset>
 802c7b8:	4638      	mov	r0, r7
 802c7ba:	4631      	mov	r1, r6
 802c7bc:	2208      	movs	r2, #8
 802c7be:	f7f7 fec3 	bl	8024548 <ble_memcpy>
 802c7c2:	ae06      	add	r6, sp, #24
 802c7c4:	4640      	mov	r0, r8
 802c7c6:	4639      	mov	r1, r7
 802c7c8:	4632      	mov	r2, r6
 802c7ca:	f7dd f8ef 	bl	80099ac <BLEPLAT_AesEcbEncrypt>
 802c7ce:	f10d 0002 	add.w	r0, sp, #2
 802c7d2:	4631      	mov	r1, r6
 802c7d4:	2202      	movs	r2, #2
 802c7d6:	f7f7 feb7 	bl	8024548 <ble_memcpy>
 802c7da:	f89d 1002 	ldrb.w	r1, [sp, #2]
 802c7de:	7828      	ldrb	r0, [r5, #0]
 802c7e0:	f89d 2003 	ldrb.w	r2, [sp, #3]
 802c7e4:	4048      	eors	r0, r1
 802c7e6:	7020      	strb	r0, [r4, #0]
 802c7e8:	7868      	ldrb	r0, [r5, #1]
 802c7ea:	4050      	eors	r0, r2
 802c7ec:	7060      	strb	r0, [r4, #1]
 802c7ee:	b00e      	add	sp, #56	@ 0x38
 802c7f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0802c7f4 <__arm_cp.0_0>:
 802c7f4:	20009f5c 	.word	0x20009f5c

0802c7f8 <SMA_Diversify>:
 802c7f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802c7fa:	2400      	movs	r4, #0
 802c7fc:	9403      	str	r4, [sp, #12]
 802c7fe:	e9cd 4401 	strd	r4, r4, [sp, #4]
 802c802:	780c      	ldrb	r4, [r1, #0]
 802c804:	7849      	ldrb	r1, [r1, #1]
 802c806:	f88d 1001 	strb.w	r1, [sp, #1]
 802c80a:	7811      	ldrb	r1, [r2, #0]
 802c80c:	7852      	ldrb	r2, [r2, #1]
 802c80e:	f88d 4000 	strb.w	r4, [sp]
 802c812:	f88d 1002 	strb.w	r1, [sp, #2]
 802c816:	f88d 2003 	strb.w	r2, [sp, #3]
 802c81a:	4669      	mov	r1, sp
 802c81c:	461a      	mov	r2, r3
 802c81e:	f7dd f8c5 	bl	80099ac <BLEPLAT_AesEcbEncrypt>
 802c822:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0802c824 <SMA_Generate_STK>:
 802c824:	b5f0      	push	{r4, r5, r6, r7, lr}
 802c826:	b085      	sub	sp, #20
 802c828:	af01      	add	r7, sp, #4
 802c82a:	4615      	mov	r5, r2
 802c82c:	4606      	mov	r6, r0
 802c82e:	2208      	movs	r2, #8
 802c830:	461c      	mov	r4, r3
 802c832:	f107 0008 	add.w	r0, r7, #8
 802c836:	f7f7 fe87 	bl	8024548 <ble_memcpy>
 802c83a:	4638      	mov	r0, r7
 802c83c:	4629      	mov	r1, r5
 802c83e:	2208      	movs	r2, #8
 802c840:	f7f7 fe82 	bl	8024548 <ble_memcpy>
 802c844:	4630      	mov	r0, r6
 802c846:	4639      	mov	r1, r7
 802c848:	4622      	mov	r2, r4
 802c84a:	f7dd f8af 	bl	80099ac <BLEPLAT_AesEcbEncrypt>
 802c84e:	b005      	add	sp, #20
 802c850:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0802c854 <SMA_Compute_Confirm_Value>:
 802c854:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802c858:	b088      	sub	sp, #32
 802c85a:	4680      	mov	r8, r0
 802c85c:	ae04      	add	r6, sp, #16
 802c85e:	4f25      	ldr	r7, [pc, #148]	@ (802c8f4 <__arm_cp.3_0>)
 802c860:	4614      	mov	r4, r2
 802c862:	460d      	mov	r5, r1
 802c864:	2207      	movs	r2, #7
 802c866:	f106 0009 	add.w	r0, r6, #9
 802c86a:	f108 0117 	add.w	r1, r8, #23
 802c86e:	47b8      	blx	r7
 802c870:	1cb0      	adds	r0, r6, #2
 802c872:	f108 0110 	add.w	r1, r8, #16
 802c876:	2207      	movs	r2, #7
 802c878:	47b8      	blx	r7
 802c87a:	1c70      	adds	r0, r6, #1
 802c87c:	f108 0125 	add.w	r1, r8, #37	@ 0x25
 802c880:	2201      	movs	r2, #1
 802c882:	47b8      	blx	r7
 802c884:	f108 011e 	add.w	r1, r8, #30
 802c888:	4630      	mov	r0, r6
 802c88a:	2201      	movs	r2, #1
 802c88c:	47b8      	blx	r7
 802c88e:	2000      	movs	r0, #0
 802c890:	466f      	mov	r7, sp
 802c892:	2810      	cmp	r0, #16
 802c894:	d005      	beq.n	802c8a2 <SMA_Compute_Confirm_Value+0x4e>
 802c896:	5c29      	ldrb	r1, [r5, r0]
 802c898:	5c32      	ldrb	r2, [r6, r0]
 802c89a:	4051      	eors	r1, r2
 802c89c:	5439      	strb	r1, [r7, r0]
 802c89e:	3001      	adds	r0, #1
 802c8a0:	e7f7      	b.n	802c892 <SMA_Compute_Confirm_Value+0x3e>
 802c8a2:	4640      	mov	r0, r8
 802c8a4:	4639      	mov	r1, r7
 802c8a6:	4622      	mov	r2, r4
 802c8a8:	f7dd f880 	bl	80099ac <BLEPLAT_AesEcbEncrypt>
 802c8ac:	f106 000c 	add.w	r0, r6, #12
 802c8b0:	2100      	movs	r1, #0
 802c8b2:	2204      	movs	r2, #4
 802c8b4:	2500      	movs	r5, #0
 802c8b6:	f7f7 fe97 	bl	80245e8 <ble_memset>
 802c8ba:	1db0      	adds	r0, r6, #6
 802c8bc:	f108 011f 	add.w	r1, r8, #31
 802c8c0:	2206      	movs	r2, #6
 802c8c2:	f7f7 fe41 	bl	8024548 <ble_memcpy>
 802c8c6:	f108 0126 	add.w	r1, r8, #38	@ 0x26
 802c8ca:	4630      	mov	r0, r6
 802c8cc:	2206      	movs	r2, #6
 802c8ce:	f7f7 fe3b 	bl	8024548 <ble_memcpy>
 802c8d2:	2d10      	cmp	r5, #16
 802c8d4:	d005      	beq.n	802c8e2 <SMA_Compute_Confirm_Value+0x8e>
 802c8d6:	5d60      	ldrb	r0, [r4, r5]
 802c8d8:	5d71      	ldrb	r1, [r6, r5]
 802c8da:	4048      	eors	r0, r1
 802c8dc:	5578      	strb	r0, [r7, r5]
 802c8de:	3501      	adds	r5, #1
 802c8e0:	e7f7      	b.n	802c8d2 <SMA_Compute_Confirm_Value+0x7e>
 802c8e2:	4669      	mov	r1, sp
 802c8e4:	4640      	mov	r0, r8
 802c8e6:	4622      	mov	r2, r4
 802c8e8:	f7dd f860 	bl	80099ac <BLEPLAT_AesEcbEncrypt>
 802c8ec:	b008      	add	sp, #32
 802c8ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802c8f2:	bf00      	nop

0802c8f4 <__arm_cp.3_0>:
 802c8f4:	08024549 	.word	0x08024549

0802c8f8 <SMA_Generate_LTK>:
 802c8f8:	b5e0      	push	{r5, r6, r7, lr}
 802c8fa:	460b      	mov	r3, r1
 802c8fc:	4601      	mov	r1, r0
 802c8fe:	2000      	movs	r0, #0
 802c900:	f10d 0206 	add.w	r2, sp, #6
 802c904:	f8ad 0006 	strh.w	r0, [sp, #6]
 802c908:	4802      	ldr	r0, [pc, #8]	@ (802c914 <__arm_cp.4_0>)
 802c90a:	3008      	adds	r0, #8
 802c90c:	f7ff ff74 	bl	802c7f8 <SMA_Diversify>
 802c910:	bd8c      	pop	{r2, r3, r7, pc}
 802c912:	bf00      	nop

0802c914 <__arm_cp.4_0>:
 802c914:	20009f5c 	.word	0x20009f5c

0802c918 <SMA_Generate_CSRK>:
 802c918:	b5e0      	push	{r5, r6, r7, lr}
 802c91a:	460b      	mov	r3, r1
 802c91c:	4601      	mov	r1, r0
 802c91e:	2001      	movs	r0, #1
 802c920:	f10d 0206 	add.w	r2, sp, #6
 802c924:	f8ad 0006 	strh.w	r0, [sp, #6]
 802c928:	4802      	ldr	r0, [pc, #8]	@ (802c934 <__arm_cp.5_0>)
 802c92a:	3008      	adds	r0, #8
 802c92c:	f7ff ff64 	bl	802c7f8 <SMA_Diversify>
 802c930:	bd8c      	pop	{r2, r3, r7, pc}
 802c932:	bf00      	nop

0802c934 <__arm_cp.5_0>:
 802c934:	20009f5c 	.word	0x20009f5c

0802c938 <SMA_Generate_IRK>:
 802c938:	b5e0      	push	{r5, r6, r7, lr}
 802c93a:	4603      	mov	r3, r0
 802c93c:	2001      	movs	r0, #1
 802c93e:	f10d 0106 	add.w	r1, sp, #6
 802c942:	f8ad 0006 	strh.w	r0, [sp, #6]
 802c946:	2000      	movs	r0, #0
 802c948:	f8ad 0004 	strh.w	r0, [sp, #4]
 802c94c:	4802      	ldr	r0, [pc, #8]	@ (802c958 <__arm_cp.6_0>)
 802c94e:	aa01      	add	r2, sp, #4
 802c950:	3018      	adds	r0, #24
 802c952:	f7ff ff51 	bl	802c7f8 <SMA_Diversify>
 802c956:	bd8c      	pop	{r2, r3, r7, pc}

0802c958 <__arm_cp.6_0>:
 802c958:	20009f5c 	.word	0x20009f5c

0802c95c <SMA_SC_Gen_f4_Confirm>:
 802c95c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802c960:	b09a      	sub	sp, #104	@ 0x68
 802c962:	f10d 0827 	add.w	r8, sp, #39	@ 0x27
 802c966:	4f12      	ldr	r7, [pc, #72]	@ (802c9b0 <__arm_cp.7_0>)
 802c968:	4615      	mov	r5, r2
 802c96a:	460e      	mov	r6, r1
 802c96c:	4601      	mov	r1, r0
 802c96e:	2220      	movs	r2, #32
 802c970:	461c      	mov	r4, r3
 802c972:	4640      	mov	r0, r8
 802c974:	47b8      	blx	r7
 802c976:	f108 0020 	add.w	r0, r8, #32
 802c97a:	4631      	mov	r1, r6
 802c97c:	2220      	movs	r2, #32
 802c97e:	47b8      	blx	r7
 802c980:	f88d 4067 	strb.w	r4, [sp, #103]	@ 0x67
 802c984:	f10d 0417 	add.w	r4, sp, #23
 802c988:	4629      	mov	r1, r5
 802c98a:	2210      	movs	r2, #16
 802c98c:	4620      	mov	r0, r4
 802c98e:	47b8      	blx	r7
 802c990:	f10d 0507 	add.w	r5, sp, #7
 802c994:	4620      	mov	r0, r4
 802c996:	4641      	mov	r1, r8
 802c998:	2241      	movs	r2, #65	@ 0x41
 802c99a:	462b      	mov	r3, r5
 802c99c:	f000 f80a 	bl	802c9b4 <SMA_Cmac>
 802c9a0:	9820      	ldr	r0, [sp, #128]	@ 0x80
 802c9a2:	4629      	mov	r1, r5
 802c9a4:	2210      	movs	r2, #16
 802c9a6:	47b8      	blx	r7
 802c9a8:	b01a      	add	sp, #104	@ 0x68
 802c9aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802c9ae:	bf00      	nop

0802c9b0 <__arm_cp.7_0>:
 802c9b0:	0802f2cf 	.word	0x0802f2cf

0802c9b4 <SMA_Cmac>:
 802c9b4:	b570      	push	{r4, r5, r6, lr}
 802c9b6:	461c      	mov	r4, r3
 802c9b8:	4615      	mov	r5, r2
 802c9ba:	460e      	mov	r6, r1
 802c9bc:	f7dd f806 	bl	80099cc <BLEPLAT_AesCmacSetKey>
 802c9c0:	4630      	mov	r0, r6
 802c9c2:	4629      	mov	r1, r5
 802c9c4:	4622      	mov	r2, r4
 802c9c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802c9ca:	f7dd b80a 	b.w	80099e2 <BLEPLAT_AesCmacCompute>
	...

0802c9d0 <SMA_SC_Gen_f5_Keys>:
 802c9d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802c9d4:	b0a3      	sub	sp, #140	@ 0x8c
 802c9d6:	f10d 0b54 	add.w	fp, sp, #84	@ 0x54
 802c9da:	460d      	mov	r5, r1
 802c9dc:	4606      	mov	r6, r0
 802c9de:	2135      	movs	r1, #53	@ 0x35
 802c9e0:	4699      	mov	r9, r3
 802c9e2:	4692      	mov	sl, r2
 802c9e4:	4658      	mov	r0, fp
 802c9e6:	f002 fd17 	bl	802f418 <__aeabi_memclr>
 802c9ea:	2001      	movs	r0, #1
 802c9ec:	4c26      	ldr	r4, [pc, #152]	@ (802ca88 <__arm_cp.9_0>)
 802c9ee:	4631      	mov	r1, r6
 802c9f0:	2220      	movs	r2, #32
 802c9f2:	f88d 0087 	strb.w	r0, [sp, #135]	@ 0x87
 802c9f6:	2065      	movs	r0, #101	@ 0x65
 802c9f8:	f88d 0058 	strb.w	r0, [sp, #88]	@ 0x58
 802c9fc:	f646 4074 	movw	r0, #27764	@ 0x6c74
 802ca00:	f8ad 0056 	strh.w	r0, [sp, #86]	@ 0x56
 802ca04:	2062      	movs	r0, #98	@ 0x62
 802ca06:	f88d 0055 	strb.w	r0, [sp, #85]	@ 0x55
 802ca0a:	af09      	add	r7, sp, #36	@ 0x24
 802ca0c:	4638      	mov	r0, r7
 802ca0e:	47a0      	blx	r4
 802ca10:	f10d 0844 	add.w	r8, sp, #68	@ 0x44
 802ca14:	481d      	ldr	r0, [pc, #116]	@ (802ca8c <__arm_cp.9_1>)
 802ca16:	4e1e      	ldr	r6, [pc, #120]	@ (802ca90 <__arm_cp.9_2>)
 802ca18:	4639      	mov	r1, r7
 802ca1a:	2220      	movs	r2, #32
 802ca1c:	4643      	mov	r3, r8
 802ca1e:	47b0      	blx	r6
 802ca20:	f10b 0005 	add.w	r0, fp, #5
 802ca24:	4629      	mov	r1, r5
 802ca26:	2210      	movs	r2, #16
 802ca28:	47a0      	blx	r4
 802ca2a:	f10b 0015 	add.w	r0, fp, #21
 802ca2e:	4651      	mov	r1, sl
 802ca30:	2210      	movs	r2, #16
 802ca32:	47a0      	blx	r4
 802ca34:	f10b 0026 	add.w	r0, fp, #38	@ 0x26
 802ca38:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 802ca3a:	2206      	movs	r2, #6
 802ca3c:	f88d 9079 	strb.w	r9, [sp, #121]	@ 0x79
 802ca40:	47a0      	blx	r4
 802ca42:	982d      	ldr	r0, [sp, #180]	@ 0xb4
 802ca44:	992e      	ldr	r1, [sp, #184]	@ 0xb8
 802ca46:	2206      	movs	r2, #6
 802ca48:	f88d 0080 	strb.w	r0, [sp, #128]	@ 0x80
 802ca4c:	f10b 002d 	add.w	r0, fp, #45	@ 0x2d
 802ca50:	47a0      	blx	r4
 802ca52:	ad05      	add	r5, sp, #20
 802ca54:	4640      	mov	r0, r8
 802ca56:	4659      	mov	r1, fp
 802ca58:	2235      	movs	r2, #53	@ 0x35
 802ca5a:	462b      	mov	r3, r5
 802ca5c:	47b0      	blx	r6
 802ca5e:	982f      	ldr	r0, [sp, #188]	@ 0xbc
 802ca60:	4629      	mov	r1, r5
 802ca62:	2210      	movs	r2, #16
 802ca64:	47a0      	blx	r4
 802ca66:	2001      	movs	r0, #1
 802ca68:	4659      	mov	r1, fp
 802ca6a:	2235      	movs	r2, #53	@ 0x35
 802ca6c:	f88d 0054 	strb.w	r0, [sp, #84]	@ 0x54
 802ca70:	ad01      	add	r5, sp, #4
 802ca72:	4640      	mov	r0, r8
 802ca74:	462b      	mov	r3, r5
 802ca76:	47b0      	blx	r6
 802ca78:	9830      	ldr	r0, [sp, #192]	@ 0xc0
 802ca7a:	4629      	mov	r1, r5
 802ca7c:	2210      	movs	r2, #16
 802ca7e:	47a0      	blx	r4
 802ca80:	b023      	add	sp, #140	@ 0x8c
 802ca82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802ca86:	bf00      	nop

0802ca88 <__arm_cp.9_0>:
 802ca88:	0802f2cf 	.word	0x0802f2cf

0802ca8c <__arm_cp.9_1>:
 802ca8c:	08031eb8 	.word	0x08031eb8

0802ca90 <__arm_cp.9_2>:
 802ca90:	0802c9b5 	.word	0x0802c9b5

0802ca94 <SMA_SC_Gen_f6_Check_Val>:
 802ca94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802ca98:	b09a      	sub	sp, #104	@ 0x68
 802ca9a:	f10d 0427 	add.w	r4, sp, #39	@ 0x27
 802ca9e:	4d1d      	ldr	r5, [pc, #116]	@ (802cb14 <__arm_cp.10_0>)
 802caa0:	4617      	mov	r7, r2
 802caa2:	4680      	mov	r8, r0
 802caa4:	2210      	movs	r2, #16
 802caa6:	461e      	mov	r6, r3
 802caa8:	4620      	mov	r0, r4
 802caaa:	47a8      	blx	r5
 802caac:	f104 0010 	add.w	r0, r4, #16
 802cab0:	4639      	mov	r1, r7
 802cab2:	2210      	movs	r2, #16
 802cab4:	47a8      	blx	r5
 802cab6:	f104 0020 	add.w	r0, r4, #32
 802caba:	4631      	mov	r1, r6
 802cabc:	2210      	movs	r2, #16
 802cabe:	47a8      	blx	r5
 802cac0:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 802cac4:	9920      	ldr	r1, [sp, #128]	@ 0x80
 802cac6:	2203      	movs	r2, #3
 802cac8:	47a8      	blx	r5
 802caca:	9821      	ldr	r0, [sp, #132]	@ 0x84
 802cacc:	9922      	ldr	r1, [sp, #136]	@ 0x88
 802cace:	2206      	movs	r2, #6
 802cad0:	f88d 005a 	strb.w	r0, [sp, #90]	@ 0x5a
 802cad4:	f104 0034 	add.w	r0, r4, #52	@ 0x34
 802cad8:	47a8      	blx	r5
 802cada:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 802cadc:	9924      	ldr	r1, [sp, #144]	@ 0x90
 802cade:	2206      	movs	r2, #6
 802cae0:	f88d 0061 	strb.w	r0, [sp, #97]	@ 0x61
 802cae4:	f104 003b 	add.w	r0, r4, #59	@ 0x3b
 802cae8:	47a8      	blx	r5
 802caea:	f10d 0607 	add.w	r6, sp, #7
 802caee:	4641      	mov	r1, r8
 802caf0:	2210      	movs	r2, #16
 802caf2:	4630      	mov	r0, r6
 802caf4:	47a8      	blx	r5
 802caf6:	f10d 0717 	add.w	r7, sp, #23
 802cafa:	4630      	mov	r0, r6
 802cafc:	4621      	mov	r1, r4
 802cafe:	2241      	movs	r2, #65	@ 0x41
 802cb00:	463b      	mov	r3, r7
 802cb02:	f7ff ff57 	bl	802c9b4 <SMA_Cmac>
 802cb06:	9825      	ldr	r0, [sp, #148]	@ 0x94
 802cb08:	4639      	mov	r1, r7
 802cb0a:	2210      	movs	r2, #16
 802cb0c:	47a8      	blx	r5
 802cb0e:	b01a      	add	sp, #104	@ 0x68
 802cb10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0802cb14 <__arm_cp.10_0>:
 802cb14:	0802f2cf 	.word	0x0802f2cf

0802cb18 <SMA_SC_Gen_g2_NumComp_Val>:
 802cb18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802cb1c:	b09c      	sub	sp, #112	@ 0x70
 802cb1e:	f10d 0820 	add.w	r8, sp, #32
 802cb22:	4c13      	ldr	r4, [pc, #76]	@ (802cb70 <__arm_cp.11_0>)
 802cb24:	4615      	mov	r5, r2
 802cb26:	460f      	mov	r7, r1
 802cb28:	4601      	mov	r1, r0
 802cb2a:	2220      	movs	r2, #32
 802cb2c:	461e      	mov	r6, r3
 802cb2e:	4640      	mov	r0, r8
 802cb30:	47a0      	blx	r4
 802cb32:	f108 0020 	add.w	r0, r8, #32
 802cb36:	4639      	mov	r1, r7
 802cb38:	2220      	movs	r2, #32
 802cb3a:	47a0      	blx	r4
 802cb3c:	f108 0040 	add.w	r0, r8, #64	@ 0x40
 802cb40:	4631      	mov	r1, r6
 802cb42:	2210      	movs	r2, #16
 802cb44:	47a0      	blx	r4
 802cb46:	ae04      	add	r6, sp, #16
 802cb48:	4629      	mov	r1, r5
 802cb4a:	2210      	movs	r2, #16
 802cb4c:	4630      	mov	r0, r6
 802cb4e:	47a0      	blx	r4
 802cb50:	466d      	mov	r5, sp
 802cb52:	4630      	mov	r0, r6
 802cb54:	4641      	mov	r1, r8
 802cb56:	2250      	movs	r2, #80	@ 0x50
 802cb58:	462b      	mov	r3, r5
 802cb5a:	f7ff ff2b 	bl	802c9b4 <SMA_Cmac>
 802cb5e:	f105 010c 	add.w	r1, r5, #12
 802cb62:	9822      	ldr	r0, [sp, #136]	@ 0x88
 802cb64:	2204      	movs	r2, #4
 802cb66:	47a0      	blx	r4
 802cb68:	b01c      	add	sp, #112	@ 0x70
 802cb6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802cb6e:	bf00      	nop

0802cb70 <__arm_cp.11_0>:
 802cb70:	0802f2cf 	.word	0x0802f2cf

0802cb74 <SMA_CMAC_Generate_Tag>:
 802cb74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802cb78:	b091      	sub	sp, #68	@ 0x44
 802cb7a:	4681      	mov	r9, r0
 802cb7c:	2000      	movs	r0, #0
 802cb7e:	4615      	mov	r5, r2
 802cb80:	468a      	mov	sl, r1
 802cb82:	469b      	mov	fp, r3
 802cb84:	e9cd 000f 	strd	r0, r0, [sp, #60]	@ 0x3c
 802cb88:	e9cd 000d 	strd	r0, r0, [sp, #52]	@ 0x34
 802cb8c:	ae0d      	add	r6, sp, #52	@ 0x34
 802cb8e:	af09      	add	r7, sp, #36	@ 0x24
 802cb90:	f000 f8a3 	bl	802ccda <OUTLINED_FUNCTION_1>
 802cb94:	f99d 8033 	ldrsb.w	r8, [sp, #51]	@ 0x33
 802cb98:	ac05      	add	r4, sp, #20
 802cb9a:	4638      	mov	r0, r7
 802cb9c:	4621      	mov	r1, r4
 802cb9e:	f000 f882 	bl	802cca6 <SMA_left_shift>
 802cba2:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 802cba6:	dd66      	ble.n	802cc76 <SMA_CMAC_Generate_Tag+0x102>
 802cba8:	f99d 8023 	ldrsb.w	r8, [sp, #35]	@ 0x23
 802cbac:	a805      	add	r0, sp, #20
 802cbae:	ac01      	add	r4, sp, #4
 802cbb0:	4621      	mov	r1, r4
 802cbb2:	f000 f878 	bl	802cca6 <SMA_left_shift>
 802cbb6:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 802cbba:	dd68      	ble.n	802cc8e <SMA_CMAC_Generate_Tag+0x11a>
 802cbbc:	4630      	mov	r0, r6
 802cbbe:	2100      	movs	r1, #0
 802cbc0:	2210      	movs	r2, #16
 802cbc2:	f04f 0800 	mov.w	r8, #0
 802cbc6:	f7f7 fd0f 	bl	80245e8 <ble_memset>
 802cbca:	b2ec      	uxtb	r4, r5
 802cbcc:	2c11      	cmp	r4, #17
 802cbce:	d319      	bcc.n	802cc04 <SMA_CMAC_Generate_Tag+0x90>
 802cbd0:	f048 0004 	orr.w	r0, r8, #4
 802cbd4:	2210      	movs	r2, #16
 802cbd6:	463b      	mov	r3, r7
 802cbd8:	f000 f87b 	bl	802ccd2 <OUTLINED_FUNCTION_0>
 802cbdc:	2000      	movs	r0, #0
 802cbde:	2810      	cmp	r0, #16
 802cbe0:	d005      	beq.n	802cbee <SMA_CMAC_Generate_Tag+0x7a>
 802cbe2:	5c39      	ldrb	r1, [r7, r0]
 802cbe4:	5c32      	ldrb	r2, [r6, r0]
 802cbe6:	4051      	eors	r1, r2
 802cbe8:	5431      	strb	r1, [r6, r0]
 802cbea:	3001      	adds	r0, #1
 802cbec:	e7f7      	b.n	802cbde <SMA_CMAC_Generate_Tag+0x6a>
 802cbee:	f000 f874 	bl	802ccda <OUTLINED_FUNCTION_1>
 802cbf2:	4630      	mov	r0, r6
 802cbf4:	4639      	mov	r1, r7
 802cbf6:	2210      	movs	r2, #16
 802cbf8:	f7f7 fca6 	bl	8024548 <ble_memcpy>
 802cbfc:	3d10      	subs	r5, #16
 802cbfe:	f108 0810 	add.w	r8, r8, #16
 802cc02:	e7e2      	b.n	802cbca <SMA_CMAC_Generate_Tag+0x56>
 802cc04:	2c10      	cmp	r4, #16
 802cc06:	d107      	bne.n	802cc18 <SMA_CMAC_Generate_Tag+0xa4>
 802cc08:	f048 0004 	orr.w	r0, r8, #4
 802cc0c:	ab09      	add	r3, sp, #36	@ 0x24
 802cc0e:	2210      	movs	r2, #16
 802cc10:	f000 f85f 	bl	802ccd2 <OUTLINED_FUNCTION_0>
 802cc14:	a805      	add	r0, sp, #20
 802cc16:	e01a      	b.n	802cc4e <SMA_CMAC_Generate_Tag+0xda>
 802cc18:	f8cd b000 	str.w	fp, [sp]
 802cc1c:	f10d 0b24 	add.w	fp, sp, #36	@ 0x24
 802cc20:	2100      	movs	r1, #0
 802cc22:	2210      	movs	r2, #16
 802cc24:	4658      	mov	r0, fp
 802cc26:	f7f7 fcdf 	bl	80245e8 <ble_memset>
 802cc2a:	0628      	lsls	r0, r5, #24
 802cc2c:	d008      	beq.n	802cc40 <SMA_CMAC_Generate_Tag+0xcc>
 802cc2e:	ebab 0004 	sub.w	r0, fp, r4
 802cc32:	4622      	mov	r2, r4
 802cc34:	f100 0310 	add.w	r3, r0, #16
 802cc38:	f048 0004 	orr.w	r0, r8, #4
 802cc3c:	f000 f849 	bl	802ccd2 <OUTLINED_FUNCTION_0>
 802cc40:	ebab 0004 	sub.w	r0, fp, r4
 802cc44:	2180      	movs	r1, #128	@ 0x80
 802cc46:	73c1      	strb	r1, [r0, #15]
 802cc48:	a801      	add	r0, sp, #4
 802cc4a:	f8dd b000 	ldr.w	fp, [sp]
 802cc4e:	2100      	movs	r1, #0
 802cc50:	2910      	cmp	r1, #16
 802cc52:	d007      	beq.n	802cc64 <SMA_CMAC_Generate_Tag+0xf0>
 802cc54:	5c7a      	ldrb	r2, [r7, r1]
 802cc56:	5c43      	ldrb	r3, [r0, r1]
 802cc58:	405a      	eors	r2, r3
 802cc5a:	5c73      	ldrb	r3, [r6, r1]
 802cc5c:	405a      	eors	r2, r3
 802cc5e:	5472      	strb	r2, [r6, r1]
 802cc60:	3101      	adds	r1, #1
 802cc62:	e7f5      	b.n	802cc50 <SMA_CMAC_Generate_Tag+0xdc>
 802cc64:	a90d      	add	r1, sp, #52	@ 0x34
 802cc66:	4648      	mov	r0, r9
 802cc68:	465a      	mov	r2, fp
 802cc6a:	f7dc fe9f 	bl	80099ac <BLEPLAT_AesEcbEncrypt>
 802cc6e:	2000      	movs	r0, #0
 802cc70:	b011      	add	sp, #68	@ 0x44
 802cc72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802cc76:	2087      	movs	r0, #135	@ 0x87
 802cc78:	f88d 0034 	strb.w	r0, [sp, #52]	@ 0x34
 802cc7c:	2000      	movs	r0, #0
 802cc7e:	280f      	cmp	r0, #15
 802cc80:	d092      	beq.n	802cba8 <SMA_CMAC_Generate_Tag+0x34>
 802cc82:	5c21      	ldrb	r1, [r4, r0]
 802cc84:	5c32      	ldrb	r2, [r6, r0]
 802cc86:	4051      	eors	r1, r2
 802cc88:	5421      	strb	r1, [r4, r0]
 802cc8a:	3001      	adds	r0, #1
 802cc8c:	e7f7      	b.n	802cc7e <SMA_CMAC_Generate_Tag+0x10a>
 802cc8e:	2087      	movs	r0, #135	@ 0x87
 802cc90:	f88d 0034 	strb.w	r0, [sp, #52]	@ 0x34
 802cc94:	2000      	movs	r0, #0
 802cc96:	280f      	cmp	r0, #15
 802cc98:	d090      	beq.n	802cbbc <SMA_CMAC_Generate_Tag+0x48>
 802cc9a:	5c21      	ldrb	r1, [r4, r0]
 802cc9c:	5c32      	ldrb	r2, [r6, r0]
 802cc9e:	4051      	eors	r1, r2
 802cca0:	5421      	strb	r1, [r4, r0]
 802cca2:	3001      	adds	r0, #1
 802cca4:	e7f7      	b.n	802cc96 <SMA_CMAC_Generate_Tag+0x122>

0802cca6 <SMA_left_shift>:
 802cca6:	b510      	push	{r4, lr}
 802cca8:	7802      	ldrb	r2, [r0, #0]
 802ccaa:	0052      	lsls	r2, r2, #1
 802ccac:	f801 2b01 	strb.w	r2, [r1], #1
 802ccb0:	2200      	movs	r2, #0
 802ccb2:	2a0f      	cmp	r2, #15
 802ccb4:	bf08      	it	eq
 802ccb6:	bd10      	popeq	{r4, pc}
 802ccb8:	1883      	adds	r3, r0, r2
 802ccba:	785b      	ldrb	r3, [r3, #1]
 802ccbc:	005b      	lsls	r3, r3, #1
 802ccbe:	548b      	strb	r3, [r1, r2]
 802ccc0:	5684      	ldrsb	r4, [r0, r2]
 802ccc2:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 802ccc6:	bfdc      	itt	le
 802ccc8:	f043 0301 	orrle.w	r3, r3, #1
 802cccc:	548b      	strble	r3, [r1, r2]
 802ccce:	3201      	adds	r2, #1
 802ccd0:	e7ef      	b.n	802ccb2 <SMA_left_shift+0xc>

0802ccd2 <OUTLINED_FUNCTION_0>:
 802ccd2:	b281      	uxth	r1, r0
 802ccd4:	4650      	mov	r0, sl
 802ccd6:	f7ff bac4 	b.w	802c262 <ACL_Get_Data>

0802ccda <OUTLINED_FUNCTION_1>:
 802ccda:	4648      	mov	r0, r9
 802ccdc:	4631      	mov	r1, r6
 802ccde:	463a      	mov	r2, r7
 802cce0:	f7dc be64 	b.w	80099ac <BLEPLAT_AesEcbEncrypt>

0802cce4 <SMP_MemAlloc>:
 802cce4:	b580      	push	{r7, lr}
 802cce6:	4904      	ldr	r1, [pc, #16]	@ (802ccf8 <__arm_cp.0_0>)
 802cce8:	2280      	movs	r2, #128	@ 0x80
 802ccea:	7d89      	ldrb	r1, [r1, #22]
 802ccec:	f002 fb05 	bl	802f2fa <Mem_Assign>
 802ccf0:	4902      	ldr	r1, [pc, #8]	@ (802ccfc <__arm_cp.0_1>)
 802ccf2:	f8c1 00bc 	str.w	r0, [r1, #188]	@ 0xbc
 802ccf6:	bd80      	pop	{r7, pc}

0802ccf8 <__arm_cp.0_0>:
 802ccf8:	20009f34 	.word	0x20009f34

0802ccfc <__arm_cp.0_1>:
 802ccfc:	20009f5c 	.word	0x20009f5c

0802cd00 <SMP_Init>:
 802cd00:	4806      	ldr	r0, [pc, #24]	@ (802cd1c <__arm_cp.1_0>)
 802cd02:	2100      	movs	r1, #0
 802cd04:	f880 1094 	strb.w	r1, [r0, #148]	@ 0x94
 802cd08:	2101      	movs	r1, #1
 802cd0a:	f880 1099 	strb.w	r1, [r0, #153]	@ 0x99
 802cd0e:	f880 1096 	strb.w	r1, [r0, #150]	@ 0x96
 802cd12:	4903      	ldr	r1, [pc, #12]	@ (802cd20 <__arm_cp.1_1>)
 802cd14:	f8c0 108c 	str.w	r1, [r0, #140]	@ 0x8c
 802cd18:	4770      	bx	lr
 802cd1a:	bf00      	nop

0802cd1c <__arm_cp.1_0>:
 802cd1c:	20009f5c 	.word	0x20009f5c

0802cd20 <__arm_cp.1_1>:
 802cd20:	10070101 	.word	0x10070101

0802cd24 <SMP_Get_Identity_Address_Type>:
 802cd24:	4801      	ldr	r0, [pc, #4]	@ (802cd2c <__arm_cp.2_0>)
 802cd26:	f890 0095 	ldrb.w	r0, [r0, #149]	@ 0x95
 802cd2a:	4770      	bx	lr

0802cd2c <__arm_cp.2_0>:
 802cd2c:	20009f5c 	.word	0x20009f5c

0802cd30 <SMP_Connection_Complete_Handler>:
 802cd30:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802cd34:	4e27      	ldr	r6, [pc, #156]	@ (802cdd4 <__arm_cp.3_0>)
 802cd36:	4605      	mov	r5, r0
 802cd38:	f896 0098 	ldrb.w	r0, [r6, #152]	@ 0x98
 802cd3c:	07c0      	lsls	r0, r0, #31
 802cd3e:	d147      	bne.n	802cdd0 <SMP_Connection_Complete_Handler+0xa0>
 802cd40:	4825      	ldr	r0, [pc, #148]	@ (802cdd8 <__arm_cp.3_1>)
 802cd42:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 802cd46:	f8d6 70bc 	ldr.w	r7, [r6, #188]	@ 0xbc
 802cd4a:	469b      	mov	fp, r3
 802cd4c:	4690      	mov	r8, r2
 802cd4e:	468a      	mov	sl, r1
 802cd50:	2400      	movs	r4, #0
 802cd52:	7d80      	ldrb	r0, [r0, #22]
 802cd54:	01c0      	lsls	r0, r0, #7
 802cd56:	42a0      	cmp	r0, r4
 802cd58:	d03a      	beq.n	802cdd0 <SMP_Connection_Complete_Handler+0xa0>
 802cd5a:	5b39      	ldrh	r1, [r7, r4]
 802cd5c:	b109      	cbz	r1, 802cd62 <SMP_Connection_Complete_Handler+0x32>
 802cd5e:	3480      	adds	r4, #128	@ 0x80
 802cd60:	e7f9      	b.n	802cd56 <SMP_Connection_Complete_Handler+0x26>
 802cd62:	f1b9 0f00 	cmp.w	r9, #0
 802cd66:	d004      	beq.n	802cd72 <SMP_Connection_Complete_Handler+0x42>
 802cd68:	4648      	mov	r0, r9
 802cd6a:	2106      	movs	r1, #6
 802cd6c:	f002 faa1 	bl	802f2b2 <Is_Empty>
 802cd70:	b130      	cbz	r0, 802cd80 <SMP_Connection_Complete_Handler+0x50>
 802cd72:	f896 9036 	ldrb.w	r9, [r6, #54]	@ 0x36
 802cd76:	f1b9 0f00 	cmp.w	r9, #0
 802cd7a:	bf18      	it	ne
 802cd7c:	362e      	addne	r6, #46	@ 0x2e
 802cd7e:	e002      	b.n	802cd86 <SMP_Connection_Complete_Handler+0x56>
 802cd80:	464e      	mov	r6, r9
 802cd82:	f04f 0901 	mov.w	r9, #1
 802cd86:	533d      	strh	r5, [r7, r4]
 802cd88:	443c      	add	r4, r7
 802cd8a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802cd8e:	62a0      	str	r0, [r4, #40]	@ 0x28
 802cd90:	2000      	movs	r0, #0
 802cd92:	f884 a01f 	strb.w	sl, [r4, #31]
 802cd96:	f884 0020 	strb.w	r0, [r4, #32]
 802cd9a:	4658      	mov	r0, fp
 802cd9c:	f001 fe2a 	bl	802e9f4 <SMP_Get_Rep_Attempts_Timeout_Status>
 802cda0:	4d0e      	ldr	r5, [pc, #56]	@ (802cddc <__arm_cp.3_2>)
 802cda2:	7620      	strb	r0, [r4, #24]
 802cda4:	f104 000a 	add.w	r0, r4, #10
 802cda8:	4631      	mov	r1, r6
 802cdaa:	2206      	movs	r2, #6
 802cdac:	f884 9009 	strb.w	r9, [r4, #9]
 802cdb0:	47a8      	blx	r5
 802cdb2:	1ce0      	adds	r0, r4, #3
 802cdb4:	4659      	mov	r1, fp
 802cdb6:	2206      	movs	r2, #6
 802cdb8:	f884 8002 	strb.w	r8, [r4, #2]
 802cdbc:	47a8      	blx	r5
 802cdbe:	f104 0011 	add.w	r0, r4, #17
 802cdc2:	4659      	mov	r1, fp
 802cdc4:	2206      	movs	r2, #6
 802cdc6:	f884 8010 	strb.w	r8, [r4, #16]
 802cdca:	47a8      	blx	r5
 802cdcc:	2010      	movs	r0, #16
 802cdce:	75e0      	strb	r0, [r4, #23]
 802cdd0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802cdd4 <__arm_cp.3_0>:
 802cdd4:	20009f5c 	.word	0x20009f5c

0802cdd8 <__arm_cp.3_1>:
 802cdd8:	20009f34 	.word	0x20009f34

0802cddc <__arm_cp.3_2>:
 802cddc:	08024549 	.word	0x08024549

0802cde0 <SMP_Disconnection_Complete_Handler>:
 802cde0:	b510      	push	{r4, lr}
 802cde2:	f000 fa51 	bl	802d288 <OUTLINED_FUNCTION_0>
 802cde6:	d010      	beq.n	802ce0a <SMP_Disconnection_Complete_Handler+0x2a>
 802cde8:	4604      	mov	r4, r0
 802cdea:	7dc0      	ldrb	r0, [r0, #23]
 802cdec:	3820      	subs	r0, #32
 802cdee:	28c0      	cmp	r0, #192	@ 0xc0
 802cdf0:	d806      	bhi.n	802ce00 <SMP_Disconnection_Complete_Handler+0x20>
 802cdf2:	4620      	mov	r0, r4
 802cdf4:	f000 fac2 	bl	802d37c <SMP_Stop_Timer>
 802cdf8:	4620      	mov	r0, r4
 802cdfa:	2102      	movs	r1, #2
 802cdfc:	f001 fabc 	bl	802e378 <SMP_Update_Stats_On_Pairing_End>
 802ce00:	8820      	ldrh	r0, [r4, #0]
 802ce02:	f000 f821 	bl	802ce48 <SMP_Flush_Rx_Packets>
 802ce06:	20fe      	movs	r0, #254	@ 0xfe
 802ce08:	75e0      	strb	r0, [r4, #23]
 802ce0a:	bd10      	pop	{r4, pc}

0802ce0c <SMP_Get_Remote_Device>:
 802ce0c:	b1a8      	cbz	r0, 802ce3a <SMP_Get_Remote_Device+0x2e>
 802ce0e:	490c      	ldr	r1, [pc, #48]	@ (802ce40 <__arm_cp.5_0>)
 802ce10:	f891 2098 	ldrb.w	r2, [r1, #152]	@ 0x98
 802ce14:	07d2      	lsls	r2, r2, #31
 802ce16:	d110      	bne.n	802ce3a <SMP_Get_Remote_Device+0x2e>
 802ce18:	f8d1 10bc 	ldr.w	r1, [r1, #188]	@ 0xbc
 802ce1c:	f1a1 0280 	sub.w	r2, r1, #128	@ 0x80
 802ce20:	4908      	ldr	r1, [pc, #32]	@ (802ce44 <__arm_cp.5_1>)
 802ce22:	7d89      	ldrb	r1, [r1, #22]
 802ce24:	1c4b      	adds	r3, r1, #1
 802ce26:	3b01      	subs	r3, #1
 802ce28:	d007      	beq.n	802ce3a <SMP_Get_Remote_Device+0x2e>
 802ce2a:	f102 0180 	add.w	r1, r2, #128	@ 0x80
 802ce2e:	f8b2 2080 	ldrh.w	r2, [r2, #128]	@ 0x80
 802ce32:	4282      	cmp	r2, r0
 802ce34:	460a      	mov	r2, r1
 802ce36:	d1f6      	bne.n	802ce26 <SMP_Get_Remote_Device+0x1a>
 802ce38:	e000      	b.n	802ce3c <SMP_Get_Remote_Device+0x30>
 802ce3a:	2100      	movs	r1, #0
 802ce3c:	4608      	mov	r0, r1
 802ce3e:	4770      	bx	lr

0802ce40 <__arm_cp.5_0>:
 802ce40:	20009f5c 	.word	0x20009f5c

0802ce44 <__arm_cp.5_1>:
 802ce44:	20009f34 	.word	0x20009f34

0802ce48 <SMP_Flush_Rx_Packets>:
 802ce48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802ce4a:	4604      	mov	r4, r0
 802ce4c:	4809      	ldr	r0, [pc, #36]	@ (802ce74 <__arm_cp.6_0>)
 802ce4e:	f8d0 7084 	ldr.w	r7, [r0, #132]	@ 0x84
 802ce52:	f100 0584 	add.w	r5, r0, #132	@ 0x84
 802ce56:	b167      	cbz	r7, 802ce72 <SMP_Flush_Rx_Packets+0x2a>
 802ce58:	463e      	mov	r6, r7
 802ce5a:	683f      	ldr	r7, [r7, #0]
 802ce5c:	8930      	ldrh	r0, [r6, #8]
 802ce5e:	42a0      	cmp	r0, r4
 802ce60:	d1f9      	bne.n	802ce56 <SMP_Flush_Rx_Packets+0xe>
 802ce62:	4628      	mov	r0, r5
 802ce64:	4631      	mov	r1, r6
 802ce66:	f7ff fad7 	bl	802c418 <ACL_List_Remove>
 802ce6a:	4630      	mov	r0, r6
 802ce6c:	f7ff f98c 	bl	802c188 <ACL_Release>
 802ce70:	e7f1      	b.n	802ce56 <SMP_Flush_Rx_Packets+0xe>
 802ce72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0802ce74 <__arm_cp.6_0>:
 802ce74:	20009f5c 	.word	0x20009f5c

0802ce78 <SMP_LTK_Request_Handler>:
 802ce78:	b5bc      	push	{r2, r3, r4, r5, r7, lr}
 802ce7a:	460c      	mov	r4, r1
 802ce7c:	4913      	ldr	r1, [pc, #76]	@ (802cecc <__arm_cp.7_0>)
 802ce7e:	f8ad 2006 	strh.w	r2, [sp, #6]
 802ce82:	f891 1098 	ldrb.w	r1, [r1, #152]	@ 0x98
 802ce86:	07c9      	lsls	r1, r1, #31
 802ce88:	bf1c      	itt	ne
 802ce8a:	2001      	movne	r0, #1
 802ce8c:	bdbc      	popne	{r2, r3, r4, r5, r7, pc}
 802ce8e:	f000 f9fb 	bl	802d288 <OUTLINED_FUNCTION_0>
 802ce92:	d019      	beq.n	802cec8 <SMP_LTK_Request_Handler+0x50>
 802ce94:	4605      	mov	r5, r0
 802ce96:	7dc0      	ldrb	r0, [r0, #23]
 802ce98:	f895 1020 	ldrb.w	r1, [r5, #32]
 802ce9c:	28bc      	cmp	r0, #188	@ 0xbc
 802ce9e:	f041 0110 	orr.w	r1, r1, #16
 802cea2:	f885 1020 	strb.w	r1, [r5, #32]
 802cea6:	d00f      	beq.n	802cec8 <SMP_LTK_Request_Handler+0x50>
 802cea8:	7fe8      	ldrb	r0, [r5, #31]
 802ceaa:	0700      	lsls	r0, r0, #28
 802ceac:	d40c      	bmi.n	802cec8 <SMP_LTK_Request_Handler+0x50>
 802ceae:	f105 0034 	add.w	r0, r5, #52	@ 0x34
 802ceb2:	4621      	mov	r1, r4
 802ceb4:	2208      	movs	r2, #8
 802ceb6:	f7f7 fb47 	bl	8024548 <ble_memcpy>
 802ceba:	f105 003c 	add.w	r0, r5, #60	@ 0x3c
 802cebe:	f10d 0106 	add.w	r1, sp, #6
 802cec2:	2202      	movs	r2, #2
 802cec4:	f7f7 fb40 	bl	8024548 <ble_memcpy>
 802cec8:	2000      	movs	r0, #0
 802ceca:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}

0802cecc <__arm_cp.7_0>:
 802cecc:	20009f5c 	.word	0x20009f5c

0802ced0 <SMP_L2cap_Data_Handler>:
 802ced0:	b510      	push	{r4, lr}
 802ced2:	4604      	mov	r4, r0
 802ced4:	8900      	ldrh	r0, [r0, #8]
 802ced6:	f000 f9d7 	bl	802d288 <OUTLINED_FUNCTION_0>
 802ceda:	d01d      	beq.n	802cf18 <SMP_L2cap_Data_Handler+0x48>
 802cedc:	79a1      	ldrb	r1, [r4, #6]
 802cede:	b141      	cbz	r1, 802cef2 <SMP_L2cap_Data_Handler+0x22>
 802cee0:	0749      	lsls	r1, r1, #29
 802cee2:	d419      	bmi.n	802cf18 <SMP_L2cap_Data_Handler+0x48>
 802cee4:	6a21      	ldr	r1, [r4, #32]
 802cee6:	7909      	ldrb	r1, [r1, #4]
 802cee8:	290b      	cmp	r1, #11
 802ceea:	d10c      	bne.n	802cf06 <SMP_L2cap_Data_Handler+0x36>
 802ceec:	f000 fb1a 	bl	802d524 <SMP_SR_Security_Req_TX_Complete_Handler>
 802cef0:	e00b      	b.n	802cf0a <SMP_L2cap_Data_Handler+0x3a>
 802cef2:	88a0      	ldrh	r0, [r4, #4]
 802cef4:	3804      	subs	r0, #4
 802cef6:	2841      	cmp	r0, #65	@ 0x41
 802cef8:	d80e      	bhi.n	802cf18 <SMP_L2cap_Data_Handler+0x48>
 802cefa:	480a      	ldr	r0, [pc, #40]	@ (802cf24 <__arm_cp.8_0>)
 802cefc:	4621      	mov	r1, r4
 802cefe:	3084      	adds	r0, #132	@ 0x84
 802cf00:	f7ff fa7a 	bl	802c3f8 <ACL_List_Insert_Tail>
 802cf04:	e00b      	b.n	802cf1e <SMP_L2cap_Data_Handler+0x4e>
 802cf06:	f001 f9eb 	bl	802e2e0 <SMP_Key_Dist_Tx_Complete_Handler>
 802cf0a:	4806      	ldr	r0, [pc, #24]	@ (802cf24 <__arm_cp.8_0>)
 802cf0c:	f890 1039 	ldrb.w	r1, [r0, #57]	@ 0x39
 802cf10:	f001 01fb 	and.w	r1, r1, #251	@ 0xfb
 802cf14:	f880 1039 	strb.w	r1, [r0, #57]	@ 0x39
 802cf18:	4620      	mov	r0, r4
 802cf1a:	f7ff f935 	bl	802c188 <ACL_Release>
 802cf1e:	2000      	movs	r0, #0
 802cf20:	bd10      	pop	{r4, pc}
 802cf22:	bf00      	nop

0802cf24 <__arm_cp.8_0>:
 802cf24:	20009f5c 	.word	0x20009f5c

0802cf28 <SMP_Encryption_Update_Handler>:
 802cf28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802cf2c:	4680      	mov	r8, r0
 802cf2e:	4610      	mov	r0, r2
 802cf30:	461e      	mov	r6, r3
 802cf32:	4615      	mov	r5, r2
 802cf34:	460f      	mov	r7, r1
 802cf36:	f000 f9a7 	bl	802d288 <OUTLINED_FUNCTION_0>
 802cf3a:	d063      	beq.n	802d004 <SMP_Encryption_Update_Handler+0xdc>
 802cf3c:	4604      	mov	r4, r0
 802cf3e:	b14f      	cbz	r7, 802cf54 <SMP_Encryption_Update_Handler+0x2c>
 802cf40:	7de0      	ldrb	r0, [r4, #23]
 802cf42:	3820      	subs	r0, #32
 802cf44:	28c0      	cmp	r0, #192	@ 0xc0
 802cf46:	d815      	bhi.n	802cf74 <SMP_Encryption_Update_Handler+0x4c>
 802cf48:	4620      	mov	r0, r4
 802cf4a:	2102      	movs	r1, #2
 802cf4c:	f001 fa14 	bl	802e378 <SMP_Update_Stats_On_Pairing_End>
 802cf50:	2601      	movs	r6, #1
 802cf52:	e010      	b.n	802cf76 <SMP_Encryption_Update_Handler+0x4e>
 802cf54:	7e20      	ldrb	r0, [r4, #24]
 802cf56:	b1d6      	cbz	r6, 802cf8e <SMP_Encryption_Update_Handler+0x66>
 802cf58:	f040 0110 	orr.w	r1, r0, #16
 802cf5c:	7621      	strb	r1, [r4, #24]
 802cf5e:	7e61      	ldrb	r1, [r4, #25]
 802cf60:	2902      	cmp	r1, #2
 802cf62:	d317      	bcc.n	802cf94 <SMP_Encryption_Update_Handler+0x6c>
 802cf64:	7fe1      	ldrb	r1, [r4, #31]
 802cf66:	0709      	lsls	r1, r1, #28
 802cf68:	bf54      	ite	pl
 802cf6a:	f040 0030 	orrpl.w	r0, r0, #48	@ 0x30
 802cf6e:	f040 0050 	orrmi.w	r0, r0, #80	@ 0x50
 802cf72:	e00e      	b.n	802cf92 <SMP_Encryption_Update_Handler+0x6a>
 802cf74:	2600      	movs	r6, #0
 802cf76:	f1b8 0f00 	cmp.w	r8, #0
 802cf7a:	d105      	bne.n	802cf88 <SMP_Encryption_Update_Handler+0x60>
 802cf7c:	2000      	movs	r0, #0
 802cf7e:	4629      	mov	r1, r5
 802cf80:	2203      	movs	r2, #3
 802cf82:	463b      	mov	r3, r7
 802cf84:	f7fa fa18 	bl	80273b8 <EVT_aci_gap_pairing_complete>
 802cf88:	2000      	movs	r0, #0
 802cf8a:	75e0      	strb	r0, [r4, #23]
 802cf8c:	e01c      	b.n	802cfc8 <SMP_Encryption_Update_Handler+0xa0>
 802cf8e:	f000 008f 	and.w	r0, r0, #143	@ 0x8f
 802cf92:	7620      	strb	r0, [r4, #24]
 802cf94:	7de0      	ldrb	r0, [r4, #23]
 802cf96:	28ad      	cmp	r0, #173	@ 0xad
 802cf98:	d003      	beq.n	802cfa2 <SMP_Encryption_Update_Handler+0x7a>
 802cf9a:	28ae      	cmp	r0, #174	@ 0xae
 802cf9c:	d003      	beq.n	802cfa6 <SMP_Encryption_Update_Handler+0x7e>
 802cf9e:	28bc      	cmp	r0, #188	@ 0xbc
 802cfa0:	d105      	bne.n	802cfae <SMP_Encryption_Update_Handler+0x86>
 802cfa2:	20cf      	movs	r0, #207	@ 0xcf
 802cfa4:	e000      	b.n	802cfa8 <SMP_Encryption_Update_Handler+0x80>
 802cfa6:	20e0      	movs	r0, #224	@ 0xe0
 802cfa8:	75e0      	strb	r0, [r4, #23]
 802cfaa:	2600      	movs	r6, #0
 802cfac:	e00c      	b.n	802cfc8 <SMP_Encryption_Update_Handler+0xa0>
 802cfae:	2600      	movs	r6, #0
 802cfb0:	f1b8 0f00 	cmp.w	r8, #0
 802cfb4:	bf08      	it	eq
 802cfb6:	28f1      	cmpeq	r0, #241	@ 0xf1
 802cfb8:	d106      	bne.n	802cfc8 <SMP_Encryption_Update_Handler+0xa0>
 802cfba:	2000      	movs	r0, #0
 802cfbc:	4629      	mov	r1, r5
 802cfbe:	2200      	movs	r2, #0
 802cfc0:	2300      	movs	r3, #0
 802cfc2:	2600      	movs	r6, #0
 802cfc4:	f7fa f9f8 	bl	80273b8 <EVT_aci_gap_pairing_complete>
 802cfc8:	7fe0      	ldrb	r0, [r4, #31]
 802cfca:	07c0      	lsls	r0, r0, #31
 802cfcc:	d105      	bne.n	802cfda <SMP_Encryption_Update_Handler+0xb2>
 802cfce:	f894 0021 	ldrb.w	r0, [r4, #33]	@ 0x21
 802cfd2:	06c1      	lsls	r1, r0, #27
 802cfd4:	d40d      	bmi.n	802cff2 <SMP_Encryption_Update_Handler+0xca>
 802cfd6:	b9be      	cbnz	r6, 802d008 <SMP_Encryption_Update_Handler+0xe0>
 802cfd8:	e014      	b.n	802d004 <SMP_Encryption_Update_Handler+0xdc>
 802cfda:	f894 0020 	ldrb.w	r0, [r4, #32]
 802cfde:	f000 01f0 	and.w	r1, r0, #240	@ 0xf0
 802cfe2:	f884 1020 	strb.w	r1, [r4, #32]
 802cfe6:	b97e      	cbnz	r6, 802d008 <SMP_Encryption_Update_Handler+0xe0>
 802cfe8:	f000 0003 	and.w	r0, r0, #3
 802cfec:	2802      	cmp	r0, #2
 802cfee:	d109      	bne.n	802d004 <SMP_Encryption_Update_Handler+0xdc>
 802cff0:	e00a      	b.n	802d008 <SMP_Encryption_Update_Handler+0xe0>
 802cff2:	f000 01ef 	and.w	r1, r0, #239	@ 0xef
 802cff6:	f884 1021 	strb.w	r1, [r4, #33]	@ 0x21
 802cffa:	b92e      	cbnz	r6, 802d008 <SMP_Encryption_Update_Handler+0xe0>
 802cffc:	b240      	sxtb	r0, r0
 802cffe:	f1b0 3fff 	cmp.w	r0, #4294967295	@ 0xffffffff
 802d002:	dd01      	ble.n	802d008 <SMP_Encryption_Update_Handler+0xe0>
 802d004:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802d008:	4620      	mov	r0, r4
 802d00a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802d00e:	f000 b9b5 	b.w	802d37c <SMP_Stop_Timer>
	...

0802d014 <SMP_Process>:
 802d014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802d016:	4e1b      	ldr	r6, [pc, #108]	@ (802d084 <__arm_cp.10_0>)
 802d018:	4c1b      	ldr	r4, [pc, #108]	@ (802d088 <__arm_cp.10_1>)
 802d01a:	2500      	movs	r5, #0
 802d01c:	2700      	movs	r7, #0
 802d01e:	f896 0039 	ldrb.w	r0, [r6, #57]	@ 0x39
 802d022:	f040 0004 	orr.w	r0, r0, #4
 802d026:	f886 0039 	strb.w	r0, [r6, #57]	@ 0x39
 802d02a:	7da0      	ldrb	r0, [r4, #22]
 802d02c:	4287      	cmp	r7, r0
 802d02e:	d20a      	bcs.n	802d046 <SMP_Process+0x32>
 802d030:	f8d6 10bc 	ldr.w	r1, [r6, #188]	@ 0xbc
 802d034:	5b4a      	ldrh	r2, [r1, r5]
 802d036:	b11a      	cbz	r2, 802d040 <SMP_Process+0x2c>
 802d038:	1948      	adds	r0, r1, r5
 802d03a:	f000 fb0b 	bl	802d654 <SMP_Pairing_Process>
 802d03e:	7da0      	ldrb	r0, [r4, #22]
 802d040:	3580      	adds	r5, #128	@ 0x80
 802d042:	3701      	adds	r7, #1
 802d044:	e7f2      	b.n	802d02c <SMP_Process+0x18>
 802d046:	f001 fd55 	bl	802eaf4 <SMP_SC_Public_Key_Generation_Process>
 802d04a:	f106 0484 	add.w	r4, r6, #132	@ 0x84
 802d04e:	f8d6 5084 	ldr.w	r5, [r6, #132]	@ 0x84
 802d052:	b185      	cbz	r5, 802d076 <SMP_Process+0x62>
 802d054:	4620      	mov	r0, r4
 802d056:	4629      	mov	r1, r5
 802d058:	f7ff f9de 	bl	802c418 <ACL_List_Remove>
 802d05c:	8928      	ldrh	r0, [r5, #8]
 802d05e:	f000 f913 	bl	802d288 <OUTLINED_FUNCTION_0>
 802d062:	d004      	beq.n	802d06e <SMP_Process+0x5a>
 802d064:	4601      	mov	r1, r0
 802d066:	4628      	mov	r0, r5
 802d068:	f000 fe38 	bl	802dcdc <SMP_Process_Rx_Packet>
 802d06c:	b920      	cbnz	r0, 802d078 <SMP_Process+0x64>
 802d06e:	4628      	mov	r0, r5
 802d070:	f7ff f88a 	bl	802c188 <ACL_Release>
 802d074:	e7eb      	b.n	802d04e <SMP_Process+0x3a>
 802d076:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802d078:	4620      	mov	r0, r4
 802d07a:	4629      	mov	r1, r5
 802d07c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 802d080:	f7ff b9c4 	b.w	802c40c <ACL_List_Insert_Head>

0802d084 <__arm_cp.10_0>:
 802d084:	20009f5c 	.word	0x20009f5c

0802d088 <__arm_cp.10_1>:
 802d088:	20009f34 	.word	0x20009f34

0802d08c <SMP_Timeout_Cb>:
 802d08c:	b5b0      	push	{r4, r5, r7, lr}
 802d08e:	490c      	ldr	r1, [pc, #48]	@ (802d0c0 <__arm_cp.11_0>)
 802d090:	4604      	mov	r4, r0
 802d092:	01c0      	lsls	r0, r0, #7
 802d094:	2201      	movs	r2, #1
 802d096:	2300      	movs	r3, #0
 802d098:	f8d1 50bc 	ldr.w	r5, [r1, #188]	@ 0xbc
 802d09c:	5a29      	ldrh	r1, [r5, r0]
 802d09e:	2001      	movs	r0, #1
 802d0a0:	f7fa f98a 	bl	80273b8 <EVT_aci_gap_pairing_complete>
 802d0a4:	eb05 14c4 	add.w	r4, r5, r4, lsl #7
 802d0a8:	2102      	movs	r1, #2
 802d0aa:	4620      	mov	r0, r4
 802d0ac:	f001 f964 	bl	802e378 <SMP_Update_Stats_On_Pairing_End>
 802d0b0:	4620      	mov	r0, r4
 802d0b2:	2100      	movs	r1, #0
 802d0b4:	2280      	movs	r2, #128	@ 0x80
 802d0b6:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 802d0ba:	f7f7 ba95 	b.w	80245e8 <ble_memset>
 802d0be:	bf00      	nop

0802d0c0 <__arm_cp.11_0>:
 802d0c0:	20009f5c 	.word	0x20009f5c

0802d0c4 <SMP_Save_GATT_Data>:
 802d0c4:	b570      	push	{r4, r5, r6, lr}
 802d0c6:	4614      	mov	r4, r2
 802d0c8:	460d      	mov	r5, r1
 802d0ca:	f000 f8dd 	bl	802d288 <OUTLINED_FUNCTION_0>
 802d0ce:	d003      	beq.n	802d0d8 <SMP_Save_GATT_Data+0x14>
 802d0d0:	4606      	mov	r6, r0
 802d0d2:	f000 f80c 	bl	802d0ee <SMP_Is_Bonded>
 802d0d6:	b108      	cbz	r0, 802d0dc <SMP_Save_GATT_Data+0x18>
 802d0d8:	205e      	movs	r0, #94	@ 0x5e
 802d0da:	bd70      	pop	{r4, r5, r6, pc}
 802d0dc:	f106 0011 	add.w	r0, r6, #17
 802d0e0:	7c31      	ldrb	r1, [r6, #16]
 802d0e2:	462a      	mov	r2, r5
 802d0e4:	4623      	mov	r3, r4
 802d0e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802d0ea:	f7ff ba98 	b.w	802c61e <SDB_Write_Gatt_Data>

0802d0ee <SMP_Is_Bonded>:
 802d0ee:	b510      	push	{r4, lr}
 802d0f0:	b094      	sub	sp, #80	@ 0x50
 802d0f2:	4604      	mov	r4, r0
 802d0f4:	7c01      	ldrb	r1, [r0, #16]
 802d0f6:	3011      	adds	r0, #17
 802d0f8:	466a      	mov	r2, sp
 802d0fa:	f7ff f9b0 	bl	802c45e <SDB_Read_Sec_Record>
 802d0fe:	b148      	cbz	r0, 802d114 <SMP_Is_Bonded+0x26>
 802d100:	7de0      	ldrb	r0, [r4, #23]
 802d102:	28f1      	cmp	r0, #241	@ 0xf1
 802d104:	d104      	bne.n	802d110 <SMP_Is_Bonded+0x22>
 802d106:	7f20      	ldrb	r0, [r4, #28]
 802d108:	07c1      	lsls	r1, r0, #31
 802d10a:	d001      	beq.n	802d110 <SMP_Is_Bonded+0x22>
 802d10c:	0780      	lsls	r0, r0, #30
 802d10e:	d401      	bmi.n	802d114 <SMP_Is_Bonded+0x26>
 802d110:	205e      	movs	r0, #94	@ 0x5e
 802d112:	e000      	b.n	802d116 <SMP_Is_Bonded+0x28>
 802d114:	2000      	movs	r0, #0
 802d116:	b014      	add	sp, #80	@ 0x50
 802d118:	bd10      	pop	{r4, pc}

0802d11a <SMP_Retrieve_GATT_Data>:
 802d11a:	b570      	push	{r4, r5, r6, lr}
 802d11c:	4614      	mov	r4, r2
 802d11e:	460d      	mov	r5, r1
 802d120:	f000 f8b2 	bl	802d288 <OUTLINED_FUNCTION_0>
 802d124:	d003      	beq.n	802d12e <SMP_Retrieve_GATT_Data+0x14>
 802d126:	4606      	mov	r6, r0
 802d128:	f7ff ffe1 	bl	802d0ee <SMP_Is_Bonded>
 802d12c:	b108      	cbz	r0, 802d132 <SMP_Retrieve_GATT_Data+0x18>
 802d12e:	205e      	movs	r0, #94	@ 0x5e
 802d130:	bd70      	pop	{r4, r5, r6, pc}
 802d132:	f106 0011 	add.w	r0, r6, #17
 802d136:	7c31      	ldrb	r1, [r6, #16]
 802d138:	462a      	mov	r2, r5
 802d13a:	4623      	mov	r3, r4
 802d13c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802d140:	f7ff baf1 	b.w	802c726 <SDB_Read_Gatt_Data>

0802d144 <SMP_Get_Sec_Status>:
 802d144:	b510      	push	{r4, lr}
 802d146:	460c      	mov	r4, r1
 802d148:	f000 f89e 	bl	802d288 <OUTLINED_FUNCTION_0>
 802d14c:	d006      	beq.n	802d15c <SMP_Get_Sec_Status+0x18>
 802d14e:	7e01      	ldrb	r1, [r0, #24]
 802d150:	7f80      	ldrb	r0, [r0, #30]
 802d152:	42a0      	cmp	r0, r4
 802d154:	bf38      	it	cc
 802d156:	f041 0108 	orrcc.w	r1, r1, #8
 802d15a:	e000      	b.n	802d15e <SMP_Get_Sec_Status+0x1a>
 802d15c:	2100      	movs	r1, #0
 802d15e:	b2c8      	uxtb	r0, r1
 802d160:	bd10      	pop	{r4, pc}

0802d162 <SMP_Forget_Device>:
 802d162:	b580      	push	{r7, lr}
 802d164:	f000 f890 	bl	802d288 <OUTLINED_FUNCTION_0>
 802d168:	d005      	beq.n	802d176 <SMP_Forget_Device+0x14>
 802d16a:	f890 1020 	ldrb.w	r1, [r0, #32]
 802d16e:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 802d172:	f880 1020 	strb.w	r1, [r0, #32]
 802d176:	bd80      	pop	{r7, pc}

0802d178 <aci_gap_set_io_capability>:
 802d178:	2804      	cmp	r0, #4
 802d17a:	bf8f      	iteee	hi
 802d17c:	2092      	movhi	r0, #146	@ 0x92
 802d17e:	4902      	ldrls	r1, [pc, #8]	@ (802d188 <__arm_cp.18_0>)
 802d180:	f881 0099 	strbls.w	r0, [r1, #153]	@ 0x99
 802d184:	2000      	movls	r0, #0
 802d186:	4770      	bx	lr

0802d188 <__arm_cp.18_0>:
 802d188:	20009f5c 	.word	0x20009f5c

0802d18c <aci_gap_set_authentication_requirement>:
 802d18c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802d190:	2801      	cmp	r0, #1
 802d192:	bf9c      	itt	ls
 802d194:	460d      	movls	r5, r1
 802d196:	2901      	cmpls	r1, #1
 802d198:	d902      	bls.n	802d1a0 <aci_gap_set_authentication_requirement+0x14>
 802d19a:	2092      	movs	r0, #146	@ 0x92
 802d19c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802d1a0:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
 802d1a4:	f1b8 0f07 	cmp.w	r8, #7
 802d1a8:	d3f7      	bcc.n	802d19a <aci_gap_set_authentication_requirement+0xe>
 802d1aa:	f8dd 902c 	ldr.w	r9, [sp, #44]	@ 0x2c
 802d1ae:	f1b9 0f10 	cmp.w	r9, #16
 802d1b2:	d8f2      	bhi.n	802d19a <aci_gap_set_authentication_requirement+0xe>
 802d1b4:	45c1      	cmp	r9, r8
 802d1b6:	d3f0      	bcc.n	802d19a <aci_gap_set_authentication_requirement+0xe>
 802d1b8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 802d1bc:	f1ba 0f01 	cmp.w	sl, #1
 802d1c0:	d8eb      	bhi.n	802d19a <aci_gap_set_authentication_requirement+0xe>
 802d1c2:	f8dd b034 	ldr.w	fp, [sp, #52]	@ 0x34
 802d1c6:	4604      	mov	r4, r0
 802d1c8:	4814      	ldr	r0, [pc, #80]	@ (802d21c <__arm_cp.19_0>)
 802d1ca:	4583      	cmp	fp, r0
 802d1cc:	bf9c      	itt	ls
 802d1ce:	980e      	ldrls	r0, [sp, #56]	@ 0x38
 802d1d0:	2801      	cmpls	r0, #1
 802d1d2:	d8e2      	bhi.n	802d19a <aci_gap_set_authentication_requirement+0xe>
 802d1d4:	2a02      	cmp	r2, #2
 802d1d6:	4616      	mov	r6, r2
 802d1d8:	bf9c      	itt	ls
 802d1da:	461f      	movls	r7, r3
 802d1dc:	2b01      	cmpls	r3, #1
 802d1de:	d8dc      	bhi.n	802d19a <aci_gap_set_authentication_requirement+0xe>
 802d1e0:	f001 f902 	bl	802e3e8 <SMP_Is_Any_Pairing_Ongoing>
 802d1e4:	b110      	cbz	r0, 802d1ec <aci_gap_set_authentication_requirement+0x60>
 802d1e6:	200c      	movs	r0, #12
 802d1e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802d1ec:	480c      	ldr	r0, [pc, #48]	@ (802d220 <__arm_cp.19_1>)
 802d1ee:	990e      	ldr	r1, [sp, #56]	@ 0x38
 802d1f0:	f880 7097 	strb.w	r7, [r0, #151]	@ 0x97
 802d1f4:	f880 6096 	strb.w	r6, [r0, #150]	@ 0x96
 802d1f8:	f880 508d 	strb.w	r5, [r0, #141]	@ 0x8d
 802d1fc:	f880 408c 	strb.w	r4, [r0, #140]	@ 0x8c
 802d200:	f880 a094 	strb.w	sl, [r0, #148]	@ 0x94
 802d204:	f880 908f 	strb.w	r9, [r0, #143]	@ 0x8f
 802d208:	f880 808e 	strb.w	r8, [r0, #142]	@ 0x8e
 802d20c:	f880 1095 	strb.w	r1, [r0, #149]	@ 0x95
 802d210:	f8c0 b090 	str.w	fp, [r0, #144]	@ 0x90
 802d214:	2000      	movs	r0, #0
 802d216:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802d21a:	bf00      	nop

0802d21c <__arm_cp.19_0>:
 802d21c:	000f423f 	.word	0x000f423f

0802d220 <__arm_cp.19_1>:
 802d220:	20009f5c 	.word	0x20009f5c

0802d224 <aci_gap_allow_rebond>:
 802d224:	b580      	push	{r7, lr}
 802d226:	f000 f82f 	bl	802d288 <OUTLINED_FUNCTION_0>
 802d22a:	d00c      	beq.n	802d246 <aci_gap_allow_rebond+0x22>
 802d22c:	f890 1020 	ldrb.w	r1, [r0, #32]
 802d230:	f001 020c 	and.w	r2, r1, #12
 802d234:	2a08      	cmp	r2, #8
 802d236:	bf11      	iteee	ne
 802d238:	200c      	movne	r0, #12
 802d23a:	f041 010c 	orreq.w	r1, r1, #12
 802d23e:	f880 1020 	strbeq.w	r1, [r0, #32]
 802d242:	2000      	moveq	r0, #0
 802d244:	bd80      	pop	{r7, pc}
 802d246:	2002      	movs	r0, #2
 802d248:	bd80      	pop	{r7, pc}
	...

0802d24c <aci_gap_pass_key_resp>:
 802d24c:	b510      	push	{r4, lr}
 802d24e:	460c      	mov	r4, r1
 802d250:	f7ff fddc 	bl	802ce0c <SMP_Get_Remote_Device>
 802d254:	490a      	ldr	r1, [pc, #40]	@ (802d280 <__arm_cp.23_0>)
 802d256:	428c      	cmp	r4, r1
 802d258:	bf84      	itt	hi
 802d25a:	2092      	movhi	r0, #146	@ 0x92
 802d25c:	bd10      	pophi	{r4, pc}
 802d25e:	b168      	cbz	r0, 802d27c <aci_gap_pass_key_resp+0x30>
 802d260:	7e41      	ldrb	r1, [r0, #25]
 802d262:	2902      	cmp	r1, #2
 802d264:	bf1c      	itt	ne
 802d266:	200c      	movne	r0, #12
 802d268:	bd10      	popne	{r4, pc}
 802d26a:	4906      	ldr	r1, [pc, #24]	@ (802d284 <__arm_cp.23_1>)
 802d26c:	f8c1 4090 	str.w	r4, [r1, #144]	@ 0x90
 802d270:	7f41      	ldrb	r1, [r0, #29]
 802d272:	f041 0110 	orr.w	r1, r1, #16
 802d276:	7741      	strb	r1, [r0, #29]
 802d278:	2000      	movs	r0, #0
 802d27a:	bd10      	pop	{r4, pc}
 802d27c:	2002      	movs	r0, #2
 802d27e:	bd10      	pop	{r4, pc}

0802d280 <__arm_cp.23_0>:
 802d280:	000f423f 	.word	0x000f423f

0802d284 <__arm_cp.23_1>:
 802d284:	20009f5c 	.word	0x20009f5c

0802d288 <OUTLINED_FUNCTION_0>:
 802d288:	f84d ed08 	str.w	lr, [sp, #-8]!
 802d28c:	f7ff fdbe 	bl	802ce0c <SMP_Get_Remote_Device>
 802d290:	2800      	cmp	r0, #0
 802d292:	f85d eb08 	ldr.w	lr, [sp], #8
 802d296:	4770      	bx	lr

0802d298 <SMP_Check_Remote_OOB_Data_Presence>:
 802d298:	b510      	push	{r4, lr}
 802d29a:	4604      	mov	r4, r0
 802d29c:	7881      	ldrb	r1, [r0, #2]
 802d29e:	4808      	ldr	r0, [pc, #32]	@ (802d2c0 <__arm_cp.0_0>)
 802d2a0:	f890 20d9 	ldrb.w	r2, [r0, #217]	@ 0xd9
 802d2a4:	428a      	cmp	r2, r1
 802d2a6:	d105      	bne.n	802d2b4 <SMP_Check_Remote_OOB_Data_Presence+0x1c>
 802d2a8:	30da      	adds	r0, #218	@ 0xda
 802d2aa:	1ce1      	adds	r1, r4, #3
 802d2ac:	2206      	movs	r2, #6
 802d2ae:	f7f7 f9d3 	bl	8024658 <ble_memcmp>
 802d2b2:	b100      	cbz	r0, 802d2b6 <SMP_Check_Remote_OOB_Data_Presence+0x1e>
 802d2b4:	bd10      	pop	{r4, pc}
 802d2b6:	7ea0      	ldrb	r0, [r4, #26]
 802d2b8:	f040 0001 	orr.w	r0, r0, #1
 802d2bc:	76a0      	strb	r0, [r4, #26]
 802d2be:	bd10      	pop	{r4, pc}

0802d2c0 <__arm_cp.0_0>:
 802d2c0:	20009f5c 	.word	0x20009f5c

0802d2c4 <SMP_Clear_Remote_OOB_Data>:
 802d2c4:	4802      	ldr	r0, [pc, #8]	@ (802d2d0 <__arm_cp.1_0>)
 802d2c6:	2100      	movs	r1, #0
 802d2c8:	2228      	movs	r2, #40	@ 0x28
 802d2ca:	30d8      	adds	r0, #216	@ 0xd8
 802d2cc:	f7f7 b98c 	b.w	80245e8 <ble_memset>

0802d2d0 <__arm_cp.1_0>:
 802d2d0:	20009f5c 	.word	0x20009f5c

0802d2d4 <SMP_Init_OOB_SC>:
 802d2d4:	b580      	push	{r7, lr}
 802d2d6:	4805      	ldr	r0, [pc, #20]	@ (802d2ec <__arm_cp.4_0>)
 802d2d8:	2110      	movs	r1, #16
 802d2da:	309c      	adds	r0, #156	@ 0x9c
 802d2dc:	f001 ffe9 	bl	802f2b2 <Is_Empty>
 802d2e0:	b118      	cbz	r0, 802d2ea <SMP_Init_OOB_SC+0x16>
 802d2e2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 802d2e6:	f000 b803 	b.w	802d2f0 <SMP_Generate_Local_OOB_SC_Random>
 802d2ea:	bd80      	pop	{r7, pc}

0802d2ec <__arm_cp.4_0>:
 802d2ec:	20009f5c 	.word	0x20009f5c

0802d2f0 <SMP_Generate_Local_OOB_SC_Random>:
 802d2f0:	4802      	ldr	r0, [pc, #8]	@ (802d2fc <__arm_cp.5_0>)
 802d2f2:	f100 019c 	add.w	r1, r0, #156	@ 0x9c
 802d2f6:	2004      	movs	r0, #4
 802d2f8:	f7dc bb49 	b.w	800998e <BLEPLAT_RngGet>

0802d2fc <__arm_cp.5_0>:
 802d2fc:	20009f5c 	.word	0x20009f5c

0802d300 <SMP_OOB_SC_Authentication_Stage_1>:
 802d300:	b570      	push	{r4, r5, r6, lr}
 802d302:	b086      	sub	sp, #24
 802d304:	4604      	mov	r4, r0
 802d306:	7e80      	ldrb	r0, [r0, #26]
 802d308:	07c0      	lsls	r0, r0, #31
 802d30a:	d101      	bne.n	802d310 <SMP_OOB_SC_Authentication_Stage_1+0x10>
 802d30c:	2400      	movs	r4, #0
 802d30e:	e01d      	b.n	802d34c <SMP_OOB_SC_Authentication_Stage_1+0x4c>
 802d310:	4e10      	ldr	r6, [pc, #64]	@ (802d354 <__arm_cp.6_0>)
 802d312:	ad02      	add	r5, sp, #8
 802d314:	2300      	movs	r3, #0
 802d316:	9500      	str	r5, [sp, #0]
 802d318:	f506 70b0 	add.w	r0, r6, #352	@ 0x160
 802d31c:	f106 02e0 	add.w	r2, r6, #224	@ 0xe0
 802d320:	4601      	mov	r1, r0
 802d322:	f7ff fb1b 	bl	802c95c <SMA_SC_Gen_f4_Confirm>
 802d326:	f106 00f0 	add.w	r0, r6, #240	@ 0xf0
 802d32a:	4629      	mov	r1, r5
 802d32c:	2210      	movs	r2, #16
 802d32e:	f7f7 f993 	bl	8024658 <ble_memcmp>
 802d332:	b108      	cbz	r0, 802d338 <SMP_OOB_SC_Authentication_Stage_1+0x38>
 802d334:	2404      	movs	r4, #4
 802d336:	e009      	b.n	802d34c <SMP_OOB_SC_Authentication_Stage_1+0x4c>
 802d338:	7ea0      	ldrb	r0, [r4, #26]
 802d33a:	0780      	lsls	r0, r0, #30
 802d33c:	d4e6      	bmi.n	802d30c <SMP_OOB_SC_Authentication_Stage_1+0xc>
 802d33e:	f106 009c 	add.w	r0, r6, #156	@ 0x9c
 802d342:	2100      	movs	r1, #0
 802d344:	2210      	movs	r2, #16
 802d346:	2400      	movs	r4, #0
 802d348:	f7f7 f94e 	bl	80245e8 <ble_memset>
 802d34c:	4620      	mov	r0, r4
 802d34e:	b006      	add	sp, #24
 802d350:	bd70      	pop	{r4, r5, r6, pc}
 802d352:	bf00      	nop

0802d354 <__arm_cp.6_0>:
 802d354:	20009f5c 	.word	0x20009f5c

0802d358 <SMP_Get_OOB_SC_Random>:
 802d358:	4b07      	ldr	r3, [pc, #28]	@ (802d378 <__arm_cp.7_0>)
 802d35a:	b131      	cbz	r1, 802d36a <SMP_Get_OOB_SC_Random+0x12>
 802d35c:	7e80      	ldrb	r0, [r0, #26]
 802d35e:	07c0      	lsls	r0, r0, #31
 802d360:	bf08      	it	eq
 802d362:	4770      	bxeq	lr
 802d364:	f103 01e0 	add.w	r1, r3, #224	@ 0xe0
 802d368:	e001      	b.n	802d36e <SMP_Get_OOB_SC_Random+0x16>
 802d36a:	f103 019c 	add.w	r1, r3, #156	@ 0x9c
 802d36e:	4610      	mov	r0, r2
 802d370:	2210      	movs	r2, #16
 802d372:	f7f7 b8e9 	b.w	8024548 <ble_memcpy>
 802d376:	bf00      	nop

0802d378 <__arm_cp.7_0>:
 802d378:	20009f5c 	.word	0x20009f5c

0802d37c <SMP_Stop_Timer>:
 802d37c:	4905      	ldr	r1, [pc, #20]	@ (802d394 <__arm_cp.0_0>)
 802d37e:	f8d1 10bc 	ldr.w	r1, [r1, #188]	@ 0xbc
 802d382:	1a40      	subs	r0, r0, r1
 802d384:	f44f 6140 	mov.w	r1, #3072	@ 0xc00
 802d388:	ea41 10d0 	orr.w	r0, r1, r0, lsr #7
 802d38c:	b280      	uxth	r0, r0
 802d38e:	f7dc bb80 	b.w	8009a92 <BLEPLAT_TimerStop>
 802d392:	bf00      	nop

0802d394 <__arm_cp.0_0>:
 802d394:	20009f5c 	.word	0x20009f5c

0802d398 <SMP_MI_Send_Pairing_Request>:
 802d398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802d39c:	b085      	sub	sp, #20
 802d39e:	461e      	mov	r6, r3
 802d3a0:	4617      	mov	r7, r2
 802d3a2:	460d      	mov	r5, r1
 802d3a4:	f7ff fd32 	bl	802ce0c <SMP_Get_Remote_Device>
 802d3a8:	b328      	cbz	r0, 802d3f6 <SMP_MI_Send_Pairing_Request+0x5e>
 802d3aa:	4604      	mov	r4, r0
 802d3ac:	7fc0      	ldrb	r0, [r0, #31]
 802d3ae:	07c0      	lsls	r0, r0, #31
 802d3b0:	d11f      	bne.n	802d3f2 <SMP_MI_Send_Pairing_Request+0x5a>
 802d3b2:	7e20      	ldrb	r0, [r4, #24]
 802d3b4:	07c0      	lsls	r0, r0, #31
 802d3b6:	d120      	bne.n	802d3fa <SMP_MI_Send_Pairing_Request+0x62>
 802d3b8:	f894 0021 	ldrb.w	r0, [r4, #33]	@ 0x21
 802d3bc:	06c0      	lsls	r0, r0, #27
 802d3be:	d418      	bmi.n	802d3f2 <SMP_MI_Send_Pairing_Request+0x5a>
 802d3c0:	f8df 9128 	ldr.w	r9, [pc, #296]	@ 802d4ec <__arm_cp.2_0>
 802d3c4:	f899 009a 	ldrb.w	r0, [r9, #154]	@ 0x9a
 802d3c8:	0741      	lsls	r1, r0, #29
 802d3ca:	d503      	bpl.n	802d3d4 <SMP_MI_Send_Pairing_Request+0x3c>
 802d3cc:	f899 1096 	ldrb.w	r1, [r9, #150]	@ 0x96
 802d3d0:	0789      	lsls	r1, r1, #30
 802d3d2:	d10e      	bne.n	802d3f2 <SMP_MI_Send_Pairing_Request+0x5a>
 802d3d4:	7de1      	ldrb	r1, [r4, #23]
 802d3d6:	b1a1      	cbz	r1, 802d402 <SMP_MI_Send_Pairing_Request+0x6a>
 802d3d8:	29f1      	cmp	r1, #241	@ 0xf1
 802d3da:	d10a      	bne.n	802d3f2 <SMP_MI_Send_Pairing_Request+0x5a>
 802d3dc:	07e9      	lsls	r1, r5, #31
 802d3de:	d110      	bne.n	802d402 <SMP_MI_Send_Pairing_Request+0x6a>
 802d3e0:	2001      	movs	r0, #1
 802d3e2:	f884 0021 	strb.w	r0, [r4, #33]	@ 0x21
 802d3e6:	4620      	mov	r0, r4
 802d3e8:	b005      	add	sp, #20
 802d3ea:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802d3ee:	f000 b8e5 	b.w	802d5bc <SMP_MI_Set_Encryption>
 802d3f2:	200c      	movs	r0, #12
 802d3f4:	e002      	b.n	802d3fc <SMP_MI_Send_Pairing_Request+0x64>
 802d3f6:	2002      	movs	r0, #2
 802d3f8:	e000      	b.n	802d3fc <SMP_MI_Send_Pairing_Request+0x64>
 802d3fa:	2059      	movs	r0, #89	@ 0x59
 802d3fc:	b005      	add	sp, #20
 802d3fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802d402:	f000 0003 	and.w	r0, r0, #3
 802d406:	2803      	cmp	r0, #3
 802d408:	d101      	bne.n	802d40e <SMP_MI_Send_Pairing_Request+0x76>
 802d40a:	2038      	movs	r0, #56	@ 0x38
 802d40c:	e7f6      	b.n	802d3fc <SMP_MI_Send_Pairing_Request+0x64>
 802d40e:	4620      	mov	r0, r4
 802d410:	2107      	movs	r1, #7
 802d412:	f000 f86d 	bl	802d4f0 <SMP_New_PDU>
 802d416:	2800      	cmp	r0, #0
 802d418:	d065      	beq.n	802d4e6 <SMP_MI_Send_Pairing_Request+0x14e>
 802d41a:	4680      	mov	r8, r0
 802d41c:	f899 008c 	ldrb.w	r0, [r9, #140]	@ 0x8c
 802d420:	f899 a08d 	ldrb.w	sl, [r9, #141]	@ 0x8d
 802d424:	f899 b097 	ldrb.w	fp, [r9, #151]	@ 0x97
 802d428:	9004      	str	r0, [sp, #16]
 802d42a:	f899 0096 	ldrb.w	r0, [r9, #150]	@ 0x96
 802d42e:	9003      	str	r0, [sp, #12]
 802d430:	4620      	mov	r0, r4
 802d432:	f7ff ff31 	bl	802d298 <SMP_Check_Remote_OOB_Data_Presence>
 802d436:	2007      	movs	r0, #7
 802d438:	7ea2      	ldrb	r2, [r4, #26]
 802d43a:	2f00      	cmp	r7, #0
 802d43c:	e9cd 0000 	strd	r0, r0, [sp]
 802d440:	bf08      	it	eq
 802d442:	ea4f 0a96 	moveq.w	sl, r6, lsr #2
 802d446:	f00a 0101 	and.w	r1, sl, #1
 802d44a:	2010      	movs	r0, #16
 802d44c:	9102      	str	r1, [sp, #8]
 802d44e:	2308      	movs	r3, #8
 802d450:	ea00 170b 	and.w	r7, r0, fp, lsl #4
 802d454:	ea47 0081 	orr.w	r0, r7, r1, lsl #2
 802d458:	9903      	ldr	r1, [sp, #12]
 802d45a:	ea41 0151 	orr.w	r1, r1, r1, lsr #1
 802d45e:	ea03 06c1 	and.w	r6, r3, r1, lsl #3
 802d462:	9904      	ldr	r1, [sp, #16]
 802d464:	f001 0b01 	and.w	fp, r1, #1
 802d468:	2101      	movs	r1, #1
 802d46a:	4430      	add	r0, r6
 802d46c:	eb00 0a0b 	add.w	sl, r0, fp
 802d470:	4640      	mov	r0, r8
 802d472:	4653      	mov	r3, sl
 802d474:	f000 ffd2 	bl	802e41c <SMP_Build_Pairing_Packet>
 802d478:	4640      	mov	r0, r8
 802d47a:	f001 fa01 	bl	802e880 <OUTLINED_FUNCTION_3>
 802d47e:	2800      	cmp	r0, #0
 802d480:	d1bc      	bne.n	802d3fc <SMP_MI_Send_Pairing_Request+0x64>
 802d482:	2000      	movs	r0, #0
 802d484:	e9cd 6703 	strd	r6, r7, [sp, #12]
 802d488:	2100      	movs	r1, #0
 802d48a:	2254      	movs	r2, #84	@ 0x54
 802d48c:	8460      	strh	r0, [r4, #34]	@ 0x22
 802d48e:	7e20      	ldrb	r0, [r4, #24]
 802d490:	9f02      	ldr	r7, [sp, #8]
 802d492:	f000 009f 	and.w	r0, r0, #159	@ 0x9f
 802d496:	7620      	strb	r0, [r4, #24]
 802d498:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 802d49c:	f7f7 f8a4 	bl	80245e8 <ble_memset>
 802d4a0:	2020      	movs	r0, #32
 802d4a2:	ea00 1105 	and.w	r1, r0, r5, lsl #4
 802d4a6:	f884 1021 	strb.w	r1, [r4, #33]	@ 0x21
 802d4aa:	f899 109a 	ldrb.w	r1, [r9, #154]	@ 0x9a
 802d4ae:	f001 0203 	and.w	r2, r1, #3
 802d4b2:	2a03      	cmp	r2, #3
 802d4b4:	bf1c      	itt	ne
 802d4b6:	3101      	addne	r1, #1
 802d4b8:	f889 109a 	strbne.w	r1, [r9, #154]	@ 0x9a
 802d4bc:	7f21      	ldrb	r1, [r4, #28]
 802d4be:	7f62      	ldrb	r2, [r4, #29]
 802d4c0:	7fe3      	ldrb	r3, [r4, #31]
 802d4c2:	ea41 014b 	orr.w	r1, r1, fp, lsl #1
 802d4c6:	7721      	strb	r1, [r4, #28]
 802d4c8:	ea42 0107 	orr.w	r1, r2, r7
 802d4cc:	9a04      	ldr	r2, [sp, #16]
 802d4ce:	7761      	strb	r1, [r4, #29]
 802d4d0:	f003 0101 	and.w	r1, r3, #1
 802d4d4:	4311      	orrs	r1, r2
 802d4d6:	9a03      	ldr	r2, [sp, #12]
 802d4d8:	4311      	orrs	r1, r2
 802d4da:	77e1      	strb	r1, [r4, #31]
 802d4dc:	f889 a1a4 	strb.w	sl, [r9, #420]	@ 0x1a4
 802d4e0:	75e0      	strb	r0, [r4, #23]
 802d4e2:	2000      	movs	r0, #0
 802d4e4:	e78a      	b.n	802d3fc <SMP_MI_Send_Pairing_Request+0x64>
 802d4e6:	2064      	movs	r0, #100	@ 0x64
 802d4e8:	e788      	b.n	802d3fc <SMP_MI_Send_Pairing_Request+0x64>
 802d4ea:	bf00      	nop

0802d4ec <__arm_cp.2_0>:
 802d4ec:	20009f5c 	.word	0x20009f5c

0802d4f0 <SMP_New_PDU>:
 802d4f0:	8803      	ldrh	r3, [r0, #0]
 802d4f2:	1d08      	adds	r0, r1, #4
 802d4f4:	b282      	uxth	r2, r0
 802d4f6:	2001      	movs	r0, #1
 802d4f8:	4619      	mov	r1, r3
 802d4fa:	f7fe be0f 	b.w	802c11c <ACL_New>

0802d4fe <SMP_Send_PDU>:
 802d4fe:	b570      	push	{r4, r5, r6, lr}
 802d500:	4606      	mov	r6, r0
 802d502:	460d      	mov	r5, r1
 802d504:	2006      	movs	r0, #6
 802d506:	4631      	mov	r1, r6
 802d508:	f7fe fbd7 	bl	802bcba <L2C_Send_Data>
 802d50c:	4604      	mov	r4, r0
 802d50e:	b118      	cbz	r0, 802d518 <SMP_Send_PDU+0x1a>
 802d510:	4630      	mov	r0, r6
 802d512:	f7fe fe39 	bl	802c188 <ACL_Release>
 802d516:	e003      	b.n	802d520 <SMP_Send_PDU+0x22>
 802d518:	b115      	cbz	r5, 802d520 <SMP_Send_PDU+0x22>
 802d51a:	4628      	mov	r0, r5
 802d51c:	f000 f838 	bl	802d590 <SMP_Reset_Timer>
 802d520:	4620      	mov	r0, r4
 802d522:	bd70      	pop	{r4, r5, r6, pc}

0802d524 <SMP_SR_Security_Req_TX_Complete_Handler>:
 802d524:	b510      	push	{r4, lr}
 802d526:	4604      	mov	r4, r0
 802d528:	f890 0020 	ldrb.w	r0, [r0, #32]
 802d52c:	f000 0103 	and.w	r1, r0, #3
 802d530:	2901      	cmp	r1, #1
 802d532:	d110      	bne.n	802d556 <SMP_SR_Security_Req_TX_Complete_Handler+0x32>
 802d534:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 802d538:	3002      	adds	r0, #2
 802d53a:	f884 0020 	strb.w	r0, [r4, #32]
 802d53e:	2000      	movs	r0, #0
 802d540:	f7f9 ff26 	bl	8027390 <EVT_aci_gap_peripheral_security_initiated>
 802d544:	7de0      	ldrb	r0, [r4, #23]
 802d546:	28f1      	cmp	r0, #241	@ 0xf1
 802d548:	d105      	bne.n	802d556 <SMP_SR_Security_Req_TX_Complete_Handler+0x32>
 802d54a:	f894 0020 	ldrb.w	r0, [r4, #32]
 802d54e:	f040 0004 	orr.w	r0, r0, #4
 802d552:	f884 0020 	strb.w	r0, [r4, #32]
 802d556:	bd10      	pop	{r4, pc}

0802d558 <SMP_MI_Start_Encryption>:
 802d558:	b510      	push	{r4, lr}
 802d55a:	f100 0134 	add.w	r1, r0, #52	@ 0x34
 802d55e:	4604      	mov	r4, r0
 802d560:	f000 f80e 	bl	802d580 <SMP_Crop_Key>
 802d564:	f894 0021 	ldrb.w	r0, [r4, #33]	@ 0x21
 802d568:	f040 0002 	orr.w	r0, r0, #2
 802d56c:	f884 0021 	strb.w	r0, [r4, #33]	@ 0x21
 802d570:	4620      	mov	r0, r4
 802d572:	f000 f80d 	bl	802d590 <SMP_Reset_Timer>
 802d576:	4620      	mov	r0, r4
 802d578:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802d57c:	f000 b81e 	b.w	802d5bc <SMP_MI_Set_Encryption>

0802d580 <SMP_Crop_Key>:
 802d580:	7f82      	ldrb	r2, [r0, #30]
 802d582:	1888      	adds	r0, r1, r2
 802d584:	f1c2 0110 	rsb	r1, r2, #16
 802d588:	b28a      	uxth	r2, r1
 802d58a:	2100      	movs	r1, #0
 802d58c:	f7f7 b82c 	b.w	80245e8 <ble_memset>

0802d590 <SMP_Reset_Timer>:
 802d590:	b510      	push	{r4, lr}
 802d592:	4909      	ldr	r1, [pc, #36]	@ (802d5b8 <__arm_cp.10_0>)
 802d594:	f8d1 10bc 	ldr.w	r1, [r1, #188]	@ 0xbc
 802d598:	1a40      	subs	r0, r0, r1
 802d59a:	f44f 6140 	mov.w	r1, #3072	@ 0xc00
 802d59e:	ea41 10d0 	orr.w	r0, r1, r0, lsr #7
 802d5a2:	b284      	uxth	r4, r0
 802d5a4:	4620      	mov	r0, r4
 802d5a6:	f7dc fa74 	bl	8009a92 <BLEPLAT_TimerStop>
 802d5aa:	4620      	mov	r0, r4
 802d5ac:	f247 5130 	movw	r1, #30000	@ 0x7530
 802d5b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802d5b4:	f7dc ba5d 	b.w	8009a72 <BLEPLAT_TimerStart>

0802d5b8 <__arm_cp.10_0>:
 802d5b8:	20009f5c 	.word	0x20009f5c

0802d5bc <SMP_MI_Set_Encryption>:
 802d5bc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 802d5be:	4604      	mov	r4, r0
 802d5c0:	20ac      	movs	r0, #172	@ 0xac
 802d5c2:	75e0      	strb	r0, [r4, #23]
 802d5c4:	f894 0021 	ldrb.w	r0, [r4, #33]	@ 0x21
 802d5c8:	0781      	lsls	r1, r0, #30
 802d5ca:	d40f      	bmi.n	802d5ec <SMP_MI_Set_Encryption+0x30>
 802d5cc:	f010 0f05 	tst.w	r0, #5
 802d5d0:	d036      	beq.n	802d640 <SMP_MI_Set_Encryption+0x84>
 802d5d2:	7fe0      	ldrb	r0, [r4, #31]
 802d5d4:	f104 0334 	add.w	r3, r4, #52	@ 0x34
 802d5d8:	f104 0146 	add.w	r1, r4, #70	@ 0x46
 802d5dc:	f104 0548 	add.w	r5, r4, #72	@ 0x48
 802d5e0:	0700      	lsls	r0, r0, #28
 802d5e2:	bf58      	it	pl
 802d5e4:	f104 0350 	addpl.w	r3, r4, #80	@ 0x50
 802d5e8:	26ae      	movs	r6, #174	@ 0xae
 802d5ea:	e009      	b.n	802d600 <SMP_MI_Set_Encryption+0x44>
 802d5ec:	466d      	mov	r5, sp
 802d5ee:	2100      	movs	r1, #0
 802d5f0:	2210      	movs	r2, #16
 802d5f2:	4628      	mov	r0, r5
 802d5f4:	f7f6 fff8 	bl	80245e8 <ble_memset>
 802d5f8:	f104 0334 	add.w	r3, r4, #52	@ 0x34
 802d5fc:	26ad      	movs	r6, #173	@ 0xad
 802d5fe:	4629      	mov	r1, r5
 802d600:	780a      	ldrb	r2, [r1, #0]
 802d602:	7849      	ldrb	r1, [r1, #1]
 802d604:	8820      	ldrh	r0, [r4, #0]
 802d606:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
 802d60a:	b28a      	uxth	r2, r1
 802d60c:	4629      	mov	r1, r5
 802d60e:	f7fa f9fc 	bl	8027a0a <hci_le_enable_encryption>
 802d612:	283a      	cmp	r0, #58	@ 0x3a
 802d614:	d00f      	beq.n	802d636 <SMP_MI_Set_Encryption+0x7a>
 802d616:	b9c0      	cbnz	r0, 802d64a <SMP_MI_Set_Encryption+0x8e>
 802d618:	f894 0021 	ldrb.w	r0, [r4, #33]	@ 0x21
 802d61c:	f010 0101 	ands.w	r1, r0, #1
 802d620:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 802d624:	bf18      	it	ne
 802d626:	f06f 060e 	mvnne.w	r6, #14
 802d62a:	75e6      	strb	r6, [r4, #23]
 802d62c:	ea40 1001 	orr.w	r0, r0, r1, lsl #4
 802d630:	f884 0021 	strb.w	r0, [r4, #33]	@ 0x21
 802d634:	e002      	b.n	802d63c <SMP_MI_Set_Encryption+0x80>
 802d636:	4806      	ldr	r0, [pc, #24]	@ (802d650 <__arm_cp.11_0>)
 802d638:	f001 f91b 	bl	802e872 <OUTLINED_FUNCTION_2>
 802d63c:	2000      	movs	r0, #0
 802d63e:	e004      	b.n	802d64a <SMP_MI_Set_Encryption+0x8e>
 802d640:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 802d644:	f884 0021 	strb.w	r0, [r4, #33]	@ 0x21
 802d648:	200c      	movs	r0, #12
 802d64a:	b004      	add	sp, #16
 802d64c:	bd70      	pop	{r4, r5, r6, pc}
 802d64e:	bf00      	nop

0802d650 <__arm_cp.11_0>:
 802d650:	20009f5c 	.word	0x20009f5c

0802d654 <SMP_Pairing_Process>:
 802d654:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 802d658:	b099      	sub	sp, #100	@ 0x64
 802d65a:	4604      	mov	r4, r0
 802d65c:	f890 0020 	ldrb.w	r0, [r0, #32]
 802d660:	06c0      	lsls	r0, r0, #27
 802d662:	d55a      	bpl.n	802d71a <SMP_Pairing_Process+0xc6>
 802d664:	f104 0534 	add.w	r5, r4, #52	@ 0x34
 802d668:	8826      	ldrh	r6, [r4, #0]
 802d66a:	a815      	add	r0, sp, #84	@ 0x54
 802d66c:	2210      	movs	r2, #16
 802d66e:	4629      	mov	r1, r5
 802d670:	f7f6 ff6a 	bl	8024548 <ble_memcpy>
 802d674:	7de0      	ldrb	r0, [r4, #23]
 802d676:	28bc      	cmp	r0, #188	@ 0xbc
 802d678:	d030      	beq.n	802d6dc <SMP_Pairing_Process+0x88>
 802d67a:	28f1      	cmp	r0, #241	@ 0xf1
 802d67c:	d113      	bne.n	802d6a6 <SMP_Pairing_Process+0x52>
 802d67e:	7fe0      	ldrb	r0, [r4, #31]
 802d680:	0700      	lsls	r0, r0, #28
 802d682:	d42b      	bmi.n	802d6dc <SMP_Pairing_Process+0x88>
 802d684:	f104 0844 	add.w	r8, r4, #68	@ 0x44
 802d688:	f10d 0904 	add.w	r9, sp, #4
 802d68c:	4629      	mov	r1, r5
 802d68e:	f104 073c 	add.w	r7, r4, #60	@ 0x3c
 802d692:	4640      	mov	r0, r8
 802d694:	464a      	mov	r2, r9
 802d696:	f7ff f873 	bl	802c780 <SMA_Compute_EDIV>
 802d69a:	4648      	mov	r0, r9
 802d69c:	4639      	mov	r1, r7
 802d69e:	2202      	movs	r2, #2
 802d6a0:	f7f6 ffda 	bl	8024658 <ble_memcmp>
 802d6a4:	b1b0      	cbz	r0, 802d6d4 <SMP_Pairing_Process+0x80>
 802d6a6:	f894 0020 	ldrb.w	r0, [r4, #32]
 802d6aa:	0780      	lsls	r0, r0, #30
 802d6ac:	d00e      	beq.n	802d6cc <SMP_Pairing_Process+0x78>
 802d6ae:	4620      	mov	r0, r4
 802d6b0:	f7ff fe64 	bl	802d37c <SMP_Stop_Timer>
 802d6b4:	f894 0020 	ldrb.w	r0, [r4, #32]
 802d6b8:	4631      	mov	r1, r6
 802d6ba:	2203      	movs	r2, #3
 802d6bc:	2306      	movs	r3, #6
 802d6be:	f000 00f0 	and.w	r0, r0, #240	@ 0xf0
 802d6c2:	f884 0020 	strb.w	r0, [r4, #32]
 802d6c6:	2001      	movs	r0, #1
 802d6c8:	f7f9 fe76 	bl	80273b8 <EVT_aci_gap_pairing_complete>
 802d6cc:	4630      	mov	r0, r6
 802d6ce:	f7fa f98d 	bl	80279ec <hci_le_long_term_key_request_negative_reply>
 802d6d2:	e011      	b.n	802d6f8 <SMP_Pairing_Process+0xa4>
 802d6d4:	4640      	mov	r0, r8
 802d6d6:	4629      	mov	r1, r5
 802d6d8:	f7ff f90e 	bl	802c8f8 <SMA_Generate_LTK>
 802d6dc:	af01      	add	r7, sp, #4
 802d6de:	4629      	mov	r1, r5
 802d6e0:	2210      	movs	r2, #16
 802d6e2:	4638      	mov	r0, r7
 802d6e4:	f7f6 ff30 	bl	8024548 <ble_memcpy>
 802d6e8:	4620      	mov	r0, r4
 802d6ea:	4639      	mov	r1, r7
 802d6ec:	f7ff ff48 	bl	802d580 <SMP_Crop_Key>
 802d6f0:	4630      	mov	r0, r6
 802d6f2:	4639      	mov	r1, r7
 802d6f4:	f7fa f982 	bl	80279fc <hci_le_long_term_key_request_reply>
 802d6f8:	283a      	cmp	r0, #58	@ 0x3a
 802d6fa:	d108      	bne.n	802d70e <SMP_Pairing_Process+0xba>
 802d6fc:	a915      	add	r1, sp, #84	@ 0x54
 802d6fe:	4628      	mov	r0, r5
 802d700:	f001 f8c7 	bl	802e892 <OUTLINED_FUNCTION_5>
 802d704:	f8df 03a8 	ldr.w	r0, [pc, #936]	@ 802dab0 <__arm_cp.12_0>
 802d708:	f001 f8b3 	bl	802e872 <OUTLINED_FUNCTION_2>
 802d70c:	e005      	b.n	802d71a <SMP_Pairing_Process+0xc6>
 802d70e:	f894 0020 	ldrb.w	r0, [r4, #32]
 802d712:	f000 00ef 	and.w	r0, r0, #239	@ 0xef
 802d716:	f884 0020 	strb.w	r0, [r4, #32]
 802d71a:	7de0      	ldrb	r0, [r4, #23]
 802d71c:	f1a0 01d1 	sub.w	r1, r0, #209	@ 0xd1
 802d720:	2905      	cmp	r1, #5
 802d722:	d335      	bcc.n	802d790 <SMP_Pairing_Process+0x13c>
 802d724:	2800      	cmp	r0, #0
 802d726:	f000 8127 	beq.w	802d978 <SMP_Pairing_Process+0x324>
 802d72a:	28fe      	cmp	r0, #254	@ 0xfe
 802d72c:	d068      	beq.n	802d800 <SMP_Pairing_Process+0x1ac>
 802d72e:	2880      	cmp	r0, #128	@ 0x80
 802d730:	d072      	beq.n	802d818 <SMP_Pairing_Process+0x1c4>
 802d732:	28ac      	cmp	r0, #172	@ 0xac
 802d734:	f000 8081 	beq.w	802d83a <SMP_Pairing_Process+0x1e6>
 802d738:	28cf      	cmp	r0, #207	@ 0xcf
 802d73a:	f000 8082 	beq.w	802d842 <SMP_Pairing_Process+0x1ee>
 802d73e:	28e0      	cmp	r0, #224	@ 0xe0
 802d740:	f000 8083 	beq.w	802d84a <SMP_Pairing_Process+0x1f6>
 802d744:	28f1      	cmp	r0, #241	@ 0xf1
 802d746:	f000 8117 	beq.w	802d978 <SMP_Pairing_Process+0x324>
 802d74a:	2810      	cmp	r0, #16
 802d74c:	f040 80c9 	bne.w	802d8e2 <SMP_Pairing_Process+0x28e>
 802d750:	78a1      	ldrb	r1, [r4, #2]
 802d752:	ae01      	add	r6, sp, #4
 802d754:	1ce0      	adds	r0, r4, #3
 802d756:	4632      	mov	r2, r6
 802d758:	f7fe fe81 	bl	802c45e <SDB_Read_Sec_Record>
 802d75c:	2800      	cmp	r0, #0
 802d75e:	f000 810e 	beq.w	802d97e <SMP_Pairing_Process+0x32a>
 802d762:	48d3      	ldr	r0, [pc, #844]	@ (802dab0 <__arm_cp.12_0>)
 802d764:	f890 0037 	ldrb.w	r0, [r0, #55]	@ 0x37
 802d768:	b180      	cbz	r0, 802d78c <SMP_Pairing_Process+0x138>
 802d76a:	7fe0      	ldrb	r0, [r4, #31]
 802d76c:	07c0      	lsls	r0, r0, #31
 802d76e:	d00d      	beq.n	802d78c <SMP_Pairing_Process+0x138>
 802d770:	f7fe fea8 	bl	802c4c4 <SDB_Get_Number_Of_Sec_Records>
 802d774:	b150      	cbz	r0, 802d78c <SMP_Pairing_Process+0x138>
 802d776:	78a0      	ldrb	r0, [r4, #2]
 802d778:	b140      	cbz	r0, 802d78c <SMP_Pairing_Process+0x138>
 802d77a:	7a20      	ldrb	r0, [r4, #8]
 802d77c:	f000 00c0 	and.w	r0, r0, #192	@ 0xc0
 802d780:	2840      	cmp	r0, #64	@ 0x40
 802d782:	d103      	bne.n	802d78c <SMP_Pairing_Process+0x138>
 802d784:	8821      	ldrh	r1, [r4, #0]
 802d786:	2001      	movs	r0, #1
 802d788:	f7f9 fdf6 	bl	8027378 <EVT_aci_gap_addr_not_resolved>
 802d78c:	2000      	movs	r0, #0
 802d78e:	e0a6      	b.n	802d8de <SMP_Pairing_Process+0x28a>
 802d790:	2000      	movs	r0, #0
 802d792:	2111      	movs	r1, #17
 802d794:	f8ad 0054 	strh.w	r0, [sp, #84]	@ 0x54
 802d798:	4620      	mov	r0, r4
 802d79a:	f7ff fea9 	bl	802d4f0 <SMP_New_PDU>
 802d79e:	2800      	cmp	r0, #0
 802d7a0:	f000 809e 	beq.w	802d8e0 <SMP_Pairing_Process+0x28c>
 802d7a4:	4605      	mov	r5, r0
 802d7a6:	f894 0020 	ldrb.w	r0, [r4, #32]
 802d7aa:	0640      	lsls	r0, r0, #25
 802d7ac:	d409      	bmi.n	802d7c2 <SMP_Pairing_Process+0x16e>
 802d7ae:	f001 fdad 	bl	802f30c <Rand32>
 802d7b2:	f8a4 0044 	strh.w	r0, [r4, #68]	@ 0x44
 802d7b6:	f894 0020 	ldrb.w	r0, [r4, #32]
 802d7ba:	f040 0040 	orr.w	r0, r0, #64	@ 0x40
 802d7be:	f884 0020 	strb.w	r0, [r4, #32]
 802d7c2:	7de0      	ldrb	r0, [r4, #23]
 802d7c4:	38d1      	subs	r0, #209	@ 0xd1
 802d7c6:	2804      	cmp	r0, #4
 802d7c8:	f200 8084 	bhi.w	802d8d4 <SMP_Pairing_Process+0x280>
 802d7cc:	e8df f000 	tbb	[pc, r0]
 802d7d0:	60594103 	.word	0x60594103
 802d7d4:	0071      	.short	0x0071
 802d7d6:	f104 012c 	add.w	r1, r4, #44	@ 0x2c
 802d7da:	2002      	movs	r0, #2
 802d7dc:	f7dc f8d7 	bl	800998e <BLEPLAT_RngGet>
 802d7e0:	ae01      	add	r6, sp, #4
 802d7e2:	f104 0044 	add.w	r0, r4, #68	@ 0x44
 802d7e6:	4631      	mov	r1, r6
 802d7e8:	f7ff f886 	bl	802c8f8 <SMA_Generate_LTK>
 802d7ec:	4620      	mov	r0, r4
 802d7ee:	4631      	mov	r1, r6
 802d7f0:	f7ff fec6 	bl	802d580 <SMP_Crop_Key>
 802d7f4:	6a28      	ldr	r0, [r5, #32]
 802d7f6:	2106      	movs	r1, #6
 802d7f8:	7101      	strb	r1, [r0, #4]
 802d7fa:	2015      	movs	r0, #21
 802d7fc:	80a8      	strh	r0, [r5, #4]
 802d7fe:	e063      	b.n	802d8c8 <SMP_Pairing_Process+0x274>
 802d800:	f994 0020 	ldrsb.w	r0, [r4, #32]
 802d804:	f1b0 3fff 	cmp.w	r0, #4294967295	@ 0xffffffff
 802d808:	f300 809a 	bgt.w	802d940 <SMP_Pairing_Process+0x2ec>
 802d80c:	4620      	mov	r0, r4
 802d80e:	2100      	movs	r1, #0
 802d810:	2280      	movs	r2, #128	@ 0x80
 802d812:	f7f6 fee9 	bl	80245e8 <ble_memset>
 802d816:	e063      	b.n	802d8e0 <SMP_Pairing_Process+0x28c>
 802d818:	7fe0      	ldrb	r0, [r4, #31]
 802d81a:	0700      	lsls	r0, r0, #28
 802d81c:	d504      	bpl.n	802d828 <SMP_Pairing_Process+0x1d4>
 802d81e:	4620      	mov	r0, r4
 802d820:	f001 f99a 	bl	802eb58 <SMP_SC_Public_Key_Exchanged>
 802d824:	2800      	cmp	r0, #0
 802d826:	d05b      	beq.n	802d8e0 <SMP_Pairing_Process+0x28c>
 802d828:	7e60      	ldrb	r0, [r4, #25]
 802d82a:	2802      	cmp	r0, #2
 802d82c:	d102      	bne.n	802d834 <SMP_Pairing_Process+0x1e0>
 802d82e:	7f60      	ldrb	r0, [r4, #29]
 802d830:	06c0      	lsls	r0, r0, #27
 802d832:	d555      	bpl.n	802d8e0 <SMP_Pairing_Process+0x28c>
 802d834:	2081      	movs	r0, #129	@ 0x81
 802d836:	75e0      	strb	r0, [r4, #23]
 802d838:	e055      	b.n	802d8e6 <SMP_Pairing_Process+0x292>
 802d83a:	4620      	mov	r0, r4
 802d83c:	f7ff febe 	bl	802d5bc <SMP_MI_Set_Encryption>
 802d840:	e04e      	b.n	802d8e0 <SMP_Pairing_Process+0x28c>
 802d842:	4620      	mov	r0, r4
 802d844:	f000 f938 	bl	802dab8 <SMP_Key_Dist_Start>
 802d848:	e04a      	b.n	802d8e0 <SMP_Pairing_Process+0x28c>
 802d84a:	4620      	mov	r0, r4
 802d84c:	f000 f966 	bl	802db1c <SMP_Pairing_Complete>
 802d850:	e046      	b.n	802d8e0 <SMP_Pairing_Process+0x28c>
 802d852:	200f      	movs	r0, #15
 802d854:	2107      	movs	r1, #7
 802d856:	f104 062c 	add.w	r6, r4, #44	@ 0x2c
 802d85a:	80a8      	strh	r0, [r5, #4]
 802d85c:	6a28      	ldr	r0, [r5, #32]
 802d85e:	7101      	strb	r1, [r0, #4]
 802d860:	af15      	add	r7, sp, #84	@ 0x54
 802d862:	f104 0044 	add.w	r0, r4, #68	@ 0x44
 802d866:	4631      	mov	r1, r6
 802d868:	463a      	mov	r2, r7
 802d86a:	f7fe ff89 	bl	802c780 <SMA_Compute_EDIV>
 802d86e:	4628      	mov	r0, r5
 802d870:	2105      	movs	r1, #5
 802d872:	2202      	movs	r2, #2
 802d874:	463b      	mov	r3, r7
 802d876:	f7fe fd14 	bl	802c2a2 <ACL_Set_Data>
 802d87a:	4628      	mov	r0, r5
 802d87c:	2107      	movs	r1, #7
 802d87e:	2208      	movs	r2, #8
 802d880:	e025      	b.n	802d8ce <SMP_Pairing_Process+0x27a>
 802d882:	ae01      	add	r6, sp, #4
 802d884:	4630      	mov	r0, r6
 802d886:	f7ff f857 	bl	802c938 <SMA_Generate_IRK>
 802d88a:	2015      	movs	r0, #21
 802d88c:	2108      	movs	r1, #8
 802d88e:	e018      	b.n	802d8c2 <SMP_Pairing_Process+0x26e>
 802d890:	200c      	movs	r0, #12
 802d892:	4b87      	ldr	r3, [pc, #540]	@ (802dab0 <__arm_cp.12_0>)
 802d894:	6a29      	ldr	r1, [r5, #32]
 802d896:	2209      	movs	r2, #9
 802d898:	80a8      	strh	r0, [r5, #4]
 802d89a:	f893 0036 	ldrb.w	r0, [r3, #54]	@ 0x36
 802d89e:	710a      	strb	r2, [r1, #4]
 802d8a0:	6a29      	ldr	r1, [r5, #32]
 802d8a2:	2800      	cmp	r0, #0
 802d8a4:	7148      	strb	r0, [r1, #5]
 802d8a6:	bf18      	it	ne
 802d8a8:	332e      	addne	r3, #46	@ 0x2e
 802d8aa:	4628      	mov	r0, r5
 802d8ac:	2106      	movs	r1, #6
 802d8ae:	2206      	movs	r2, #6
 802d8b0:	e00e      	b.n	802d8d0 <SMP_Pairing_Process+0x27c>
 802d8b2:	ae01      	add	r6, sp, #4
 802d8b4:	f104 0044 	add.w	r0, r4, #68	@ 0x44
 802d8b8:	4631      	mov	r1, r6
 802d8ba:	f7ff f82d 	bl	802c918 <SMA_Generate_CSRK>
 802d8be:	2015      	movs	r0, #21
 802d8c0:	210a      	movs	r1, #10
 802d8c2:	80a8      	strh	r0, [r5, #4]
 802d8c4:	6a28      	ldr	r0, [r5, #32]
 802d8c6:	7101      	strb	r1, [r0, #4]
 802d8c8:	4628      	mov	r0, r5
 802d8ca:	2105      	movs	r1, #5
 802d8cc:	2210      	movs	r2, #16
 802d8ce:	4633      	mov	r3, r6
 802d8d0:	f7fe fce7 	bl	802c2a2 <ACL_Set_Data>
 802d8d4:	4628      	mov	r0, r5
 802d8d6:	f000 ffd3 	bl	802e880 <OUTLINED_FUNCTION_3>
 802d8da:	b908      	cbnz	r0, 802d8e0 <SMP_Pairing_Process+0x28c>
 802d8dc:	20dd      	movs	r0, #221	@ 0xdd
 802d8de:	75e0      	strb	r0, [r4, #23]
 802d8e0:	7de0      	ldrb	r0, [r4, #23]
 802d8e2:	2881      	cmp	r0, #129	@ 0x81
 802d8e4:	d12c      	bne.n	802d940 <SMP_Pairing_Process+0x2ec>
 802d8e6:	7fe0      	ldrb	r0, [r4, #31]
 802d8e8:	07c0      	lsls	r0, r0, #31
 802d8ea:	d10b      	bne.n	802d904 <SMP_Pairing_Process+0x2b0>
 802d8ec:	f104 0160 	add.w	r1, r4, #96	@ 0x60
 802d8f0:	2004      	movs	r0, #4
 802d8f2:	f7dc f84c 	bl	800998e <BLEPLAT_RngGet>
 802d8f6:	7fe0      	ldrb	r0, [r4, #31]
 802d8f8:	0700      	lsls	r0, r0, #28
 802d8fa:	d417      	bmi.n	802d92c <SMP_Pairing_Process+0x2d8>
 802d8fc:	4620      	mov	r0, r4
 802d8fe:	f000 fda9 	bl	802e454 <SMP_MI_Send_Pairing_Confirm>
 802d902:	e01d      	b.n	802d940 <SMP_Pairing_Process+0x2ec>
 802d904:	f104 0170 	add.w	r1, r4, #112	@ 0x70
 802d908:	2004      	movs	r0, #4
 802d90a:	f7dc f840 	bl	800998e <BLEPLAT_RngGet>
 802d90e:	7fe0      	ldrb	r0, [r4, #31]
 802d910:	0700      	lsls	r0, r0, #28
 802d912:	d513      	bpl.n	802d93c <SMP_Pairing_Process+0x2e8>
 802d914:	7e60      	ldrb	r0, [r4, #25]
 802d916:	3801      	subs	r0, #1
 802d918:	2803      	cmp	r0, #3
 802d91a:	d811      	bhi.n	802d940 <SMP_Pairing_Process+0x2ec>
 802d91c:	e8df f000 	tbb	[pc, r0]
 802d920:	02aba202 	.word	0x02aba202
 802d924:	4620      	mov	r0, r4
 802d926:	f000 fe4f 	bl	802e5c8 <SMP_SR_Send_Pairing_Confirm>
 802d92a:	e009      	b.n	802d940 <SMP_Pairing_Process+0x2ec>
 802d92c:	7e60      	ldrb	r0, [r4, #25]
 802d92e:	3801      	subs	r0, #1
 802d930:	2803      	cmp	r0, #3
 802d932:	d805      	bhi.n	802d940 <SMP_Pairing_Process+0x2ec>
 802d934:	e8df f000 	tbb	[pc, r0]
 802d938:	02aca502 	.word	0x02aca502
 802d93c:	2082      	movs	r0, #130	@ 0x82
 802d93e:	75e0      	strb	r0, [r4, #23]
 802d940:	7fe0      	ldrb	r0, [r4, #31]
 802d942:	0700      	lsls	r0, r0, #28
 802d944:	d518      	bpl.n	802d978 <SMP_Pairing_Process+0x324>
 802d946:	7de0      	ldrb	r0, [r4, #23]
 802d948:	2890      	cmp	r0, #144	@ 0x90
 802d94a:	d10d      	bne.n	802d968 <SMP_Pairing_Process+0x314>
 802d94c:	7f60      	ldrb	r0, [r4, #29]
 802d94e:	0641      	lsls	r1, r0, #25
 802d950:	d40d      	bmi.n	802d96e <SMP_Pairing_Process+0x31a>
 802d952:	b240      	sxtb	r0, r0
 802d954:	f1b0 3fff 	cmp.w	r0, #4294967295	@ 0xffffffff
 802d958:	dc0e      	bgt.n	802d978 <SMP_Pairing_Process+0x324>
 802d95a:	4620      	mov	r0, r4
 802d95c:	210c      	movs	r1, #12
 802d95e:	2200      	movs	r2, #0
 802d960:	2301      	movs	r3, #1
 802d962:	f000 f99a 	bl	802dc9a <SMP_Send_Pairing_Failed>
 802d966:	7de0      	ldrb	r0, [r4, #23]
 802d968:	2891      	cmp	r0, #145	@ 0x91
 802d96a:	d002      	beq.n	802d972 <SMP_Pairing_Process+0x31e>
 802d96c:	e004      	b.n	802d978 <SMP_Pairing_Process+0x324>
 802d96e:	2091      	movs	r0, #145	@ 0x91
 802d970:	75e0      	strb	r0, [r4, #23]
 802d972:	4620      	mov	r0, r4
 802d974:	f001 faa0 	bl	802eeb8 <SMP_SC_Start_Authentication_Stage_2>
 802d978:	b019      	add	sp, #100	@ 0x64
 802d97a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802d97e:	2001      	movs	r0, #1
 802d980:	f89d 1007 	ldrb.w	r1, [sp, #7]
 802d984:	f894 2022 	ldrb.w	r2, [r4, #34]	@ 0x22
 802d988:	7720      	strb	r0, [r4, #28]
 802d98a:	f89d 0005 	ldrb.w	r0, [sp, #5]
 802d98e:	77a1      	strb	r1, [r4, #30]
 802d990:	b241      	sxtb	r1, r0
 802d992:	2900      	cmp	r1, #0
 802d994:	f000 0160 	and.w	r1, r0, #96	@ 0x60
 802d998:	bf48      	it	mi
 802d99a:	f042 0210 	orrmi.w	r2, r2, #16
 802d99e:	4311      	orrs	r1, r2
 802d9a0:	06c0      	lsls	r0, r0, #27
 802d9a2:	f884 1022 	strb.w	r1, [r4, #34]	@ 0x22
 802d9a6:	d505      	bpl.n	802d9b4 <SMP_Pairing_Process+0x360>
 802d9a8:	f894 0023 	ldrb.w	r0, [r4, #35]	@ 0x23
 802d9ac:	f040 0001 	orr.w	r0, r0, #1
 802d9b0:	f884 0023 	strb.w	r0, [r4, #35]	@ 0x23
 802d9b4:	e9dd 0113 	ldrd	r0, r1, [sp, #76]	@ 0x4c
 802d9b8:	f106 050e 	add.w	r5, r6, #14
 802d9bc:	4f3d      	ldr	r7, [pc, #244]	@ (802dab4 <__arm_cp.12_1>)
 802d9be:	2210      	movs	r2, #16
 802d9c0:	e9c4 0109 	strd	r0, r1, [r4, #36]	@ 0x24
 802d9c4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 802d9c8:	4629      	mov	r1, r5
 802d9ca:	47b8      	blx	r7
 802d9cc:	f104 0060 	add.w	r0, r4, #96	@ 0x60
 802d9d0:	f106 011e 	add.w	r1, r6, #30
 802d9d4:	2210      	movs	r2, #16
 802d9d6:	47b8      	blx	r7
 802d9d8:	f104 0070 	add.w	r0, r4, #112	@ 0x70
 802d9dc:	f106 012e 	add.w	r1, r6, #46	@ 0x2e
 802d9e0:	2210      	movs	r2, #16
 802d9e2:	47b8      	blx	r7
 802d9e4:	f104 0044 	add.w	r0, r4, #68	@ 0x44
 802d9e8:	f106 0144 	add.w	r1, r6, #68	@ 0x44
 802d9ec:	2202      	movs	r2, #2
 802d9ee:	47b8      	blx	r7
 802d9f0:	f104 0048 	add.w	r0, r4, #72	@ 0x48
 802d9f4:	1db1      	adds	r1, r6, #6
 802d9f6:	2208      	movs	r2, #8
 802d9f8:	47b8      	blx	r7
 802d9fa:	f104 0046 	add.w	r0, r4, #70	@ 0x46
 802d9fe:	1d31      	adds	r1, r6, #4
 802da00:	2202      	movs	r2, #2
 802da02:	47b8      	blx	r7
 802da04:	f89d 0005 	ldrb.w	r0, [sp, #5]
 802da08:	0781      	lsls	r1, r0, #30
 802da0a:	bf42      	ittt	mi
 802da0c:	7e21      	ldrbmi	r1, [r4, #24]
 802da0e:	f041 0120 	orrmi.w	r1, r1, #32
 802da12:	7621      	strbmi	r1, [r4, #24]
 802da14:	0741      	lsls	r1, r0, #29
 802da16:	bf42      	ittt	mi
 802da18:	7e21      	ldrbmi	r1, [r4, #24]
 802da1a:	f041 0140 	orrmi.w	r1, r1, #64	@ 0x40
 802da1e:	7621      	strbmi	r1, [r4, #24]
 802da20:	0700      	lsls	r0, r0, #28
 802da22:	bf42      	ittt	mi
 802da24:	7e20      	ldrbmi	r0, [r4, #24]
 802da26:	f040 0080 	orrmi.w	r0, r0, #128	@ 0x80
 802da2a:	7620      	strbmi	r0, [r4, #24]
 802da2c:	f89d 0006 	ldrb.w	r0, [sp, #6]
 802da30:	0701      	lsls	r1, r0, #28
 802da32:	d50a      	bpl.n	802da4a <SMP_Pairing_Process+0x3f6>
 802da34:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 802da38:	7fe1      	ldrb	r1, [r4, #31]
 802da3a:	2210      	movs	r2, #16
 802da3c:	4308      	orrs	r0, r1
 802da3e:	4629      	mov	r1, r5
 802da40:	77e0      	strb	r0, [r4, #31]
 802da42:	f104 0034 	add.w	r0, r4, #52	@ 0x34
 802da46:	f7f6 fd7f 	bl	8024548 <ble_memcpy>
 802da4a:	20f1      	movs	r0, #241	@ 0xf1
 802da4c:	75e0      	strb	r0, [r4, #23]
 802da4e:	f994 0018 	ldrsb.w	r0, [r4, #24]
 802da52:	f1b0 3fff 	cmp.w	r0, #4294967295	@ 0xffffffff
 802da56:	f73f af43 	bgt.w	802d8e0 <SMP_Pairing_Process+0x28c>
 802da5a:	8821      	ldrh	r1, [r4, #0]
 802da5c:	2001      	movs	r0, #1
 802da5e:	f7f9 fcb9 	bl	80273d4 <EVT_aci_gap_authorization_req>
 802da62:	e73d      	b.n	802d8e0 <SMP_Pairing_Process+0x28c>
 802da64:	2082      	movs	r0, #130	@ 0x82
 802da66:	75e0      	strb	r0, [r4, #23]
 802da68:	4811      	ldr	r0, [pc, #68]	@ (802dab0 <__arm_cp.12_0>)
 802da6a:	f890 11a0 	ldrb.w	r1, [r0, #416]	@ 0x1a0
 802da6e:	3101      	adds	r1, #1
 802da70:	f880 11a0 	strb.w	r1, [r0, #416]	@ 0x1a0
 802da74:	e764      	b.n	802d940 <SMP_Pairing_Process+0x2ec>
 802da76:	4620      	mov	r0, r4
 802da78:	f7ff fc42 	bl	802d300 <SMP_OOB_SC_Authentication_Stage_1>
 802da7c:	b960      	cbnz	r0, 802da98 <SMP_Pairing_Process+0x444>
 802da7e:	2083      	movs	r0, #131	@ 0x83
 802da80:	e75d      	b.n	802d93e <SMP_Pairing_Process+0x2ea>
 802da82:	480b      	ldr	r0, [pc, #44]	@ (802dab0 <__arm_cp.12_0>)
 802da84:	f890 11a0 	ldrb.w	r1, [r0, #416]	@ 0x1a0
 802da88:	3101      	adds	r1, #1
 802da8a:	f880 11a0 	strb.w	r1, [r0, #416]	@ 0x1a0
 802da8e:	e735      	b.n	802d8fc <SMP_Pairing_Process+0x2a8>
 802da90:	4620      	mov	r0, r4
 802da92:	f7ff fc35 	bl	802d300 <SMP_OOB_SC_Authentication_Stage_1>
 802da96:	b130      	cbz	r0, 802daa6 <SMP_Pairing_Process+0x452>
 802da98:	4601      	mov	r1, r0
 802da9a:	4620      	mov	r0, r4
 802da9c:	2200      	movs	r2, #0
 802da9e:	2301      	movs	r3, #1
 802daa0:	f000 f8fb 	bl	802dc9a <SMP_Send_Pairing_Failed>
 802daa4:	e74c      	b.n	802d940 <SMP_Pairing_Process+0x2ec>
 802daa6:	4620      	mov	r0, r4
 802daa8:	f000 fcf7 	bl	802e49a <SMP_MI_Send_Pairing_Random>
 802daac:	e748      	b.n	802d940 <SMP_Pairing_Process+0x2ec>
 802daae:	bf00      	nop

0802dab0 <__arm_cp.12_0>:
 802dab0:	20009f5c 	.word	0x20009f5c

0802dab4 <__arm_cp.12_1>:
 802dab4:	08024549 	.word	0x08024549

0802dab8 <SMP_Key_Dist_Start>:
 802dab8:	b570      	push	{r4, r5, r6, lr}
 802daba:	7fc6      	ldrb	r6, [r0, #31]
 802dabc:	4604      	mov	r4, r0
 802dabe:	f016 0501 	ands.w	r5, r6, #1
 802dac2:	bf04      	itt	eq
 802dac4:	7de0      	ldrbeq	r0, [r4, #23]
 802dac6:	28cf      	cmpeq	r0, #207	@ 0xcf
 802dac8:	d01e      	beq.n	802db08 <SMP_Key_Dist_Start+0x50>
 802daca:	f894 0023 	ldrb.w	r0, [r4, #35]	@ 0x23
 802dace:	0731      	lsls	r1, r6, #28
 802dad0:	d401      	bmi.n	802dad6 <SMP_Key_Dist_Start+0x1e>
 802dad2:	07c1      	lsls	r1, r0, #31
 802dad4:	d112      	bne.n	802dafc <SMP_Key_Dist_Start+0x44>
 802dad6:	0781      	lsls	r1, r0, #30
 802dad8:	d40e      	bmi.n	802daf8 <SMP_Key_Dist_Start+0x40>
 802dada:	f010 0004 	ands.w	r0, r0, #4
 802dade:	f06f 001f 	mvn.w	r0, #31
 802dae2:	bf18      	it	ne
 802dae4:	f06f 002a 	mvnne.w	r0, #42	@ 0x2a
 802dae8:	d109      	bne.n	802dafe <SMP_Key_Dist_Start+0x46>
 802daea:	b145      	cbz	r5, 802dafe <SMP_Key_Dist_Start+0x46>
 802daec:	4620      	mov	r0, r4
 802daee:	f000 fc34 	bl	802e35a <SMP_Key_Dist_Peer_Keys_To_receive>
 802daf2:	b970      	cbnz	r0, 802db12 <SMP_Key_Dist_Start+0x5a>
 802daf4:	20e0      	movs	r0, #224	@ 0xe0
 802daf6:	e002      	b.n	802dafe <SMP_Key_Dist_Start+0x46>
 802daf8:	20d3      	movs	r0, #211	@ 0xd3
 802dafa:	e000      	b.n	802dafe <SMP_Key_Dist_Start+0x46>
 802dafc:	20d1      	movs	r0, #209	@ 0xd1
 802dafe:	75e0      	strb	r0, [r4, #23]
 802db00:	4805      	ldr	r0, [pc, #20]	@ (802db18 <__arm_cp.13_0>)
 802db02:	f000 feb6 	bl	802e872 <OUTLINED_FUNCTION_2>
 802db06:	bd70      	pop	{r4, r5, r6, pc}
 802db08:	4620      	mov	r0, r4
 802db0a:	f000 fc26 	bl	802e35a <SMP_Key_Dist_Peer_Keys_To_receive>
 802db0e:	2800      	cmp	r0, #0
 802db10:	d0db      	beq.n	802daca <SMP_Key_Dist_Start+0x12>
 802db12:	20d0      	movs	r0, #208	@ 0xd0
 802db14:	75e0      	strb	r0, [r4, #23]
 802db16:	bd70      	pop	{r4, r5, r6, pc}

0802db18 <__arm_cp.13_0>:
 802db18:	20009f5c 	.word	0x20009f5c

0802db1c <SMP_Pairing_Complete>:
 802db1c:	b5b0      	push	{r4, r5, r7, lr}
 802db1e:	b094      	sub	sp, #80	@ 0x50
 802db20:	4604      	mov	r4, r0
 802db22:	f7ff fc2b 	bl	802d37c <SMP_Stop_Timer>
 802db26:	7f20      	ldrb	r0, [r4, #28]
 802db28:	07c1      	lsls	r1, r0, #31
 802db2a:	f000 8091 	beq.w	802dc50 <SMP_Pairing_Complete+0x134>
 802db2e:	0780      	lsls	r0, r0, #30
 802db30:	f140 808e 	bpl.w	802dc50 <SMP_Pairing_Complete+0x134>
 802db34:	466d      	mov	r5, sp
 802db36:	2100      	movs	r1, #0
 802db38:	2250      	movs	r2, #80	@ 0x50
 802db3a:	4628      	mov	r0, r5
 802db3c:	f7f6 fd54 	bl	80245e8 <ble_memset>
 802db40:	20fe      	movs	r0, #254	@ 0xfe
 802db42:	f104 0111 	add.w	r1, r4, #17
 802db46:	2206      	movs	r2, #6
 802db48:	f88d 0000 	strb.w	r0, [sp]
 802db4c:	7fa0      	ldrb	r0, [r4, #30]
 802db4e:	f88d 0003 	strb.w	r0, [sp, #3]
 802db52:	f105 003e 	add.w	r0, r5, #62	@ 0x3e
 802db56:	f7f6 fcf7 	bl	8024548 <ble_memcpy>
 802db5a:	f89d 2001 	ldrb.w	r2, [sp, #1]
 802db5e:	7c20      	ldrb	r0, [r4, #16]
 802db60:	f894 1022 	ldrb.w	r1, [r4, #34]	@ 0x22
 802db64:	4310      	orrs	r0, r2
 802db66:	f88d 0001 	strb.w	r0, [sp, #1]
 802db6a:	06c8      	lsls	r0, r1, #27
 802db6c:	d515      	bpl.n	802db9a <SMP_Pairing_Complete+0x7e>
 802db6e:	f8b4 0046 	ldrh.w	r0, [r4, #70]	@ 0x46
 802db72:	f104 0148 	add.w	r1, r4, #72	@ 0x48
 802db76:	2208      	movs	r2, #8
 802db78:	f8ad 0004 	strh.w	r0, [sp, #4]
 802db7c:	1da8      	adds	r0, r5, #6
 802db7e:	f7f6 fce3 	bl	8024548 <ble_memcpy>
 802db82:	f105 000e 	add.w	r0, r5, #14
 802db86:	f104 0150 	add.w	r1, r4, #80	@ 0x50
 802db8a:	f000 fe82 	bl	802e892 <OUTLINED_FUNCTION_5>
 802db8e:	f89d 0001 	ldrb.w	r0, [sp, #1]
 802db92:	f040 0080 	orr.w	r0, r0, #128	@ 0x80
 802db96:	f88d 0001 	strb.w	r0, [sp, #1]
 802db9a:	7fe0      	ldrb	r0, [r4, #31]
 802db9c:	0701      	lsls	r1, r0, #28
 802db9e:	d507      	bpl.n	802dbb0 <SMP_Pairing_Complete+0x94>
 802dba0:	f88d 0002 	strb.w	r0, [sp, #2]
 802dba4:	f105 000e 	add.w	r0, r5, #14
 802dba8:	f104 0134 	add.w	r1, r4, #52	@ 0x34
 802dbac:	f000 fe71 	bl	802e892 <OUTLINED_FUNCTION_5>
 802dbb0:	f894 0023 	ldrb.w	r0, [r4, #35]	@ 0x23
 802dbb4:	f010 0f05 	tst.w	r0, #5
 802dbb8:	d00c      	beq.n	802dbd4 <SMP_Pairing_Complete+0xb8>
 802dbba:	f105 0044 	add.w	r0, r5, #68	@ 0x44
 802dbbe:	f104 0144 	add.w	r1, r4, #68	@ 0x44
 802dbc2:	2202      	movs	r2, #2
 802dbc4:	f7f6 fcc0 	bl	8024548 <ble_memcpy>
 802dbc8:	f89d 0001 	ldrb.w	r0, [sp, #1]
 802dbcc:	f040 0010 	orr.w	r0, r0, #16
 802dbd0:	f88d 0001 	strb.w	r0, [sp, #1]
 802dbd4:	f894 0022 	ldrb.w	r0, [r4, #34]	@ 0x22
 802dbd8:	0681      	lsls	r1, r0, #26
 802dbda:	d50d      	bpl.n	802dbf8 <SMP_Pairing_Complete+0xdc>
 802dbdc:	f105 001e 	add.w	r0, r5, #30
 802dbe0:	f104 0160 	add.w	r1, r4, #96	@ 0x60
 802dbe4:	f000 fe55 	bl	802e892 <OUTLINED_FUNCTION_5>
 802dbe8:	f89d 0001 	ldrb.w	r0, [sp, #1]
 802dbec:	f040 0020 	orr.w	r0, r0, #32
 802dbf0:	f88d 0001 	strb.w	r0, [sp, #1]
 802dbf4:	f894 0022 	ldrb.w	r0, [r4, #34]	@ 0x22
 802dbf8:	0640      	lsls	r0, r0, #25
 802dbfa:	d50b      	bpl.n	802dc14 <SMP_Pairing_Complete+0xf8>
 802dbfc:	f105 002e 	add.w	r0, r5, #46	@ 0x2e
 802dc00:	f104 0170 	add.w	r1, r4, #112	@ 0x70
 802dc04:	f000 fe45 	bl	802e892 <OUTLINED_FUNCTION_5>
 802dc08:	f89d 0001 	ldrb.w	r0, [sp, #1]
 802dc0c:	f040 0040 	orr.w	r0, r0, #64	@ 0x40
 802dc10:	f88d 0001 	strb.w	r0, [sp, #1]
 802dc14:	7e21      	ldrb	r1, [r4, #24]
 802dc16:	b248      	sxtb	r0, r1
 802dc18:	068a      	lsls	r2, r1, #26
 802dc1a:	d403      	bmi.n	802dc24 <SMP_Pairing_Complete+0x108>
 802dc1c:	0649      	lsls	r1, r1, #25
 802dc1e:	d507      	bpl.n	802dc30 <SMP_Pairing_Complete+0x114>
 802dc20:	2104      	movs	r1, #4
 802dc22:	e000      	b.n	802dc26 <SMP_Pairing_Complete+0x10a>
 802dc24:	2102      	movs	r1, #2
 802dc26:	f89d 2001 	ldrb.w	r2, [sp, #1]
 802dc2a:	4311      	orrs	r1, r2
 802dc2c:	f88d 1001 	strb.w	r1, [sp, #1]
 802dc30:	f1b0 3fff 	cmp.w	r0, #4294967295	@ 0xffffffff
 802dc34:	dc05      	bgt.n	802dc42 <SMP_Pairing_Complete+0x126>
 802dc36:	f89d 0001 	ldrb.w	r0, [sp, #1]
 802dc3a:	f040 0008 	orr.w	r0, r0, #8
 802dc3e:	f88d 0001 	strb.w	r0, [sp, #1]
 802dc42:	e9d4 0109 	ldrd	r0, r1, [r4, #36]	@ 0x24
 802dc46:	e9cd 0112 	strd	r0, r1, [sp, #72]	@ 0x48
 802dc4a:	4668      	mov	r0, sp
 802dc4c:	f7fe fc71 	bl	802c532 <SDB_Write_Sec_Record>
 802dc50:	7e60      	ldrb	r0, [r4, #25]
 802dc52:	2803      	cmp	r0, #3
 802dc54:	bf08      	it	eq
 802dc56:	f7ff fb35 	bleq	802d2c4 <SMP_Clear_Remote_OOB_Data>
 802dc5a:	f894 0020 	ldrb.w	r0, [r4, #32]
 802dc5e:	2100      	movs	r1, #0
 802dc60:	f000 0040 	and.w	r0, r0, #64	@ 0x40
 802dc64:	f884 0020 	strb.w	r0, [r4, #32]
 802dc68:	4620      	mov	r0, r4
 802dc6a:	f000 fb85 	bl	802e378 <SMP_Update_Stats_On_Pairing_End>
 802dc6e:	20f1      	movs	r0, #241	@ 0xf1
 802dc70:	8821      	ldrh	r1, [r4, #0]
 802dc72:	2200      	movs	r2, #0
 802dc74:	2300      	movs	r3, #0
 802dc76:	75e0      	strb	r0, [r4, #23]
 802dc78:	2001      	movs	r0, #1
 802dc7a:	f7f9 fb9d 	bl	80273b8 <EVT_aci_gap_pairing_complete>
 802dc7e:	f994 0018 	ldrsb.w	r0, [r4, #24]
 802dc82:	f1b0 3fff 	cmp.w	r0, #4294967295	@ 0xffffffff
 802dc86:	dc03      	bgt.n	802dc90 <SMP_Pairing_Complete+0x174>
 802dc88:	8821      	ldrh	r1, [r4, #0]
 802dc8a:	2001      	movs	r0, #1
 802dc8c:	f7f9 fba2 	bl	80273d4 <EVT_aci_gap_authorization_req>
 802dc90:	1ce0      	adds	r0, r4, #3
 802dc92:	f000 fedd 	bl	802ea50 <SMP_Clear_Rep_Attempts_Timeout_Status>
 802dc96:	b014      	add	sp, #80	@ 0x50
 802dc98:	bdb0      	pop	{r4, r5, r7, pc}

0802dc9a <SMP_Send_Pairing_Failed>:
 802dc9a:	b570      	push	{r4, r5, r6, lr}
 802dc9c:	461e      	mov	r6, r3
 802dc9e:	460c      	mov	r4, r1
 802dca0:	4605      	mov	r5, r0
 802dca2:	b92a      	cbnz	r2, 802dcb0 <SMP_Send_Pairing_Failed+0x16>
 802dca4:	4628      	mov	r0, r5
 802dca6:	2102      	movs	r1, #2
 802dca8:	f7ff fc22 	bl	802d4f0 <SMP_New_PDU>
 802dcac:	4602      	mov	r2, r0
 802dcae:	b198      	cbz	r0, 802dcd8 <SMP_Send_Pairing_Failed+0x3e>
 802dcb0:	2006      	movs	r0, #6
 802dcb2:	2105      	movs	r1, #5
 802dcb4:	8090      	strh	r0, [r2, #4]
 802dcb6:	6a10      	ldr	r0, [r2, #32]
 802dcb8:	7101      	strb	r1, [r0, #4]
 802dcba:	2100      	movs	r1, #0
 802dcbc:	6a10      	ldr	r0, [r2, #32]
 802dcbe:	7144      	strb	r4, [r0, #5]
 802dcc0:	4610      	mov	r0, r2
 802dcc2:	f7ff fc1c 	bl	802d4fe <SMP_Send_PDU>
 802dcc6:	b90e      	cbnz	r6, 802dccc <SMP_Send_Pairing_Failed+0x32>
 802dcc8:	b100      	cbz	r0, 802dccc <SMP_Send_Pairing_Failed+0x32>
 802dcca:	bd70      	pop	{r4, r5, r6, pc}
 802dccc:	4628      	mov	r0, r5
 802dcce:	4621      	mov	r1, r4
 802dcd0:	f000 fb66 	bl	802e3a0 <SMP_Pairing_Abort>
 802dcd4:	2000      	movs	r0, #0
 802dcd6:	bd70      	pop	{r4, r5, r6, pc}
 802dcd8:	2064      	movs	r0, #100	@ 0x64
 802dcda:	e7f4      	b.n	802dcc6 <SMP_Send_Pairing_Failed+0x2c>

0802dcdc <SMP_Process_Rx_Packet>:
 802dcdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802dce0:	b087      	sub	sp, #28
 802dce2:	460c      	mov	r4, r1
 802dce4:	6a06      	ldr	r6, [r0, #32]
 802dce6:	4605      	mov	r5, r0
 802dce8:	7fe7      	ldrb	r7, [r4, #31]
 802dcea:	7931      	ldrb	r1, [r6, #4]
 802dcec:	07f8      	lsls	r0, r7, #31
 802dcee:	d13d      	bne.n	802dd6c <SMP_Process_Rx_Packet+0x90>
 802dcf0:	1e88      	subs	r0, r1, #2
 802dcf2:	2809      	cmp	r0, #9
 802dcf4:	f200 807d 	bhi.w	802ddf2 <SMP_Process_Rx_Packet+0x116>
 802dcf8:	e8df f010 	tbh	[pc, r0, lsl #1]
 802dcfc:	00d6000a 	.word	0x00d6000a
 802dd00:	007b00dd 	.word	0x007b00dd
 802dd04:	007b007b 	.word	0x007b007b
 802dd08:	007b007b 	.word	0x007b007b
 802dd0c:	00f2007b 	.word	0x00f2007b
 802dd10:	7de0      	ldrb	r0, [r4, #23]
 802dd12:	2820      	cmp	r0, #32
 802dd14:	f040 827f 	bne.w	802e216 <SMP_Process_Rx_Packet+0x53a>
 802dd18:	4628      	mov	r0, r5
 802dd1a:	f000 fcdd 	bl	802e6d8 <SMP_Check_Rx_Pairing_Parameters>
 802dd1e:	4601      	mov	r1, r0
 802dd20:	2800      	cmp	r0, #0
 802dd22:	f040 81e9 	bne.w	802e0f8 <SMP_Process_Rx_Packet+0x41c>
 802dd26:	0738      	lsls	r0, r7, #28
 802dd28:	f100 81c9 	bmi.w	802e0be <SMP_Process_Rx_Packet+0x3e2>
 802dd2c:	2681      	movs	r6, #129	@ 0x81
 802dd2e:	7f20      	ldrb	r0, [r4, #28]
 802dd30:	7f61      	ldrb	r1, [r4, #29]
 802dd32:	f000 00fe 	and.w	r0, r0, #254	@ 0xfe
 802dd36:	7720      	strb	r0, [r4, #28]
 802dd38:	f001 00fb 	and.w	r0, r1, #251	@ 0xfb
 802dd3c:	4621      	mov	r1, r4
 802dd3e:	7760      	strb	r0, [r4, #29]
 802dd40:	4628      	mov	r0, r5
 802dd42:	f000 fce3 	bl	802e70c <SMP_Get_Pairing_Parameters_From_Rx_Packet>
 802dd46:	4620      	mov	r0, r4
 802dd48:	f000 fd1c 	bl	802e784 <SMP_Set_Key_Generation_Method>
 802dd4c:	4601      	mov	r1, r0
 802dd4e:	7e60      	ldrb	r0, [r4, #25]
 802dd50:	2802      	cmp	r0, #2
 802dd52:	d104      	bne.n	802dd5e <SMP_Process_Rx_Packet+0x82>
 802dd54:	7f60      	ldrb	r0, [r4, #29]
 802dd56:	06c0      	lsls	r0, r0, #27
 802dd58:	bf58      	it	pl
 802dd5a:	f06f 067f 	mvnpl.w	r6, #127	@ 0x7f
 802dd5e:	2900      	cmp	r1, #0
 802dd60:	f040 81ca 	bne.w	802e0f8 <SMP_Process_Rx_Packet+0x41c>
 802dd64:	f8df 0574 	ldr.w	r0, [pc, #1396]	@ 802e2dc <__arm_cp.16_0>
 802dd68:	75e6      	strb	r6, [r4, #23]
 802dd6a:	e10d      	b.n	802df88 <SMP_Process_Rx_Packet+0x2ac>
 802dd6c:	2904      	cmp	r1, #4
 802dd6e:	d049      	beq.n	802de04 <SMP_Process_Rx_Packet+0x128>
 802dd70:	2903      	cmp	r1, #3
 802dd72:	d069      	beq.n	802de48 <SMP_Process_Rx_Packet+0x16c>
 802dd74:	2901      	cmp	r1, #1
 802dd76:	d13c      	bne.n	802ddf2 <SMP_Process_Rx_Packet+0x116>
 802dd78:	7de0      	ldrb	r0, [r4, #23]
 802dd7a:	28f1      	cmp	r0, #241	@ 0xf1
 802dd7c:	bf18      	it	ne
 802dd7e:	2800      	cmpne	r0, #0
 802dd80:	f040 8249 	bne.w	802e216 <SMP_Process_Rx_Packet+0x53a>
 802dd84:	7e20      	ldrb	r0, [r4, #24]
 802dd86:	07c0      	lsls	r0, r0, #31
 802dd88:	f040 80e9 	bne.w	802df5e <SMP_Process_Rx_Packet+0x282>
 802dd8c:	f894 1020 	ldrb.w	r1, [r4, #32]
 802dd90:	f001 0003 	and.w	r0, r1, #3
 802dd94:	2801      	cmp	r0, #1
 802dd96:	f000 808c 	beq.w	802deb2 <SMP_Process_Rx_Packet+0x1d6>
 802dd9a:	0788      	lsls	r0, r1, #30
 802dd9c:	d516      	bpl.n	802ddcc <SMP_Process_Rx_Packet+0xf0>
 802dd9e:	f041 0003 	orr.w	r0, r1, #3
 802dda2:	f001 010c 	and.w	r1, r1, #12
 802dda6:	2904      	cmp	r1, #4
 802dda8:	f884 0020 	strb.w	r0, [r4, #32]
 802ddac:	d109      	bne.n	802ddc2 <SMP_Process_Rx_Packet+0xe6>
 802ddae:	f000 00f3 	and.w	r0, r0, #243	@ 0xf3
 802ddb2:	3008      	adds	r0, #8
 802ddb4:	f884 0020 	strb.w	r0, [r4, #32]
 802ddb8:	2001      	movs	r0, #1
 802ddba:	f7f9 faf3 	bl	80273a4 <EVT_aci_gap_bond_lost>
 802ddbe:	f894 0020 	ldrb.w	r0, [r4, #32]
 802ddc2:	f000 000c 	and.w	r0, r0, #12
 802ddc6:	2808      	cmp	r0, #8
 802ddc8:	f000 8073 	beq.w	802deb2 <SMP_Process_Rx_Packet+0x1d6>
 802ddcc:	4620      	mov	r0, r4
 802ddce:	2107      	movs	r1, #7
 802ddd0:	f7ff fb8e 	bl	802d4f0 <SMP_New_PDU>
 802ddd4:	2800      	cmp	r0, #0
 802ddd6:	f000 80c6 	beq.w	802df66 <SMP_Process_Rx_Packet+0x28a>
 802ddda:	f8df 7500 	ldr.w	r7, [pc, #1280]	@ 802e2dc <__arm_cp.16_0>
 802ddde:	4606      	mov	r6, r0
 802dde0:	f897 009a 	ldrb.w	r0, [r7, #154]	@ 0x9a
 802dde4:	f000 0003 	and.w	r0, r0, #3
 802dde8:	2803      	cmp	r0, #3
 802ddea:	f040 81d1 	bne.w	802e190 <SMP_Process_Rx_Packet+0x4b4>
 802ddee:	2108      	movs	r1, #8
 802ddf0:	e216      	b.n	802e220 <SMP_Process_Rx_Packet+0x544>
 802ddf2:	0738      	lsls	r0, r7, #28
 802ddf4:	d438      	bmi.n	802de68 <SMP_Process_Rx_Packet+0x18c>
 802ddf6:	1f88      	subs	r0, r1, #6
 802ddf8:	2805      	cmp	r0, #5
 802ddfa:	d346      	bcc.n	802de8a <SMP_Process_Rx_Packet+0x1ae>
 802ddfc:	2905      	cmp	r1, #5
 802ddfe:	f040 820a 	bne.w	802e216 <SMP_Process_Rx_Packet+0x53a>
 802de02:	e0b2      	b.n	802df6a <SMP_Process_Rx_Packet+0x28e>
 802de04:	7de0      	ldrb	r0, [r4, #23]
 802de06:	2883      	cmp	r0, #131	@ 0x83
 802de08:	f040 8205 	bne.w	802e216 <SMP_Process_Rx_Packet+0x53a>
 802de0c:	4620      	mov	r0, r4
 802de0e:	2111      	movs	r1, #17
 802de10:	f7ff fb6e 	bl	802d4f0 <SMP_New_PDU>
 802de14:	2800      	cmp	r0, #0
 802de16:	f000 80a6 	beq.w	802df66 <SMP_Process_Rx_Packet+0x28a>
 802de1a:	f104 0760 	add.w	r7, r4, #96	@ 0x60
 802de1e:	4606      	mov	r6, r0
 802de20:	4628      	mov	r0, r5
 802de22:	2105      	movs	r1, #5
 802de24:	2210      	movs	r2, #16
 802de26:	463b      	mov	r3, r7
 802de28:	f7fe fa1b 	bl	802c262 <ACL_Get_Data>
 802de2c:	7fe0      	ldrb	r0, [r4, #31]
 802de2e:	0700      	lsls	r0, r0, #28
 802de30:	f100 80b1 	bmi.w	802df96 <SMP_Process_Rx_Packet+0x2ba>
 802de34:	ad03      	add	r5, sp, #12
 802de36:	4620      	mov	r0, r4
 802de38:	4639      	mov	r1, r7
 802de3a:	462a      	mov	r2, r5
 802de3c:	f000 fbea 	bl	802e614 <SMP_SR_Compute_LP_Confirm_Value>
 802de40:	f000 fd21 	bl	802e886 <OUTLINED_FUNCTION_4>
 802de44:	25bc      	movs	r5, #188	@ 0xbc
 802de46:	e17c      	b.n	802e142 <SMP_Process_Rx_Packet+0x466>
 802de48:	7de0      	ldrb	r0, [r4, #23]
 802de4a:	f1a0 0180 	sub.w	r1, r0, #128	@ 0x80
 802de4e:	2902      	cmp	r1, #2
 802de50:	d32f      	bcc.n	802deb2 <SMP_Process_Rx_Packet+0x1d6>
 802de52:	2882      	cmp	r0, #130	@ 0x82
 802de54:	f040 81df 	bne.w	802e216 <SMP_Process_Rx_Packet+0x53a>
 802de58:	f104 0334 	add.w	r3, r4, #52	@ 0x34
 802de5c:	f000 fcfe 	bl	802e85c <OUTLINED_FUNCTION_0>
 802de60:	4620      	mov	r0, r4
 802de62:	f000 fbb1 	bl	802e5c8 <SMP_SR_Send_Pairing_Confirm>
 802de66:	e1d7      	b.n	802e218 <SMP_Process_Rx_Packet+0x53c>
 802de68:	1f4a      	subs	r2, r1, #5
 802de6a:	2000      	movs	r0, #0
 802de6c:	2a09      	cmp	r2, #9
 802de6e:	f200 81d3 	bhi.w	802e218 <SMP_Process_Rx_Packet+0x53c>
 802de72:	e8df f012 	tbh	[pc, r2, lsl #1]
 802de76:	007a      	.short	0x007a
 802de78:	000a000a 	.word	0x000a000a
 802de7c:	000a000a 	.word	0x000a000a
 802de80:	01d1000a 	.word	0x01d1000a
 802de84:	011a0115 	.word	0x011a0115
 802de88:	011f      	.short	0x011f
 802de8a:	7de0      	ldrb	r0, [r4, #23]
 802de8c:	28d0      	cmp	r0, #208	@ 0xd0
 802de8e:	f040 81c2 	bne.w	802e216 <SMP_Process_Rx_Packet+0x53a>
 802de92:	1f88      	subs	r0, r1, #6
 802de94:	2803      	cmp	r0, #3
 802de96:	f200 808a 	bhi.w	802dfae <SMP_Process_Rx_Packet+0x2d2>
 802de9a:	e8df f000 	tbb	[pc, r0]
 802de9e:	9802      	.short	0x9802
 802dea0:	bbb1      	.short	0xbbb1
 802dea2:	f104 0350 	add.w	r3, r4, #80	@ 0x50
 802dea6:	e0b2      	b.n	802e00e <SMP_Process_Rx_Packet+0x332>
 802dea8:	7de0      	ldrb	r0, [r4, #23]
 802deaa:	f1a0 0180 	sub.w	r1, r0, #128	@ 0x80
 802deae:	2902      	cmp	r1, #2
 802deb0:	d24a      	bcs.n	802df48 <SMP_Process_Rx_Packet+0x26c>
 802deb2:	2093      	movs	r0, #147	@ 0x93
 802deb4:	e1b0      	b.n	802e218 <SMP_Process_Rx_Packet+0x53c>
 802deb6:	7de0      	ldrb	r0, [r4, #23]
 802deb8:	2883      	cmp	r0, #131	@ 0x83
 802deba:	f040 81ac 	bne.w	802e216 <SMP_Process_Rx_Packet+0x53a>
 802debe:	f104 0670 	add.w	r6, r4, #112	@ 0x70
 802dec2:	4628      	mov	r0, r5
 802dec4:	2105      	movs	r1, #5
 802dec6:	2210      	movs	r2, #16
 802dec8:	4633      	mov	r3, r6
 802deca:	f7fe f9ca 	bl	802c262 <ACL_Get_Data>
 802dece:	7fe0      	ldrb	r0, [r4, #31]
 802ded0:	0700      	lsls	r0, r0, #28
 802ded2:	d453      	bmi.n	802df7c <SMP_Process_Rx_Packet+0x2a0>
 802ded4:	aa03      	add	r2, sp, #12
 802ded6:	4620      	mov	r0, r4
 802ded8:	4631      	mov	r1, r6
 802deda:	f000 faf7 	bl	802e4cc <SMP_MI_Compute_LP_Confirm_Value>
 802dede:	e0c4      	b.n	802e06a <SMP_Process_Rx_Packet+0x38e>
 802dee0:	7de0      	ldrb	r0, [r4, #23]
 802dee2:	28f1      	cmp	r0, #241	@ 0xf1
 802dee4:	bf18      	it	ne
 802dee6:	2800      	cmpne	r0, #0
 802dee8:	f040 8195 	bne.w	802e216 <SMP_Process_Rx_Packet+0x53a>
 802deec:	f894 0021 	ldrb.w	r0, [r4, #33]	@ 0x21
 802def0:	06c0      	lsls	r0, r0, #27
 802def2:	f100 8190 	bmi.w	802e216 <SMP_Process_Rx_Packet+0x53a>
 802def6:	4620      	mov	r0, r4
 802def8:	f7ff fb4a 	bl	802d590 <SMP_Reset_Timer>
 802defc:	6a28      	ldr	r0, [r5, #32]
 802defe:	7943      	ldrb	r3, [r0, #5]
 802df00:	f8df 03d8 	ldr.w	r0, [pc, #984]	@ 802e2dc <__arm_cp.16_0>
 802df04:	f890 0096 	ldrb.w	r0, [r0, #150]	@ 0x96
 802df08:	2802      	cmp	r0, #2
 802df0a:	bf08      	it	eq
 802df0c:	f013 0008 	andseq.w	r0, r3, #8
 802df10:	f000 80ec 	beq.w	802e0ec <SMP_Process_Rx_Packet+0x410>
 802df14:	7de0      	ldrb	r0, [r4, #23]
 802df16:	28f1      	cmp	r0, #241	@ 0xf1
 802df18:	bf03      	ittte	eq
 802df1a:	7e20      	ldrbeq	r0, [r4, #24]
 802df1c:	f010 0f60 	tsteq.w	r0, #96	@ 0x60
 802df20:	f3c3 0180 	ubfxeq	r1, r3, #2, #1
 802df24:	2100      	movne	r1, #0
 802df26:	2200      	movs	r2, #0
 802df28:	8820      	ldrh	r0, [r4, #0]
 802df2a:	f7ff fa35 	bl	802d398 <SMP_MI_Send_Pairing_Request>
 802df2e:	2864      	cmp	r0, #100	@ 0x64
 802df30:	f000 8172 	beq.w	802e218 <SMP_Process_Rx_Packet+0x53c>
 802df34:	2800      	cmp	r0, #0
 802df36:	f040 80db 	bne.w	802e0f0 <SMP_Process_Rx_Packet+0x414>
 802df3a:	f894 0021 	ldrb.w	r0, [r4, #33]	@ 0x21
 802df3e:	f040 0080 	orr.w	r0, r0, #128	@ 0x80
 802df42:	f884 0021 	strb.w	r0, [r4, #33]	@ 0x21
 802df46:	e166      	b.n	802e216 <SMP_Process_Rx_Packet+0x53a>
 802df48:	2882      	cmp	r0, #130	@ 0x82
 802df4a:	f040 8164 	bne.w	802e216 <SMP_Process_Rx_Packet+0x53a>
 802df4e:	f104 0334 	add.w	r3, r4, #52	@ 0x34
 802df52:	f000 fc83 	bl	802e85c <OUTLINED_FUNCTION_0>
 802df56:	4620      	mov	r0, r4
 802df58:	f000 fa9f 	bl	802e49a <SMP_MI_Send_Pairing_Random>
 802df5c:	e15c      	b.n	802e218 <SMP_Process_Rx_Packet+0x53c>
 802df5e:	4620      	mov	r0, r4
 802df60:	2109      	movs	r1, #9
 802df62:	2200      	movs	r2, #0
 802df64:	e0f1      	b.n	802e14a <SMP_Process_Rx_Packet+0x46e>
 802df66:	2064      	movs	r0, #100	@ 0x64
 802df68:	e156      	b.n	802e218 <SMP_Process_Rx_Packet+0x53c>
 802df6a:	7e20      	ldrb	r0, [r4, #24]
 802df6c:	07c0      	lsls	r0, r0, #31
 802df6e:	f040 8152 	bne.w	802e216 <SMP_Process_Rx_Packet+0x53a>
 802df72:	7971      	ldrb	r1, [r6, #5]
 802df74:	4620      	mov	r0, r4
 802df76:	f000 fa13 	bl	802e3a0 <SMP_Pairing_Abort>
 802df7a:	e14c      	b.n	802e216 <SMP_Process_Rx_Packet+0x53a>
 802df7c:	7e60      	ldrb	r0, [r4, #25]
 802df7e:	2803      	cmp	r0, #3
 802df80:	d16e      	bne.n	802e060 <SMP_Process_Rx_Packet+0x384>
 802df82:	2091      	movs	r0, #145	@ 0x91
 802df84:	75e0      	strb	r0, [r4, #23]
 802df86:	48d5      	ldr	r0, [pc, #852]	@ (802e2dc <__arm_cp.16_0>)
 802df88:	f890 1039 	ldrb.w	r1, [r0, #57]	@ 0x39
 802df8c:	f001 01fb 	and.w	r1, r1, #251	@ 0xfb
 802df90:	f880 1039 	strb.w	r1, [r0, #57]	@ 0x39
 802df94:	e13f      	b.n	802e216 <SMP_Process_Rx_Packet+0x53a>
 802df96:	7e60      	ldrb	r0, [r4, #25]
 802df98:	2802      	cmp	r0, #2
 802df9a:	f000 80c1 	beq.w	802e120 <SMP_Process_Rx_Packet+0x444>
 802df9e:	2804      	cmp	r0, #4
 802dfa0:	f040 80d7 	bne.w	802e152 <SMP_Process_Rx_Packet+0x476>
 802dfa4:	4620      	mov	r0, r4
 802dfa6:	f001 f829 	bl	802effc <SMP_SC_Generate_Num_Comparison_Event>
 802dfaa:	2590      	movs	r5, #144	@ 0x90
 802dfac:	e0d2      	b.n	802e154 <SMP_Process_Rx_Packet+0x478>
 802dfae:	f894 0022 	ldrb.w	r0, [r4, #34]	@ 0x22
 802dfb2:	0740      	lsls	r0, r0, #29
 802dfb4:	f140 812f 	bpl.w	802e216 <SMP_Process_Rx_Packet+0x53a>
 802dfb8:	f104 0370 	add.w	r3, r4, #112	@ 0x70
 802dfbc:	f000 fc4e 	bl	802e85c <OUTLINED_FUNCTION_0>
 802dfc0:	f894 0022 	ldrb.w	r0, [r4, #34]	@ 0x22
 802dfc4:	f040 0040 	orr.w	r0, r0, #64	@ 0x40
 802dfc8:	f884 0022 	strb.w	r0, [r4, #34]	@ 0x22
 802dfcc:	e119      	b.n	802e202 <SMP_Process_Rx_Packet+0x526>
 802dfce:	7970      	ldrb	r0, [r6, #5]
 802dfd0:	f104 0348 	add.w	r3, r4, #72	@ 0x48
 802dfd4:	2107      	movs	r1, #7
 802dfd6:	2208      	movs	r2, #8
 802dfd8:	f884 0046 	strb.w	r0, [r4, #70]	@ 0x46
 802dfdc:	6a28      	ldr	r0, [r5, #32]
 802dfde:	7980      	ldrb	r0, [r0, #6]
 802dfe0:	f884 0047 	strb.w	r0, [r4, #71]	@ 0x47
 802dfe4:	4628      	mov	r0, r5
 802dfe6:	f7fe f93c 	bl	802c262 <ACL_Get_Data>
 802dfea:	f894 0022 	ldrb.w	r0, [r4, #34]	@ 0x22
 802dfee:	f040 0110 	orr.w	r1, r0, #16
 802dff2:	f010 0f06 	tst.w	r0, #6
 802dff6:	f884 1022 	strb.w	r1, [r4, #34]	@ 0x22
 802dffa:	f040 810c 	bne.w	802e216 <SMP_Process_Rx_Packet+0x53a>
 802dffe:	e100      	b.n	802e202 <SMP_Process_Rx_Packet+0x526>
 802e000:	f894 0022 	ldrb.w	r0, [r4, #34]	@ 0x22
 802e004:	0780      	lsls	r0, r0, #30
 802e006:	f140 8106 	bpl.w	802e216 <SMP_Process_Rx_Packet+0x53a>
 802e00a:	f104 0360 	add.w	r3, r4, #96	@ 0x60
 802e00e:	f000 fc25 	bl	802e85c <OUTLINED_FUNCTION_0>
 802e012:	e100      	b.n	802e216 <SMP_Process_Rx_Packet+0x53a>
 802e014:	f894 0022 	ldrb.w	r0, [r4, #34]	@ 0x22
 802e018:	0780      	lsls	r0, r0, #30
 802e01a:	f04f 0000 	mov.w	r0, #0
 802e01e:	f140 80fb 	bpl.w	802e218 <SMP_Process_Rx_Packet+0x53c>
 802e022:	f8ad 0010 	strh.w	r0, [sp, #16]
 802e026:	9003      	str	r0, [sp, #12]
 802e028:	ab03      	add	r3, sp, #12
 802e02a:	4628      	mov	r0, r5
 802e02c:	2106      	movs	r1, #6
 802e02e:	2206      	movs	r2, #6
 802e030:	f7fe f8f5 	bl	802c21e <ACL_Cmp_Data>
 802e034:	2800      	cmp	r0, #0
 802e036:	f000 80e0 	beq.w	802e1fa <SMP_Process_Rx_Packet+0x51e>
 802e03a:	6a28      	ldr	r0, [r5, #32]
 802e03c:	f104 0311 	add.w	r3, r4, #17
 802e040:	2106      	movs	r1, #6
 802e042:	2206      	movs	r2, #6
 802e044:	7940      	ldrb	r0, [r0, #5]
 802e046:	f000 0001 	and.w	r0, r0, #1
 802e04a:	7420      	strb	r0, [r4, #16]
 802e04c:	4628      	mov	r0, r5
 802e04e:	f7fe f908 	bl	802c262 <ACL_Get_Data>
 802e052:	f894 0022 	ldrb.w	r0, [r4, #34]	@ 0x22
 802e056:	f040 0020 	orr.w	r0, r0, #32
 802e05a:	f884 0022 	strb.w	r0, [r4, #34]	@ 0x22
 802e05e:	e0ce      	b.n	802e1fe <SMP_Process_Rx_Packet+0x522>
 802e060:	aa03      	add	r2, sp, #12
 802e062:	4620      	mov	r0, r4
 802e064:	2103      	movs	r1, #3
 802e066:	f000 ff9b 	bl	802efa0 <SMP_SC_Compute_Confirm_Value>
 802e06a:	f104 0134 	add.w	r1, r4, #52	@ 0x34
 802e06e:	a803      	add	r0, sp, #12
 802e070:	2210      	movs	r2, #16
 802e072:	f7f6 faf1 	bl	8024658 <ble_memcmp>
 802e076:	b110      	cbz	r0, 802e07e <SMP_Process_Rx_Packet+0x3a2>
 802e078:	4620      	mov	r0, r4
 802e07a:	2104      	movs	r1, #4
 802e07c:	e03d      	b.n	802e0fa <SMP_Process_Rx_Packet+0x41e>
 802e07e:	4897      	ldr	r0, [pc, #604]	@ (802e2dc <__arm_cp.16_0>)
 802e080:	7fa2      	ldrb	r2, [r4, #30]
 802e082:	f890 108f 	ldrb.w	r1, [r0, #143]	@ 0x8f
 802e086:	428a      	cmp	r2, r1
 802e088:	bf88      	it	hi
 802e08a:	77a1      	strbhi	r1, [r4, #30]
 802e08c:	7fe1      	ldrb	r1, [r4, #31]
 802e08e:	0709      	lsls	r1, r1, #28
 802e090:	d436      	bmi.n	802e100 <SMP_Process_Rx_Packet+0x424>
 802e092:	4620      	mov	r0, r4
 802e094:	f000 fbd2 	bl	802e83c <SMP_Generate_STK>
 802e098:	4620      	mov	r0, r4
 802e09a:	f7ff fa5d 	bl	802d558 <SMP_MI_Start_Encryption>
 802e09e:	e0bb      	b.n	802e218 <SMP_Process_Rx_Packet+0x53c>
 802e0a0:	4628      	mov	r0, r5
 802e0a2:	4621      	mov	r1, r4
 802e0a4:	f000 fdce 	bl	802ec44 <SMP_SC_Pairing_Public_Key_Rx_Handler>
 802e0a8:	e0b6      	b.n	802e218 <SMP_Process_Rx_Packet+0x53c>
 802e0aa:	4628      	mov	r0, r5
 802e0ac:	4621      	mov	r1, r4
 802e0ae:	f000 fe2b 	bl	802ed08 <SMP_SC_Pairing_DHKey_Check_Rx_Handler>
 802e0b2:	e0b1      	b.n	802e218 <SMP_Process_Rx_Packet+0x53c>
 802e0b4:	4628      	mov	r0, r5
 802e0b6:	4621      	mov	r1, r4
 802e0b8:	f000 fd04 	bl	802eac4 <SMP_SC_Keypress_Notification_Rx_Handler>
 802e0bc:	e0ac      	b.n	802e218 <SMP_Process_Rx_Packet+0x53c>
 802e0be:	4987      	ldr	r1, [pc, #540]	@ (802e2dc <__arm_cp.16_0>)
 802e0c0:	79f0      	ldrb	r0, [r6, #7]
 802e0c2:	f891 1096 	ldrb.w	r1, [r1, #150]	@ 0x96
 802e0c6:	2902      	cmp	r1, #2
 802e0c8:	bf08      	it	eq
 802e0ca:	f010 0108 	andseq.w	r1, r0, #8
 802e0ce:	d00d      	beq.n	802e0ec <SMP_Process_Rx_Packet+0x410>
 802e0d0:	f040 00e7 	orr.w	r0, r0, #231	@ 0xe7
 802e0d4:	4038      	ands	r0, r7
 802e0d6:	77e0      	strb	r0, [r4, #31]
 802e0d8:	0700      	lsls	r0, r0, #28
 802e0da:	f57f ae27 	bpl.w	802dd2c <SMP_Process_Rx_Packet+0x50>
 802e0de:	4620      	mov	r0, r4
 802e0e0:	f000 fcba 	bl	802ea58 <SMP_SC_Continue_In_SC_Pairing>
 802e0e4:	4601      	mov	r1, r0
 802e0e6:	b938      	cbnz	r0, 802e0f8 <SMP_Process_Rx_Packet+0x41c>
 802e0e8:	2680      	movs	r6, #128	@ 0x80
 802e0ea:	e620      	b.n	802dd2e <SMP_Process_Rx_Packet+0x52>
 802e0ec:	2103      	movs	r1, #3
 802e0ee:	e003      	b.n	802e0f8 <SMP_Process_Rx_Packet+0x41c>
 802e0f0:	2108      	movs	r1, #8
 802e0f2:	2859      	cmp	r0, #89	@ 0x59
 802e0f4:	bf08      	it	eq
 802e0f6:	2109      	moveq	r1, #9
 802e0f8:	4620      	mov	r0, r4
 802e0fa:	2200      	movs	r2, #0
 802e0fc:	2300      	movs	r3, #0
 802e0fe:	e025      	b.n	802e14c <SMP_Process_Rx_Packet+0x470>
 802e100:	7e61      	ldrb	r1, [r4, #25]
 802e102:	2901      	cmp	r1, #1
 802e104:	f000 808f 	beq.w	802e226 <SMP_Process_Rx_Packet+0x54a>
 802e108:	2902      	cmp	r1, #2
 802e10a:	f000 808f 	beq.w	802e22c <SMP_Process_Rx_Packet+0x550>
 802e10e:	2904      	cmp	r1, #4
 802e110:	f040 8081 	bne.w	802e216 <SMP_Process_Rx_Packet+0x53a>
 802e114:	2090      	movs	r0, #144	@ 0x90
 802e116:	75e0      	strb	r0, [r4, #23]
 802e118:	4620      	mov	r0, r4
 802e11a:	f000 ff6f 	bl	802effc <SMP_SC_Generate_Num_Comparison_Event>
 802e11e:	e07a      	b.n	802e216 <SMP_Process_Rx_Packet+0x53a>
 802e120:	ad03      	add	r5, sp, #12
 802e122:	4620      	mov	r0, r4
 802e124:	2101      	movs	r1, #1
 802e126:	462a      	mov	r2, r5
 802e128:	f000 ff3a 	bl	802efa0 <SMP_SC_Compute_Confirm_Value>
 802e12c:	f000 fbab 	bl	802e886 <OUTLINED_FUNCTION_4>
 802e130:	496a      	ldr	r1, [pc, #424]	@ (802e2dc <__arm_cp.16_0>)
 802e132:	f06f 056e 	mvn.w	r5, #110	@ 0x6e
 802e136:	f891 11a0 	ldrb.w	r1, [r1, #416]	@ 0x1a0
 802e13a:	2914      	cmp	r1, #20
 802e13c:	bf38      	it	cc
 802e13e:	f06f 057e 	mvncc.w	r5, #126	@ 0x7e
 802e142:	b138      	cbz	r0, 802e154 <SMP_Process_Rx_Packet+0x478>
 802e144:	4620      	mov	r0, r4
 802e146:	2104      	movs	r1, #4
 802e148:	4632      	mov	r2, r6
 802e14a:	2301      	movs	r3, #1
 802e14c:	f7ff fda5 	bl	802dc9a <SMP_Send_Pairing_Failed>
 802e150:	e062      	b.n	802e218 <SMP_Process_Rx_Packet+0x53c>
 802e152:	2591      	movs	r5, #145	@ 0x91
 802e154:	6a30      	ldr	r0, [r6, #32]
 802e156:	2104      	movs	r1, #4
 802e158:	f104 0370 	add.w	r3, r4, #112	@ 0x70
 802e15c:	2210      	movs	r2, #16
 802e15e:	7101      	strb	r1, [r0, #4]
 802e160:	4630      	mov	r0, r6
 802e162:	2105      	movs	r1, #5
 802e164:	f7fe f89d 	bl	802c2a2 <ACL_Set_Data>
 802e168:	4630      	mov	r0, r6
 802e16a:	f000 fb89 	bl	802e880 <OUTLINED_FUNCTION_3>
 802e16e:	2800      	cmp	r0, #0
 802e170:	d152      	bne.n	802e218 <SMP_Process_Rx_Packet+0x53c>
 802e172:	485a      	ldr	r0, [pc, #360]	@ (802e2dc <__arm_cp.16_0>)
 802e174:	75e5      	strb	r5, [r4, #23]
 802e176:	7fa1      	ldrb	r1, [r4, #30]
 802e178:	f890 008f 	ldrb.w	r0, [r0, #143]	@ 0x8f
 802e17c:	4281      	cmp	r1, r0
 802e17e:	bf88      	it	hi
 802e180:	77a0      	strbhi	r0, [r4, #30]
 802e182:	7fe0      	ldrb	r0, [r4, #31]
 802e184:	0700      	lsls	r0, r0, #28
 802e186:	d446      	bmi.n	802e216 <SMP_Process_Rx_Packet+0x53a>
 802e188:	4620      	mov	r0, r4
 802e18a:	f000 fb57 	bl	802e83c <SMP_Generate_STK>
 802e18e:	e042      	b.n	802e216 <SMP_Process_Rx_Packet+0x53a>
 802e190:	7e20      	ldrb	r0, [r4, #24]
 802e192:	07c0      	lsls	r0, r0, #31
 802e194:	d143      	bne.n	802e21e <SMP_Process_Rx_Packet+0x542>
 802e196:	4628      	mov	r0, r5
 802e198:	f000 fa9e 	bl	802e6d8 <SMP_Check_Rx_Pairing_Parameters>
 802e19c:	4601      	mov	r1, r0
 802e19e:	2800      	cmp	r0, #0
 802e1a0:	d13e      	bne.n	802e220 <SMP_Process_Rx_Packet+0x544>
 802e1a2:	f897 1096 	ldrb.w	r1, [r7, #150]	@ 0x96
 802e1a6:	6a28      	ldr	r0, [r5, #32]
 802e1a8:	79c0      	ldrb	r0, [r0, #7]
 802e1aa:	2902      	cmp	r1, #2
 802e1ac:	bf08      	it	eq
 802e1ae:	f010 0208 	andseq.w	r2, r0, #8
 802e1b2:	d047      	beq.n	802e244 <SMP_Process_Rx_Packet+0x568>
 802e1b4:	f897 a08d 	ldrb.w	sl, [r7, #141]	@ 0x8d
 802e1b8:	2204      	movs	r2, #4
 802e1ba:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 802e1be:	ea41 0151 	orr.w	r1, r1, r1, lsr #1
 802e1c2:	f897 c08c 	ldrb.w	ip, [r7, #140]	@ 0x8c
 802e1c6:	ea02 028a 	and.w	r2, r2, sl, lsl #2
 802e1ca:	f00c 0b01 	and.w	fp, ip, #1
 802e1ce:	f361 02c3 	bfi	r2, r1, #3, #1
 802e1d2:	f003 0101 	and.w	r1, r3, #1
 802e1d6:	ea42 1101 	orr.w	r1, r2, r1, lsl #4
 802e1da:	7fe2      	ldrb	r2, [r4, #31]
 802e1dc:	f002 0201 	and.w	r2, r2, #1
 802e1e0:	eb01 080b 	add.w	r8, r1, fp
 802e1e4:	ea00 0008 	and.w	r0, r0, r8
 802e1e8:	f000 0118 	and.w	r1, r0, #24
 802e1ec:	0700      	lsls	r0, r0, #28
 802e1ee:	4411      	add	r1, r2
 802e1f0:	77e1      	strb	r1, [r4, #31]
 802e1f2:	d429      	bmi.n	802e248 <SMP_Process_Rx_Packet+0x56c>
 802e1f4:	f04f 0981 	mov.w	r9, #129	@ 0x81
 802e1f8:	e02e      	b.n	802e258 <SMP_Process_Rx_Packet+0x57c>
 802e1fa:	f894 0022 	ldrb.w	r0, [r4, #34]	@ 0x22
 802e1fe:	0740      	lsls	r0, r0, #29
 802e200:	d409      	bmi.n	802e216 <SMP_Process_Rx_Packet+0x53a>
 802e202:	7fe0      	ldrb	r0, [r4, #31]
 802e204:	07c0      	lsls	r0, r0, #31
 802e206:	d103      	bne.n	802e210 <SMP_Process_Rx_Packet+0x534>
 802e208:	4620      	mov	r0, r4
 802e20a:	f7ff fc55 	bl	802dab8 <SMP_Key_Dist_Start>
 802e20e:	e002      	b.n	802e216 <SMP_Process_Rx_Packet+0x53a>
 802e210:	4620      	mov	r0, r4
 802e212:	f7ff fc83 	bl	802db1c <SMP_Pairing_Complete>
 802e216:	2000      	movs	r0, #0
 802e218:	b007      	add	sp, #28
 802e21a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802e21e:	2109      	movs	r1, #9
 802e220:	4620      	mov	r0, r4
 802e222:	4632      	mov	r2, r6
 802e224:	e76a      	b.n	802e0fc <SMP_Process_Rx_Packet+0x420>
 802e226:	2191      	movs	r1, #145	@ 0x91
 802e228:	75e1      	strb	r1, [r4, #23]
 802e22a:	e6ad      	b.n	802df88 <SMP_Process_Rx_Packet+0x2ac>
 802e22c:	f890 21a0 	ldrb.w	r2, [r0, #416]	@ 0x1a0
 802e230:	f890 1039 	ldrb.w	r1, [r0, #57]	@ 0x39
 802e234:	f06f 036e 	mvn.w	r3, #110	@ 0x6e
 802e238:	2a14      	cmp	r2, #20
 802e23a:	bf38      	it	cc
 802e23c:	f06f 037e 	mvncc.w	r3, #126	@ 0x7e
 802e240:	75e3      	strb	r3, [r4, #23]
 802e242:	e6a3      	b.n	802df8c <SMP_Process_Rx_Packet+0x2b0>
 802e244:	2103      	movs	r1, #3
 802e246:	e7eb      	b.n	802e220 <SMP_Process_Rx_Packet+0x544>
 802e248:	4620      	mov	r0, r4
 802e24a:	f000 fc05 	bl	802ea58 <SMP_SC_Continue_In_SC_Pairing>
 802e24e:	4601      	mov	r1, r0
 802e250:	2800      	cmp	r0, #0
 802e252:	d1e5      	bne.n	802e220 <SMP_Process_Rx_Packet+0x544>
 802e254:	f04f 0980 	mov.w	r9, #128	@ 0x80
 802e258:	4620      	mov	r0, r4
 802e25a:	f7ff f81d 	bl	802d298 <SMP_Check_Remote_OOB_Data_Presence>
 802e25e:	f00a 0001 	and.w	r0, sl, #1
 802e262:	4621      	mov	r1, r4
 802e264:	7760      	strb	r0, [r4, #29]
 802e266:	ea4f 004b 	mov.w	r0, fp, lsl #1
 802e26a:	7720      	strb	r0, [r4, #28]
 802e26c:	4628      	mov	r0, r5
 802e26e:	f000 fa4d 	bl	802e70c <SMP_Get_Pairing_Parameters_From_Rx_Packet>
 802e272:	4620      	mov	r0, r4
 802e274:	f000 fa86 	bl	802e784 <SMP_Set_Key_Generation_Method>
 802e278:	4601      	mov	r1, r0
 802e27a:	7e60      	ldrb	r0, [r4, #25]
 802e27c:	2802      	cmp	r0, #2
 802e27e:	d104      	bne.n	802e28a <SMP_Process_Rx_Packet+0x5ae>
 802e280:	7f60      	ldrb	r0, [r4, #29]
 802e282:	06c0      	lsls	r0, r0, #27
 802e284:	bf58      	it	pl
 802e286:	f06f 097f 	mvnpl.w	r9, #127	@ 0x7f
 802e28a:	2900      	cmp	r1, #0
 802e28c:	d1c8      	bne.n	802e220 <SMP_Process_Rx_Packet+0x544>
 802e28e:	f894 0022 	ldrb.w	r0, [r4, #34]	@ 0x22
 802e292:	f894 1023 	ldrb.w	r1, [r4, #35]	@ 0x23
 802e296:	7ea2      	ldrb	r2, [r4, #26]
 802e298:	4643      	mov	r3, r8
 802e29a:	f001 0107 	and.w	r1, r1, #7
 802e29e:	f000 0007 	and.w	r0, r0, #7
 802e2a2:	e9cd 0100 	strd	r0, r1, [sp]
 802e2a6:	4630      	mov	r0, r6
 802e2a8:	2102      	movs	r1, #2
 802e2aa:	f000 f8b7 	bl	802e41c <SMP_Build_Pairing_Packet>
 802e2ae:	4630      	mov	r0, r6
 802e2b0:	f000 fae6 	bl	802e880 <OUTLINED_FUNCTION_3>
 802e2b4:	2800      	cmp	r0, #0
 802e2b6:	d1af      	bne.n	802e218 <SMP_Process_Rx_Packet+0x53c>
 802e2b8:	7e20      	ldrb	r0, [r4, #24]
 802e2ba:	f000 009f 	and.w	r0, r0, #159	@ 0x9f
 802e2be:	7620      	strb	r0, [r4, #24]
 802e2c0:	f897 009a 	ldrb.w	r0, [r7, #154]	@ 0x9a
 802e2c4:	f000 0103 	and.w	r1, r0, #3
 802e2c8:	2903      	cmp	r1, #3
 802e2ca:	bf1c      	itt	ne
 802e2cc:	3001      	addne	r0, #1
 802e2ce:	f887 009a 	strbne.w	r0, [r7, #154]	@ 0x9a
 802e2d2:	f887 81a4 	strb.w	r8, [r7, #420]	@ 0x1a4
 802e2d6:	f884 9017 	strb.w	r9, [r4, #23]
 802e2da:	e79c      	b.n	802e216 <SMP_Process_Rx_Packet+0x53a>

0802e2dc <__arm_cp.16_0>:
 802e2dc:	20009f5c 	.word	0x20009f5c

0802e2e0 <SMP_Key_Dist_Tx_Complete_Handler>:
 802e2e0:	b510      	push	{r4, lr}
 802e2e2:	4604      	mov	r4, r0
 802e2e4:	7dc0      	ldrb	r0, [r0, #23]
 802e2e6:	28dd      	cmp	r0, #221	@ 0xdd
 802e2e8:	d136      	bne.n	802e358 <SMP_Key_Dist_Tx_Complete_Handler+0x78>
 802e2ea:	1f88      	subs	r0, r1, #6
 802e2ec:	2804      	cmp	r0, #4
 802e2ee:	d833      	bhi.n	802e358 <SMP_Key_Dist_Tx_Complete_Handler+0x78>
 802e2f0:	e8df f000 	tbb	[pc, r0]
 802e2f4:	0d0b0503 	.word	0x0d0b0503
 802e2f8:	0011      	.short	0x0011
 802e2fa:	20d2      	movs	r0, #210	@ 0xd2
 802e2fc:	e02b      	b.n	802e356 <SMP_Key_Dist_Tx_Complete_Handler+0x76>
 802e2fe:	f894 0023 	ldrb.w	r0, [r4, #35]	@ 0x23
 802e302:	0781      	lsls	r1, r0, #30
 802e304:	d505      	bpl.n	802e312 <SMP_Key_Dist_Tx_Complete_Handler+0x32>
 802e306:	20d3      	movs	r0, #211	@ 0xd3
 802e308:	e025      	b.n	802e356 <SMP_Key_Dist_Tx_Complete_Handler+0x76>
 802e30a:	20d4      	movs	r0, #212	@ 0xd4
 802e30c:	e023      	b.n	802e356 <SMP_Key_Dist_Tx_Complete_Handler+0x76>
 802e30e:	f894 0023 	ldrb.w	r0, [r4, #35]	@ 0x23
 802e312:	0740      	lsls	r0, r0, #29
 802e314:	d41e      	bmi.n	802e354 <SMP_Key_Dist_Tx_Complete_Handler+0x74>
 802e316:	7fe0      	ldrb	r0, [r4, #31]
 802e318:	07c0      	lsls	r0, r0, #31
 802e31a:	d110      	bne.n	802e33e <SMP_Key_Dist_Tx_Complete_Handler+0x5e>
 802e31c:	f894 0022 	ldrb.w	r0, [r4, #34]	@ 0x22
 802e320:	06c0      	lsls	r0, r0, #27
 802e322:	d512      	bpl.n	802e34a <SMP_Key_Dist_Tx_Complete_Handler+0x6a>
 802e324:	f894 0021 	ldrb.w	r0, [r4, #33]	@ 0x21
 802e328:	0681      	lsls	r1, r0, #26
 802e32a:	d50e      	bpl.n	802e34a <SMP_Key_Dist_Tx_Complete_Handler+0x6a>
 802e32c:	f040 0004 	orr.w	r0, r0, #4
 802e330:	f884 0021 	strb.w	r0, [r4, #33]	@ 0x21
 802e334:	4620      	mov	r0, r4
 802e336:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802e33a:	f7ff b93f 	b.w	802d5bc <SMP_MI_Set_Encryption>
 802e33e:	4620      	mov	r0, r4
 802e340:	f000 f80b 	bl	802e35a <SMP_Key_Dist_Peer_Keys_To_receive>
 802e344:	b108      	cbz	r0, 802e34a <SMP_Key_Dist_Tx_Complete_Handler+0x6a>
 802e346:	20d0      	movs	r0, #208	@ 0xd0
 802e348:	e005      	b.n	802e356 <SMP_Key_Dist_Tx_Complete_Handler+0x76>
 802e34a:	4620      	mov	r0, r4
 802e34c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802e350:	f7ff bbe4 	b.w	802db1c <SMP_Pairing_Complete>
 802e354:	20d5      	movs	r0, #213	@ 0xd5
 802e356:	75e0      	strb	r0, [r4, #23]
 802e358:	bd10      	pop	{r4, pc}

0802e35a <SMP_Key_Dist_Peer_Keys_To_receive>:
 802e35a:	7fc2      	ldrb	r2, [r0, #31]
 802e35c:	f890 1022 	ldrb.w	r1, [r0, #34]	@ 0x22
 802e360:	0710      	lsls	r0, r2, #28
 802e362:	d402      	bmi.n	802e36a <SMP_Key_Dist_Peer_Keys_To_receive+0x10>
 802e364:	b131      	cbz	r1, 802e374 <SMP_Key_Dist_Peer_Keys_To_receive+0x1a>
 802e366:	2001      	movs	r0, #1
 802e368:	4770      	bx	lr
 802e36a:	2000      	movs	r0, #0
 802e36c:	2901      	cmp	r1, #1
 802e36e:	bf88      	it	hi
 802e370:	2001      	movhi	r0, #1
 802e372:	4770      	bx	lr
 802e374:	2000      	movs	r0, #0
 802e376:	4770      	bx	lr

0802e378 <SMP_Update_Stats_On_Pairing_End>:
 802e378:	b510      	push	{r4, lr}
 802e37a:	7dc2      	ldrb	r2, [r0, #23]
 802e37c:	3a20      	subs	r2, #32
 802e37e:	2ac0      	cmp	r2, #192	@ 0xc0
 802e380:	d807      	bhi.n	802e392 <SMP_Update_Stats_On_Pairing_End+0x1a>
 802e382:	4a06      	ldr	r2, [pc, #24]	@ (802e39c <__arm_cp.19_0>)
 802e384:	f892 309a 	ldrb.w	r3, [r2, #154]	@ 0x9a
 802e388:	079c      	lsls	r4, r3, #30
 802e38a:	bf1c      	itt	ne
 802e38c:	3b01      	subne	r3, #1
 802e38e:	f882 309a 	strbne.w	r3, [r2, #154]	@ 0x9a
 802e392:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802e396:	f000 be85 	b.w	802f0a4 <SMP_SC_Update_Stats>
 802e39a:	bf00      	nop

0802e39c <__arm_cp.19_0>:
 802e39c:	20009f5c 	.word	0x20009f5c

0802e3a0 <SMP_Pairing_Abort>:
 802e3a0:	b5b0      	push	{r4, r5, r7, lr}
 802e3a2:	460c      	mov	r4, r1
 802e3a4:	4605      	mov	r5, r0
 802e3a6:	f7fe ffe9 	bl	802d37c <SMP_Stop_Timer>
 802e3aa:	8828      	ldrh	r0, [r5, #0]
 802e3ac:	f7fe fd4c 	bl	802ce48 <SMP_Flush_Rx_Packets>
 802e3b0:	4628      	mov	r0, r5
 802e3b2:	2102      	movs	r1, #2
 802e3b4:	f7ff ffe0 	bl	802e378 <SMP_Update_Stats_On_Pairing_End>
 802e3b8:	4628      	mov	r0, r5
 802e3ba:	f000 fa6d 	bl	802e898 <SMP_Rep_Attempts_Protection>
 802e3be:	2000      	movs	r0, #0
 802e3c0:	7fe9      	ldrb	r1, [r5, #31]
 802e3c2:	2202      	movs	r2, #2
 802e3c4:	4623      	mov	r3, r4
 802e3c6:	f885 0020 	strb.w	r0, [r5, #32]
 802e3ca:	75e8      	strb	r0, [r5, #23]
 802e3cc:	7f68      	ldrb	r0, [r5, #29]
 802e3ce:	f001 0101 	and.w	r1, r1, #1
 802e3d2:	f000 002f 	and.w	r0, r0, #47	@ 0x2f
 802e3d6:	77e9      	strb	r1, [r5, #31]
 802e3d8:	8829      	ldrh	r1, [r5, #0]
 802e3da:	7768      	strb	r0, [r5, #29]
 802e3dc:	2001      	movs	r0, #1
 802e3de:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 802e3e2:	f7f8 bfe9 	b.w	80273b8 <EVT_aci_gap_pairing_complete>
	...

0802e3e8 <SMP_Is_Any_Pairing_Ongoing>:
 802e3e8:	b510      	push	{r4, lr}
 802e3ea:	480a      	ldr	r0, [pc, #40]	@ (802e414 <__arm_cp.21_0>)
 802e3ec:	2300      	movs	r3, #0
 802e3ee:	7d81      	ldrb	r1, [r0, #22]
 802e3f0:	4809      	ldr	r0, [pc, #36]	@ (802e418 <__arm_cp.21_1>)
 802e3f2:	f8d0 00bc 	ldr.w	r0, [r0, #188]	@ 0xbc
 802e3f6:	3017      	adds	r0, #23
 802e3f8:	461a      	mov	r2, r3
 802e3fa:	4299      	cmp	r1, r3
 802e3fc:	d005      	beq.n	802e40a <SMP_Is_Any_Pairing_Ongoing+0x22>
 802e3fe:	f810 4b80 	ldrb.w	r4, [r0], #128
 802e402:	1c53      	adds	r3, r2, #1
 802e404:	3c20      	subs	r4, #32
 802e406:	2cc0      	cmp	r4, #192	@ 0xc0
 802e408:	d8f6      	bhi.n	802e3f8 <SMP_Is_Any_Pairing_Ongoing+0x10>
 802e40a:	2000      	movs	r0, #0
 802e40c:	428a      	cmp	r2, r1
 802e40e:	bf38      	it	cc
 802e410:	2001      	movcc	r0, #1
 802e412:	bd10      	pop	{r4, pc}

0802e414 <__arm_cp.21_0>:
 802e414:	20009f34 	.word	0x20009f34

0802e418 <__arm_cp.21_1>:
 802e418:	20009f5c 	.word	0x20009f5c

0802e41c <SMP_Build_Pairing_Packet>:
 802e41c:	b5b0      	push	{r4, r5, r7, lr}
 802e41e:	6a04      	ldr	r4, [r0, #32]
 802e420:	f002 0201 	and.w	r2, r2, #1
 802e424:	7121      	strb	r1, [r4, #4]
 802e426:	490a      	ldr	r1, [pc, #40]	@ (802e450 <__arm_cp.22_0>)
 802e428:	6a05      	ldr	r5, [r0, #32]
 802e42a:	f891 4099 	ldrb.w	r4, [r1, #153]	@ 0x99
 802e42e:	716c      	strb	r4, [r5, #5]
 802e430:	6a04      	ldr	r4, [r0, #32]
 802e432:	71a2      	strb	r2, [r4, #6]
 802e434:	6a02      	ldr	r2, [r0, #32]
 802e436:	71d3      	strb	r3, [r2, #7]
 802e438:	f891 108f 	ldrb.w	r1, [r1, #143]	@ 0x8f
 802e43c:	6a02      	ldr	r2, [r0, #32]
 802e43e:	7211      	strb	r1, [r2, #8]
 802e440:	9a04      	ldr	r2, [sp, #16]
 802e442:	6a01      	ldr	r1, [r0, #32]
 802e444:	724a      	strb	r2, [r1, #9]
 802e446:	9905      	ldr	r1, [sp, #20]
 802e448:	6a00      	ldr	r0, [r0, #32]
 802e44a:	7281      	strb	r1, [r0, #10]
 802e44c:	bdb0      	pop	{r4, r5, r7, pc}
 802e44e:	bf00      	nop

0802e450 <__arm_cp.22_0>:
 802e450:	20009f5c 	.word	0x20009f5c

0802e454 <SMP_MI_Send_Pairing_Confirm>:
 802e454:	b5bf      	push	{r0, r1, r2, r3, r4, r5, r7, lr}
 802e456:	2111      	movs	r1, #17
 802e458:	4604      	mov	r4, r0
 802e45a:	f7ff f849 	bl	802d4f0 <SMP_New_PDU>
 802e45e:	b1c0      	cbz	r0, 802e492 <SMP_MI_Send_Pairing_Confirm+0x3e>
 802e460:	4605      	mov	r5, r0
 802e462:	7fe0      	ldrb	r0, [r4, #31]
 802e464:	0700      	lsls	r0, r0, #28
 802e466:	d406      	bmi.n	802e476 <SMP_MI_Send_Pairing_Confirm+0x22>
 802e468:	f104 0160 	add.w	r1, r4, #96	@ 0x60
 802e46c:	466a      	mov	r2, sp
 802e46e:	4620      	mov	r0, r4
 802e470:	f000 f82c 	bl	802e4cc <SMP_MI_Compute_LP_Confirm_Value>
 802e474:	e004      	b.n	802e480 <SMP_MI_Send_Pairing_Confirm+0x2c>
 802e476:	466a      	mov	r2, sp
 802e478:	4620      	mov	r0, r4
 802e47a:	2100      	movs	r1, #0
 802e47c:	f000 fd90 	bl	802efa0 <SMP_SC_Compute_Confirm_Value>
 802e480:	6a28      	ldr	r0, [r5, #32]
 802e482:	2103      	movs	r1, #3
 802e484:	466b      	mov	r3, sp
 802e486:	f000 f9ee 	bl	802e866 <OUTLINED_FUNCTION_1>
 802e48a:	4628      	mov	r0, r5
 802e48c:	f000 f9f8 	bl	802e880 <OUTLINED_FUNCTION_3>
 802e490:	b100      	cbz	r0, 802e494 <SMP_MI_Send_Pairing_Confirm+0x40>
 802e492:	bdbf      	pop	{r0, r1, r2, r3, r4, r5, r7, pc}
 802e494:	2082      	movs	r0, #130	@ 0x82
 802e496:	75e0      	strb	r0, [r4, #23]
 802e498:	bdbf      	pop	{r0, r1, r2, r3, r4, r5, r7, pc}

0802e49a <SMP_MI_Send_Pairing_Random>:
 802e49a:	b5b0      	push	{r4, r5, r7, lr}
 802e49c:	2111      	movs	r1, #17
 802e49e:	4604      	mov	r4, r0
 802e4a0:	f7ff f826 	bl	802d4f0 <SMP_New_PDU>
 802e4a4:	b158      	cbz	r0, 802e4be <SMP_MI_Send_Pairing_Random+0x24>
 802e4a6:	4605      	mov	r5, r0
 802e4a8:	6a00      	ldr	r0, [r0, #32]
 802e4aa:	2104      	movs	r1, #4
 802e4ac:	f104 0360 	add.w	r3, r4, #96	@ 0x60
 802e4b0:	f000 f9d9 	bl	802e866 <OUTLINED_FUNCTION_1>
 802e4b4:	4628      	mov	r0, r5
 802e4b6:	f000 f9e3 	bl	802e880 <OUTLINED_FUNCTION_3>
 802e4ba:	b110      	cbz	r0, 802e4c2 <SMP_MI_Send_Pairing_Random+0x28>
 802e4bc:	bdb0      	pop	{r4, r5, r7, pc}
 802e4be:	2064      	movs	r0, #100	@ 0x64
 802e4c0:	bdb0      	pop	{r4, r5, r7, pc}
 802e4c2:	2083      	movs	r0, #131	@ 0x83
 802e4c4:	75e0      	strb	r0, [r4, #23]
 802e4c6:	2000      	movs	r0, #0
 802e4c8:	bdb0      	pop	{r4, r5, r7, pc}
	...

0802e4cc <SMP_MI_Compute_LP_Confirm_Value>:
 802e4cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 802e4d0:	b08b      	sub	sp, #44	@ 0x2c
 802e4d2:	466e      	mov	r6, sp
 802e4d4:	4689      	mov	r9, r1
 802e4d6:	4690      	mov	r8, r2
 802e4d8:	4607      	mov	r7, r0
 802e4da:	4631      	mov	r1, r6
 802e4dc:	f000 f850 	bl	802e580 <SMP_Get_TK>
 802e4e0:	2001      	movs	r0, #1
 802e4e2:	7fbd      	ldrb	r5, [r7, #30]
 802e4e4:	f88d 0010 	strb.w	r0, [sp, #16]
 802e4e8:	f240 2007 	movw	r0, #519	@ 0x207
 802e4ec:	f88d 501b 	strb.w	r5, [sp, #27]
 802e4f0:	f8ad 0016 	strh.w	r0, [sp, #22]
 802e4f4:	2007      	movs	r0, #7
 802e4f6:	f88d 0015 	strb.w	r0, [sp, #21]
 802e4fa:	4820      	ldr	r0, [pc, #128]	@ (802e57c <__arm_cp.25_0>)
 802e4fc:	f890 2099 	ldrb.w	r2, [r0, #153]	@ 0x99
 802e500:	f890 108f 	ldrb.w	r1, [r0, #143]	@ 0x8f
 802e504:	f890 31a1 	ldrb.w	r3, [r0, #417]	@ 0x1a1
 802e508:	f890 41a2 	ldrb.w	r4, [r0, #418]	@ 0x1a2
 802e50c:	f88d 2011 	strb.w	r2, [sp, #17]
 802e510:	f890 21a4 	ldrb.w	r2, [r0, #420]	@ 0x1a4
 802e514:	f88d 1014 	strb.w	r1, [sp, #20]
 802e518:	f890 01a3 	ldrb.w	r0, [r0, #419]	@ 0x1a3
 802e51c:	7eb9      	ldrb	r1, [r7, #26]
 802e51e:	f88d 301a 	strb.w	r3, [sp, #26]
 802e522:	f88d 401c 	strb.w	r4, [sp, #28]
 802e526:	f88d 2013 	strb.w	r2, [sp, #19]
 802e52a:	7efa      	ldrb	r2, [r7, #27]
 802e52c:	f88d 001d 	strb.w	r0, [sp, #29]
 802e530:	7a78      	ldrb	r0, [r7, #9]
 802e532:	f88d 2018 	strb.w	r2, [sp, #24]
 802e536:	f001 0201 	and.w	r2, r1, #1
 802e53a:	f3c1 0140 	ubfx	r1, r1, #1, #1
 802e53e:	f88d 001e 	strb.w	r0, [sp, #30]
 802e542:	f106 001f 	add.w	r0, r6, #31
 802e546:	f88d 2012 	strb.w	r2, [sp, #18]
 802e54a:	2206      	movs	r2, #6
 802e54c:	f88d 1019 	strb.w	r1, [sp, #25]
 802e550:	f107 010a 	add.w	r1, r7, #10
 802e554:	f7f5 fff8 	bl	8024548 <ble_memcpy>
 802e558:	78b8      	ldrb	r0, [r7, #2]
 802e55a:	1cf9      	adds	r1, r7, #3
 802e55c:	2206      	movs	r2, #6
 802e55e:	f88d 0025 	strb.w	r0, [sp, #37]	@ 0x25
 802e562:	f106 0026 	add.w	r0, r6, #38	@ 0x26
 802e566:	f7f5 ffef 	bl	8024548 <ble_memcpy>
 802e56a:	4630      	mov	r0, r6
 802e56c:	4649      	mov	r1, r9
 802e56e:	4642      	mov	r2, r8
 802e570:	f7fe f970 	bl	802c854 <SMA_Compute_Confirm_Value>
 802e574:	b00b      	add	sp, #44	@ 0x2c
 802e576:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802e57a:	bf00      	nop

0802e57c <__arm_cp.25_0>:
 802e57c:	20009f5c 	.word	0x20009f5c

0802e580 <SMP_Get_TK>:
 802e580:	b5b0      	push	{r4, r5, r7, lr}
 802e582:	4605      	mov	r5, r0
 802e584:	460c      	mov	r4, r1
 802e586:	4608      	mov	r0, r1
 802e588:	2100      	movs	r1, #0
 802e58a:	2210      	movs	r2, #16
 802e58c:	f7f6 f82c 	bl	80245e8 <ble_memset>
 802e590:	7e68      	ldrb	r0, [r5, #25]
 802e592:	2803      	cmp	r0, #3
 802e594:	d00c      	beq.n	802e5b0 <SMP_Get_TK+0x30>
 802e596:	2802      	cmp	r0, #2
 802e598:	d109      	bne.n	802e5ae <SMP_Get_TK+0x2e>
 802e59a:	480a      	ldr	r0, [pc, #40]	@ (802e5c4 <__arm_cp.26_0>)
 802e59c:	f8d0 0090 	ldr.w	r0, [r0, #144]	@ 0x90
 802e5a0:	0e01      	lsrs	r1, r0, #24
 802e5a2:	7020      	strb	r0, [r4, #0]
 802e5a4:	70e1      	strb	r1, [r4, #3]
 802e5a6:	0c01      	lsrs	r1, r0, #16
 802e5a8:	0a00      	lsrs	r0, r0, #8
 802e5aa:	70a1      	strb	r1, [r4, #2]
 802e5ac:	7060      	strb	r0, [r4, #1]
 802e5ae:	bdb0      	pop	{r4, r5, r7, pc}
 802e5b0:	4804      	ldr	r0, [pc, #16]	@ (802e5c4 <__arm_cp.26_0>)
 802e5b2:	2210      	movs	r2, #16
 802e5b4:	f100 019c 	add.w	r1, r0, #156	@ 0x9c
 802e5b8:	4620      	mov	r0, r4
 802e5ba:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 802e5be:	f7f5 bfc3 	b.w	8024548 <ble_memcpy>
 802e5c2:	bf00      	nop

0802e5c4 <__arm_cp.26_0>:
 802e5c4:	20009f5c 	.word	0x20009f5c

0802e5c8 <SMP_SR_Send_Pairing_Confirm>:
 802e5c8:	b5bf      	push	{r0, r1, r2, r3, r4, r5, r7, lr}
 802e5ca:	2111      	movs	r1, #17
 802e5cc:	4604      	mov	r4, r0
 802e5ce:	f7fe ff8f 	bl	802d4f0 <SMP_New_PDU>
 802e5d2:	b150      	cbz	r0, 802e5ea <SMP_SR_Send_Pairing_Confirm+0x22>
 802e5d4:	4605      	mov	r5, r0
 802e5d6:	7fe0      	ldrb	r0, [r4, #31]
 802e5d8:	0700      	lsls	r0, r0, #28
 802e5da:	d408      	bmi.n	802e5ee <SMP_SR_Send_Pairing_Confirm+0x26>
 802e5dc:	f104 0170 	add.w	r1, r4, #112	@ 0x70
 802e5e0:	466a      	mov	r2, sp
 802e5e2:	4620      	mov	r0, r4
 802e5e4:	f000 f816 	bl	802e614 <SMP_SR_Compute_LP_Confirm_Value>
 802e5e8:	e006      	b.n	802e5f8 <SMP_SR_Send_Pairing_Confirm+0x30>
 802e5ea:	2064      	movs	r0, #100	@ 0x64
 802e5ec:	e010      	b.n	802e610 <SMP_SR_Send_Pairing_Confirm+0x48>
 802e5ee:	466a      	mov	r2, sp
 802e5f0:	4620      	mov	r0, r4
 802e5f2:	2102      	movs	r1, #2
 802e5f4:	f000 fcd4 	bl	802efa0 <SMP_SC_Compute_Confirm_Value>
 802e5f8:	6a28      	ldr	r0, [r5, #32]
 802e5fa:	2103      	movs	r1, #3
 802e5fc:	466b      	mov	r3, sp
 802e5fe:	f000 f932 	bl	802e866 <OUTLINED_FUNCTION_1>
 802e602:	4628      	mov	r0, r5
 802e604:	f000 f93c 	bl	802e880 <OUTLINED_FUNCTION_3>
 802e608:	b910      	cbnz	r0, 802e610 <SMP_SR_Send_Pairing_Confirm+0x48>
 802e60a:	2083      	movs	r0, #131	@ 0x83
 802e60c:	75e0      	strb	r0, [r4, #23]
 802e60e:	2000      	movs	r0, #0
 802e610:	b004      	add	sp, #16
 802e612:	bdb0      	pop	{r4, r5, r7, pc}

0802e614 <SMP_SR_Compute_LP_Confirm_Value>:
 802e614:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802e618:	b08c      	sub	sp, #48	@ 0x30
 802e61a:	f10d 0a04 	add.w	sl, sp, #4
 802e61e:	4689      	mov	r9, r1
 802e620:	4690      	mov	r8, r2
 802e622:	4607      	mov	r7, r0
 802e624:	4651      	mov	r1, sl
 802e626:	f7ff ffab 	bl	802e580 <SMP_Get_TK>
 802e62a:	7ef9      	ldrb	r1, [r7, #27]
 802e62c:	2001      	movs	r0, #1
 802e62e:	7fba      	ldrb	r2, [r7, #30]
 802e630:	f88d 1015 	strb.w	r1, [sp, #21]
 802e634:	4927      	ldr	r1, [pc, #156]	@ (802e6d4 <__arm_cp.28_0>)
 802e636:	f88d 0014 	strb.w	r0, [sp, #20]
 802e63a:	2002      	movs	r0, #2
 802e63c:	f88d 2018 	strb.w	r2, [sp, #24]
 802e640:	f88d 001b 	strb.w	r0, [sp, #27]
 802e644:	7eb8      	ldrb	r0, [r7, #26]
 802e646:	f891 21a4 	ldrb.w	r2, [r1, #420]	@ 0x1a4
 802e64a:	f891 3099 	ldrb.w	r3, [r1, #153]	@ 0x99
 802e64e:	f891 41a1 	ldrb.w	r4, [r1, #417]	@ 0x1a1
 802e652:	f891 51a2 	ldrb.w	r5, [r1, #418]	@ 0x1a2
 802e656:	f891 61a3 	ldrb.w	r6, [r1, #419]	@ 0x1a3
 802e65a:	f88d 201e 	strb.w	r2, [sp, #30]
 802e65e:	f3c0 0240 	ubfx	r2, r0, #1, #1
 802e662:	f000 0001 	and.w	r0, r0, #1
 802e666:	f88d 4017 	strb.w	r4, [sp, #23]
 802e66a:	f88d 5019 	strb.w	r5, [sp, #25]
 802e66e:	f88d 601a 	strb.w	r6, [sp, #26]
 802e672:	f88d 301c 	strb.w	r3, [sp, #28]
 802e676:	f88d 001d 	strb.w	r0, [sp, #29]
 802e67a:	f891 008f 	ldrb.w	r0, [r1, #143]	@ 0x8f
 802e67e:	f897 1022 	ldrb.w	r1, [r7, #34]	@ 0x22
 802e682:	f88d 2016 	strb.w	r2, [sp, #22]
 802e686:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 802e68a:	f88d 001f 	strb.w	r0, [sp, #31]
 802e68e:	7a78      	ldrb	r0, [r7, #9]
 802e690:	f88d 0029 	strb.w	r0, [sp, #41]	@ 0x29
 802e694:	f001 0007 	and.w	r0, r1, #7
 802e698:	f107 010a 	add.w	r1, r7, #10
 802e69c:	f88d 0020 	strb.w	r0, [sp, #32]
 802e6a0:	f002 0007 	and.w	r0, r2, #7
 802e6a4:	2206      	movs	r2, #6
 802e6a6:	f88d 0021 	strb.w	r0, [sp, #33]	@ 0x21
 802e6aa:	f10a 0026 	add.w	r0, sl, #38	@ 0x26
 802e6ae:	f7f5 ff4b 	bl	8024548 <ble_memcpy>
 802e6b2:	78b8      	ldrb	r0, [r7, #2]
 802e6b4:	1cf9      	adds	r1, r7, #3
 802e6b6:	2206      	movs	r2, #6
 802e6b8:	f88d 0022 	strb.w	r0, [sp, #34]	@ 0x22
 802e6bc:	f10a 001f 	add.w	r0, sl, #31
 802e6c0:	f7f5 ff42 	bl	8024548 <ble_memcpy>
 802e6c4:	4650      	mov	r0, sl
 802e6c6:	4649      	mov	r1, r9
 802e6c8:	4642      	mov	r2, r8
 802e6ca:	f7fe f8c3 	bl	802c854 <SMA_Compute_Confirm_Value>
 802e6ce:	b00c      	add	sp, #48	@ 0x30
 802e6d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0802e6d4 <__arm_cp.28_0>:
 802e6d4:	20009f5c 	.word	0x20009f5c

0802e6d8 <SMP_Check_Rx_Pairing_Parameters>:
 802e6d8:	6a00      	ldr	r0, [r0, #32]
 802e6da:	7941      	ldrb	r1, [r0, #5]
 802e6dc:	2904      	cmp	r1, #4
 802e6de:	bf9c      	itt	ls
 802e6e0:	7981      	ldrbls	r1, [r0, #6]
 802e6e2:	2901      	cmpls	r1, #1
 802e6e4:	d901      	bls.n	802e6ea <SMP_Check_Rx_Pairing_Parameters+0x12>
 802e6e6:	200a      	movs	r0, #10
 802e6e8:	4770      	bx	lr
 802e6ea:	79c1      	ldrb	r1, [r0, #7]
 802e6ec:	0789      	lsls	r1, r1, #30
 802e6ee:	d4fa      	bmi.n	802e6e6 <SMP_Check_Rx_Pairing_Parameters+0xe>
 802e6f0:	4905      	ldr	r1, [pc, #20]	@ (802e708 <__arm_cp.29_0>)
 802e6f2:	7a00      	ldrb	r0, [r0, #8]
 802e6f4:	f891 108e 	ldrb.w	r1, [r1, #142]	@ 0x8e
 802e6f8:	4288      	cmp	r0, r1
 802e6fa:	d303      	bcc.n	802e704 <SMP_Check_Rx_Pairing_Parameters+0x2c>
 802e6fc:	2811      	cmp	r0, #17
 802e6fe:	bf3c      	itt	cc
 802e700:	2000      	movcc	r0, #0
 802e702:	4770      	bxcc	lr
 802e704:	2006      	movs	r0, #6
 802e706:	4770      	bx	lr

0802e708 <__arm_cp.29_0>:
 802e708:	20009f5c 	.word	0x20009f5c

0802e70c <SMP_Get_Pairing_Parameters_From_Rx_Packet>:
 802e70c:	b570      	push	{r4, r5, r6, lr}
 802e70e:	6a02      	ldr	r2, [r0, #32]
 802e710:	7953      	ldrb	r3, [r2, #5]
 802e712:	76cb      	strb	r3, [r1, #27]
 802e714:	7993      	ldrb	r3, [r2, #6]
 802e716:	2b01      	cmp	r3, #1
 802e718:	bf02      	ittt	eq
 802e71a:	7e8b      	ldrbeq	r3, [r1, #26]
 802e71c:	f043 0302 	orreq.w	r3, r3, #2
 802e720:	768b      	strbeq	r3, [r1, #26]
 802e722:	4b17      	ldr	r3, [pc, #92]	@ (802e780 <__arm_cp.30_0>)
 802e724:	79d2      	ldrb	r2, [r2, #7]
 802e726:	f883 21a1 	strb.w	r2, [r3, #417]	@ 0x1a1
 802e72a:	6a04      	ldr	r4, [r0, #32]
 802e72c:	7a64      	ldrb	r4, [r4, #9]
 802e72e:	f883 41a2 	strb.w	r4, [r3, #418]	@ 0x1a2
 802e732:	6a04      	ldr	r4, [r0, #32]
 802e734:	7aa4      	ldrb	r4, [r4, #10]
 802e736:	f883 41a3 	strb.w	r4, [r3, #419]	@ 0x1a3
 802e73a:	f002 0301 	and.w	r3, r2, #1
 802e73e:	f002 0204 	and.w	r2, r2, #4
 802e742:	7f0c      	ldrb	r4, [r1, #28]
 802e744:	7f4d      	ldrb	r5, [r1, #29]
 802e746:	6a00      	ldr	r0, [r0, #32]
 802e748:	7fce      	ldrb	r6, [r1, #31]
 802e74a:	4323      	orrs	r3, r4
 802e74c:	432a      	orrs	r2, r5
 802e74e:	770b      	strb	r3, [r1, #28]
 802e750:	774a      	strb	r2, [r1, #29]
 802e752:	2309      	movs	r3, #9
 802e754:	7a02      	ldrb	r2, [r0, #8]
 802e756:	778a      	strb	r2, [r1, #30]
 802e758:	f016 0201 	ands.w	r2, r6, #1
 802e75c:	bf08      	it	eq
 802e75e:	230a      	moveq	r3, #10
 802e760:	5cc3      	ldrb	r3, [r0, r3]
 802e762:	f003 0307 	and.w	r3, r3, #7
 802e766:	f881 3022 	strb.w	r3, [r1, #34]	@ 0x22
 802e76a:	230a      	movs	r3, #10
 802e76c:	2a00      	cmp	r2, #0
 802e76e:	bf08      	it	eq
 802e770:	2309      	moveq	r3, #9
 802e772:	5cc0      	ldrb	r0, [r0, r3]
 802e774:	f000 0007 	and.w	r0, r0, #7
 802e778:	f881 0023 	strb.w	r0, [r1, #35]	@ 0x23
 802e77c:	bd70      	pop	{r4, r5, r6, pc}
 802e77e:	bf00      	nop

0802e780 <__arm_cp.30_0>:
 802e780:	20009f5c 	.word	0x20009f5c

0802e784 <SMP_Set_Key_Generation_Method>:
 802e784:	b5b0      	push	{r4, r5, r7, lr}
 802e786:	7e81      	ldrb	r1, [r0, #26]
 802e788:	4604      	mov	r4, r0
 802e78a:	07c8      	lsls	r0, r1, #31
 802e78c:	d001      	beq.n	802e792 <SMP_Set_Key_Generation_Method+0xe>
 802e78e:	0788      	lsls	r0, r1, #30
 802e790:	d420      	bmi.n	802e7d4 <SMP_Set_Key_Generation_Method+0x50>
 802e792:	7fe0      	ldrb	r0, [r4, #31]
 802e794:	f010 0008 	ands.w	r0, r0, #8
 802e798:	d004      	beq.n	802e7a4 <SMP_Set_Key_Generation_Method+0x20>
 802e79a:	0789      	lsls	r1, r1, #30
 802e79c:	d002      	beq.n	802e7a4 <SMP_Set_Key_Generation_Method+0x20>
 802e79e:	2003      	movs	r0, #3
 802e7a0:	7660      	strb	r0, [r4, #25]
 802e7a2:	e01c      	b.n	802e7de <SMP_Set_Key_Generation_Method+0x5a>
 802e7a4:	7f61      	ldrb	r1, [r4, #29]
 802e7a6:	f011 0f05 	tst.w	r1, #5
 802e7aa:	d011      	beq.n	802e7d0 <SMP_Set_Key_Generation_Method+0x4c>
 802e7ac:	7ee1      	ldrb	r1, [r4, #27]
 802e7ae:	4b21      	ldr	r3, [pc, #132]	@ (802e834 <__arm_cp.31_0>)
 802e7b0:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 802e7b4:	4413      	add	r3, r2
 802e7b6:	4a20      	ldr	r2, [pc, #128]	@ (802e838 <__arm_cp.31_1>)
 802e7b8:	f892 5099 	ldrb.w	r5, [r2, #153]	@ 0x99
 802e7bc:	5d5b      	ldrb	r3, [r3, r5]
 802e7be:	7663      	strb	r3, [r4, #25]
 802e7c0:	b9a3      	cbnz	r3, 802e7ec <SMP_Set_Key_Generation_Method+0x68>
 802e7c2:	b978      	cbnz	r0, 802e7e4 <SMP_Set_Key_Generation_Method+0x60>
 802e7c4:	2901      	cmp	r1, #1
 802e7c6:	d10f      	bne.n	802e7e8 <SMP_Set_Key_Generation_Method+0x64>
 802e7c8:	f892 0099 	ldrb.w	r0, [r2, #153]	@ 0x99
 802e7cc:	2801      	cmp	r0, #1
 802e7ce:	d10b      	bne.n	802e7e8 <SMP_Set_Key_Generation_Method+0x64>
 802e7d0:	2001      	movs	r0, #1
 802e7d2:	e00a      	b.n	802e7ea <SMP_Set_Key_Generation_Method+0x66>
 802e7d4:	2003      	movs	r0, #3
 802e7d6:	7660      	strb	r0, [r4, #25]
 802e7d8:	7fe0      	ldrb	r0, [r4, #31]
 802e7da:	0700      	lsls	r0, r0, #28
 802e7dc:	d506      	bpl.n	802e7ec <SMP_Set_Key_Generation_Method+0x68>
 802e7de:	f7fe fd79 	bl	802d2d4 <SMP_Init_OOB_SC>
 802e7e2:	e003      	b.n	802e7ec <SMP_Set_Key_Generation_Method+0x68>
 802e7e4:	2004      	movs	r0, #4
 802e7e6:	e000      	b.n	802e7ea <SMP_Set_Key_Generation_Method+0x66>
 802e7e8:	2002      	movs	r0, #2
 802e7ea:	7660      	strb	r0, [r4, #25]
 802e7ec:	4812      	ldr	r0, [pc, #72]	@ (802e838 <__arm_cp.31_1>)
 802e7ee:	7e61      	ldrb	r1, [r4, #25]
 802e7f0:	f890 208d 	ldrb.w	r2, [r0, #141]	@ 0x8d
 802e7f4:	07d2      	lsls	r2, r2, #31
 802e7f6:	d003      	beq.n	802e800 <SMP_Set_Key_Generation_Method+0x7c>
 802e7f8:	2901      	cmp	r1, #1
 802e7fa:	bf04      	itt	eq
 802e7fc:	2003      	moveq	r0, #3
 802e7fe:	bdb0      	popeq	{r4, r5, r7, pc}
 802e800:	2902      	cmp	r1, #2
 802e802:	d114      	bne.n	802e82e <SMP_Set_Key_Generation_Method+0xaa>
 802e804:	7fe1      	ldrb	r1, [r4, #31]
 802e806:	0709      	lsls	r1, r1, #28
 802e808:	bf44      	itt	mi
 802e80a:	2100      	movmi	r1, #0
 802e80c:	f880 11a0 	strbmi.w	r1, [r0, #416]	@ 0x1a0
 802e810:	f890 0094 	ldrb.w	r0, [r0, #148]	@ 0x94
 802e814:	b138      	cbz	r0, 802e826 <SMP_Set_Key_Generation_Method+0xa2>
 802e816:	8821      	ldrh	r1, [r4, #0]
 802e818:	2001      	movs	r0, #1
 802e81a:	f7f8 fd89 	bl	8027330 <EVT_aci_gap_pass_key_req>
 802e81e:	7f60      	ldrb	r0, [r4, #29]
 802e820:	f000 00ef 	and.w	r0, r0, #239	@ 0xef
 802e824:	e002      	b.n	802e82c <SMP_Set_Key_Generation_Method+0xa8>
 802e826:	7f60      	ldrb	r0, [r4, #29]
 802e828:	f040 0010 	orr.w	r0, r0, #16
 802e82c:	7760      	strb	r0, [r4, #29]
 802e82e:	2000      	movs	r0, #0
 802e830:	bdb0      	pop	{r4, r5, r7, pc}
 802e832:	bf00      	nop

0802e834 <__arm_cp.31_0>:
 802e834:	08031ec8 	.word	0x08031ec8

0802e838 <__arm_cp.31_1>:
 802e838:	20009f5c 	.word	0x20009f5c

0802e83c <SMP_Generate_STK>:
 802e83c:	b5bf      	push	{r0, r1, r2, r3, r4, r5, r7, lr}
 802e83e:	466d      	mov	r5, sp
 802e840:	4604      	mov	r4, r0
 802e842:	4629      	mov	r1, r5
 802e844:	f7ff fe9c 	bl	802e580 <SMP_Get_TK>
 802e848:	f104 0170 	add.w	r1, r4, #112	@ 0x70
 802e84c:	f104 0260 	add.w	r2, r4, #96	@ 0x60
 802e850:	f104 0334 	add.w	r3, r4, #52	@ 0x34
 802e854:	4628      	mov	r0, r5
 802e856:	f7fd ffe5 	bl	802c824 <SMA_Generate_STK>
 802e85a:	bdbf      	pop	{r0, r1, r2, r3, r4, r5, r7, pc}

0802e85c <OUTLINED_FUNCTION_0>:
 802e85c:	4628      	mov	r0, r5
 802e85e:	2105      	movs	r1, #5
 802e860:	2210      	movs	r2, #16
 802e862:	f7fd bcfe 	b.w	802c262 <ACL_Get_Data>

0802e866 <OUTLINED_FUNCTION_1>:
 802e866:	2210      	movs	r2, #16
 802e868:	7101      	strb	r1, [r0, #4]
 802e86a:	4628      	mov	r0, r5
 802e86c:	2105      	movs	r1, #5
 802e86e:	f7fd bd18 	b.w	802c2a2 <ACL_Set_Data>

0802e872 <OUTLINED_FUNCTION_2>:
 802e872:	f890 1039 	ldrb.w	r1, [r0, #57]	@ 0x39
 802e876:	f001 01fb 	and.w	r1, r1, #251	@ 0xfb
 802e87a:	f880 1039 	strb.w	r1, [r0, #57]	@ 0x39
 802e87e:	4770      	bx	lr

0802e880 <OUTLINED_FUNCTION_3>:
 802e880:	4621      	mov	r1, r4
 802e882:	f7fe be3c 	b.w	802d4fe <SMP_Send_PDU>

0802e886 <OUTLINED_FUNCTION_4>:
 802e886:	f104 0134 	add.w	r1, r4, #52	@ 0x34
 802e88a:	4628      	mov	r0, r5
 802e88c:	2210      	movs	r2, #16
 802e88e:	f7f5 bee3 	b.w	8024658 <ble_memcmp>

0802e892 <OUTLINED_FUNCTION_5>:
 802e892:	2210      	movs	r2, #16
 802e894:	f7f5 be58 	b.w	8024548 <ble_memcpy>

0802e898 <SMP_Rep_Attempts_Protection>:
 802e898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802e89a:	493b      	ldr	r1, [pc, #236]	@ (802e988 <__arm_cp.0_0>)
 802e89c:	f891 2098 	ldrb.w	r2, [r1, #152]	@ 0x98
 802e8a0:	0792      	lsls	r2, r2, #30
 802e8a2:	d40c      	bmi.n	802e8be <SMP_Rep_Attempts_Protection+0x26>
 802e8a4:	7dc2      	ldrb	r2, [r0, #23]
 802e8a6:	2af1      	cmp	r2, #241	@ 0xf1
 802e8a8:	d009      	beq.n	802e8be <SMP_Rep_Attempts_Protection+0x26>
 802e8aa:	7fc3      	ldrb	r3, [r0, #31]
 802e8ac:	07dc      	lsls	r4, r3, #31
 802e8ae:	f04f 0482 	mov.w	r4, #130	@ 0x82
 802e8b2:	bf08      	it	eq
 802e8b4:	2480      	moveq	r4, #128	@ 0x80
 802e8b6:	4294      	cmp	r4, r2
 802e8b8:	d302      	bcc.n	802e8c0 <SMP_Rep_Attempts_Protection+0x28>
 802e8ba:	2b40      	cmp	r3, #64	@ 0x40
 802e8bc:	d200      	bcs.n	802e8c0 <SMP_Rep_Attempts_Protection+0x28>
 802e8be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802e8c0:	7e02      	ldrb	r2, [r0, #24]
 802e8c2:	f101 06c0 	add.w	r6, r1, #192	@ 0xc0
 802e8c6:	1cc4      	adds	r4, r0, #3
 802e8c8:	2700      	movs	r7, #0
 802e8ca:	f042 0201 	orr.w	r2, r2, #1
 802e8ce:	4635      	mov	r5, r6
 802e8d0:	7602      	strb	r2, [r0, #24]
 802e8d2:	1cf8      	adds	r0, r7, #3
 802e8d4:	d008      	beq.n	802e8e8 <SMP_Rep_Attempts_Protection+0x50>
 802e8d6:	1ca8      	adds	r0, r5, #2
 802e8d8:	4621      	mov	r1, r4
 802e8da:	2206      	movs	r2, #6
 802e8dc:	f7f5 febc 	bl	8024658 <ble_memcmp>
 802e8e0:	b158      	cbz	r0, 802e8fa <SMP_Rep_Attempts_Protection+0x62>
 802e8e2:	3508      	adds	r5, #8
 802e8e4:	3f01      	subs	r7, #1
 802e8e6:	e7f4      	b.n	802e8d2 <SMP_Rep_Attempts_Protection+0x3a>
 802e8e8:	2500      	movs	r5, #0
 802e8ea:	4630      	mov	r0, r6
 802e8ec:	2d03      	cmp	r5, #3
 802e8ee:	d01b      	beq.n	802e928 <SMP_Rep_Attempts_Protection+0x90>
 802e8f0:	7801      	ldrb	r1, [r0, #0]
 802e8f2:	b319      	cbz	r1, 802e93c <SMP_Rep_Attempts_Protection+0xa4>
 802e8f4:	3008      	adds	r0, #8
 802e8f6:	3501      	adds	r5, #1
 802e8f8:	e7f8      	b.n	802e8ec <SMP_Rep_Attempts_Protection+0x54>
 802e8fa:	427c      	negs	r4, r7
 802e8fc:	200d      	movs	r0, #13
 802e8fe:	f360 241f 	bfi	r4, r0, #8, #24
 802e902:	4620      	mov	r0, r4
 802e904:	f7db f8c5 	bl	8009a92 <BLEPLAT_TimerStop>
 802e908:	7829      	ldrb	r1, [r5, #0]
 802e90a:	f001 003f 	and.w	r0, r1, #63	@ 0x3f
 802e90e:	f060 027f 	orn	r2, r0, #127	@ 0x7f
 802e912:	0793      	lsls	r3, r2, #30
 802e914:	702a      	strb	r2, [r5, #0]
 802e916:	d413      	bmi.n	802e940 <SMP_Rep_Attempts_Protection+0xa8>
 802e918:	b2d2      	uxtb	r2, r2
 802e91a:	07d2      	lsls	r2, r2, #31
 802e91c:	d114      	bne.n	802e948 <SMP_Rep_Attempts_Protection+0xb0>
 802e91e:	f060 007e 	orn	r0, r0, #126	@ 0x7e
 802e922:	f643 2198 	movw	r1, #15000	@ 0x3a98
 802e926:	e015      	b.n	802e954 <SMP_Rep_Attempts_Protection+0xbc>
 802e928:	2500      	movs	r5, #0
 802e92a:	4630      	mov	r0, r6
 802e92c:	2d03      	cmp	r5, #3
 802e92e:	d014      	beq.n	802e95a <SMP_Rep_Attempts_Protection+0xc2>
 802e930:	7801      	ldrb	r1, [r0, #0]
 802e932:	0649      	lsls	r1, r1, #25
 802e934:	d402      	bmi.n	802e93c <SMP_Rep_Attempts_Protection+0xa4>
 802e936:	3008      	adds	r0, #8
 802e938:	3501      	adds	r5, #1
 802e93a:	e7f7      	b.n	802e92c <SMP_Rep_Attempts_Protection+0x94>
 802e93c:	4606      	mov	r6, r0
 802e93e:	e011      	b.n	802e964 <SMP_Rep_Attempts_Protection+0xcc>
 802e940:	f060 007e 	orn	r0, r0, #126	@ 0x7e
 802e944:	4911      	ldr	r1, [pc, #68]	@ (802e98c <__arm_cp.0_1>)
 802e946:	e005      	b.n	802e954 <SMP_Rep_Attempts_Protection+0xbc>
 802e948:	f001 003c 	and.w	r0, r1, #60	@ 0x3c
 802e94c:	f64a 71c8 	movw	r1, #45000	@ 0xafc8
 802e950:	f060 007d 	orn	r0, r0, #125	@ 0x7d
 802e954:	7028      	strb	r0, [r5, #0]
 802e956:	b2a0      	uxth	r0, r4
 802e958:	e011      	b.n	802e97e <SMP_Rep_Attempts_Protection+0xe6>
 802e95a:	f44f 6050 	mov.w	r0, #3328	@ 0xd00
 802e95e:	f7db f898 	bl	8009a92 <BLEPLAT_TimerStop>
 802e962:	2500      	movs	r5, #0
 802e964:	1cb0      	adds	r0, r6, #2
 802e966:	4621      	mov	r1, r4
 802e968:	2206      	movs	r2, #6
 802e96a:	f7f5 fded 	bl	8024548 <ble_memcpy>
 802e96e:	2080      	movs	r0, #128	@ 0x80
 802e970:	f241 3188 	movw	r1, #5000	@ 0x1388
 802e974:	7030      	strb	r0, [r6, #0]
 802e976:	200d      	movs	r0, #13
 802e978:	f360 251f 	bfi	r5, r0, #8, #24
 802e97c:	4628      	mov	r0, r5
 802e97e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 802e982:	f7db b876 	b.w	8009a72 <BLEPLAT_TimerStart>
 802e986:	bf00      	nop

0802e988 <__arm_cp.0_0>:
 802e988:	20009f5c 	.word	0x20009f5c

0802e98c <__arm_cp.0_1>:
 802e98c:	00020f58 	.word	0x00020f58

0802e990 <SMP_Rep_Attempts_Timeout_Cb>:
 802e990:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802e994:	f8df 9054 	ldr.w	r9, [pc, #84]	@ 802e9ec <__arm_cp.1_0>
 802e998:	2201      	movs	r2, #1
 802e99a:	f8df 8054 	ldr.w	r8, [pc, #84]	@ 802e9f0 <__arm_cp.1_1>
 802e99e:	2700      	movs	r7, #0
 802e9a0:	2600      	movs	r6, #0
 802e9a2:	eb09 00c0 	add.w	r0, r9, r0, lsl #3
 802e9a6:	f890 10c0 	ldrb.w	r1, [r0, #192]	@ 0xc0
 802e9aa:	f100 04c2 	add.w	r4, r0, #194	@ 0xc2
 802e9ae:	f362 119f 	bfi	r1, r2, #6, #26
 802e9b2:	f880 10c0 	strb.w	r1, [r0, #192]	@ 0xc0
 802e9b6:	f898 1016 	ldrb.w	r1, [r8, #22]
 802e9ba:	428e      	cmp	r6, r1
 802e9bc:	bf28      	it	cs
 802e9be:	e8bd 83f8 	ldmiacs.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802e9c2:	f8d9 00bc 	ldr.w	r0, [r9, #188]	@ 0xbc
 802e9c6:	5bc2      	ldrh	r2, [r0, r7]
 802e9c8:	b162      	cbz	r2, 802e9e4 <SMP_Rep_Attempts_Timeout_Cb+0x54>
 802e9ca:	19c5      	adds	r5, r0, r7
 802e9cc:	4621      	mov	r1, r4
 802e9ce:	2206      	movs	r2, #6
 802e9d0:	1ce8      	adds	r0, r5, #3
 802e9d2:	f7f5 fe41 	bl	8024658 <ble_memcmp>
 802e9d6:	f898 1016 	ldrb.w	r1, [r8, #22]
 802e9da:	b918      	cbnz	r0, 802e9e4 <SMP_Rep_Attempts_Timeout_Cb+0x54>
 802e9dc:	7e28      	ldrb	r0, [r5, #24]
 802e9de:	f000 00fe 	and.w	r0, r0, #254	@ 0xfe
 802e9e2:	7628      	strb	r0, [r5, #24]
 802e9e4:	3780      	adds	r7, #128	@ 0x80
 802e9e6:	3601      	adds	r6, #1
 802e9e8:	e7e7      	b.n	802e9ba <SMP_Rep_Attempts_Timeout_Cb+0x2a>
 802e9ea:	bf00      	nop

0802e9ec <__arm_cp.1_0>:
 802e9ec:	20009f5c 	.word	0x20009f5c

0802e9f0 <__arm_cp.1_1>:
 802e9f0:	20009f34 	.word	0x20009f34

0802e9f4 <SMP_Get_Rep_Attempts_Timeout_Status>:
 802e9f4:	2100      	movs	r1, #0
 802e9f6:	f000 b801 	b.w	802e9fc <SMP_Search_Rep_Attempts_List>
	...

0802e9fc <SMP_Search_Rep_Attempts_List>:
 802e9fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802e9fe:	4607      	mov	r7, r0
 802ea00:	4812      	ldr	r0, [pc, #72]	@ (802ea4c <__arm_cp.3_0>)
 802ea02:	460e      	mov	r6, r1
 802ea04:	2500      	movs	r5, #0
 802ea06:	f100 04c0 	add.w	r4, r0, #192	@ 0xc0
 802ea0a:	2d03      	cmp	r5, #3
 802ea0c:	d019      	beq.n	802ea42 <SMP_Search_Rep_Attempts_List+0x46>
 802ea0e:	1ca0      	adds	r0, r4, #2
 802ea10:	4639      	mov	r1, r7
 802ea12:	2206      	movs	r2, #6
 802ea14:	f7f5 fe20 	bl	8024658 <ble_memcmp>
 802ea18:	b110      	cbz	r0, 802ea20 <SMP_Search_Rep_Attempts_List+0x24>
 802ea1a:	3408      	adds	r4, #8
 802ea1c:	3501      	adds	r5, #1
 802ea1e:	e7f4      	b.n	802ea0a <SMP_Search_Rep_Attempts_List+0xe>
 802ea20:	b15e      	cbz	r6, 802ea3a <SMP_Search_Rep_Attempts_List+0x3e>
 802ea22:	200d      	movs	r0, #13
 802ea24:	f360 251f 	bfi	r5, r0, #8, #24
 802ea28:	4628      	mov	r0, r5
 802ea2a:	f7db f832 	bl	8009a92 <BLEPLAT_TimerStop>
 802ea2e:	4620      	mov	r0, r4
 802ea30:	2100      	movs	r1, #0
 802ea32:	2208      	movs	r2, #8
 802ea34:	f7f5 fdd8 	bl	80245e8 <ble_memset>
 802ea38:	e003      	b.n	802ea42 <SMP_Search_Rep_Attempts_List+0x46>
 802ea3a:	f994 0000 	ldrsb.w	r0, [r4]
 802ea3e:	2800      	cmp	r0, #0
 802ea40:	d401      	bmi.n	802ea46 <SMP_Search_Rep_Attempts_List+0x4a>
 802ea42:	2000      	movs	r0, #0
 802ea44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802ea46:	2001      	movs	r0, #1
 802ea48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802ea4a:	bf00      	nop

0802ea4c <__arm_cp.3_0>:
 802ea4c:	20009f5c 	.word	0x20009f5c

0802ea50 <SMP_Clear_Rep_Attempts_Timeout_Status>:
 802ea50:	2101      	movs	r1, #1
 802ea52:	f7ff bfd3 	b.w	802e9fc <SMP_Search_Rep_Attempts_List>
	...

0802ea58 <SMP_SC_Continue_In_SC_Pairing>:
 802ea58:	b510      	push	{r4, lr}
 802ea5a:	4604      	mov	r4, r0
 802ea5c:	8800      	ldrh	r0, [r0, #0]
 802ea5e:	f000 f813 	bl	802ea88 <SMP_Is_Another_SC_Pairing_Ongoing>
 802ea62:	b108      	cbz	r0, 802ea68 <SMP_SC_Continue_In_SC_Pairing+0x10>
 802ea64:	2008      	movs	r0, #8
 802ea66:	bd10      	pop	{r4, pc}
 802ea68:	7fe0      	ldrb	r0, [r4, #31]
 802ea6a:	f040 0002 	orr.w	r0, r0, #2
 802ea6e:	77e0      	strb	r0, [r4, #31]
 802ea70:	4804      	ldr	r0, [pc, #16]	@ (802ea84 <__arm_cp.0_0>)
 802ea72:	f890 109a 	ldrb.w	r1, [r0, #154]	@ 0x9a
 802ea76:	f041 0104 	orr.w	r1, r1, #4
 802ea7a:	f880 109a 	strb.w	r1, [r0, #154]	@ 0x9a
 802ea7e:	2000      	movs	r0, #0
 802ea80:	bd10      	pop	{r4, pc}
 802ea82:	bf00      	nop

0802ea84 <__arm_cp.0_0>:
 802ea84:	20009f5c 	.word	0x20009f5c

0802ea88 <SMP_Is_Another_SC_Pairing_Ongoing>:
 802ea88:	b510      	push	{r4, lr}
 802ea8a:	4a0d      	ldr	r2, [pc, #52]	@ (802eac0 <__arm_cp.1_1>)
 802ea8c:	490b      	ldr	r1, [pc, #44]	@ (802eabc <__arm_cp.1_0>)
 802ea8e:	f8d2 20bc 	ldr.w	r2, [r2, #188]	@ 0xbc
 802ea92:	7d89      	ldrb	r1, [r1, #22]
 802ea94:	f102 031f 	add.w	r3, r2, #31
 802ea98:	2200      	movs	r2, #0
 802ea9a:	4291      	cmp	r1, r2
 802ea9c:	d009      	beq.n	802eab2 <SMP_Is_Another_SC_Pairing_Ongoing+0x2a>
 802ea9e:	f833 4c1f 	ldrh.w	r4, [r3, #-31]
 802eaa2:	4284      	cmp	r4, r0
 802eaa4:	d002      	beq.n	802eaac <SMP_Is_Another_SC_Pairing_Ongoing+0x24>
 802eaa6:	781c      	ldrb	r4, [r3, #0]
 802eaa8:	07a4      	lsls	r4, r4, #30
 802eaaa:	d402      	bmi.n	802eab2 <SMP_Is_Another_SC_Pairing_Ongoing+0x2a>
 802eaac:	3380      	adds	r3, #128	@ 0x80
 802eaae:	3201      	adds	r2, #1
 802eab0:	e7f3      	b.n	802ea9a <SMP_Is_Another_SC_Pairing_Ongoing+0x12>
 802eab2:	2000      	movs	r0, #0
 802eab4:	428a      	cmp	r2, r1
 802eab6:	bf38      	it	cc
 802eab8:	2001      	movcc	r0, #1
 802eaba:	bd10      	pop	{r4, pc}

0802eabc <__arm_cp.1_0>:
 802eabc:	20009f34 	.word	0x20009f34

0802eac0 <__arm_cp.1_1>:
 802eac0:	20009f5c 	.word	0x20009f5c

0802eac4 <SMP_SC_Keypress_Notification_Rx_Handler>:
 802eac4:	b580      	push	{r7, lr}
 802eac6:	7fca      	ldrb	r2, [r1, #31]
 802eac8:	06d2      	lsls	r2, r2, #27
 802eaca:	d505      	bpl.n	802ead8 <SMP_SC_Keypress_Notification_Rx_Handler+0x14>
 802eacc:	7e4a      	ldrb	r2, [r1, #25]
 802eace:	2a02      	cmp	r2, #2
 802ead0:	bf04      	itt	eq
 802ead2:	7eca      	ldrbeq	r2, [r1, #27]
 802ead4:	2a02      	cmpeq	r2, #2
 802ead6:	d001      	beq.n	802eadc <SMP_SC_Keypress_Notification_Rx_Handler+0x18>
 802ead8:	2000      	movs	r0, #0
 802eada:	bd80      	pop	{r7, pc}
 802eadc:	f991 2017 	ldrsb.w	r2, [r1, #23]
 802eae0:	f112 0f7e 	cmn.w	r2, #126	@ 0x7e
 802eae4:	dcf8      	bgt.n	802ead8 <SMP_SC_Keypress_Notification_Rx_Handler+0x14>
 802eae6:	6a00      	ldr	r0, [r0, #32]
 802eae8:	8809      	ldrh	r1, [r1, #0]
 802eaea:	7942      	ldrb	r2, [r0, #5]
 802eaec:	2001      	movs	r0, #1
 802eaee:	f7f8 fc37 	bl	8027360 <EVT_aci_gap_keypress_notification>
 802eaf2:	e7f1      	b.n	802ead8 <SMP_SC_Keypress_Notification_Rx_Handler+0x14>

0802eaf4 <SMP_SC_Public_Key_Generation_Process>:
 802eaf4:	b510      	push	{r4, lr}
 802eaf6:	4c09      	ldr	r4, [pc, #36]	@ (802eb1c <__arm_cp.4_0>)
 802eaf8:	f894 009a 	ldrb.w	r0, [r4, #154]	@ 0x9a
 802eafc:	f000 00d0 	and.w	r0, r0, #208	@ 0xd0
 802eb00:	2840      	cmp	r0, #64	@ 0x40
 802eb02:	d102      	bne.n	802eb0a <SMP_SC_Public_Key_Generation_Process+0x16>
 802eb04:	f7f9 fb54 	bl	80281b0 <hci_le_read_local_p256_public_key>
 802eb08:	b100      	cbz	r0, 802eb0c <SMP_SC_Public_Key_Generation_Process+0x18>
 802eb0a:	bd10      	pop	{r4, pc}
 802eb0c:	f894 009a 	ldrb.w	r0, [r4, #154]	@ 0x9a
 802eb10:	2102      	movs	r1, #2
 802eb12:	f361 109f 	bfi	r0, r1, #6, #26
 802eb16:	f884 009a 	strb.w	r0, [r4, #154]	@ 0x9a
 802eb1a:	bd10      	pop	{r4, pc}

0802eb1c <__arm_cp.4_0>:
 802eb1c:	20009f5c 	.word	0x20009f5c

0802eb20 <SMP_Read_Local_P256key_Complete_Handler>:
 802eb20:	4a08      	ldr	r2, [pc, #32]	@ (802eb44 <__arm_cp.5_0>)
 802eb22:	f892 309a 	ldrb.w	r3, [r2, #154]	@ 0x9a
 802eb26:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 802eb2a:	f882 309a 	strb.w	r3, [r2, #154]	@ 0x9a
 802eb2e:	b120      	cbz	r0, 802eb3a <SMP_Read_Local_P256key_Complete_Handler+0x1a>
 802eb30:	f043 0040 	orr.w	r0, r3, #64	@ 0x40
 802eb34:	f882 009a 	strb.w	r0, [r2, #154]	@ 0x9a
 802eb38:	4770      	bx	lr
 802eb3a:	f502 7090 	add.w	r0, r2, #288	@ 0x120
 802eb3e:	2240      	movs	r2, #64	@ 0x40
 802eb40:	f7f5 bd02 	b.w	8024548 <ble_memcpy>

0802eb44 <__arm_cp.5_0>:
 802eb44:	20009f5c 	.word	0x20009f5c

0802eb48 <SMP_SC_Local_Public_Key_Unavailable>:
 802eb48:	4802      	ldr	r0, [pc, #8]	@ (802eb54 <__arm_cp.6_0>)
 802eb4a:	2140      	movs	r1, #64	@ 0x40
 802eb4c:	f500 7090 	add.w	r0, r0, #288	@ 0x120
 802eb50:	f000 bbaf 	b.w	802f2b2 <Is_Empty>

0802eb54 <__arm_cp.6_0>:
 802eb54:	20009f5c 	.word	0x20009f5c

0802eb58 <SMP_SC_Public_Key_Exchanged>:
 802eb58:	b510      	push	{r4, lr}
 802eb5a:	4604      	mov	r4, r0
 802eb5c:	f7ff fff4 	bl	802eb48 <SMP_SC_Local_Public_Key_Unavailable>
 802eb60:	b148      	cbz	r0, 802eb76 <SMP_SC_Public_Key_Exchanged+0x1e>
 802eb62:	4811      	ldr	r0, [pc, #68]	@ (802eba8 <__arm_cp.7_0>)
 802eb64:	f990 109a 	ldrsb.w	r1, [r0, #154]	@ 0x9a
 802eb68:	2900      	cmp	r1, #0
 802eb6a:	d41b      	bmi.n	802eba4 <SMP_SC_Public_Key_Exchanged+0x4c>
 802eb6c:	f041 0140 	orr.w	r1, r1, #64	@ 0x40
 802eb70:	f880 109a 	strb.w	r1, [r0, #154]	@ 0x9a
 802eb74:	e016      	b.n	802eba4 <SMP_SC_Public_Key_Exchanged+0x4c>
 802eb76:	7fe0      	ldrb	r0, [r4, #31]
 802eb78:	f000 01c0 	and.w	r1, r0, #192	@ 0xc0
 802eb7c:	29c0      	cmp	r1, #192	@ 0xc0
 802eb7e:	bf04      	itt	eq
 802eb80:	2001      	moveq	r0, #1
 802eb82:	bd10      	popeq	{r4, pc}
 802eb84:	f010 0f41 	tst.w	r0, #65	@ 0x41
 802eb88:	d006      	beq.n	802eb98 <SMP_SC_Public_Key_Exchanged+0x40>
 802eb8a:	07c1      	lsls	r1, r0, #31
 802eb8c:	d00a      	beq.n	802eba4 <SMP_SC_Public_Key_Exchanged+0x4c>
 802eb8e:	b240      	sxtb	r0, r0
 802eb90:	f1b0 3fff 	cmp.w	r0, #4294967295	@ 0xffffffff
 802eb94:	dc06      	bgt.n	802eba4 <SMP_SC_Public_Key_Exchanged+0x4c>
 802eb96:	e002      	b.n	802eb9e <SMP_SC_Public_Key_Exchanged+0x46>
 802eb98:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 802eb9c:	77e0      	strb	r0, [r4, #31]
 802eb9e:	4620      	mov	r0, r4
 802eba0:	f000 f804 	bl	802ebac <SMP_SC_Send_Pairing_Public_Key>
 802eba4:	2000      	movs	r0, #0
 802eba6:	bd10      	pop	{r4, pc}

0802eba8 <__arm_cp.7_0>:
 802eba8:	20009f5c 	.word	0x20009f5c

0802ebac <SMP_SC_Send_Pairing_Public_Key>:
 802ebac:	b5b0      	push	{r4, r5, r7, lr}
 802ebae:	2141      	movs	r1, #65	@ 0x41
 802ebb0:	4604      	mov	r4, r0
 802ebb2:	f7fe fc9d 	bl	802d4f0 <SMP_New_PDU>
 802ebb6:	b180      	cbz	r0, 802ebda <SMP_SC_Send_Pairing_Public_Key+0x2e>
 802ebb8:	4605      	mov	r5, r0
 802ebba:	6a00      	ldr	r0, [r0, #32]
 802ebbc:	210c      	movs	r1, #12
 802ebbe:	2240      	movs	r2, #64	@ 0x40
 802ebc0:	7101      	strb	r1, [r0, #4]
 802ebc2:	4809      	ldr	r0, [pc, #36]	@ (802ebe8 <__arm_cp.8_0>)
 802ebc4:	2105      	movs	r1, #5
 802ebc6:	f500 7390 	add.w	r3, r0, #288	@ 0x120
 802ebca:	4628      	mov	r0, r5
 802ebcc:	f7fd fb69 	bl	802c2a2 <ACL_Set_Data>
 802ebd0:	4628      	mov	r0, r5
 802ebd2:	4621      	mov	r1, r4
 802ebd4:	f7fe fc93 	bl	802d4fe <SMP_Send_PDU>
 802ebd8:	b100      	cbz	r0, 802ebdc <SMP_SC_Send_Pairing_Public_Key+0x30>
 802ebda:	bdb0      	pop	{r4, r5, r7, pc}
 802ebdc:	7fe0      	ldrb	r0, [r4, #31]
 802ebde:	f040 0040 	orr.w	r0, r0, #64	@ 0x40
 802ebe2:	77e0      	strb	r0, [r4, #31]
 802ebe4:	bdb0      	pop	{r4, r5, r7, pc}
 802ebe6:	bf00      	nop

0802ebe8 <__arm_cp.8_0>:
 802ebe8:	20009f5c 	.word	0x20009f5c

0802ebec <SMP_Generate_DHkey_Complete_Handler>:
 802ebec:	b510      	push	{r4, lr}
 802ebee:	4c13      	ldr	r4, [pc, #76]	@ (802ec3c <__arm_cp.9_0>)
 802ebf0:	f894 209a 	ldrb.w	r2, [r4, #154]	@ 0x9a
 802ebf4:	06d2      	lsls	r2, r2, #27
 802ebf6:	d520      	bpl.n	802ec3a <SMP_Generate_DHkey_Complete_Handler+0x4e>
 802ebf8:	b168      	cbz	r0, 802ec16 <SMP_Generate_DHkey_Complete_Handler+0x2a>
 802ebfa:	4811      	ldr	r0, [pc, #68]	@ (802ec40 <__arm_cp.9_1>)
 802ebfc:	7d81      	ldrb	r1, [r0, #22]
 802ebfe:	f8d4 00bc 	ldr.w	r0, [r4, #188]	@ 0xbc
 802ec02:	b1d1      	cbz	r1, 802ec3a <SMP_Generate_DHkey_Complete_Handler+0x4e>
 802ec04:	8802      	ldrh	r2, [r0, #0]
 802ec06:	b11a      	cbz	r2, 802ec10 <SMP_Generate_DHkey_Complete_Handler+0x24>
 802ec08:	f890 2020 	ldrb.w	r2, [r0, #32]
 802ec0c:	0692      	lsls	r2, r2, #26
 802ec0e:	d40c      	bmi.n	802ec2a <SMP_Generate_DHkey_Complete_Handler+0x3e>
 802ec10:	3080      	adds	r0, #128	@ 0x80
 802ec12:	3901      	subs	r1, #1
 802ec14:	e7f5      	b.n	802ec02 <SMP_Generate_DHkey_Complete_Handler+0x16>
 802ec16:	f504 7080 	add.w	r0, r4, #256	@ 0x100
 802ec1a:	2220      	movs	r2, #32
 802ec1c:	f7f5 fc94 	bl	8024548 <ble_memcpy>
 802ec20:	f894 009a 	ldrb.w	r0, [r4, #154]	@ 0x9a
 802ec24:	f040 0020 	orr.w	r0, r0, #32
 802ec28:	e005      	b.n	802ec36 <SMP_Generate_DHkey_Complete_Handler+0x4a>
 802ec2a:	f000 fa79 	bl	802f120 <OUTLINED_FUNCTION_0>
 802ec2e:	f894 009a 	ldrb.w	r0, [r4, #154]	@ 0x9a
 802ec32:	f020 0030 	bic.w	r0, r0, #48	@ 0x30
 802ec36:	f884 009a 	strb.w	r0, [r4, #154]	@ 0x9a
 802ec3a:	bd10      	pop	{r4, pc}

0802ec3c <__arm_cp.9_0>:
 802ec3c:	20009f5c 	.word	0x20009f5c

0802ec40 <__arm_cp.9_1>:
 802ec40:	20009f34 	.word	0x20009f34

0802ec44 <SMP_SC_Pairing_Public_Key_Rx_Handler>:
 802ec44:	b570      	push	{r4, r5, r6, lr}
 802ec46:	460c      	mov	r4, r1
 802ec48:	7dc9      	ldrb	r1, [r1, #23]
 802ec4a:	2980      	cmp	r1, #128	@ 0x80
 802ec4c:	d148      	bne.n	802ece0 <SMP_SC_Pairing_Public_Key_Rx_Handler+0x9c>
 802ec4e:	f994 101f 	ldrsb.w	r1, [r4, #31]
 802ec52:	2900      	cmp	r1, #0
 802ec54:	d444      	bmi.n	802ece0 <SMP_SC_Pairing_Public_Key_Rx_Handler+0x9c>
 802ec56:	b2c9      	uxtb	r1, r1
 802ec58:	f011 0f41 	tst.w	r1, #65	@ 0x41
 802ec5c:	d040      	beq.n	802ece0 <SMP_SC_Pairing_Public_Key_Rx_Handler+0x9c>
 802ec5e:	4e28      	ldr	r6, [pc, #160]	@ (802ed00 <__arm_cp.10_0>)
 802ec60:	f896 109a 	ldrb.w	r1, [r6, #154]	@ 0x9a
 802ec64:	f011 0f90 	tst.w	r1, #144	@ 0x90
 802ec68:	d001      	beq.n	802ec6e <SMP_SC_Pairing_Public_Key_Rx_Handler+0x2a>
 802ec6a:	2538      	movs	r5, #56	@ 0x38
 802ec6c:	e039      	b.n	802ece2 <SMP_SC_Pairing_Public_Key_Rx_Handler+0x9e>
 802ec6e:	f506 75b0 	add.w	r5, r6, #352	@ 0x160
 802ec72:	2105      	movs	r1, #5
 802ec74:	2240      	movs	r2, #64	@ 0x40
 802ec76:	462b      	mov	r3, r5
 802ec78:	f7fd faf3 	bl	802c262 <ACL_Get_Data>
 802ec7c:	f896 0035 	ldrb.w	r0, [r6, #53]	@ 0x35
 802ec80:	2801      	cmp	r0, #1
 802ec82:	d006      	beq.n	802ec92 <SMP_SC_Pairing_Public_Key_Rx_Handler+0x4e>
 802ec84:	f506 7190 	add.w	r1, r6, #288	@ 0x120
 802ec88:	4628      	mov	r0, r5
 802ec8a:	2220      	movs	r2, #32
 802ec8c:	f7f5 fce4 	bl	8024658 <ble_memcmp>
 802ec90:	b358      	cbz	r0, 802ecea <SMP_SC_Pairing_Public_Key_Rx_Handler+0xa6>
 802ec92:	f896 0098 	ldrb.w	r0, [r6, #152]	@ 0x98
 802ec96:	0740      	lsls	r0, r0, #29
 802ec98:	d505      	bpl.n	802eca6 <SMP_SC_Pairing_Public_Key_Rx_Handler+0x62>
 802ec9a:	491a      	ldr	r1, [pc, #104]	@ (802ed04 <__arm_cp.10_1>)
 802ec9c:	4628      	mov	r0, r5
 802ec9e:	2240      	movs	r2, #64	@ 0x40
 802eca0:	f7f5 fcda 	bl	8024658 <ble_memcmp>
 802eca4:	b318      	cbz	r0, 802ecee <SMP_SC_Pairing_Public_Key_Rx_Handler+0xaa>
 802eca6:	4628      	mov	r0, r5
 802eca8:	f7f9 fab2 	bl	8028210 <hci_le_generate_dhkey>
 802ecac:	4605      	mov	r5, r0
 802ecae:	283a      	cmp	r0, #58	@ 0x3a
 802ecb0:	d017      	beq.n	802ece2 <SMP_SC_Pairing_Public_Key_Rx_Handler+0x9e>
 802ecb2:	b9c5      	cbnz	r5, 802ece6 <SMP_SC_Pairing_Public_Key_Rx_Handler+0xa2>
 802ecb4:	f896 109a 	ldrb.w	r1, [r6, #154]	@ 0x9a
 802ecb8:	f896 0039 	ldrb.w	r0, [r6, #57]	@ 0x39
 802ecbc:	f894 2020 	ldrb.w	r2, [r4, #32]
 802ecc0:	f041 0110 	orr.w	r1, r1, #16
 802ecc4:	f000 00fb 	and.w	r0, r0, #251	@ 0xfb
 802ecc8:	f886 109a 	strb.w	r1, [r6, #154]	@ 0x9a
 802eccc:	7fe1      	ldrb	r1, [r4, #31]
 802ecce:	f886 0039 	strb.w	r0, [r6, #57]	@ 0x39
 802ecd2:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 802ecd6:	77e1      	strb	r1, [r4, #31]
 802ecd8:	f042 0120 	orr.w	r1, r2, #32
 802ecdc:	f884 1020 	strb.w	r1, [r4, #32]
 802ece0:	2500      	movs	r5, #0
 802ece2:	4628      	mov	r0, r5
 802ece4:	bd70      	pop	{r4, r5, r6, pc}
 802ece6:	2108      	movs	r1, #8
 802ece8:	e002      	b.n	802ecf0 <SMP_SC_Pairing_Public_Key_Rx_Handler+0xac>
 802ecea:	210b      	movs	r1, #11
 802ecec:	e000      	b.n	802ecf0 <SMP_SC_Pairing_Public_Key_Rx_Handler+0xac>
 802ecee:	210a      	movs	r1, #10
 802ecf0:	4620      	mov	r0, r4
 802ecf2:	2200      	movs	r2, #0
 802ecf4:	2301      	movs	r3, #1
 802ecf6:	2500      	movs	r5, #0
 802ecf8:	f7fe ffcf 	bl	802dc9a <SMP_Send_Pairing_Failed>
 802ecfc:	e7f1      	b.n	802ece2 <SMP_SC_Pairing_Public_Key_Rx_Handler+0x9e>
 802ecfe:	bf00      	nop

0802ed00 <__arm_cp.10_0>:
 802ed00:	20009f5c 	.word	0x20009f5c

0802ed04 <__arm_cp.10_1>:
 802ed04:	08031ee4 	.word	0x08031ee4

0802ed08 <SMP_SC_Pairing_DHKey_Check_Rx_Handler>:
 802ed08:	b570      	push	{r4, r5, r6, lr}
 802ed0a:	b088      	sub	sp, #32
 802ed0c:	460c      	mov	r4, r1
 802ed0e:	7dc9      	ldrb	r1, [r1, #23]
 802ed10:	f1a1 0290 	sub.w	r2, r1, #144	@ 0x90
 802ed14:	2a02      	cmp	r2, #2
 802ed16:	d201      	bcs.n	802ed1c <SMP_SC_Pairing_DHKey_Check_Rx_Handler+0x14>
 802ed18:	2093      	movs	r0, #147	@ 0x93
 802ed1a:	e018      	b.n	802ed4e <SMP_SC_Pairing_DHKey_Check_Rx_Handler+0x46>
 802ed1c:	2992      	cmp	r1, #146	@ 0x92
 802ed1e:	d115      	bne.n	802ed4c <SMP_SC_Pairing_DHKey_Check_Rx_Handler+0x44>
 802ed20:	ad04      	add	r5, sp, #16
 802ed22:	2105      	movs	r1, #5
 802ed24:	2210      	movs	r2, #16
 802ed26:	462b      	mov	r3, r5
 802ed28:	f7fd fa9b 	bl	802c262 <ACL_Get_Data>
 802ed2c:	466e      	mov	r6, sp
 802ed2e:	4620      	mov	r0, r4
 802ed30:	2100      	movs	r1, #0
 802ed32:	4632      	mov	r2, r6
 802ed34:	f000 f818 	bl	802ed68 <SMP_SC_Compute_DHKey_Check>
 802ed38:	4628      	mov	r0, r5
 802ed3a:	4631      	mov	r1, r6
 802ed3c:	2210      	movs	r2, #16
 802ed3e:	f7f5 fc8b 	bl	8024658 <ble_memcmp>
 802ed42:	b130      	cbz	r0, 802ed52 <SMP_SC_Pairing_DHKey_Check_Rx_Handler+0x4a>
 802ed44:	4620      	mov	r0, r4
 802ed46:	f000 f9eb 	bl	802f120 <OUTLINED_FUNCTION_0>
 802ed4a:	e000      	b.n	802ed4e <SMP_SC_Pairing_DHKey_Check_Rx_Handler+0x46>
 802ed4c:	2000      	movs	r0, #0
 802ed4e:	b008      	add	sp, #32
 802ed50:	bd70      	pop	{r4, r5, r6, pc}
 802ed52:	7fe0      	ldrb	r0, [r4, #31]
 802ed54:	07c0      	lsls	r0, r0, #31
 802ed56:	d103      	bne.n	802ed60 <SMP_SC_Pairing_DHKey_Check_Rx_Handler+0x58>
 802ed58:	4620      	mov	r0, r4
 802ed5a:	f7fe fbfd 	bl	802d558 <SMP_MI_Start_Encryption>
 802ed5e:	e7f6      	b.n	802ed4e <SMP_SC_Pairing_DHKey_Check_Rx_Handler+0x46>
 802ed60:	4620      	mov	r0, r4
 802ed62:	f000 f883 	bl	802ee6c <SMP_SC_Send_Pairing_DHKey_Check>
 802ed66:	e7f2      	b.n	802ed4e <SMP_SC_Pairing_DHKey_Check_Rx_Handler+0x46>

0802ed68 <SMP_SC_Compute_DHKey_Check>:
 802ed68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802ed6c:	b08e      	sub	sp, #56	@ 0x38
 802ed6e:	4690      	mov	r8, r2
 802ed70:	460e      	mov	r6, r1
 802ed72:	4605      	mov	r5, r0
 802ed74:	f10d 001a 	add.w	r0, sp, #26
 802ed78:	2100      	movs	r1, #0
 802ed7a:	2210      	movs	r2, #16
 802ed7c:	f7f5 fc34 	bl	80245e8 <ble_memset>
 802ed80:	7e68      	ldrb	r0, [r5, #25]
 802ed82:	2803      	cmp	r0, #3
 802ed84:	d010      	beq.n	802eda8 <SMP_SC_Compute_DHKey_Check+0x40>
 802ed86:	2802      	cmp	r0, #2
 802ed88:	d114      	bne.n	802edb4 <SMP_SC_Compute_DHKey_Check+0x4c>
 802ed8a:	4837      	ldr	r0, [pc, #220]	@ (802ee68 <__arm_cp.12_0>)
 802ed8c:	f8d0 0090 	ldr.w	r0, [r0, #144]	@ 0x90
 802ed90:	0e01      	lsrs	r1, r0, #24
 802ed92:	f88d 001a 	strb.w	r0, [sp, #26]
 802ed96:	f88d 101d 	strb.w	r1, [sp, #29]
 802ed9a:	0c01      	lsrs	r1, r0, #16
 802ed9c:	0a00      	lsrs	r0, r0, #8
 802ed9e:	f88d 101c 	strb.w	r1, [sp, #28]
 802eda2:	f88d 001b 	strb.w	r0, [sp, #27]
 802eda6:	e005      	b.n	802edb4 <SMP_SC_Compute_DHKey_Check+0x4c>
 802eda8:	f10d 021a 	add.w	r2, sp, #26
 802edac:	4628      	mov	r0, r5
 802edae:	4631      	mov	r1, r6
 802edb0:	f7fe fad2 	bl	802d358 <SMP_Get_OOB_SC_Random>
 802edb4:	b156      	cbz	r6, 802edcc <SMP_SC_Compute_DHKey_Check+0x64>
 802edb6:	482c      	ldr	r0, [pc, #176]	@ (802ee68 <__arm_cp.12_0>)
 802edb8:	f890 1099 	ldrb.w	r1, [r0, #153]	@ 0x99
 802edbc:	f880 11a2 	strb.w	r1, [r0, #418]	@ 0x1a2
 802edc0:	7ea9      	ldrb	r1, [r5, #26]
 802edc2:	f001 0101 	and.w	r1, r1, #1
 802edc6:	f880 11a3 	strb.w	r1, [r0, #419]	@ 0x1a3
 802edca:	e00c      	b.n	802ede6 <SMP_SC_Compute_DHKey_Check+0x7e>
 802edcc:	4926      	ldr	r1, [pc, #152]	@ (802ee68 <__arm_cp.12_0>)
 802edce:	7ee8      	ldrb	r0, [r5, #27]
 802edd0:	f881 01a2 	strb.w	r0, [r1, #418]	@ 0x1a2
 802edd4:	f891 21a1 	ldrb.w	r2, [r1, #417]	@ 0x1a1
 802edd8:	7ea8      	ldrb	r0, [r5, #26]
 802edda:	f3c0 0040 	ubfx	r0, r0, #1, #1
 802edde:	f881 21a4 	strb.w	r2, [r1, #420]	@ 0x1a4
 802ede2:	f881 01a3 	strb.w	r0, [r1, #419]	@ 0x1a3
 802ede6:	7fe8      	ldrb	r0, [r5, #31]
 802ede8:	f000 0001 	and.w	r0, r0, #1
 802edec:	b106      	cbz	r6, 802edf0 <SMP_SC_Compute_DHKey_Check+0x88>
 802edee:	b108      	cbz	r0, 802edf4 <SMP_SC_Compute_DHKey_Check+0x8c>
 802edf0:	b128      	cbz	r0, 802edfe <SMP_SC_Compute_DHKey_Check+0x96>
 802edf2:	b926      	cbnz	r6, 802edfe <SMP_SC_Compute_DHKey_Check+0x96>
 802edf4:	f105 0770 	add.w	r7, r5, #112	@ 0x70
 802edf8:	f105 0460 	add.w	r4, r5, #96	@ 0x60
 802edfc:	e003      	b.n	802ee06 <SMP_SC_Compute_DHKey_Check+0x9e>
 802edfe:	f105 0760 	add.w	r7, r5, #96	@ 0x60
 802ee02:	f105 0470 	add.w	r4, r5, #112	@ 0x70
 802ee06:	b146      	cbz	r6, 802ee1a <SMP_SC_Compute_DHKey_Check+0xb2>
 802ee08:	f10d 002a 	add.w	r0, sp, #42	@ 0x2a
 802ee0c:	f10d 0137 	add.w	r1, sp, #55	@ 0x37
 802ee10:	f10d 0336 	add.w	r3, sp, #54	@ 0x36
 802ee14:	9000      	str	r0, [sp, #0]
 802ee16:	aa0c      	add	r2, sp, #48	@ 0x30
 802ee18:	e007      	b.n	802ee2a <SMP_SC_Compute_DHKey_Check+0xc2>
 802ee1a:	a80c      	add	r0, sp, #48	@ 0x30
 802ee1c:	f10d 0136 	add.w	r1, sp, #54	@ 0x36
 802ee20:	f10d 022a 	add.w	r2, sp, #42	@ 0x2a
 802ee24:	f10d 0337 	add.w	r3, sp, #55	@ 0x37
 802ee28:	9000      	str	r0, [sp, #0]
 802ee2a:	4628      	mov	r0, r5
 802ee2c:	f000 f8a4 	bl	802ef78 <SMP_SC_Phase_2AS2_Set_Addresses>
 802ee30:	f89d 1036 	ldrb.w	r1, [sp, #54]	@ 0x36
 802ee34:	f10d 022a 	add.w	r2, sp, #42	@ 0x2a
 802ee38:	f89d 0037 	ldrb.w	r0, [sp, #55]	@ 0x37
 802ee3c:	f8cd 8014 	str.w	r8, [sp, #20]
 802ee40:	f10d 031a 	add.w	r3, sp, #26
 802ee44:	e9cd 1203 	strd	r1, r2, [sp, #12]
 802ee48:	a90c      	add	r1, sp, #48	@ 0x30
 802ee4a:	463a      	mov	r2, r7
 802ee4c:	e9cd 0101 	strd	r0, r1, [sp, #4]
 802ee50:	4805      	ldr	r0, [pc, #20]	@ (802ee68 <__arm_cp.12_0>)
 802ee52:	f500 71d1 	add.w	r1, r0, #418	@ 0x1a2
 802ee56:	f500 7080 	add.w	r0, r0, #256	@ 0x100
 802ee5a:	9100      	str	r1, [sp, #0]
 802ee5c:	4621      	mov	r1, r4
 802ee5e:	f7fd fe19 	bl	802ca94 <SMA_SC_Gen_f6_Check_Val>
 802ee62:	b00e      	add	sp, #56	@ 0x38
 802ee64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0802ee68 <__arm_cp.12_0>:
 802ee68:	20009f5c 	.word	0x20009f5c

0802ee6c <SMP_SC_Send_Pairing_DHKey_Check>:
 802ee6c:	b5b0      	push	{r4, r5, r7, lr}
 802ee6e:	2111      	movs	r1, #17
 802ee70:	4604      	mov	r4, r0
 802ee72:	f7fe fb3d 	bl	802d4f0 <SMP_New_PDU>
 802ee76:	b1d0      	cbz	r0, 802eeae <SMP_SC_Send_Pairing_DHKey_Check+0x42>
 802ee78:	4605      	mov	r5, r0
 802ee7a:	6a00      	ldr	r0, [r0, #32]
 802ee7c:	210d      	movs	r1, #13
 802ee7e:	2210      	movs	r2, #16
 802ee80:	7101      	strb	r1, [r0, #4]
 802ee82:	480c      	ldr	r0, [pc, #48]	@ (802eeb4 <__arm_cp.13_0>)
 802ee84:	2105      	movs	r1, #5
 802ee86:	f500 7388 	add.w	r3, r0, #272	@ 0x110
 802ee8a:	4628      	mov	r0, r5
 802ee8c:	f7fd fa09 	bl	802c2a2 <ACL_Set_Data>
 802ee90:	4628      	mov	r0, r5
 802ee92:	4621      	mov	r1, r4
 802ee94:	f7fe fb33 	bl	802d4fe <SMP_Send_PDU>
 802ee98:	b938      	cbnz	r0, 802eeaa <SMP_SC_Send_Pairing_DHKey_Check+0x3e>
 802ee9a:	7fe0      	ldrb	r0, [r4, #31]
 802ee9c:	07c0      	lsls	r0, r0, #31
 802ee9e:	f06f 0043 	mvn.w	r0, #67	@ 0x43
 802eea2:	bf08      	it	eq
 802eea4:	f06f 006d 	mvneq.w	r0, #109	@ 0x6d
 802eea8:	75e0      	strb	r0, [r4, #23]
 802eeaa:	2000      	movs	r0, #0
 802eeac:	bdb0      	pop	{r4, r5, r7, pc}
 802eeae:	2064      	movs	r0, #100	@ 0x64
 802eeb0:	bdb0      	pop	{r4, r5, r7, pc}
 802eeb2:	bf00      	nop

0802eeb4 <__arm_cp.13_0>:
 802eeb4:	20009f5c 	.word	0x20009f5c

0802eeb8 <SMP_SC_Start_Authentication_Stage_2>:
 802eeb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 802eeba:	b091      	sub	sp, #68	@ 0x44
 802eebc:	4e2d      	ldr	r6, [pc, #180]	@ (802ef74 <__arm_cp.14_0>)
 802eebe:	4604      	mov	r4, r0
 802eec0:	f896 009a 	ldrb.w	r0, [r6, #154]	@ 0x9a
 802eec4:	f000 0030 	and.w	r0, r0, #48	@ 0x30
 802eec8:	2830      	cmp	r0, #48	@ 0x30
 802eeca:	d150      	bne.n	802ef6e <SMP_SC_Start_Authentication_Stage_2+0xb6>
 802eecc:	f506 7580 	add.w	r5, r6, #256	@ 0x100
 802eed0:	f10d 0016 	add.w	r0, sp, #22
 802eed4:	2220      	movs	r2, #32
 802eed6:	4629      	mov	r1, r5
 802eed8:	f7f5 fb36 	bl	8024548 <ble_memcpy>
 802eedc:	7fe0      	ldrb	r0, [r4, #31]
 802eede:	07c0      	lsls	r0, r0, #31
 802eee0:	d108      	bne.n	802eef4 <SMP_SC_Start_Authentication_Stage_2+0x3c>
 802eee2:	f10d 0036 	add.w	r0, sp, #54	@ 0x36
 802eee6:	f10d 0143 	add.w	r1, sp, #67	@ 0x43
 802eeea:	f10d 0342 	add.w	r3, sp, #66	@ 0x42
 802eeee:	9000      	str	r0, [sp, #0]
 802eef0:	aa0f      	add	r2, sp, #60	@ 0x3c
 802eef2:	e007      	b.n	802ef04 <SMP_SC_Start_Authentication_Stage_2+0x4c>
 802eef4:	a80f      	add	r0, sp, #60	@ 0x3c
 802eef6:	f10d 0142 	add.w	r1, sp, #66	@ 0x42
 802eefa:	f10d 0236 	add.w	r2, sp, #54	@ 0x36
 802eefe:	f10d 0343 	add.w	r3, sp, #67	@ 0x43
 802ef02:	9000      	str	r0, [sp, #0]
 802ef04:	4620      	mov	r0, r4
 802ef06:	f000 f837 	bl	802ef78 <SMP_SC_Phase_2AS2_Set_Addresses>
 802ef0a:	f89d 0042 	ldrb.w	r0, [sp, #66]	@ 0x42
 802ef0e:	f89d 3043 	ldrb.w	r3, [sp, #67]	@ 0x43
 802ef12:	af0f      	add	r7, sp, #60	@ 0x3c
 802ef14:	f104 0134 	add.w	r1, r4, #52	@ 0x34
 802ef18:	f10d 0236 	add.w	r2, sp, #54	@ 0x36
 802ef1c:	e9cd 2502 	strd	r2, r5, [sp, #8]
 802ef20:	9104      	str	r1, [sp, #16]
 802ef22:	f104 0160 	add.w	r1, r4, #96	@ 0x60
 802ef26:	f104 0270 	add.w	r2, r4, #112	@ 0x70
 802ef2a:	e9cd 7000 	strd	r7, r0, [sp]
 802ef2e:	f10d 0016 	add.w	r0, sp, #22
 802ef32:	f7fd fd4d 	bl	802c9d0 <SMA_SC_Gen_f5_Keys>
 802ef36:	f506 7288 	add.w	r2, r6, #272	@ 0x110
 802ef3a:	4620      	mov	r0, r4
 802ef3c:	2101      	movs	r1, #1
 802ef3e:	f7ff ff13 	bl	802ed68 <SMP_SC_Compute_DHKey_Check>
 802ef42:	7fe0      	ldrb	r0, [r4, #31]
 802ef44:	07c0      	lsls	r0, r0, #31
 802ef46:	d10a      	bne.n	802ef5e <SMP_SC_Start_Authentication_Stage_2+0xa6>
 802ef48:	4620      	mov	r0, r4
 802ef4a:	f7ff ff8f 	bl	802ee6c <SMP_SC_Send_Pairing_DHKey_Check>
 802ef4e:	b140      	cbz	r0, 802ef62 <SMP_SC_Start_Authentication_Stage_2+0xaa>
 802ef50:	f10d 0116 	add.w	r1, sp, #22
 802ef54:	4628      	mov	r0, r5
 802ef56:	2220      	movs	r2, #32
 802ef58:	f7f5 faf6 	bl	8024548 <ble_memcpy>
 802ef5c:	e007      	b.n	802ef6e <SMP_SC_Start_Authentication_Stage_2+0xb6>
 802ef5e:	2092      	movs	r0, #146	@ 0x92
 802ef60:	75e0      	strb	r0, [r4, #23]
 802ef62:	f896 009a 	ldrb.w	r0, [r6, #154]	@ 0x9a
 802ef66:	f000 00cf 	and.w	r0, r0, #207	@ 0xcf
 802ef6a:	f886 009a 	strb.w	r0, [r6, #154]	@ 0x9a
 802ef6e:	b011      	add	sp, #68	@ 0x44
 802ef70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802ef72:	bf00      	nop

0802ef74 <__arm_cp.14_0>:
 802ef74:	20009f5c 	.word	0x20009f5c

0802ef78 <SMP_SC_Phase_2AS2_Set_Addresses>:
 802ef78:	b5b0      	push	{r4, r5, r7, lr}
 802ef7a:	4605      	mov	r5, r0
 802ef7c:	7a40      	ldrb	r0, [r0, #9]
 802ef7e:	461c      	mov	r4, r3
 802ef80:	7008      	strb	r0, [r1, #0]
 802ef82:	4610      	mov	r0, r2
 802ef84:	f105 010a 	add.w	r1, r5, #10
 802ef88:	2206      	movs	r2, #6
 802ef8a:	f7f5 fadd 	bl	8024548 <ble_memcpy>
 802ef8e:	78a8      	ldrb	r0, [r5, #2]
 802ef90:	1ce9      	adds	r1, r5, #3
 802ef92:	2206      	movs	r2, #6
 802ef94:	7020      	strb	r0, [r4, #0]
 802ef96:	9804      	ldr	r0, [sp, #16]
 802ef98:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 802ef9c:	f7f5 bad4 	b.w	8024548 <ble_memcpy>

0802efa0 <SMP_SC_Compute_Confirm_Value>:
 802efa0:	b5bc      	push	{r2, r3, r4, r5, r7, lr}
 802efa2:	7e43      	ldrb	r3, [r0, #25]
 802efa4:	2b02      	cmp	r3, #2
 802efa6:	d10b      	bne.n	802efc0 <SMP_SC_Compute_Confirm_Value+0x20>
 802efa8:	4b12      	ldr	r3, [pc, #72]	@ (802eff4 <__arm_cp.16_0>)
 802efaa:	f8d3 4090 	ldr.w	r4, [r3, #144]	@ 0x90
 802efae:	f893 31a0 	ldrb.w	r3, [r3, #416]	@ 0x1a0
 802efb2:	3b01      	subs	r3, #1
 802efb4:	fa24 f303 	lsr.w	r3, r4, r3
 802efb8:	4c0f      	ldr	r4, [pc, #60]	@ (802eff8 <__arm_cp.16_1>)
 802efba:	f364 035f 	bfi	r3, r4, #1, #31
 802efbe:	e000      	b.n	802efc2 <SMP_SC_Compute_Confirm_Value+0x22>
 802efc0:	2300      	movs	r3, #0
 802efc2:	9200      	str	r2, [sp, #0]
 802efc4:	f011 0201 	ands.w	r2, r1, #1
 802efc8:	b2db      	uxtb	r3, r3
 802efca:	4a0a      	ldr	r2, [pc, #40]	@ (802eff4 <__arm_cp.16_0>)
 802efcc:	f502 7490 	add.w	r4, r2, #288	@ 0x120
 802efd0:	f502 72b0 	add.w	r2, r2, #352	@ 0x160
 802efd4:	4615      	mov	r5, r2
 802efd6:	bf04      	itt	eq
 802efd8:	4625      	moveq	r5, r4
 802efda:	4614      	moveq	r4, r2
 802efdc:	0789      	lsls	r1, r1, #30
 802efde:	f100 0270 	add.w	r2, r0, #112	@ 0x70
 802efe2:	bf58      	it	pl
 802efe4:	f100 0260 	addpl.w	r2, r0, #96	@ 0x60
 802efe8:	4628      	mov	r0, r5
 802efea:	4621      	mov	r1, r4
 802efec:	f7fd fcb6 	bl	802c95c <SMA_SC_Gen_f4_Confirm>
 802eff0:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}
 802eff2:	bf00      	nop

0802eff4 <__arm_cp.16_0>:
 802eff4:	20009f5c 	.word	0x20009f5c

0802eff8 <__arm_cp.16_1>:
 802eff8:	7fffffc0 	.word	0x7fffffc0

0802effc <SMP_SC_Generate_Num_Comparison_Event>:
 802effc:	b51c      	push	{r2, r3, r4, lr}
 802effe:	4a18      	ldr	r2, [pc, #96]	@ (802f060 <__arm_cp.17_0>)
 802f000:	4604      	mov	r4, r0
 802f002:	7fc0      	ldrb	r0, [r0, #31]
 802f004:	a901      	add	r1, sp, #4
 802f006:	9100      	str	r1, [sp, #0]
 802f008:	f010 0001 	ands.w	r0, r0, #1
 802f00c:	f104 0370 	add.w	r3, r4, #112	@ 0x70
 802f010:	f502 7190 	add.w	r1, r2, #288	@ 0x120
 802f014:	f502 72b0 	add.w	r2, r2, #352	@ 0x160
 802f018:	4610      	mov	r0, r2
 802f01a:	bf04      	itt	eq
 802f01c:	4608      	moveq	r0, r1
 802f01e:	4611      	moveq	r1, r2
 802f020:	f104 0260 	add.w	r2, r4, #96	@ 0x60
 802f024:	f7fd fd78 	bl	802cb18 <SMA_SC_Gen_g2_NumComp_Val>
 802f028:	f89d 2006 	ldrb.w	r2, [sp, #6]
 802f02c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 802f030:	7f60      	ldrb	r0, [r4, #29]
 802f032:	f89d 1005 	ldrb.w	r1, [sp, #5]
 802f036:	f000 003f 	and.w	r0, r0, #63	@ 0x3f
 802f03a:	0412      	lsls	r2, r2, #16
 802f03c:	7760      	strb	r0, [r4, #29]
 802f03e:	f89d 0004 	ldrb.w	r0, [sp, #4]
 802f042:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
 802f046:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
 802f04a:	4408      	add	r0, r1
 802f04c:	4905      	ldr	r1, [pc, #20]	@ (802f064 <__arm_cp.17_1>)
 802f04e:	fbb0 f2f1 	udiv	r2, r0, r1
 802f052:	fb02 0211 	mls	r2, r2, r1, r0
 802f056:	8821      	ldrh	r1, [r4, #0]
 802f058:	2001      	movs	r0, #1
 802f05a:	f7f8 f975 	bl	8027348 <EVT_aci_gap_numeric_comparison_value>
 802f05e:	bd1c      	pop	{r2, r3, r4, pc}

0802f060 <__arm_cp.17_0>:
 802f060:	20009f5c 	.word	0x20009f5c

0802f064 <__arm_cp.17_1>:
 802f064:	000f4240 	.word	0x000f4240

0802f068 <aci_gap_numeric_comparison_value_confirm_yesno>:
 802f068:	b510      	push	{r4, lr}
 802f06a:	2901      	cmp	r1, #1
 802f06c:	bf84      	itt	hi
 802f06e:	2092      	movhi	r0, #146	@ 0x92
 802f070:	bd10      	pophi	{r4, pc}
 802f072:	460c      	mov	r4, r1
 802f074:	f7fd feca 	bl	802ce0c <SMP_Get_Remote_Device>
 802f078:	b138      	cbz	r0, 802f08a <aci_gap_numeric_comparison_value_confirm_yesno+0x22>
 802f07a:	7dc1      	ldrb	r1, [r0, #23]
 802f07c:	2990      	cmp	r1, #144	@ 0x90
 802f07e:	bf04      	itt	eq
 802f080:	7e41      	ldrbeq	r1, [r0, #25]
 802f082:	2904      	cmpeq	r1, #4
 802f084:	d003      	beq.n	802f08e <aci_gap_numeric_comparison_value_confirm_yesno+0x26>
 802f086:	200c      	movs	r0, #12
 802f088:	bd10      	pop	{r4, pc}
 802f08a:	2002      	movs	r0, #2
 802f08c:	bd10      	pop	{r4, pc}
 802f08e:	2140      	movs	r1, #64	@ 0x40
 802f090:	2c00      	cmp	r4, #0
 802f092:	bf08      	it	eq
 802f094:	f06f 017f 	mvneq.w	r1, #127	@ 0x7f
 802f098:	7f42      	ldrb	r2, [r0, #29]
 802f09a:	4311      	orrs	r1, r2
 802f09c:	7741      	strb	r1, [r0, #29]
 802f09e:	2000      	movs	r0, #0
 802f0a0:	bd10      	pop	{r4, pc}
	...

0802f0a4 <SMP_SC_Update_Stats>:
 802f0a4:	b570      	push	{r4, r5, r6, lr}
 802f0a6:	7fc6      	ldrb	r6, [r0, #31]
 802f0a8:	4605      	mov	r5, r0
 802f0aa:	0730      	lsls	r0, r6, #28
 802f0ac:	d535      	bpl.n	802f11a <SMP_SC_Update_Stats+0x76>
 802f0ae:	8828      	ldrh	r0, [r5, #0]
 802f0b0:	460c      	mov	r4, r1
 802f0b2:	f7ff fce9 	bl	802ea88 <SMP_Is_Another_SC_Pairing_Ongoing>
 802f0b6:	f006 01fd 	and.w	r1, r6, #253	@ 0xfd
 802f0ba:	77e9      	strb	r1, [r5, #31]
 802f0bc:	b930      	cbnz	r0, 802f0cc <SMP_SC_Update_Stats+0x28>
 802f0be:	4917      	ldr	r1, [pc, #92]	@ (802f11c <__arm_cp.19_0>)
 802f0c0:	f891 209a 	ldrb.w	r2, [r1, #154]	@ 0x9a
 802f0c4:	f002 02fb 	and.w	r2, r2, #251	@ 0xfb
 802f0c8:	f881 209a 	strb.w	r2, [r1, #154]	@ 0x9a
 802f0cc:	4913      	ldr	r1, [pc, #76]	@ (802f11c <__arm_cp.19_0>)
 802f0ce:	f891 209b 	ldrb.w	r2, [r1, #155]	@ 0x9b
 802f0d2:	b154      	cbz	r4, 802f0ea <SMP_SC_Update_Stats+0x46>
 802f0d4:	3210      	adds	r2, #16
 802f0d6:	f881 209b 	strb.w	r2, [r1, #155]	@ 0x9b
 802f0da:	b948      	cbnz	r0, 802f0f0 <SMP_SC_Update_Stats+0x4c>
 802f0dc:	f891 009a 	ldrb.w	r0, [r1, #154]	@ 0x9a
 802f0e0:	f000 00cf 	and.w	r0, r0, #207	@ 0xcf
 802f0e4:	f881 009a 	strb.w	r0, [r1, #154]	@ 0x9a
 802f0e8:	e002      	b.n	802f0f0 <SMP_SC_Update_Stats+0x4c>
 802f0ea:	3201      	adds	r2, #1
 802f0ec:	f881 209b 	strb.w	r2, [r1, #155]	@ 0x9b
 802f0f0:	f002 000f 	and.w	r0, r2, #15
 802f0f4:	2303      	movs	r3, #3
 802f0f6:	b2d2      	uxtb	r2, r2
 802f0f8:	fbb0 f0f3 	udiv	r0, r0, r3
 802f0fc:	eb00 1012 	add.w	r0, r0, r2, lsr #4
 802f100:	2803      	cmp	r0, #3
 802f102:	d30a      	bcc.n	802f11a <SMP_SC_Update_Stats+0x76>
 802f104:	f991 009a 	ldrsb.w	r0, [r1, #154]	@ 0x9a
 802f108:	2800      	cmp	r0, #0
 802f10a:	d403      	bmi.n	802f114 <SMP_SC_Update_Stats+0x70>
 802f10c:	f040 0040 	orr.w	r0, r0, #64	@ 0x40
 802f110:	f881 009a 	strb.w	r0, [r1, #154]	@ 0x9a
 802f114:	2000      	movs	r0, #0
 802f116:	f881 009b 	strb.w	r0, [r1, #155]	@ 0x9b
 802f11a:	bd70      	pop	{r4, r5, r6, pc}

0802f11c <__arm_cp.19_0>:
 802f11c:	20009f5c 	.word	0x20009f5c

0802f120 <OUTLINED_FUNCTION_0>:
 802f120:	210b      	movs	r1, #11
 802f122:	2200      	movs	r2, #0
 802f124:	2301      	movs	r3, #1
 802f126:	f7fe bdb8 	b.w	802dc9a <SMP_Send_Pairing_Failed>

0802f12a <SMP_Validate_Signed_Packet>:
 802f12a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802f12e:	b08c      	sub	sp, #48	@ 0x30
 802f130:	460d      	mov	r5, r1
 802f132:	888e      	ldrh	r6, [r1, #4]
 802f134:	f7fd fe6a 	bl	802ce0c <SMP_Get_Remote_Device>
 802f138:	b130      	cbz	r0, 802f148 <SMP_Validate_Signed_Packet+0x1e>
 802f13a:	4604      	mov	r4, r0
 802f13c:	f890 0022 	ldrb.w	r0, [r0, #34]	@ 0x22
 802f140:	0640      	lsls	r0, r0, #25
 802f142:	d403      	bmi.n	802f14c <SMP_Validate_Signed_Packet+0x22>
 802f144:	205a      	movs	r0, #90	@ 0x5a
 802f146:	e037      	b.n	802f1b8 <SMP_Validate_Signed_Packet+0x8e>
 802f148:	2002      	movs	r0, #2
 802f14a:	e035      	b.n	802f1b8 <SMP_Validate_Signed_Packet+0x8e>
 802f14c:	f104 0170 	add.w	r1, r4, #112	@ 0x70
 802f150:	a804      	add	r0, sp, #16
 802f152:	2210      	movs	r2, #16
 802f154:	f7f5 f9f8 	bl	8024548 <ble_memcpy>
 802f158:	f1a6 070c 	sub.w	r7, r6, #12
 802f15c:	f10d 0804 	add.w	r8, sp, #4
 802f160:	4628      	mov	r0, r5
 802f162:	220c      	movs	r2, #12
 802f164:	b2b9      	uxth	r1, r7
 802f166:	4643      	mov	r3, r8
 802f168:	f7fd f87b 	bl	802c262 <ACL_Get_Data>
 802f16c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 802f170:	f89d 3007 	ldrb.w	r3, [sp, #7]
 802f174:	f89d 1005 	ldrb.w	r1, [sp, #5]
 802f178:	f89d 0004 	ldrb.w	r0, [sp, #4]
 802f17c:	0412      	lsls	r2, r2, #16
 802f17e:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
 802f182:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
 802f186:	180e      	adds	r6, r1, r0
 802f188:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 802f18a:	1c41      	adds	r1, r0, #1
 802f18c:	d001      	beq.n	802f192 <SMP_Validate_Signed_Packet+0x68>
 802f18e:	4286      	cmp	r6, r0
 802f190:	d90e      	bls.n	802f1b0 <SMP_Validate_Signed_Packet+0x86>
 802f192:	b2fa      	uxtb	r2, r7
 802f194:	a804      	add	r0, sp, #16
 802f196:	af08      	add	r7, sp, #32
 802f198:	4629      	mov	r1, r5
 802f19a:	463b      	mov	r3, r7
 802f19c:	f7fd fcea 	bl	802cb74 <SMA_CMAC_Generate_Tag>
 802f1a0:	f108 0004 	add.w	r0, r8, #4
 802f1a4:	f107 0108 	add.w	r1, r7, #8
 802f1a8:	2208      	movs	r2, #8
 802f1aa:	f7f5 fa55 	bl	8024658 <ble_memcmp>
 802f1ae:	b108      	cbz	r0, 802f1b4 <SMP_Validate_Signed_Packet+0x8a>
 802f1b0:	2005      	movs	r0, #5
 802f1b2:	e001      	b.n	802f1b8 <SMP_Validate_Signed_Packet+0x8e>
 802f1b4:	2000      	movs	r0, #0
 802f1b6:	62a6      	str	r6, [r4, #40]	@ 0x28
 802f1b8:	b00c      	add	sp, #48	@ 0x30
 802f1ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0802f1be <CList_Insert>:
 802f1be:	6842      	ldr	r2, [r0, #4]
 802f1c0:	e9c1 0200 	strd	r0, r2, [r1]
 802f1c4:	6842      	ldr	r2, [r0, #4]
 802f1c6:	6041      	str	r1, [r0, #4]
 802f1c8:	6011      	str	r1, [r2, #0]
 802f1ca:	4770      	bx	lr

0802f1cc <CList_Remove>:
 802f1cc:	e9d0 1200 	ldrd	r1, r2, [r0]
 802f1d0:	6011      	str	r1, [r2, #0]
 802f1d2:	6800      	ldr	r0, [r0, #0]
 802f1d4:	6042      	str	r2, [r0, #4]
 802f1d6:	4770      	bx	lr

0802f1d8 <CList_Get_Size>:
 802f1d8:	b510      	push	{r4, lr}
 802f1da:	2200      	movs	r2, #0
 802f1dc:	4603      	mov	r3, r0
 802f1de:	4614      	mov	r4, r2
 802f1e0:	3201      	adds	r2, #1
 802f1e2:	681b      	ldr	r3, [r3, #0]
 802f1e4:	4283      	cmp	r3, r0
 802f1e6:	d1fa      	bne.n	802f1de <CList_Get_Size+0x6>
 802f1e8:	800c      	strh	r4, [r1, #0]
 802f1ea:	bd10      	pop	{r4, pc}

0802f1ec <RndAddr_Generate_Static_Address>:
 802f1ec:	b5bc      	push	{r2, r3, r4, r5, r7, lr}
 802f1ee:	466d      	mov	r5, sp
 802f1f0:	4604      	mov	r4, r0
 802f1f2:	2002      	movs	r0, #2
 802f1f4:	4629      	mov	r1, r5
 802f1f6:	f7da fbca 	bl	800998e <BLEPLAT_RngGet>
 802f1fa:	9801      	ldr	r0, [sp, #4]
 802f1fc:	4629      	mov	r1, r5
 802f1fe:	2206      	movs	r2, #6
 802f200:	f440 4040 	orr.w	r0, r0, #49152	@ 0xc000
 802f204:	9001      	str	r0, [sp, #4]
 802f206:	4620      	mov	r0, r4
 802f208:	f7f5 f99e 	bl	8024548 <ble_memcpy>
 802f20c:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}
	...

0802f210 <RndAddr_Generate_Non_Resolvable_Address>:
 802f210:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
 802f212:	4e11      	ldr	r6, [pc, #68]	@ (802f258 <__arm_cp.1_0>)
 802f214:	4604      	mov	r4, r0
 802f216:	ad01      	add	r5, sp, #4
 802f218:	f643 77ff 	movw	r7, #16383	@ 0x3fff
 802f21c:	2002      	movs	r0, #2
 802f21e:	4629      	mov	r1, r5
 802f220:	f7da fbb5 	bl	800998e <BLEPLAT_RngGet>
 802f224:	e9dd 0101 	ldrd	r0, r1, [sp, #4]
 802f228:	f36f 319f 	bfc	r1, #14, #18
 802f22c:	ea50 0201 	orrs.w	r2, r0, r1
 802f230:	9102      	str	r1, [sp, #8]
 802f232:	d0f3      	beq.n	802f21c <RndAddr_Generate_Non_Resolvable_Address+0xc>
 802f234:	42b9      	cmp	r1, r7
 802f236:	d101      	bne.n	802f23c <RndAddr_Generate_Non_Resolvable_Address+0x2c>
 802f238:	3001      	adds	r0, #1
 802f23a:	d0ef      	beq.n	802f21c <RndAddr_Generate_Non_Resolvable_Address+0xc>
 802f23c:	4628      	mov	r0, r5
 802f23e:	4631      	mov	r1, r6
 802f240:	2206      	movs	r2, #6
 802f242:	f7f5 fa09 	bl	8024658 <ble_memcmp>
 802f246:	2800      	cmp	r0, #0
 802f248:	d0e8      	beq.n	802f21c <RndAddr_Generate_Non_Resolvable_Address+0xc>
 802f24a:	a901      	add	r1, sp, #4
 802f24c:	4620      	mov	r0, r4
 802f24e:	2206      	movs	r2, #6
 802f250:	f7f5 f97a 	bl	8024548 <ble_memcpy>
 802f254:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 802f256:	bf00      	nop

0802f258 <__arm_cp.1_0>:
 802f258:	20009f5c 	.word	0x20009f5c

0802f25c <RndAddr_Calculate_Address_Hash>:
 802f25c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802f25e:	b089      	sub	sp, #36	@ 0x24
 802f260:	af05      	add	r7, sp, #20
 802f262:	4614      	mov	r4, r2
 802f264:	460d      	mov	r5, r1
 802f266:	4606      	mov	r6, r0
 802f268:	2100      	movs	r1, #0
 802f26a:	2210      	movs	r2, #16
 802f26c:	4638      	mov	r0, r7
 802f26e:	f7f5 f9bb 	bl	80245e8 <ble_memset>
 802f272:	4638      	mov	r0, r7
 802f274:	4629      	mov	r1, r5
 802f276:	2203      	movs	r2, #3
 802f278:	f7f5 f966 	bl	8024548 <ble_memcpy>
 802f27c:	ad01      	add	r5, sp, #4
 802f27e:	4630      	mov	r0, r6
 802f280:	4639      	mov	r1, r7
 802f282:	462a      	mov	r2, r5
 802f284:	f7da fb92 	bl	80099ac <BLEPLAT_AesEcbEncrypt>
 802f288:	4620      	mov	r0, r4
 802f28a:	4629      	mov	r1, r5
 802f28c:	2203      	movs	r2, #3
 802f28e:	f7f5 f95b 	bl	8024548 <ble_memcpy>
 802f292:	b009      	add	sp, #36	@ 0x24
 802f294:	bdf0      	pop	{r4, r5, r6, r7, pc}

0802f296 <RndAddr_Check_Resolvable_Address>:
 802f296:	b5bc      	push	{r2, r3, r4, r5, r7, lr}
 802f298:	f10d 0505 	add.w	r5, sp, #5
 802f29c:	460c      	mov	r4, r1
 802f29e:	3103      	adds	r1, #3
 802f2a0:	462a      	mov	r2, r5
 802f2a2:	f7ff ffdb 	bl	802f25c <RndAddr_Calculate_Address_Hash>
 802f2a6:	4628      	mov	r0, r5
 802f2a8:	4621      	mov	r1, r4
 802f2aa:	2203      	movs	r2, #3
 802f2ac:	f7f5 f9d4 	bl	8024658 <ble_memcmp>
 802f2b0:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}

0802f2b2 <Is_Empty>:
 802f2b2:	b510      	push	{r4, lr}
 802f2b4:	2300      	movs	r3, #0
 802f2b6:	461a      	mov	r2, r3
 802f2b8:	4299      	cmp	r1, r3
 802f2ba:	d003      	beq.n	802f2c4 <Is_Empty+0x12>
 802f2bc:	5c84      	ldrb	r4, [r0, r2]
 802f2be:	1c53      	adds	r3, r2, #1
 802f2c0:	2c00      	cmp	r4, #0
 802f2c2:	d0f8      	beq.n	802f2b6 <Is_Empty+0x4>
 802f2c4:	2000      	movs	r0, #0
 802f2c6:	428a      	cmp	r2, r1
 802f2c8:	bf28      	it	cs
 802f2ca:	2001      	movcs	r0, #1
 802f2cc:	bd10      	pop	{r4, pc}

0802f2ce <Memcpy_Rev>:
 802f2ce:	3801      	subs	r0, #1
 802f2d0:	b122      	cbz	r2, 802f2dc <Memcpy_Rev+0xe>
 802f2d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 802f2d6:	5483      	strb	r3, [r0, r2]
 802f2d8:	3a01      	subs	r2, #1
 802f2da:	e7f9      	b.n	802f2d0 <Memcpy_Rev+0x2>
 802f2dc:	4770      	bx	lr

0802f2de <Memcmp_Rev>:
 802f2de:	b570      	push	{r4, r5, r6, lr}
 802f2e0:	3a01      	subs	r2, #1
 802f2e2:	2300      	movs	r3, #0
 802f2e4:	5c8c      	ldrb	r4, [r1, r2]
 802f2e6:	5c85      	ldrb	r5, [r0, r2]
 802f2e8:	3a01      	subs	r2, #1
 802f2ea:	f143 0600 	adc.w	r6, r3, #0
 802f2ee:	42a5      	cmp	r5, r4
 802f2f0:	d101      	bne.n	802f2f6 <Memcmp_Rev+0x18>
 802f2f2:	2e00      	cmp	r6, #0
 802f2f4:	d1f6      	bne.n	802f2e4 <Memcmp_Rev+0x6>
 802f2f6:	1b28      	subs	r0, r5, r4
 802f2f8:	bd70      	pop	{r4, r5, r6, pc}

0802f2fa <Mem_Assign>:
 802f2fa:	4351      	muls	r1, r2
 802f2fc:	3103      	adds	r1, #3
 802f2fe:	f021 0203 	bic.w	r2, r1, #3
 802f302:	6801      	ldr	r1, [r0, #0]
 802f304:	440a      	add	r2, r1
 802f306:	6002      	str	r2, [r0, #0]
 802f308:	4608      	mov	r0, r1
 802f30a:	4770      	bx	lr

0802f30c <Rand32>:
 802f30c:	b5e0      	push	{r5, r6, r7, lr}
 802f30e:	a901      	add	r1, sp, #4
 802f310:	2001      	movs	r0, #1
 802f312:	f7da fb3c 	bl	800998e <BLEPLAT_RngGet>
 802f316:	9801      	ldr	r0, [sp, #4]
 802f318:	bd8c      	pop	{r2, r3, r7, pc}
	...

0802f31c <siprintf>:
 802f31c:	b40e      	push	{r1, r2, r3}
 802f31e:	b500      	push	{lr}
 802f320:	b09c      	sub	sp, #112	@ 0x70
 802f322:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 802f326:	ab1d      	add	r3, sp, #116	@ 0x74
 802f328:	9002      	str	r0, [sp, #8]
 802f32a:	9006      	str	r0, [sp, #24]
 802f32c:	9107      	str	r1, [sp, #28]
 802f32e:	9104      	str	r1, [sp, #16]
 802f330:	4808      	ldr	r0, [pc, #32]	@ (802f354 <siprintf+0x38>)
 802f332:	4909      	ldr	r1, [pc, #36]	@ (802f358 <siprintf+0x3c>)
 802f334:	f853 2b04 	ldr.w	r2, [r3], #4
 802f338:	9105      	str	r1, [sp, #20]
 802f33a:	a902      	add	r1, sp, #8
 802f33c:	6800      	ldr	r0, [r0, #0]
 802f33e:	9301      	str	r3, [sp, #4]
 802f340:	f000 f8d6 	bl	802f4f0 <_svfiprintf_r>
 802f344:	9b02      	ldr	r3, [sp, #8]
 802f346:	2200      	movs	r2, #0
 802f348:	701a      	strb	r2, [r3, #0]
 802f34a:	b01c      	add	sp, #112	@ 0x70
 802f34c:	f85d eb04 	ldr.w	lr, [sp], #4
 802f350:	b003      	add	sp, #12
 802f352:	4770      	bx	lr
 802f354:	20000480 	.word	0x20000480
 802f358:	ffff0208 	.word	0xffff0208

0802f35c <memcmp>:
 802f35c:	3901      	subs	r1, #1
 802f35e:	4402      	add	r2, r0
 802f360:	b510      	push	{r4, lr}
 802f362:	4290      	cmp	r0, r2
 802f364:	d101      	bne.n	802f36a <memcmp+0xe>
 802f366:	2000      	movs	r0, #0
 802f368:	e005      	b.n	802f376 <memcmp+0x1a>
 802f36a:	7803      	ldrb	r3, [r0, #0]
 802f36c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 802f370:	42a3      	cmp	r3, r4
 802f372:	d001      	beq.n	802f378 <memcmp+0x1c>
 802f374:	1b18      	subs	r0, r3, r4
 802f376:	bd10      	pop	{r4, pc}
 802f378:	3001      	adds	r0, #1
 802f37a:	e7f2      	b.n	802f362 <memcmp+0x6>

0802f37c <memmove>:
 802f37c:	4288      	cmp	r0, r1
 802f37e:	b510      	push	{r4, lr}
 802f380:	eb01 0402 	add.w	r4, r1, r2
 802f384:	d902      	bls.n	802f38c <memmove+0x10>
 802f386:	4284      	cmp	r4, r0
 802f388:	4623      	mov	r3, r4
 802f38a:	d807      	bhi.n	802f39c <memmove+0x20>
 802f38c:	1e43      	subs	r3, r0, #1
 802f38e:	42a1      	cmp	r1, r4
 802f390:	d008      	beq.n	802f3a4 <memmove+0x28>
 802f392:	f811 2b01 	ldrb.w	r2, [r1], #1
 802f396:	f803 2f01 	strb.w	r2, [r3, #1]!
 802f39a:	e7f8      	b.n	802f38e <memmove+0x12>
 802f39c:	4402      	add	r2, r0
 802f39e:	4601      	mov	r1, r0
 802f3a0:	428a      	cmp	r2, r1
 802f3a2:	d100      	bne.n	802f3a6 <memmove+0x2a>
 802f3a4:	bd10      	pop	{r4, pc}
 802f3a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 802f3aa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 802f3ae:	e7f7      	b.n	802f3a0 <memmove+0x24>

0802f3b0 <memset>:
 802f3b0:	4402      	add	r2, r0
 802f3b2:	4603      	mov	r3, r0
 802f3b4:	4293      	cmp	r3, r2
 802f3b6:	d100      	bne.n	802f3ba <memset+0xa>
 802f3b8:	4770      	bx	lr
 802f3ba:	f803 1b01 	strb.w	r1, [r3], #1
 802f3be:	e7f9      	b.n	802f3b4 <memset+0x4>

0802f3c0 <__errno>:
 802f3c0:	4b01      	ldr	r3, [pc, #4]	@ (802f3c8 <__errno+0x8>)
 802f3c2:	6818      	ldr	r0, [r3, #0]
 802f3c4:	4770      	bx	lr
 802f3c6:	bf00      	nop
 802f3c8:	20000480 	.word	0x20000480

0802f3cc <__libc_init_array>:
 802f3cc:	b570      	push	{r4, r5, r6, lr}
 802f3ce:	4d0d      	ldr	r5, [pc, #52]	@ (802f404 <__libc_init_array+0x38>)
 802f3d0:	2600      	movs	r6, #0
 802f3d2:	4c0d      	ldr	r4, [pc, #52]	@ (802f408 <__libc_init_array+0x3c>)
 802f3d4:	1b64      	subs	r4, r4, r5
 802f3d6:	10a4      	asrs	r4, r4, #2
 802f3d8:	42a6      	cmp	r6, r4
 802f3da:	d109      	bne.n	802f3f0 <__libc_init_array+0x24>
 802f3dc:	4d0b      	ldr	r5, [pc, #44]	@ (802f40c <__libc_init_array+0x40>)
 802f3de:	2600      	movs	r6, #0
 802f3e0:	4c0b      	ldr	r4, [pc, #44]	@ (802f410 <__libc_init_array+0x44>)
 802f3e2:	f000 fc61 	bl	802fca8 <_init>
 802f3e6:	1b64      	subs	r4, r4, r5
 802f3e8:	10a4      	asrs	r4, r4, #2
 802f3ea:	42a6      	cmp	r6, r4
 802f3ec:	d105      	bne.n	802f3fa <__libc_init_array+0x2e>
 802f3ee:	bd70      	pop	{r4, r5, r6, pc}
 802f3f0:	f855 3b04 	ldr.w	r3, [r5], #4
 802f3f4:	3601      	adds	r6, #1
 802f3f6:	4798      	blx	r3
 802f3f8:	e7ee      	b.n	802f3d8 <__libc_init_array+0xc>
 802f3fa:	f855 3b04 	ldr.w	r3, [r5], #4
 802f3fe:	3601      	adds	r6, #1
 802f400:	4798      	blx	r3
 802f402:	e7f2      	b.n	802f3ea <__libc_init_array+0x1e>
 802f404:	08031f60 	.word	0x08031f60
 802f408:	08031f60 	.word	0x08031f60
 802f40c:	08031f60 	.word	0x08031f60
 802f410:	08031f64 	.word	0x08031f64

0802f414 <__aeabi_memcpy>:
 802f414:	f000 b803 	b.w	802f41e <memcpy>

0802f418 <__aeabi_memclr>:
 802f418:	2200      	movs	r2, #0
 802f41a:	f7d0 bec1 	b.w	80001a0 <__aeabi_memset>

0802f41e <memcpy>:
 802f41e:	440a      	add	r2, r1
 802f420:	1e43      	subs	r3, r0, #1
 802f422:	4291      	cmp	r1, r2
 802f424:	d100      	bne.n	802f428 <memcpy+0xa>
 802f426:	4770      	bx	lr
 802f428:	b510      	push	{r4, lr}
 802f42a:	f811 4b01 	ldrb.w	r4, [r1], #1
 802f42e:	4291      	cmp	r1, r2
 802f430:	f803 4f01 	strb.w	r4, [r3, #1]!
 802f434:	d1f9      	bne.n	802f42a <memcpy+0xc>
 802f436:	bd10      	pop	{r4, pc}

0802f438 <__ssputs_r>:
 802f438:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802f43c:	461f      	mov	r7, r3
 802f43e:	688e      	ldr	r6, [r1, #8]
 802f440:	4682      	mov	sl, r0
 802f442:	460c      	mov	r4, r1
 802f444:	42be      	cmp	r6, r7
 802f446:	4690      	mov	r8, r2
 802f448:	680b      	ldr	r3, [r1, #0]
 802f44a:	d82d      	bhi.n	802f4a8 <__ssputs_r+0x70>
 802f44c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 802f450:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 802f454:	d026      	beq.n	802f4a4 <__ssputs_r+0x6c>
 802f456:	6965      	ldr	r5, [r4, #20]
 802f458:	6909      	ldr	r1, [r1, #16]
 802f45a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802f45e:	eba3 0901 	sub.w	r9, r3, r1
 802f462:	1c7b      	adds	r3, r7, #1
 802f464:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 802f468:	444b      	add	r3, r9
 802f46a:	106d      	asrs	r5, r5, #1
 802f46c:	429d      	cmp	r5, r3
 802f46e:	bf38      	it	cc
 802f470:	461d      	movcc	r5, r3
 802f472:	0553      	lsls	r3, r2, #21
 802f474:	d527      	bpl.n	802f4c6 <__ssputs_r+0x8e>
 802f476:	4629      	mov	r1, r5
 802f478:	f000 fb42 	bl	802fb00 <_malloc_r>
 802f47c:	4606      	mov	r6, r0
 802f47e:	b360      	cbz	r0, 802f4da <__ssputs_r+0xa2>
 802f480:	464a      	mov	r2, r9
 802f482:	6921      	ldr	r1, [r4, #16]
 802f484:	f7ff ffcb 	bl	802f41e <memcpy>
 802f488:	89a3      	ldrh	r3, [r4, #12]
 802f48a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 802f48e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 802f492:	81a3      	strh	r3, [r4, #12]
 802f494:	6126      	str	r6, [r4, #16]
 802f496:	444e      	add	r6, r9
 802f498:	6165      	str	r5, [r4, #20]
 802f49a:	eba5 0509 	sub.w	r5, r5, r9
 802f49e:	6026      	str	r6, [r4, #0]
 802f4a0:	463e      	mov	r6, r7
 802f4a2:	60a5      	str	r5, [r4, #8]
 802f4a4:	42be      	cmp	r6, r7
 802f4a6:	d900      	bls.n	802f4aa <__ssputs_r+0x72>
 802f4a8:	463e      	mov	r6, r7
 802f4aa:	4632      	mov	r2, r6
 802f4ac:	4641      	mov	r1, r8
 802f4ae:	6820      	ldr	r0, [r4, #0]
 802f4b0:	f7ff ff64 	bl	802f37c <memmove>
 802f4b4:	68a3      	ldr	r3, [r4, #8]
 802f4b6:	2000      	movs	r0, #0
 802f4b8:	1b9b      	subs	r3, r3, r6
 802f4ba:	60a3      	str	r3, [r4, #8]
 802f4bc:	6823      	ldr	r3, [r4, #0]
 802f4be:	4433      	add	r3, r6
 802f4c0:	6023      	str	r3, [r4, #0]
 802f4c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802f4c6:	462a      	mov	r2, r5
 802f4c8:	f000 fba6 	bl	802fc18 <_realloc_r>
 802f4cc:	4606      	mov	r6, r0
 802f4ce:	2800      	cmp	r0, #0
 802f4d0:	d1e0      	bne.n	802f494 <__ssputs_r+0x5c>
 802f4d2:	6921      	ldr	r1, [r4, #16]
 802f4d4:	4650      	mov	r0, sl
 802f4d6:	f000 faa7 	bl	802fa28 <_free_r>
 802f4da:	230c      	movs	r3, #12
 802f4dc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802f4e0:	f8ca 3000 	str.w	r3, [sl]
 802f4e4:	89a3      	ldrh	r3, [r4, #12]
 802f4e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802f4ea:	81a3      	strh	r3, [r4, #12]
 802f4ec:	e7e9      	b.n	802f4c2 <__ssputs_r+0x8a>
	...

0802f4f0 <_svfiprintf_r>:
 802f4f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802f4f4:	4698      	mov	r8, r3
 802f4f6:	898b      	ldrh	r3, [r1, #12]
 802f4f8:	b09d      	sub	sp, #116	@ 0x74
 802f4fa:	4607      	mov	r7, r0
 802f4fc:	061b      	lsls	r3, r3, #24
 802f4fe:	460d      	mov	r5, r1
 802f500:	4614      	mov	r4, r2
 802f502:	d510      	bpl.n	802f526 <_svfiprintf_r+0x36>
 802f504:	690b      	ldr	r3, [r1, #16]
 802f506:	b973      	cbnz	r3, 802f526 <_svfiprintf_r+0x36>
 802f508:	2140      	movs	r1, #64	@ 0x40
 802f50a:	f000 faf9 	bl	802fb00 <_malloc_r>
 802f50e:	6028      	str	r0, [r5, #0]
 802f510:	6128      	str	r0, [r5, #16]
 802f512:	b930      	cbnz	r0, 802f522 <_svfiprintf_r+0x32>
 802f514:	230c      	movs	r3, #12
 802f516:	603b      	str	r3, [r7, #0]
 802f518:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802f51c:	b01d      	add	sp, #116	@ 0x74
 802f51e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802f522:	2340      	movs	r3, #64	@ 0x40
 802f524:	616b      	str	r3, [r5, #20]
 802f526:	2300      	movs	r3, #0
 802f528:	f8cd 800c 	str.w	r8, [sp, #12]
 802f52c:	f04f 0901 	mov.w	r9, #1
 802f530:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 802f6d4 <_svfiprintf_r+0x1e4>
 802f534:	9309      	str	r3, [sp, #36]	@ 0x24
 802f536:	2320      	movs	r3, #32
 802f538:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 802f53c:	2330      	movs	r3, #48	@ 0x30
 802f53e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 802f542:	4623      	mov	r3, r4
 802f544:	469a      	mov	sl, r3
 802f546:	f813 2b01 	ldrb.w	r2, [r3], #1
 802f54a:	b10a      	cbz	r2, 802f550 <_svfiprintf_r+0x60>
 802f54c:	2a25      	cmp	r2, #37	@ 0x25
 802f54e:	d1f9      	bne.n	802f544 <_svfiprintf_r+0x54>
 802f550:	ebba 0b04 	subs.w	fp, sl, r4
 802f554:	d00b      	beq.n	802f56e <_svfiprintf_r+0x7e>
 802f556:	465b      	mov	r3, fp
 802f558:	4622      	mov	r2, r4
 802f55a:	4629      	mov	r1, r5
 802f55c:	4638      	mov	r0, r7
 802f55e:	f7ff ff6b 	bl	802f438 <__ssputs_r>
 802f562:	3001      	adds	r0, #1
 802f564:	f000 80a7 	beq.w	802f6b6 <_svfiprintf_r+0x1c6>
 802f568:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802f56a:	445a      	add	r2, fp
 802f56c:	9209      	str	r2, [sp, #36]	@ 0x24
 802f56e:	f89a 3000 	ldrb.w	r3, [sl]
 802f572:	2b00      	cmp	r3, #0
 802f574:	f000 809f 	beq.w	802f6b6 <_svfiprintf_r+0x1c6>
 802f578:	2300      	movs	r3, #0
 802f57a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 802f57e:	f10a 0a01 	add.w	sl, sl, #1
 802f582:	9304      	str	r3, [sp, #16]
 802f584:	9307      	str	r3, [sp, #28]
 802f586:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 802f58a:	931a      	str	r3, [sp, #104]	@ 0x68
 802f58c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802f590:	4654      	mov	r4, sl
 802f592:	2205      	movs	r2, #5
 802f594:	484f      	ldr	r0, [pc, #316]	@ (802f6d4 <_svfiprintf_r+0x1e4>)
 802f596:	f814 1b01 	ldrb.w	r1, [r4], #1
 802f59a:	f000 fa37 	bl	802fa0c <memchr>
 802f59e:	9a04      	ldr	r2, [sp, #16]
 802f5a0:	b9d8      	cbnz	r0, 802f5da <_svfiprintf_r+0xea>
 802f5a2:	06d0      	lsls	r0, r2, #27
 802f5a4:	bf44      	itt	mi
 802f5a6:	2320      	movmi	r3, #32
 802f5a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 802f5ac:	0711      	lsls	r1, r2, #28
 802f5ae:	bf44      	itt	mi
 802f5b0:	232b      	movmi	r3, #43	@ 0x2b
 802f5b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 802f5b6:	f89a 3000 	ldrb.w	r3, [sl]
 802f5ba:	2b2a      	cmp	r3, #42	@ 0x2a
 802f5bc:	d015      	beq.n	802f5ea <_svfiprintf_r+0xfa>
 802f5be:	9a07      	ldr	r2, [sp, #28]
 802f5c0:	4654      	mov	r4, sl
 802f5c2:	2000      	movs	r0, #0
 802f5c4:	f04f 0c0a 	mov.w	ip, #10
 802f5c8:	4621      	mov	r1, r4
 802f5ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 802f5ce:	3b30      	subs	r3, #48	@ 0x30
 802f5d0:	2b09      	cmp	r3, #9
 802f5d2:	d94b      	bls.n	802f66c <_svfiprintf_r+0x17c>
 802f5d4:	b1b0      	cbz	r0, 802f604 <_svfiprintf_r+0x114>
 802f5d6:	9207      	str	r2, [sp, #28]
 802f5d8:	e014      	b.n	802f604 <_svfiprintf_r+0x114>
 802f5da:	eba0 0308 	sub.w	r3, r0, r8
 802f5de:	46a2      	mov	sl, r4
 802f5e0:	fa09 f303 	lsl.w	r3, r9, r3
 802f5e4:	4313      	orrs	r3, r2
 802f5e6:	9304      	str	r3, [sp, #16]
 802f5e8:	e7d2      	b.n	802f590 <_svfiprintf_r+0xa0>
 802f5ea:	9b03      	ldr	r3, [sp, #12]
 802f5ec:	1d19      	adds	r1, r3, #4
 802f5ee:	681b      	ldr	r3, [r3, #0]
 802f5f0:	2b00      	cmp	r3, #0
 802f5f2:	9103      	str	r1, [sp, #12]
 802f5f4:	bfbb      	ittet	lt
 802f5f6:	425b      	neglt	r3, r3
 802f5f8:	f042 0202 	orrlt.w	r2, r2, #2
 802f5fc:	9307      	strge	r3, [sp, #28]
 802f5fe:	9307      	strlt	r3, [sp, #28]
 802f600:	bfb8      	it	lt
 802f602:	9204      	strlt	r2, [sp, #16]
 802f604:	7823      	ldrb	r3, [r4, #0]
 802f606:	2b2e      	cmp	r3, #46	@ 0x2e
 802f608:	d10a      	bne.n	802f620 <_svfiprintf_r+0x130>
 802f60a:	7863      	ldrb	r3, [r4, #1]
 802f60c:	2b2a      	cmp	r3, #42	@ 0x2a
 802f60e:	d132      	bne.n	802f676 <_svfiprintf_r+0x186>
 802f610:	9b03      	ldr	r3, [sp, #12]
 802f612:	3402      	adds	r4, #2
 802f614:	1d1a      	adds	r2, r3, #4
 802f616:	681b      	ldr	r3, [r3, #0]
 802f618:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 802f61c:	9203      	str	r2, [sp, #12]
 802f61e:	9305      	str	r3, [sp, #20]
 802f620:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 802f6e4 <_svfiprintf_r+0x1f4>
 802f624:	2203      	movs	r2, #3
 802f626:	7821      	ldrb	r1, [r4, #0]
 802f628:	4650      	mov	r0, sl
 802f62a:	f000 f9ef 	bl	802fa0c <memchr>
 802f62e:	b138      	cbz	r0, 802f640 <_svfiprintf_r+0x150>
 802f630:	eba0 000a 	sub.w	r0, r0, sl
 802f634:	2240      	movs	r2, #64	@ 0x40
 802f636:	9b04      	ldr	r3, [sp, #16]
 802f638:	3401      	adds	r4, #1
 802f63a:	4082      	lsls	r2, r0
 802f63c:	4313      	orrs	r3, r2
 802f63e:	9304      	str	r3, [sp, #16]
 802f640:	f814 1b01 	ldrb.w	r1, [r4], #1
 802f644:	2206      	movs	r2, #6
 802f646:	4824      	ldr	r0, [pc, #144]	@ (802f6d8 <_svfiprintf_r+0x1e8>)
 802f648:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 802f64c:	f000 f9de 	bl	802fa0c <memchr>
 802f650:	2800      	cmp	r0, #0
 802f652:	d036      	beq.n	802f6c2 <_svfiprintf_r+0x1d2>
 802f654:	4b21      	ldr	r3, [pc, #132]	@ (802f6dc <_svfiprintf_r+0x1ec>)
 802f656:	bb1b      	cbnz	r3, 802f6a0 <_svfiprintf_r+0x1b0>
 802f658:	9b03      	ldr	r3, [sp, #12]
 802f65a:	3307      	adds	r3, #7
 802f65c:	f023 0307 	bic.w	r3, r3, #7
 802f660:	3308      	adds	r3, #8
 802f662:	9303      	str	r3, [sp, #12]
 802f664:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802f666:	4433      	add	r3, r6
 802f668:	9309      	str	r3, [sp, #36]	@ 0x24
 802f66a:	e76a      	b.n	802f542 <_svfiprintf_r+0x52>
 802f66c:	fb0c 3202 	mla	r2, ip, r2, r3
 802f670:	460c      	mov	r4, r1
 802f672:	2001      	movs	r0, #1
 802f674:	e7a8      	b.n	802f5c8 <_svfiprintf_r+0xd8>
 802f676:	2300      	movs	r3, #0
 802f678:	3401      	adds	r4, #1
 802f67a:	f04f 0c0a 	mov.w	ip, #10
 802f67e:	4619      	mov	r1, r3
 802f680:	9305      	str	r3, [sp, #20]
 802f682:	4620      	mov	r0, r4
 802f684:	f810 2b01 	ldrb.w	r2, [r0], #1
 802f688:	3a30      	subs	r2, #48	@ 0x30
 802f68a:	2a09      	cmp	r2, #9
 802f68c:	d903      	bls.n	802f696 <_svfiprintf_r+0x1a6>
 802f68e:	2b00      	cmp	r3, #0
 802f690:	d0c6      	beq.n	802f620 <_svfiprintf_r+0x130>
 802f692:	9105      	str	r1, [sp, #20]
 802f694:	e7c4      	b.n	802f620 <_svfiprintf_r+0x130>
 802f696:	fb0c 2101 	mla	r1, ip, r1, r2
 802f69a:	4604      	mov	r4, r0
 802f69c:	2301      	movs	r3, #1
 802f69e:	e7f0      	b.n	802f682 <_svfiprintf_r+0x192>
 802f6a0:	ab03      	add	r3, sp, #12
 802f6a2:	462a      	mov	r2, r5
 802f6a4:	a904      	add	r1, sp, #16
 802f6a6:	4638      	mov	r0, r7
 802f6a8:	9300      	str	r3, [sp, #0]
 802f6aa:	4b0d      	ldr	r3, [pc, #52]	@ (802f6e0 <_svfiprintf_r+0x1f0>)
 802f6ac:	f3af 8000 	nop.w
 802f6b0:	1c42      	adds	r2, r0, #1
 802f6b2:	4606      	mov	r6, r0
 802f6b4:	d1d6      	bne.n	802f664 <_svfiprintf_r+0x174>
 802f6b6:	89ab      	ldrh	r3, [r5, #12]
 802f6b8:	065b      	lsls	r3, r3, #25
 802f6ba:	f53f af2d 	bmi.w	802f518 <_svfiprintf_r+0x28>
 802f6be:	9809      	ldr	r0, [sp, #36]	@ 0x24
 802f6c0:	e72c      	b.n	802f51c <_svfiprintf_r+0x2c>
 802f6c2:	ab03      	add	r3, sp, #12
 802f6c4:	462a      	mov	r2, r5
 802f6c6:	a904      	add	r1, sp, #16
 802f6c8:	4638      	mov	r0, r7
 802f6ca:	9300      	str	r3, [sp, #0]
 802f6cc:	4b04      	ldr	r3, [pc, #16]	@ (802f6e0 <_svfiprintf_r+0x1f0>)
 802f6ce:	f000 f87d 	bl	802f7cc <_printf_i>
 802f6d2:	e7ed      	b.n	802f6b0 <_svfiprintf_r+0x1c0>
 802f6d4:	08031f24 	.word	0x08031f24
 802f6d8:	08031f2e 	.word	0x08031f2e
 802f6dc:	00000000 	.word	0x00000000
 802f6e0:	0802f439 	.word	0x0802f439
 802f6e4:	08031f2a 	.word	0x08031f2a

0802f6e8 <_printf_common>:
 802f6e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802f6ec:	4616      	mov	r6, r2
 802f6ee:	4698      	mov	r8, r3
 802f6f0:	688a      	ldr	r2, [r1, #8]
 802f6f2:	4607      	mov	r7, r0
 802f6f4:	690b      	ldr	r3, [r1, #16]
 802f6f6:	460c      	mov	r4, r1
 802f6f8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 802f6fc:	4293      	cmp	r3, r2
 802f6fe:	bfb8      	it	lt
 802f700:	4613      	movlt	r3, r2
 802f702:	6033      	str	r3, [r6, #0]
 802f704:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 802f708:	b10a      	cbz	r2, 802f70e <_printf_common+0x26>
 802f70a:	3301      	adds	r3, #1
 802f70c:	6033      	str	r3, [r6, #0]
 802f70e:	6823      	ldr	r3, [r4, #0]
 802f710:	0699      	lsls	r1, r3, #26
 802f712:	bf42      	ittt	mi
 802f714:	6833      	ldrmi	r3, [r6, #0]
 802f716:	3302      	addmi	r3, #2
 802f718:	6033      	strmi	r3, [r6, #0]
 802f71a:	6825      	ldr	r5, [r4, #0]
 802f71c:	f015 0506 	ands.w	r5, r5, #6
 802f720:	d106      	bne.n	802f730 <_printf_common+0x48>
 802f722:	f104 0a19 	add.w	sl, r4, #25
 802f726:	68e3      	ldr	r3, [r4, #12]
 802f728:	6832      	ldr	r2, [r6, #0]
 802f72a:	1a9b      	subs	r3, r3, r2
 802f72c:	42ab      	cmp	r3, r5
 802f72e:	dc2b      	bgt.n	802f788 <_printf_common+0xa0>
 802f730:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 802f734:	6822      	ldr	r2, [r4, #0]
 802f736:	3b00      	subs	r3, #0
 802f738:	bf18      	it	ne
 802f73a:	2301      	movne	r3, #1
 802f73c:	0692      	lsls	r2, r2, #26
 802f73e:	d430      	bmi.n	802f7a2 <_printf_common+0xba>
 802f740:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 802f744:	4641      	mov	r1, r8
 802f746:	4638      	mov	r0, r7
 802f748:	47c8      	blx	r9
 802f74a:	3001      	adds	r0, #1
 802f74c:	d023      	beq.n	802f796 <_printf_common+0xae>
 802f74e:	6823      	ldr	r3, [r4, #0]
 802f750:	341a      	adds	r4, #26
 802f752:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 802f756:	f003 0306 	and.w	r3, r3, #6
 802f75a:	2b04      	cmp	r3, #4
 802f75c:	bf0a      	itet	eq
 802f75e:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 802f762:	2500      	movne	r5, #0
 802f764:	6833      	ldreq	r3, [r6, #0]
 802f766:	f04f 0600 	mov.w	r6, #0
 802f76a:	bf08      	it	eq
 802f76c:	1aed      	subeq	r5, r5, r3
 802f76e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 802f772:	bf08      	it	eq
 802f774:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 802f778:	4293      	cmp	r3, r2
 802f77a:	bfc4      	itt	gt
 802f77c:	1a9b      	subgt	r3, r3, r2
 802f77e:	18ed      	addgt	r5, r5, r3
 802f780:	42b5      	cmp	r5, r6
 802f782:	d11a      	bne.n	802f7ba <_printf_common+0xd2>
 802f784:	2000      	movs	r0, #0
 802f786:	e008      	b.n	802f79a <_printf_common+0xb2>
 802f788:	2301      	movs	r3, #1
 802f78a:	4652      	mov	r2, sl
 802f78c:	4641      	mov	r1, r8
 802f78e:	4638      	mov	r0, r7
 802f790:	47c8      	blx	r9
 802f792:	3001      	adds	r0, #1
 802f794:	d103      	bne.n	802f79e <_printf_common+0xb6>
 802f796:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802f79a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802f79e:	3501      	adds	r5, #1
 802f7a0:	e7c1      	b.n	802f726 <_printf_common+0x3e>
 802f7a2:	18e1      	adds	r1, r4, r3
 802f7a4:	1c5a      	adds	r2, r3, #1
 802f7a6:	2030      	movs	r0, #48	@ 0x30
 802f7a8:	3302      	adds	r3, #2
 802f7aa:	4422      	add	r2, r4
 802f7ac:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 802f7b0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 802f7b4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 802f7b8:	e7c2      	b.n	802f740 <_printf_common+0x58>
 802f7ba:	2301      	movs	r3, #1
 802f7bc:	4622      	mov	r2, r4
 802f7be:	4641      	mov	r1, r8
 802f7c0:	4638      	mov	r0, r7
 802f7c2:	47c8      	blx	r9
 802f7c4:	3001      	adds	r0, #1
 802f7c6:	d0e6      	beq.n	802f796 <_printf_common+0xae>
 802f7c8:	3601      	adds	r6, #1
 802f7ca:	e7d9      	b.n	802f780 <_printf_common+0x98>

0802f7cc <_printf_i>:
 802f7cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 802f7d0:	7e0f      	ldrb	r7, [r1, #24]
 802f7d2:	4691      	mov	r9, r2
 802f7d4:	4680      	mov	r8, r0
 802f7d6:	460c      	mov	r4, r1
 802f7d8:	2f78      	cmp	r7, #120	@ 0x78
 802f7da:	469a      	mov	sl, r3
 802f7dc:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 802f7de:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 802f7e2:	d807      	bhi.n	802f7f4 <_printf_i+0x28>
 802f7e4:	2f62      	cmp	r7, #98	@ 0x62
 802f7e6:	d80a      	bhi.n	802f7fe <_printf_i+0x32>
 802f7e8:	2f00      	cmp	r7, #0
 802f7ea:	f000 80d2 	beq.w	802f992 <_printf_i+0x1c6>
 802f7ee:	2f58      	cmp	r7, #88	@ 0x58
 802f7f0:	f000 80b9 	beq.w	802f966 <_printf_i+0x19a>
 802f7f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 802f7f8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 802f7fc:	e03a      	b.n	802f874 <_printf_i+0xa8>
 802f7fe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 802f802:	2b15      	cmp	r3, #21
 802f804:	d8f6      	bhi.n	802f7f4 <_printf_i+0x28>
 802f806:	a101      	add	r1, pc, #4	@ (adr r1, 802f80c <_printf_i+0x40>)
 802f808:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 802f80c:	0802f865 	.word	0x0802f865
 802f810:	0802f879 	.word	0x0802f879
 802f814:	0802f7f5 	.word	0x0802f7f5
 802f818:	0802f7f5 	.word	0x0802f7f5
 802f81c:	0802f7f5 	.word	0x0802f7f5
 802f820:	0802f7f5 	.word	0x0802f7f5
 802f824:	0802f879 	.word	0x0802f879
 802f828:	0802f7f5 	.word	0x0802f7f5
 802f82c:	0802f7f5 	.word	0x0802f7f5
 802f830:	0802f7f5 	.word	0x0802f7f5
 802f834:	0802f7f5 	.word	0x0802f7f5
 802f838:	0802f979 	.word	0x0802f979
 802f83c:	0802f8a3 	.word	0x0802f8a3
 802f840:	0802f933 	.word	0x0802f933
 802f844:	0802f7f5 	.word	0x0802f7f5
 802f848:	0802f7f5 	.word	0x0802f7f5
 802f84c:	0802f99b 	.word	0x0802f99b
 802f850:	0802f7f5 	.word	0x0802f7f5
 802f854:	0802f8a3 	.word	0x0802f8a3
 802f858:	0802f7f5 	.word	0x0802f7f5
 802f85c:	0802f7f5 	.word	0x0802f7f5
 802f860:	0802f93b 	.word	0x0802f93b
 802f864:	6833      	ldr	r3, [r6, #0]
 802f866:	1d1a      	adds	r2, r3, #4
 802f868:	681b      	ldr	r3, [r3, #0]
 802f86a:	6032      	str	r2, [r6, #0]
 802f86c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 802f870:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 802f874:	2301      	movs	r3, #1
 802f876:	e09d      	b.n	802f9b4 <_printf_i+0x1e8>
 802f878:	6833      	ldr	r3, [r6, #0]
 802f87a:	6820      	ldr	r0, [r4, #0]
 802f87c:	1d19      	adds	r1, r3, #4
 802f87e:	6031      	str	r1, [r6, #0]
 802f880:	0606      	lsls	r6, r0, #24
 802f882:	d501      	bpl.n	802f888 <_printf_i+0xbc>
 802f884:	681d      	ldr	r5, [r3, #0]
 802f886:	e003      	b.n	802f890 <_printf_i+0xc4>
 802f888:	0645      	lsls	r5, r0, #25
 802f88a:	d5fb      	bpl.n	802f884 <_printf_i+0xb8>
 802f88c:	f9b3 5000 	ldrsh.w	r5, [r3]
 802f890:	2d00      	cmp	r5, #0
 802f892:	da03      	bge.n	802f89c <_printf_i+0xd0>
 802f894:	232d      	movs	r3, #45	@ 0x2d
 802f896:	426d      	negs	r5, r5
 802f898:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 802f89c:	4859      	ldr	r0, [pc, #356]	@ (802fa04 <_printf_i+0x238>)
 802f89e:	230a      	movs	r3, #10
 802f8a0:	e011      	b.n	802f8c6 <_printf_i+0xfa>
 802f8a2:	6821      	ldr	r1, [r4, #0]
 802f8a4:	6833      	ldr	r3, [r6, #0]
 802f8a6:	0608      	lsls	r0, r1, #24
 802f8a8:	f853 5b04 	ldr.w	r5, [r3], #4
 802f8ac:	d402      	bmi.n	802f8b4 <_printf_i+0xe8>
 802f8ae:	0649      	lsls	r1, r1, #25
 802f8b0:	bf48      	it	mi
 802f8b2:	b2ad      	uxthmi	r5, r5
 802f8b4:	2f6f      	cmp	r7, #111	@ 0x6f
 802f8b6:	6033      	str	r3, [r6, #0]
 802f8b8:	4852      	ldr	r0, [pc, #328]	@ (802fa04 <_printf_i+0x238>)
 802f8ba:	bf14      	ite	ne
 802f8bc:	230a      	movne	r3, #10
 802f8be:	2308      	moveq	r3, #8
 802f8c0:	2100      	movs	r1, #0
 802f8c2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 802f8c6:	6866      	ldr	r6, [r4, #4]
 802f8c8:	2e00      	cmp	r6, #0
 802f8ca:	60a6      	str	r6, [r4, #8]
 802f8cc:	bfa2      	ittt	ge
 802f8ce:	6821      	ldrge	r1, [r4, #0]
 802f8d0:	f021 0104 	bicge.w	r1, r1, #4
 802f8d4:	6021      	strge	r1, [r4, #0]
 802f8d6:	b90d      	cbnz	r5, 802f8dc <_printf_i+0x110>
 802f8d8:	2e00      	cmp	r6, #0
 802f8da:	d04b      	beq.n	802f974 <_printf_i+0x1a8>
 802f8dc:	4616      	mov	r6, r2
 802f8de:	fbb5 f1f3 	udiv	r1, r5, r3
 802f8e2:	fb03 5711 	mls	r7, r3, r1, r5
 802f8e6:	5dc7      	ldrb	r7, [r0, r7]
 802f8e8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 802f8ec:	462f      	mov	r7, r5
 802f8ee:	460d      	mov	r5, r1
 802f8f0:	42bb      	cmp	r3, r7
 802f8f2:	d9f4      	bls.n	802f8de <_printf_i+0x112>
 802f8f4:	2b08      	cmp	r3, #8
 802f8f6:	d10b      	bne.n	802f910 <_printf_i+0x144>
 802f8f8:	6823      	ldr	r3, [r4, #0]
 802f8fa:	07df      	lsls	r7, r3, #31
 802f8fc:	d508      	bpl.n	802f910 <_printf_i+0x144>
 802f8fe:	6923      	ldr	r3, [r4, #16]
 802f900:	6861      	ldr	r1, [r4, #4]
 802f902:	4299      	cmp	r1, r3
 802f904:	bfde      	ittt	le
 802f906:	2330      	movle	r3, #48	@ 0x30
 802f908:	f806 3c01 	strble.w	r3, [r6, #-1]
 802f90c:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 802f910:	1b92      	subs	r2, r2, r6
 802f912:	6122      	str	r2, [r4, #16]
 802f914:	464b      	mov	r3, r9
 802f916:	aa03      	add	r2, sp, #12
 802f918:	4621      	mov	r1, r4
 802f91a:	4640      	mov	r0, r8
 802f91c:	f8cd a000 	str.w	sl, [sp]
 802f920:	f7ff fee2 	bl	802f6e8 <_printf_common>
 802f924:	3001      	adds	r0, #1
 802f926:	d14a      	bne.n	802f9be <_printf_i+0x1f2>
 802f928:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802f92c:	b004      	add	sp, #16
 802f92e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802f932:	6823      	ldr	r3, [r4, #0]
 802f934:	f043 0320 	orr.w	r3, r3, #32
 802f938:	6023      	str	r3, [r4, #0]
 802f93a:	2778      	movs	r7, #120	@ 0x78
 802f93c:	4832      	ldr	r0, [pc, #200]	@ (802fa08 <_printf_i+0x23c>)
 802f93e:	6823      	ldr	r3, [r4, #0]
 802f940:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 802f944:	061f      	lsls	r7, r3, #24
 802f946:	6831      	ldr	r1, [r6, #0]
 802f948:	f851 5b04 	ldr.w	r5, [r1], #4
 802f94c:	d402      	bmi.n	802f954 <_printf_i+0x188>
 802f94e:	065f      	lsls	r7, r3, #25
 802f950:	bf48      	it	mi
 802f952:	b2ad      	uxthmi	r5, r5
 802f954:	6031      	str	r1, [r6, #0]
 802f956:	07d9      	lsls	r1, r3, #31
 802f958:	bf44      	itt	mi
 802f95a:	f043 0320 	orrmi.w	r3, r3, #32
 802f95e:	6023      	strmi	r3, [r4, #0]
 802f960:	b11d      	cbz	r5, 802f96a <_printf_i+0x19e>
 802f962:	2310      	movs	r3, #16
 802f964:	e7ac      	b.n	802f8c0 <_printf_i+0xf4>
 802f966:	4827      	ldr	r0, [pc, #156]	@ (802fa04 <_printf_i+0x238>)
 802f968:	e7e9      	b.n	802f93e <_printf_i+0x172>
 802f96a:	6823      	ldr	r3, [r4, #0]
 802f96c:	f023 0320 	bic.w	r3, r3, #32
 802f970:	6023      	str	r3, [r4, #0]
 802f972:	e7f6      	b.n	802f962 <_printf_i+0x196>
 802f974:	4616      	mov	r6, r2
 802f976:	e7bd      	b.n	802f8f4 <_printf_i+0x128>
 802f978:	6833      	ldr	r3, [r6, #0]
 802f97a:	6825      	ldr	r5, [r4, #0]
 802f97c:	1d18      	adds	r0, r3, #4
 802f97e:	6961      	ldr	r1, [r4, #20]
 802f980:	6030      	str	r0, [r6, #0]
 802f982:	062e      	lsls	r6, r5, #24
 802f984:	681b      	ldr	r3, [r3, #0]
 802f986:	d501      	bpl.n	802f98c <_printf_i+0x1c0>
 802f988:	6019      	str	r1, [r3, #0]
 802f98a:	e002      	b.n	802f992 <_printf_i+0x1c6>
 802f98c:	0668      	lsls	r0, r5, #25
 802f98e:	d5fb      	bpl.n	802f988 <_printf_i+0x1bc>
 802f990:	8019      	strh	r1, [r3, #0]
 802f992:	2300      	movs	r3, #0
 802f994:	4616      	mov	r6, r2
 802f996:	6123      	str	r3, [r4, #16]
 802f998:	e7bc      	b.n	802f914 <_printf_i+0x148>
 802f99a:	6833      	ldr	r3, [r6, #0]
 802f99c:	2100      	movs	r1, #0
 802f99e:	1d1a      	adds	r2, r3, #4
 802f9a0:	6032      	str	r2, [r6, #0]
 802f9a2:	681e      	ldr	r6, [r3, #0]
 802f9a4:	6862      	ldr	r2, [r4, #4]
 802f9a6:	4630      	mov	r0, r6
 802f9a8:	f000 f830 	bl	802fa0c <memchr>
 802f9ac:	b108      	cbz	r0, 802f9b2 <_printf_i+0x1e6>
 802f9ae:	1b80      	subs	r0, r0, r6
 802f9b0:	6060      	str	r0, [r4, #4]
 802f9b2:	6863      	ldr	r3, [r4, #4]
 802f9b4:	6123      	str	r3, [r4, #16]
 802f9b6:	2300      	movs	r3, #0
 802f9b8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 802f9bc:	e7aa      	b.n	802f914 <_printf_i+0x148>
 802f9be:	6923      	ldr	r3, [r4, #16]
 802f9c0:	4632      	mov	r2, r6
 802f9c2:	4649      	mov	r1, r9
 802f9c4:	4640      	mov	r0, r8
 802f9c6:	47d0      	blx	sl
 802f9c8:	3001      	adds	r0, #1
 802f9ca:	d0ad      	beq.n	802f928 <_printf_i+0x15c>
 802f9cc:	6823      	ldr	r3, [r4, #0]
 802f9ce:	079b      	lsls	r3, r3, #30
 802f9d0:	d413      	bmi.n	802f9fa <_printf_i+0x22e>
 802f9d2:	68e0      	ldr	r0, [r4, #12]
 802f9d4:	9b03      	ldr	r3, [sp, #12]
 802f9d6:	4298      	cmp	r0, r3
 802f9d8:	bfb8      	it	lt
 802f9da:	4618      	movlt	r0, r3
 802f9dc:	e7a6      	b.n	802f92c <_printf_i+0x160>
 802f9de:	2301      	movs	r3, #1
 802f9e0:	4632      	mov	r2, r6
 802f9e2:	4649      	mov	r1, r9
 802f9e4:	4640      	mov	r0, r8
 802f9e6:	47d0      	blx	sl
 802f9e8:	3001      	adds	r0, #1
 802f9ea:	d09d      	beq.n	802f928 <_printf_i+0x15c>
 802f9ec:	3501      	adds	r5, #1
 802f9ee:	68e3      	ldr	r3, [r4, #12]
 802f9f0:	9903      	ldr	r1, [sp, #12]
 802f9f2:	1a5b      	subs	r3, r3, r1
 802f9f4:	42ab      	cmp	r3, r5
 802f9f6:	dcf2      	bgt.n	802f9de <_printf_i+0x212>
 802f9f8:	e7eb      	b.n	802f9d2 <_printf_i+0x206>
 802f9fa:	2500      	movs	r5, #0
 802f9fc:	f104 0619 	add.w	r6, r4, #25
 802fa00:	e7f5      	b.n	802f9ee <_printf_i+0x222>
 802fa02:	bf00      	nop
 802fa04:	08031f35 	.word	0x08031f35
 802fa08:	08031f46 	.word	0x08031f46

0802fa0c <memchr>:
 802fa0c:	b2c9      	uxtb	r1, r1
 802fa0e:	4603      	mov	r3, r0
 802fa10:	4402      	add	r2, r0
 802fa12:	b510      	push	{r4, lr}
 802fa14:	4293      	cmp	r3, r2
 802fa16:	4618      	mov	r0, r3
 802fa18:	d101      	bne.n	802fa1e <memchr+0x12>
 802fa1a:	2000      	movs	r0, #0
 802fa1c:	e003      	b.n	802fa26 <memchr+0x1a>
 802fa1e:	7804      	ldrb	r4, [r0, #0]
 802fa20:	3301      	adds	r3, #1
 802fa22:	428c      	cmp	r4, r1
 802fa24:	d1f6      	bne.n	802fa14 <memchr+0x8>
 802fa26:	bd10      	pop	{r4, pc}

0802fa28 <_free_r>:
 802fa28:	b538      	push	{r3, r4, r5, lr}
 802fa2a:	4605      	mov	r5, r0
 802fa2c:	2900      	cmp	r1, #0
 802fa2e:	d041      	beq.n	802fab4 <_free_r+0x8c>
 802fa30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802fa34:	1f0c      	subs	r4, r1, #4
 802fa36:	2b00      	cmp	r3, #0
 802fa38:	bfb8      	it	lt
 802fa3a:	18e4      	addlt	r4, r4, r3
 802fa3c:	f000 f8e0 	bl	802fc00 <__malloc_lock>
 802fa40:	4a1d      	ldr	r2, [pc, #116]	@ (802fab8 <_free_r+0x90>)
 802fa42:	6813      	ldr	r3, [r2, #0]
 802fa44:	b933      	cbnz	r3, 802fa54 <_free_r+0x2c>
 802fa46:	6063      	str	r3, [r4, #4]
 802fa48:	6014      	str	r4, [r2, #0]
 802fa4a:	4628      	mov	r0, r5
 802fa4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802fa50:	f000 b8dc 	b.w	802fc0c <__malloc_unlock>
 802fa54:	42a3      	cmp	r3, r4
 802fa56:	d908      	bls.n	802fa6a <_free_r+0x42>
 802fa58:	6820      	ldr	r0, [r4, #0]
 802fa5a:	1821      	adds	r1, r4, r0
 802fa5c:	428b      	cmp	r3, r1
 802fa5e:	bf01      	itttt	eq
 802fa60:	6819      	ldreq	r1, [r3, #0]
 802fa62:	685b      	ldreq	r3, [r3, #4]
 802fa64:	1809      	addeq	r1, r1, r0
 802fa66:	6021      	streq	r1, [r4, #0]
 802fa68:	e7ed      	b.n	802fa46 <_free_r+0x1e>
 802fa6a:	461a      	mov	r2, r3
 802fa6c:	685b      	ldr	r3, [r3, #4]
 802fa6e:	b10b      	cbz	r3, 802fa74 <_free_r+0x4c>
 802fa70:	42a3      	cmp	r3, r4
 802fa72:	d9fa      	bls.n	802fa6a <_free_r+0x42>
 802fa74:	6811      	ldr	r1, [r2, #0]
 802fa76:	1850      	adds	r0, r2, r1
 802fa78:	42a0      	cmp	r0, r4
 802fa7a:	d10b      	bne.n	802fa94 <_free_r+0x6c>
 802fa7c:	6820      	ldr	r0, [r4, #0]
 802fa7e:	4401      	add	r1, r0
 802fa80:	1850      	adds	r0, r2, r1
 802fa82:	6011      	str	r1, [r2, #0]
 802fa84:	4283      	cmp	r3, r0
 802fa86:	d1e0      	bne.n	802fa4a <_free_r+0x22>
 802fa88:	6818      	ldr	r0, [r3, #0]
 802fa8a:	685b      	ldr	r3, [r3, #4]
 802fa8c:	4408      	add	r0, r1
 802fa8e:	6053      	str	r3, [r2, #4]
 802fa90:	6010      	str	r0, [r2, #0]
 802fa92:	e7da      	b.n	802fa4a <_free_r+0x22>
 802fa94:	d902      	bls.n	802fa9c <_free_r+0x74>
 802fa96:	230c      	movs	r3, #12
 802fa98:	602b      	str	r3, [r5, #0]
 802fa9a:	e7d6      	b.n	802fa4a <_free_r+0x22>
 802fa9c:	6820      	ldr	r0, [r4, #0]
 802fa9e:	1821      	adds	r1, r4, r0
 802faa0:	428b      	cmp	r3, r1
 802faa2:	bf02      	ittt	eq
 802faa4:	6819      	ldreq	r1, [r3, #0]
 802faa6:	685b      	ldreq	r3, [r3, #4]
 802faa8:	1809      	addeq	r1, r1, r0
 802faaa:	6063      	str	r3, [r4, #4]
 802faac:	bf08      	it	eq
 802faae:	6021      	streq	r1, [r4, #0]
 802fab0:	6054      	str	r4, [r2, #4]
 802fab2:	e7ca      	b.n	802fa4a <_free_r+0x22>
 802fab4:	bd38      	pop	{r3, r4, r5, pc}
 802fab6:	bf00      	nop
 802fab8:	2000a1c8 	.word	0x2000a1c8

0802fabc <sbrk_aligned>:
 802fabc:	b570      	push	{r4, r5, r6, lr}
 802fabe:	4e0f      	ldr	r6, [pc, #60]	@ (802fafc <sbrk_aligned+0x40>)
 802fac0:	460c      	mov	r4, r1
 802fac2:	4605      	mov	r5, r0
 802fac4:	6831      	ldr	r1, [r6, #0]
 802fac6:	b911      	cbnz	r1, 802face <sbrk_aligned+0x12>
 802fac8:	f000 f8d4 	bl	802fc74 <_sbrk_r>
 802facc:	6030      	str	r0, [r6, #0]
 802face:	4621      	mov	r1, r4
 802fad0:	4628      	mov	r0, r5
 802fad2:	f000 f8cf 	bl	802fc74 <_sbrk_r>
 802fad6:	1c43      	adds	r3, r0, #1
 802fad8:	d103      	bne.n	802fae2 <sbrk_aligned+0x26>
 802fada:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 802fade:	4620      	mov	r0, r4
 802fae0:	bd70      	pop	{r4, r5, r6, pc}
 802fae2:	1cc4      	adds	r4, r0, #3
 802fae4:	f024 0403 	bic.w	r4, r4, #3
 802fae8:	42a0      	cmp	r0, r4
 802faea:	d0f8      	beq.n	802fade <sbrk_aligned+0x22>
 802faec:	1a21      	subs	r1, r4, r0
 802faee:	4628      	mov	r0, r5
 802faf0:	f000 f8c0 	bl	802fc74 <_sbrk_r>
 802faf4:	3001      	adds	r0, #1
 802faf6:	d1f2      	bne.n	802fade <sbrk_aligned+0x22>
 802faf8:	e7ef      	b.n	802fada <sbrk_aligned+0x1e>
 802fafa:	bf00      	nop
 802fafc:	2000a1c4 	.word	0x2000a1c4

0802fb00 <_malloc_r>:
 802fb00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802fb04:	1ccd      	adds	r5, r1, #3
 802fb06:	4606      	mov	r6, r0
 802fb08:	f025 0503 	bic.w	r5, r5, #3
 802fb0c:	3508      	adds	r5, #8
 802fb0e:	2d0c      	cmp	r5, #12
 802fb10:	bf38      	it	cc
 802fb12:	250c      	movcc	r5, #12
 802fb14:	2d00      	cmp	r5, #0
 802fb16:	db01      	blt.n	802fb1c <_malloc_r+0x1c>
 802fb18:	42a9      	cmp	r1, r5
 802fb1a:	d904      	bls.n	802fb26 <_malloc_r+0x26>
 802fb1c:	230c      	movs	r3, #12
 802fb1e:	6033      	str	r3, [r6, #0]
 802fb20:	2000      	movs	r0, #0
 802fb22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802fb26:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 802fbfc <_malloc_r+0xfc>
 802fb2a:	f000 f869 	bl	802fc00 <__malloc_lock>
 802fb2e:	f8d8 3000 	ldr.w	r3, [r8]
 802fb32:	461c      	mov	r4, r3
 802fb34:	bb44      	cbnz	r4, 802fb88 <_malloc_r+0x88>
 802fb36:	4629      	mov	r1, r5
 802fb38:	4630      	mov	r0, r6
 802fb3a:	f7ff ffbf 	bl	802fabc <sbrk_aligned>
 802fb3e:	1c43      	adds	r3, r0, #1
 802fb40:	4604      	mov	r4, r0
 802fb42:	d158      	bne.n	802fbf6 <_malloc_r+0xf6>
 802fb44:	f8d8 4000 	ldr.w	r4, [r8]
 802fb48:	4627      	mov	r7, r4
 802fb4a:	2f00      	cmp	r7, #0
 802fb4c:	d143      	bne.n	802fbd6 <_malloc_r+0xd6>
 802fb4e:	2c00      	cmp	r4, #0
 802fb50:	d04b      	beq.n	802fbea <_malloc_r+0xea>
 802fb52:	6823      	ldr	r3, [r4, #0]
 802fb54:	4639      	mov	r1, r7
 802fb56:	4630      	mov	r0, r6
 802fb58:	eb04 0903 	add.w	r9, r4, r3
 802fb5c:	f000 f88a 	bl	802fc74 <_sbrk_r>
 802fb60:	4581      	cmp	r9, r0
 802fb62:	d142      	bne.n	802fbea <_malloc_r+0xea>
 802fb64:	6821      	ldr	r1, [r4, #0]
 802fb66:	4630      	mov	r0, r6
 802fb68:	1a6d      	subs	r5, r5, r1
 802fb6a:	4629      	mov	r1, r5
 802fb6c:	f7ff ffa6 	bl	802fabc <sbrk_aligned>
 802fb70:	3001      	adds	r0, #1
 802fb72:	d03a      	beq.n	802fbea <_malloc_r+0xea>
 802fb74:	6823      	ldr	r3, [r4, #0]
 802fb76:	442b      	add	r3, r5
 802fb78:	6023      	str	r3, [r4, #0]
 802fb7a:	f8d8 3000 	ldr.w	r3, [r8]
 802fb7e:	685a      	ldr	r2, [r3, #4]
 802fb80:	bb62      	cbnz	r2, 802fbdc <_malloc_r+0xdc>
 802fb82:	f8c8 7000 	str.w	r7, [r8]
 802fb86:	e00f      	b.n	802fba8 <_malloc_r+0xa8>
 802fb88:	6822      	ldr	r2, [r4, #0]
 802fb8a:	1b52      	subs	r2, r2, r5
 802fb8c:	d420      	bmi.n	802fbd0 <_malloc_r+0xd0>
 802fb8e:	2a0b      	cmp	r2, #11
 802fb90:	d917      	bls.n	802fbc2 <_malloc_r+0xc2>
 802fb92:	1961      	adds	r1, r4, r5
 802fb94:	42a3      	cmp	r3, r4
 802fb96:	6025      	str	r5, [r4, #0]
 802fb98:	bf18      	it	ne
 802fb9a:	6059      	strne	r1, [r3, #4]
 802fb9c:	6863      	ldr	r3, [r4, #4]
 802fb9e:	bf08      	it	eq
 802fba0:	f8c8 1000 	streq.w	r1, [r8]
 802fba4:	5162      	str	r2, [r4, r5]
 802fba6:	604b      	str	r3, [r1, #4]
 802fba8:	4630      	mov	r0, r6
 802fbaa:	f000 f82f 	bl	802fc0c <__malloc_unlock>
 802fbae:	f104 000b 	add.w	r0, r4, #11
 802fbb2:	1d23      	adds	r3, r4, #4
 802fbb4:	f020 0007 	bic.w	r0, r0, #7
 802fbb8:	1ac2      	subs	r2, r0, r3
 802fbba:	bf1c      	itt	ne
 802fbbc:	1a1b      	subne	r3, r3, r0
 802fbbe:	50a3      	strne	r3, [r4, r2]
 802fbc0:	e7af      	b.n	802fb22 <_malloc_r+0x22>
 802fbc2:	6862      	ldr	r2, [r4, #4]
 802fbc4:	42a3      	cmp	r3, r4
 802fbc6:	bf0c      	ite	eq
 802fbc8:	f8c8 2000 	streq.w	r2, [r8]
 802fbcc:	605a      	strne	r2, [r3, #4]
 802fbce:	e7eb      	b.n	802fba8 <_malloc_r+0xa8>
 802fbd0:	4623      	mov	r3, r4
 802fbd2:	6864      	ldr	r4, [r4, #4]
 802fbd4:	e7ae      	b.n	802fb34 <_malloc_r+0x34>
 802fbd6:	463c      	mov	r4, r7
 802fbd8:	687f      	ldr	r7, [r7, #4]
 802fbda:	e7b6      	b.n	802fb4a <_malloc_r+0x4a>
 802fbdc:	461a      	mov	r2, r3
 802fbde:	685b      	ldr	r3, [r3, #4]
 802fbe0:	42a3      	cmp	r3, r4
 802fbe2:	d1fb      	bne.n	802fbdc <_malloc_r+0xdc>
 802fbe4:	2300      	movs	r3, #0
 802fbe6:	6053      	str	r3, [r2, #4]
 802fbe8:	e7de      	b.n	802fba8 <_malloc_r+0xa8>
 802fbea:	230c      	movs	r3, #12
 802fbec:	4630      	mov	r0, r6
 802fbee:	6033      	str	r3, [r6, #0]
 802fbf0:	f000 f80c 	bl	802fc0c <__malloc_unlock>
 802fbf4:	e794      	b.n	802fb20 <_malloc_r+0x20>
 802fbf6:	6005      	str	r5, [r0, #0]
 802fbf8:	e7d6      	b.n	802fba8 <_malloc_r+0xa8>
 802fbfa:	bf00      	nop
 802fbfc:	2000a1c8 	.word	0x2000a1c8

0802fc00 <__malloc_lock>:
 802fc00:	4801      	ldr	r0, [pc, #4]	@ (802fc08 <__malloc_lock+0x8>)
 802fc02:	f000 b847 	b.w	802fc94 <__retarget_lock_acquire_recursive>
 802fc06:	bf00      	nop
 802fc08:	2000a1cc 	.word	0x2000a1cc

0802fc0c <__malloc_unlock>:
 802fc0c:	4801      	ldr	r0, [pc, #4]	@ (802fc14 <__malloc_unlock+0x8>)
 802fc0e:	f000 b842 	b.w	802fc96 <__retarget_lock_release_recursive>
 802fc12:	bf00      	nop
 802fc14:	2000a1cc 	.word	0x2000a1cc

0802fc18 <_realloc_r>:
 802fc18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802fc1c:	4680      	mov	r8, r0
 802fc1e:	4615      	mov	r5, r2
 802fc20:	460c      	mov	r4, r1
 802fc22:	b921      	cbnz	r1, 802fc2e <_realloc_r+0x16>
 802fc24:	4611      	mov	r1, r2
 802fc26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802fc2a:	f7ff bf69 	b.w	802fb00 <_malloc_r>
 802fc2e:	b92a      	cbnz	r2, 802fc3c <_realloc_r+0x24>
 802fc30:	f7ff fefa 	bl	802fa28 <_free_r>
 802fc34:	2400      	movs	r4, #0
 802fc36:	4620      	mov	r0, r4
 802fc38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802fc3c:	f000 f82c 	bl	802fc98 <_malloc_usable_size_r>
 802fc40:	4285      	cmp	r5, r0
 802fc42:	4606      	mov	r6, r0
 802fc44:	d802      	bhi.n	802fc4c <_realloc_r+0x34>
 802fc46:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 802fc4a:	d8f4      	bhi.n	802fc36 <_realloc_r+0x1e>
 802fc4c:	4629      	mov	r1, r5
 802fc4e:	4640      	mov	r0, r8
 802fc50:	f7ff ff56 	bl	802fb00 <_malloc_r>
 802fc54:	4607      	mov	r7, r0
 802fc56:	2800      	cmp	r0, #0
 802fc58:	d0ec      	beq.n	802fc34 <_realloc_r+0x1c>
 802fc5a:	42b5      	cmp	r5, r6
 802fc5c:	462a      	mov	r2, r5
 802fc5e:	4621      	mov	r1, r4
 802fc60:	bf28      	it	cs
 802fc62:	4632      	movcs	r2, r6
 802fc64:	f7ff fbdb 	bl	802f41e <memcpy>
 802fc68:	4621      	mov	r1, r4
 802fc6a:	4640      	mov	r0, r8
 802fc6c:	463c      	mov	r4, r7
 802fc6e:	f7ff fedb 	bl	802fa28 <_free_r>
 802fc72:	e7e0      	b.n	802fc36 <_realloc_r+0x1e>

0802fc74 <_sbrk_r>:
 802fc74:	b538      	push	{r3, r4, r5, lr}
 802fc76:	2300      	movs	r3, #0
 802fc78:	4d05      	ldr	r5, [pc, #20]	@ (802fc90 <_sbrk_r+0x1c>)
 802fc7a:	4604      	mov	r4, r0
 802fc7c:	4608      	mov	r0, r1
 802fc7e:	602b      	str	r3, [r5, #0]
 802fc80:	f7d1 fe0e 	bl	80018a0 <_sbrk>
 802fc84:	1c43      	adds	r3, r0, #1
 802fc86:	d102      	bne.n	802fc8e <_sbrk_r+0x1a>
 802fc88:	682b      	ldr	r3, [r5, #0]
 802fc8a:	b103      	cbz	r3, 802fc8e <_sbrk_r+0x1a>
 802fc8c:	6023      	str	r3, [r4, #0]
 802fc8e:	bd38      	pop	{r3, r4, r5, pc}
 802fc90:	2000a1d0 	.word	0x2000a1d0

0802fc94 <__retarget_lock_acquire_recursive>:
 802fc94:	4770      	bx	lr

0802fc96 <__retarget_lock_release_recursive>:
 802fc96:	4770      	bx	lr

0802fc98 <_malloc_usable_size_r>:
 802fc98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802fc9c:	1f18      	subs	r0, r3, #4
 802fc9e:	2b00      	cmp	r3, #0
 802fca0:	bfbc      	itt	lt
 802fca2:	580b      	ldrlt	r3, [r1, r0]
 802fca4:	18c0      	addlt	r0, r0, r3
 802fca6:	4770      	bx	lr

0802fca8 <_init>:
 802fca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802fcaa:	bf00      	nop
 802fcac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802fcae:	bc08      	pop	{r3}
 802fcb0:	469e      	mov	lr, r3
 802fcb2:	4770      	bx	lr

0802fcb4 <_fini>:
 802fcb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802fcb6:	bf00      	nop
 802fcb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802fcba:	bc08      	pop	{r3}
 802fcbc:	469e      	mov	lr, r3
 802fcbe:	4770      	bx	lr
